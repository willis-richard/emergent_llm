"""
Strategy descriptions for CollectiveRiskDescription.

Generated with:
- Provider: Anthropic
- Model: claude-sonnet-4-0
"""


description_COOPERATIVE_1 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive threshold management and graduated responses to defection patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in round 1
- Rationale: Signal cooperative intent and give others the benefit of the doubt

### Rounds 2 to r-1: Adaptive Threshold System

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_in_previous_round) / n
```

**Step 2: Determine Required Cooperation Level**
```
required_rate = m / n  // Minimum threshold needed
safety_margin = 0.1    // Buffer to account for uncertainty
target_rate = required_rate + safety_margin
```

**Step 3: Decision Logic**
```
IF cooperation_rate >= target_rate:
    // Community is healthy, continue cooperating
    COOPERATE
ELSE IF cooperation_rate >= (required_rate - 0.05):
    // Close to threshold, be generous to help reach it
    COOPERATE
ELSE:
    // Apply forgiveness-based defection
    IF rounds_since_threshold_met <= 2:
        COOPERATE  // Short-term forgiveness
    ELSE:
        DEFECT     // Self-protection mode
```

**Step 4: Special Adaptive Rules**

*Recovery Incentive:*
```
IF (previous_round_cooperators == m-1) AND (I defected last round):
    COOPERATE  // Help push over threshold
```

*Momentum Preservation:*
```
IF cooperation_rate has been increasing for 2+ consecutive rounds:
    COOPERATE  // Support positive trends
```

### Final Round (r): Strategic Endgame
```
IF historical_cooperation_rate >= target_rate:
    COOPERATE  // Reward consistent cooperation
ELSE IF (m-1) players cooperated in round (r-1):
    COOPERATE  // Make the final threshold
ELSE:
    DEFECT     // Protect against last-round defection
```

## Key Features

### 1. Adaptive Threshold Management
- Dynamically adjusts expectations based on group behavior
- Uses safety margins to account for coordination failures
- Responds to trends, not just current state

### 2. Graduated Response System
- **Cooperative Phase**: When threshold consistently met
- **Cautious Phase**: When near threshold (forgiveness period)
- **Protection Phase**: When far below threshold (self-defense)

### 3. Recovery Facilitation
- Actively helps groups recover from coordination failures
- Provides extra cooperation when just one player short of threshold
- Supports positive momentum when cooperation is increasing

### 4. Exploitation Protection
- Limits consecutive cooperation when threshold consistently missed
- Protects individual payoffs during periods of widespread defection
- Balances individual and collective interests

## Edge Case Handling

**Very High Threshold (m close to n):**
- Increase safety margin to 0.15
- Extend forgiveness period to 3 rounds
- Prioritize threshold achievement over individual protection

**Very Low Threshold (m = 2):**
- Reduce safety margin to 0.05
- Apply stricter defection rules when cooperation rate drops
- Focus on maintaining high cooperation rates

**Short Games (r ≤ 5):**
- Cooperate for first 60% of rounds regardless of others' actions
- Only switch to protection mode in final 2 rounds if threshold consistently missed

**Large Groups (n > 10):**
- Use 3-round moving averages instead of single-round snapshots
- Increase forgiveness period proportionally to group size

## Robustness Features

1. **Against Pure Defectors**: Switches to protection mode quickly while still attempting recovery
2. **Against Tit-for-Tat**: Maintains cooperation through forgiveness periods
3. **Against Random Players**: Uses trend analysis and safety margins to handle noise
4. **Against Conditional Cooperators**: Aligns with threshold-based strategies naturally

This strategy balances the cooperative imperative with practical protection against exploitation, adapting its generosity based on the demonstrated cooperation level of the group while maintaining mechanisms to facilitate recovery and maintain collective success.
'''

description_COOPERATIVE_2 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy operates on the principle of "cooperative leadership with adaptive trust management." It aims to foster cooperation while protecting against exploitation through dynamic threshold adjustment based on observed behavior patterns.

## Strategy Components

### 1. Decision Rules

**Primary Decision Logic:**
- **Round 1**: Always cooperate (C) to signal cooperative intent
- **Rounds 2 to r-1**: Use adaptive threshold-based decision making
- **Round r (final)**: Use end-game specific logic

**Adaptive Threshold Calculation:**
```
cooperation_threshold = max(m, min(n-1, base_threshold + trust_adjustment))
```

Where:
- `base_threshold = m + ceiling((n-m)/3)` (slightly above minimum requirement)
- `trust_adjustment` ranges from -2 to +2 based on recent cooperation patterns

### 2. Trust Management System

**Trust Score Calculation:**
For each round t > 1, calculate:
```
recent_cooperation_rate = (cooperators in last 3 rounds) / (3 * n)
long_term_cooperation_rate = (total cooperators since round 1) / ((t-1) * n)
trust_score = 0.6 * recent_cooperation_rate + 0.4 * long_term_cooperation_rate
```

**Trust Adjustment Rules:**
- If `trust_score > 0.7`: `trust_adjustment = +2` (high trust, lower threshold)
- If `trust_score > 0.5`: `trust_adjustment = +1` (moderate trust)
- If `trust_score > 0.3`: `trust_adjustment = 0` (neutral)
- If `trust_score > 0.15`: `trust_adjustment = -1` (low trust)
- If `trust_score ≤ 0.15`: `trust_adjustment = -2` (very low trust, higher threshold)

### 3. Main Decision Process

**For rounds 2 to r-1:**
```
predicted_cooperators = estimate_cooperators_based_on_history()

if predicted_cooperators >= cooperation_threshold:
    play C
else if predicted_cooperators == cooperation_threshold - 1:
    // Critical decision point
    if trust_score > 0.4 OR recent_positive_trend():
        play C  // Take leadership role
    else:
        play D  // Protect against likely failure
else:
    play D  // Too few expected cooperators
```

### 4. Cooperation Estimation

**Historical Pattern Analysis:**
```
base_estimate = average_cooperators_last_3_rounds
trend_adjustment = (cooperators_last_round - cooperators_3_rounds_ago) / 2
final_estimate = base_estimate + trend_adjustment
```

**Positive Trend Detection:**
- Cooperation rate increased in at least 2 of the last 3 rounds
- OR cooperation rate in last round ≥ cooperation rate 3 rounds ago

### 5. Edge Case Handling

**Round 1 (Initialization):**
- Always cooperate to establish cooperative intent
- This signals trustworthiness to other cooperative strategies

**Final Round (r):**
- If current cooperation trend suggests threshold will be met: Cooperate
- If trust_score > 0.5: Cooperate (reward past cooperation)
- Otherwise: Apply same logic as regular rounds

**Threshold Edge Cases:**
- If m = n-1 (very high threshold): Be more willing to cooperate when predicted_cooperators = m-1
- If m = 2 (low threshold): Require higher trust_score for cooperation in uncertain situations

**Insufficient History (rounds 2-3):**
- Use simplified estimation based on round 1 results
- Apply conservative trust_adjustment = 0

### 6. Robustness Features

**Anti-Exploitation Measures:**
- Never cooperate if predicted cooperators < m-2 (except round 1)
- Implement "punishment phase" if cooperation rate drops below 20% for 3+ consecutive rounds
- During punishment phase: Only cooperate if predicted_cooperators ≥ cooperation_threshold + 1

**Forgiveness Mechanism:**
- After punishment phase, gradually return to normal trust levels if cooperation improves
- Reset trust_adjustment by +1 every 2 rounds of improved cooperation

**Adaptive Resilience:**
- If consistently failing to meet threshold despite cooperation, become more selective
- If consistently meeting threshold, become slightly more generous in cooperation decisions

## Strategy Summary

This strategy balances three key objectives:

1. **Cooperative Leadership**: Willing to cooperate when success seems likely, even taking calculated risks to help achieve the threshold
2. **Adaptive Learning**: Continuously updates expectations based on observed behavior patterns
3. **Self-Protection**: Guards against exploitation while maintaining cooperative potential

The strategy is designed to:
- Work well with other cooperative strategies by maintaining trust
- Resist pure defection strategies through adaptive thresholds
- Handle mixed environments by reading cooperation patterns
- Maintain robustness across different parameter combinations (n, m, k, r)

The key insight is that cooperation should be conditional on realistic expectations of others' behavior, while maintaining enough optimism and leadership to help coordination succeed when possible.
'''

description_COOPERATIVE_3 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective benefits while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adjusting based on observed group behavior.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test group willingness

### Rounds 2 to r-1: Adaptive Response
Calculate the **cooperation rate** from previous rounds:
```
cooperation_rate = total_cooperators_observed / (n * rounds_played)
```

**Cooperate if ANY of these conditions are met:**
1. **Threshold Achievement**: In the previous round, ≥ m players cooperated
2. **High Cooperation Trend**: cooperation_rate ≥ (m/n) + 0.1
3. **Close Call Recovery**: Previous round had (m-1) cooperators AND cooperation_rate ≥ (m/n) - 0.1
4. **Momentum Building**: Cooperation increased in the last 2 rounds AND current cooperation_rate ≥ (m/n) - 0.2

**Otherwise, defect**

### Final Round (Round r): Strategic Finish
- **Cooperate** if cooperation_rate ≥ (m/n) - 0.05
- **Defect** otherwise

## Key Features

### 1. Adaptive Learning
The strategy continuously monitors group cooperation patterns and adjusts its threshold for cooperation based on observed behavior. This prevents both naive cooperation with consistently defecting groups and premature abandonment of potentially cooperative groups.

### 2. Forgiveness Mechanism
Condition 3 allows for recovery from near-misses, recognizing that coordination failures can happen even in well-intentioned groups. This prevents spiraling defection after single coordination failures.

### 3. Momentum Recognition
Condition 4 rewards improving cooperation trends, encouraging groups that are learning to coordinate even if they haven't reached optimal levels yet.

### 4. End-game Adjustment
The final round uses a slightly more lenient threshold, recognizing that some players might defect in the last round regardless of previous cooperation.

## Robustness Features

### Against Defectors
- Quickly identifies consistently uncooperative groups through the cooperation_rate metric
- Switches to defection when cooperation_rate falls significantly below the threshold requirement

### Against Conditional Cooperators
- Rewards successful coordination (condition 1)
- Maintains cooperation with groups showing adequate cooperation levels
- Responds positively to improving trends

### Against Random Players
- The multiple conditions provide stability against noise
- Cooperation rate averaging smooths out random fluctuations

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    cooperation_rate = calculate_cooperation_rate(history)
    last_round_cooperators = count_cooperators(history[-1])
    
    if round == r:  // Final round
        return COOPERATE if cooperation_rate >= (m/n - 0.05) else DEFECT
    
    // Check all cooperation conditions
    if last_round_cooperators >= m:
        return COOPERATE
    
    if cooperation_rate >= (m/n + 0.1):
        return COOPERATE
    
    if last_round_cooperators == (m-1) and cooperation_rate >= (m/n - 0.1):
        return COOPERATE
    
    if is_improving_trend(history) and cooperation_rate >= (m/n - 0.2):
        return COOPERATE
    
    return DEFECT
```

## Strategic Advantages

1. **Encourages Cooperation**: Starts cooperatively and maintains cooperation with responsive groups
2. **Prevents Exploitation**: Switches to defection against consistently uncooperative opponents
3. **Promotes Learning**: Rewards groups that show improvement in coordination
4. **Handles Uncertainty**: Multiple conditions provide robustness against various opponent strategies
5. **Balances Risk**: Adjusts cooperation threshold based on observed group behavior rather than using fixed rules

This strategy should perform well against other cooperative strategies while protecting against exploitation by defectors, making it suitable for a tournament environment with diverse opponents.
'''

description_COOPERATIVE_4 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATBC)

## Core Philosophy
This strategy balances cooperation to achieve collective benefits while protecting against exploitation through adaptive threshold management and forgiveness mechanisms.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Cooperation
Use a dynamic cooperation threshold based on observed behavior:

1. **Calculate cooperation rate**: `coop_rate = total_cooperations_observed / (total_possible_cooperations)`
   - Where total_cooperations_observed = sum of all C actions by all players in previous rounds
   - Where total_possible_cooperations = n × (current_round - 1)

2. **Determine base threshold**: 
   ```
   if coop_rate >= 0.7: base_threshold = 0.6
   elif coop_rate >= 0.5: base_threshold = 0.7  
   elif coop_rate >= 0.3: base_threshold = 0.8
   else: base_threshold = 0.9
   ```

3. **Calculate recent trend**: Look at last 3 rounds (or fewer if near start):
   ```
   recent_coop_rate = cooperations_in_last_3_rounds / (n × min(3, current_round-1))
   trend_adjustment = (recent_coop_rate - coop_rate) × 0.3
   final_threshold = base_threshold + trend_adjustment
   ```

4. **Cooperation decision**:
   - **Cooperate** if `coop_rate >= final_threshold`
   - **Defect** otherwise

### Special Conditions Override:

1. **Threshold Achievement Bonus**: If the threshold m was met in the previous round, reduce final_threshold by 0.1 (more willing to cooperate)

2. **Near-Miss Incentive**: If exactly (m-1) players cooperated last round, always cooperate (try to push over threshold)

3. **Forgiveness Mechanism**: Every 4th round, if we've been defecting due to low cooperation, cooperate once to test if others are willing to restart cooperation

### Final Round (Round r): Strategic Endgame
- **Cooperate** if the overall cooperation rate across all previous rounds is ≥ 0.4
- **Defect** otherwise (since there's no future to build toward)

## Edge Case Handling

### Early Game (Rounds 1-3):
- Use more lenient thresholds since sample sizes are small
- Weight recent behavior more heavily than overall averages

### Late Game (Last 20% of rounds):
- Gradually increase cooperation threshold to account for potential endgame defection
- But maintain forgiveness opportunities to avoid premature breakdown

### Parameter Sensitivity:
- **High k values (k > 2.5)**: Reduce all thresholds by 0.1 (cooperation more valuable)
- **High m/n ratio (> 0.6)**: Increase base willingness to cooperate since threshold is harder to meet
- **Low m/n ratio (< 0.4)**: Can afford to be more selective about cooperation

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if others consistently defect
2. **Recovery Mechanism**: Periodic forgiveness attempts prevent permanent breakdown
3. **Trend Sensitivity**: Adapts quickly to changing opponent behavior patterns
4. **Threshold Awareness**: Specifically tries to help achieve the minimum threshold m when close

## Pseudocode Summary:
```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    coop_rate = calculate_overall_cooperation_rate(history)
    recent_rate = calculate_recent_cooperation_rate(history, 3)
    
    base_threshold = determine_base_threshold(coop_rate)
    trend_adjustment = (recent_rate - coop_rate) * 0.3
    final_threshold = base_threshold + trend_adjustment
    
    # Apply special conditions
    if threshold_met_last_round(history, m):
        final_threshold -= 0.1
    if cooperators_last_round == m-1:
        return COOPERATE
    if round % 4 == 0 and been_defecting_recently():
        return COOPERATE
    
    # Parameter adjustments
    if k > 2.5:
        final_threshold -= 0.1
    if m/n > 0.6:
        final_threshold -= 0.1
    
    if round == r:  # Final round
        return COOPERATE if coop_rate >= 0.4 else DEFECT
    
    return COOPERATE if coop_rate >= final_threshold else DEFECT
```

This strategy is cooperative by default but protects against exploitation while remaining adaptive to opponent behavior changes and maintaining hope for collective success.
'''

description_COOPERATIVE_5 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness, aiming to foster cooperation while protecting against exploitation. It recognizes that successful cooperation requires both initial trust-building and the ability to respond to emerging group dynamics.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and give the group the best chance to establish a cooperative norm from the beginning

### Rounds 2 to r-1: Adaptive Threshold Response

**Step 1: Calculate Cooperation Rate**
- Let `coop_rate = (total cooperators in previous round) / n`

**Step 2: Determine Base Cooperation Threshold**
- `base_threshold = m / n` (minimum required cooperation rate)

**Step 3: Apply Adaptive Adjustment**
- If recent cooperation has been successful (≥ m cooperators in previous round):
  - `adjusted_threshold = max(0.1, base_threshold - 0.15)`
  - Rationale: Lower bar when cooperation is working to maintain momentum
- If recent cooperation has failed (< m cooperators in previous round):
  - `adjusted_threshold = min(0.9, base_threshold + 0.1)`
  - Rationale: Require higher confidence when group is struggling

**Step 4: Decision Rule**
- **COOPERATE** if `coop_rate ≥ adjusted_threshold`
- **DEFECT** if `coop_rate < adjusted_threshold`

### Round r (Final Round): Reciprocal Cooperation
- **COOPERATE** if cooperation rate in round r-1 was ≥ `m/n`
- **DEFECT** otherwise
- Rationale: Mirror the group's recent commitment level, as there's no future to build toward

## Key Features

### 1. **Forgiveness and Recovery**
- The strategy doesn't permanently punish defection
- After failed cooperation, it only temporarily raises its standards
- This allows recovery if the group learns and improves

### 2. **Momentum Preservation**
- When cooperation is working (≥ m cooperators), the strategy becomes more lenient
- This helps maintain successful cooperative streaks

### 3. **Exploitation Protection**
- Won't cooperate when cooperation rate is very low
- Adjusts expectations based on recent group performance
- Final round protection against last-minute defection

### 4. **Parameter Sensitivity**
- Adapts thresholds based on the required minimum `m`
- Works across different group sizes `n`
- Accounts for different reward structures through base threshold calculation

## Example Behavior Patterns

**High-cooperation environment (most players cooperative):**
- Starts cooperating, sees high cooperation rates
- Lowers threshold, maintains cooperation even if a few defect
- Builds stable cooperative equilibrium

**Mixed environment (some cooperators, some defectors):**
- Starts cooperating, observes mixed results
- Adjusts threshold based on recent success/failure
- Cooperates when enough others do, defects when they don't

**Low-cooperation environment (mostly defectors):**
- Starts cooperating, sees low cooperation
- Raises threshold, becomes more selective
- Eventually defects consistently if group doesn't improve

## Robustness Features

- **No assumption of coordination:** Works without shared strategies or communication
- **History-dependent:** Uses all available information efficiently
- **Bounded rationality:** Simple rules that are easy to implement and understand
- **Equilibrium-seeking:** Tends toward stable group outcomes
- **Exploitation-resistant:** Protects against free-riders while remaining cooperative

This strategy aims to be a "conditional cooperator" that helps establish and maintain group cooperation while avoiding exploitation by adapting its cooperation standards based on observed group behavior.
'''

description_COOPERATIVE_6 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to foster cooperation while being robust to various opponent behaviors through dynamic threshold adjustment and forgiveness mechanisms.

## Decision Rules

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Rounds 2 to min(5, r/4)**: Continue cooperating to establish cooperative momentum and gather information about opponent tendencies

### Main Strategy (Adaptive Threshold System)
After the initial cooperation phase, use a dynamic threshold system:

1. **Calculate Cooperation Rate**: Track the overall cooperation rate across all players in recent rounds
   - Recent window = last min(3, r/3) rounds or all rounds if fewer exist
   - Cooperation rate = (total cooperations by all players) / (total possible cooperations in window)

2. **Dynamic Threshold Calculation**:
   - Base threshold = m/n (minimum cooperation rate needed)
   - Adjusted threshold = Base threshold + (1 - Base threshold) × 0.3
   - This creates a buffer above the minimum requirement

3. **Cooperation Decision**:
   - **Cooperate** if: Recent cooperation rate ≥ Adjusted threshold
   - **Defect** if: Recent cooperation rate < Adjusted threshold

### Forgiveness Mechanism
To prevent permanent defection spirals:
- If defecting for 2+ consecutive rounds AND the threshold was barely missed (within 0.1 of adjusted threshold), cooperate once as a "forgiveness probe"
- This helps restart cooperation if others are also trying to be cooperative

### Endgame Handling
- **Last 2 rounds**: Apply stricter threshold (Base threshold + 0.1) to account for potential endgame defection
- **Final round**: Cooperate if cooperation rate in previous round ≥ Base threshold, otherwise defect

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Use more lenient thresholds: Adjusted threshold = Base threshold + (1 - Base threshold) × 0.2
- Extend initial cooperation to min(3, r/3) rounds

### High Threshold Games (m/n > 0.7)
- Be more cooperative: Adjusted threshold = Base threshold + (1 - Base threshold) × 0.1
- Increase forgiveness: Probe cooperation every 3 defection rounds instead of 2

### Short Games (r ≤ 5)
- Cooperate for first r/2 rounds (rounded up)
- Then use simplified rule: Cooperate if last round's cooperation rate ≥ Base threshold

## Pseudocode Structure

```
Initialize:
  cooperation_history = []
  my_history = []
  
For each round t:
  If t <= initial_cooperation_rounds:
    action = COOPERATE
  
  Elif t >= r-1:  // Endgame
    recent_coop_rate = calculate_recent_cooperation_rate()
    threshold = base_threshold + 0.1
    action = COOPERATE if recent_coop_rate >= threshold else DEFECT
  
  Else:  // Main strategy
    recent_coop_rate = calculate_recent_cooperation_rate()
    adjusted_threshold = calculate_adjusted_threshold()
    
    If recent_coop_rate >= adjusted_threshold:
      action = COOPERATE
    Elif should_forgiveness_probe():
      action = COOPERATE
    Else:
      action = DEFECT
  
  Record action and observe others' actions
  Update cooperation_history
```

## Robustness Features

1. **Adaptive Learning**: Adjusts to actual cooperation levels rather than assuming fixed patterns
2. **Buffer Mechanism**: Uses thresholds above minimum requirements to account for coordination difficulties
3. **Forgiveness**: Prevents getting stuck in defection cycles
4. **Context Sensitivity**: Adapts behavior based on game parameters (n, m, r)
5. **Information Utilization**: Uses full history while weighting recent rounds more heavily

This strategy promotes cooperation through initial signaling and maintains it through adaptive thresholds, while protecting against exploitation through careful monitoring and responsive adjustment. It should perform well against various opponent types, from always-cooperators to conditional cooperators to moderate defectors.
'''

description_COOPERATIVE_7 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle of "conditional cooperation with forgiveness" - cooperating when there's reasonable evidence others will reciprocate, while being resilient to temporary setbacks.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and gather initial information about opponent behavior

### Rounds 2 to r-1: Adaptive Cooperation
The strategy maintains a **cooperation confidence score** for each round:

```
cooperation_confidence = base_cooperation_rate + momentum_adjustment + risk_adjustment
```

Where:
- **base_cooperation_rate**: Historical cooperation rate across all previous rounds
- **momentum_adjustment**: Recent trend in cooperation (last 3 rounds weighted more heavily)
- **risk_adjustment**: Adjustment based on how close we are to the threshold

**Cooperate if**: `cooperation_confidence × n ≥ m - 0.5`

This means we cooperate when we estimate at least `m` players (including ourselves) will cooperate.

### Round r (Final Round): Strategic Defection
- **Always defect** in the final round
- Rationale: No future rounds to maintain reputation; rational players will likely defect

## Detailed Implementation Logic

### Historical Analysis
Track three key metrics:
1. **Overall cooperation rate**: `total_cooperations / (total_rounds × n)`
2. **Recent cooperation trend**: Weighted average of last 3 rounds (weights: 0.5, 0.3, 0.2)
3. **Threshold achievement rate**: Proportion of rounds where threshold was met

### Momentum Adjustment
```
if recent_trend > overall_rate + 0.1:
    momentum_adjustment = +0.2
elif recent_trend < overall_rate - 0.1:
    momentum_adjustment = -0.1
else:
    momentum_adjustment = 0
```

### Risk Adjustment
```
participation_gap = m - expected_cooperators
if participation_gap <= 1:
    risk_adjustment = +0.3  // We might be pivotal
elif participation_gap >= 3:
    risk_adjustment = -0.2  // Likely failure anyway
else:
    risk_adjustment = 0
```

## Edge Case Handling

### Early Game (Rounds 2-3)
- Use higher base cooperation bias (+0.2) due to limited data
- Weight first round heavily in trend calculations

### Mid Game Crises
If threshold failed in 2+ consecutive recent rounds:
- Implement "recovery mode": cooperate for next 2 rounds regardless of confidence score
- Rationale: Break potential downward spirals through commitment

### Near-End Game (Round r-2, r-1)
- Reduce cooperation threshold slightly (-0.1) as strategic considerations increase
- But maintain cooperation if historical success rate > 70%

### Degenerate Cases
- If `m = n` (everyone must cooperate): Always cooperate except final round
- If `m = 2` and `n` is large: Use more conservative thresholds (require higher confidence)

## Robustness Features

### Against Always Defectors
- Strategy naturally reduces cooperation when facing consistent defectors
- Recovery mode prevents complete collapse if some cooperators remain

### Against Tit-for-Tat Variants
- Forgiveness built into momentum calculations
- Won't get stuck in mutual defection spirals

### Against Random Players
- Statistical approach handles noise well
- Confidence intervals account for randomness

### Against Strategic Final-Round Defectors
- Explicitly defects in final round
- Reduces cooperation threshold in near-end game

## Cooperative Alignment

This strategy maintains cooperative intent by:
1. **Starting cooperatively** to signal good intentions
2. **Forgiving temporary defections** through momentum smoothing
3. **Actively trying to achieve thresholds** through risk adjustments
4. **Implementing recovery modes** to rebuild cooperation after failures
5. **Being transparent and predictable** in its logic

The strategy succeeds when facing other conditional cooperators while protecting against exploitation by pure defectors. It adapts to the specific game parameters automatically and requires no coordination or shared understanding with opponents.
'''

description_COOPERATIVE_8 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATBC)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve mutual cooperation while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adjusting based on observed group behavior.

## Decision Rules

### Phase 1: Initial Cooperation Period (Rounds 1 to min(3, r/3))
- **Always cooperate** in the first few rounds to establish cooperative intent
- This creates a "grace period" for the group to demonstrate collective cooperation
- Duration scales with total rounds but has a minimum baseline

### Phase 2: Adaptive Learning Phase (Middle rounds)
The strategy maintains three key metrics:
1. **Recent Cooperation Rate (RCR)**: Fraction of players who cooperated in the last 2 rounds
2. **Historical Success Rate (HSR)**: Fraction of past rounds where threshold m was met
3. **Trend Direction**: Whether cooperation is increasing, stable, or decreasing

**Cooperation Decision Logic:**
```pseudocode
if RCR >= (m-1)/n:  # Close to threshold
    cooperate()
elif HSR >= 0.6 and trend != "decreasing":
    cooperate()
elif RCR >= m/n and my_recent_defections < 2:
    cooperate()
else:
    defect()
```

### Phase 3: Endgame Adjustment (Last 20% of rounds)
- **Cooperation Threshold Increase**: Require higher cooperation rates to continue cooperating
- **Reciprocity Focus**: More strongly weight recent behavior of other players
- **Last Round**: Always defect (since there's no future to incentivize)

## Edge Cases and Special Handling

### First Round
- Always cooperate to signal cooperative intent and gather initial information

### When Threshold is Consistently Met (HSR > 0.8)
- Continue cooperating but monitor for sudden shifts
- Occasionally defect (every 4-5 rounds) to test group stability

### When Threshold is Rarely Met (HSR < 0.3)
- Switch to more conservative approach: only cooperate when RCR > (m+1)/n
- Attempt to "rescue" cooperation every few rounds by cooperating even when others don't

### Small Group Dynamics (n ≤ 4)
- Be more forgiving and cooperative since each player's contribution is critical
- Extend initial cooperation period

### Large Groups (n > 10)
- Focus more on statistical trends rather than individual player tracking
- Be more willing to defect when personal contribution seems insignificant

## Adaptive Mechanisms

### Learning Component
The strategy tracks:
- **Player-specific patterns**: Who tends to cooperate/defect consistently
- **Round-specific patterns**: Are there cyclical behaviors?
- **Response patterns**: How does the group react to my cooperation/defection?

### Forgiveness Mechanism
- After 3+ consecutive rounds below threshold, attempt one "forgiveness round" of cooperation
- If this succeeds in reaching threshold, gradually increase cooperation probability

### Momentum Detection
- If cooperation is trending upward over last 3 rounds, be more likely to cooperate
- If trending downward, become more conservative

## Robustness Features

### Against Always Defectors
- Strategy will eventually learn and minimize cooperation when consistently exploited
- But maintains periodic "test cooperation" to detect strategy changes

### Against Always Cooperators
- Will maintain high cooperation to achieve mutual benefit
- Occasionally tests with defection to optimize personal payoff

### Against Conditional Cooperators
- Learns cooperation conditions and adapts accordingly
- Maintains reciprocal relationships

### Against Random Players
- Uses statistical averages rather than trying to predict individual behavior
- Maintains cooperation when group average supports it

## Summary
ATBC is designed to:
1. **Start cooperatively** to enable group coordination
2. **Learn adaptively** from group behavior patterns  
3. **Balance cooperation with self-protection** against exploitation
4. **Maintain flexibility** across different group compositions and game parameters
5. **Scale appropriately** with game size and duration

The strategy prioritizes achieving the cooperative equilibrium while maintaining robustness against various opponent strategies, making it suitable for diverse tournament conditions.
'''

description_COOPERATIVE_9 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle of "optimistic cooperation with defensive learning."

## Strategy Description

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent and test the waters
- **Rounds 2-3**: Continue cooperating to establish a cooperative baseline and gather information about opponent tendencies

### Adaptive Decision Framework

The strategy uses a dynamic cooperation threshold based on observed behavior:

**Cooperation Probability Formula**:
```
P(cooperate) = base_cooperation_rate × adaptation_factor × endgame_factor
```

Where:
- `base_cooperation_rate` = max(0.3, m/n + 0.1) - ensures minimum cooperation aligned with threshold needs
- `adaptation_factor` = learned adjustment based on opponents' behavior
- `endgame_factor` = adjustment for final rounds

### Historical Analysis Component

Track these metrics over the last max(3, r/4) rounds:
1. **Cooperation Rate**: Percentage of opponents who cooperated
2. **Threshold Achievement Rate**: How often the m-threshold was met
3. **Free-rider Ratio**: Players who consistently defect when threshold is met

### Adaptation Rules

**High Cooperation Environment** (cooperation_rate > m/n + 0.2):
- `adaptation_factor = 1.2`
- Increase cooperation as others are pulling their weight

**Moderate Cooperation Environment** (cooperation_rate between m/n - 0.1 and m/n + 0.2):
- `adaptation_factor = 1.0`
- Maintain baseline cooperation

**Low Cooperation Environment** (cooperation_rate < m/n - 0.1):
- `adaptation_factor = max(0.4, m/n - 0.2)`
- Reduce but don't eliminate cooperation to avoid collective failure

### Endgame Handling

**Final Round** (round r):
- If historical threshold achievement rate > 70%: Cooperate
- If total game payoff is below average and cooperation might help: Cooperate
- Otherwise: Defect (no future rounds to punish defection)

**Penultimate Round** (round r-1):
- Apply standard rules but increase cooperation slightly (`endgame_factor = 1.1`) to set up final round

**Other rounds**: `endgame_factor = 1.0`

### Special Cases

**Consistently Failed Thresholds**: If threshold hasn't been met in last 3 rounds and cooperation rate is very low (< m/n - 0.3):
- Switch to "emergency cooperation mode"
- Cooperate for 2 consecutive rounds to try to restart cooperation

**Near-Threshold Situations**: If exactly m-1 players cooperated last round:
- Increase cooperation probability by 0.3 (others might be waiting for leadership)

### Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round <= 3:
        return COOPERATE
    
    recent_history = get_last_rounds(history, max(3, r//4))
    cooperation_rate = calculate_cooperation_rate(recent_history)
    threshold_achievement_rate = calculate_threshold_rate(recent_history)
    
    # Calculate base cooperation rate
    base_rate = max(0.3, m/n + 0.1)
    
    # Calculate adaptation factor
    if cooperation_rate > m/n + 0.2:
        adaptation_factor = 1.2
    elif cooperation_rate > m/n - 0.1:
        adaptation_factor = 1.0
    else:
        adaptation_factor = max(0.4, m/n - 0.2)
    
    # Handle endgame
    if round == r:
        if threshold_achievement_rate > 0.7:
            return COOPERATE
        else:
            return DEFECT
    elif round == r - 1:
        endgame_factor = 1.1
    else:
        endgame_factor = 1.0
    
    # Special cases
    if consecutive_threshold_failures(recent_history) >= 3 and cooperation_rate < m/n - 0.3:
        return COOPERATE  # Emergency cooperation
    
    if last_round_had_exactly_m_minus_1_cooperators(history):
        cooperation_probability += 0.3
    
    # Final decision
    cooperation_probability = base_rate * adaptation_factor * endgame_factor
    return COOPERATE if random() < cooperation_probability else DEFECT
```

## Why This Strategy Works

1. **Cooperative Foundation**: Starts cooperatively and maintains minimum cooperation levels
2. **Adaptive Response**: Adjusts to opponent behavior without abandoning cooperation entirely
3. **Threshold Awareness**: Explicitly considers the m-threshold requirement in decision-making
4. **Robust to Exploitation**: Reduces cooperation when facing consistent defectors but doesn't eliminate it
5. **Endgame Optimization**: Handles final rounds strategically while maintaining cooperative intent
6. **Emergency Cooperation**: Has mechanisms to restart cooperation when collective failure looms

This strategy should perform well against both cooperative and mixed opponent pools while maintaining alignment with collective benefit goals.
'''

description_COOPERATIVE_10 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maintain cooperation while being resilient to exploitation. It operates on the principle that cooperation should be the default, but players must be held accountable for defection to prevent the tragedy of the commons.

## Strategy Overview

### 1. Decision Rules

**Primary Decision Logic:**
- **Cooperate** when the expected number of cooperators (including yourself) ≥ m
- **Defect** when cooperation appears futile or when punishment is warranted

**Cooperation Estimation Model:**
- Track each player's cooperation rate over recent history (last 3-5 rounds)
- Estimate probability each player will cooperate next round
- Calculate expected number of cooperators = sum of cooperation probabilities
- Add 1 if you plan to cooperate

**Punishment Mechanism:**
- If a player has defected in ≥60% of last 3 rounds AND their defection caused threshold failure, mark them for temporary punishment
- Punishment: Reduce your cooperation probability when that player's cooperation is needed for threshold

### 2. Edge Case Handling

**First Round:**
- Always cooperate (establish cooperative intent)

**Early Rounds (rounds 2-3):**
- Cooperate unless >50% of players defected in previous round
- Use optimistic estimates for unknown player tendencies

**Mid-Game Adaptation:**
- Use rolling window of last 3-5 rounds for player modeling
- If overall cooperation rate drops below 40%, switch to more defensive posture
- If threshold consistently met, maintain cooperation

**Final Rounds:**
- **Last 2 rounds:** Increase cooperation threshold slightly (require higher confidence)
- **Final round:** Cooperate if expected cooperators ≥ m-0.5 (slightly more lenient to avoid mutual defection spiral)

### 3. Adaptive Components

**Dynamic Threshold Adjustment:**
```
cooperation_threshold = m + adjustment_factor

Where adjustment_factor depends on:
- Recent success rate of achieving threshold
- Observed player reliability
- Round number (slightly higher in endgame)
```

**Trust Scoring:**
Each player gets a trust score (0-1) based on:
- Cooperation rate in recent rounds (60% weight)
- Whether they cooperated when their contribution was crucial (40% weight)

**Forgiveness Mechanism:**
- Players marked for punishment can restore trust by cooperating for 2+ consecutive rounds
- Gradually increase trust scores for reformed defectors

### 4. Detailed Algorithm

```pseudocode
ATCS_Strategy(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    // Analyze recent history (last min(3, round-1) rounds)
    recent_window = min(3, round-1)
    
    // Calculate trust scores for each player
    trust_scores = []
    for each player j ≠ i:
        cooperation_rate = count_cooperations(j, recent_window) / recent_window
        crucial_cooperation = count_crucial_cooperations(j, recent_window)
        trust_scores[j] = 0.6 * cooperation_rate + 0.4 * crucial_cooperation
    
    // Estimate expected cooperators (excluding self)
    expected_others_cooperating = sum(trust_scores)
    
    // Adjustment for game phase
    if round >= r-1:  // Last two rounds
        confidence_needed = 0.8
    else:
        confidence_needed = 0.7
    
    // Check if cooperation threshold likely to be met
    if expected_others_cooperating >= (m-1) * confidence_needed:
        // Check for punishment conditions
        if should_punish_defectors(history, recent_window):
            return DEFECT
        else:
            return COOPERATE
    
    // Threshold unlikely to be met
    // Last chance cooperation: if we're very close
    if expected_others_cooperating >= (m-1) * 0.5 and round < r:
        return COOPERATE
    
    return DEFECT

should_punish_defectors(history, window):
    // Only punish if punishment might encourage future cooperation
    if current_round >= total_rounds - 2:
        return false
    
    // Check for consistent defectors who caused threshold failures
    for each player j:
        recent_defection_rate = count_defections(j, window) / window
        caused_failures = count_threshold_failures_caused_by(j, window)
        
        if recent_defection_rate > 0.6 and caused_failures > 0:
            return true with 30% probability  // Probabilistic punishment
    
    return false
```

## Strategy Rationale

**Why This Strategy is Robust:**

1. **Adaptive Learning:** Uses recent history to model opponent behavior rather than assuming fixed types

2. **Forgiveness:** Allows players to rebuild trust, preventing permanent punishment spirals

3. **Probabilistic Elements:** Avoids being completely predictable while maintaining general cooperation

4. **Threshold Awareness:** Explicitly models whether the cooperation threshold can be met

5. **Phase-Appropriate Behavior:** Adjusts strategy based on game phase (early optimism, late caution)

**Cooperative Alignment:**
- Default to cooperation when feasible
- Only defect when cooperation is futile or strategic punishment is warranted
- Actively tries to maintain the cooperative equilibrium
- Forgives past defections when players reform

This strategy should perform well against both cooperative and moderately exploitative opponents while maintaining the collective benefit focus of the game.
'''

description_COOPERATIVE_11 = '''
# Adaptive Cooperative Strategy: "Threshold Guardian"

## Core Philosophy
This strategy aims to maintain cooperation while being robust against exploitation. It operates on the principle of being a "threshold guardian" - actively working to ensure the cooperation threshold is met while adapting to opponent behavior patterns.

## Decision Rules

### 1. First Round
**Always cooperate** in round 1 to signal cooperative intent and gather information about opponent tendencies.

### 2. Core Decision Logic
For rounds 2 through r, use this hierarchical decision process:

#### Step A: Threshold Safety Check
- Count expected cooperators based on recent history (last 3 rounds, or all rounds if fewer than 3)
- If expected cooperators ≥ m: Consider defecting for efficiency
- If expected cooperators < m: Strongly favor cooperating to meet threshold

#### Step B: Opponent Classification
Classify each opponent based on their last 3 actions (or all actions if fewer):
- **Reliable Cooperator**: Cooperated in ≥67% of recent rounds
- **Unreliable**: Cooperated in 33-66% of recent rounds  
- **Defector**: Cooperated in <33% of recent rounds

#### Step C: Adaptive Response
```
IF (expected_cooperators >= m + 1):
    # Threshold likely safe, can optimize
    IF (reliable_cooperators >= m):
        COOPERATE with 70% probability  # Still mostly cooperative
    ELSE:
        COOPERATE with 90% probability  # Less safe, stay cooperative
        
ELSE IF (expected_cooperators == m):
    # Right at threshold - be very cooperative
    COOPERATE with 95% probability
    
ELSE:
    # Below threshold - emergency cooperation
    COOPERATE with 100% probability
```

### 3. Last Round Special Case
In the final round (round r):
- If this is the only round where threshold might fail: **Always cooperate**
- Otherwise: Apply normal logic but increase cooperation probability by 20 percentage points (capped at 100%)

### 4. Exploitation Protection
Track if you're being systematically exploited:
- If you've cooperated in last 3 rounds but threshold was met with exactly m cooperators (suggesting others are free-riding on you), reduce cooperation probability by 10 percentage points for next round
- Reset this adjustment if cooperation falls below threshold

## Pseudocode

```python
def decide_action(round_num, history, n, m, k, r):
    if round_num == 1:
        return COOPERATE
    
    # Analyze recent history (last 3 rounds or all if fewer)
    recent_rounds = min(3, round_num - 1)
    
    # Count expected cooperators based on recent patterns
    expected_cooperators = 1  # Assume we cooperate
    for player in other_players:
        recent_coop_rate = count_cooperations(player, recent_rounds) / recent_rounds
        if recent_coop_rate >= 0.5:
            expected_cooperators += 1
    
    # Classify reliability of cooperative base
    reliable_cooperators = count_players_with_coop_rate(>= 0.67, recent_rounds)
    
    # Determine base cooperation probability
    if expected_cooperators >= m + 1:
        if reliable_cooperators >= m:
            base_prob = 0.7
        else:
            base_prob = 0.9
    elif expected_cooperators == m:
        base_prob = 0.95
    else:
        base_prob = 1.0
    
    # Last round adjustment
    if round_num == r:
        base_prob = min(1.0, base_prob + 0.2)
    
    # Exploitation protection
    if being_exploited():
        base_prob = max(0.5, base_prob - 0.1)
    
    return COOPERATE if random() < base_prob else DEFECT
```

## Key Features

1. **Adaptive**: Adjusts cooperation based on observed opponent behavior
2. **Threshold-aware**: Prioritizes meeting the cooperation threshold
3. **Robust**: Maintains high cooperation even when some players defect
4. **Exploitation-resistant**: Reduces cooperation if systematically exploited
5. **Endgame-conscious**: Increases cooperation in final rounds
6. **Probabilistic**: Uses randomization to avoid being perfectly predictable

This strategy balances the cooperative goal of achieving the threshold with the practical need to avoid being exploited, while remaining fundamentally cooperative in nature.
'''

description_COOPERATIVE_12 = '''
# Adaptive Threshold Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive risk management. It starts cooperatively but adjusts based on observed player behavior to maintain the delicate balance needed for collective success while protecting against exploitation.

## Strategy Components

### 1. Decision Rules

**Primary Cooperation Condition:**
Cooperate if the **Expected Cooperation Rate** ≥ **Dynamic Threshold**

Where:
- **Expected Cooperation Rate** = Predicted number of cooperators this round / n
- **Dynamic Threshold** = m/n (baseline) + **Risk Adjustment**

### 2. Expected Cooperation Rate Calculation

```
For each player j ≠ i:
  cooperation_probability[j] = weighted_average of:
    - Recent cooperation rate (last 3 rounds): weight 0.5
    - Overall cooperation rate: weight 0.3  
    - Reciprocity factor: weight 0.2

Expected_Cooperators = sum(cooperation_probability[j] for all j ≠ i)
Expected_Cooperation_Rate = Expected_Cooperators / n
```

**Reciprocity Factor:** If player j cooperated when I cooperated in previous rounds, increase their cooperation probability by 0.1. If they defected when I cooperated, decrease by 0.1.

### 3. Dynamic Threshold with Risk Adjustment

```
Base_Threshold = m / n

Risk_Adjustment = 0.1 * (Recent_Failure_Rate - Recent_Success_Rate)

Where:
- Recent_Failure_Rate = fraction of last 5 rounds where < m players cooperated
- Recent_Success_Rate = fraction of last 5 rounds where ≥ m players cooperated

Dynamic_Threshold = Base_Threshold + Risk_Adjustment
Dynamic_Threshold = max(0.3, min(0.8, Dynamic_Threshold))  // Bounded
```

### 4. Edge Case Handling

**First Round:** Always cooperate (establish cooperative intent)

**Rounds 2-3:** Cooperate if at least one other player cooperated in the previous round

**Last Round Special Rule:** 
- If we're consistently meeting the threshold (≥80% success rate), cooperate
- If we're failing frequently (<50% success rate), defect
- Otherwise, use standard decision rule but reduce Dynamic_Threshold by 0.05

**Insufficient History (rounds 2-4):**
Use simplified rule: Cooperate if (observed_cooperators_last_round / n) ≥ (m-1)/n

### 5. Adaptive Elements

**Learning Component:**
Track each player's cooperation patterns and adjust expectations accordingly:
- Consistent cooperators: High cooperation probability
- Conditional cooperators: Medium probability based on group behavior
- Frequent defectors: Low probability with potential for redemption

**Forgiveness Mechanism:**
If a player has defected frequently but cooperates for 2 consecutive rounds, increase their cooperation probability by 0.15 (giving them another chance).

**Crisis Response:**
If threshold failures occur in ≥60% of the last 5 rounds, temporarily increase cooperation probability for all players by 0.1 (attempt to restart cooperation).

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    if round <= 3:
        return simplified_early_decision(history)
    
    expected_cooperators = calculate_expected_cooperators(history)
    expected_rate = expected_cooperators / n
    
    dynamic_threshold = calculate_dynamic_threshold(history, m, n)
    
    if round == r:  // Last round
        dynamic_threshold = apply_last_round_adjustment(dynamic_threshold, history)
    
    if expected_rate >= dynamic_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Rationale

1. **Cooperative by Default:** Starts cooperatively and maintains cooperative bias when conditions are favorable

2. **Adaptive to Reality:** Adjusts expectations based on actual player behavior rather than wishful thinking

3. **Risk Aware:** Reduces cooperation when the group consistently fails to meet thresholds

4. **Forgiving:** Gives players second chances to encourage return to cooperation

5. **Endgame Aware:** Recognizes that last-round dynamics may differ and adjusts accordingly

6. **Robust:** Bounded thresholds prevent extreme reactions to temporary fluctuations

This strategy should perform well against various opponent types: it cooperates with other cooperative strategies, adapts to conditional cooperators, and protects itself against excessive defection while still attempting to achieve the collective benefit.
'''

description_COOPERATIVE_13 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It aims to establish and maintain cooperation while protecting against exploitation, using the game's threshold structure to create stable cooperative equilibria.

## Strategy Components

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Early Rounds (rounds 2 to min(5, r/3))**: Continue cooperating to establish a cooperative foundation and gather information about opponent behaviors

### 2. Adaptive Cooperation Threshold
The strategy maintains a dynamic cooperation threshold based on observed behavior:

```
cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)
adaptive_threshold = max(0.4, min(0.8, cooperation_rate * 1.2))
```

### 3. Main Decision Rules

**Primary Decision Logic:**
```
if current_round <= early_phase:
    return COOPERATE
    
if current_round == final_round:
    return apply_endgame_logic()
    
expected_cooperators = predict_cooperators_this_round()

if expected_cooperators >= (m - 1):
    # Threshold likely to be met even without me
    if my_recent_cooperation_rate > adaptive_threshold:
        return COOPERATE  # Maintain cooperative reputation
    else:
        return DEFECT     # Free-ride occasionally
        
elif expected_cooperators == (m - 2):
    # I'm potentially pivotal
    return COOPERATE
    
else:
    # Threshold unlikely to be met
    if cooperation_momentum > 0.6 AND expected_cooperators > (m * 0.5):
        return COOPERATE  # Try to build momentum
    else:
        return DEFECT     # Avoid being exploited
```

### 4. Cooperator Prediction Model
Track each player's cooperation patterns using weighted history:

```
For each player j:
    recent_weight = 0.7
    older_weight = 0.3
    
    recent_coop_rate = cooperations_last_3_rounds / 3
    overall_coop_rate = total_cooperations / total_rounds
    
    predicted_coop_prob = (recent_weight * recent_coop_rate) + 
                         (older_weight * overall_coop_rate)
```

### 5. Momentum Tracking
Monitor collective cooperation trends:

```
cooperation_momentum = (cooperations_last_2_rounds - cooperations_previous_2_rounds) / 
                      (2 * n)
```

### 6. Endgame Logic (Final Round)
```
if expected_cooperators >= (m - 1):
    return COOPERATE  # Secure the collective benefit
elif expected_cooperators == (m - 2) AND my_overall_cooperation_rate > 0.6:
    return COOPERATE  # Honor cooperative relationship
else:
    return DEFECT     # No future rounds to maintain reputation
```

### 7. Special Adaptations

**High Cooperation Environment** (when group cooperation rate > 0.7):
- Increase own cooperation rate to 0.85+
- Only defect when clearly above threshold

**Low Cooperation Environment** (when group cooperation rate < 0.3):
- Switch to defensive mode: only cooperate when pivotal
- Attempt cooperation bursts every few rounds to test for recovery

**Moderate Environment** (0.3 ≤ cooperation rate ≤ 0.7):
- Use standard adaptive logic
- Gradually adjust threshold based on observed patterns

## Key Features

1. **Threshold Awareness**: Explicitly considers the m-threshold when making decisions
2. **Adaptive Learning**: Updates behavior based on observed opponent patterns
3. **Cooperative Signaling**: Maintains cooperative reputation while avoiding exploitation
4. **Pivotal Recognition**: Cooperates when individual action is likely decisive
5. **Momentum Building**: Attempts to create positive cooperation spirals
6. **Endgame Optimization**: Adjusts behavior for final round dynamics

## Robustness Properties

- **Against Always Defect**: Learns quickly and switches to defensive mode
- **Against Always Cooperate**: Takes advantage when safe, but maintains some cooperation
- **Against Tit-for-Tat variants**: Establishes mutual cooperation through early signaling
- **Against Random players**: Uses statistical prediction to make optimal threshold decisions
- **Against Conditional Cooperators**: Aligns with threshold-based logic for mutual benefit

This strategy aims to find and maintain cooperative equilibria while remaining robust against exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_14 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while maintaining individual rationality. It adapts to the cooperation level observed in the game and uses a dynamic threshold approach to balance risk and reward.

## Decision Rules

### 1. First Round Decision
**Always cooperate in round 1** to signal cooperative intent and gather information about other players' tendencies.

### 2. Main Decision Algorithm
For rounds 2 through r-1, use the following adaptive threshold mechanism:

```pseudocode
observed_cooperation_rate = count_cooperators_last_round / n
historical_cooperation_rate = total_cooperators_all_previous_rounds / (n * rounds_played)

// Calculate dynamic cooperation threshold
base_threshold = m / n  // Minimum threshold needed
cooperation_bonus = max(0, historical_cooperation_rate - base_threshold)
dynamic_threshold = base_threshold - (cooperation_bonus * 0.3)

// Cooperate if recent cooperation suggests threshold will likely be met
if observed_cooperation_rate >= dynamic_threshold:
    return COOPERATE
else:
    return DEFECT
```

### 3. Last Round Special Rule
In the final round r:
- If historical cooperation rate ≥ (m/n), cooperate
- Otherwise, defect (since there's no future to build reputation for)

## Key Adaptive Features

### A. Learning from History
The strategy tracks two metrics:
- **Recent cooperation**: Last round's cooperation level (weights recent behavior heavily)
- **Historical cooperation**: Average cooperation rate across all previous rounds

### B. Dynamic Threshold Adjustment
- When others cooperate frequently above the minimum threshold, lower our cooperation threshold (be more trusting)
- When cooperation is barely meeting thresholds, maintain stricter requirements
- This prevents exploitation while encouraging high-cooperation equilibria

### C. Risk Management
- Never cooperate if fewer than (m-2) players cooperated last round, unless n is very small
- This prevents throwing away payoff when threshold clearly won't be met

## Handling Edge Cases

### Small Group Dynamics (n ≤ 4)
- Be more forgiving of defection (reduce threshold by 0.1)
- Your individual contribution matters more in small groups

### High Threshold Games (m > 0.7n)
- Cooperate more aggressively in early rounds to establish high-cooperation norm
- Switch to more conservative approach only if clear pattern of insufficient cooperation emerges

### Low Reward Games (k ≤ 1.5)
- Increase defection threshold slightly since cooperation payoff is marginal
- Be more sensitive to defection signals from others

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial Trust**: Always starting with cooperation
2. **Forgiveness**: Using historical averages prevents overreacting to single-round defections
3. **Efficiency Seeking**: Dynamically adjusting to find optimal cooperation levels
4. **Collective Rationality**: Recognizing that mutual cooperation creates the highest total welfare

## Robustness Features

- **Against Always-Defectors**: Will eventually learn and defect when threshold clearly won't be met
- **Against Tit-for-Tat**: Cooperates with reciprocal strategies naturally
- **Against Random Players**: Uses statistical averaging to handle noise
- **Against Exploiters**: Dynamic threshold prevents consistent exploitation while maintaining cooperation when beneficial

## Expected Tournament Performance

This strategy should perform well against:
- Other cooperative strategies (mutual cooperation)
- Reciprocal strategies (learns their patterns)
- Mixed populations (adapts to cooperation level)

It maintains competitive individual payoffs while promoting collective welfare, making it robust for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_15 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, aiming to achieve the collective benefit while protecting against exploitation. It dynamically adjusts cooperation based on observed group behavior and game parameters.

## Decision Rules

### Initial Cooperation Phase (First Round)
- **Always cooperate in round 1** to signal cooperative intent and test group dynamics

### Adaptive Cooperation (Rounds 2 to r-1)

**Step 1: Calculate Cooperation Rate**
- Track the average cooperation rate over all previous rounds: `avg_coop_rate = total_cooperations / (previous_rounds × n)`

**Step 2: Assess Threshold Viability**
- Calculate "threshold proximity": How close the group typically gets to the minimum threshold `m`
- `avg_cooperators = avg_coop_rate × n`

**Step 3: Decision Logic**
```pseudocode
if avg_cooperators >= m:
    // Group regularly meets threshold - safe to cooperate
    cooperate = true
    
else if avg_cooperators >= (m - 1):
    // Group is close to threshold - cooperate with high probability
    // Cooperate 80% of the time to help bridge the gap
    cooperate = (random() < 0.8)
    
else if avg_cooperators >= (m - 2) and previous_round_met_threshold:
    // Group struggling but showed recent success - give another chance
    cooperate = true
    
else if round_number <= r/3:
    // Early game - be more forgiving, try to establish cooperation
    cooperate = (avg_coop_rate > 0.3)
    
else:
    // Group consistently failing threshold - protect yourself
    cooperate = false
```

### Final Round Strategy (Round r)
- **Cooperate if and only if** the average cooperation rate in previous rounds is ≥ m/n
- This prevents last-round defection cascades while maintaining cooperation in successful groups

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Be more cooperative since each player's contribution is critical
- Cooperate unless fewer than 50% cooperated in the previous round

### High Threshold Games (m > n/2)
- Increase cooperation probability by 20% in all decision rules
- These games require strong collective action

### Low Reward Games (k < 1.5)
- Decrease cooperation probability by 15% to account for lower incentives
- Still maintain cooperative stance but be more cautious

### First-Time Threshold Achievement
- When the group first meets the threshold after failing, always cooperate in the next round to reinforce success

## Robustness Features

**Memory Buffer**: Track the last 3 rounds more heavily than earlier rounds to adapt quickly to changing group dynamics:
```pseudocode
recent_weight = 0.6
historical_weight = 0.4
weighted_coop_rate = recent_weight × recent_avg + historical_weight × historical_avg
```

**Exploitation Protection**: If cooperation rate drops below 25% for 3 consecutive rounds, switch to defensive mode (only cooperate if previous round met threshold).

**Recovery Mechanism**: After entering defensive mode, return to normal strategy if cooperation rate rises above m/n for 2 consecutive rounds.

## Cooperative Alignment

This strategy maintains a fundamentally cooperative orientation by:

1. **Leading by Example**: Always cooperating in round 1
2. **Forgiveness**: Giving struggling groups multiple chances, especially early in the game
3. **Support**: Providing extra cooperation when groups are close to the threshold
4. **Stability**: Continuing to cooperate in successful groups rather than free-riding
5. **Recovery**: Quickly returning to cooperation when groups show improvement

The strategy recognizes that achieving the collective good requires both trust-building and strategic adaptation to group dynamics, while maintaining protection against persistent free-riders.
'''

description_COOPERATIVE_16 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATBC)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle that cooperation should be conditional on evidence that others are also willing to contribute toward the collective goal.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3 or first 25% of rounds, whichever is smaller)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating for 2-3 initial rounds to establish baseline cooperation levels
- This creates a "trust-building" phase where we demonstrate good faith

### Main Strategy (After initial phase until final rounds)

**Cooperation Decision Based on Historical Threshold Achievement:**

1. **Calculate cooperation rate**: Track the percentage of rounds where the threshold m was met in previous rounds
2. **Calculate average cooperator count**: Track how many players typically cooperate per round

**Cooperate if ANY of these conditions hold:**
- Threshold was met in the last round AND my cooperation was needed (exactly m cooperators total)
- Threshold achievement rate ≥ 70% over the last 5 rounds
- Average cooperators per round ≥ m over the last 3 rounds
- Current round number ≤ 0.8 × r (give cooperation more chances early/mid-game)

**Additional cooperation triggers:**
- If threshold was missed in the last round by exactly 1 cooperator (suggesting I should step up)
- If there's been a recent positive trend in cooperation (more cooperators in the last round than the round before)

### Endgame Strategy (Final 20% of rounds)
- **Intensified cooperation**: Lower the cooperation threshold requirements
- Cooperate if threshold achievement rate ≥ 50% in recent history
- In the final 2 rounds: cooperate if there's any reasonable chance of reaching threshold (≥ m-2 cooperators in recent rounds)

## Edge Case Handling

### First Round
- Always cooperate to establish cooperative credentials and encourage reciprocal cooperation

### Last Round
- Cooperate if the historical pattern suggests others will likely cooperate (cooperation rate ≥ 60% in recent rounds)
- Defect only if cooperation has been consistently failing (< 40% threshold achievement rate)

### Low Information Scenarios (Early rounds)
- Default to cooperation when uncertain
- Use optimistic assumptions about others' cooperative intent

### Threshold Consistently Missed
- If threshold hasn't been met for 4+ consecutive rounds, temporarily defect for 1-2 rounds
- Then return to cooperation to test if others are willing to restart cooperative efforts

## Adaptive Elements

### Learning Components
1. **Cooperation trend tracking**: Monitor whether cooperation is increasing, stable, or declining
2. **Threshold sensitivity**: Adjust cooperation likelihood based on how close recent attempts came to meeting threshold
3. **Player behavior clustering**: Infer approximate number of "always cooperators," "always defectors," and "conditional cooperators"

### Robustness Features
1. **Anti-exploitation protection**: Don't cooperate indefinitely if threshold is never met
2. **Recovery mechanism**: Periodically attempt cooperation even after defection periods
3. **Endgame intensification**: Increase cooperation in final rounds when reputation effects diminish

## Pseudocode Structure

```
if round_number == 1:
    return COOPERATE
    
if round_number <= min(3, r * 0.25):
    return COOPERATE
    
recent_threshold_rate = calculate_threshold_achievement_rate(last_5_rounds)
recent_avg_cooperators = calculate_average_cooperators(last_3_rounds)
last_round_cooperators = count_cooperators(last_round)

# Main cooperation logic
if last_round_threshold_met AND my_cooperation_was_needed:
    return COOPERATE
elif recent_threshold_rate >= 0.7:
    return COOPERATE
elif recent_avg_cooperators >= m:
    return COOPERATE
elif round_number <= 0.8 * r AND recent_threshold_rate >= 0.5:
    return COOPERATE
elif last_round_cooperators == m - 1:  # One short of threshold
    return COOPERATE
elif round_number > 0.8 * r:  # Endgame
    if recent_threshold_rate >= 0.5 OR recent_avg_cooperators >= m - 1:
        return COOPERATE

return DEFECT
```

## Strategic Rationale

This strategy is designed to:
1. **Signal cooperation** early to encourage others
2. **Reward successful coordination** by continuing to cooperate when thresholds are met
3. **Adapt to group dynamics** by tracking cooperation patterns
4. **Protect against exploitation** by defecting when cooperation consistently fails
5. **Maximize endgame cooperation** when reputation effects are strongest

The strategy is robust against various opponent types while maintaining a fundamentally cooperative orientation that seeks to achieve the collectively optimal outcome.
'''

description_COOPERATIVE_17 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining a balance between cooperation and conditional reciprocity. It adapts to the group's cooperative tendencies while ensuring the threshold is met when possible.

## Decision Framework

### Round 1: Optimistic Cooperation
Always **COOPERATE** in the first round to signal cooperative intent and establish a positive baseline.

### Rounds 2 to r-1: Adaptive Threshold Monitoring

**Primary Decision Rule:**
```
If (estimated_cooperators_this_round >= m - 1):
    COOPERATE
Else:
    DEFECT
```

Where `estimated_cooperators_this_round` is calculated as:
1. **Base estimate**: Count players who cooperated in the previous round
2. **Trend adjustment**: Apply momentum factor based on recent cooperation trends
3. **Conservative buffer**: Subtract 1 from estimate to account for uncertainty

**Detailed Estimation Process:**
```pseudocode
cooperated_last_round = count_cooperators(previous_round)
recent_trend = (cooperators_round_t-1 - cooperators_round_t-2) 
trend_factor = max(-1, min(1, recent_trend * 0.5))
base_estimate = cooperated_last_round + trend_factor
estimated_cooperators = max(0, base_estimate - 1)  // Conservative buffer
```

### Final Round (Round r): Conditional Cooperation
In the last round, use a stricter threshold to avoid being exploited when others might defect:
```
If (cooperators_in_previous_round >= m + 1):
    COOPERATE
Else:
    DEFECT
```

## Adaptive Mechanisms

### 1. Learning Component
Track each player's cooperation rate over the game:
- **Reliable cooperators**: Players with >70% cooperation rate
- **Occasional cooperators**: Players with 30-70% cooperation rate  
- **Frequent defectors**: Players with <30% cooperation rate

Adjust estimates by giving more weight to reliable cooperators' recent actions.

### 2. Threshold Security
When cooperation levels are borderline (within 1-2 players of threshold):
- Cooperate more readily to ensure threshold is met
- Apply "insurance cooperation" - cooperate if you're among the most reliable players and threshold appears at risk

### 3. Recovery Protocol
If threshold was missed in the previous round despite your cooperation:
- Reduce cooperation probability by 20% for the next round
- Gradually restore normal cooperation as group performance improves

## Edge Case Handling

### Very High Threshold (m close to n)
When m > 0.8×n, adopt more aggressive cooperation:
- Cooperate if estimated cooperators >= m - 2 (larger buffer)
- Weight recent cooperation trends more heavily

### Very Low Threshold (m ≤ 3)
When threshold is easily met:
- Still maintain conditional cooperation to avoid exploitation
- Focus on reciprocity rather than threshold achievement

### Highly Volatile Groups
If cooperation rates swing dramatically (>50% change between rounds):
- Use 3-round rolling average instead of single-round estimates
- Increase conservative buffer to 2 players

## Strategic Rationale

1. **Cooperative Spirit**: Starts cooperatively and maintains cooperation when threshold achievement seems likely
2. **Threshold Focus**: Primary goal is ensuring the group benefit is achieved
3. **Exploitation Protection**: Conservative estimation prevents being taken advantage of by free-riders
4. **Adaptive Learning**: Adjusts to group dynamics and individual player patterns
5. **Endgame Awareness**: Accounts for last-round defection temptation

## Summary Decision Tree
```
Round 1: → COOPERATE

Rounds 2 to r-1:
├─ If estimated_cooperators ≥ m-1 → COOPERATE
├─ If threshold was missed last round despite our cooperation → 20% less likely to cooperate
└─ Otherwise → DEFECT

Round r:
├─ If cooperators_last_round ≥ m+1 → COOPERATE  
└─ Otherwise → DEFECT
```

This strategy balances cooperation with strategic protection, adapts to group behavior patterns, and maintains focus on achieving the collective benefit while avoiding exploitation.
'''

description_COOPERATIVE_18 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against systematic exploitation. It operates on the principle that cooperation should be sustained when there's evidence it can succeed, but should be withdrawn strategically when facing predominantly non-cooperative opponents.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Start with cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-factor decision system:

1. **Cooperation Rate Assessment**: Calculate the average cooperation rate across all players in previous rounds
   ```
   avg_coop_rate = (total_cooperations_observed) / (n * rounds_played)
   ```

2. **Recent Trend Analysis**: Weight recent rounds more heavily
   ```
   recent_weight = 0.7 * (cooperations_last_round / n) + 0.3 * (cooperations_two_rounds_ago / n)
   ```

3. **Threshold Achievement Probability**: Estimate likelihood of reaching threshold m
   ```
   expected_cooperators = avg_coop_rate * n + random_factor
   ```

**Decision Rule for Rounds 2 to r-1:**
Cooperate if ANY of the following conditions are met:
- Recent trend shows cooperation rate ≥ (m-1)/n (nearly sufficient cooperation)
- Average cooperation rate ≥ m/n AND recent trend ≥ 0.3 (sustained cooperative environment)
- Last round achieved threshold AND ≥ 50% of players cooperated (momentum preservation)
- Current round number ≤ r/3 AND average cooperation rate ≥ 0.4 (early game cooperation building)

### Final Round: Strategic Cooperation
- **Cooperate** if the average cooperation rate across all previous rounds ≥ (m-0.5)/n
- **Defect** otherwise
- Rationale: In the final round, cooperate only if there's strong evidence that enough others will cooperate to meet the threshold

## Edge Case Handling

### Low Cooperation Environment
If average cooperation rate falls below 0.2 for 3+ consecutive rounds:
- Switch to "conditional cooperation" mode
- Cooperate only if previous round met the threshold m
- This prevents exploitation while remaining ready to rejoin cooperative equilibrium

### High Cooperation Environment
If cooperation rate consistently exceeds 0.8:
- Continue cooperating to maintain the beneficial equilibrium
- Even if slightly exploited, the collective benefit justifies continued cooperation

### Threshold Edge Cases
- If m = n-1 (very high threshold): Increase cooperation probability by 20% to account for coordination difficulty
- If m = 2 (very low threshold): Reduce cooperation in later rounds if facing mostly defectors (cooperation rate < 0.3)

## Robustness Features

### Against Always-Defect Opponents
- Strategy will identify consistent defection patterns within 2-3 rounds
- Will reduce cooperation but not eliminate it entirely (maintains 10-20% cooperation rate to test for strategy changes)

### Against Conditional Cooperators
- Responds positively to reciprocal cooperation
- Maintains cooperation when mutual cooperation is working

### Against Random Players
- Uses trend analysis to distinguish random play from strategic defection
- More forgiving of occasional defection when overall cooperation levels are adequate

### Against Sophisticated Strategies
- Doesn't rely on fixed patterns that can be easily exploited
- Adapts to changing opponent behavior throughout the game

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    avg_coop_rate = calculate_average_cooperation_rate(history)
    recent_trend = calculate_recent_trend(history)
    
    if round == r:  // Final round
        return COOPERATE if avg_coop_rate >= (m-0.5)/n else DEFECT
    
    // Main decision logic
    threshold_ratio = m/n
    
    if recent_trend >= (m-1)/n:
        return COOPERATE
    
    if avg_coop_rate >= threshold_ratio AND recent_trend >= 0.3:
        return COOPERATE
    
    if last_round_met_threshold(history) AND last_round_coop_rate >= 0.5:
        return COOPERATE
    
    if round <= r/3 AND avg_coop_rate >= 0.4:
        return COOPERATE
    
    return DEFECT
```

This strategy is designed to foster cooperation when possible, adapt to opponent behavior patterns, and maintain robustness against various types of non-cooperative strategies while still pursuing the collectively optimal outcome.
'''

description_COOPERATIVE_19 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maintain cooperative equilibria while being robust against exploitation. It balances optimism about cooperation with realistic adaptation to actual player behavior.

## Strategy Overview

### Phase 1: Cooperative Initialization (Rounds 1-3)
- **Always cooperate** in the first 3 rounds regardless of others' actions
- This establishes cooperative intent and gives the group a chance to reach the threshold
- Rationale: Early cooperation is necessary to establish beneficial patterns, and the cost of being exploited early is outweighed by the potential to establish lasting cooperation

### Phase 2: Adaptive Cooperation (Rounds 4 to r-2)

**Decision Rule:**
```
If (cooperation_rate_last_3_rounds >= threshold_buffer) AND 
   (projected_cooperators >= m):
    Cooperate
Else:
    Defect
```

Where:
- `threshold_buffer = max(0.6, m/n - 0.1)` 
- `projected_cooperators = floor(cooperation_rate_last_3_rounds × n)`
- `cooperation_rate_last_3_rounds` = proportion of all players who cooperated in last 3 rounds

**Adaptive Learning Component:**
- Track each individual player's cooperation frequency over the last 5 rounds
- If a player has cooperated ≥80% in recent rounds, count them as "reliable cooperator"
- If number of reliable cooperators ≥ m, cooperate regardless of recent group rate

### Phase 3: Endgame Strategy (Last 2 rounds)

**Round r-1 (Second to last):**
- If group cooperation rate over all previous rounds ≥ 0.7: Cooperate
- Else: Mirror the most common action from the previous round

**Round r (Final round):**
- If cumulative cooperation rate ≥ 0.8 AND threshold was met in ≥70% of previous rounds: Cooperate
- Else: Defect

## Key Features

### 1. Threshold Buffer System
- Uses `threshold_buffer` slightly below the theoretical minimum (m/n) to account for coordination failures
- Prevents strategy from being too optimistic when cooperation is marginal

### 2. Multi-Timeframe Analysis
- Short-term (3 rounds): Captures recent trends
- Medium-term (5 rounds): Identifies reliable individual cooperators  
- Long-term (all rounds): Informs endgame decisions

### 3. Individual Player Tracking
- Maintains cooperation profiles for each player
- Allows identification of consistent cooperators vs. exploiters
- Enables cooperation even when group rate is low if enough reliable cooperators exist

### 4. Robust Endgame
- Recognizes that final rounds create defection incentives
- Uses historical success rate to guide endgame decisions
- Balances maintaining cooperation with protecting against last-round exploitation

## Edge Cases and Robustness

**Against Always Defectors:**
- Strategy will detect low cooperation rates and switch to defection after round 6
- Minimizes losses while still giving cooperation a fair chance

**Against Conditional Cooperators:**
- Individual tracking helps identify and maintain cooperation with like-minded players
- Threshold buffer prevents coordination failures from spiraling

**Against Mixed Strategies:**
- Adaptive timeframes capture both short-term fluctuations and long-term trends
- Strategy can maintain cooperation even with some noise in the system

**Small vs. Large Groups:**
- Threshold buffer scales with group size (m/n ratio)
- Individual tracking becomes more valuable in larger groups

## Pseudocode Summary

```python
def decide_action(round_num, history, n, m, r):
    if round_num <= 3:
        return COOPERATE
    
    elif round_num <= r - 2:
        recent_coop_rate = get_cooperation_rate(history, last_rounds=3)
        threshold_buffer = max(0.6, m/n - 0.1)
        projected_cooperators = floor(recent_coop_rate * n)
        
        reliable_cooperators = count_reliable_cooperators(history, last_rounds=5)
        
        if (recent_coop_rate >= threshold_buffer and projected_cooperators >= m) or \
           (reliable_cooperators >= m):
            return COOPERATE
        else:
            return DEFECT
    
    elif round_num == r - 1:
        if get_cooperation_rate(history, all_rounds=True) >= 0.7:
            return COOPERATE
        else:
            return mirror_most_common_last_round(history)
    
    else:  # Final round
        cumulative_rate = get_cooperation_rate(history, all_rounds=True)
        threshold_success_rate = get_threshold_success_rate(history, m)
        
        if cumulative_rate >= 0.8 and threshold_success_rate >= 0.7:
            return COOPERATE
        else:
            return DEFECT
```

This strategy is designed to foster cooperation while maintaining resilience against exploitation, adapting to the specific dynamics that emerge in each game instance.
'''

description_COOPERATIVE_20 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, aiming to maintain cooperation when viable while protecting against exploitation. It recognizes that successful cooperation requires both willingness to contribute and intelligent response to others' behavior.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and gather initial information about opponents

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-tier decision system:

#### Tier 1: Cooperation Likelihood Assessment
Calculate the **cooperation rate** from previous rounds:
```
cooperation_rate = (total_cooperators_observed) / (n × rounds_played)
```

#### Tier 2: Threshold Achievement Analysis
Track **threshold achievement rate**:
```
threshold_rate = (rounds_where_threshold_met) / (rounds_played)
```

#### Tier 3: Decision Logic
**Cooperate if ANY of these conditions are met:**

1. **High Cooperation Environment**: `cooperation_rate ≥ (m/n) + 0.1`
   - Others are cooperating sufficiently above the minimum threshold

2. **Marginal Contribution Needed**: In the previous round, exactly `m-1` or `m` players cooperated
   - Your cooperation is likely pivotal

3. **Recovery Pattern**: `threshold_rate ≥ 0.4` AND in the last round, fewer than `m-2` players cooperated
   - Pattern suggests cooperation is viable, and a strong signal is needed

4. **Reciprocity Trigger**: More than `(2×m)/3` players cooperated in the previous round
   - Reward consistent cooperative behavior from others

**Otherwise defect** to avoid exploitation while signaling that cooperation requires mutual effort.

### Final Round (Round r): Conditional Cooperation
- **Cooperate if**: `threshold_rate > 0.3` (cooperation succeeded in >30% of previous rounds)
- **Defect if**: `threshold_rate ≤ 0.3` (cooperation rarely succeeded)

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Lower the cooperation rate threshold in Tier 3 condition 1 to `(m/n) + 0.05`
- Reason: Smaller groups need more tolerance for variance

### High Threshold Games (m/n > 0.7)
- Add additional condition: Cooperate if `cooperation_rate ≥ 0.6`
- Reason: High-threshold games require more optimistic cooperation

### Low Reward Games (k < 1.5)
- Increase threshold achievement rate requirement in condition 3 to `threshold_rate ≥ 0.5`
- Reason: Lower rewards require higher success probability

## Strategy Properties

**Cooperative**: Starts cooperatively and actively seeks to maintain cooperation when others show willingness.

**Adaptive**: Responds to the actual behavior patterns of opponents rather than fixed assumptions.

**Robust**: 
- Protects against consistent defectors through threshold-based decisions
- Avoids exploitation while remaining open to cooperation recovery
- Handles various game parameters through conditional logic

**Forward-Looking**: Uses threshold achievement patterns to predict when cooperation is worthwhile, rather than just reacting to the last round.

## Pseudocode Summary
```
if round == 1:
    return COOPERATE
    
elif round == r:  // final round
    if threshold_achievement_rate > 0.3:
        return COOPERATE
    else:
        return DEFECT
        
else:  // middle rounds
    calculate cooperation_rate and threshold_rate from history
    
    if cooperation_rate >= adjusted_threshold OR
       previous_round_cooperators in [m-1, m] OR
       (threshold_rate >= 0.4 AND previous_round_cooperators < m-2) OR
       previous_round_cooperators > (2*m)/3:
        return COOPERATE
    else:
        return DEFECT
```

This strategy maintains a cooperative stance while being sophisticated enough to avoid exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_21 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "trust but verify" - starting cooperatively but adapting based on observed group behavior.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3 or first 25% of rounds, whichever is larger)
- **Always cooperate** to signal cooperative intent and gather information about other players' tendencies
- This establishes a cooperative baseline and allows observation of group dynamics

### Main Game Phase (Middle rounds)
The strategy maintains a **cooperation probability** that adapts based on:

1. **Threshold Achievement Rate**: Track what fraction of recent rounds achieved the threshold m
2. **Personal Cooperation ROI**: Monitor payoff difference between rounds where I cooperated vs defected
3. **Group Momentum**: Detect if cooperation is trending up or down

**Cooperation Decision Formula**:
```
base_cooperation_prob = 0.7  // Start optimistic but not naive

// Adjust based on recent threshold achievement (last 5 rounds or 25% of total rounds)
if threshold_achievement_rate >= 0.8:
    threshold_bonus = 0.2
elif threshold_achievement_rate >= 0.6:
    threshold_bonus = 0.1
elif threshold_achievement_rate >= 0.4:
    threshold_bonus = 0.0
else:
    threshold_bonus = -0.2

// Adjust based on how close we typically get to threshold
avg_cooperators = average cooperators in recent rounds
proximity_to_threshold = avg_cooperators / m

if proximity_to_threshold >= 1.1:
    proximity_bonus = 0.1  // Comfortable margin
elif proximity_to_threshold >= 0.9:
    proximity_bonus = 0.05
elif proximity_to_threshold < 0.7:
    proximity_bonus = -0.15  // Far from threshold

// Strategic defection consideration
if (avg_cooperators >= m + 1) and (last_round_achieved_threshold):
    strategic_defection_prob = 0.3  // Sometimes free-ride when safe
else:
    strategic_defection_prob = 0.0

final_cooperation_prob = base_cooperation_prob + threshold_bonus + proximity_bonus - strategic_defection_prob
final_cooperation_prob = clamp(final_cooperation_prob, 0.15, 0.95)

Cooperate if random() < final_cooperation_prob
```

### Critical Threshold Response
If the number of cooperators in the last round was exactly m-1:
- **Always cooperate** (override probability calculation)
- This prevents collective failure when we're one cooperator short

### Endgame Phase (Last 15% of rounds or minimum last 3 rounds)
Switch to more strategic thinking:

```
cooperators_last_round = count of cooperators in previous round
rounds_remaining = total_rounds - current_round

if cooperators_last_round >= m:
    // Threshold was met, can afford some strategic defection
    if rounds_remaining <= 2:
        defect_probability = 0.4
    else:
        defect_probability = 0.25
else:
    // Threshold missed, need to encourage cooperation
    if cooperators_last_round >= m - 2:
        cooperate_probability = 0.9  // Close to threshold
    else:
        cooperate_probability = 0.6  // Increase cooperation to salvage
```

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Last Round  
- If previous round achieved threshold: 60% chance to defect (strategic)
- If previous round failed threshold: 70% chance to cooperate (salvage attempt)

### Streak Detection
- If 3+ consecutive rounds failed to achieve threshold: Increase cooperation probability by 0.2 for next round
- If 5+ consecutive rounds achieved threshold with margin: Allow one "test defection" to see if others maintain cooperation

### Very Small Groups (n ≤ 4)
- Increase base cooperation probability to 0.8 (higher stakes per individual)
- Reduce strategic defection tendencies

### High Threshold Scenarios (m > n/2)
- Increase base cooperation probability to 0.85
- More aggressive response to threshold failures

## Cooperative Alignment

This strategy maintains cooperative intent through:

1. **Optimistic Start**: Always begins cooperatively to give the group the best chance
2. **Threshold Protection**: Never allows personal strategy to cause threshold failure when preventable
3. **Adaptive Support**: Increases cooperation when the group is struggling
4. **Long-term Focus**: Prioritizes sustained cooperation over short-term gains
5. **Fair Reciprocity**: Only reduces cooperation when the group consistently fails to reciprocate

The strategy is designed to work well with other cooperative strategies while being robust against exploitation, ultimately aiming to maximize collective welfare through intelligent adaptive cooperation.
'''

description_COOPERATIVE_22 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "graduated reciprocity" - starting cooperative but becoming more selective based on the group's demonstrated commitment to cooperation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and gather initial information about the group

### Rounds 2 to r-1: Adaptive Cooperation
The strategy uses a **dynamic cooperation threshold** based on recent group behavior:

1. **Calculate Recent Cooperation Rate (RCR)**:
   - Look at the last min(3, current_round-1) rounds
   - RCR = (total cooperators in recent rounds) / (n × rounds_observed)

2. **Determine Cooperation Probability**:
   - If RCR ≥ (m/n): Cooperate with probability 0.9
   - If RCR ≥ 0.8×(m/n): Cooperate with probability 0.7
   - If RCR ≥ 0.6×(m/n): Cooperate with probability 0.5
   - If RCR ≥ 0.4×(m/n): Cooperate with probability 0.3
   - If RCR < 0.4×(m/n): Cooperate with probability 0.1

3. **Forgiveness Mechanism**:
   - If cooperation failed in the last round but succeeded in 2+ of the last 4 rounds, increase cooperation probability by 0.2
   - If cooperation succeeded in the last round, maintain or increase cooperation probability

### Final Round: Strategic Finish
- If the group has achieved the threshold in ≥ 60% of previous rounds: **Cooperate**
- If you've been cooperating more than average and group success rate < 40%: **Defect**
- Otherwise: Use the same adaptive rule as middle rounds

## Edge Case Handling

### Small Groups (n ≤ 4)
- Be more forgiving: Reduce probability decrements by half
- Increase forgiveness threshold to 50% recent success rate

### High Threshold Games (m > 0.7×n)
- Start with higher initial cooperation probability (0.95)
- Be more persistent: Only decrease cooperation probability after 2 consecutive failures

### Low Reward Games (k < 1.5)
- Be more selective: Require higher recent cooperation rates to maintain high cooperation probability
- Implement "efficiency check": If average group cooperation is much higher than needed, occasionally defect to avoid over-cooperation

### Very Short Games (r ≤ 3)
- Round 1: Cooperate
- Round 2: Cooperate if ≥ (m-1) others cooperated in Round 1, otherwise defect
- Round 3: Cooperate only if threshold was met in Round 2

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:  // Final round
        recent_success_rate = count_successful_rounds(history, last=4) / min(4, r-1)
        if recent_success_rate >= 0.6:
            return COOPERATE
        elif my_cooperation_rate(history) > group_average_cooperation(history) and recent_success_rate < 0.4:
            return DEFECT
        else:
            return apply_adaptive_rule(history, n, m, k)
    
    // Middle rounds
    return apply_adaptive_rule(history, n, m, k)

function apply_adaptive_rule(history, n, m, k):
    recent_rounds = min(3, len(history))
    rcr = calculate_recent_cooperation_rate(history, recent_rounds, n)
    threshold_ratio = m / n
    
    if rcr >= threshold_ratio:
        base_prob = 0.9
    elif rcr >= 0.8 * threshold_ratio:
        base_prob = 0.7
    elif rcr >= 0.6 * threshold_ratio:
        base_prob = 0.5
    elif rcr >= 0.4 * threshold_ratio:
        base_prob = 0.3
    else:
        base_prob = 0.1
    
    // Apply forgiveness mechanism
    if check_forgiveness_condition(history):
        base_prob = min(1.0, base_prob + 0.2)
    
    // Apply edge case adjustments
    if n <= 4:
        base_prob = adjust_for_small_group(base_prob)
    if m > 0.7 * n:
        base_prob = adjust_for_high_threshold(base_prob, history)
    
    return COOPERATE if random() < base_prob else DEFECT
```

## Key Strengths

1. **Adaptive**: Responds to group behavior patterns rather than fixed rules
2. **Robust**: Handles various game parameters and group compositions
3. **Forgiving**: Allows for recovery from temporary cooperation breakdowns
4. **Efficient**: Avoids over-cooperation when not necessary
5. **Fair**: Balances individual protection with collective benefit

This strategy aims to foster cooperation while remaining resilient to exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_23 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to achieve collective success while protecting against exploitation. It dynamically adjusts cooperation based on observed group behavior and proximity to the cooperation threshold.

## Decision Rules

### Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about group dynamics

### Adaptive Cooperation Rules
After the initial phase, use the following decision framework:

#### 1. Cooperation Momentum Check
Calculate the **cooperation rate** over the last 3 rounds (or all available rounds if fewer than 3):
```
cooperation_rate = (total_cooperators_in_recent_rounds) / (n × rounds_observed)
```

#### 2. Threshold Proximity Analysis
In each round, estimate the likelihood of meeting the threshold based on:
- Recent cooperation patterns
- Number of consistent cooperators identified
- Historical success rate of achieving threshold

#### 3. Strategic Decision Tree
```pseudocode
IF round_number <= 3:
    COOPERATE
ELSE IF cooperation_rate >= (m/n + 0.1):  // Group showing good cooperation
    COOPERATE
ELSE IF cooperation_rate >= (m/n - 0.1):  // Borderline cooperation level
    IF (number_of_consistent_cooperators >= m-2):
        COOPERATE  // Close to threshold, help push over
    ELSE:
        DEFECT     // Too risky, not enough reliable cooperators
ELSE IF cooperation_rate < (m/n - 0.1):   // Poor cooperation
    IF last_round_cooperators >= m:
        COOPERATE  // Recent success, encourage continuation
    ELSE:
        DEFECT     // Group not cooperating enough
```

### Player Classification System
Track other players across rounds:
- **Consistent Cooperators**: Cooperated in ≥80% of observed rounds
- **Conditional Cooperators**: Cooperation varies with group success
- **Defectors**: Cooperated in <30% of observed rounds

### Endgame Adaptation
#### Last Round Strategy
- If the group has been successful (achieving threshold >60% of previous rounds): COOPERATE
- If the group has been struggling: DEFECT (avoid being exploited in final round)

#### Final Third of Game
Increase cooperation threshold slightly to account for endgame defection by others:
```pseudocode
IF round_number > (2×r/3):
    required_cooperation_rate = (m/n) + 0.15  // Be more demanding of group cooperation
```

## Edge Case Handling

### Small Groups (n ≤ 4)
- Cooperate more aggressively since each player's contribution is more critical
- Lower the cooperation rate threshold by 0.1

### High Threshold Games (m > 0.7×n)
- Cooperate more in early rounds to encourage group cooperation
- Only defect if cooperation rate falls below (m/n - 0.2)

### High Reward Games (k ≥ 3)
- Be more willing to take cooperation risks since payoff is high
- Increase cooperation rate threshold by 0.05

### First-Time Cooperation Recovery
If the group fails to meet threshold for 2+ consecutive rounds but then succeeds:
- Immediately return to cooperative stance for next 2 rounds
- Reset player classifications (give fresh start)

## Robustness Features

### Anti-Exploitation Measures
- Never cooperate for more than 3 consecutive rounds if threshold isn't being met
- If personal cooperation rate significantly exceeds group cooperation rate, reduce cooperation frequency

### Forgiveness Mechanism
- After 3 rounds of poor group performance, give the group one "test cooperation" to see if dynamics have changed
- Reset negative assessments every r/4 rounds to allow for strategy evolution

### Information Gathering
- Use first 20% of rounds primarily for learning opponent patterns
- Adjust strategy parameters based on observed group dynamics rather than rigid adherence to initial thresholds

## Strategic Rationale
This strategy is designed to:
1. **Encourage cooperation** through initial cooperative signaling
2. **Adapt dynamically** to group behavior patterns
3. **Protect against exploitation** through conditional cooperation
4. **Maximize collective payoffs** when group shows cooperative potential
5. **Remain robust** across different parameter combinations and opponent strategies

The strategy balances being "nice" (starts cooperative), "retaliatory" (responds to poor cooperation), "forgiving" (gives second chances), and "clear" (has predictable patterns that others can reciprocate).
'''

description_COOPERATIVE_24 = '''
# Adaptive Threshold-Based Cooperative Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while maintaining individual rationality. It balances cooperation with strategic adaptation based on the group's demonstrated willingness to cooperate.

## Decision Rules

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Rounds 2 to min(5, r/3)**: Continue cooperating to establish trust and gather information about opponent behaviors

### Main Strategy: Adaptive Threshold Cooperation
After the initial phase, use the following decision rule:

```
cooperation_rate = (total_cooperators_observed) / (n * rounds_played_so_far)
expected_cooperators_this_round = cooperation_rate * n

if expected_cooperators_this_round >= (m - 0.5):
    action = COOPERATE
else:
    action = DEFECT
```

### Forgiveness Mechanism
To prevent permanent defection spirals:
- If defecting for 3+ consecutive rounds AND it's not the final 20% of rounds:
  - Attempt cooperation once every 4 rounds to test if group dynamics have improved
  - If this "probe cooperation" succeeds (threshold met), return to main strategy

### Endgame Handling
In the final 20% of rounds (last max(1, ⌊r/5⌋) rounds):
- **If group has been consistently cooperative** (cooperation_rate > 0.7): Continue cooperating
- **If group cooperation is marginal** (0.4 ≤ cooperation_rate ≤ 0.7): Use more conservative threshold:
  ```
  if expected_cooperators_this_round >= m:
      action = COOPERATE
  else:
      action = DEFECT
  ```
- **If group is largely uncooperative** (cooperation_rate < 0.4): Defect to secure individual payoff

### Final Round Exception
- **Last round**: Defect unless cooperation_rate > 0.8 (very high confidence in group cooperation)

## Edge Case Handling

1. **Insufficient History**: If fewer than 2 rounds played, cooperate
2. **Exact Threshold Cases**: When expected_cooperators equals exactly (m-1), cooperate (err on the side of cooperation)
3. **High Variability**: If cooperation patterns are highly inconsistent (standard deviation > 0.4), use more conservative threshold (require expected_cooperators ≥ m)

## Strategic Rationale

1. **Cooperative Foundation**: Starts cooperatively to enable mutually beneficial outcomes
2. **Adaptive Learning**: Adjusts expectations based on observed behavior rather than assumptions
3. **Risk Management**: Uses probabilistic thresholds to account for uncertainty in others' actions
4. **Forgiveness**: Includes mechanisms to escape defection traps
5. **Endgame Realism**: Acknowledges that cooperation may break down near the end while still rewarding consistently cooperative groups

## Key Features

- **Parameter Agnostic**: Works across different values of n, m, k, and r
- **History Dependent**: Learns from all previous rounds
- **Robust**: Handles both highly cooperative and highly defective opponents
- **Individually Rational**: Won't consistently sacrifice individual payoff for minimal group benefit
- **Collectively Oriented**: Prioritizes cooperation when it's likely to succeed

This strategy aims to foster cooperation while protecting against exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_25 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with rational self-protection by dynamically adjusting cooperation based on observed group behavior while maintaining a bias toward cooperation that strengthens over time.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and gather initial information about the group's tendencies.

### Rounds 2 to r-1: Adaptive Cooperation
Use a **dynamic threshold system** based on historical cooperation rates:

1. **Calculate group cooperation rate**: `group_coop_rate = total_cooperators_so_far / (n × rounds_played)`

2. **Determine cooperation threshold**: `threshold = max(0.3, min(0.8, m/n - 0.1))`
   - This creates a baseline threshold slightly below the minimum needed ratio
   - Bounded between 30% and 80% to prevent extreme behaviors

3. **Apply cooperation bonus**: If the group cooperation rate exceeds the threshold in recent rounds, apply a "trust bonus" that increases cooperation probability by 0.1-0.2

4. **Decision rule**:
   ```
   if group_coop_rate >= threshold:
       cooperate with probability 0.9
   else if group_coop_rate >= (threshold - 0.15):
       cooperate with probability 0.6
   else:
       cooperate with probability 0.3
   ```

### Final Round: Conditional Cooperation
In the last round, consider the strategic implications:
- If the group has consistently met the threshold (>70% of previous rounds), **cooperate**
- If cooperation rate is borderline (within 0.1 of needed rate), **cooperate** to help secure the collective benefit
- Otherwise, **defect** since there's no future reputation to build

## Adaptive Mechanisms

### Recent Behavior Weighting
Weight recent rounds more heavily than early rounds:
- Last 3 rounds: weight = 2.0
- Middle rounds: weight = 1.0  
- Early rounds: weight = 0.5

### Streak Detection
- **Positive streak**: If cooperation rate has been increasing for 3+ consecutive rounds, increase cooperation probability by 0.15
- **Negative streak**: If cooperation rate has been decreasing for 3+ consecutive rounds, decrease cooperation probability by 0.1 (but maintain minimum of 0.2)

### Emergency Cooperation
If the group is close to the threshold but failing consistently:
- When actual cooperators = m-1 in recent rounds, **always cooperate** to push the group over the threshold
- This prevents coordination failures when the group is "almost there"

## Robustness Features

### Protection Against Exploitation
- Maintain minimum cooperation rate of 20% even with poor group performance to avoid complete defection spirals
- Cap maximum cooperation at 95% to retain some strategic flexibility

### Noise Tolerance
- Use moving averages over 3-round windows to smooth out random variations in group behavior
- Don't overreact to single-round deviations from established patterns

### Parameter Sensitivity
- For high-reward scenarios (k > 2.5): Increase base cooperation probability by 0.1
- For low-threshold scenarios (m/n < 0.4): Decrease threshold adjustment to be more cooperative
- For large groups (n > 8): Weight recent behavior more heavily to account for coordination challenges

## Expected Behavior Profile

This strategy will:
1. **Start cooperatively** to encourage group cooperation
2. **Learn quickly** from group behavior and adapt accordingly
3. **Reward good group behavior** with increased cooperation
4. **Punish consistent defection** while maintaining hope for recovery
5. **Make rational final-round decisions** based on established patterns
6. **Help marginal situations** by providing the critical cooperation needed when the group is close to the threshold

The strategy is designed to perform well against both highly cooperative and mixed groups while protecting against exploitation by predominantly defecting opponents.
'''

description_COOPERATIVE_26 = '''
# Cooperative Threshold Strategy with Adaptive Trust

## Core Strategy Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation. It operates on the principle of "conditional cooperation" - cooperating when there's reasonable evidence that enough others will also cooperate, while adapting based on observed group behavior.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Cooperate to establish good faith and gather behavioral data

### 2. Trust Assessment System
After round 3, maintain a "cooperation ratio" for each player:
```
player_coop_ratio[i] = (times player i cooperated) / (total rounds observed)
```

Calculate group cooperation potential:
```
expected_cooperators = sum(player_coop_ratio[i] for all players except self)
cooperation_probability = expected_cooperators / (n-1)
```

### 3. Main Decision Logic
For rounds 4 through r-1:

**Cooperate if ANY of these conditions hold:**
1. **Threshold Likely Met**: `expected_cooperators ≥ (m-1)` 
   - If we expect at least m-1 others to cooperate, our cooperation ensures threshold
2. **High Group Cooperation**: `cooperation_probability ≥ 0.7`
   - Strong cooperative group warrants trust
3. **Recent Positive Trend**: In last 3 rounds, cooperation succeeded ≥ 2 times
   - Momentum indicates group coordination
4. **Safety Margin**: `expected_cooperators ≥ (m-2)` AND we're not in final 20% of rounds
   - Near-threshold with time to recover if wrong

**Otherwise**: Defect (D)

### 4. Endgame Handling
**Final Round**: 
- Cooperate only if `expected_cooperators ≥ (m-1)`
- This prevents last-round defection while maintaining collective benefit

**Final 20% of rounds**:
- Require higher confidence: cooperate only if `expected_cooperators ≥ (m-1)` OR `cooperation_probability ≥ 0.8`

## Adaptive Elements

### 1. Learning from Failures
When cooperation threshold fails (< m cooperators):
- Temporarily increase required confidence by 0.1 for next 2 rounds
- This prevents repeated failures due to overoptimism

### 2. Forgiveness Mechanism
- Weight recent rounds more heavily: multiply cooperation ratios by `1.5^(recency_factor)`
- This allows recovery from early defection periods

### 3. Group Size Adjustment
- For small groups (n ≤ 4): Require `cooperation_probability ≥ 0.6` (more lenient)
- For large groups (n ≥ 10): Require `cooperation_probability ≥ 0.8` (more strict)

## Edge Case Handling

### Universal Defection Response
If no one else has cooperated in last 3 rounds:
- Switch to "probe" mode: cooperate every 3rd round only
- This tests if group dynamics have changed while limiting losses

### High-Defection Environment
If overall group cooperation rate < 0.3:
- Only cooperate when `expected_cooperators ≥ m` (very conservative)
- Protects against exploitation in hostile environments

### Near-Threshold Situations
When `expected_cooperators = (m-2)`:
- Cooperate if any other player has cooperation ratio > 0.6
- This accounts for other players making similar threshold calculations

## Pseudocode Summary

```pseudocode
function decide_action(round, history, n, m, k, r):
    if round ≤ 3:
        return COOPERATE
    
    calculate_player_cooperation_ratios(history)
    expected_cooperators = estimate_other_cooperators()
    cooperation_probability = expected_cooperators / (n-1)
    
    // Adjust for recent failures
    if recent_cooperation_failed():
        required_confidence += 0.1
    
    // Main decision logic
    if expected_cooperators ≥ (m-1):
        return COOPERATE
    if cooperation_probability ≥ threshold_for_group_size(n):
        return COOPERATE
    if recent_positive_trend() AND round < 0.8*r:
        return COOPERATE
    if expected_cooperators ≥ (m-2) AND round < 0.8*r:
        return COOPERATE
        
    return DEFECT
```

## Strategic Rationale

This strategy balances several key objectives:
1. **Collective Welfare**: Actively seeks cooperation opportunities
2. **Exploitation Resistance**: Adapts to hostile environments
3. **Error Recovery**: Learns from failures and adjusts expectations  
4. **Coordination**: Uses observable history to predict others' behavior
5. **Robustness**: Handles various group sizes and cooperation levels

The strategy is designed to work well against both other cooperative strategies (by coordinating effectively) and mixed populations (by protecting against exploitation while still contributing to collective success when feasible).
'''

description_COOPERATIVE_27 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Guardian"** that balances cooperation with strategic responsiveness to maintain the collective benefit while protecting against exploitation.

## Strategy Overview

The core principle is to be **conditionally cooperative** - start cooperatively, maintain cooperation when others reciprocate, but adaptively respond to defection patterns while always trying to preserve the collective threshold.

## Decision Rules

### 1. First Round Behavior
**Always cooperate (C)** in round 1 to signal cooperative intent and establish a baseline for measuring others' responses.

### 2. Core Decision Logic

For rounds 2 through r, use this hierarchy:

**Step A: Threshold Safety Check**
- Count cooperators in the previous round: `prev_cooperators`
- If `prev_cooperators >= m + 1`: We have a safety buffer, can afford to be more selective
- If `prev_cooperators == m`: Threshold barely met, be more cooperative to maintain it
- If `prev_cooperators < m`: Collective failure, need to encourage more cooperation

**Step B: Cooperation Rate Assessment**
Calculate recent cooperation trend over last `min(3, current_round-1)` rounds:
- `recent_coop_rate = (total_cooperations_by_others) / (total_possible_cooperations_by_others)`

**Step C: Personal Exploitation Check**
Track if I'm being systematically exploited:
- `my_coop_rate = (my_cooperations) / (rounds_played)`
- `others_avg_coop_rate = (all_other_cooperations) / (total_other_opportunities)`
- `exploitation_ratio = my_coop_rate - others_avg_coop_rate`

### 3. Decision Algorithm

```
IF current_round == 1:
    return COOPERATE

IF prev_cooperators < m:
    // Collective failure - need to rebuild cooperation
    IF recent_coop_rate > 0.3:
        return COOPERATE  // Others showing some willingness
    ELSE IF exploitation_ratio > 0.4:
        return DEFECT     // I'm being heavily exploited
    ELSE:
        return COOPERATE  // Try to restart cooperation

ELSE IF prev_cooperators == m:
    // Threshold barely met - be supportive
    IF recent_coop_rate > 0.4:
        return COOPERATE
    ELSE IF exploitation_ratio > 0.3:
        return DEFECT     // Reduce exploitation
    ELSE:
        return COOPERATE

ELSE: // prev_cooperators > m
    // Safety buffer exists - can be more selective
    IF recent_coop_rate > 0.6:
        return COOPERATE  // High cooperation, reciprocate
    ELSE IF recent_coop_rate > 0.3:
        IF exploitation_ratio < 0.3:
            return COOPERATE
        ELSE:
            return DEFECT // Reduce exploitation
    ELSE:
        return DEFECT     // Low cooperation, don't be exploited
```

## Edge Cases

### Last Round (Round r)
- If `prev_cooperators >= m`: **DEFECT** (no future reputation needed, maximize personal payoff)
- If `prev_cooperators < m`: **COOPERATE** (help achieve threshold one last time)

### Early Rounds (Rounds 2-3)
- Be more forgiving of defection (reduce exploitation thresholds by 0.1)
- Give others time to establish patterns before being too reactive

### High-Defection Environments
- If overall cooperation rate drops below 20% for 3+ consecutive rounds, switch to **"Conditional Cooperator"** mode:
  - Only cooperate if at least `m-1` others cooperated in the previous round
  - This prevents being the sole cooperator while still supporting threshold achievement

## Cooperative Alignment

This strategy is cooperative because it:

1. **Starts with trust** - Always cooperates first
2. **Prioritizes collective success** - Actively monitors and responds to threshold achievement
3. **Forgives and rebuilds** - After collective failures, attempts to restart cooperation
4. **Balances exploitation protection** - Doesn't allow unlimited exploitation, but gives others chances to cooperate
5. **Adapts to context** - More cooperative when the threshold is at risk, more selective when there's safety buffer

## Robustness Features

- **Parameter-agnostic**: Works with any valid (n,m,k,r) combination
- **History-dependent**: Uses actual observed behavior rather than assumptions
- **Graduated responses**: Doesn't overreact to single defections
- **Threshold-aware**: Explicitly considers the collective risk element
- **Anti-exploitation**: Protects against systematic free-riding while maintaining cooperative orientation

This strategy should perform well against both cooperative and selfish opponents by being generous enough to enable cooperation while being smart enough to avoid exploitation.
'''

description_COOPERATIVE_28 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to build and maintain cooperative coalitions while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adjusting based on observed group behavior.

## Strategy Overview

### Phase 1: Cooperative Initialization (Rounds 1-3)
**Decision Rule**: Always cooperate in the first 3 rounds (or first r/3 rounds if r < 9).

**Rationale**: 
- Establishes cooperative intent
- Provides data to assess group cooperation propensity
- Creates opportunity for cooperative norms to emerge

### Phase 2: Adaptive Response (Middle rounds)
**Decision Rule**: Cooperate if the "cooperation viability score" ≥ threshold, otherwise defect.

**Cooperation Viability Score Calculation**:
```
recent_cooperation_rate = (cooperators in last 3 rounds) / (3 * n)
trend_factor = 1.0 if cooperation increasing, 0.8 if stable, 0.6 if decreasing
success_rate = (rounds where threshold met) / (total rounds so far)
risk_adjustment = min(1.0, (rounds_remaining / total_rounds) + 0.3)

viability_score = (0.4 * recent_cooperation_rate + 0.3 * success_rate) * trend_factor * risk_adjustment
```

**Cooperation Threshold**:
- Base threshold = max(0.3, (m/n) - 0.1)
- Decreases slightly as game progresses to encourage late cooperation

### Phase 3: Endgame Cooperation Push (Final 20% of rounds)
**Decision Rule**: Switch to aggressive cooperation mode if:
- Historical success rate > 25%, OR
- Recent cooperation shows upward trend, OR
- Current round has ≥ (m-1) cooperators observed

**Rationale**: Final push to establish cooperation when stakes are highest and reputation effects matter less.

## Detailed Decision Logic

### Round-by-Round Process:
1. **Information Processing**: Count cooperators in previous round, update running statistics
2. **Trend Analysis**: Calculate 3-round moving average of cooperation rates
3. **Threshold Assessment**: Evaluate if group is likely to meet cooperation threshold
4. **Strategic Adjustment**: Modify behavior based on game phase and observed patterns

### Key Adaptive Features:

**Learning Component**:
- Tracks individual player cooperation patterns when possible
- Adjusts expectations based on observed group dynamics
- Maintains rolling statistics to weight recent behavior more heavily

**Robustness Mechanisms**:
- **Anti-exploitation**: Defects if cooperation rate drops below critical threshold for 3+ consecutive rounds
- **Recovery protocol**: Returns to cooperation if group behavior improves
- **Risk management**: Becomes more cooperative as game progresses (sunk cost reasoning)

### Edge Case Handling:

**First Round**: Always cooperate (no history available)

**Last Round**: Cooperate if any of:
- Previous round had ≥ (m-1) cooperators
- Success rate in recent rounds > 40%
- Defecting would break a successful cooperation streak

**Small Games (n ≤ 4)**: Use more aggressive cooperation (lower thresholds) due to higher individual impact

**High Threshold Games (m close to n)**: Implement "coordination boost" - cooperate more readily when close to threshold

## Pseudocode Structure:
```
function decide_action(round, history, n, m, k, r):
    if round <= max(3, r/3):
        return COOPERATE
    
    viability_score = calculate_viability_score(history, n, m, r, round)
    threshold = calculate_threshold(round, r, n, m)
    
    if round > 0.8 * r:  // Endgame phase
        return endgame_decision(history, n, m, viability_score)
    
    if viability_score >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages:

1. **Adaptive**: Learns from group behavior and adjusts accordingly
2. **Cooperative**: Starts cooperatively and seeks to maintain cooperation
3. **Robust**: Protects against consistent defectors while remaining open to cooperation recovery
4. **Context-aware**: Adjusts behavior based on game parameters and phase
5. **Coalition-building**: Attempts to identify and maintain cooperative subgroups

This strategy aims to foster cooperation while remaining resilient to exploitation, adapting its approach based on the specific dynamics of each game instance.
'''

description_COOPERATIVE_29 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with adaptive learning, aiming to achieve the collective benefit while protecting against exploitation. It operates on the principle of "cooperative optimism with learned caution."

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Threshold System

The strategy maintains a **cooperation probability** that adapts based on recent history:

1. **Calculate Recent Success Rate**: Look at the last min(5, current_round-1) rounds and calculate:
   - `recent_success_rate = (number of rounds where threshold was met) / (rounds observed)`

2. **Determine Base Cooperation Probability**:
   - If `recent_success_rate ≥ 0.6`: `base_prob = 0.9` (high cooperation)
   - If `recent_success_rate ≥ 0.4`: `base_prob = 0.7` (moderate cooperation)  
   - If `recent_success_rate ≥ 0.2`: `base_prob = 0.5` (cautious cooperation)
   - Otherwise: `base_prob = 0.3` (defensive cooperation)

3. **Apply Momentum Adjustment**:
   - If threshold was met in the previous round: `adjusted_prob = min(1.0, base_prob + 0.2)`
   - If threshold failed in previous round: `adjusted_prob = max(0.1, base_prob - 0.1)`

4. **Critical Mass Consideration**:
   - Calculate `cooperation_gap = m - (observed cooperators in last round)`
   - If `cooperation_gap ≤ 2` and `base_prob ≥ 0.5`: `final_prob = min(1.0, adjusted_prob + 0.3)`
   - Otherwise: `final_prob = adjusted_prob`

5. **Decision**: Cooperate with probability `final_prob`

### Round r (Final Round): Strategic Defection with Conscience
- If the group has consistently met the threshold (success rate ≥ 70% over all rounds): **Cooperate** to maintain collective benefit
- If my cooperation history shows I've contributed significantly more than average: **Defect** to recover some investment
- Otherwise: **Cooperate** with probability 0.6

## Key Features

### Adaptive Learning
- Tracks recent performance rather than entire history to respond to changing group dynamics
- Adjusts cooperation levels based on whether the group is consistently meeting thresholds

### Momentum Response
- Increases cooperation after successful rounds to build on positive momentum
- Slightly reduces cooperation after failures but maintains baseline cooperative intent

### Critical Mass Support
- Provides extra cooperation when close to threshold to push the group over the edge
- Recognizes that individual cooperation is most valuable when it might tip the balance

### Exploitation Protection
- Never goes below 10% cooperation probability to maintain some cooperative signal
- Reduces cooperation in environments with persistent free-riding
- Strategic final-round decision based on contribution balance

### Robustness Features
- **Parameter Independence**: Works across different values of n, m, k, and r
- **History Sensitivity**: Adapts to opponent strategies without requiring coordination
- **Edge Case Handling**: Explicit rules for first and last rounds
- **Randomization**: Probabilistic decisions prevent predictable exploitation

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:  // Final round
        success_rate = calculate_overall_success_rate(history)
        my_coop_rate = calculate_my_cooperation_rate(history)
        avg_coop_rate = calculate_average_cooperation_rate(history)
        
        if success_rate >= 0.7:
            return COOPERATE
        elif my_coop_rate > avg_coop_rate + 0.2:
            return DEFECT
        else:
            return COOPERATE with probability 0.6
    
    // Regular rounds (2 to r-1)
    recent_rounds = min(5, round - 1)
    recent_success_rate = count_successful_rounds(history, recent_rounds) / recent_rounds
    
    if recent_success_rate >= 0.6:
        base_prob = 0.9
    elif recent_success_rate >= 0.4:
        base_prob = 0.7
    elif recent_success_rate >= 0.2:
        base_prob = 0.5
    else:
        base_prob = 0.3
    
    // Momentum adjustment
    if threshold_met_last_round(history):
        adjusted_prob = min(1.0, base_prob + 0.2)
    else:
        adjusted_prob = max(0.1, base_prob - 0.1)
    
    // Critical mass boost
    last_round_cooperators = count_cooperators_last_round(history)
    cooperation_gap = m - last_round_cooperators
    
    if cooperation_gap <= 2 and base_prob >= 0.5:
        final_prob = min(1.0, adjusted_prob + 0.3)
    else:
        final_prob = adjusted_prob
    
    return COOPERATE with probability final_prob
```

This strategy maintains a cooperative stance while learning from group behavior, making it both adaptive and robust for tournament play.
'''

description_COOPERATIVE_30 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with self-protection by maintaining a dynamic assessment of the group's cooperative potential while being forgiving enough to rebuild cooperation after defection cycles.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal willingness to cooperate and gather information about others' tendencies.

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-factor decision system:

1. **Cooperation History Score (CHS)**
   - Track the proportion of players who cooperated in each previous round
   - Calculate running average: `CHS = (sum of cooperation rates across all previous rounds) / (number of previous rounds)`

2. **Recent Trend Analysis (RTA)**
   - Give extra weight to the last 2-3 rounds to detect momentum shifts
   - `Recent_Coop_Rate = (cooperators in last round + 0.5 × cooperators in second-to-last round) / (n + 0.5n)`

3. **Threshold Proximity Assessment (TPA)**
   - Estimate likelihood that cooperation threshold m will be met
   - `Expected_Cooperators = n × max(CHS, Recent_Coop_Rate)`

**Cooperation Decision:**
Cooperate if ANY of the following conditions are met:
- `Expected_Cooperators ≥ m - 1` (threshold likely to be met even without me)
- `Expected_Cooperators ≥ m - 2 AND CHS > 0.4` (close to threshold with decent history)
- `Recent_Coop_Rate > CHS + 0.15` (strong positive trend detected)
- Last round achieved threshold and `CHS > 0.25` (maintain successful cooperation)

### Final Round (Round r): Strategic Endgame
- **Cooperate** if the cooperation history suggests others will likely cooperate
- Specifically: Cooperate if `CHS > 0.35 OR Recent_Coop_Rate > 0.45`
- This prevents end-game defection cascades while being realistic about others' final-round behavior

## Edge Case Handling

### Early Rounds (2-4):
- Be more optimistic due to limited data
- Lower the cooperation threshold: cooperate if `Expected_Cooperators ≥ m - 2`

### After Failed Cooperation Attempts:
- If threshold wasn't met in the last round but `CHS > 0.3`, give one more chance to rebuild
- This prevents permanent defection spirals

### Extreme Scenarios:
- If `CHS < 0.15` for more than 3 consecutive rounds, require `Expected_Cooperators ≥ m` to cooperate (stricter threshold)
- If cooperation rate suddenly jumps above 0.7, immediately cooperate to join the cooperative wave

## Robustness Features

1. **Forgiveness Mechanism**: The strategy doesn't permanently write off cooperation after failures, allowing for recovery
2. **Trend Sensitivity**: Recent behavior is weighted more heavily than distant history
3. **Conservative Bounds**: Won't cooperate in obviously hopeless situations, but gives benefit of doubt in borderline cases
4. **Anti-Exploitation**: Becomes more cautious if repeatedly exploited, but maintains some cooperation potential

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    CHS = calculate_cooperation_history_score(history)
    Recent_Coop_Rate = calculate_recent_trend(history, min(3, round-1))
    Expected_Cooperators = n * max(CHS, Recent_Coop_Rate)
    
    # Adjust thresholds based on round and history
    if round <= 4:
        threshold_adjustment = -1  # More optimistic early
    elif CHS < 0.15 and count_consecutive_low_cooperation(history) > 3:
        threshold_adjustment = +1  # More cautious if repeatedly failed
    else:
        threshold_adjustment = 0
    
    cooperation_conditions = [
        Expected_Cooperators >= m - 1 + threshold_adjustment,
        Expected_Cooperators >= m - 2 + threshold_adjustment AND CHS > 0.4,
        Recent_Coop_Rate > CHS + 0.15,
        last_round_successful(history) AND CHS > 0.25
    ]
    
    if round == r:  # Final round
        return COOPERATE if (CHS > 0.35 OR Recent_Coop_Rate > 0.45) else DEFECT
    
    return COOPERATE if any(cooperation_conditions) else DEFECT
```

This strategy maintains a cooperative orientation while being strategically adaptive to the actual behavior observed in the game, making it robust across diverse opponent strategies.
'''

description_COOPERATIVE_31 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining conditional cooperation based on group behavior patterns and strategic timing.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always COOPERATE to signal cooperative intent
- **Rounds 2 to min(5, r/3)**: Continue cooperating to establish a cooperative baseline and gather information about opponent tendencies

### 2. Adaptive Cooperation Threshold
Calculate a dynamic cooperation threshold based on recent history:
- Track cooperation rate over the last min(3, r/4) rounds
- If recent cooperation rate ≥ (m/n) - 0.1: Continue cooperating
- If recent cooperation rate < (m/n) - 0.2: Switch to conditional cooperation

### 3. Conditional Cooperation Rules
When not in guaranteed cooperation mode:

**COOPERATE if ANY of the following conditions hold:**
- Current round ≤ r/3 (early game cooperation)
- Recent cooperation count ≥ m-1 (we can tip the balance)
- Previous round had exactly m-1 cooperators (critical support needed)
- Cooperation rate in last 3 rounds ≥ 0.6 (reward good group behavior)
- It's the last 2 rounds AND total cooperators in previous round ≥ m/2 (end-game cooperation)

**DEFECT otherwise**

### 4. Strategic Timing Considerations

#### Early Game (Rounds 1 to r/3):
- Bias toward cooperation to establish norms
- Only defect if cooperation rate drops below 0.3

#### Mid Game (Rounds r/3+1 to 2r/3):
- Apply full conditional cooperation rules
- Be responsive to group dynamics
- Punish consistent free-riding by temporary defection

#### End Game (Last r/3 rounds):
- Increase cooperation threshold slightly (add 0.1 to required rates)
- In final 2 rounds: cooperate if there's any reasonable chance of reaching threshold

### 5. Edge Case Handling

**First Round**: Always COOPERATE (no history available)

**Last Round**: 
- COOPERATE if previous round had ≥ m/2 cooperators
- COOPERATE if personal cooperation rate > 0.6 (maintain consistency)
- Otherwise follow standard conditional rules

**When m = n-1 (almost all must cooperate)**:
- Be extra generous: cooperate if cooperation rate > 0.5

**When m = 2 (low threshold)**:
- Be more selective: require cooperation rate > 0.4 to continue

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    recent_coop_rate = calculate_recent_cooperation_rate(history, min(3, r/4))
    last_round_cooperators = count_cooperators(history[round-1])
    my_coop_rate = my_cooperation_rate(history)
    
    // Early game bias
    if round <= r/3:
        if recent_coop_rate >= 0.3:
            return COOPERATE
    
    // End game considerations
    if round > 2*r/3:
        if round >= r-1 and last_round_cooperators >= m/2:
            return COOPERATE
        if recent_coop_rate >= (m/n) - 0.05:  // Slightly more lenient
            return COOPERATE
    
    // Standard conditional cooperation
    if recent_coop_rate >= (m/n) - 0.1:
        return COOPERATE
    if last_round_cooperators == m-1:  // Critical support
        return COOPERATE
    if recent_coop_rate >= 0.6:  // Reward good behavior
        return COOPERATE
    
    return DEFECT
```

## Key Strategic Features

1. **Graduated Response**: Doesn't punish immediately but responds proportionally to group cooperation levels
2. **Threshold Awareness**: Specifically looks for situations where individual contribution matters most
3. **Temporal Adaptation**: Different behavior in early/mid/late game phases
4. **Forgiveness**: Willing to restart cooperation if group behavior improves
5. **Strategic Timing**: Recognizes when cooperation is most critical (near-threshold situations)

This strategy balances cooperative intent with rational self-protection, adapting to opponent behavior while maintaining enough cooperation to enable mutually beneficial outcomes when possible.
'''

description_COOPERATIVE_32 = '''
I'll design a cooperative strategy called **"Adaptive Trust Builder"** that balances cooperation with strategic adaptation based on observed group behavior.

## Core Strategy: Adaptive Trust Builder

### Decision Rules

**Phase 1: Trust Building (First 20% of rounds)**
- Always cooperate to establish a cooperative baseline and signal trustworthiness
- This creates an initial cooperative signal regardless of others' actions

**Phase 2: Adaptive Cooperation (Middle 60% of rounds)**
- Base decision on recent cooperation success rate and trend analysis
- Cooperate if recent cooperation threshold achievement rate ≥ 60%
- Use a sliding window of last min(5, r/4) rounds for trend analysis

**Phase 3: Strategic Endgame (Final 20% of rounds)**
- Increase cooperation propensity as game approaches end
- Weight recent successful cooperation more heavily
- Account for reduced future interaction incentives

### Detailed Algorithm

```
Initialize:
- cooperation_history = []
- threshold_met_history = []
- trust_level = 1.0 (start optimistic)

For each round t:
  current_phase = determine_phase(t, r)
  
  if current_phase == "trust_building":
    action = COOPERATE
    
  elif current_phase == "adaptive":
    recent_success_rate = calculate_success_rate(last_k_rounds)
    cooperation_trend = analyze_trend(cooperation_history)
    
    cooperation_probability = base_probability + 
                             trend_adjustment + 
                             trust_adjustment
    
    if cooperation_probability > 0.5:
      action = COOPERATE
    else:
      action = DEFECT
      
  elif current_phase == "endgame":
    # Increase cooperation as rounds remaining decrease
    endgame_bonus = (r - t) / (0.2 * r) * 0.3
    
    if (recent_success_rate + endgame_bonus) > 0.4:
      action = COOPERATE
    else:
      action = DEFECT
```

### Key Features

**1. Threshold Sensitivity**
- Monitor whether the cooperation threshold (m) is being regularly met
- If threshold frequently fails despite cooperation, reduce cooperation probability
- If threshold is consistently met, maintain high cooperation

**2. Forgiveness Mechanism**
- Don't permanently punish after defection periods
- Allow trust level to recover if group cooperation improves
- Prevent spiral into mutual defection

**3. Risk Assessment**
- Calculate expected payoff of cooperation vs defection
- Consider probability that own cooperation will be decisive (when cooperation count is likely m-1)
- Weight the reward multiplier (k) against cooperation cost

**4. Adaptive Parameters**
```
base_cooperation_probability = 0.7
trust_decay_rate = 0.1 per failed threshold
trust_recovery_rate = 0.15 per successful threshold
trend_weight = 0.2
endgame_cooperation_boost = 0.3
```

### Edge Case Handling

**First Round**: Always cooperate to establish cooperative intent

**Last Round**: Cooperate if recent cooperation success rate > 40% (lower threshold due to reduced future consequences)

**Low n, High m**: When threshold is difficult (m close to n), increase cooperation probability by 0.2

**High k**: When reward multiplier is very high (k > 3), increase cooperation probability by 0.15

**Detection of Patterns**: If clear alternating or cycling patterns emerge, try to synchronize with pro-cooperative phases

### Robustness Features

**Against Always Defectors**: Reduces cooperation after initial trust-building phase, but doesn't eliminate it entirely

**Against Conditional Cooperators**: Recognizes and reinforces successful cooperation cycles

**Against Random Players**: Maintains steady cooperation level based on empirical success rates

**Against Exploiters**: Trust decay mechanism prevents extended exploitation while maintaining cooperation opportunities

This strategy prioritizes long-term collective welfare while protecting against systematic exploitation. It's designed to foster cooperation when possible while adapting to the actual behavior patterns observed in the group.
'''

description_COOPERATIVE_33 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Cooperation with Forgiveness"** that balances cooperation with strategic adaptation to opponent behavior.

## Strategy Overview

The core principle is to start cooperatively but adapt based on the collective behavior of other players, always maintaining a bias toward cooperation when feasible.

## Decision Rules

### Phase 1: Initial Cooperation (Rounds 1-3 or first 20% of rounds, whichever is smaller)
- **Always cooperate** to establish cooperative intent and gather information about other players' tendencies
- This creates early opportunities for mutual cooperation and signals trustworthiness

### Phase 2: Adaptive Cooperation (Middle rounds)
- Calculate the **cooperation rate** from previous rounds: `coop_rate = (total cooperations by others) / (total possible cooperations by others)`
- Calculate **recent cooperation trend** over last 3 rounds (or available rounds if fewer)

**Cooperate if ANY of the following conditions are met:**
1. Recent cooperation rate ≥ `(m-1)/n` (enough others cooperating to potentially reach threshold)
2. The threshold was met in the previous round (reward success)
3. We're in a "forgiveness mode" after a streak of mutual defection

**Forgiveness Mechanism:**
- After 2+ consecutive rounds where threshold wasn't met due to low cooperation, enter "forgiveness mode"
- In forgiveness mode: cooperate for 1 round to test if others will reciprocate
- Exit forgiveness mode based on others' responses

### Phase 3: Endgame Strategy (Last 10% of rounds)
- If cooperation has been generally successful (threshold met in >50% of previous rounds): **continue cooperating**
- If facing mostly defectors but some cooperation exists: **cooperate only if recent trend shows improvement**
- If facing universal defection: **defect but attempt one final cooperation in second-to-last round**

## Edge Case Handling

### First Round
- **Always cooperate** to signal cooperative intent and avoid immediate mutual defection

### Last Round
- If the game has been largely cooperative: **cooperate** to maintain the cooperative equilibrium
- If facing consistent defection: **defect** (no future rounds to build on)
- If uncertain: **cooperate** (small cost for maintaining reputation in case of repeated interactions)

### When m = n-1 (Almost everyone must cooperate)
- Be more aggressive in cooperation since individual contribution is critical
- Only defect if evidence shows others are systematically defecting

### When m is small relative to n
- More selective cooperation, focusing on rounds where cooperation momentum exists
- Use "follower" approach: cooperate if enough others seem likely to cooperate

## Pseudocode

```
Strategy: AdaptiveThresholdCooperation

Initialize:
- forgiveness_mode = False
- consecutive_failures = 0

For each round t:
  If t <= min(3, 0.2 * r):  // Initial cooperation phase
    return COOPERATE
    
  If t > 0.9 * r:  // Endgame phase
    success_rate = (rounds where threshold met) / (total rounds so far)
    If success_rate > 0.5:
      return COOPERATE
    ElseIf recent_trend_improving AND some_cooperation_exists:
      return COOPERATE
    ElseIf t == r-1:  // Second to last round
      return COOPERATE  // Final attempt
    Else:
      return DEFECT
      
  // Main adaptive phase
  recent_coop_rate = cooperation_rate_last_3_rounds()
  threshold_met_last_round = (cooperators_last_round >= m)
  
  If recent_coop_rate >= (m-1)/n:
    consecutive_failures = 0
    return COOPERATE
    
  If threshold_met_last_round:
    consecutive_failures = 0  
    return COOPERATE
    
  If forgiveness_mode:
    forgiveness_mode = False
    consecutive_failures = 0
    return COOPERATE
    
  If consecutive_failures >= 2:
    forgiveness_mode = True
    return COOPERATE
    
  // Default: defect but track failures
  consecutive_failures += 1
  return DEFECT
```

## Strategic Rationale

1. **Cooperative Bias**: The strategy defaults toward cooperation when uncertain, aligning with the cooperative mindset
2. **Adaptive Learning**: Responds to opponent behavior patterns without being overly reactive to single-round outcomes
3. **Forgiveness**: Prevents permanent defection spirals by periodically testing for renewed cooperation
4. **Threshold Awareness**: Explicitly considers the minimum cooperation requirement (m) in decision-making
5. **Robust to Exploitation**: Won't cooperate indefinitely with pure defectors, but gives multiple chances for mutual cooperation

This strategy should perform well against other cooperative strategies while avoiding excessive exploitation by purely selfish opponents.
'''

description_COOPERATIVE_34 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining a balance between cooperation and self-preservation. It operates on the principle of "cautious optimism" - starting cooperatively but adapting based on observed group behavior.

## Strategy Overview

### Initial Cooperation Phase (Rounds 1-3 or first 20% of game, whichever is larger)
- **Always cooperate** to signal cooperative intent and gather information about other players
- This establishes a baseline for measuring group cooperation levels

### Main Strategy (Adaptive Threshold Mechanism)

#### Key Variables to Track:
- `cooperation_rate`: Proportion of players who cooperated in the previous round
- `recent_success_rate`: Proportion of recent rounds where threshold m was met
- `rounds_remaining`: Number of rounds left in the game

#### Decision Rule:
```pseudocode
if rounds_remaining <= max(2, r/10):
    // End-game phase: Be more cooperative to avoid mutual defection
    cooperate_if cooperation_rate >= (m-1)/n OR recent_success_rate >= 0.6
else:
    // Main phase: Adaptive threshold based on group behavior
    dynamic_threshold = calculate_dynamic_threshold()
    cooperate_if cooperation_rate >= dynamic_threshold
```

#### Dynamic Threshold Calculation:
```pseudocode
function calculate_dynamic_threshold():
    base_threshold = m/n  // Minimum needed for success
    
    // Adjust based on recent group performance
    if recent_success_rate >= 0.7:
        adjustment = -0.1  // Group is reliable, be more trusting
    else if recent_success_rate <= 0.3:
        adjustment = +0.15  // Group is unreliable, be more cautious
    else:
        adjustment = 0
    
    // Consider game progress (be more cooperative near end)
    progress_factor = (r - rounds_remaining) / r
    end_game_bonus = progress_factor * 0.1
    
    return max(0.2, min(0.8, base_threshold + adjustment - end_game_bonus))
```

## Detailed Decision Rules

### Round 1:
- **Always cooperate** - Signal cooperative intent

### Rounds 2 to Initial Cooperation Phase:
- **Always cooperate** - Build trust and gather data

### Main Game Phase:
1. **Calculate recent cooperation metrics** (last 3 rounds or available history)
2. **Apply dynamic threshold** as described above
3. **Special conditions:**
   - If the group has achieved the threshold m in the last 2 consecutive rounds → cooperate with 90% probability
   - If the group has failed to meet threshold in last 3 consecutive rounds → only cooperate if cooperation_rate >= 0.75

### End-Game Phase (Last 10% of rounds or final 2 rounds):
- **Increase cooperation probability** to avoid end-game defection spirals
- Cooperate if:
  - At least (m-1) others cooperated last round, OR
  - Recent success rate >= 60%, OR
  - This is the final round and cooperation_rate >= 40%

## Robustness Features

### Against Always Defectors:
- The dynamic threshold mechanism will increase caution when success rates are low
- Won't get stuck in pure cooperation against non-cooperative groups

### Against Conditional Cooperators:
- Recognizes and responds to reciprocal behavior through success rate tracking
- Maintains cooperation when the group shows reliability

### Against Mixed Strategies:
- Adapts threshold based on observed patterns
- Balances between being exploited and missing cooperative opportunities

### Against End-Game Defection:
- Specific end-game rules to maintain cooperation when stakes are highest
- Recognizes that mutual defection in final rounds hurts everyone

## Edge Case Handling

### Very Small Groups (n ≤ 4):
- Use more conservative thresholds due to higher individual impact
- Weight recent history more heavily

### High Threshold Games (m close to n):
- Be more cooperative since defection by few can doom the group
- Lower the dynamic threshold adjustment range

### Very Long Games (r > 20):
- Use longer windows for calculating recent_success_rate
- Allow for more exploration in early phases

## Cooperation Alignment

This strategy is fundamentally cooperative because it:

1. **Starts with trust** - Always cooperates initially
2. **Rewards group cooperation** - Becomes more cooperative when others cooperate
3. **Avoids end-game betrayal** - Maintains cooperation even in final rounds
4. **Seeks mutual benefit** - Aims to help the group achieve the threshold m
5. **Adapts constructively** - Adjusts behavior to encourage rather than punish cooperation

The strategy balances the cooperative goal of achieving collective success with the practical need to avoid being systematically exploited, making it both principled and robust across diverse opponent behaviors.
'''

description_COOPERATIVE_35 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to foster collective success while protecting against exploitation. It operates on the principle that cooperation should be rewarded and sustained, but defection patterns should trigger protective responses.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2 to min(5, r/4)**: Continue cooperating to establish good faith and gather information about opponent behaviors

### 2. Adaptive Threshold Calculation
After the initial phase, calculate a dynamic cooperation threshold based on historical success:

```
cooperation_rate = (successful_rounds) / (total_completed_rounds)
base_threshold = m / n  // minimum cooperation rate needed
adaptive_threshold = max(base_threshold, cooperation_rate * 0.8)
```

Where successful_rounds = rounds where threshold m was met.

### 3. Main Decision Logic
For each round after the initial phase:

```
recent_cooperation_rate = cooperation_count_in_last_3_rounds / (3 * n)
trend = recent_cooperation_rate - overall_cooperation_rate

IF recent_cooperation_rate >= adaptive_threshold:
    cooperate_probability = 0.9
ELSE IF recent_cooperation_rate >= base_threshold AND trend > 0:
    cooperate_probability = 0.7  // improving situation
ELSE IF recent_cooperation_rate >= base_threshold * 0.7:
    cooperate_probability = 0.5  // marginal situation
ELSE:
    cooperate_probability = 0.2  // protect against exploitation
```

### 4. Forgiveness Mechanism
Track consecutive failed rounds (where < m players cooperated):
- If failed_consecutive_rounds >= 3, temporarily increase cooperation probability by 0.2 for next 2 rounds
- This prevents permanent defection cycles and gives collective recovery opportunities

### 5. Endgame Adjustment
For the last 20% of rounds (or last 3 rounds if r ≤ 15):
- If overall success rate > 60%: Maintain cooperative stance (cooperate_probability = 0.8)
- If overall success rate 30-60%: Moderate cooperation (cooperate_probability = 0.6)
- If overall success rate < 30%: Defensive play (cooperate_probability = 0.3)

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and avoid immediate collective failure.

### Early Rounds (Rounds 2-5 or first 25%)
Maintain high cooperation to:
- Establish reputation as cooperative player
- Allow time for collective patterns to emerge
- Prevent early pessimistic cascades

### Last Round
Use endgame adjustment logic - if the group has been generally successful, cooperate to maintain collective benefit. If not, make a calculated decision based on recent trends.

### Parameter Edge Cases
- **If m = n-1**: Increase base cooperation probability to 0.8 (nearly everyone must cooperate)
- **If k is very high (k > 3)**: Increase cooperation probabilities by 0.1 across all conditions
- **If n is small (n ≤ 4)**: Be more forgiving - reduce failed round threshold to 2

## Robustness Features

### 1. Multi-timescale Analysis
- Short-term (last 3 rounds): React to immediate trends
- Medium-term (last 25% of completed rounds): Assess recent strategy effectiveness
- Long-term (all rounds): Maintain overall perspective

### 2. Exploitation Protection
- Never cooperate with probability > 0.95 (except first round)
- Never cooperate with probability < 0.1 (maintains hope for recovery)
- Gradual response to defection rather than immediate retaliation

### 3. Recovery Promotion
- Forgiveness mechanism prevents permanent defection cycles
- Adaptive threshold allows strategy to evolve with game dynamics
- Trend analysis rewards improving situations even if absolute performance is poor

## Strategic Rationale

This strategy is designed to:
1. **Start cooperatively** to avoid immediate collective failure
2. **Learn and adapt** based on actual group behavior rather than assumptions
3. **Balance cooperation with protection** against exploitation
4. **Promote recovery** from bad situations through forgiveness
5. **Scale appropriately** with different game parameters
6. **Handle uncertainty** about opponent strategies through probabilistic decisions

The probabilistic nature ensures the strategy isn't perfectly predictable while maintaining a generally cooperative orientation that can adapt to various opponent behaviors, from pure cooperators to sophisticated conditional strategies.
'''

description_COOPERATIVE_36 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to maintain cooperation when feasible while protecting against systematic exploitation. It operates on the principle of "conditional cooperation with forgiveness" - cooperating when there's reasonable hope of reaching the threshold, but adapting when patterns suggest futility.

## Decision Rules

### Initial Phase (First Round)
**Always cooperate** in round 1. This establishes cooperative intent and provides initial information about other players' tendencies.

### Main Decision Logic (Rounds 2 to r-1)

The strategy uses a **dynamic cooperation probability** based on three factors:

1. **Base Cooperation Rate**: Calculate the historical cooperation rate across all previous rounds:
   ```
   base_rate = (total_cooperators_observed) / (n * rounds_played)
   ```

2. **Recent Trend Weight**: Give extra weight to the last 3 rounds (or all available rounds if fewer than 3):
   ```
   recent_rate = (cooperators_in_recent_rounds) / (n * min(3, rounds_played))
   trend_weight = 0.3
   adjusted_rate = (1 - trend_weight) * base_rate + trend_weight * recent_rate
   ```

3. **Threshold Feasibility Check**: Estimate probability of reaching threshold m:
   ```
   expected_cooperators = adjusted_rate * n
   cooperation_probability = max(0.1, min(0.9, expected_cooperators / m))
   ```

**Decision Rule**: Cooperate if `cooperation_probability > 0.4`

### Special Conditions

**Forgiveness Mechanism**: If cooperation rate drops below threshold for 2 consecutive rounds, but then shows any increase, give one "forgiveness round" by cooperating regardless of the calculated probability.

**Streak Breaking**: If the last 3 rounds all failed to reach threshold (< m cooperators), reduce cooperation probability by 0.2 for the next round only.

### Final Round Handling
In the final round, use a **commitment strategy**:
- If historical success rate (rounds where threshold was met / total rounds) > 0.5: **Cooperate**
- If 0.3 ≤ success rate ≤ 0.5: Cooperate with probability equal to the success rate
- If success rate < 0.3: **Defect**

## Edge Case Handling

1. **All-Defect Environment**: If no cooperation observed in first 3 rounds, switch to "probe mode" - cooperate every 4th round to test if others might reciprocate.

2. **High Volatility**: If cooperation rates vary wildly (standard deviation > 0.4), increase weight on recent trends to 0.5.

3. **Near-Threshold Scenarios**: If expected cooperators are within 1 of threshold m, bias toward cooperation (add 0.1 to cooperation probability).

4. **Small Group Adjustment**: For n ≤ 4, increase base cooperation tendency by cooperating if cooperation_probability > 0.3 instead of 0.4.

## Pseudocode Summary

```python
def decide_action(round_num, history, n, m, k, r):
    if round_num == 1:
        return COOPERATE
    
    # Calculate cooperation rates
    base_rate = calculate_historical_rate(history)
    recent_rate = calculate_recent_rate(history, last_rounds=3)
    adjusted_rate = 0.7 * base_rate + 0.3 * recent_rate
    
    # Estimate threshold feasibility
    expected_cooperators = adjusted_rate * n
    coop_prob = max(0.1, min(0.9, expected_cooperators / m))
    
    # Apply special conditions
    coop_prob = apply_forgiveness(coop_prob, history)
    coop_prob = apply_streak_breaking(coop_prob, history)
    
    if round_num == r:  # Final round
        return final_round_decision(history)
    
    # Small group adjustment
    threshold = 0.3 if n <= 4 else 0.4
    
    return COOPERATE if coop_prob > threshold else DEFECT
```

## Strategic Rationale

This strategy is **cooperative** because it:
- Starts with cooperation to signal good intent
- Maintains cooperation when others show willingness
- Includes forgiveness mechanisms to recover from temporary setbacks
- Commits to cooperation in final rounds when historically successful

It's **adaptive** because it:
- Learns from both historical patterns and recent trends
- Adjusts to different group sizes and cooperation levels
- Has special handling for extreme scenarios (all-defect, high volatility)

It's **robust** because it:
- Doesn't assume any coordination or shared strategies
- Protects against systematic exploitation through probability thresholds
- Has fallback mechanisms for various edge cases
- Balances individual rationality with collective benefit
'''

description_COOPERATIVE_37 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with pragmatic risk assessment, adapting to observed opponent behavior while maintaining a fundamentally cooperative orientation. It recognizes that cooperation requires sufficient participation to be meaningful.

## Strategy Overview

The strategy operates on three key principles:
1. **Optimistic Start**: Begin with cooperative intent
2. **Adaptive Learning**: Adjust cooperation probability based on observed patterns
3. **Threshold Awareness**: Account for the minimum cooperation requirement

## Decision Rules

### Round 1: Optimistic Initialization
- **Always cooperate** in the first round to signal cooperative intent
- This establishes a cooperative baseline and allows observation of others' initial strategies

### Rounds 2 to r-1: Adaptive Cooperation

#### Step 1: Calculate Historical Cooperation Rate
```
historical_coop_rate = (total_cooperators_observed) / (n × rounds_played)
```

#### Step 2: Estimate Cooperation Probability
```
if historical_coop_rate >= (m/n):
    base_cooperation_prob = 0.8
else if historical_coop_rate >= (m/n - 0.2):
    base_cooperation_prob = 0.6
else if historical_coop_rate >= (m/n - 0.4):
    base_cooperation_prob = 0.4
else:
    base_cooperation_prob = 0.2
```

#### Step 3: Recent Trend Analysis
Examine the last min(3, current_round-1) rounds:
```
recent_trend = (cooperators_in_recent_rounds) / (n × recent_rounds_count)
trend_adjustment = 0.2 × (recent_trend - historical_coop_rate)
final_cooperation_prob = base_cooperation_prob + trend_adjustment
```

#### Step 4: Decision
- Cooperate if `random_value < final_cooperation_prob`
- This introduces controlled randomness while maintaining strategic adaptation

### Final Round: Conditional Cooperation
The last round requires special handling since there's no future to influence:

```
if (rounds_where_threshold_met / total_rounds) > 0.6:
    cooperate  // Reward good group behavior
else if historical_coop_rate > (m/n + 0.1):
    cooperate with probability 0.7  // Cautious optimism
else:
    cooperate with probability 0.3  // Limited cooperation for poor groups
```

## Key Features

### Adaptive Learning
- Continuously updates cooperation probability based on observed behavior
- Weights recent behavior more heavily than distant history
- Responds to both absolute cooperation levels and trends

### Threshold Intelligence
- Recognizes that cooperation below the threshold (m) is wasteful
- Adjusts strategy based on how often the group has historically met the threshold
- Balances individual rationality with collective benefit

### Robustness Mechanisms
1. **Anti-Exploitation**: Reduces cooperation when facing predominantly defecting opponents
2. **Trend Sensitivity**: Increases cooperation when detecting positive momentum
3. **Probabilistic Decisions**: Avoids predictable patterns that could be exploited
4. **Final Round Logic**: Prevents end-game exploitation while rewarding good groups

### Cooperative Orientation
- Starts cooperatively to enable collective success
- Maintains cooperation bias even with imperfect groups
- Rewards groups that consistently meet thresholds
- Never completely abandons cooperation (minimum 20% probability)

## Edge Case Handling

1. **All Defectors**: Gradually reduces to 20% cooperation probability but never goes to zero
2. **All Cooperators**: Maintains high cooperation (80%+) to sustain collective benefit
3. **Unstable Groups**: Uses probabilistic approach to avoid lock-in to suboptimal patterns
4. **Small n**: Strategy scales appropriately since all calculations use proportions
5. **High m/n ratios**: Becomes more conservative but maintains cooperative intent

## Expected Performance

This strategy should perform well because it:
- Enables coordination with other cooperative strategies
- Protects against exploitation by purely selfish strategies  
- Adapts to mixed populations effectively
- Maintains the possibility of collective success across diverse opponent types
- Balances individual rationality with group welfare

The probabilistic elements prevent opponents from perfectly predicting behavior while the adaptive components ensure the strategy evolves appropriately based on the specific game context and opponent mix encountered.
'''

description_COOPERATIVE_38 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy aims to achieve and maintain cooperation while being robust against exploitation. It balances optimism about cooperation with pragmatic responses to defection patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test others' willingness to cooperate.

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-factor decision system:

1. **Cooperation Momentum Factor (CMF)**
   - Calculate recent cooperation rate: `recent_coop_rate = cooperators_last_3_rounds / (3 × n)`
   - If `recent_coop_rate ≥ (m-1)/n`: Strongly favor cooperation
   - If `recent_coop_rate < (m-2)/n`: Strongly favor defection
   - Otherwise: Neutral

2. **Success History Factor (SHF)**
   - Calculate threshold achievement rate: `success_rate = rounds_threshold_met / total_rounds_so_far`
   - If `success_rate ≥ 0.6`: Favor cooperation (others are reliable)
   - If `success_rate < 0.3`: Favor defection (group is unreliable)
   - Otherwise: Neutral

3. **Strategic Position Factor (SPF)**
   - If I'm consistently among the few cooperators and threshold rarely met: Favor defection
   - If cooperation is widespread (≥ m+1 cooperators recently): Favor cooperation
   - Otherwise: Neutral

**Decision Logic:**
```
cooperative_signals = count(CMF, SHF, SPF favoring cooperation)
defection_signals = count(CMF, SHF, SPF favoring defection)

if cooperative_signals > defection_signals:
    COOPERATE
else if defection_signals > cooperative_signals:
    DEFECT
else:
    # Tie-breaker: cooperate if we're close to threshold
    if (average_cooperators_last_2_rounds >= m-2):
        COOPERATE
    else:
        DEFECT
```

### Final Round: Conditional Cooperation
- **Cooperate** if threshold was met in at least 40% of previous rounds
- **Defect** otherwise (no future rounds to build on cooperation)

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Be more forgiving of occasional defections
- Weight recent behavior more heavily than distant history

### High Threshold Games (m > n/2)
- Require stronger cooperation signals before committing
- Be more willing to defect if early rounds show insufficient cooperation

### Low Reward Games (k < 1.5)
- Slightly favor defection in ambiguous situations
- Require clearer cooperation patterns before trusting

### Late Game Dynamics (final 20% of rounds)
- Gradually increase defection tendency as game approaches end
- But maintain cooperation if group has been highly successful

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if constantly taken advantage of
2. **Forgiveness**: Can resume cooperation if group behavior improves
3. **Adaptability**: Adjusts to different group sizes, thresholds, and reward levels
4. **Early Warning**: Detects failing cooperation patterns before it's too late

## Cooperative Alignment

This strategy maximizes collective welfare by:
- Starting cooperatively to encourage group cooperation
- Maintaining cooperation when the group shows reliability
- Providing clear behavioral feedback (cooperate when others do, defect when they don't)
- Avoiding pure selfishness (considers group success rate, not just personal gain)
- Building trust through consistent, predictable responses to group behavior

The strategy achieves cooperation through **conditional reciprocity** rather than unconditional altruism, making it both cooperative and evolutionarily stable against purely selfish strategies.
'''

description_COOPERATIVE_39 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to observed behavior, aiming to achieve the collective threshold while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Threshold Response

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = total_cooperators_observed / (n × (current_round - 1))
```

**Step 2: Estimate Required Cooperation Level**
```
required_rate = m / n
safety_margin = 0.1  // 10% buffer above minimum threshold
target_rate = required_rate + safety_margin
```

**Step 3: Decision Logic**
```
if cooperation_rate >= target_rate:
    // Community is cooperating sufficiently
    COOPERATE with probability 0.8
else if cooperation_rate >= required_rate:
    // Community is barely meeting threshold
    COOPERATE with probability 0.9
else:
    // Community is failing to cooperate adequately
    if cooperation_rate >= (required_rate × 0.7):
        // Still hope for recovery
        COOPERATE with probability 0.6
    else:
        // Community has largely abandoned cooperation
        COOPERATE with probability 0.2
```

### Final Round (Round r): Conditional Cooperation
```
recent_cooperation_rate = cooperators_in_last_3_rounds / (n × min(3, r-1))

if recent_cooperation_rate >= required_rate:
    COOPERATE  // Reward consistent cooperators
else if my_cooperation_rate > (required_rate + 0.15):
    DEFECT     // Avoid being exploited if I've been overly generous
else:
    COOPERATE  // Maintain cooperative stance
```

## Key Features

### 1. **Threshold-Aware Adaptation**
- Continuously monitors whether the community is meeting the minimum cooperation threshold (m)
- Adjusts cooperation probability based on observed collective behavior
- Maintains higher cooperation when others are contributing adequately

### 2. **Graduated Response**
- Uses probabilistic cooperation rather than binary decisions
- Provides multiple cooperation levels based on community performance
- Prevents complete abandonment of cooperation even when others defect

### 3. **Anti-Exploitation Mechanism**
- Reduces cooperation probability when community consistently fails to meet threshold
- Final round protection against being exploited by persistent defectors
- Maintains some cooperation even in poor environments to allow recovery

### 4. **Recovery Facilitation**
- Never drops cooperation probability to zero (minimum 0.2)
- Quickly increases cooperation when community behavior improves
- Safety margin encourages sustained cooperation above minimum threshold

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase all cooperation probabilities by 0.1 to account for higher individual impact
- Use stricter threshold (required_rate × 0.8) for triggering defensive behavior

### High Threshold Games (m/n > 0.7)
- Increase cooperation probabilities by 0.1 across all conditions
- Extend "hope for recovery" threshold to required_rate × 0.6

### Short Games (r ≤ 3)
- Always cooperate in first round and cooperate with 0.8 probability in subsequent rounds
- Ignore final round defection protection

## Strategic Rationale

This strategy is designed to:
1. **Start cooperatively** to establish positive momentum
2. **Adapt responsively** to actual community behavior rather than assumptions
3. **Maintain hope** for cooperation while protecting against systematic exploitation
4. **Facilitate recovery** by never completely abandoning cooperation
5. **Scale appropriately** to different game parameters and group sizes

The probabilistic approach creates uncertainty for potential exploiters while maintaining consistent cooperative pressure toward achieving the collective threshold.
'''

description_COOPERATIVE_40 = '''
# Cooperative Threshold Strategy (CTS)

## Core Philosophy
This strategy is designed to maximize collective welfare while being robust against exploitation. It balances cooperative intentions with adaptive responses to observed behavior patterns.

## Decision Rules

### Round 1: Optimistic Cooperation
- **Always cooperate** in the first round to signal cooperative intent and gather initial information about opponent behavior.

### Rounds 2 to r-1: Adaptive Cooperation with Momentum Tracking

**Step 1: Calculate Cooperation Momentum**
- Track the recent cooperation trend using a weighted average of the last 3 rounds (or all available rounds if fewer than 3)
- `recent_coop_rate = (0.5 * last_round + 0.3 * two_rounds_ago + 0.2 * three_rounds_ago)`
- Where each value is the fraction of players who cooperated in that round

**Step 2: Assess Threshold Proximity**
- Calculate how close we've been to meeting the threshold:
- `threshold_proximity = average(cooperators_per_round) / m`

**Step 3: Decision Logic**
```pseudocode
IF recent_coop_rate >= (m-1)/n:
    // We're close to threshold, cooperation likely beneficial
    COOPERATE
ELSE IF threshold_proximity >= 0.8 AND recent_coop_rate >= 0.4:
    // Historical success suggests cooperation can work
    COOPERATE
ELSE IF recent_coop_rate < 0.3:
    // Low cooperation environment, but try to revive cooperation occasionally
    IF round_number % 4 == 1:
        COOPERATE  // Periodic cooperation attempt
    ELSE:
        DEFECT
ELSE:
    // Moderate cooperation levels - be cautiously cooperative
    IF recent_coop_rate >= 0.5:
        COOPERATE
    ELSE:
        DEFECT
```

### Last Round (Round r): Conditional Cooperation
In the final round, cooperation depends on established patterns:

```pseudocode
IF average_historical_cooperators >= m-1:
    // Threshold has been consistently met
    COOPERATE
ELSE IF recent_coop_rate >= (m-1)/n:
    // Recent trend suggests threshold achievable
    COOPERATE
ELSE:
    // Low likelihood of achieving threshold
    DEFECT
```

## Edge Case Handling

**Very Small Groups (n ≤ 4):**
- Be more cooperative since each player's action has greater impact
- Cooperate if recent_coop_rate >= (m-2)/n instead of (m-1)/n

**High Threshold Games (m > 0.7*n):**
- Increase cooperation frequency by 20% in the decision thresholds
- Extend periodic cooperation attempts to every 3rd round instead of 4th

**Early Game Uncertainty (rounds 2-3):**
- If insufficient history exists, use more optimistic assumptions
- Default to cooperation if recent_coop_rate >= 0.4

## Cooperative Alignment Features

1. **Threshold-Oriented**: Decisions explicitly consider what's needed to achieve the collective benefit (m cooperators)

2. **Forgiveness Mechanism**: Periodic cooperation attempts even in low-cooperation environments prevent permanent defection spirals

3. **Momentum-Based**: Responds to positive trends in cooperation, encouraging virtuous cycles

4. **Historical Learning**: Uses long-term patterns to make informed decisions rather than just reacting to the last round

5. **Final Round Cooperation**: Willing to cooperate in the final round when patterns suggest collective success is achievable

## Strategy Robustness

- **Against Always Defect**: Will eventually reduce cooperation but maintains periodic attempts to restart cooperation
- **Against Always Cooperate**: Will cooperate consistently once the pattern is detected
- **Against Tit-for-Tat variants**: Responds well to reciprocal strategies through momentum tracking
- **Against Random**: Adapts based on actual cooperation rates rather than assuming rationality

This strategy maintains a cooperative stance while being adaptive enough to avoid consistent exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_41 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to achieve collective cooperation while being robust against exploitation. It balances optimism about cooperation with pragmatic defection when cooperation appears unsustainable.

## Strategy Overview
The strategy operates in three phases based on observed cooperation levels and adapts its behavior using a dynamic cooperation threshold that responds to the history of collective outcomes.

## Decision Rules

### Phase 1: Optimistic Start (Rounds 1-3 or until pattern emerges)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Rounds 2-3**: COOPERATE if at least one other player cooperated in the previous round
- If fewer than ⌈m/2⌉ total cooperations occur in first 2 rounds, immediately switch to Phase 2

### Phase 2: Adaptive Cooperation (Middle rounds)
Maintain a dynamic **cooperation threshold** (CT) that starts at m and adjusts based on recent history:

**Decision Rule**: COOPERATE if:
1. Number of cooperators in the last round ≥ (CT - 1), OR
2. Average cooperators over last 3 rounds ≥ (CT - 0.5), OR
3. We're in a "recovery attempt" (see below)

**Threshold Adjustment** (every 3 rounds):
- If threshold was met in ≥2 of last 3 rounds: CT = max(CT - 1, ⌈m * 0.8⌉)
- If threshold was met in ≤1 of last 3 rounds: CT = min(CT + 1, m + 2)

**Recovery Attempts**: If cooperation has failed for 2 consecutive rounds and we're not in the last 20% of rounds, attempt cooperation once to test if others will reciprocate.

### Phase 3: Endgame Strategy (Last 20% of rounds, minimum last 3 rounds)
- If average threshold achievement over the game is >60%: Continue Phase 2 logic
- If 30-60%: COOPERATE only if cooperators in last round ≥ m
- If <30%: DEFECT (cooperation has clearly failed)

## Edge Case Handling

### First Round
Always COOPERATE to signal cooperative intent and gather information about others' strategies.

### Last Round
Follow Phase 3 logic - only cooperate if there's strong evidence others will too. This prevents exploitation by strategies that defect only on the final round.

### Insufficient History
When there's insufficient data for 3-round averages, use available data with conservative assumptions (assume missing data points were unsuccessful threshold attempts).

### Tie-Breaking
When exactly on the threshold boundaries, slightly favor cooperation early in the game and defection later in the game.

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Generous Opening**: Always starts cooperatively to give collective action a chance
2. **Forgiveness**: Includes recovery attempts and doesn't permanently punish temporary defection
3. **Adaptability**: Adjusts expectations based on what level of cooperation is actually achievable
4. **Threshold Focus**: Concentrates on achieving the minimum needed rather than maximum possible cooperation
5. **Group-Oriented**: Decisions based on collective patterns rather than individual player tracking

## Robustness Features

- **Anti-Exploitation**: Won't continue cooperating if others consistently defect
- **Pattern Recognition**: Adapts to both highly cooperative and highly defective environments
- **Momentum Building**: Can rebuild cooperation after temporary breakdowns
- **Endgame Protection**: Guards against last-minute defection while maintaining cooperative potential

## Pseudocode Summary

```
if round == 1:
    return COOPERATE
    
if in_endgame_phase():
    return endgame_decision()
    
if round <= 3:
    return early_game_decision()
    
# Main adaptive phase
update_cooperation_threshold()

if should_attempt_recovery():
    return COOPERATE
    
recent_cooperators = avg_cooperators_last_3_rounds()
last_round_cooperators = cooperators_in_round(round - 1)

if (last_round_cooperators >= cooperation_threshold - 1) or 
   (recent_cooperators >= cooperation_threshold - 0.5):
    return COOPERATE
else:
    return DEFECT
```

This strategy should perform well against a diverse range of opponents while maintaining a fundamentally cooperative orientation that seeks to achieve the collective benefit whenever reasonably possible.
'''

description_COOPERATIVE_42 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to build and maintain coalitions while protecting against exploitation. It operates on the principle that cooperation should be rewarded and sustained, but defection patterns should trigger protective responses.

## Decision Framework

### Initial Cooperation Phase (Rounds 1-3 or first 20% of rounds, whichever is larger)
- **Always cooperate** to signal cooperative intent and attempt to establish a cooperative norm
- This creates opportunities for coalition formation and demonstrates good faith

### Main Decision Algorithm (After initial phase)

For each round t, cooperate if ANY of the following conditions are met:

1. **Coalition Maintenance**: If cooperators in the previous round ≥ m, then cooperate
   - Rewards successful cooperation and maintains stable coalitions

2. **Near-Miss Recovery**: If cooperators in previous round = m-1, then cooperate
   - Attempts to salvage almost-successful cooperation attempts

3. **Trend-Based Hope**: If the number of cooperators has been increasing over the last 2-3 rounds, then cooperate
   - Recognizes positive momentum and supports emerging cooperation

4. **Strategic Forgiveness**: After a failed round, cooperate with probability 0.7 if:
   - At least 40% of players cooperated in the failed round, AND
   - This isn't the 3rd consecutive failed round

Otherwise, **defect** to protect against systematic exploitation.

### Endgame Adjustment (Final 10% of rounds)
- **Increase cooperation threshold**: Only cooperate if confident that m+ others will cooperate
- Use more conservative estimation: Require that recent cooperation rate ≥ (m/n) + 0.1
- This prevents end-game defection cascades while maintaining realistic expectations

## Key Adaptive Features

### Learning Component
- Track each player's cooperation rate over a sliding window of recent rounds
- Estimate likelihood of reaching threshold based on observed patterns
- Adjust forgiveness probability based on overall cooperation levels in the game

### Robustness Mechanisms
- **Anti-exploitation**: Never cooperate more than 3 consecutive rounds if threshold consistently fails
- **Coalition building**: Increase cooperation propensity when detecting other consistent cooperators
- **Momentum recognition**: React positively to improving cooperation trends

### Edge Case Handling
- **Very small n**: If n ≤ 4, be more forgiving and cooperative (higher base cooperation rate)
- **High threshold**: If m/n > 0.8, use more aggressive coalition-building in early rounds
- **Very high k**: If k > 3, be more patient with failed cooperation attempts

## Pseudocode Structure

```
if round <= max(3, 0.2*r):
    return COOPERATE
    
if last_round_cooperators >= m:
    return COOPERATE
    
if last_round_cooperators == m-1:
    return COOPERATE
    
if cooperation_trend_positive():
    return COOPERATE
    
if is_endgame() and estimated_cooperators() < m:
    return DEFECT
    
if failed_round_recovery_conditions():
    return COOPERATE with probability 0.7
    
return DEFECT
```

## Strategic Rationale

This strategy succeeds by:
1. **Establishing cooperation early** - Creates opportunities for stable coalitions
2. **Maintaining successful coalitions** - Rewards and sustains cooperative outcomes  
3. **Adaptively recovering** - Responds intelligently to near-misses and positive trends
4. **Protecting against exploitation** - Limits losses when cooperation consistently fails
5. **Handling endgame dynamics** - Adjusts for changed incentives in final rounds

The strategy is cooperative in spirit but not naive, offering multiple pathways to successful cooperation while incorporating learned responses to opponents' revealed strategies.
'''

description_COOPERATIVE_43 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining adaptive cooperation based on group behavior patterns and strategic game phases.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1 to min(3, r/4))
- **Always cooperate** to signal cooperative intent and establish a foundation for group cooperation
- This creates an opportunity for collective cooperation to emerge while the cost is relatively low

### 2. Adaptive Threshold Monitoring (Middle Rounds)
Track the **cooperation rate** over a sliding window of the last 3 rounds:
- `recent_coop_rate = (cooperators in last 3 rounds) / (3 × n)`

**Cooperation Decision:**
- **Cooperate if**: `recent_coop_rate ≥ (m-0.5)/n`
- **Defect if**: `recent_coop_rate < (m-0.5)/n`

**Rationale**: The threshold `(m-0.5)/n` represents slightly below the minimum needed rate. This encourages cooperation when the group is close to or above the threshold, but protects against systematic free-riding.

### 3. Momentum Consideration
If cooperation rate is borderline, apply momentum logic:
- If the trend is **improving** (more cooperation in round t-1 than t-3), **cooperate**
- If the trend is **declining** and recent rate < `m/n`, **defect**

### 4. Critical Mass Recovery
If cooperation completely breaks down (`recent_coop_rate < 0.3 × m/n`):
- **Forgiveness mechanism**: Cooperate every 3rd round to test if the group can recover
- Resume normal adaptive behavior if any recovery is detected

### 5. Endgame Strategy (Final 20% of rounds)
- If `recent_coop_rate ≥ m/n`: Continue cooperating (maintain successful equilibrium)
- If `recent_coop_rate < m/n` but `≥ 0.7 × m/n`: **Increase cooperation** to try pushing the group over threshold
- If `recent_coop_rate < 0.7 × m/n`: **Defect** (protect against end-game exploitation)

## Edge Case Handling

### First Round
- Always **cooperate** (no history to base decisions on)

### Insufficient History (Rounds 2-3)
- **Cooperate** if at least `⌊m/2⌋` players cooperated in the previous round
- Otherwise **defect**

### Last Round
- **Cooperate** only if cooperation rate in last 3 rounds ≥ `(m+1)/n`
- This prevents last-round exploitation while maintaining cooperation in genuinely cooperative groups

## Pseudocode

```
function decide_action(round, history, n, m, r, k):
    if round == 1:
        return COOPERATE
    
    if round <= min(3, r/4):
        return COOPERATE
    
    # Calculate recent cooperation rate
    recent_rounds = min(3, round-1)
    total_recent_coop = sum of cooperators in last recent_rounds
    recent_coop_rate = total_recent_coop / (recent_rounds * n)
    
    # Endgame check
    if round > 0.8 * r:
        if recent_coop_rate >= m/n:
            return COOPERATE
        elif recent_coop_rate >= 0.7 * m/n:
            return COOPERATE  # Push for threshold
        else:
            return DEFECT
    
    # Critical mass recovery
    if recent_coop_rate < 0.3 * m/n:
        if round % 3 == 1:  # Every 3rd round
            return COOPERATE
        else:
            return DEFECT
    
    # Main adaptive decision
    threshold = (m - 0.5) / n
    
    if recent_coop_rate >= threshold:
        return COOPERATE
    
    # Momentum check for borderline cases
    if recent_rounds >= 3:
        trend = (coop_rate_round[round-1] - coop_rate_round[round-3])
        if trend > 0 and recent_coop_rate >= 0.8 * threshold:
            return COOPERATE
    
    return DEFECT
```

## Strategic Advantages

1. **Cooperative Start**: Signals good intentions and helps establish cooperative norms
2. **Adaptive**: Responds to group behavior rather than being blindly cooperative or defective
3. **Threshold-Aware**: Explicitly considers the minimum threshold needed for collective benefit
4. **Forgiveness**: Can recover from temporary cooperation breakdowns
5. **Exploitation-Resistant**: Protects against systematic free-riding while remaining cooperative
6. **Context-Sensitive**: Adapts behavior based on game phase (early, middle, endgame)

This strategy balances the cooperative objective with strategic robustness, aiming to sustain cooperation when possible while avoiding exploitation by purely selfish strategies.
'''

description_COOPERATIVE_44 = '''
# Adaptive Cooperative Strategy: "Threshold Guardian"

## Core Philosophy
This strategy aims to maintain cooperation while being robust against exploitation. It recognizes that achieving the cooperation threshold `m` is the critical goal, and adapts based on the collective behavior observed in the game history.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Start cooperatively to signal willingness to participate in the collective good, and gather information about other players' initial tendencies.

### Rounds 2 to r-1: Adaptive Cooperation
The strategy maintains three key variables:
- `cooperation_rate`: Average cooperation rate across all players in previous rounds
- `threshold_success_rate`: Fraction of previous rounds where threshold `m` was met
- `personal_cooperation_rate`: My own cooperation rate so far

**Decision Logic**:
```
IF threshold_success_rate >= 0.7:
    // High success rate - maintain cooperation with occasional strategic defection
    IF cooperation_rate > (m + 2) / n:
        // Excess cooperation - safe to defect occasionally
        Cooperate with probability 0.8
    ELSE:
        // Cooperation near threshold - stay cooperative
        Action = C
        
ELSE IF threshold_success_rate >= 0.3:
    // Moderate success - conditional cooperation
    IF cooperation_rate >= (m + 1) / n:
        // Sufficient cooperation trend
        Action = C
    ELSE IF cooperation_rate >= (m - 0.5) / n:
        // Borderline cooperation - encourage more
        Action = C
    ELSE:
        // Low cooperation - still try to encourage but protect self
        Cooperate with probability 0.6
        
ELSE:
    // Low success rate - defensive cooperation
    IF cooperation_rate >= m / n:
        // At least threshold-level cooperation
        Action = C
    ELSE:
        // Very low cooperation - protect self while still encouraging
        Cooperate with probability 0.4
```

### Final Round (Round r): Strategic Defection
- **Action**: D
- **Rationale**: In the last round, there's no future reputational benefit to cooperation, so defect to maximize personal payoff while others who cooperated still provide the threshold benefit.

## Adaptive Mechanisms

### 1. Momentum Detection
Track cooperation trends over the last 3 rounds:
- If cooperation is increasing: Increase cooperation probability by 0.1
- If cooperation is decreasing: Decrease cooperation probability by 0.1
- Bounded between 0.2 and 0.9

### 2. Threshold Proximity Adjustment
When the number of cooperators in the previous round was exactly `m` or `m-1`:
- Increase cooperation probability by 0.2 (recognize critical importance)
- This overrides other probability adjustments

### 3. Free-Rider Detection
If more than `(n-m+1)` players consistently defect while threshold is still met:
- Gradually reduce cooperation probability to avoid being exploited
- Minimum cooperation probability remains at 0.3 to maintain some collective orientation

## Edge Case Handling

### Small Games (n ≤ 4)
- Increase base cooperation rates by 0.2 since each player's contribution is more critical
- Be more forgiving of defection (individual actions have higher variance impact)

### High Threshold Games (m > n/2)
- Maintain higher cooperation rates even when success rate is low
- Reduce final round defection probability to 0.7 instead of 1.0

### High Reward Games (k ≥ 3)
- Increase cooperation probabilities across all conditions by 0.1
- The high reward justifies more risk-taking for cooperation

## Cooperative Alignment

This strategy maintains cooperative alignment through:

1. **Default Cooperation**: Always starts cooperatively and maintains cooperation as the default when conditions are reasonable

2. **Threshold Protection**: Prioritizes meeting the collective threshold over individual gain in most scenarios

3. **Encouraging Signals**: Continues cooperating even in suboptimal conditions to encourage others to cooperate

4. **Measured Response**: Reduces but doesn't eliminate cooperation even when facing high defection rates

5. **Strategic Restraint**: Only defects in the final round and occasionally when there's excess cooperation

The strategy balances being cooperative with being robust against exploitation, adapting to the specific dynamics that emerge in each game while maintaining a fundamentally cooperative orientation throughout most of the interaction.
'''

description_COOPERATIVE_45 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It starts optimistically but learns from the collective behavior to maintain cooperation when viable while protecting against systematic exploitation.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather behavioral data

### 2. Adaptive Threshold Mechanism
After round 3, maintain a **cooperation probability** based on recent collective performance:

```pseudocode
cooperation_rate = (cooperators_in_last_3_rounds) / (3 * n)
base_threshold = m / n  // minimum needed cooperation rate

if cooperation_rate >= base_threshold * 0.8:
    cooperation_probability = 0.9  // High cooperation when close to threshold
elif cooperation_rate >= base_threshold * 0.5:
    cooperation_probability = 0.7  // Moderate cooperation
else:
    cooperation_probability = 0.3  // Low but non-zero cooperation
```

### 3. Strategic Defection Prevention
To prevent the group from falling below the critical threshold:

- **Emergency Cooperation**: If cooperators in the previous round < m, increase cooperation_probability by 0.2 (capped at 1.0)
- **Momentum Preservation**: If exactly m players cooperated in the last round, maintain higher cooperation (probability = 0.8) to prevent threshold collapse

### 4. End-Game Handling
- **Last 20% of rounds**: Gradually reduce cooperation probability by 0.1 per round to account for others' end-game defection
- **Final round**: Cooperate only if cooperation_rate in last 3 rounds > base_threshold * 0.9

### 5. Exploitation Protection
Track individual exploitation attempts:
- If the same configuration repeats where exactly m-1 others cooperate while you defect, this suggests possible coordination against you
- In such cases, cooperate with probability 0.6 to break potential exploitation patterns

## Edge Case Handling

**First Round**: Always cooperate to signal cooperative intent and contribute to establishing a cooperative equilibrium.

**Early Rounds (2-3)**: Continue cooperation while gathering data about opponent tendencies.

**Mid-Game**: Apply full adaptive mechanism based on observed cooperation rates.

**End-Game**: Gradually reduce cooperation while maintaining enough to preserve group benefits if others remain cooperative.

**Threshold Boundary**: When hovering near m cooperators, slightly increase cooperation probability to maintain group benefits.

## Robustness Features

1. **Non-Exploitable**: Never fully defects, maintaining some cooperation even under adverse conditions
2. **Forgiving**: Quickly returns to higher cooperation when group behavior improves
3. **Adaptive**: Adjusts to various group sizes and cooperation thresholds
4. **History-Aware**: Uses recent performance rather than entire history to adapt to changing conditions
5. **Threshold-Sensitive**: Recognizes the critical importance of maintaining m cooperators

## Expected Behavior

This strategy will:
- Start cooperatively and encourage others to do the same
- Maintain cooperation when the group is performing well
- Reduce but not eliminate cooperation when facing widespread defection
- React quickly to prevent threshold collapse
- Balance individual payoffs with group welfare
- Remain robust against various opponent strategies including always-defect, always-cooperate, and other adaptive strategies

The strategy prioritizes group success while protecting against exploitation, making it both cooperative in spirit and strategically sound across diverse tournament conditions.
'''

description_COOPERATIVE_46 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATBC)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against systematic exploitation. It operates on the principle that cooperation should be conditional on evidence that enough other players are willing to reciprocate.

## Decision Rules

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent and gather information
- **Rounds 2 to min(5, r/3)**: Continue cooperating to establish a cooperative foundation and allow other players to reveal their strategies

### Adaptive Threshold Mechanism
After the initial cooperation phase, use a dynamic threshold system:

1. **Calculate Cooperation Rate**: 
   ```
   cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)
   ```

2. **Estimate Probability of Success**:
   ```
   expected_cooperators = cooperation_rate × n
   success_probability = probability that expected_cooperators ≥ m
   ```

3. **Decision Threshold**:
   - Cooperate if: `success_probability ≥ adaptive_threshold`
   - Where `adaptive_threshold` starts at 0.6 and adjusts based on recent outcomes

### Threshold Adaptation Rules
- **After Successful Rounds** (≥m cooperators): Decrease threshold by 0.05 (minimum 0.4)
- **After Failed Rounds** (<m cooperators): Increase threshold by 0.1 (maximum 0.8)
- This allows the strategy to become more trusting when cooperation works, more cautious when it fails

### Recent History Weighting
Weight recent rounds more heavily than distant ones:
```pseudocode
weighted_cooperation_rate = 0
total_weight = 0
for each round t from 1 to current_round-1:
    weight = 0.7^(current_round - 1 - t)  // Exponential decay
    weighted_cooperation_rate += weight × cooperation_rate_in_round_t
    total_weight += weight
weighted_cooperation_rate /= total_weight
```

## Edge Case Handling

### First Round
Always cooperate to:
- Signal cooperative intent
- Gather baseline information about opponent strategies
- Start building trust

### Last Round Considerations
- **If r is known and current round > 0.8×r**: Apply "endgame caution"
- Increase the adaptive threshold by 0.2 to account for potential defection cascades
- Still cooperate if conditions are met, as collective benefit remains important

### Low Participation Scenarios
- **If cooperation_rate < m/n**: Temporarily switch to a "revival attempt" mode
- Cooperate for 2 consecutive rounds regardless of threshold to attempt reestablishing cooperation
- If this fails (no improvement in cooperation rate), revert to threshold-based decisions with increased caution

### High Defection Environment
- **If cooperation fails for 3 consecutive rounds**: Enter "defensive mode"
- Require threshold ≥ 0.8 for cooperation
- Gradually reduce this requirement by 0.1 per successful round

## Cooperative Alignment Features

1. **Default to Cooperation**: The strategy starts cooperatively and maintains a bias toward cooperation when uncertain

2. **Forgiveness Mechanism**: After periods of high defection, the strategy actively attempts to restart cooperation rather than permanently defecting

3. **Collective Success Focus**: Decisions prioritize the probability of achieving the collective threshold (m cooperators) rather than individual payoff maximization

4. **Transparent Responsiveness**: The strategy responds predictably to cooperation and defection patterns, making it easier for other cooperative strategies to coordinate with

## Robustness Features

- **Adaptive Learning**: Continuously updates expectations based on observed behavior
- **Exploitation Protection**: Won't cooperate indefinitely if consistently exploited
- **Recovery Capability**: Can restart cooperation even after periods of mutual defection
- **Parameter Sensitivity**: Adjusts behavior based on game parameters (n, m, k, r)

## Implementation Pseudocode

```pseudocode
function decide_action(current_round, history, n, m, k, r):
    if current_round == 1:
        return COOPERATE
    
    if current_round <= min(5, r/3):
        return COOPERATE
    
    cooperation_rate = calculate_weighted_cooperation_rate(history)
    expected_cooperators = cooperation_rate * n
    success_probability = estimate_success_probability(expected_cooperators, m, n)
    
    threshold = adaptive_threshold
    
    // Apply edge case adjustments
    if current_round > 0.8 * r:  // Endgame
        threshold += 0.2
    
    if in_revival_mode or in_defensive_mode:
        threshold = apply_mode_adjustments(threshold)
    
    if success_probability >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

This strategy maintains a cooperative orientation while adapting to the strategic environment, making it both principled and pragmatic for tournament play.
'''

description_COOPERATIVE_47 = '''
I'll design a cooperative strategy called "Adaptive Threshold Guardian" that balances cooperation with strategic robustness.

## Strategy: Adaptive Threshold Guardian

### Core Philosophy
This strategy assumes that cooperation is valuable but recognizes that blind cooperation can be exploited. It maintains a cooperative stance while adapting to opponent behavior patterns, always working toward achieving the minimum threshold `m` for collective benefit.

### Decision Rules

**1. Initial Cooperation Phase (First 20% of rounds)**
- **Cooperate unconditionally** for the first `max(1, floor(r * 0.2))` rounds
- This establishes cooperative intent and gathers information about opponent tendencies
- Rationale: Early cooperation signals good faith and allows observation of others' strategies

**2. Adaptive Cooperation Phase (Remaining rounds)**
For each subsequent round, cooperate if ANY of these conditions are met:

**Condition A: Threshold Security**
- If in the previous round, exactly `m` or `m+1` players cooperated
- This maintains the threshold when we're close to the minimum needed
- Ensures stability around the critical cooperation level

**Condition B: High Cooperation Environment**
- If more than `(m + n) / 2` players cooperated in the previous round
- When cooperation is abundant, continue contributing to maintain the positive dynamic
- Takes advantage of cooperative momentum

**Condition C: Reciprocal Cooperation**
- If at least `m-1` players have shown consistent cooperation (cooperated in ≥60% of previous rounds)
- Rewards consistent cooperators and helps maintain their motivation
- Creates incentive for others to maintain cooperative behavior

**Condition D: Last Round Cooperation**
- Always cooperate in the final round if any of the above conditions were met in recent history
- Prevents end-game defection cascade while maintaining cooperative reputation

### Edge Case Handling

**First Round**: Always cooperate (information gathering + cooperative signaling)

**Last Round**: Cooperate if average cooperation rate across all previous rounds ≥ `m/n`

**Low Cooperation Scenarios**: If cooperation falls below `m-1` for 3 consecutive rounds, temporarily switch to:
- Cooperate only if exactly `m-1` others cooperated in the previous round
- This provides the minimal push needed to reach threshold

**Recovery Mechanism**: After any period of low cooperation, if cooperation returns to ≥`m` for 2 consecutive rounds, return to normal adaptive rules

### Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round <= max(1, floor(r * 0.2)):
        return COOPERATE
    
    prev_cooperators = count_cooperators(history, round-1)
    
    # Condition A: Threshold Security
    if prev_cooperators in [m, m+1]:
        return COOPERATE
    
    # Condition B: High Cooperation Environment  
    if prev_cooperators > (m + n) / 2:
        return COOPERATE
    
    # Condition C: Reciprocal Cooperation
    consistent_cooperators = count_consistent_cooperators(history, round-1)
    if consistent_cooperators >= m-1:
        return COOPERATE
    
    # Condition D: Last Round
    if round == r and historical_avg_cooperation >= m/n:
        return COOPERATE
    
    # Low cooperation recovery attempt
    if prev_cooperators == m-1:
        return COOPERATE
    
    return DEFECT
```

### Strategic Rationale

**Cooperative Alignment**: The strategy defaults toward cooperation and actively works to maintain the threshold `m` that benefits everyone.

**Robustness**: It doesn't cooperate blindly - it adapts to free-riding behavior by reducing cooperation when it's not reciprocated, but always remains ready to restore cooperation.

**Threshold Focus**: By specifically monitoring and responding to cooperation levels around `m`, it addresses the core collective action problem directly.

**Non-Exploitative**: The strategy doesn't try to gain unfair advantage but rather seeks sustainable cooperation that benefits all players.

This strategy should perform well against a variety of opponents - cooperating with other cooperative strategies, adapting to mixed strategies, and avoiding exploitation by pure defectors while still maintaining the possibility of collective benefit achievement.
'''

description_COOPERATIVE_48 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle that cooperation should be conditional on evidence that enough others are willing to cooperate to meet the threshold.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponent behavior

### 2. Adaptive Threshold Mechanism
After the initial phase, the strategy uses a dynamic cooperation probability based on:

**Cooperation Rate Calculation**:
```
recent_coop_rate = (cooperators in last 2 rounds) / (2 * n)
historical_coop_rate = (total cooperators seen) / (rounds_played * n)
weighted_coop_rate = 0.7 * recent_coop_rate + 0.3 * historical_coop_rate
```

**Expected Cooperators**:
```
expected_cooperators = weighted_coop_rate * n
```

**Cooperation Decision**:
- If `expected_cooperators >= m - 1`: Cooperate
- If `expected_cooperators < m - 2`: Defect  
- If `m - 2 <= expected_cooperators < m - 1`: Cooperate with probability `(expected_cooperators - (m-2))`

### 3. Safety Mechanisms

**Exploitation Protection**:
- If cooperation rate drops below `0.3 * (m/n)` for 3 consecutive rounds, switch to "cautious mode"
- In cautious mode: Only cooperate if recent cooperation rate >= `0.8 * (m/n)`

**Last Round Adjustment**:
- In the final round, cooperate only if historical evidence strongly suggests threshold will be met
- Specifically: cooperate if `weighted_coop_rate >= (m/n) + 0.1`

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and contribute to establishing a cooperative equilibrium.

### Early Rounds (2-3)
Continue cooperating to:
- Build trust and reciprocity
- Gather sufficient data about opponent strategies
- Avoid premature defection that could collapse cooperation

### Final Round
Apply stricter threshold since there's no future reputation benefit:
- Only cooperate if very confident threshold will be met
- Uses historical data with higher confidence requirement

### Insufficient History
When limited data is available (first few rounds), err on the side of cooperation while maintaining the threshold logic with available information.

## Adaptive Features

### Learning Component
The strategy continuously updates its model of opponent behavior:
- Tracks both recent trends (higher weight) and long-term patterns
- Adjusts expectations based on observed cooperation rates
- Responds to changes in opponent strategies

### Robustness Mechanisms
1. **Gradual Response**: Uses probabilistic cooperation in uncertain cases rather than hard switches
2. **Forgiveness**: Can return to cooperation if opponents demonstrate renewed cooperative behavior
3. **Exploitation Resistance**: Switches to defensive mode if repeatedly exploited

### Parameter Sensitivity
The strategy automatically adapts to different game parameters:
- Higher `m/n` ratios trigger more cautious behavior
- Higher `k` values encourage more cooperation attempts
- Longer games (`r`) allow for more sophisticated learning

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round <= 3:
        return COOPERATE
    
    recent_coop_rate = calculate_recent_cooperation(history, 2)
    historical_coop_rate = calculate_total_cooperation(history)
    weighted_rate = 0.7 * recent_coop_rate + 0.3 * historical_coop_rate
    
    expected_cooperators = weighted_rate * n
    
    if in_exploitation_protection_mode(history):
        if recent_coop_rate >= 0.8 * (m/n):
            return COOPERATE
        else:
            return DEFECT
    
    if round == r:  # Final round
        if weighted_rate >= (m/n) + 0.1:
            return COOPERATE
        else:
            return DEFECT
    
    if expected_cooperators >= m - 1:
        return COOPERATE
    elif expected_cooperators < m - 2:
        return DEFECT
    else:
        probability = expected_cooperators - (m - 2)
        return COOPERATE with probability
```

This strategy is cooperative by design, always starting with cooperation and maintaining willingness to cooperate when evidence suggests the threshold can be met, while protecting against systematic exploitation through adaptive learning mechanisms.
'''

description_COOPERATIVE_49 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve mutual benefit while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but learning from group dynamics.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and gather initial information about the group's disposition.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Learning

**Cooperate if ANY of the following conditions are met:**

1. **Momentum Condition**: In the previous round, exactly m or more players cooperated (threshold was met)

2. **Recovery Condition**: The cooperation count in the previous round was at least (m-1), AND the average cooperation rate over all previous rounds is ≥ 0.4

3. **Trend Condition**: The cooperation count has been increasing over the last 2 rounds (showing positive momentum)

4. **Strategic Necessity**: My cooperation combined with the most optimistic reasonable estimate of others' cooperation could reach the threshold m

**Otherwise, defect.**

### Final Round (Round r): Strategic Endgame
Use a weighted decision based on:
- **Primary factor (70% weight)**: If cooperation rate in previous round ≥ (m/n), then cooperate
- **Secondary factor (30% weight)**: If historical average cooperation rate ≥ 0.5, lean toward cooperation

Cooperate if the weighted decision favors cooperation.

## Key Adaptive Mechanisms

### 1. Optimistic Estimation
When evaluating "Strategic Necessity," estimate that players who cooperated in the previous round have a 80% chance of cooperating again, and players who defected have a 20% chance of switching to cooperation.

### 2. Forgiveness Mechanism
If cooperation fails for 2 consecutive rounds but then shows any sign of recovery (cooperation count increases), immediately return to cooperative stance to encourage rebuilding.

### 3. Protection Against Exploitation
If cooperation rate drops below 20% for 3 consecutive rounds, switch to defection until seeing clear recovery signals.

## Edge Case Handling

- **Very small groups (n ≤ 4)**: Increase cooperation threshold in Recovery Condition to 0.5 instead of 0.4
- **High threshold games (m > n/2)**: Reduce the minimum cooperation rate triggers by 0.1 to account for difficulty
- **Short games (r ≤ 5)**: Weight recent rounds more heavily (last 2 rounds count as 60% of history)

## Pseudocode Structure

```
function decide_action(round, n, m, k, r, history):
    if round == 1:
        return COOPERATE
    
    if round == r:  // Final round
        return endgame_decision(history, n, m)
    
    last_round_coop = count_cooperators(history, round-1)
    avg_coop_rate = calculate_average_cooperation_rate(history)
    
    // Check conditions in order
    if last_round_coop >= m:  // Momentum
        return COOPERATE
    
    if last_round_coop >= (m-1) AND avg_coop_rate >= 0.4:  // Recovery
        return COOPERATE
    
    if shows_increasing_trend(history, 2):  // Trend
        return COOPERATE
    
    if strategic_necessity_met(history, n, m):  // Strategic
        return COOPERATE
    
    return DEFECT
```

## Robustness Features

1. **Multi-condition approach**: Multiple pathways to cooperation prevent single-point failures
2. **Historical awareness**: Balances recent performance with long-term patterns
3. **Adaptive thresholds**: Adjusts expectations based on group size and game difficulty
4. **Exploitation protection**: Prevents indefinite cooperation with consistently defecting groups
5. **Recovery encouragement**: Quick to return to cooperation when group shows improvement

This strategy aims to foster cooperation while being resilient to various opponent behaviors, from consistent cooperators to adaptive learners to potential exploiters.
'''

description_COOPERATIVE_50 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation. It balances cooperative intent with adaptive response to observed behaviors, using the game's structure to encourage cooperation through conditional reciprocity.

## Decision Framework

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2 to min(5, r/3)**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Adaptive Cooperation Rules

**Primary Decision Logic:**
```
If (current_round <= initial_cooperation_phase):
    return COOPERATE

cooperation_rate = count_cooperators_last_round / n
recent_success_rate = successful_rounds_last_3 / min(3, rounds_played-1)

// Core cooperation condition
if (cooperation_rate >= (m-1)/n):  // Threshold likely to be met
    return COOPERATE
    
// Adaptive forgiveness mechanism
if (recent_success_rate >= 0.5 AND cooperation_rate >= (m-2)/n):
    return COOPERATE
    
// Last chance cooperation (final 20% of rounds)
if (current_round > 0.8 * r AND cooperation_rate >= (m-1.5)/n):
    return COOPERATE
    
// Conditional defection with recovery opportunity
if (failed_rounds_last_3 >= 2):
    if (random() < 0.3):  // 30% chance to test cooperation revival
        return COOPERATE
    else:
        return DEFECT
        
return DEFECT
```

### 3. Specific Decision Rules

**Cooperate when:**
- First round (establish cooperative intent)
- Number of cooperators in previous round ≥ (m-1) 
- Recent success rate ≥ 50% AND cooperators ≥ (m-2)
- In final 20% of rounds AND cooperators ≥ (m-1.5) [rounded]
- Random cooperation test (30% probability) after recent failures

**Defect when:**
- Cooperation rate consistently below threshold
- Multiple recent failures with low cooperation
- Self-protection in clearly uncooperative environment

### 4. Edge Cases

**First Round**: Always cooperate to signal cooperative intent

**Last Round**: 
- Cooperate if cooperation rate in previous rounds suggests threshold will be met
- Otherwise apply standard rules (no special "end-game" defection)

**Tie-breaking**:
- When cooperation rate exactly equals threshold: cooperate
- When uncertain about borderline cases: lean toward cooperation

**Very Small Groups (n ≤ 4)**:
- Increase cooperation tendency by 20%
- More forgiving of occasional defections

### 5. Robustness Features

**Against Always Defectors**: 
- Quickly identifies uncooperative environment
- Switches to defection to avoid exploitation
- Maintains periodic cooperation tests

**Against Tit-for-Tat variants**:
- Initiates with cooperation
- Responds to reciprocal behavior appropriately
- Forgives occasional defections

**Against Random strategies**:
- Adapts to average cooperation levels
- Uses statistical approach rather than pattern matching

**Against Sophisticated strategies**:
- Doesn't rely on predictable patterns
- Uses threshold-based logic that's hard to exploit
- Maintains some randomness in recovery attempts

## Key Strategic Principles

1. **Conditional Cooperation**: Cooperate when others are likely to cooperate
2. **Graduated Response**: Don't immediately defect after single failures
3. **Information Gathering**: Use early rounds to assess group dynamics
4. **Threshold Awareness**: Focus on the critical threshold m rather than full cooperation
5. **Forgiveness**: Provide opportunities for cooperation revival
6. **Self-Protection**: Avoid being systematically exploited

This strategy is designed to work across different parameter settings while maintaining a fundamentally cooperative approach that adapts to the strategic environment it encounters.
'''

description_COOPERATIVE_51 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with adaptive learning, aiming to achieve the collective threshold while protecting against consistent defectors. It emphasizes building cooperative momentum early while maintaining flexibility to respond to changing group dynamics.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and contribute to early momentum

### Rounds 2 to r-1: Adaptive Threshold Tracking

The strategy maintains two key metrics:
- **Cooperation Rate (CR)**: Percentage of players who cooperated in the previous round
- **Trend Score (TS)**: Weighted average of cooperation rates over recent rounds (more weight on recent rounds)

**Decision Logic:**
1. **High Confidence Zone** (CR ≥ m/n + 0.1):
   - Cooperate if you cooperated last round OR if TS is increasing
   - Defect if you defected last round AND TS is declining

2. **Threshold Zone** (m/n - 0.1 ≤ CR < m/n + 0.1):
   - Always cooperate (critical zone where your action likely determines threshold success)

3. **Low Confidence Zone** (CR < m/n - 0.1):
   - Cooperate if TS is increasing AND you've defected for ≤2 consecutive rounds
   - Otherwise defect (avoid being exploited by persistent defectors)

### Final Round (Round r): Strategic Finish
- **Cooperate** if the cooperation rate in round r-1 was ≥ (m-1)/n
- **Defect** otherwise
- Rationale: In the final round, be willing to cooperate if there's reasonable chance others will too, but don't be the sole cooperator

## Adaptive Components

### 1. Momentum Detection
Track whether cooperation is increasing, stable, or declining:
```
TS(t) = 0.5 × CR(t-1) + 0.3 × CR(t-2) + 0.2 × CR(t-3)
Momentum = TS(t) - TS(t-1)
```

### 2. Defection Streak Limiting
Never defect for more than 3 consecutive rounds, even in low confidence zones. This prevents permanent abandonment of cooperation and allows for recovery.

### 3. Near-Threshold Sensitivity
When the group is within 1-2 cooperators of the threshold, increase cooperation probability by treating it as the threshold zone regardless of exact ratios.

## Edge Case Handling

### First Round
- Always cooperate to establish good faith and maximize early cooperation momentum

### Last Round
- Use strategic calculation based on previous round performance
- Avoid being exploited but don't abandon potentially successful cooperation

### Very Small Groups (n ≤ 4)
- Increase cooperation threshold sensitivity (use tighter bounds around m/n)
- Be more forgiving of defection in early rounds

### Very Large Groups (n > 20)
- Focus more on trend analysis than single-round cooperation rates
- Use longer history window for trend calculation

### High Threshold Games (m/n > 0.7)
- Be more persistent in cooperation attempts
- Extend the cooperation streak limit to 4-5 rounds before temporary defection

## Robustness Features

1. **Anti-Exploitation Protection**: Won't cooperate indefinitely if consistently being the only/few cooperators

2. **Recovery Mechanism**: Always willing to return to cooperation if group dynamics improve

3. **Threshold Awareness**: Recognizes when the group is close to success and adjusts accordingly

4. **End-Game Optimization**: Doesn't abandon cooperation prematurely but avoids final-round exploitation

## Example Pseudocode
```
if round == 1:
    return COOPERATE
    
if round == r:
    return COOPERATE if prev_cooperation_rate >= (m-1)/n else DEFECT

# Calculate trend score and momentum
trend_score = weighted_average_cooperation_rate(last_3_rounds)
cooperation_rate = prev_round_cooperation_rate

# Determine zone
if cooperation_rate >= m/n + 0.1:
    # High confidence zone
    if (i_cooperated_last_round OR trend_increasing):
        return COOPERATE
    else:
        return DEFECT if consecutive_defections < 3 else COOPERATE
        
elif cooperation_rate >= m/n - 0.1:
    # Threshold zone - critical cooperation
    return COOPERATE
    
else:
    # Low confidence zone
    if (trend_increasing AND consecutive_defections <= 2):
        return COOPERATE
    else:
        return DEFECT if consecutive_defections < 3 else COOPERATE
```

This strategy is designed to be genuinely cooperative while being robust against various opponent behaviors, from pure defectors to erratic players to other cooperative strategies.
'''

description_COOPERATIVE_52 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy is fundamentally cooperative, aiming to achieve and maintain the collective benefit while being robust against exploitation. It adapts to the group's behavior patterns and maintains cooperation when feasible, but includes defensive mechanisms against persistent defection.

## Decision Rules

### 1. First Round Behavior
**Always cooperate in round 1** regardless of parameters. This establishes cooperative intent and gathers initial information about the group's disposition.

### 2. Cooperation Threshold Calculation
For each subsequent round, calculate a dynamic cooperation threshold based on recent history:

```
cooperation_rate = (cooperators in last min(3, current_round-1) rounds) / (n × min(3, current_round-1))
adjusted_threshold = m + max(0, (n-m) × (0.5 - cooperation_rate))
```

This creates an adaptive threshold that:
- Starts at the minimum required (m)
- Increases when cooperation rates are low (below 50%)
- Stays at minimum when cooperation is healthy

### 3. Main Decision Logic
```pseudocode
IF round == 1:
    COOPERATE

ELSE IF round == r (final round):
    Apply final round logic (see below)

ELSE:
    recent_cooperators = count cooperators in last min(3, round-1) rounds
    expected_cooperators = recent_cooperators / min(3, round-1)
    
    IF expected_cooperators >= adjusted_threshold:
        COOPERATE
    ELSE IF recent trend shows improvement AND cooperation_rate > 0.3:
        COOPERATE (give benefit of doubt)
    ELSE:
        Apply defensive logic
```

### 4. Defensive Logic
When cooperation seems unlikely to reach threshold:
- **Defect** but track if situation improves
- **Forgiveness mechanism**: If cooperation rate suddenly increases above 60% for 2 consecutive observations, resume cooperation
- **Solidarity check**: If exactly m-1 others cooperated last round, cooperate (help reach threshold)

### 5. Final Round Handling
```pseudocode
IF cooperation has been successful in recent rounds (>70% success rate):
    COOPERATE (maintain group benefit)
ELSE IF exactly m-1 others likely to cooperate based on their patterns:
    COOPERATE (be the decisive cooperator)
ELSE:
    DEFECT (protect against final-round exploitation)
```

## Edge Cases and Special Scenarios

### Small Groups (n ≤ 4)
- Be more cooperative due to higher individual impact
- Extend forgiveness period by 1 round
- In final round, cooperate if any chance of reaching threshold

### High Threshold Scenarios (m > n/2)
- Focus on identifying committed cooperators
- Form implicit coalitions with consistent cooperators
- Be more patient with forgiveness (allow 2 failed attempts before defensive mode)

### Low Reward Scenarios (k ≤ 1.5)
- Slightly more cautious about cooperation when success seems unlikely
- Require 2 consecutive positive signals before resuming cooperation after defection

## Robustness Features

1. **Trend Analysis**: Considers whether cooperation is improving or declining, not just current levels
2. **Graduated Response**: Doesn't immediately give up after failures; provides multiple chances
3. **Exploitation Protection**: Defends against consistent defectors while remaining open to genuine cooperation
4. **Threshold Achievement Focus**: Specifically watches for situations where one additional cooperator makes the difference

## Cooperation Alignment

This strategy embodies cooperation by:
- **Leading by example**: Always starts cooperatively
- **Supporting threshold achievement**: Actively tries to help reach the minimum needed
- **Maintaining group benefit**: Prioritizes collective success when feasible
- **Providing forgiveness**: Gives multiple chances for defectors to reform
- **Strategic patience**: Doesn't abandon cooperation at first sign of trouble

The strategy balances pure altruism with practical game theory, ensuring it contributes to collective benefit while avoiding systematic exploitation. It's designed to work well with other cooperative strategies while defending against purely selfish opponents.
'''

description_COOPERATIVE_53 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, maintaining a fundamentally cooperative stance while protecting against persistent free-riders. It recognizes that cooperation is a collective good that requires both contribution and encouragement of others to participate.

## Decision Framework

### Phase 1: Initial Cooperation Period (Rounds 1 to ⌊r/4⌋)
**Rule**: Always COOPERATE
- **Rationale**: Establish cooperative intent early and give the group maximum opportunity to achieve the threshold
- **Signal**: Demonstrate commitment to collective welfare from the start

### Phase 2: Adaptive Learning Phase (Middle rounds)
**Rule**: Cooperate if recent cooperation rate suggests threshold achievement is likely

```pseudocode
cooperation_rate = (cooperators in last 3 rounds) / (3 * n)
cooperation_threshold = max(0.6, m/n - 0.1)

if cooperation_rate >= cooperation_threshold:
    action = COOPERATE
else:
    action = DEFECT
```

**Key Parameters**:
- Monitor cooperation rate over last 3 rounds (or fewer if near start)
- Set cooperation threshold slightly below what's needed (m/n - 0.1) but with a floor of 0.6
- This maintains optimistic cooperation while adapting to group dynamics

### Phase 3: Endgame Strategy (Last ⌊r/8⌋ rounds)
**Rule**: Increase cooperation probability as rounds remain

```pseudocode
rounds_remaining = r - current_round + 1
base_cooperation_rate = cooperation_rate_from_phase2
endgame_boost = min(0.3, rounds_remaining / (r/4))
final_cooperation_threshold = cooperation_threshold - endgame_boost

if cooperation_rate >= final_cooperation_threshold:
    action = COOPERATE
else:
    action = DEFECT
```

## Detailed Decision Rules

### Round 1
Always COOPERATE - no history to analyze, establish cooperative tone

### Rounds 2 to ⌊r/4⌋
Always COOPERATE - build trust and assess group dynamics

### Middle Rounds
1. Calculate recent cooperation rate over last min(3, current_round-1) rounds
2. If rate ≥ cooperation_threshold → COOPERATE
3. If rate < cooperation_threshold → DEFECT
4. Update running assessment of group cooperativeness

### Final Round
**Special Rule**: If historical success rate (rounds where threshold was met / total rounds played) > 0.5, then COOPERATE, otherwise apply standard adaptive rule

## Adaptive Elements

### Learning Mechanism
- Track cooperation patterns to identify:
  - Consistent cooperators (always support them)
  - Occasional cooperators (encourage when they participate)  
  - Persistent defectors (don't enable free-riding)

### Threshold Adjustment
- If group consistently exceeds threshold: slightly reduce cooperation threshold to maintain efficiency
- If group consistently fails threshold: increase personal cooperation tendency

### Forgiveness Protocol
After any round where threshold is NOT met:
- Next round: reduce cooperation threshold by 0.1 (more forgiving)
- Rationale: Group may be learning and adjusting

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Extend initial cooperation phase to ⌊r/3⌋ rounds
- Use more forgiving thresholds (cooperation_threshold = m/n - 0.2)

### Very Large Groups (n > 10)
- Reduce observation window to last 2 rounds (faster adaptation)
- Use stricter thresholds (cooperation_threshold = m/n)

### High Threshold Requirements (m/n > 0.8)
- Always cooperate in first ⌊r/2⌋ rounds
- Only defect if cooperation rate falls below 0.4

### Last Few Rounds with Poor History
If in final 3 rounds and historical success rate < 0.3:
- Switch to "salvage mode": COOPERATE only if cooperation in previous round ≥ m-1

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely with consistent defectors
2. **Pro-Cooperation Bias**: Errs on side of cooperation when uncertain
3. **Adaptive Forgiveness**: Gives groups chances to recover from failures
4. **Endgame Awareness**: Increases cooperation attempts as game nears end
5. **Parameter Scaling**: Adjusts behavior based on game structure (n, m, r)

## Expected Behavior
- Starts highly cooperative to establish positive group dynamics
- Learns from group patterns and adapts accordingly
- Maintains cooperative intent while preventing exploitation
- Increases cooperation attempts toward endgame
- Balances individual rationality with collective welfare

This strategy should perform well against both cooperative and mixed opponent populations, while maintaining a fundamentally cooperative stance that contributes to overall group welfare.
'''

description_COOPERATIVE_54 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining cooperation when viable and adapting to group dynamics. It balances optimism with pragmatism.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and give the group the best chance to establish a cooperative norm

### Rounds 2 to r-1: Adaptive Cooperation Based on Momentum

**Step 1: Calculate Cooperation Momentum**
```
cooperation_rate = (total_cooperations_last_round) / n
recent_trend = cooperation_rate - previous_cooperation_rate
momentum = cooperation_rate + 0.5 * recent_trend
```

**Step 2: Assess Threshold Viability**
```
if (cooperations_last_round >= m-1):
    threshold_viable = true
else:
    threshold_viable = false
```

**Step 3: Decision Logic**
```
if (threshold_viable AND momentum >= 0.3):
    cooperate
else if (cooperation_rate >= m/n + 0.1):
    cooperate  // Group shows strong cooperative tendency
else if (momentum > 0.2 AND cooperations_last_round >= m/2):
    cooperate  // Positive trend with reasonable base
else:
    defect
```

### Final Round (Round r): Strategic Endgame
```
if (cooperations_last_round >= m-1):
    cooperate  // One cooperation away from threshold
else if (average_cooperation_rate_last_3_rounds >= m/n):
    cooperate  // Group has shown consistent cooperation
else:
    defect  // Protect against final round defection
```

## Key Features

### 1. Threshold Awareness
- Prioritizes cooperation when the group is close to the threshold (m-1 cooperators)
- Recognizes when cooperation is futile (too few cooperators with negative trends)

### 2. Momentum Tracking
- Uses recent trends to predict future behavior
- Weighs recent cooperation rates more heavily than distant history
- Adapts to both improving and deteriorating group dynamics

### 3. Forgiveness and Recovery
- Doesn't permanently punish the group for temporary defection spikes
- Allows for recovery if cooperation trends improve
- Maintains hope for coordination even after setbacks

### 4. Exploitation Protection
- Defects when cooperation consistently fails to reach threshold
- Avoids being the "sucker" in groups with chronically low cooperation
- Becomes more conservative as evidence of non-cooperation accumulates

## Edge Case Handling

### Small Groups (n ≤ 4)
- Lower the momentum threshold by 0.1 since individual actions have larger impact
- Be more forgiving of volatility

### High Threshold Games (m > n/2)
- Increase cooperation when momentum > 0.15 (lower bar)
- More aggressive in supporting cooperation attempts

### Low Reward Games (k ≤ 1.5)
- Require higher momentum (≥ 0.4) to justify cooperation risk
- More conservative overall approach

## Robustness Features

1. **Against Always Defectors**: Will eventually learn and defect when cooperation consistently fails

2. **Against Conditional Cooperators**: Will maintain cooperation when group dynamics support it

3. **Against Random Players**: Uses momentum to filter noise and identify genuine cooperation trends

4. **Against Exploiters**: Protects against strategies that cooperate only when others defect

## Strategy Summary
ATCS begins optimistically, then adapts based on group momentum and threshold proximity. It maintains cooperation when the group shows promise while protecting against exploitation when cooperation consistently fails. The strategy balances individual rationality with collective welfare, making it robust across diverse opponent compositions.
'''

description_COOPERATIVE_55 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "graduated cooperation" - starting optimistically but adapting based on the cooperation patterns observed in the group.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Dynamic Cooperation Threshold**
- Maintain a dynamic estimate of the "cooperation rate" in the group
- Cooperate when the expected number of cooperators (including yourself) meets or exceeds the threshold `m`
- Use historical data to predict future cooperation patterns

**Cooperation Decision Logic:**
```
If (estimated_cooperators_next_round + 1) >= m:
    Cooperate
Else:
    Defect
```

### 2. Cooperation Rate Estimation

**Weighted Historical Average:**
- Track the cooperation rate across all previous rounds
- Give more weight to recent rounds (exponential decay)
- Formula: `cooperation_rate = α × recent_rate + (1-α) × historical_rate`
- Where α = 0.7 (favoring recent behavior)

**Expected Cooperators Calculation:**
```
estimated_cooperators_next_round = floor(cooperation_rate × (n-1))
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate if `m ≤ n/2` (threshold is achievable with moderate cooperation)
- Defect if `m > 2n/3` (threshold requires very high cooperation)
- Otherwise cooperate (optimistic start)

**Last Round:**
- If currently on track to meet threshold and previous rounds showed consistent cooperation: Cooperate
- Otherwise: Apply standard decision rule (since reputation doesn't matter for future rounds)

**Early Rounds (rounds 2 to min(5, r/4)):**
- Apply a "forgiveness factor" - be slightly more optimistic about cooperation
- Adjust threshold: cooperate if `(estimated_cooperators + 1) >= m - 1`

### 4. Adaptive Mechanisms

**Streak Detection:**
- Track consecutive rounds of successful/failed threshold achievement
- After 3+ consecutive successes: become slightly more trusting (reduce cooperation threshold by 0.5)
- After 2+ consecutive failures: become more cautious (require higher confidence)

**Momentum Adjustment:**
- If cooperation rate is trending upward over last 3 rounds: add optimism bonus (+0.1 to cooperation rate estimate)
- If cooperation rate is trending downward: add caution penalty (-0.1 to cooperation rate estimate)

### 5. Robustness Features

**Anti-Exploitation Protection:**
- If personal cooperation rate > 0.8 but group threshold achievement rate < 0.3: switch to more defensive posture
- Defensive posture: only cooperate if estimated cooperators ≥ m + 1

**Recovery Mechanism:**
- If group performance is poor (threshold met < 30% of time) for extended period, attempt to "reset" cooperation by cooperating for 2 consecutive rounds regardless of estimates
- This happens at most once every max(5, r/4) rounds

### 6. Implementation Pseudocode

```
Initialize:
    cooperation_history = []
    threshold_met_history = []
    personal_cooperation_count = 0
    
For each round t:
    If t == 1:
        decision = first_round_rule(n, m)
    Else:
        cooperation_rate = calculate_weighted_cooperation_rate(cooperation_history)
        cooperation_rate = apply_momentum_adjustment(cooperation_rate)
        
        estimated_cooperators = floor(cooperation_rate × (n-1))
        
        If early_round(t, r):
            threshold = m - 1
        Else:
            threshold = m
            
        If in_defensive_posture():
            threshold = m + 1
            
        If should_attempt_recovery(t):
            decision = Cooperate
        Else:
            decision = Cooperate if (estimated_cooperators + 1) >= threshold else Defect
    
    Execute decision
    Update histories and counters
```

## Strategic Advantages

1. **Adaptive**: Learns from group behavior patterns
2. **Robust**: Protected against both over-cooperation and under-cooperation
3. **Cooperative**: Starts optimistically and tries to maintain cooperation when possible
4. **Realistic**: Accounts for the fact that others may not be perfectly cooperative
5. **Recovery-oriented**: Includes mechanisms to rebuild cooperation after failures

This strategy aims to be a "good citizen" that promotes collective welfare while avoiding exploitation, adapting its cooperation level to match what the group can realistically achieve.
'''

description_COOPERATIVE_56 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining cooperation when feasible and strategically defecting only when necessary for survival or to incentivize better group behavior.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponent tendencies

### 2. Adaptive Threshold Assessment
After round 3, calculate:
- **Cooperation Rate (CR)**: Average number of cooperators across all previous rounds
- **Recent Cooperation Trend (RCT)**: Weighted average of cooperators in last 3 rounds (weights: 0.5, 0.3, 0.2 for most recent to oldest)
- **Success Rate (SR)**: Proportion of previous rounds where threshold m was met

### 3. Main Decision Logic
For round t > 3:

```pseudocode
if (RCT >= m - 1) then
    // Threshold likely to be met even if I defect
    if (SR > 0.7 AND remaining_rounds > 3) then
        COOPERATE // Maintain good group dynamics
    else
        DEFECT // Free-ride when safe
    end if
    
else if (RCT >= m - 2) then
    // My cooperation is potentially decisive
    COOPERATE
    
else if (RCT < m - 2 AND SR < 0.3) then
    // Group is failing consistently
    if (CR is increasing over last 3 rounds) then
        COOPERATE // Encourage positive trend
    else
        DEFECT // Cut losses
    end if
    
else
    // Borderline cases - use mixed criteria
    if (t <= r/2 OR SR > 0.5) then
        COOPERATE // Early game or group shows promise
    else
        DEFECT // Late game with poor prospects
    end if
end if
```

### 4. End-Game Adjustments
**Final Round**: Always defect (no future rounds to incentivize cooperation)

**Last 20% of rounds**: Apply "forgiveness discount" - reduce cooperation threshold by 1 when deciding, as there's less time to recover from failed cooperation

### 5. Emergency Cooperation Mode
If the group has failed to meet threshold for 3 consecutive rounds AND remaining rounds > r/4:
- Switch to "emergency cooperation" for next 2 rounds regardless of recent trends
- This prevents complete breakdown and gives the group a chance to recover

## Edge Cases

### Small Groups (n ≤ 4)
- Increase initial cooperation phase to 4 rounds
- Be more forgiving of defection (reduce required cooperation rates by 0.5)

### High Threshold Games (m > n/2)
- Extend initial cooperation to first 25% of rounds
- Only defect if RCT < m - 3 (require very strong signal of failure)

### Low Reward Games (k ≤ 1.5)
- More willing to defect when RCT ≥ m (since free-riding payoff is relatively attractive)
- Require higher success rate (SR > 0.8) to maintain cooperation in "safe" situations

### Very Short Games (r ≤ 5)
- Cooperate for first r-2 rounds
- Use simpler heuristic: cooperate if any round previously succeeded

## Robustness Features

1. **Trend Sensitivity**: Uses both overall history and recent trends to adapt to changing group dynamics

2. **Conditional Forgiveness**: Won't permanently abandon cooperation after failures if positive trends emerge

3. **Strategic Free-Riding**: Occasionally defects when threshold will likely be met anyway, balancing cooperative intent with rational self-interest

4. **Breakdown Prevention**: Emergency cooperation mode prevents complete group failure

5. **Parameter Adaptation**: Adjusts behavior based on game parameters (n, m, k, r) to remain effective across different contexts

## Expected Performance
This strategy should:
- Achieve high cooperation rates in groups with other cooperative strategies
- Avoid excessive exploitation by purely selfish strategies
- Maintain reasonable payoffs even against mixed or adversarial opponents
- Scale effectively across different parameter ranges
- Encourage cooperation through conditional reciprocity while protecting against systematic exploitation
'''

description_COOPERATIVE_57 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to achieve and maintain the cooperation threshold while protecting against exploitation. It operates on the principle of "cooperative optimism with learned caution."

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1 to min(3, r/3))
- **Always cooperate** in the first round to signal cooperative intent
- **Continue cooperating** for 2-3 initial rounds (or first third of game if very short) to establish cooperative momentum and gather information about opponent behaviors

### 2. Adaptive Cooperation Phase (Middle rounds)
The strategy uses a **dynamic cooperation probability** based on:

**Base Cooperation Rate Calculation:**
```
recent_cooperation_rate = (cooperators in last 3 rounds) / (3 × n)
cooperation_deficit = max(0, (m/n) - recent_cooperation_rate)
base_cooperation_prob = 0.7 + cooperation_deficit
```

**Cooperate if ANY of these conditions hold:**
- Base cooperation probability exceeds random threshold
- Previous round had exactly (m-1) cooperators (step up to secure threshold)
- Previous round had exactly m cooperators (maintain threshold)
- Cooperation rate is dangerously low: recent_cooperation_rate < (m-1)/n

### 3. Momentum Adjustment
Track cooperation "momentum":
```
if last_round_cooperators >= m:
    momentum_bonus = 0.2
else:
    momentum_penalty = -0.1
    
adjusted_cooperation_prob = base_cooperation_prob + momentum_bonus/penalty
```

### 4. Final Phase Strategy (Last 20% of rounds)
- If cooperation has been consistently successful (threshold met in >70% of recent rounds):
  - **Maintain cooperation** to preserve mutual benefits
- If cooperation has been failing frequently:
  - **Gradual defection**: Reduce cooperation probability by 0.1 each round
- In the very last round:
  - **Cooperate if** expected cooperators ≥ m-1, otherwise defect

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent and give the collective the best chance

### When Threshold Consistently Missed
If threshold missed in 3+ consecutive rounds:
- Reduce base cooperation rate to 0.4
- Only cooperate if recent trends suggest others are increasing cooperation
- Reassess every 2 rounds

### When Threshold Consistently Met
If threshold met in 5+ consecutive rounds:
- Increase base cooperation rate to 0.8
- Maintain cooperative stance but monitor for sudden defections

### Very Short Games (r ≤ 5)
- Cooperate for first r-2 rounds
- In final rounds, cooperate only if threshold likely to be met

## Cooperative Alignment Features

1. **Threshold Security**: Prioritizes ensuring at least m cooperators over personal payoff maximization
2. **Forgiveness**: Doesn't permanently punish temporary defections if cooperation can be restored
3. **Leadership**: Steps up cooperation when the group is close to but below threshold
4. **Sustainability**: Aims for long-term collective success rather than short-term individual gains

## Robustness Features

1. **Learning**: Adapts cooperation rate based on observed group behavior
2. **Anti-exploitation**: Reduces cooperation if consistently exploited
3. **Resilience**: Can recover from cooperation breakdowns if others show renewed cooperative intent
4. **Endgame protection**: Accounts for likely defection increases in final rounds

## Pseudocode Summary
```
function decide_action(round, history, n, m, k, r):
    if round <= min(3, r/3):
        return COOPERATE
    
    recent_coop_rate = calculate_recent_cooperation(history, 3)
    cooperation_deficit = max(0, (m/n) - recent_coop_rate)
    base_prob = 0.7 + cooperation_deficit
    
    if last_round_cooperators == m-1 or last_round_cooperators == m:
        return COOPERATE
    
    if recent_coop_rate < (m-1)/n:
        return COOPERATE
    
    momentum = calculate_momentum(history)
    final_prob = base_prob + momentum
    
    if round > 0.8 * r:
        final_prob = adjust_for_endgame(final_prob, history)
    
    return COOPERATE if random() < final_prob else DEFECT
```

This strategy maintains a cooperative orientation while adapting to the strategic realities of the game, making it robust against both overly cooperative and overly defecting opponents.
'''

description_COOPERATIVE_58 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It dynamically adjusts cooperation based on observed group behavior and game parameters.

## Decision Rules

### 1. Initial Cooperation Phase
**First Round**: Always cooperate (C)
- Establishes cooperative intent
- Gathers information about group dynamics

### 2. Adaptive Threshold System
The strategy maintains a **cooperation threshold** (CT) that determines when to cooperate:

**CT = max(m, observed_avg_cooperators * adjustment_factor)**

Where:
- `m` = minimum cooperators needed
- `observed_avg_cooperators` = rolling average of cooperators in recent rounds
- `adjustment_factor` = dynamic multiplier based on success rate

### 3. Core Decision Logic
```pseudocode
if current_round <= 2:
    return COOPERATE
    
if current_round == final_round:
    return apply_endgame_logic()
    
cooperation_probability = calculate_cooperation_probability()
return COOPERATE if random() < cooperation_probability else DEFECT
```

### 4. Cooperation Probability Calculation
```pseudocode
base_probability = min(1.0, (m + safety_buffer) / n)

# Adjust based on recent success
if recent_success_rate > 0.7:
    adjustment = +0.2
elif recent_success_rate < 0.3:
    adjustment = -0.2
else:
    adjustment = 0

# Factor in cooperation momentum
momentum = (recent_cooperators - m) / n
momentum_bonus = max(0, momentum * 0.1)

# Trust decay for consistent defectors
trust_penalty = calculate_trust_penalty()

final_probability = base_probability + adjustment + momentum_bonus - trust_penalty
return clamp(final_probability, 0.1, 0.95)
```

## Key Components

### 1. Success Tracking
- Monitor threshold achievement over last 5 rounds
- Calculate success rate: `successful_rounds / total_observed_rounds`
- Use exponential decay for older observations

### 2. Trust System
```pseudocode
for each round:
    if threshold_met:
        trust_score += 0.1 for all players
    else:
        trust_score -= 0.2 globally
        
trust_penalty = max(0, (0.5 - average_trust) * 0.3)
```

### 3. Safety Buffer
Always aim for `m + ceil(n * 0.1)` cooperators to account for uncertainty and provide margin above minimum threshold.

### 4. Endgame Logic
```pseudocode
if current_round == final_round:
    if recent_success_rate > 0.6 AND recent_cooperators >= m-1:
        return COOPERATE  # Help secure final threshold
    else:
        return DEFECT     # Protect against likely failure
```

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent and gather baseline data

### Early Rounds (2-3)
- Maintain high cooperation probability (0.8+) to establish positive momentum
- Use simple heuristic: cooperate if at least `m-1` others likely to cooperate

### Mid-Game Adaptation
- Continuously update cooperation threshold based on observed patterns
- Implement "forgiveness" mechanism: occasionally cooperate even when recent history suggests failure

### Final Round
- Balance between securing threshold success and protecting individual payoff
- Cooperate only if high confidence in threshold achievement

## Robustness Features

### 1. Anti-Exploitation Protection
- Gradually reduce cooperation if success rate consistently low (< 30%)
- Implement "cooling off" periods after repeated failures

### 2. Recovery Mechanism
- After 3 consecutive failed rounds, attempt "restart" with higher cooperation for 2 rounds
- Signal renewed cooperative intent

### 3. Parameter Sensitivity
- For high `k` values: increase cooperation probability
- For `m` close to `n`: be more conservative (higher threshold for cooperation)
- For small `n`: weight individual decisions more heavily

### 4. Noise Tolerance
- Use moving averages rather than single-round decisions
- Implement probabilistic rather than deterministic choices to avoid being predictable

## Expected Behavior Patterns

1. **Against All-Cooperators**: Consistently cooperate, achieving maximum mutual benefit
2. **Against All-Defectors**: Quickly reduce cooperation, minimizing losses
3. **Against Mixed Strategies**: Adapt to achieve threshold when possible, defect when unlikely
4. **Against Tit-for-Tat**: Establish stable cooperation through consistent behavior
5. **Against Random Players**: Use statistical patterns to optimize threshold achievement

This strategy prioritizes collective welfare while maintaining individual rationality, adapting to opponent behavior patterns, and providing robust performance across diverse competitive environments.
'''

description_COOPERATIVE_59 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It starts with optimistic cooperation but learns from group behavior to maintain effectiveness while maximizing collective welfare.

## Decision Rules

### Phase 1: Optimistic Cooperation (Rounds 1 to r/3)
- **Always cooperate** regardless of others' actions
- **Rationale**: Establish cooperative intent and give the group maximum opportunity to reach the threshold
- This creates the best possible foundation for collective success

### Phase 2: Adaptive Learning (Rounds r/3+1 to 2r/3)
- **Cooperate if**: Average cooperation rate in previous rounds ≥ (m/n) - 0.1
- **Defect if**: Average cooperation rate < (m/n) - 0.1
- **Rationale**: Adjust based on group's demonstrated cooperation level, with slight tolerance below the theoretical threshold

### Phase 3: Strategic Endgame (Final r/3 rounds)
- **Enhanced threshold**: Cooperate only if recent cooperation rate ≥ m/n
- **Momentum consideration**: If cooperation increased in Phase 2, lower threshold by 0.05
- **Rationale**: Be more selective as the game concludes, but reward positive trends

## Specific Decision Algorithm

```pseudocode
function decide_action(round, history, n, m, k, r):
    if round <= r/3:
        return COOPERATE
    
    if round <= 2*r/3:
        avg_coop_rate = calculate_average_cooperation(history)
        threshold = (m/n) - 0.1
        return COOPERATE if avg_coop_rate >= threshold else DEFECT
    
    else: // Final phase
        recent_coop_rate = calculate_recent_cooperation(history, window=r/6)
        base_threshold = m/n
        
        // Check for positive momentum
        if shows_improvement(history):
            threshold = base_threshold - 0.05
        else:
            threshold = base_threshold
            
        return COOPERATE if recent_coop_rate >= threshold else DEFECT
```

## Edge Case Handling

### First Round
- **Always cooperate** to maximize initial collective potential and signal cooperative intent

### Last Round
- **Cooperate** if the group has maintained cooperation rate ≥ m/n in recent rounds
- **Defect** otherwise, as there's no future opportunity to build cooperation

### Tie-Breaking
- When cooperation rates equal thresholds exactly: **cooperate** (err on the side of cooperation)

### Small Groups (n ≤ 4)
- Extend Phase 1 to r/2 rounds (be more patient with cooperation)
- Use threshold (m/n) - 0.15 in Phase 2 (more tolerant)

## Cooperative Alignment

1. **Default to cooperation** in early rounds regardless of parameters
2. **Reward cooperative trends** by lowering thresholds when improvement is detected
3. **Maintain hope** by never completely abandoning cooperation unless cooperation rate falls extremely low
4. **Signal reliability** through consistent, predictable responses to group behavior

## Robustness Features

- **Parameter-agnostic**: Works with any valid n, m, k, r values
- **Handles mixed populations**: Adapts to groups with varying cooperation levels
- **Resistant to exploitation**: Won't cooperate indefinitely with pure defectors
- **Momentum-sensitive**: Recognizes and encourages positive behavioral changes
- **Phase-based adaptation**: Different strategies for different game stages

This strategy maximizes the chance of reaching the cooperation threshold while protecting against exploitation, maintaining a fundamentally cooperative stance throughout the game.
'''

description_COOPERATIVE_60 = '''
I'll design a cooperative strategy called "Adaptive Threshold Guardian" that balances cooperation with strategic protection against exploitation.

## Strategy Overview

The core principle is to be **conditionally cooperative** - start cooperatively but adapt based on the collective behavior patterns while maintaining a bias toward cooperation when the threshold can realistically be met.

## Decision Rules

### Phase 1: Optimistic Cooperation (First 20% of rounds)
- **Always cooperate** in the first round
- Continue cooperating for the first max(1, floor(r * 0.2)) rounds
- This establishes cooperative intent and allows observation of others' strategies

### Phase 2: Adaptive Response (Middle rounds)
For each subsequent round, calculate:

1. **Cooperation Rate**: Average number of cooperators in the last min(5, current_round) rounds
2. **Threshold Proximity**: How close we typically get to meeting the threshold m
3. **Trend Analysis**: Whether cooperation is increasing, decreasing, or stable

**Decision Logic:**
```
if (average_cooperators >= m - 1):
    cooperate  // We're close to threshold, my cooperation likely matters
elif (average_cooperators >= m * 0.6 AND trend_is_improving):
    cooperate  // Promising trend, encourage continued cooperation  
elif (my_cooperation_rate > 0.7 AND average_cooperators < m * 0.4):
    defect_with_probability(0.3)  // Reduce exploitation but don't give up entirely
else:
    cooperate  // Default to cooperation unless clearly hopeless
```

### Phase 3: Endgame Strategy (Last 20% of rounds)
- **If threshold consistently met**: Continue cooperating to maintain collective benefit
- **If threshold rarely met but close**: Increase cooperation rate to 100% - final push for mutual benefit
- **If cooperation has completely collapsed**: Switch to conditional cooperation based on previous round only

## Key Adaptive Mechanisms

### 1. **Forgiveness Protocol**
If cooperation drops below threshold for 3+ consecutive rounds, but then shows recovery (2+ additional cooperators join), immediately resume full cooperation. This prevents permanent defection spirals.

### 2. **Threshold Sensitivity**
- When we need exactly 1 more cooperator for threshold: Always cooperate
- When we're 2-3 short: Cooperate with high probability (80-90%)
- When we're far from threshold: Still cooperate but consider recent trends

### 3. **Momentum Building**
Track "cooperation momentum" - if cooperation increased in the last round, be more likely to cooperate this round. This helps amplify positive trends.

## Edge Case Handling

### First Round
Always cooperate - this is the only way to establish cooperative patterns without prior information.

### Last Round  
If threshold was met in previous round, cooperate (reward others' cooperation). If not, cooperate anyway unless cooperation has been consistently below 30% for the last quarter of the game.

### When m = n-1 (High threshold)
Be extra persistent with cooperation since every player matters critically. Only defect if cooperation rate stays below 40% for extended periods.

### When m = 2 (Low threshold)
Be more willing to defect if consistently over-cooperating relative to others, but maintain cooperation when close to threshold.

## Robustness Features

1. **Anti-Exploitation**: If consistently cooperating while others defect, gradually reduce cooperation rate but never below 30%

2. **Recovery Sensitivity**: Always ready to return to full cooperation if others show renewed cooperative behavior

3. **Endgame Cooperation**: Increase cooperation in final rounds since reputation doesn't matter for future games

4. **Threshold Awareness**: Decision heavily weighted by how close the group typically gets to the threshold m

This strategy maintains a cooperative orientation while protecting against exploitation, adapts to opponent behavior patterns, and gives the collective the best chance of achieving mutually beneficial outcomes across diverse opponent strategies.
'''

description_COOPERATIVE_61 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle of "conditional cooperation with strategic patience."

## Decision Framework

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and gather information about other players' tendencies.

### Rounds 2 to r-1: Adaptive Threshold Tracking

**Step 1: Calculate Cooperation Rate**
- Track the average cooperation rate across all previous rounds: `avg_coop_rate = total_cooperations / (n * rounds_played)`

**Step 2: Estimate Current Round Cooperation**
- Predict likely cooperators this round based on recent trends
- Use weighted average of last 3 rounds (if available) with weights [0.5, 0.3, 0.2] for most recent to oldest

**Step 3: Decision Logic**
```
predicted_cooperators = estimated_cooperators_this_round
threshold_gap = m - predicted_cooperators

if threshold_gap <= 0:
    # Threshold likely to be met even without me
    if avg_coop_rate >= 0.6:
        cooperate  # Maintain high cooperation norm
    else:
        defect     # Free ride when safe
        
else if threshold_gap == 1:
    # I'm potentially pivotal
    if recent_trend_improving OR avg_coop_rate >= 0.4:
        cooperate  # Be the difference maker
    else:
        defect     # Avoid being exploited
        
else:
    # Threshold unlikely to be met
    if threshold_gap <= (n-m)/2 AND avg_coop_rate >= 0.5:
        cooperate  # Try to encourage others
    else:
        defect     # Protect against likely failure
```

### Round r (Final Round): Strategic Endgame
In the final round, cooperation incentives change since there's no future reputation to build.

```
if historical_success_rate >= 0.7:
    # High trust environment - maintain cooperation
    cooperate
else if predicted_cooperators >= m-1:
    # I might be pivotal
    cooperate
else:
    # Low success probability
    defect
```

## Adaptive Learning Components

### 1. Player Classification
Track each opponent as:
- **Consistent Cooperator**: Cooperates >80% of the time
- **Consistent Defector**: Cooperates <20% of the time  
- **Conditional**: Varies behavior based on circumstances

### 2. Trend Analysis
Monitor 3-round rolling windows for:
- Individual player behavioral shifts
- Overall group cooperation momentum
- Success/failure patterns

### 3. Threshold Proximity Awareness
- When close to threshold (within 1-2 cooperators), increase cooperation probability
- When threshold seems impossible, prioritize individual payoff
- When threshold easily met, balance between maintaining norms and free-riding

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation propensity by 20% since individual actions have higher impact
- Be more forgiving of occasional defections

### High Threshold Requirements (m > 0.7n)
- Cooperate more aggressively in early rounds to establish high-cooperation norm
- Only defect when threshold clearly impossible

### Low Reward Scenarios (k ≤ 1.5)
- More conservative cooperation - require higher confidence in threshold achievement
- Prioritize individual payoffs when collective benefit is marginal

### Rapid Behavioral Changes
If group behavior shifts dramatically (cooperation rate changes >30% in 2 rounds):
- Temporarily increase cooperation to test if shift is toward or away from cooperation
- Adapt threshold predictions more aggressively

## Robustness Features

1. **Anti-Exploitation Protection**: Never cooperate for more than 3 consecutive rounds if threshold consistently fails
2. **Momentum Recognition**: Increase cooperation when detecting upward trends in group behavior
3. **Endgame Adjustment**: Account for changed incentives in final rounds
4. **Parameter Sensitivity**: Adjust cooperation thresholds based on game parameters (n, m, k ratios)

## Expected Behavior Profile

This strategy should:
- Start cooperatively to build trust
- Adapt quickly to opponent patterns
- Maintain cooperation when collective success is likely
- Protect against exploitation when cooperation is futile
- Balance individual and collective interests dynamically
- Perform well against both cooperative and mixed opponent pools

The strategy prioritizes sustainable cooperation over short-term gains while maintaining defensive capabilities against purely selfish opponents.
'''

description_COOPERATIVE_62 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It starts optimistically but learns from the group's behavior, adjusting cooperation levels to maintain the collective benefit while protecting against exploitation.

## Strategy Overview

### 1. Decision Rules

**Primary Rule: Adaptive Cooperation Threshold**
- Maintain a dynamic cooperation threshold `θ` that represents the minimum probability of cooperating
- Start with high cooperation (`θ = 0.8`) and adjust based on recent group performance
- Always cooperate if your cooperation is likely to be pivotal for reaching threshold `m`

**Decision Process Each Round:**
```pseudocode
1. Calculate recent_success_rate (last min(5, current_round-1) rounds)
2. Estimate cooperation_likelihood of others this round
3. Calculate probability that exactly (m-1) others will cooperate
4. If pivotal_probability > 0.3: COOPERATE
5. Else if random() < θ: COOPERATE  
6. Else: DEFECT
7. Update θ based on last round's outcome
```

### 2. Adaptive Threshold Updates

**Threshold Adjustment After Each Round:**
- If threshold was met and you cooperated: `θ = min(0.9, θ + 0.05)`
- If threshold was met and you defected: `θ = min(0.9, θ + 0.02)` 
- If threshold failed and ≥50% cooperated: `θ = max(0.3, θ - 0.03)`
- If threshold failed and <50% cooperated: `θ = max(0.3, θ - 0.08)`

This creates a feedback loop that increases cooperation when the group succeeds and decreases it when facing widespread defection.

### 3. Cooperation Likelihood Estimation

**Estimating Others' Behavior:**
```pseudocode
For each other player j:
  recent_coop_rate[j] = cooperations_by_j / max(3, rounds_observed)
  if rounds_observed < 3:
    estimated_prob[j] = 0.6  // Optimistic default
  else:
    estimated_prob[j] = 0.7 * recent_coop_rate[j] + 0.3 * overall_coop_rate[j]
```

### 4. Edge Case Handling

**First Round (t=1):**
- Always COOPERATE
- Reasoning: Establish cooperative intent and test group dynamics

**Last Round (t=r):**
- If success_rate > 0.6: COOPERATE
- Else: Apply standard decision rules
- Reasoning: Maintain reputation even in final round, but don't be exploited

**Early Rounds (t ≤ 3):**
- Use higher cooperation threshold: `θ_early = min(0.9, θ + 0.15)`
- Reasoning: Build cooperative momentum before adapting

**High-Stakes Situations:**
- If consecutive failures ≥ 2 and current round ≤ r/2: Force `θ = 0.7`
- Reasoning: Prevent early collapse of cooperation

### 5. Robustness Features

**Anti-Exploitation Measures:**
- If personal cooperation rate > 0.8 AND group success rate < 0.4: Reduce θ by 0.1
- Never let θ drop below 0.3 (maintain minimum cooperation)
- Never let θ exceed 0.9 (avoid blind cooperation)

**Forgiveness Mechanism:**
- If a player defected for 3+ rounds but then cooperates, increase their estimated cooperation probability by 0.2
- Reasoning: Allow for strategy changes and redemption

**End-Game Adjustment:**
- In final 20% of rounds: Slightly reduce θ by 0.05 to account for others' end-game defection
- But maintain cooperation if success rate has been high (>0.7)

## Strategic Rationale

1. **Cooperative Foundation:** Starts with strong cooperative bias to establish positive group dynamics
2. **Adaptive Learning:** Adjusts to group behavior without abandoning cooperation entirely
3. **Pivotal Awareness:** Specifically looks for situations where your cooperation is decisive
4. **Robust to Exploitation:** Reduces cooperation against consistently defecting groups while maintaining minimum threshold
5. **Forward-Looking:** Considers reputation effects and long-term group dynamics

This strategy should perform well against other cooperative strategies while maintaining resilience against exploitative ones, making it suitable for a diverse tournament environment.
'''

description_COOPERATIVE_63 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle of "cooperative leadership with defensive learning."

## Decision Framework

### Round 1: Cooperative Leadership
- **Always cooperate** in the first round to signal willingness to achieve the collective good
- Rationale: Establish cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Cooperation
The strategy uses a three-tier decision system:

#### Tier 1: Threshold Safety Check
```
cooperation_count_last_round = count of cooperators in previous round
if cooperation_count_last_round >= m:
    cooperation_momentum = True
else:
    cooperation_momentum = False
```

#### Tier 2: Opponent Pattern Analysis
```
cooperation_rate = total_cooperations_observed / (total_possible_cooperations)
defection_trend = (defections_last_2_rounds > defections_previous_2_rounds)
```

#### Tier 3: Decision Logic
**COOPERATE if:**
- `cooperation_momentum == True` AND `cooperation_rate >= 0.4`
- OR `cooperation_count_last_round == m-1` (critical threshold support)
- OR `cooperation_rate >= 0.6` (high cooperative environment)

**DEFECT if:**
- `cooperation_count_last_round < m-2` AND `defection_trend == True`
- OR `cooperation_rate < 0.3` (predominantly defective environment)

**Otherwise:** Use probabilistic cooperation based on `cooperation_rate * 1.5` (capped at 1.0)

### Final Round (Round r): Strategic Finale
- **Cooperate** if the average cooperation rate across all previous rounds ≥ 0.5
- **Defect** if the average cooperation rate < 0.3
- **Probabilistic** (60% cooperate) if between 0.3 and 0.5

## Key Features

### 1. Threshold Sensitivity
The strategy prioritizes situations where cooperation is most critical:
- Always cooperates when cooperation count is exactly m-1 (one short of threshold)
- Maintains cooperation when threshold is being consistently met

### 2. Pattern Recognition
- Tracks both immediate trends (last 2 rounds) and overall patterns
- Adapts to opponent behavior while maintaining cooperative bias
- Uses cooperation rate as a proxy for environmental cooperativeness

### 3. Defensive Mechanisms
- Reduces cooperation when facing predominantly defective opponents
- Implements gradual withdrawal rather than immediate retaliation
- Protects against systematic exploitation

### 4. Cooperative Bias
- Default tendency toward cooperation when uncertain
- Probabilistic cooperation in ambiguous situations
- Maintains cooperative signaling throughout most of the game

## Edge Case Handling

**Small n scenarios (n ≤ 4):** Increases cooperation probability by 0.2 in all probabilistic decisions

**High threshold scenarios (m > n/2):** Reduces defection threshold to `cooperation_rate < 0.4`

**Short games (r ≤ 3):** Cooperates in all rounds except potentially the last if facing universal defection

**Single defection spikes:** Ignores isolated defection rounds if surrounded by cooperative rounds

## Robustness Features

1. **Anti-exploitation:** Gradually reduces cooperation against consistently defective opponents
2. **Recovery mechanism:** Returns to cooperation when opponents show renewed cooperative behavior  
3. **Threshold awareness:** Prioritizes critical cooperation moments over general reciprocity
4. **Environmental adaptation:** Adjusts cooperation levels based on overall game climate rather than individual opponent actions

This strategy aims to foster collective success while remaining resilient to various opponent strategies, from unconditional defectors to complex adaptive strategies.
'''

description_COOPERATIVE_64 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, aiming to achieve the collective benefit while protecting against exploitation. It operates on the principle of "conditional cooperation with learning."

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Cooperation Based on Threshold Assessment

**Step 1: Calculate Cooperation Rate**
- Track the cooperation rate from previous rounds: `coop_rate = total_cooperations / (total_players * rounds_played)`

**Step 2: Assess Threshold Viability**
- Calculate minimum cooperation rate needed: `min_rate = m / n`
- Define cooperation momentum: `momentum = cooperations_last_round / n`

**Step 3: Decision Logic**
Cooperate if ANY of the following conditions are met:

1. **Threshold Optimism**: `coop_rate >= min_rate * 0.8`
   - If we're close to or above the threshold rate historically

2. **Recent Momentum**: `momentum >= min_rate * 0.6 AND coop_rate >= min_rate * 0.5`
   - If there's recent positive momentum and reasonable historical performance

3. **Recovery Attempt**: `coop_rate < min_rate * 0.5 AND momentum >= min_rate * 0.4`
   - Give cooperation another chance if recent round showed some promise

4. **Threshold Proximity**: `cooperations_last_round >= m - 2`
   - If we were very close to threshold last round

Otherwise, **defect** to protect against consistent exploitation.

### Final Round (Round r): Strategic Endgame
- **Cooperate** if `coop_rate >= min_rate * 0.7`
- **Defect** otherwise
- Rationale: Final round cooperation matters for collective outcome, but only if there's reasonable evidence others will cooperate

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Be more forgiving: multiply all threshold multipliers by 0.8
- Rationale: Individual decisions have higher impact in small groups

### High Threshold Games (m/n > 0.6)
- Be more optimistic: multiply all threshold multipliers by 0.9
- Rationale: High-threshold games require more risk-taking to succeed

### Low Reward Games (k ≤ 1.5)
- Be more cautious: multiply all threshold multipliers by 1.1
- Rationale: Lower rewards justify more conservative play

## Cooperative Alignment Features

1. **Initial Trust**: Always cooperate first to signal good intentions
2. **Forgiveness**: Recovery attempt mechanism gives second chances
3. **Threshold Awareness**: Explicitly considers what's needed for collective success
4. **Momentum Recognition**: Rewards positive trends in cooperation
5. **Final Cooperation**: Willing to cooperate in final round if conditions are reasonable

## Robustness Features

1. **Learning**: Adapts based on observed cooperation rates
2. **Protection**: Defects when facing consistent defection
3. **Flexibility**: Different thresholds for different game conditions
4. **Context Sensitivity**: Adjusts behavior based on game parameters

## Pseudocode Summary

```
function decide_action(round, n, m, k, r, history):
    if round == 1:
        return COOPERATE
    
    coop_rate = calculate_cooperation_rate(history)
    momentum = last_round_cooperation_rate(history)
    min_rate = m / n
    
    # Adjust thresholds based on game parameters
    adjust_factor = calculate_adjustment_factor(n, m, k)
    
    # Main decision logic
    if round == r:  # Final round
        return COOPERATE if coop_rate >= min_rate * 0.7 * adjust_factor else DEFECT
    
    # Regular rounds
    threshold_conditions = [
        coop_rate >= min_rate * 0.8 * adjust_factor,
        (momentum >= min_rate * 0.6 * adjust_factor AND coop_rate >= min_rate * 0.5 * adjust_factor),
        (coop_rate < min_rate * 0.5 * adjust_factor AND momentum >= min_rate * 0.4 * adjust_factor),
        last_round_cooperations >= m - 2
    ]
    
    return COOPERATE if any(threshold_conditions) else DEFECT
```

This strategy aims to be a "good citizen" that promotes cooperation while being resilient enough to survive in a diverse tournament environment.
'''

description_COOPERATIVE_65 = '''
# Adaptive Cooperative Strategy: "Vigilant Collaborator"

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation, using dynamic threshold adjustment based on observed group behavior patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and gather initial information about group dynamics

### Rounds 2 to r-1: Adaptive Cooperation

**Step 1: Calculate Cooperation Momentum**
```
cooperation_rate = (total_cooperators_last_round) / n
recent_momentum = weighted_average_of_last_3_rounds_cooperation_rates
```

**Step 2: Dynamic Threshold Adjustment**
```
base_threshold = m / n  // Minimum needed cooperation rate
if recent_momentum > base_threshold:
    adjusted_threshold = base_threshold * 0.8  // More lenient when group is cooperative
else:
    adjusted_threshold = base_threshold * 1.2  // More strict when group is uncooperative
```

**Step 3: Cooperation Decision**
Cooperate if ANY of these conditions are met:
1. **Momentum Condition**: `recent_momentum >= adjusted_threshold`
2. **Recovery Condition**: Last round failed threshold AND cooperation rate was within 20% of threshold
3. **Reciprocity Condition**: At least 60% of players who cooperated last round are expected to cooperate again (based on their individual patterns)

### Final Round: Conditional Cooperation
- **Cooperate** if the group has met the threshold in at least 60% of previous rounds
- **Defect** otherwise
- Rationale: In the final round, prioritize individual payoff while still rewarding consistently cooperative groups

## Adaptive Learning Mechanism

**Individual Player Tracking:**
- Maintain cooperation probability estimates for each opponent based on their history
- Update using exponential weighted moving average: `prob_i = 0.7 * prob_i + 0.3 * current_action`

**Group Pattern Recognition:**
- Track sequences of successful/failed rounds
- Identify if group tends to "rally" after failures or "collapse" after successes
- Adjust cooperation threshold based on these patterns

## Edge Case Handling

**When m = n-1:** 
- More aggressive cooperation since almost everyone must participate
- Cooperate if at least 80% cooperated last round

**When m = 2 and n is large:**
- More conservative approach since free-riding is very tempting
- Require higher momentum thresholds

**Streak Handling:**
- After 3+ consecutive successful rounds: Maintain cooperation even if momentum dips slightly
- After 2+ consecutive failed rounds: Require stronger evidence before cooperating again

## Robustness Features

1. **Anti-Exploitation Protection**: If any player consistently defects while others cooperate (detected over 5+ rounds), reduce cooperation threshold to account for this reliable defector

2. **Cascade Prevention**: If cooperation rate drops suddenly by >40%, immediately defect next round to avoid being exploited in a cascade, then reassess

3. **Late-Game Adjustment**: In final 25% of rounds, weight recent performance more heavily than early-game cooperation

## Pseudocode Summary

```
For round t:
  if t == 1:
    return COOPERATE
  
  if t == r:  // Final round
    return COOPERATE if (success_rate > 0.6) else DEFECT
  
  recent_momentum = calculate_momentum(last_3_rounds)
  adjusted_threshold = adjust_threshold(recent_momentum, base_threshold)
  
  if momentum_condition(recent_momentum, adjusted_threshold):
    return COOPERATE
  elif recovery_condition(last_round_failed, cooperation_rate):
    return COOPERATE
  elif reciprocity_condition(individual_patterns):
    return COOPERATE
  else:
    return DEFECT
```

This strategy is genuinely cooperative while being adaptive enough to handle various opponent behaviors, from consistent cooperators to strategic defectors to random players. It encourages group cooperation through conditional cooperation while protecting against systematic exploitation.
'''

description_COOPERATIVE_66 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with pragmatic adaptation, aiming to establish and maintain cooperation while protecting against exploitation. It operates on the principle that cooperation should be conditional on sufficient reciprocity from others.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and give others the benefit of the doubt

### Rounds 2 to r-1: Adaptive Cooperation
The strategy maintains a **cooperation threshold** based on historical performance:

```pseudocode
cooperation_threshold = max(m, observed_average_cooperators * 1.1)

if (predicted_cooperators >= cooperation_threshold):
    play COOPERATE
else:
    play DEFECT
```

Where `predicted_cooperators` is calculated using:
```pseudocode
predicted_cooperators = weighted_average_of_recent_cooperation + forgiveness_bonus
```

**Prediction Components:**
1. **Recent History Weight**: Last 3 rounds weighted as 50%, 30%, 20% respectively
2. **Forgiveness Bonus**: +0.5 cooperators if we've been consistently cooperative (≥80% cooperation rate) and others are close to threshold
3. **Trend Analysis**: +0.3 if cooperation trend is increasing, -0.3 if decreasing

### Final Round: Conditional Defection
- If total cooperation rate across all previous rounds ≥ 60%: **COOPERATE**
- Otherwise: **DEFECT**
- Rationale: Reward groups that maintained reasonable cooperation, but don't enable free-riding in the final round

## Adaptive Mechanisms

### 1. Threshold Adjustment
- **Initial threshold**: `m` (minimum required)
- **Adjustment rule**: Increase threshold by 10% of observed average if consistently meeting targets
- **Floor**: Never set threshold below `m`
- **Ceiling**: Never set threshold above `n-1`

### 2. Forgiveness Protocol
Track consecutive rounds where we cooperated but threshold wasn't met:
- After 2 consecutive "failed" cooperations: Reduce threshold by 0.5 for next round only
- After 4 consecutive "failed" cooperations: Switch to pure best-response for 2 rounds

### 3. Recovery Mechanism
If cooperation rate drops below 30% for 3 consecutive rounds:
- Reset to "fresh start" mode: Cooperate for one round regardless of prediction
- Signal willingness to re-establish cooperation

## Edge Cases

### Very Small Groups (n ≤ 4)
- Be more forgiving in threshold calculations
- Cooperate if predicted cooperators ≥ m-0.5

### Very Large Groups (n ≥ 12)
- Use more conservative thresholds
- Weight recent history more heavily (last 5 rounds instead of 3)

### High Risk Scenarios (m close to n)
- Cooperate more aggressively in early rounds
- Only defect if very confident threshold won't be met

### Low Risk Scenarios (m ≤ n/3)
- Use slightly higher thresholds to avoid over-cooperation
- More willing to defect when uncertain

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if others consistently defect
2. **Anti-Coordination**: Doesn't rely on specific patterns or predetermined schedules
3. **Noise Tolerance**: Uses weighted averages and thresholds rather than exact counts
4. **Late-Game Protection**: Adjusts behavior in final rounds to prevent exploitation
5. **Group Size Adaptation**: Scales thresholds and sensitivity based on group size

## Strategic Rationale

This strategy aims to:
- **Initiate cooperation** through optimistic first moves
- **Sustain cooperation** by adapting to group dynamics
- **Punish free-riding** through conditional cooperation
- **Recover from coordination failures** through forgiveness mechanisms
- **Maximize group welfare** while protecting individual interests

The strategy is designed to perform well against a diverse range of opponents, from pure cooperators to sophisticated adaptive strategies, while maintaining a fundamentally cooperative orientation that seeks to achieve the socially optimal outcome when possible.
'''

description_COOPERATIVE_67 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism, aiming to establish and maintain cooperative equilibria while protecting against exploitation. It operates on the principle that cooperation should be rewarded and sustained, but defection patterns should trigger protective responses.

## Decision Rules

### Round 1: Optimistic Start
Always cooperate in the first round to signal cooperative intent and give the group the best chance to establish a cooperative norm.

### Rounds 2 to r-1: Adaptive Cooperation with Threshold Monitoring

**Primary Decision Logic:**
1. **Cooperation History Analysis**: Track the cooperation rate over the last min(3, current_round-1) rounds
2. **Threshold Achievement Check**: Monitor whether the cooperation threshold (m) has been consistently met
3. **Trend Detection**: Identify whether cooperation is increasing, stable, or declining

**Cooperation Conditions (cooperate if ANY are true):**
- The cooperation threshold was met in the previous round AND cooperation rate ≥ (m/n) over recent history
- Cooperation rate is trending upward (increasing over last 2-3 rounds)
- Current cooperation rate ≥ (m+1)/n (buffer above minimum threshold)

**Defection Triggers (defect if ALL are true):**
- Cooperation threshold failed in previous round
- Cooperation rate < (m-1)/n over recent history
- No positive trend in cooperation

### Last Round (Round r): Strategic Finale
Since this is the final interaction, apply a modified strategy:
- **Cooperate** if the group has maintained cooperation rate ≥ m/n over the last 3 rounds
- **Defect** otherwise, as there's no future to incentivize good behavior

## Edge Case Handling

### Early Rounds (rounds 2-3):
- Be more forgiving of initial defection as players may be testing strategies
- Require only 1 round of threshold achievement to continue cooperating

### Mid-Game Stability:
- If cooperation has been stable (threshold met) for 3+ consecutive rounds, continue cooperating even if one round falls slightly short
- This prevents cascade failures from minor fluctuations

### Recovery Scenarios:
- If cooperation drops below threshold but then recovers within 2 rounds, return to cooperation
- Track "recovery attempts" - if the group repeatedly tries but fails to maintain cooperation, gradually become more defensive

## Adaptive Parameters

The strategy adjusts its sensitivity based on game parameters:

**Threshold Sensitivity**: 
- If m is close to n (high threshold), be more patient with cooperation attempts
- If m is low relative to n, be more demanding of consistent cooperation

**Round Horizon**:
- In longer games (high r), be more patient with temporary defection
- In shorter games, respond more quickly to defection patterns

## Pseudocode Framework

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    recent_rounds = min(3, round-1)
    recent_cooperation_rate = calculate_cooperation_rate(history, recent_rounds)
    threshold_met_last_round = (cooperators_last_round >= m)
    
    if round == r:  // Last round
        if recent_cooperation_rate >= m/n:
            return COOPERATE
        else:
            return DEFECT
    
    // Main decision logic
    if threshold_met_last_round AND recent_cooperation_rate >= (m/n):
        return COOPERATE
    
    if is_cooperation_trending_up(history):
        return COOPERATE
    
    if recent_cooperation_rate >= (m+1)/n:
        return COOPERATE
    
    // Check for defection conditions
    if NOT threshold_met_last_round AND 
       recent_cooperation_rate < (m-1)/n AND
       NOT is_cooperation_trending_up(history):
        return DEFECT
    
    // Default to cooperation for ambiguous cases
    return COOPERATE
```

## Cooperative Alignment

This strategy prioritizes cooperation by:
1. **Leading by example**: Always cooperating first to establish cooperative norms
2. **Rewarding cooperation**: Continuing to cooperate when others do
3. **Offering recovery**: Giving groups multiple chances to return to cooperation
4. **Default cooperation**: When uncertain, choosing cooperation over defection
5. **Supporting threshold achievement**: Using (m+1)/n buffer to help ensure threshold success

The strategy only defects when there's clear evidence that cooperation has broken down and is unlikely to recover, thus protecting cooperative players from exploitation while maintaining the incentive structure for others to return to cooperation.
'''

description_COOPERATIVE_68 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with risk management by dynamically adjusting cooperation decisions based on observed group behavior while maintaining a fundamentally cooperative stance.

## Decision Rules

### 1. Initial Cooperation Phase
- **First round**: Always cooperate (C)
- **Rounds 2 to min(5, r/4)**: Continue cooperating to establish cooperative intent and gather information about group dynamics

### 2. Adaptive Threshold Mechanism
After the initial phase, use a dynamic cooperation threshold based on:

**Cooperation Rate Tracking**:
- Calculate `observed_coop_rate = total_cooperations_seen / (total_possible_cooperations)`
- Calculate `threshold_safety_margin = (m + 1) / n` (slightly above minimum needed)

**Decision Rule**:
```
If observed_coop_rate >= threshold_safety_margin:
    Cooperate with probability = min(0.9, observed_coop_rate + 0.1)
Else if observed_coop_rate >= (m-1)/n:
    Cooperate with probability = 0.7
Else:
    Cooperate with probability = max(0.3, observed_coop_rate)
```

### 3. Momentum Detection
Track cooperation trends over the last 3 rounds:
- If cooperation is **increasing**: Boost cooperation probability by 0.15
- If cooperation is **stable** around threshold: Maintain calculated probability
- If cooperation is **declining rapidly**: Reduce cooperation probability by 0.1 but never below 0.2

### 4. Critical Mass Recognition
If in any round the number of cooperators exactly equals `m-1`:
- **Cooperate** to help reach the threshold (assuming others maintain behavior)
- This prevents coordination failures when we're one cooperator short

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and gather initial information about the group.

### Last Round
If it's the final round (`r`):
- If group has consistently met threshold (≥80% of previous rounds): Cooperate
- If group cooperation rate < (m/n): Defect (no future rounds to build cooperation)
- Otherwise: Use standard adaptive rule but with 0.2 penalty to cooperation probability

### Very Small Groups (n ≤ 4)
Increase cooperation probability by 0.1 in all calculations since individual actions have higher impact.

### High Threshold Games (m > 0.7n)
When cooperation requirements are very demanding:
- Extend initial cooperation phase to min(7, r/3) rounds
- Increase threshold_safety_margin to (m + 2) / n
- Be more responsive to positive cooperation trends (+0.2 instead of +0.15)

## Robustness Features

### 1. Forgiveness Mechanism
If cooperation drops significantly but then shows recovery for 2+ consecutive rounds, reset to higher cooperation probability to give the group a second chance.

### 2. Anti-Exploitation Protection
If personal cooperation rate significantly exceeds group cooperation rate (by >0.3) for 3+ consecutive rounds, temporarily reduce cooperation probability by 0.2 to avoid being consistently exploited.

### 3. Endgame Cooperation
In the last 20% of rounds, if the group has shown it can cooperate (historical success rate ≥ 60%), increase cooperation probability by 0.1 to maintain positive outcomes.

## Pseudocode Summary
```
function decide_action(round, history, n, m, r, k):
    if round == 1:
        return COOPERATE
    
    coop_rate = calculate_cooperation_rate(history)
    threshold_margin = (m + 1) / n
    
    base_prob = calculate_base_probability(coop_rate, threshold_margin, m, n)
    
    momentum_adj = detect_momentum(history, last_3_rounds)
    base_prob += momentum_adj
    
    if critical_mass_situation(history[-1], m):
        base_prob = max(base_prob, 0.8)
    
    if round == r:  # last round
        base_prob = adjust_for_endgame(base_prob, history, m, n)
    
    # Apply robustness adjustments
    base_prob = apply_forgiveness(base_prob, history)
    base_prob = apply_anti_exploitation(base_prob, history)
    
    return COOPERATE if random() < base_prob else DEFECT
```

This strategy maintains a cooperative orientation while being adaptive to group dynamics, robust against exploitation, and responsive to the specific game parameters. It aims to foster cooperation when possible while protecting against consistent losses when cooperation fails to emerge.
'''

description_COOPERATIVE_69 = '''
# Cooperative Threshold Strategy with Adaptive Learning

## Core Strategy: "Cooperative Momentum Builder"

This strategy balances cooperation with pragmatic adaptation, designed to encourage collective cooperation while protecting against exploitation.

## Decision Rules

### Phase 1: Establishment Phase (First 20% of rounds)
- **Always cooperate** regardless of others' actions
- **Rationale**: Establish cooperative intent and give others opportunity to reciprocate
- **Duration**: ceil(0.2 × r) rounds

### Phase 2: Adaptive Cooperation Phase (Remaining rounds)
Apply the following decision tree each round:

1. **Calculate cooperation momentum**: 
   - Recent cooperation rate = (cooperators in last 3 rounds) / (3 × n)
   - Overall cooperation rate = (total cooperators so far) / (rounds played × n)
   - Weighted momentum = 0.7 × recent + 0.3 × overall

2. **Threshold achievement tracking**:
   - Success rate = (rounds where ≥ m cooperated) / (total rounds played)
   - Trend = success rate in last 3 rounds vs. previous 3 rounds

3. **Decision logic**:
   ```
   IF momentum ≥ 0.6 AND success_rate ≥ 0.5:
       COOPERATE  // Strong cooperative environment
   
   ELIF momentum ≥ 0.4 AND trend ≥ 0:
       COOPERATE  // Improving cooperation trend
   
   ELIF (rounds_remaining ≤ 3) AND (momentum ≥ 0.3):
       COOPERATE  // End-game cooperation attempt
   
   ELIF (my_cooperation_rate > 0.7) AND (momentum < 0.2):
       DEFECT     // Prevent excessive exploitation
   
   ELSE:
       COOPERATE  // Default to cooperation
   ```

## Edge Cases

### First Round
- **Always cooperate** - No history to analyze, establish cooperative intent

### Last 3 Rounds
- **Enhanced cooperation**: Lower momentum threshold (0.3 instead of 0.4)
- **Rationale**: Final opportunity to achieve collective benefit

### When m is close to n
- If m > 0.8n: Increase cooperation threshold to momentum ≥ 0.7
- **Rationale**: Near-unanimous cooperation needed requires higher confidence

### When experiencing consistent failure
- If success rate < 0.2 for 5+ consecutive rounds AND my cooperation rate > 0.8:
  - Temporarily defect for 1 round, then resume normal strategy
  - **Rationale**: Signal that exploitation has consequences while maintaining cooperative intent

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial trust**: Always cooperate initially to establish good faith
2. **Forgiveness**: Quick to resume cooperation when others show improvement
3. **Encouragement**: Continues cooperating even with moderate momentum
4. **Protection against exploitation**: Only defects when being heavily exploited
5. **End-game cooperation**: Makes final attempts at collective success

## Robustness Features

- **Adapts to group size**: Uses proportional thresholds rather than fixed numbers
- **Handles noise**: Uses 3-round windows to smooth out random fluctuations
- **Prevents spirals**: Maintains cooperation bias even when others occasionally defect
- **Learning component**: Tracks both recent and overall patterns
- **Exploitation resistance**: Has circuit breaker for extreme exploitation scenarios

## Key Parameters Summary

- **Momentum thresholds**: 0.6 (high), 0.4 (medium), 0.3 (end-game)
- **Success rate threshold**: 0.5
- **Exploitation protection**: Activates when my cooperation > 0.7 and momentum < 0.2
- **Analysis windows**: 3 rounds for recent trends, full history for overall patterns
- **Establishment phase**: 20% of total rounds

This strategy should promote collective cooperation while remaining resilient to various opponent behaviors, from pure defectors to conditional cooperators to random players.
'''

description_COOPERATIVE_70 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "conditional cooperation" - being willing to cooperate when there's evidence others will too, but adapting when cooperation isn't reciprocated.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal willingness to achieve the collective good and gather information about others' tendencies.

### Rounds 2 to r-1: Adaptive Cooperation
Use a **dynamic cooperation threshold** based on observed behavior:

1. **Calculate cooperation rate**: `historical_coop_rate = total_cooperators_observed / (n × rounds_played)`

2. **Estimate cooperation likelihood**: `expected_cooperators_this_round = historical_coop_rate × n`

3. **Apply safety margin**: `cooperate_if = expected_cooperators_this_round ≥ (m - 1) × safety_factor`
   - Where `safety_factor = max(0.8, 1 - 0.1 × (current_round / r))` 
   - This starts conservative (requires 80% confidence) and gradually becomes more lenient

4. **Momentum consideration**: If cooperation succeeded in the previous round (≥m cooperators), reduce the threshold by 10% to maintain positive momentum.

### Round r: Final Round Strategy
In the last round, cooperation has no future strategic value, so:
- **Cooperate only if highly confident**: Use a stricter threshold requiring 90% confidence that enough others will cooperate
- This prevents being exploited in the final round while still enabling collective success when likely

## Pseudocode

```
function decide_action(current_round, history, n, m, k, r):
    if current_round == 1:
        return COOPERATE
    
    # Calculate historical cooperation rate
    total_cooperators = sum(cooperators in each past round)
    rounds_played = current_round - 1
    historical_coop_rate = total_cooperators / (n * rounds_played)
    
    # Estimate expected cooperators this round
    expected_cooperators = historical_coop_rate * n
    
    # Calculate safety factor (more lenient over time)
    safety_factor = max(0.8, 1 - 0.1 * (current_round / r))
    
    # Momentum bonus: if last round succeeded, be more optimistic
    if rounds_played > 0 and cooperators_last_round >= m:
        safety_factor *= 0.9  # 10% more optimistic
    
    # Final round: be more conservative
    if current_round == r:
        safety_factor = 0.9
    
    threshold = (m - 1) * safety_factor
    
    if expected_cooperators >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Key Features

### 1. Information Integration
- Learns from all available history, not just recent rounds
- Weighs all players' behavior equally to form expectations

### 2. Risk Management
- Requires confidence that at least (m-1) others will cooperate before contributing
- Adjusts risk tolerance based on game phase and recent success

### 3. Momentum Preservation
- Recognizes that successful cooperation breeds more cooperation
- Slightly lowers threshold after successful rounds to maintain collective momentum

### 4. End-game Protection
- Becomes more conservative in the final round to avoid exploitation
- Still enables collective success when confidence is high

### 5. Robustness
- Works with any parameter values (n, m, k, r)
- Adapts to various opponent strategies without requiring specific coordination
- Handles edge cases like very low or very high historical cooperation rates

## Strategic Rationale

This strategy addresses the core tension in collective risk dilemmas: the need for cooperation to achieve mutual benefit versus the individual incentive to free-ride. By:

1. **Starting cooperatively** to signal good intentions and gather information
2. **Adapting based on evidence** rather than assumptions about others
3. **Maintaining appropriate caution** to avoid systematic exploitation
4. **Preserving momentum** when cooperation is working
5. **Protecting against end-game defection** while still enabling final-round success

The strategy should perform well against a diverse range of opponents while maintaining the cooperative spirit essential for achieving collective benefits in this type of dilemma.
'''

description_COOPERATIVE_71 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive risk management, aiming to maintain cooperation when viable while protecting against systematic exploitation.

## Strategy Overview

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Early Rounds (rounds 2 to min(5, r/3))**: Continue cooperating to establish a cooperative baseline and gather information about opponent tendencies

### Main Decision Framework

For each round after the initial cooperation phase, apply the following decision tree:

#### Step 1: Cooperation Momentum Check
- **High Momentum**: If cooperation succeeded in ≥70% of recent rounds (last min(5, r/4) rounds), cooperate
- **Medium Momentum**: If cooperation succeeded in 40-70% of recent rounds, proceed to Step 2
- **Low Momentum**: If cooperation succeeded in <40% of recent rounds, proceed to Step 3

#### Step 2: Strategic Cooperation Assessment
Calculate a **cooperation probability** based on:
- Recent cooperation rate of other players
- Distance from threshold (how close we typically get to m cooperators)
- Remaining rounds (more aggressive cooperation as game nears end)

**Cooperate if**: cooperation probability > 0.6 OR remaining rounds ≤ r/4

#### Step 3: Defensive Cooperation
**Cooperate if**:
- At least m-1 players cooperated in the previous round (high chance others will maintain cooperation), OR
- Remaining rounds ≤ 3 (final push for mutual benefit), OR
- Recent average cooperators per round ≥ m-0.5 (threshold frequently nearly met)

**Otherwise**: Defect (D)

## Key Adaptive Elements

### Threshold Sensitivity
- When m is close to n: More aggressive cooperation (lower risk of being the decisive cooperator)
- When m is small relative to n: More selective cooperation (higher individual impact)

### Endgame Cooperation
- **Final 3 rounds**: Increase cooperation tendency by 20-30% to capture remaining mutual gains
- **Final round**: Cooperate if cooperation succeeded in >30% of previous rounds (lower bar for final attempt)

### Learning from History
- Track individual player patterns when possible (limited by information structure)
- Adjust cooperation thresholds based on observed group dynamics
- Weight recent rounds more heavily (exponential decay: weight = 0.8^(rounds_ago))

## Pseudocode Structure

```
function decide_action(round_number, history, n, m, k, r):
    if round_number == 1:
        return C
    
    if round_number <= min(5, r/3):
        return C
    
    recent_success_rate = calculate_recent_cooperation_success(history)
    remaining_rounds = r - round_number + 1
    
    # Step 1: Momentum Check
    if recent_success_rate >= 0.7:
        return C
    elif recent_success_rate >= 0.4:
        # Step 2: Strategic Assessment
        coop_probability = calculate_cooperation_probability(history, remaining_rounds, m, n)
        if coop_probability > 0.6 or remaining_rounds <= r/4:
            return C
    
    # Step 3: Defensive Cooperation
    last_round_cooperators = count_cooperators(history[-1])
    recent_avg_cooperators = calculate_recent_avg_cooperators(history)
    
    if (last_round_cooperators >= m-1) or 
       (remaining_rounds <= 3) or 
       (recent_avg_cooperators >= m-0.5):
        return C
    
    return D
```

## Robustness Features

1. **Anti-Exploitation**: Reduces cooperation when consistently failing to meet threshold
2. **Forgiveness**: Returns to cooperation when group dynamics improve
3. **Endgame Value**: Maintains cooperation attempts near game end
4. **Parameter Adaptation**: Adjusts behavior based on n, m, and k relationships
5. **History Weighting**: Emphasizes recent behavior over distant history

This strategy aims to be a reliable cooperative partner while maintaining strategic flexibility to adapt to various opponent behaviors and game parameters.
'''

description_COOPERATIVE_72 = '''
# Adaptive Cooperative Strategy: "Threshold Guardian"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to sustain cooperation while protecting against exploitation. It operates on the principle of being a "threshold guardian" - actively working to ensure the cooperation threshold is met while learning from the collective behavior patterns.

## Strategy Overview

### Phase 1: Cooperative Initialization (First Round)
**Always cooperate in round 1** to signal cooperative intent and contribute to establishing a cooperative norm from the start.

### Phase 2: Adaptive Cooperation (Rounds 2 to r-1)

#### Decision Rule Framework:
The strategy uses a multi-factor decision system based on:

1. **Cooperation Success Rate**: Track the fraction of rounds where the threshold was met
2. **Recent Cooperation Trend**: Monitor cooperation levels in the last few rounds
3. **Personal Impact Assessment**: Evaluate whether my cooperation is typically pivotal

#### Specific Decision Rules:

**Cooperate if ANY of the following conditions are met:**

1. **High Success Pattern**: If cooperation threshold was met in ≥ 70% of previous rounds
2. **Recent Recovery**: If threshold was met in the last 2 consecutive rounds
3. **Critical Contributor**: If in the previous round, removing my cooperation would have caused threshold failure
4. **Moderate Success with Trend**: If threshold success rate ≥ 50% AND cooperation trend is stable/increasing

**Additional Cooperation Trigger:**
5. **Threshold Risk**: If the number of cooperators in the previous round was exactly m or m+1 (indicating threshold is precarious)

**Default to Cooperation** unless clear defection signals are present (explained below).

#### Defection Conditions:
**Defect only if ALL of the following are true:**
- Cooperation success rate < 30% over the last max(3, r/4) rounds
- Last round had < m-1 cooperators (indicating widespread defection)
- No signs of coordination recovery (no increase in cooperation for 2+ rounds)

### Phase 3: Final Round Strategy (Round r)
**Conditional cooperation based on established pattern:**
- If cooperation success rate ≥ 50%: Cooperate (maintain the cooperative equilibrium)
- If 30% ≤ success rate < 50%: Cooperate if I was pivotal in any of the last 3 rounds
- If success rate < 30%: Defect (cut losses in a failed cooperative environment)

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Be more forgiving of occasional defections
- Cooperate if at least one other player showed cooperation in the previous round

### High Threshold Games (m > n/2):
- Increase cooperation tendency by 20% in all decision thresholds
- Focus more heavily on recent trends rather than long-term averages

### Very Short Games (r ≤ 3):
- Round 1: Always cooperate
- Round 2: Cooperate unless 0 others cooperated in round 1
- Round 3 (if exists): Cooperate if threshold was ever met previously

### Very Long Games (r > 10):
- Implement "forgiveness periods" - every r/3 rounds, reset negative assessments
- Use longer trend windows (r/5 rounds) for more stable decision-making

## Pseudocode Structure

```
Initialize:
  cooperation_history = []
  threshold_met_history = []
  
For each round t:
  if t == 1:
    action = COOPERATE
  
  elif t == r:  // Final round
    success_rate = count(threshold_met_history) / len(threshold_met_history)
    if success_rate >= 0.5:
      action = COOPERATE
    elif success_rate >= 0.3 and was_pivotal_recently():
      action = COOPERATE
    else:
      action = DEFECT
  
  else:  // Middle rounds
    if evaluate_cooperation_conditions():
      action = COOPERATE
    elif evaluate_defection_conditions():
      action = DEFECT
    else:
      action = COOPERATE  // Default to cooperation
  
  // Update history after observing results
  update_histories(action, observed_actions, threshold_met)
```

## Robustness Features

1. **Anti-Exploitation**: The strategy defects when facing consistent mass defection to avoid being systematically exploited

2. **Recovery Mechanism**: Quick to resume cooperation when signs of coordination recovery appear

3. **Parameter Adaptation**: Adjusts decision thresholds based on game parameters (n, m, k, r)

4. **Signal Clarity**: Maintains cooperation long enough to signal intent, but switches when necessary for self-protection

This strategy is designed to be a positive force for cooperation while remaining viable against various opponent strategies, from always-cooperators to sophisticated adaptive strategies.
'''

description_COOPERATIVE_73 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to facilitate cooperation while being robust to various opponent behaviors through dynamic threshold adjustment and conditional cooperation.

## Strategy Components

### 1. Decision Rules

**Primary Decision Logic:**
```
If round = 1:
    Cooperate (establish cooperative intent)
Else:
    cooperation_rate = (cooperators_last_round / n)
    
    If cooperation_rate >= (m/n):
        Cooperate (maintain successful cooperation)
    Else if cooperation_rate >= dynamic_threshold:
        Cooperate (conditional cooperation)
    Else:
        Defect (protect against exploitation)
```

### 2. Dynamic Threshold Calculation

The strategy maintains a dynamic threshold that adapts based on game parameters and observed history:

```
Initial threshold = max(0.3, (m-1)/n)

After each round:
If threshold was met and cooperation succeeded:
    threshold = threshold * 0.95  (become more trusting)
If threshold was met but cooperation failed:
    threshold = threshold * 1.1   (become more cautious)
If threshold was not met:
    threshold = threshold * 0.98  (slight decrease to encourage future cooperation)

Keep threshold bounded: max(0.2, min(threshold, 0.8))
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and establish positive momentum

**Last Round:**
- If cooperation has been consistently successful (≥60% success rate), cooperate
- Otherwise, apply normal decision rules (prevents pure end-game defection)

**Early Rounds (rounds 2-3):**
- Use slightly lower threshold (threshold * 0.8) to give cooperation more chances to establish

**Low-m scenarios (m ≤ 3):**
- Increase initial threshold by 0.1 to account for higher cooperation needs

**High-k scenarios (k ≥ 3):**
- Decrease initial threshold by 0.1 to reflect higher cooperation incentives

### 4. Detailed Algorithm

```pseudocode
INITIALIZE:
    base_threshold = max(0.3, (m-1)/n)
    if m <= 3: base_threshold += 0.1
    if k >= 3: base_threshold -= 0.1
    dynamic_threshold = base_threshold
    cooperation_history = []
    success_history = []

FOR each round t:
    IF t == 1:
        action = COOPERATE
    
    ELSE IF t == r AND success_rate < 0.6:
        // Last round with poor cooperation history
        cooperation_rate = count_cooperators(t-1) / n
        action = COOPERATE if cooperation_rate >= dynamic_threshold else DEFECT
    
    ELSE:
        cooperation_rate = count_cooperators(t-1) / n
        
        // Adjust threshold for early rounds
        current_threshold = dynamic_threshold
        if t <= 3:
            current_threshold *= 0.8
            
        IF cooperation_rate >= (m/n):
            action = COOPERATE
        ELSE IF cooperation_rate >= current_threshold:
            action = COOPERATE
        ELSE:
            action = DEFECT
    
    // Update threshold based on previous round outcome
    IF t > 1:
        previous_cooperation_rate = count_cooperators(t-1) / n
        previous_success = (count_cooperators(t-1) >= m)
        
        IF previous_cooperation_rate >= dynamic_threshold:
            IF previous_success:
                dynamic_threshold *= 0.95
            ELSE:
                dynamic_threshold *= 1.1
        ELSE:
            dynamic_threshold *= 0.98
            
        // Keep threshold bounded
        dynamic_threshold = max(0.2, min(dynamic_threshold, 0.8))
    
    record_action(action)
```

### 5. Robustness Features

**Against Defectors:**
- Dynamic threshold prevents continuous exploitation
- Will defect when cooperation rates are too low

**Against Pure Cooperators:**
- Will cooperate consistently when others do
- Maintains high cooperation rates

**Against Mixed/Conditional Strategies:**
- Adapts threshold based on observed patterns
- Provides conditional cooperation that can stabilize mutual cooperation

**Against End-Game Defection:**
- Special last-round handling prevents pure end-game exploitation
- Maintains cooperation if historical success rate is good

### 6. Cooperative Alignment

This strategy demonstrates clear cooperative intent through:
- **Initial cooperation** to establish good faith
- **Conditional cooperation** that rewards others' cooperative behavior
- **Adaptive forgiveness** through dynamic threshold adjustment
- **Long-term focus** that doesn't immediately punish single defections
- **Risk mitigation** that still attempts cooperation even when uncertain

The strategy aims to be a "good citizen" that facilitates group success while protecting against systematic exploitation, making it robust for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_74 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to foster cooperation while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adapting based on observed group behavior.

## Decision Rules

### Initial Phase (First Round)
**Always cooperate** to signal cooperative intent and test the group's disposition.

### Adaptive Phase (Rounds 2 to r-2)
Use a **dynamic cooperation threshold** based on observed group behavior:

1. **Calculate cooperation rate**: `group_coop_rate = (total_cooperations_observed) / (n × rounds_played)`

2. **Determine cooperation threshold**: 
   ```
   cooperation_threshold = max(0.4, min(0.8, m/n + 0.1))
   ```
   This creates a reasonable baseline that scales with the game's difficulty.

3. **Cooperation decision**:
   - If `group_coop_rate ≥ cooperation_threshold`: **Cooperate**
   - If `group_coop_rate < cooperation_threshold`: **Defect**

4. **Momentum bonus**: If cooperation succeeded in the last round (≥m cooperators), reduce the threshold by 0.1 for this round to maintain positive momentum.

### Endgame Phase (Last Round)
Apply **conditional reciprocity**:
- If `group_coop_rate ≥ m/n`: **Cooperate** (group has shown it can meet threshold)
- Otherwise: **Defect** (protect against last-round defection)

### Second-to-Last Round
Use a **cautious cooperation rule**:
- If `group_coop_rate ≥ (m/n + 0.2)`: **Cooperate**
- Otherwise: **Defect**

This accounts for potential last-round defections while still enabling cooperation in genuinely cooperative groups.

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate group cooperation metrics
    total_cooperations = sum of all C actions in history
    rounds_played = round - 1
    group_coop_rate = total_cooperations / (n * rounds_played)
    
    # Check if last round succeeded
    last_round_cooperators = count of C actions in previous round
    momentum_bonus = (last_round_cooperators >= m) ? 0.1 : 0
    
    # Base cooperation threshold
    base_threshold = max(0.4, min(0.8, m/n + 0.1))
    cooperation_threshold = base_threshold - momentum_bonus
    
    if round == r:  # Last round
        if group_coop_rate >= m/n:
            return COOPERATE
        else:
            return DEFECT
    
    elif round == r-1:  # Second-to-last round
        if group_coop_rate >= (m/n + 0.2):
            return COOPERATE
        else:
            return DEFECT
    
    else:  # Normal rounds
        if group_coop_rate >= cooperation_threshold:
            return COOPERATE
        else:
            return DEFECT
```

## Key Features

### Adaptiveness
- Continuously adjusts behavior based on observed group cooperation patterns
- Responds to both success and failure in meeting thresholds
- Accounts for game difficulty through the m/n ratio

### Robustness
- Protected against exploitation through adaptive thresholds
- Handles various group compositions (highly cooperative to mostly selfish)
- Maintains cooperation potential even after some failures

### Cooperation-Oriented
- Starts cooperatively to signal good intentions
- Rewards successful cooperation with continued cooperation
- Only abandons cooperation when group consistently fails to meet basic cooperation levels
- Gives groups multiple chances to establish cooperative norms

### Edge Case Handling
- **Single-player edge**: In n=2 games, automatically adjusts thresholds to be more generous
- **High-threshold games**: When m is close to n, becomes more forgiving in threshold calculations
- **Late-game protection**: Accounts for endgame effects while maintaining cooperation possibility

## Strategic Rationale

This strategy acknowledges that cooperation is a collective endeavor requiring mutual trust and reliability. By starting cooperatively but adapting based on observed behavior, it:

1. **Gives cooperation the best chance** by initially signaling willingness
2. **Protects against systematic exploitation** through adaptive thresholds
3. **Rewards successful cooperation** with continued cooperation
4. **Maintains flexibility** across different group compositions and game parameters

The strategy is particularly effective because it doesn't require coordination mechanisms or shared norms - it simply observes and adapts, making it robust in tournament settings against diverse opponent strategies.
'''

description_COOPERATIVE_75 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maintain cooperation while being resilient to exploitation. It operates on the principle that cooperation should be rewarded and sustained, while defection should be discouraged through measured responses.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2 to min(5, r/3)**: Continue cooperating to establish cooperative intent and observe others' behaviors

### 2. Adaptive Cooperation Threshold
Calculate a dynamic cooperation threshold based on recent history:

```
cooperation_rate = (cooperators in last 3 rounds) / (3 * n)
trust_level = cooperation_rate * cooperation_momentum
```

Where `cooperation_momentum` starts at 1.0 and adjusts based on whether the threshold m was met in previous rounds.

### 3. Main Decision Logic
For round t (after initial phase):

```pseudocode
IF trust_level >= 0.6 AND expected_cooperators >= m-1:
    ACTION = Cooperate
ELIF trust_level >= 0.4 AND expected_cooperators >= m:
    ACTION = Cooperate  
ELIF round_number <= r - 2:
    ACTION = Conditional_Defect_Recovery
ELSE:
    ACTION = Endgame_Logic
```

### 4. Expected Cooperators Calculation
```pseudocode
expected_cooperators = 0
FOR each other player j:
    recent_coop_rate = (j's cooperations in last 3 rounds) / 3
    IF recent_coop_rate >= 0.67:
        expected_cooperators += 1
    ELIF recent_coop_rate >= 0.33:
        expected_cooperators += 0.5
```

### 5. Conditional Defect Recovery
When cooperation seems risky but not hopeless:
- If I was among the few cooperators last round AND threshold wasn't met: Defect once, then reassess
- If threshold was barely missed (m-1 cooperators): Cooperate to encourage others
- If significant defection wave occurred: Wait 1 round, then attempt to restart cooperation

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and gather information about other players.

### Last Round (Round r)
```pseudocode
IF trust_level >= 0.5 AND expected_cooperators >= m-1:
    ACTION = Cooperate  // Maintain reputation even at game end
ELSE:
    ACTION = Defect     // Maximize final payoff if cooperation unlikely
```

### Second-to-Last Round (Round r-1)
```pseudocode
IF trust_level >= 0.4 AND expected_cooperators >= m:
    ACTION = Cooperate  // Set up potential final round cooperation
ELSE:
    ACTION = Defect
```

### When Threshold is Consistently Not Met
If threshold hasn't been met for 3+ consecutive rounds:
- Switch to "cooperation catalyst" mode
- Cooperate for 2 rounds regardless of trust_level to try breaking deadlock
- If still unsuccessful, minimize losses by defecting

## Robustness Features

### 1. Momentum Tracking
```pseudocode
IF threshold_met_last_round:
    cooperation_momentum = min(1.5, cooperation_momentum * 1.1)
ELSE:
    cooperation_momentum = max(0.3, cooperation_momentum * 0.9)
```

### 2. Anti-Exploitation Protection
- If I'm consistently the only cooperator (or among very few), reduce cooperation frequency
- Track "reciprocity ratio": if others defect when I cooperate repeatedly, become more selective

### 3. Pattern Recognition
- Detect if players are alternating or following patterns
- Adjust expectations based on identified behavioral patterns
- Don't get locked into predictable responses that can be exploited

### 4. Group Size Adaptation
- For small groups (n ≤ 4): Be more willing to cooperate since individual impact is higher
- For large groups (n ≥ 10): Require stronger cooperation signals before committing
- Adjust trust_level thresholds: smaller groups use 0.5/0.3, larger groups use 0.7/0.5

## Cooperation Incentive Mechanisms

### 1. Forgiveness Protocol
After punishing defection, return to cooperation if:
- Overall cooperation rate improves for 2+ rounds
- At least 60% of players return to cooperation
- We're not in the final 20% of rounds

### 2. Leadership Signaling
Occasionally cooperate even when risky (but expected cooperators ≥ m-2) to signal willingness to lead cooperative efforts and break deadlocks.

### 3. Proportional Response
Response intensity matches the severity of defection:
- Minor defection (threshold barely missed): Brief hesitation, then return to cooperation
- Major defection (threshold missed by large margin): Extended caution period

This strategy balances cooperation promotion with self-protection, adapts to various opponent behaviors, and maintains the potential for mutual benefit while guarding against systematic exploitation.
'''

description_COOPERATIVE_76 = '''
## Adaptive Threshold-Based Cooperative Strategy (ATCS)

### Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining a balance between cooperation and conditional defection based on observed group behavior.

### Decision Rules

#### 1. First Round Behavior
- **Always cooperate** in round 1 to signal cooperative intent and establish trust baseline
- Rationale: Initial cooperation provides information about group disposition while maximizing chance of early threshold achievement

#### 2. Cooperation Threshold Calculation
For each round t > 1, calculate a dynamic cooperation threshold based on historical performance:

```
cooperation_rate = (total_cooperations_observed) / (n × (t-1))
success_rate = (successful_rounds) / (t-1)
```

Where:
- `total_cooperations_observed` = sum of all C actions by all players in previous rounds
- `successful_rounds` = rounds where ≥ m players cooperated

#### 3. Main Decision Logic
**Cooperate if ANY of the following conditions are met:**

**Condition A: High Success Environment**
```
if success_rate ≥ 0.6:
    cooperate
```

**Condition B: Near-Threshold Situations**
```
cooperations_last_round = count of C actions in round (t-1)
if cooperations_last_round >= (m-1):
    cooperate  // Help maintain/achieve threshold
```

**Condition C: Recovery Opportunity**
```
if cooperation_rate ≥ (m/n) × 0.8 AND success_rate ≥ 0.3:
    cooperate  // Give group another chance
```

**Condition D: End-Game Cooperation**
```
if remaining_rounds ≤ max(2, r/4):
    if success_rate > 0.2:
        cooperate  // Final push for mutual benefit
```

#### 4. Defection Conditions
**Defect if ALL cooperation conditions fail AND:**
```
if success_rate < 0.2 AND cooperation_rate < (m/n) × 0.5:
    defect  // Protect against consistent free-riders
```

### Edge Case Handling

#### Last Round (t = r)
- If `success_rate ≥ 0.3`: **Cooperate** (final attempt at mutual benefit)
- Otherwise: **Defect** (minimize personal loss)

#### Early Rounds (t ≤ 3)
- Be more forgiving: Lower thresholds by 20% to allow group dynamics to develop
- Cooperate unless group shows extremely low cooperation (< 30% cooperation rate)

#### Highly Successful Groups
- If `success_rate ≥ 0.8` for 3+ consecutive rounds: **Always cooperate** (stable cooperative equilibrium)

#### Completely Uncooperative Groups
- If no successful rounds after round 4: Switch to **pure defection** to minimize losses

### Adaptive Features

1. **Learning Rate**: Strategy becomes more selective as it gathers data about group behavior
2. **Forgiveness Mechanism**: Gives groups multiple chances to establish cooperation
3. **Protection Against Exploitation**: Defects when cooperation is consistently unrewarded
4. **End-Game Awareness**: Adjusts behavior based on remaining opportunities

### Robustness Considerations

- **Against Always-Defectors**: Quickly identifies and stops feeding free-riders
- **Against Always-Cooperators**: Maintains cooperation to mutual benefit
- **Against Conditional Cooperators**: Aligns with similar strategies to maintain threshold
- **Against Random Players**: Adapts to average group behavior patterns
- **Against Sophisticated Strategies**: Responds to observed patterns rather than trying to model opponent strategies

### Pseudocode Summary

```python
def decide_action(round_num, history, n, m, k, r):
    if round_num == 1:
        return COOPERATE
    
    cooperation_rate = calculate_cooperation_rate(history)
    success_rate = calculate_success_rate(history)
    last_round_cooperations = count_cooperations(history[-1])
    remaining_rounds = r - round_num + 1
    
    # Check cooperation conditions
    if (success_rate >= 0.6 or 
        last_round_cooperations >= m-1 or
        (cooperation_rate >= 0.8 * m/n and success_rate >= 0.3) or
        (remaining_rounds <= max(2, r/4) and success_rate > 0.2)):
        return COOPERATE
    
    # Default to defection if cooperation conditions not met
    # and group shows poor performance
    if success_rate < 0.2 and cooperation_rate < 0.5 * m/n:
        return DEFECT
    
    # Borderline cases: slight bias toward cooperation
    return COOPERATE if cooperation_rate >= m/n else DEFECT
```

This strategy balances cooperative intent with rational self-protection, adapting to group dynamics while maintaining focus on achieving the collective threshold for mutual benefit.
'''

description_COOPERATIVE_77 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy prioritizes collective welfare while being adaptive to opponent behavior. It aims to establish and maintain cooperation through measured reciprocity and forward-looking threshold management.

## Strategy Components

### 1. Decision Rules

**Primary Cooperation Condition:**
- Cooperate if the expected number of cooperators (including myself) ≥ m
- Expected cooperators = my cooperation + predicted opponent cooperations

**Prediction Model:**
For each opponent j, maintain a cooperation probability estimate p_j based on:
- Recent cooperation rate (last 3 rounds, weighted 50%)
- Overall historical rate (weighted 30%) 
- Trend adjustment (weighted 20%): +0.1 if cooperating more lately, -0.1 if defecting more

**Expected Cooperators Calculation:**
```
expected_cooperators = 1 + sum(p_j for all opponents j)
if expected_cooperators ≥ m:
    cooperate()
else:
    defect()
```

### 2. Adaptive Mechanisms

**Forgiveness Factor:**
If cooperation has been failing (threshold not met in last 2 rounds), temporarily lower the cooperation threshold:
```
adjusted_threshold = max(m - 1, ceil(m * 0.8))
```

**Trust Building:**
In early rounds (first 25% of total rounds), add a "trust bonus" of +0.2 to each opponent's cooperation probability to encourage initial cooperation.

**Endgame Cooperation:**
In final 20% of rounds, increase cooperation threshold to account for potential endgame defection:
```
if current_round > 0.8 * r:
    adjusted_threshold = min(m + 1, n)
```

### 3. Edge Case Handling

**First Round:**
Always cooperate to signal cooperative intent and gather information about opponents.

**Last Round:**
Cooperate only if cooperation probability for achieving threshold exceeds 70% (higher bar due to no future reciprocity).

**Information Scarcity:**
If fewer than 3 rounds of history available, use optimistic default cooperation probabilities:
- Default p_j = 0.6 for each opponent
- Gradually replace with actual observed behavior

**Extreme Scenarios:**
- If m ≥ n-1: Always cooperate (threshold requires near-universal cooperation)
- If historical cooperation rate across all players < 20% for 5+ consecutive rounds: Switch to "restart mode" - cooperate for 2 rounds to test for renewed cooperation

### 4. Cooperative Alignment

**Cooperative Signals:**
- Lead by example: Cooperate in first round and whenever threshold achievement is uncertain but possible
- Gradual trust building rather than harsh punishment
- Maintain cooperation attempts even after failures (with adjustment periods)

**Collective Welfare Priority:**
- Strategy explicitly optimizes for threshold achievement rather than individual payoff maximization
- Willing to cooperate even when personal expected payoff is slightly negative if it helps establish cooperative norm

**Robustness Features:**
- Adapts to both highly cooperative and mixed-strategy opponents
- Recovers from cooperation breakdowns through forgiveness and trust rebuilding
- Handles noise and occasional defections without complete strategy abandonment

## Pseudocode Summary

```
function decide_action(round, history):
    if round == 1:
        return COOPERATE
    
    # Calculate opponent cooperation probabilities
    for each opponent j:
        p_j = calculate_cooperation_probability(j, history)
    
    # Apply contextual adjustments
    if early_game(round):
        p_j += 0.2 for all j  # Trust bonus
    
    threshold = m
    if recent_failures(history):
        threshold = max(m - 1, ceil(m * 0.8))  # Forgiveness
    
    if endgame(round):
        threshold = min(m + 1, n)  # Conservative endgame
        if last_round(round) and success_probability < 0.7:
            return DEFECT
    
    expected_cooperators = 1 + sum(p_j for all j)
    
    if expected_cooperators >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

This strategy balances cooperative intent with adaptive realism, providing a robust approach that can succeed across diverse opponent strategies while maintaining alignment with collective welfare goals.
'''

description_COOPERATIVE_78 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances immediate cooperation with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adapting based on observed group behavior.

## Decision Rules

### Initial Cooperation Phase (First 20% of rounds)
- **Always cooperate** for the first max(1, ⌊0.2r⌋) rounds
- This demonstrates good faith and helps establish cooperative norms
- Provides data about other players' tendencies

### Main Strategy (Remaining rounds)
The strategy uses three key metrics updated after each round:

1. **Cooperation Rate (CR)**: Average number of cooperators across all previous rounds
2. **Recent Trend (RT)**: Cooperation rate in the last min(5, r/4) rounds vs. overall average
3. **Threshold Safety Margin (TSM)**: How close the group typically gets to the minimum threshold m

**Decision Algorithm:**
```pseudocode
FOR each round t after initial phase:
    IF (CR >= m - 0.5) AND (RT >= -0.3) THEN
        cooperate = TRUE
    ELSE IF (CR >= m + 1) AND (last_round_cooperators >= m) THEN
        cooperate = TRUE  // Safe to cooperate when surplus exists
    ELSE IF (TSM < 0.5) AND (t > 0.7r) THEN
        cooperate = TRUE  // Emergency cooperation in late game
    ELSE
        cooperate = FALSE
    END IF
END FOR
```

### Last Round Special Rule
- If it's the final round AND cooperation rate suggests the group typically fails to meet threshold, **always cooperate** as a final attempt to save collective welfare

## Adaptive Mechanisms

### 1. Trend Detection
- Track whether cooperation is increasing, stable, or declining
- Adjust cooperation threshold based on momentum
- If cooperation is trending upward (RT > 0), be more willing to cooperate
- If declining sharply (RT < -0.5), become more defensive

### 2. Threshold Proximity Awareness
- Monitor how close the group typically comes to meeting the minimum threshold
- If the group consistently has exactly m or m+1 cooperators, maintain cooperation
- If there's typically a large surplus (>m+2), occasionally defect when safe
- If consistently falling short, increase cooperation propensity

### 3. Late-Game Adjustment
- In final 30% of rounds, if the group has been failing to meet thresholds, switch to "save the group" mode
- Increase cooperation probability by 0.2 for each round in the final phase where threshold wasn't met

## Edge Case Handling

### First Round
- Always cooperate (part of initial cooperation phase)

### When Everyone Defected Previously
- If zero cooperators in the last round, still cooperate if overall CR suggests viability
- This prevents permanent collapse and offers redemption

### When Threshold is Barely Met
- If exactly m players cooperated last round, continue cooperating to maintain stability
- This prevents the "tragedy of thinking someone else will do it"

### High Threshold Games (m close to n)
- When m > 0.7n, extend initial cooperation phase and be more persistent
- Recognize that these games require higher commitment

## Robustness Features

### Against Always-Defectors
- The strategy will eventually identify when cooperation rates are too low and switch to defensive mode
- Won't be exploited indefinitely due to the adaptive thresholds

### Against Conditional Cooperators
- The initial cooperation phase helps establish good relationships
- Trend tracking allows coordination with other adaptive strategies

### Against Random Players
- Uses statistical averages rather than assuming rational responses
- Adapts to the actual observed behavior rather than theoretical predictions

### Against Punishment Strategies
- The cooperative start and threshold-based approach should avoid triggering punishment
- Maintains cooperation when the group is successfully meeting thresholds

## Key Parameters Responsiveness

- **High k values**: More willing to cooperate since rewards are higher
- **High m values**: More persistent cooperation since threshold is harder to meet
- **Long games (high r)**: Uses longer initial cooperation phase and more gradual adaptation
- **Small groups (low n)**: More cautious about defecting since individual impact is higher

This strategy aims to be a "good citizen" that helps establish and maintain cooperation while being sophisticated enough to avoid exploitation and adapt to the actual behavior of the group.
'''

description_COOPERATIVE_79 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, aiming to foster cooperation while protecting against exploitation. It dynamically adjusts cooperation thresholds based on observed group behavior patterns.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Rounds 2-3**: Continue cooperating to establish a cooperative baseline and gather information about opponent tendencies

### 2. Adaptive Threshold System
After the initial phase, maintain a **cooperation likelihood estimate** for the group:
- Track the proportion of players who cooperated in recent rounds
- Use a weighted average favoring recent history: `recent_coop_rate = 0.6 * last_round_rate + 0.4 * previous_average`

### 3. Core Decision Logic
For each round t > 3:

```pseudocode
if (recent_coop_rate >= threshold_high):
    cooperate  // Group is cooperative enough
elif (recent_coop_rate >= threshold_low) AND (my_recent_cooperation_rate > 0.5):
    cooperate  // Moderate cooperation, maintain if I've been cooperative
elif (rounds_remaining <= 3) AND (recent_coop_rate >= 0.4):
    cooperate  // End-game cooperation push
else:
    defect    // Protect against exploitation
```

Where:
- `threshold_high = max(0.6, (m-1)/n + 0.1)` // Slightly above minimum needed
- `threshold_low = max(0.3, (m-2)/n)` // More lenient threshold

### 4. Dynamic Threshold Adjustment
- If the group consistently meets the cooperation threshold (m players), gradually lower thresholds to maintain cooperation
- If cooperation frequently fails, temporarily raise thresholds to avoid repeated losses
- Adjustment formula: `threshold *= (1 + 0.1 * (success_rate - 0.5))`

## Edge Case Handling

### First Round
Always cooperate to:
- Signal cooperative intent
- Gather initial information about group dynamics
- Establish potential for mutual cooperation

### Last Round
If it's the final round:
- Cooperate if `recent_coop_rate >= 0.4` (lower threshold for final push)
- This prevents complete end-game defection while maintaining some protection

### Extreme Scenarios
- **All others defect consistently**: Switch to defection after 3 consecutive rounds of <20% group cooperation
- **Very high cooperation (>80%)**: Maintain cooperation to support the successful group dynamic
- **Threshold exactly met**: Continue cooperating to maintain the successful equilibrium

## Cooperative Alignment Features

### 1. Forgiveness Mechanism
- If group cooperation drops but then recovers for 2+ consecutive rounds, reset to cooperative stance
- Don't permanently punish groups that learn to cooperate

### 2. Leadership Role
- In ambiguous situations (cooperation rate near thresholds), err on the side of cooperation
- Act as a "cooperation catalyst" when the group is close to the threshold

### 3. Endgame Cooperation
- Increase cooperation in final rounds to maximize total group welfare
- Recognize that mutual cooperation in final rounds benefits everyone

## Robustness Features

### Against Exploitative Strategies
- Monitor individual player patterns and reduce cooperation if consistently exploited
- Maintain minimum self-protection thresholds

### Against Random Players
- The weighted averaging system handles noise while identifying true cooperation trends
- Thresholds account for statistical variance in random behavior

### Against Coordinated Defection
- Rapid threshold adjustment prevents extended exploitation
- Quick switch to self-protection mode when cooperation consistently fails

## Strategy Summary
ATCS starts cooperatively, learns group dynamics, and maintains cooperation when viable while protecting against systematic exploitation. It adapts thresholds based on group success rates and provides leadership toward cooperative equilibria. The strategy prioritizes long-term mutual benefit while maintaining individual rationality as a safeguard.
'''

description_COOPERATIVE_80 = '''
# Cooperative Strategy: "Adaptive Threshold Guardian"

## Core Philosophy
This strategy aims to maximize collective welfare while being robust against exploitation. It balances cooperation with self-protection by adapting based on observed group behavior and maintaining hope for collective success throughout the game.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and test group dynamics

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-factor decision mechanism:

1. **Cooperation Rate Assessment**
   - Calculate `recent_coop_rate` = (cooperators in last round) / n
   - Calculate `historical_coop_rate` = (total cooperators across all previous rounds) / (previous rounds × n)

2. **Threshold Proximity Analysis**
   - If cooperators in last round ≥ m: Group succeeded, lean cooperative
   - If cooperators in last round = m-1: Group nearly succeeded, cooperate to help
   - If cooperators in last round < m-1: Group failed significantly, be cautious

3. **Exploitation Protection**
   - Track personal "cooperation streak" (consecutive rounds I cooperated)
   - Track "success rate" = (rounds where threshold was met) / (total rounds played)

**Decision Algorithm for rounds 2 to r-1:**
```
if last_round_cooperators >= m:
    cooperate  // Reward successful coordination
else if last_round_cooperators == m-1:
    cooperate  // Be the crucial additional cooperator
else if historical_coop_rate >= 0.6:
    cooperate  // Group shows cooperative potential
else if recent_coop_rate >= (m/n + 0.1):
    cooperate  // Recent cooperation near threshold
else if my_cooperation_streak <= 2:
    cooperate  // Give cooperation another chance
else:
    defect    // Protect against persistent free-riders
```

### Final Round (Round r): Strategic Endgame
The final round requires special consideration since there's no future retaliation:

```
if success_rate >= 0.4:
    cooperate  // Group has shown reasonable coordination
else if last_round_cooperators >= m-1:
    cooperate  // Close to threshold, help push over
else if historical_coop_rate >= 0.5:
    cooperate  // Group shows cooperative tendency
else:
    defect    // Protect against final exploitation
```

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Be more forgiving: Reduce the cooperation streak limit to 1
- Lower the historical cooperation threshold to 0.5

### High Threshold Games (m > n/2)
- Be more persistent in cooperation
- Only defect after cooperation streak ≥ 3 consecutive failures

### Low Threshold Games (m ≤ n/3)
- Be slightly more conservative
- Defect sooner if exploitation is detected

### Short Games (r ≤ 3)
- Maintain cooperation longer since there's less time for punishment
- Only defect in final round if success rate < 0.3

## Robustness Features

1. **Forgiveness Mechanism**: After defecting due to exploitation, return to cooperation if group behavior improves (cooperation rate increases by >0.2)

2. **Escalation Prevention**: Never defect for more than 2 consecutive rounds unless success rate drops below 0.1

3. **Hope Maintenance**: Even in pessimistic scenarios, occasionally cooperate (every 3rd round) to test if group dynamics have changed

## Strategy Rationale

This strategy is cooperative because it:
- Starts optimistically and maintains cooperative bias
- Actively helps groups reach thresholds by cooperating when close (m-1 cooperators)
- Forgives and returns to cooperation when group behavior improves
- Prioritizes collective success while protecting against systematic exploitation

The strategy is adaptive because it:
- Responds to both recent and historical behavior patterns
- Adjusts decision criteria based on game parameters
- Handles various edge cases appropriately
- Balances multiple competing factors rather than following rigid rules

The strategy is robust because it:
- Protects against consistent free-riders through cooperation streak limits
- Maintains some cooperation even in adversarial environments
- Adapts thresholds based on group size and game length
- Provides clear decision criteria that work across different opponent types
'''

description_COOPERATIVE_81 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with strategic protection against exploitation. It aims to facilitate collective success while maintaining resilience against various opponent behaviors through adaptive threshold management and conditional cooperation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and gather initial information about opponent tendencies.

### Rounds 2 to r-1: Adaptive Cooperation
The strategy maintains a dynamic **cooperation threshold** that determines the minimum number of cooperators needed from previous rounds to justify continued cooperation.

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(m - 1, cooperation_count_last_round * 0.8)
```

**Decision Rule:**
- **Cooperate** if: `cooperation_count_last_round >= cooperation_threshold`
- **Defect** otherwise

**Threshold Adaptation Logic:**
- If cooperation succeeded (≥m cooperators): Lower threshold slightly to maintain momentum
- If cooperation failed (<m cooperators): Raise threshold to protect against repeated failures
- Never set threshold below `m-1` (ensuring we cooperate when close to success)
- Never set threshold above `n-1` (ensuring we don't become permanently defective)

### Final Round: Strategic Finish
In the last round, apply extra caution since there's no future to build toward:
- **Cooperate** only if: `cooperation_count_last_round >= m` (exact threshold met previously)
- This prevents exploitation in the final round while still supporting groups that have demonstrated reliable cooperation

## Edge Case Handling

### All-Defection Scenarios
If cooperation count falls to 0 for two consecutive rounds:
- Reset cooperation threshold to `m-1`
- Cooperate for one round to test if the group can recover
- This prevents permanent defection spirals

### Near-Miss Scenarios  
If cooperation count equals `m-1` (one short of success):
- **Always cooperate** regardless of threshold
- This maximizes chances of crossing the critical threshold

### High-Cooperation Scenarios
If cooperation count ≥ `n-2` (almost everyone cooperating):
- **Always cooperate** to maintain group success
- Don't risk being the defector that breaks a successful coalition

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial Trust**: Starts with cooperation to signal good intentions
2. **Conditional Reciprocity**: Maintains cooperation when others demonstrate commitment
3. **Collective Optimization**: Prioritizes group success over individual advantage
4. **Recovery Mechanisms**: Attempts to rebuild cooperation after failures
5. **Threshold Sensitivity**: Responds to the specific cooperation requirements (m) of each game

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    last_round_cooperators = count_cooperators(history[round-1])
    
    if round == r:  // Final round
        return COOPERATE if last_round_cooperators >= m else DEFECT
    
    // Handle special cases
    if last_round_cooperators == m-1:  // One short of threshold
        return COOPERATE
    
    if last_round_cooperators >= n-2:  // Almost everyone cooperating
        return COOPERATE
    
    // Check for defection spiral
    if round >= 3 and count_cooperators(history[round-2]) == 0 and last_round_cooperators == 0:
        cooperation_threshold = m-1
        return COOPERATE  // Recovery attempt
    
    // Normal adaptive decision
    cooperation_threshold = max(m-1, last_round_cooperators * 0.8)
    
    return COOPERATE if last_round_cooperators >= cooperation_threshold else DEFECT
```

This strategy adapts to various opponent behaviors while maintaining a fundamentally cooperative orientation, making it robust across different game parameters and opponent strategies.
'''

description_COOPERATIVE_82 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Strategy: "Optimistic Gradual Reciprocator"

This strategy balances cooperative intent with adaptive learning, aiming to build and maintain cooperative coalitions while protecting against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
**Always cooperate in round 1** to signal cooperative intent and test the waters for potential coalition formation.

### 2. Main Strategy Logic (Rounds 2 to r-1)

The strategy operates on three key principles:

**A) Coalition Tracking:**
- Track the number of cooperators in each previous round
- Maintain a "cooperation rate" = (total cooperators across all previous rounds) / (n × rounds_played)
- Maintain a "recent cooperation trend" = average cooperators in last 3 rounds (or all rounds if fewer than 3)

**B) Threshold-Based Decision:**
```
IF recent_cooperation_trend >= (m - 0.5):
    COOPERATE  // Coalition is viable or nearly viable
ELSE IF cooperation_rate >= 0.6 AND recent_cooperation_trend >= (m - 1):
    COOPERATE  // Historical cooperation is strong, give benefit of doubt
ELSE IF last_round_cooperators >= m:
    COOPERATE  // Threshold was met, reward success
ELSE:
    DEFECT    // Coalition appears unviable
```

**C) Forgiveness Mechanism:**
- If defecting for 2+ consecutive rounds due to low cooperation, attempt cooperation every 3rd round to test if conditions have improved
- This prevents permanent lock-in to defection when others might be willing to rebuild cooperation

### 3. Final Round Strategy (Round r)
**Cooperate if and only if:**
- Recent cooperation trend ≥ m (coalition is consistently viable), OR  
- Last round had ≥ m cooperators (reward final successful cooperation)

This prevents others from exploiting a "always defect in final round" assumption while still being selective.

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Be more forgiving in threshold calculations (reduce required cooperation rate to 0.5)
- Every player's decision is more critical, so maintain optimistic stance longer

### High Threshold Games (m > 0.7n):
- Increase patience for coalition building
- Cooperate for first 3 rounds regardless of outcomes to give coalition time to form
- Only require cooperation_rate ≥ 0.4 instead of 0.6

### Single-Shot Feel (r = 2):
- Round 1: Cooperate
- Round 2: Cooperate if round 1 had ≥ (m-1) cooperators, otherwise defect

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Optimistic Start:** Always begins cooperatively to facilitate coalition formation
2. **Reward Success:** Continues cooperating when thresholds are met, reinforcing successful coordination
3. **Forgiveness:** Periodically tests for renewed cooperation even after defection phases
4. **Threshold Focus:** Recognizes that exactly m cooperators create the optimal outcome for the group
5. **Adaptive Learning:** Adjusts to actual group dynamics rather than assuming fixed behaviors

## Robustness Features

- **Against Always-Defectors:** Will eventually defect when cooperation proves futile, but periodically tests for change
- **Against Always-Cooperators:** Will cooperate consistently once this is detected
- **Against Conditional Cooperators:** Will quickly identify and maintain mutually beneficial cooperation patterns  
- **Against Mixed Strategies:** Uses both recent trends and historical data to avoid being fooled by temporary fluctuations
- **Against End-Game Defection:** Maintains selectivity in final round while still rewarding established cooperation

The strategy aims to be the "catalyst" that helps form stable cooperative coalitions while protecting itself from systematic exploitation.
'''

description_COOPERATIVE_83 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to establish and maintain cooperation while protecting against systematic exploitation. It recognizes that in collective risk dilemmas, mutual cooperation benefits everyone, but requires careful management of trust and reciprocity.

## Decision Rules

### Initial Cooperation Phase (First 3 rounds or first 15% of game, whichever is larger)
- **Always cooperate** to signal cooperative intent and establish trust
- This demonstrates commitment to mutual benefit and gives other players opportunity to reciprocate

### Main Strategy Phase
The strategy maintains a **cooperation threshold** that adapts based on observed behavior:

**Cooperation Threshold Calculation:**
- Initialize threshold = m (minimum needed for success)
- After each round, update based on recent cooperation rates:
  - If cooperation succeeded (≥m cooperators): slightly lower threshold
  - If cooperation failed (<m cooperators): increase threshold
  - Threshold bounds: always between m and n-1

**Decision Rule:**
1. **Predict cooperation count** based on weighted average of:
   - Recent round cooperation (weight: 0.4)
   - Medium-term trend (last 25% of rounds, weight: 0.3)  
   - Long-term average (weight: 0.3)

2. **Cooperate if:**
   - Predicted cooperators ≥ current threshold, OR
   - We're in bottom 20% of remaining rounds (end-game cooperation push), OR
   - Success rate in last 5 rounds > 60%

3. **Defect if:**
   - Predicted cooperators < threshold AND not in end-game
   - BUT: Never defect more than 2 consecutive rounds (prevent cooperation collapse)

### Forgiveness and Recovery Mechanism
- If cooperation rate drops below 40% for 3+ consecutive rounds:
  - Reset to "recovery mode": cooperate for 2 rounds regardless of predictions
  - This prevents permanent cooperation breakdown and offers fresh start

### End-Game Handling (Last 20% of rounds)
- **Increase cooperation propensity** to maximize final payoffs
- Cooperate if predicted cooperators ≥ m-1 (more lenient threshold)
- In final round: cooperate if any chance of reaching threshold

## Pseudocode

```
Initialize:
  cooperation_threshold = m
  initial_rounds = max(3, ceil(0.15 * r))

For each round t:
  if t <= initial_rounds:
    return COOPERATE
  
  // Calculate recent cooperation trends
  recent_coop_rate = cooperation_rate(last_3_rounds)
  medium_trend = cooperation_rate(last_quarter_rounds) 
  long_term_avg = cooperation_rate(all_previous_rounds)
  
  // Predict cooperation count
  predicted_cooperators = weighted_average(recent_coop_rate, medium_trend, long_term_avg) * (n-1)
  
  // Update threshold based on recent success
  if last_round_succeeded:
    cooperation_threshold = max(m, cooperation_threshold - 0.1)
  else:
    cooperation_threshold = min(n-1, cooperation_threshold + 0.2)
  
  // End-game logic
  remaining_rounds = r - t + 1
  in_endgame = remaining_rounds <= 0.2 * r
  
  // Main decision logic
  if in_endgame:
    return COOPERATE if predicted_cooperators >= m-1
  
  if predicted_cooperators >= cooperation_threshold:
    return COOPERATE
  
  if consecutive_defections >= 2:
    return COOPERATE  // Prevent cooperation collapse
  
  if recent_failure_rate > 0.6 for last_3_rounds:
    enter recovery_mode for 2 rounds
    return COOPERATE
  
  return DEFECT
```

## Key Features

1. **Adaptive Learning**: Adjusts expectations based on observed behavior patterns
2. **Cooperative Signaling**: Strong initial cooperation establishes trust
3. **Robust to Exploitation**: Won't cooperate indefinitely with chronic defectors
4. **Forgiveness**: Recovery mechanism prevents permanent cooperation breakdown
5. **End-game Optimization**: Increases cooperation when stakes are highest
6. **Threshold Flexibility**: Adapts requirements based on group behavior

This strategy is designed to foster cooperation while remaining resilient to various opponent strategies, from pure cooperators to sophisticated adaptive players.
'''

description_COOPERATIVE_84 = '''
# Adaptive Cooperative Strategy: "Progressive Trust Builder"

## Core Philosophy
This strategy balances cooperation with adaptive protection against exploitation, using escalating cooperation thresholds that respond to observed group behavior while maintaining a fundamentally cooperative stance.

## Decision Rules

### Round 1: Initial Cooperation
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and gather initial information about the group's cooperative tendencies

### Rounds 2 to r-1: Adaptive Cooperation Based on Group History

**Step 1: Calculate Cooperation History**
- Track the number of cooperators in each previous round
- Calculate `avg_cooperators` = average number of cooperators across all previous rounds
- Calculate `recent_cooperators` = number of cooperators in the most recent round

**Step 2: Determine Required Cooperation Threshold**
- If `avg_cooperators >= m`: Set `threshold = m - 1`
- If `avg_cooperators >= m * 0.8`: Set `threshold = m`  
- If `avg_cooperators >= m * 0.6`: Set `threshold = m + 1`
- Otherwise: Set `threshold = m + 2`

**Step 3: Cooperation Decision**
- **Cooperate** if `recent_cooperators >= threshold`
- **Defect** if `recent_cooperators < threshold`

**Step 4: Forgiveness Mechanism**
- If we defected in the previous round but `recent_cooperators >= m`, then **cooperate** (give the group another chance)
- This prevents permanent punishment spirals

### Final Round: Strategic Defection
- **Always defect** in the final round
- Rationale: No future rounds to maintain reputation, so capture immediate benefit while others likely still cooperate from momentum

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Reduce thresholds by 1 (minimum of 1) to account for higher individual impact
- Be more forgiving of occasional defections

### High Threshold Games (m > n/2)
- In round 1, cooperate regardless
- From round 2 onwards, only cooperate if at least 75% of previous rounds had ≥ m cooperators
- More conservative approach since cooperation is inherently risky

### Low Reward Games (k ≤ 1.5)
- Increase threshold requirements by 1 to account for lower cooperation incentives
- Be more selective about when to cooperate

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:  # Final round
        return DEFECT
    
    # Calculate group cooperation metrics
    avg_cooperators = calculate_average_cooperators(history)
    recent_cooperators = count_cooperators(history[-1])
    
    # Adjust for game parameters
    threshold = calculate_threshold(avg_cooperators, m, n, k)
    
    # Forgiveness check
    if my_last_action == DEFECT and recent_cooperators >= m:
        return COOPERATE
    
    # Main decision rule
    if recent_cooperators >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Robustness Features

1. **Responsive to Group Dynamics**: Adjusts expectations based on observed cooperation levels
2. **Forgiveness**: Prevents permanent punishment spirals through second chances
3. **Parameter Sensitivity**: Adapts thresholds based on game structure (n, m, k)
4. **Anti-Exploitation**: Protects against consistent defectors while remaining open to cooperation
5. **Endgame Awareness**: Captures final-round benefits while maintaining cooperation throughout most of the game

This strategy maintains a cooperative orientation while being realistic about the need to protect against exploitation, making it robust across diverse opponent strategies and game parameters.
'''

description_COOPERATIVE_85 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, aiming to achieve the collective threshold while protecting against exploitation. It operates on the principle of "conditional cooperation" - cooperating when there's reasonable evidence that others will reciprocate to reach the threshold.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Establish cooperative intent and gather initial information about opponent behaviors

### Rounds 2 to r-1: Adaptive Cooperation
Use a **Dynamic Threshold Assessment** based on three factors:

1. **Historical Cooperation Rate (HCR)**
   - Calculate: `HCR = (total cooperators in previous rounds) / ((current_round - 1) × n)`
   - This measures the overall cooperative tendency of the group

2. **Recent Trend (RT)**
   - Calculate cooperation rate in the last `min(3, current_round-1)` rounds
   - Weight recent behavior more heavily than distant history

3. **Threshold Proximity (TP)**
   - Assess how close the group typically gets to the threshold `m`
   - `TP = average_cooperators_per_round / m`

**Cooperation Decision Logic:**
```
if (HCR × 0.4 + RT × 0.4 + TP × 0.2) > threshold_confidence:
    cooperate
else:
    defect

where threshold_confidence = max(0.3, m/n - 0.1)
```

This formula ensures:
- High weight on recent behavior (RT) and overall history (HCR)
- Lower threshold confidence when fewer cooperators are needed
- Minimum confidence threshold to avoid excessive defection

### Final Round: Strategic Culmination
Apply **Enhanced Final Round Logic**:
- If the group has consistently met the threshold (≥80% of previous rounds): **Cooperate**
- If cooperation rate in last 3 rounds ≥ m/n: **Cooperate**
- If my cooperation would likely push total cooperators to exactly m (based on trends): **Cooperate**
- Otherwise: **Defect** (avoid being exploited in the final round)

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation threshold by 0.1 due to higher individual impact
- Be more forgiving of occasional defections

### High Threshold Games (m/n > 0.7)
- Lower the threshold_confidence by 0.1
- Cooperate more aggressively in early rounds to establish momentum

### Low Reward Games (k ≤ 1.5)
- Increase threshold_confidence by 0.1
- Be more selective about cooperation to avoid losses

### Perfect/Near-Perfect History
- If cooperation rate has been ≥95%: Always cooperate (except possibly final round)
- If cooperation rate has been ≤10%: Switch to minimal cooperation mode (cooperate only if HCR shows recent sharp uptick)

## Robustness Features

### Forgiveness Mechanism
- If cooperation drops dramatically, give the group 2 rounds to recover before switching to defensive mode
- This handles temporary coordination failures

### Exploitation Protection
- Track if you're being systematically exploited (you cooperate but threshold isn't met)
- If exploited in >60% of your cooperation rounds, reduce cooperation probability by 0.2

### Momentum Building
- If cooperation is just below threshold (within 1-2 players), cooperate more aggressively to help establish successful patterns

## Example Pseudocode Structure

```python
def decide_action(round_num, history, n, m, k, r):
    if round_num == 1:
        return COOPERATE
    
    if round_num == r:
        return final_round_logic(history, n, m)
    
    hcr = calculate_historical_cooperation_rate(history)
    rt = calculate_recent_trend(history, round_num)
    tp = calculate_threshold_proximity(history, m)
    
    threshold_confidence = max(0.3, m/n - 0.1)
    
    # Apply edge case adjustments
    threshold_confidence = adjust_for_game_parameters(threshold_confidence, n, m, k)
    
    cooperation_score = hcr * 0.4 + rt * 0.4 + tp * 0.2
    
    if cooperation_score > threshold_confidence:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Adaptive**: Learns from group behavior and adjusts accordingly
2. **Robust**: Handles various game parameters and opponent strategies
3. **Cooperative**: Genuinely seeks to achieve collective goals
4. **Protected**: Avoids systematic exploitation while remaining open to cooperation
5. **Forward-looking**: Considers game dynamics and builds toward successful coordination

This strategy should perform well against both cooperative and mixed populations while maintaining strong cooperative credentials.
'''

description_COOPERATIVE_86 = '''
# Adaptive Threshold-Based Cooperative Strategy

## Core Strategy: "Cooperative Momentum Builder"

This strategy is designed to maximize collective welfare while being robust against various opponent behaviors. It operates on the principle of building and maintaining cooperative momentum while adapting to the group's cooperation patterns.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
**Always cooperate in round 1.**
- Rationale: Signal cooperative intent and give the group the best chance to establish a cooperative norm from the start.

### 2. Adaptive Cooperation Threshold
For rounds 2 through r-1, cooperate if ANY of the following conditions are met:

**Condition A: Recent Cooperation Success**
- If in the previous round, the threshold m was met (≥m players cooperated), then cooperate.
- Rationale: Reward and reinforce successful collective action.

**Condition B: Near-Miss Recovery** 
- If in the previous round, exactly (m-1) players cooperated, then cooperate.
- Rationale: One more cooperator could have made the difference; show commitment to pushing the group over the threshold.

**Condition C: Trend-Based Hope**
- If the number of cooperators has increased or stayed the same over the last 2 rounds, AND the current cooperation level is ≥ (m-2), then cooperate.
- Rationale: Positive or stable trends suggest the group might be moving toward cooperation.

**Condition D: Strategic Forgiveness**
- If none of the above apply, but we're in the first half of the game (current round ≤ r/2), cooperate with probability 0.3.
- Rationale: Give the group multiple chances to establish cooperation early on.

### 3. Final Round Strategy (Round r)
**Cooperate if the cooperation rate in round (r-1) was ≥ (m-1)/n.**
- Rationale: If the group showed recent willingness to approach or meet the threshold, make one final cooperative gesture.

## Handling Edge Cases

### Very Small Groups (n ≤ 4)
- Increase forgiveness probability in Condition D to 0.5, as each player's decision has higher impact.

### High Threshold Games (m > n/2)
- In Condition C, relax the requirement to ≥ (m-3) instead of ≥ (m-2).
- Rationale: When thresholds are high, even being several players short still represents meaningful progress.

### Short Games (r ≤ 3)
- Always cooperate in rounds 1 and 2.
- In round 3 (if it exists), apply the final round rule.

### High Reward Games (k ≥ 3)
- Increase forgiveness probability in Condition D to 0.5.
- Rationale: High rewards justify taking more risks to achieve cooperation.

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    prev_cooperators = count_cooperators(history[round-1])
    
    // Condition A: Recent success
    if prev_cooperators >= m:
        return COOPERATE
    
    // Condition B: Near miss
    if prev_cooperators == m - 1:
        return COOPERATE
    
    // Condition C: Positive trend (only if round >= 3)
    if round >= 3:
        prev2_cooperators = count_cooperators(history[round-2])
        if prev_cooperators >= prev2_cooperators AND prev_cooperators >= max(1, m-2):
            return COOPERATE
    
    // Handle final round
    if round == r:
        if prev_cooperators >= m - 1:
            return COOPERATE
        else:
            return DEFECT
    
    // Condition D: Strategic forgiveness (first half only)
    if round <= r/2:
        forgiveness_prob = 0.3
        if n <= 4:
            forgiveness_prob = 0.5
        if k >= 3:
            forgiveness_prob = 0.5
        if random() < forgiveness_prob:
            return COOPERATE
    
    return DEFECT
```

## Strategic Rationale

This strategy balances several key principles:

1. **Optimism with Realism**: Starts cooperatively but learns from group behavior
2. **Reinforcement**: Rewards successful collective action to build momentum
3. **Forgiveness**: Gives groups multiple chances to establish cooperation
4. **Adaptation**: Responds to trends and near-misses rather than just binary success/failure
5. **Context Sensitivity**: Adjusts behavior based on game parameters (group size, threshold, rewards, duration)

The strategy is designed to work well with other cooperative strategies while being robust against exploitation by consistently defecting opponents. It aims to identify and nurture cooperative potential in mixed groups while avoiding being a "sucker" in predominantly defecting environments.
'''

description_COOPERATIVE_87 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle that cooperation should be conditional on evidence that enough others will reciprocate.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Cooperation
Use a three-factor decision framework:

1. **Threshold Proximity Assessment**: Calculate cooperation rate from previous round
   - If (cooperators_last_round ≥ m): High likelihood threshold will be met
   - If (cooperators_last_round = m-1): Marginal case - cooperation critical
   - If (cooperators_last_round < m-1): Low likelihood threshold will be met

2. **Historical Trend Analysis**: Track cooperation trend over last 3 rounds (or all available rounds if fewer)
   - Increasing trend: Others becoming more cooperative
   - Stable trend: Consistent behavior pattern
   - Decreasing trend: Others becoming less cooperative

3. **Strategic Position**: Consider your cooperation's impact
   - If you're likely to be the pivotal cooperator (when others ≈ m-1), cooperation has high value
   - If threshold clearly won't be met even with your cooperation, consider defecting

### Decision Algorithm for Rounds 2 to r-1:
```
cooperators_last = count_cooperators_in_round(t-1)
cooperation_trend = calculate_trend(last_3_rounds)

IF cooperators_last >= m:
    COOPERATE  // Threshold was met, maintain momentum
ELSE IF cooperators_last == m-1:
    IF cooperation_trend >= 0:
        COOPERATE  // You could be pivotal
    ELSE:
        COOPERATE with probability 0.7  // Still try but hedge slightly
ELSE IF cooperators_last >= m-2:
    IF cooperation_trend > 0:
        COOPERATE  // Improving situation
    ELSE:
        COOPERATE with probability 0.4  // Low but non-zero chance
ELSE:
    IF cooperation_trend > 0.3 AND round_number <= r/2:
        COOPERATE  // Give benefit of doubt early in game
    ELSE:
        DEFECT  // Protect against likely failure
```

### Final Round (Round r): Conditional Cooperation
- If cooperation rate in round (r-1) ≥ m: **COOPERATE**
- If cooperation rate in round (r-1) = m-1: **COOPERATE** (be the pivotal player)
- Otherwise: **DEFECT** (no future rounds to build reputation)

## Edge Case Handling

### Very Small Groups (n ≤ 4):
- Be more cooperative since each player's decision has higher impact
- Lower the defection threshold in the decision algorithm

### High Threshold Games (m close to n):
- Require stronger evidence of cooperation before defecting
- Be more forgiving of occasional defections by others

### Low Reward Games (k close to 1):
- Slightly increase defection probability in marginal cases
- Still maintain cooperative baseline since collective benefit exists

### Short Games (r ≤ 3):
- Default to cooperation except in final round if previous cooperation failed
- Don't have enough rounds for complex adaptation

## Robustness Features

1. **Forgiveness**: Don't permanently write off cooperation after failures - reassess based on recent trends

2. **Noise Tolerance**: Use trend analysis rather than single-round reactions to avoid overreacting to random behavior

3. **Exploitation Protection**: Defect when historical evidence suggests threshold won't be met, preventing systematic exploitation

4. **Reputation Building**: Maintain generally cooperative stance to encourage others' cooperation

## Strategic Advantages

- **Adaptive**: Responds to opponent behavior patterns rather than rigid rules
- **Cooperative**: Defaults toward cooperation when evidence is ambiguous
- **Rational**: Protects against clear exploitation while maintaining cooperative potential
- **Robust**: Handles various game parameters and opponent strategies effectively

This strategy aims to foster cooperation while learning from experience, making it both principled and pragmatic for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_88 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to maintain cooperation when feasible while protecting against systematic exploitation. It operates on the principle that cooperation should be attempted when there's reasonable evidence it can succeed, but defection is warranted when cooperation consistently fails.

## Decision Rules

### Initial Cooperation Phase (First Round)
- **Always cooperate in round 1** to signal cooperative intent and gather initial information about opponent behavior.

### Main Strategy (Rounds 2 to r-1)
The strategy uses a **cooperation probability** that adapts based on recent history:

**Cooperation Probability Calculation:**
```
cooperation_prob = base_cooperation * success_modifier * trend_modifier
```

Where:
- `base_cooperation = min(0.8, (m-1)/(n-1) + 0.3)` 
  - Higher base cooperation when threshold is easier to reach
  - Minimum 0.3 to maintain cooperative spirit
  - Maximum 0.8 to retain some caution

**Success Modifier:**
- Track cooperation success rate over last `min(5, current_round-1)` rounds
- `success_rate = successful_rounds / observed_rounds`
- `success_modifier = 0.5 + success_rate`
  - Ranges from 0.5 (never successful) to 1.5 (always successful)

**Trend Modifier:**
- If cooperation numbers are increasing: `trend_modifier = 1.2`
- If cooperation numbers are stable (±1): `trend_modifier = 1.0`  
- If cooperation numbers are decreasing: `trend_modifier = 0.8`

**Final Decision:**
- Generate random number [0,1]
- If random number ≤ cooperation_prob: **COOPERATE**
- Otherwise: **DEFECT**

### Final Round Strategy
In the last round, players have incentive to defect since there's no future punishment. The strategy adapts:

- If historical success rate ≥ 60%: **Cooperate** (bet on others maintaining cooperation)
- If 30% ≤ success rate < 60%: Cooperate with probability 0.4
- If success rate < 30%: **Defect** (cooperation has consistently failed)

## Edge Case Handling

### High Threshold Scenarios (m close to n)
- Increase base cooperation rate since everyone's contribution is critical
- React more strongly to defections (lower success modifier impact)

### Low Threshold Scenarios (m = 2 or 3)
- More willing to defect if others are cooperating consistently
- Balance between contributing and free-riding

### Extreme Opponent Behaviors
- **All opponents always defect:** Strategy will learn this quickly (success rate → 0) and switch to primarily defecting while occasionally testing cooperation
- **All opponents always cooperate:** Strategy will detect high success rates and maintain high cooperation probability
- **Mixed behaviors:** Strategy adapts to the prevailing cooperation level

### Information Processing
- Track each player's individual cooperation rate to identify consistent cooperators vs. defectors
- Weight recent rounds more heavily than distant past
- Handle first few rounds with higher cooperation bias since data is limited

## Robustness Features

1. **Probabilistic decisions** prevent opponents from perfectly predicting behavior
2. **Adaptive learning** allows response to changing opponent strategies
3. **Cooperative bias** maintains alignment with cooperative goals
4. **Exploitation protection** via success rate tracking prevents indefinite victimization
5. **Parameter sensitivity** adjusts behavior based on game difficulty (m/n ratio)

## Pseudocode Summary
```
if round == 1:
    return COOPERATE
    
if round == final_round:
    if historical_success_rate >= 0.6:
        return COOPERATE
    elif historical_success_rate >= 0.3:
        return COOPERATE with probability 0.4
    else:
        return DEFECT

# Main rounds
base_coop = min(0.8, (m-1)/(n-1) + 0.3)
success_mod = 0.5 + recent_success_rate
trend_mod = calculate_trend_modifier()

coop_prob = base_coop * success_mod * trend_mod
coop_prob = min(0.95, coop_prob)  # Cap at 95%

return COOPERATE if random() <= coop_prob else DEFECT
```

This strategy maintains a cooperative orientation while learning from experience, making it robust against various opponent strategies while still contributing to collective welfare when cooperation is viable.
'''

description_COOPERATIVE_89 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy prioritizes long-term collective benefit while maintaining resilience against exploitation. It operates on the principle of "optimistic cooperation with adaptive learning" - starting cooperatively but adjusting based on observed group behavior.

## Strategy Components

### 1. Decision Rules

**Primary Decision Logic:**
- **Cooperate** if the expected number of cooperators (including myself) ≥ m
- **Defect** if the expected number of cooperators (including myself) < m

**Expected Cooperators Calculation:**
For each round t, maintain a cooperation probability estimate p_j(t) for each other player j:
- Expected total cooperators = 1 + Σ(j≠i) p_j(t)

### 2. Probability Estimation System

**Initial Estimates (Round 1):**
- Set p_j(1) = min(0.8, (m + 1)/n) for all j ≠ i
- This assumes optimistic but realistic cooperation based on threshold needs

**Dynamic Updates (Rounds 2 to r):**
Use weighted average of recent history with decay factor α = 0.7:

```
For each player j in round t:
p_j(t) = α × p_j(t-1) + (1-α) × observed_cooperation_j(t-1)

Additionally apply group momentum:
group_cooperation_rate(t-1) = (cooperators in round t-1) / n
p_j(t) = 0.6 × p_j(t) + 0.4 × group_cooperation_rate(t-1)
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and gather information
- Exception: If m/n > 0.7, cooperate only if m ≤ n/2 (avoid impossible thresholds)

**Last Round:**
- If current total payoff is satisfactory (≥ average of k and 1, multiplied by rounds completed), cooperate
- Otherwise, analyze if cooperation could trigger the threshold and provide net benefit

**Critical Rounds:**
- If consecutive failures ≥ 3 rounds: temporarily increase cooperation threshold by 10% to test group responsiveness
- If success rate over last 5 rounds > 60%: slightly lower cooperation threshold by 5%

### 4. Adaptive Mechanisms

**Exploitation Protection:**
- Track "free riders": players with cooperation rate < 30% while group succeeds
- If free riders > n/3, implement "punishment phase": reduce cooperation probability by 20% for 2 rounds

**Recovery Protocol:**
- After punishment phase, gradually return to normal cooperation levels
- If group shows renewed cooperation (>70% cooperation rate), immediately return to full cooperation mode

**Threshold Proximity Adjustment:**
- When expected cooperators is very close to m (within ±1), increase cooperation probability by 15% to help push over threshold
- This accounts for estimation uncertainty and provides a "safety margin"

### 5. Pseudocode Summary

```
function decide_action(round_t, history):
    if round_t == 1:
        return COOPERATE
    
    // Update probability estimates
    for each player j:
        update p_j(t) using weighted average and group momentum
    
    expected_cooperators = 1 + sum(p_j(t) for all j ≠ i)
    
    // Apply adaptive adjustments
    if recent_failures ≥ 3:
        threshold_adjustment = 1.1
    else if recent_success_rate > 0.6:
        threshold_adjustment = 0.95
    else:
        threshold_adjustment = 1.0
    
    adjusted_threshold = m * threshold_adjustment
    
    // Add proximity bonus
    if abs(expected_cooperators - m) ≤ 1:
        expected_cooperators += 0.15
    
    // Check for exploitation and apply punishment
    if free_riders > n/3 and not in_punishment_phase:
        enter_punishment_phase()
        expected_cooperators *= 0.8
    
    // Final decision
    if expected_cooperators ≥ adjusted_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategy Strengths

1. **Cooperative by Design**: Starts cooperatively and maintains cooperation when beneficial
2. **Adaptive Learning**: Updates beliefs based on observed behavior rather than fixed assumptions
3. **Robust to Exploitation**: Detects and responds to free-riding behavior
4. **Threshold-Aware**: Explicitly considers the collective risk threshold in decision-making
5. **Recovery-Oriented**: Has mechanisms to restore cooperation after conflicts

This strategy balances the need to achieve collective success while protecting against systematic exploitation, making it suitable for diverse opponent behaviors in tournament play.
'''

description_COOPERATIVE_90 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while being robust against exploitation. It balances being cooperative enough to achieve the threshold while protecting against consistent defectors through adaptive punishment and forgiveness mechanisms.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance to establish a cooperative equilibrium.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Behavior

#### Step 1: Calculate Cooperation Momentum
```
cooperation_rate = (total_cooperators_last_round) / n
recent_trend = (cooperators_last_round - cooperators_two_rounds_ago) / n
momentum = 0.7 * cooperation_rate + 0.3 * recent_trend
```

#### Step 2: Assess Threshold Viability
```
if (cooperators_last_round >= m):
    threshold_met = True
    consecutive_successes += 1
else:
    threshold_met = False
    consecutive_failures += 1
    consecutive_successes = 0
```

#### Step 3: Main Decision Logic
```
// High momentum and recent success - maintain cooperation
if (momentum >= 0.6 AND threshold_met):
    return COOPERATE

// Moderate momentum but threshold achievable - conditional cooperation
else if (momentum >= 0.4 AND cooperators_last_round >= m-2):
    return COOPERATE

// Low recent cooperation but early/middle game - give second chances
else if (momentum >= 0.2 AND current_round <= r/2):
    return COOPERATE

// Punishment phase - but not complete defection
else if (consecutive_failures <= 2):
    return COOPERATE with probability 0.3  // Partial punishment

// Extended punishment for persistent non-cooperation
else:
    return DEFECT
```

#### Step 4: Forgiveness Mechanism
```
// Reset punishment if group shows improvement
if (cooperators_last_round > cooperators_two_rounds_ago + 1):
    consecutive_failures = max(0, consecutive_failures - 1)
    return COOPERATE  // Immediate forgiveness for clear improvement
```

### Final Round (Round r): Strategic End-Game
```
// If threshold consistently met, maintain cooperation
if (consecutive_successes >= 2):
    return COOPERATE

// If group has been moderately cooperative recently
else if (cooperators_last_round >= m-1):
    return COOPERATE

// Otherwise, assume others will defect in final round
else:
    return DEFECT
```

## Edge Case Handling

### First Round
- Always cooperate to establish positive precedent and maximize initial threshold achievement probability.

### Early Rounds (rounds 2-3)
- Be more forgiving of defection since players may still be learning the dynamics.
- Use simplified momentum calculation focusing more on raw cooperation rates.

### Middle Rounds
- Full adaptive strategy as described above.
- Most responsive to momentum and trend changes.

### Late Rounds (final 20% of rounds)
- Become slightly more conservative about cooperation when momentum is borderline.
- Account for potential end-game defection by others.

### Final Round
- Strategic decision based on established patterns rather than trying to influence future rounds.

## Key Features

### Robustness
- **Momentum-based**: Responds to both current state and trends, making it harder to exploit with irregular patterns.
- **Graduated punishment**: Doesn't immediately give up on cooperation but escalates punishment for persistent non-cooperation.
- **Forgiveness mechanism**: Quickly rewards improvement, preventing permanent breakdown.

### Cooperation Promotion
- **Optimistic start**: Gives groups the best chance to establish cooperative norms.
- **Threshold awareness**: Specifically considers how close the group is to achieving the minimum threshold.
- **Conditional cooperation**: Maintains cooperation when it's most likely to be reciprocated.

### Adaptability
- **Parameter-dependent thresholds**: Decision thresholds adapt based on n, m, and current round.
- **History-dependent**: Uses both recent history and longer-term patterns.
- **Context-sensitive**: Different behavior in early vs. late game phases.

This strategy should perform well against a variety of opponent types while maintaining a fundamentally cooperative orientation that benefits the collective good.
'''

description_COOPERATIVE_91 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Philosophy
This strategy aims to achieve stable cooperation by being initially generous, responsive to collective behavior, and forgiving of temporary defections. It balances the need to encourage cooperation with protection against exploitation.

## Decision Rules

### Round 1: Optimistic Start
Always **COOPERATE** in the first round, regardless of parameters. This signals cooperative intent and gives the group the best chance to establish a cooperative equilibrium from the beginning.

### Rounds 2 to r-1: Adaptive Threshold Response
Calculate a **cooperation threshold** based on recent collective behavior:

```
cooperation_threshold = max(m, recent_cooperation_rate * n * adjustment_factor)
```

Where:
- `recent_cooperation_rate` = average proportion of players who cooperated in the last min(3, current_round-1) rounds
- `adjustment_factor` = 1.1 (slightly optimistic to encourage cooperation)

**Decision Logic:**
1. If last round's cooperators ≥ cooperation_threshold: **COOPERATE**
2. If last round's cooperators < cooperation_threshold BUT ≥ m: **COOPERATE** with probability 0.7
3. If last round's cooperators < m: **DEFECT**

### Final Round (Round r): Strategic Endgame
Since this is the last interaction, apply a modified strategy:

If the cooperation threshold has been consistently met (≥ 80% of previous rounds), then:
- **COOPERATE** if expected cooperators based on recent trends ≥ m-1
- **DEFECT** otherwise

Otherwise: **DEFECT** (standard endgame reasoning)

## Edge Case Handling

### Early Rounds (Rounds 2-3)
- Use a lower threshold initially to account for limited history
- Be more forgiving of defections as players may still be learning the dynamics

### Threshold Achievement Uncertainty
When unsure if the threshold will be met:
- If we're close to m (within 1-2 cooperators based on recent patterns), cooperate to help push over the threshold
- Consider our pivotal position: if our cooperation could make the difference between success and failure, cooperate

### Parameter Sensitivity
- **High k values (k > 2)**: Be more willing to take risks and cooperate even with marginal threshold achievement
- **High m relative to n**: Be more conservative, requiring stronger signals of group cooperation
- **Long games (high r)**: Be more patient with building cooperation in early rounds

## Cooperative Alignment Features

1. **Initial Generosity**: Always starts with cooperation to signal good intentions
2. **Collective Responsiveness**: Adapts based on group behavior rather than individual tracking
3. **Forgiveness**: Uses probabilistic cooperation even when threshold isn't fully met but minimum is achieved
4. **Threshold Support**: Actively tries to help the group reach the cooperation threshold
5. **Trend Following**: Responds to improving cooperation patterns with increased cooperation

## Robustness Features

- **Anti-Exploitation**: Defects when cooperation is clearly failing (< m cooperators)
- **Adaptive Learning**: Adjusts expectations based on observed group behavior
- **Endgame Protection**: Recognizes final round dynamics while still supporting cooperation when viable
- **Parameter Awareness**: Scales response appropriately to game incentives

This strategy encourages collective success while maintaining individual rationality, making it both cooperative and strategically sound across diverse opponent behaviors and game parameters.
'''

description_COOPERATIVE_92 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It assumes that cooperation is desirable but recognizes that success depends on building and maintaining sufficient cooperative momentum among players.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and help establish a cooperative norm from the beginning.

### Rounds 2 to r-1: Adaptive Threshold System

The strategy uses a **dynamic cooperation threshold** based on recent cooperative success:

```
cooperation_threshold = max(0.3, min(0.8, base_threshold + momentum_adjustment))
```

Where:
- **base_threshold** = m/n (the minimum cooperation rate needed for success)
- **momentum_adjustment** = (+0.2 if last round succeeded, -0.1 if last round failed)
- Bounds ensure the threshold stays between 30% and 80%

**Decision Rule:**
- **Cooperate** if: (cooperation_rate_last_round ≥ cooperation_threshold) OR (consecutive_failures < 2)
- **Defect** otherwise

### Round r (Final Round): Strategic Cooperation
In the last round, cooperate if:
- The cooperation rate in round r-1 was ≥ (m-1)/n, OR
- There have been ≥ 2 successful rounds in the last 3 rounds

## Key Mechanisms

### 1. Momentum Tracking
- **Success** = ≥ m players cooperated in the round
- **Consecutive failures** = number of failed rounds in a row
- **Recent success rate** = proportion of successful rounds in last 3 rounds

### 2. Forgiveness Principle
After any successful round, reset consecutive failure count to 0. This prevents the strategy from becoming overly pessimistic after temporary setbacks.

### 3. Graduated Response
- First sign of defection: Continue cooperating (give benefit of doubt)
- Second consecutive failure: Reduce cooperation threshold but don't immediately defect
- Third+ consecutive failure: Defect until cooperation recovers

## Edge Case Handling

### Very Small Groups (n ≤ 4)
Increase base cooperation tendency by 0.1 since individual actions have greater impact.

### High Threshold Games (m/n > 0.7)
More forgiving - reduce penalty for failures since cooperation is inherently difficult.

### Final Rounds Approach
In rounds r-2 and r-1, slightly increase cooperation probability to avoid endgame defection cascades.

## Robustness Features

1. **Adaptive Learning**: Adjusts expectations based on observed group behavior
2. **Momentum Preservation**: Rewards and reinforces successful cooperation
3. **Controlled Defection**: Won't abandon cooperation after single failures
4. **Endgame Stability**: Maintains cooperation incentives near game end
5. **Parameter Sensitivity**: Scales behavior appropriately for different game configurations

## Example Behavior

In a game with n=6, m=3, k=2:
- Round 1: Cooperate (always)
- Round 2: If 3+ cooperated in R1 → Cooperate; if <3 → Still cooperate (forgiveness)
- Round 3: If 2 consecutive failures → threshold drops, might defect if cooperation rate <40%
- Final rounds: Cooperate if there's reasonable chance of success based on recent history

This strategy aims to foster and maintain cooperation while protecting against exploitation, adapting its expectations to the actual behavior observed in each specific game instance.
'''

description_COOPERATIVE_93 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It starts optimistically, learns from group behavior patterns, and maintains cooperation when feasible while protecting against systematic exploitation.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Rounds 2-3**: COOPERATE if at least ⌊m/2⌋ players cooperated in the previous round
- **Rationale**: Give the group multiple chances to establish cooperative norms while avoiding naive exploitation

### 2. Learning and Adaptation Phase (Rounds 4 to r-2)

**Core Decision Rule:**
```
cooperation_threshold = max(m, adaptive_threshold)
recent_cooperators = count_cooperators_in_last_3_rounds()

IF recent_cooperators >= cooperation_threshold:
    COOPERATE
ELSE:
    Apply graduated response based on cooperation_deficit
```

**Adaptive Threshold Calculation:**
```
base_expectation = m + 1  // Aim slightly above minimum
recent_cooperation_rate = cooperators_last_3_rounds / (3 * n)
trend_adjustment = (current_rate - historical_average) * n

adaptive_threshold = base_expectation + trend_adjustment
adaptive_threshold = clamp(adaptive_threshold, m, n-1)
```

**Graduated Response System:**
- If cooperation_deficit ≤ 1: COOPERATE (give benefit of doubt)
- If cooperation_deficit = 2-3: COOPERATE with 70% probability
- If cooperation_deficit > 3: DEFECT (group has abandoned cooperation)

### 3. Endgame Strategy (Last 2 rounds)

**Round r-1:**
- COOPERATE if average cooperation rate over all previous rounds ≥ (m+1)/n
- This maintains cooperation in successful groups while avoiding last-minute defection cascades

**Final Round r:**
- COOPERATE if cooperation succeeded in round r-1 AND total cooperators ≥ m-1
- Otherwise DEFECT (protect against endgame exploitation)

## Key Adaptive Features

### Pattern Recognition
- Track 3-round rolling cooperation rates
- Identify persistent cooperators vs. opportunistic defectors  
- Adjust expectations based on group's demonstrated capacity

### Forgiveness Mechanism
- After 3+ consecutive rounds of failed cooperation, attempt cooperation reset
- If group cooperation suddenly increases by ≥50%, return to cooperative stance
- Prevents permanent spiral into defection

### Risk Management
- Never cooperate if doing so would make you the only cooperator
- In uncertain situations, slightly favor cooperation when deficit is small
- Protect against exploitation while maintaining cooperative potential

## Handling Edge Cases

**Small Groups (n ≤ 4):**
- Reduce learning phase to 2 rounds
- Higher forgiveness threshold due to higher individual impact

**High Threshold (m > n/2):**
- More conservative cooperation requirements
- Focus on identifying the most reliable cooperators

**Low Reward (k ≤ 1.5):**
- Stricter cooperation requirements
- Faster transition to defensive play if cooperation fails

## Strategic Rationale

1. **Cooperative Intent**: Always starts cooperatively and gives multiple chances
2. **Learning Adaptation**: Adjusts expectations based on actual group behavior
3. **Exploitation Protection**: Graduated responses prevent systematic abuse
4. **Group Success Focus**: Prioritizes reaching the threshold over individual maximization
5. **Endgame Stability**: Maintains cooperation in successful groups while protecting against last-round defection

This strategy promotes cooperation when possible, learns from group dynamics, and maintains robustness against various opponent types - from always-defectors to conditional cooperators to complex adaptive strategies.
'''

description_COOPERATIVE_94 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperation with self-protection by adapting to observed group behavior while maintaining a fundamentally cooperative orientation. It aims to facilitate collective success while avoiding exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and give the group the best chance to establish a pattern of mutual cooperation

### Rounds 2 to r-1: Adaptive Cooperation

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_in_previous_round) / n
```

**Step 2: Apply Threshold Logic**
- If `cooperation_rate ≥ (m/n)`: **COOPERATE**
  - The group is meeting or exceeding the threshold, so contribute to maintain success
  
- If `cooperation_rate < (m/n)` but `cooperation_rate ≥ (m/n - 0.2)`: **COOPERATE**
  - The group is close to the threshold; give them another chance and try to pull them up
  
- If `cooperation_rate < (m/n - 0.2)`: **DEFECT**
  - The group is significantly below threshold; protect yourself from exploitation

**Step 3: Forgiveness Mechanism**
- Track consecutive defection rounds: `consecutive_failures`
- If `consecutive_failures ≥ 2` and current round is not the last 3 rounds:
  - Override above logic and **COOPERATE** once every 3 rounds
  - Reset failure counter if cooperation rate improves to `≥ (m/n - 0.1)`

### Final Round (Round r): Conditional Cooperation
- If cooperation rate in round (r-1) was `≥ (m/n - 0.1)`: **COOPERATE**
- Otherwise: **DEFECT**
- Rationale: Reward groups that maintained near-threshold cooperation, but don't throw away payoff for hopeless groups

## Edge Case Handling

### Small Groups (n ≤ 4)
- Be more forgiving: reduce the 0.2 buffer to 0.1 in threshold calculations
- Reason: Individual actions have larger impact, so be more willing to bridge gaps

### High Threshold Games (m/n > 0.7)
- In rounds 2-4, cooperate if cooperation rate ≥ (m/n - 0.3)
- Reason: High-threshold games need more aggressive cooperation to get started

### Low Reward Games (k ≤ 1.5)
- Be more conservative: increase defection threshold by 0.1
- Reason: Lower rewards make exploitation more costly relative to gains

## Cooperative Alignment

1. **Optimistic Beginning**: Always start cooperatively to signal good intentions
2. **Threshold Supporting**: Prioritize achieving the minimum threshold over pure self-interest
3. **Forgiveness**: Periodically attempt to restart cooperation even after failures
4. **Group-Responsive**: Adapt to actual group behavior rather than assuming worst case
5. **Last-Round Fairness**: Maintain cooperation in final round if group has been trying

## Strategy Summary

This strategy is **conditionally cooperative** - it leads with cooperation and maintains it when the group shows reasonable effort toward the threshold. It protects against systematic exploitation while providing multiple opportunities for groups to achieve mutual benefit. The adaptive thresholds ensure the strategy works across different parameter combinations while maintaining its cooperative core.

The strategy balances three key principles:
- **Cooperation**: Start cooperatively and maintain it when viable
- **Adaptation**: Respond to actual group behavior patterns  
- **Protection**: Avoid exploitation while giving reasonable chances for recovery
'''

description_COOPERATIVE_95 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Guardian"** that balances cooperation with strategic adaptation to opponent behavior.

## Core Strategy: Adaptive Threshold Guardian

### Decision Framework
The strategy operates on three key principles:
1. **Default Cooperation**: Start cooperatively and maintain cooperation when the group is successful
2. **Threshold Sensitivity**: Adapt based on how close the group gets to the cooperation threshold
3. **Forgiveness with Memory**: Punish sustained defection but forgive and return to cooperation

### Detailed Decision Rules

**Round 1 (Initialization):**
- Always cooperate (C)
- Rationale: Establish cooperative intent and test group dynamics

**Rounds 2 to r-1 (Main Strategy):**

For each round t, calculate:
- `recent_cooperators` = average number of cooperators in last min(3, t-1) rounds
- `cooperation_rate` = recent_cooperators / n
- `threshold_proximity` = recent_cooperators / m

Decision logic:
```pseudocode
if threshold_proximity >= 1.0:
    // Threshold consistently met - maintain cooperation
    action = C
    
else if threshold_proximity >= 0.8:
    // Close to threshold - cooperate with high probability
    if cooperation_rate >= 0.4:
        action = C
    else:
        // Group becoming less cooperative despite being close
        action = D
        
else if threshold_proximity >= 0.6:
    // Moderate proximity - conditional cooperation
    if cooperation_rate >= 0.5:
        action = C
    else:
        action = D
        
else:
    // Far from threshold - defect but probe occasionally
    if (t % 4 == 0) and (cooperation_rate >= 0.3):
        action = C  // Probe every 4 rounds if some cooperation exists
    else:
        action = D
```

**Final Round (Round r):**
- If `recent_cooperators >= m`: Cooperate (C)
- Else: Defect (D)
- Rationale: No future rounds to build reputation, so only cooperate if threshold likely to be met

### Adaptive Elements

**Recovery Mechanism:**
If the group has failed to meet the threshold for 3+ consecutive rounds but cooperation_rate > 0.25, attempt to restart cooperation by playing C for 2 consecutive rounds to signal willingness to rebuild.

**Parameter Sensitivity:**
- **High k (k > 2.5)**: Increase cooperation thresholds by 0.1 (more willing to risk cooperation)
- **Low m relative to n (m/n < 0.4)**: More optimistic about reaching threshold
- **High m relative to n (m/n > 0.7)**: More conservative, require higher cooperation rates

### Edge Case Handling

**Very Small Groups (n ≤ 3):**
- Be more cooperative since each player's decision is critical
- Always cooperate if threshold was met in previous round

**Very Large Groups (n ≥ 10):**
- Focus more on recent trends than absolute numbers
- Use last 5 rounds instead of 3 for calculating averages

**High Threshold Games (m/n > 0.8):**
- Cooperate more aggressively in early rounds to establish momentum
- Be more forgiving of occasional defections

### Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if consistently exploited (threshold_proximity < 0.6 triggers defensive behavior)

2. **Opportunity Recognition**: Probes for cooperation opportunities even after group breakdown

3. **Endgame Awareness**: Adjusts behavior in final round based on likelihood of success

4. **Momentum Building**: Recognizes when the group is building toward cooperation and supports that momentum

### Strategic Rationale

This strategy is designed to:
- **Start cooperatively** to establish good faith
- **Adapt dynamically** to group behavior rather than following rigid patterns
- **Protect against exploitation** while remaining open to cooperation
- **Build coalition momentum** when the group shows cooperative potential
- **Make rational endgame decisions** based on actual probability of success

The strategy assumes other players may also be strategic and adaptive, so it avoids predictable patterns while maintaining a fundamentally cooperative orientation that can recognize and reward group cooperation when it emerges.
'''

description_COOPERATIVE_96 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive self-protection, aiming to sustain cooperation while being robust against exploitation. It focuses on achieving the minimum threshold `m` rather than universal cooperation, making it more resilient in diverse environments.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Cooperation
The strategy uses three key components:

1. **Cooperation Momentum Tracking**: Monitor if the group is meeting the threshold
2. **Exploitation Protection**: Detect and respond to free-riding
3. **Recovery Mechanism**: Help rebuild cooperation when it breaks down

**Decision Logic:**
```pseudocode
IF round_number == 1:
    COOPERATE

ELSE IF round_number == r (last round):
    Use Last Round Logic (see below)

ELSE:
    cooperation_rate = count_cooperators_last_round / n
    my_contribution_needed = is_my_cooperation_critical()
    
    IF cooperation_rate >= (m + buffer) / n:
        // Group is safely above threshold
        COOPERATE with probability = min(0.9, cooperation_rate + 0.1)
    
    ELSE IF my_contribution_needed:
        // My cooperation might be critical for threshold
        IF recent_exploitation_detected():
            COOPERATE with probability = 0.6
        ELSE:
            COOPERATE with probability = 0.8
    
    ELSE:
        // Threshold unlikely to be met even with my cooperation
        IF cooperation_trending_up():
            COOPERATE with probability = 0.7
        ELSE:
            COOPERATE with probability = 0.3
```

### Last Round: Strategic Defection
- **Defect** in the final round, as there's no future cooperation to maintain and defection maximizes payoff if threshold is still met

## Key Mechanisms

### 1. Critical Contribution Detection
```pseudocode
is_my_cooperation_critical():
    cooperators_last_round = count_cooperators_last_round()
    IF cooperators_last_round == m - 1:
        RETURN TRUE  // I could be the deciding vote
    IF cooperators_last_round == m AND I_cooperated_last_round:
        RETURN TRUE  // Threshold might depend on my continued cooperation
    RETURN FALSE
```

### 2. Exploitation Detection
Track players who consistently defect while others cooperate:
```pseudocode
recent_exploitation_detected():
    recent_rounds = last 3 rounds (or fewer if early in game)
    FOR each recent round:
        IF threshold was met AND some players defected:
            exploitation_incidents++
    RETURN exploitation_incidents >= 2
```

### 3. Cooperation Trend Analysis
```pseudocode
cooperation_trending_up():
    IF rounds_played < 3:
        RETURN cooperation_rate_last_round > 0.4
    
    trend = cooperation_rate_last_round - cooperation_rate_3_rounds_ago
    RETURN trend > 0.1
```

## Edge Cases and Robustness Features

### Early Game (Rounds 1-3)
- Be more cooperative to establish good patterns
- Use higher cooperation probabilities even when threshold seems unlikely

### Late Game (Last 3 rounds)
- Gradually reduce cooperation probability to avoid end-game exploitation
- Exception: Still cooperate if critically needed and group has been mostly cooperative

### Extreme Parameters
- **High threshold (m close to n)**: Increase cooperation probabilities by 0.1-0.2
- **Low threshold (m = 2-3)**: Can afford to be more selective, reduce cooperation probabilities by 0.1
- **High reward (k > 3)**: Increase cooperation probabilities as mutual benefit is large
- **Many rounds (r > 10)**: Be more forgiving of occasional defection, focus on long-term patterns

### Buffer System
Maintain a "buffer" of 1-2 extra cooperators beyond minimum `m`:
- If `m = 3`, aim for 4-5 cooperators when possible
- This provides resilience against others' occasional defection

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial Trust**: Always cooperates first to signal good intentions
2. **Threshold Focus**: Actively works to ensure group success rather than just personal gain
3. **Forgiveness**: Doesn't permanently punish defectors; gives chances for redemption
4. **Sacrifice Acceptance**: Willing to cooperate even when exploitation is detected if group needs it
5. **Recovery Support**: Helps rebuild cooperation after breakdowns

The strategy balances being "cooperatively generous" with being "strategically smart," ensuring it contributes to group welfare while not being systematically exploited by pure defectors.
'''

description_COOPERATIVE_97 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness to observed behavior patterns. It aims to foster cooperation while protecting against persistent defection, using the game's threshold structure strategically.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Adaptive Cooperation Threshold**
- Maintain a "cooperation probability" for each player based on their historical behavior
- Cooperate if the expected number of cooperators (including self) meets or exceeds the threshold `m`

**Mathematical Framework:**
```
For each player j ≠ i, calculate cooperation probability p_j based on their history:
p_j = (cooperations_by_j + α) / (total_rounds_observed + 2α)

Expected cooperators = Σ(p_j) for all j ≠ i
Cooperate if: Expected cooperators ≥ (m - 1)
```

Where α is a smoothing parameter (suggested value: 1.0) to handle initial uncertainty.

### 2. Historical Analysis Components

**Recent Behavior Weighting:**
- Weight recent rounds more heavily using exponential decay
- Last 3 rounds get weights: [0.5, 0.3, 0.2] for most recent to oldest
- Remaining history gets uniform weighting

**Group Momentum Tracking:**
- Track whether cooperation is trending up or down in recent rounds
- If cooperation increased in last 2 rounds, reduce cooperation threshold by 0.5
- If cooperation decreased in last 2 rounds, increase cooperation threshold by 0.5

### 3. Edge Case Handling

**Round 1 (No History):**
- Cooperate if: `k × (probability of success) > 1`
- Assume uniform random behavior: probability of success ≈ `(n choose m) × (0.5)^n`
- For most parameter sets, this favors cooperation

**Final Round:**
- Apply same logic as regular rounds - maintain consistency
- Slight bias toward cooperation if cooperation has been successful in recent rounds

**Near-Threshold Situations:**
- If expected cooperators is within 0.5 of threshold, apply tie-breaking rules:
  - Cooperate if group cooperation trend is positive
  - Cooperate if personal cooperation rate > 0.6 in last 5 rounds
  - Otherwise defect

### 4. Adaptive Mechanisms

**Learning Rate Adjustment:**
```
If (actual_cooperators - expected_cooperators)² > 1.0 for 3+ consecutive rounds:
    Increase learning rate by 50%
    Give more weight to recent observations
```

**Forgiveness Mechanism:**
- After 3 consecutive rounds where threshold was met, reduce negative weight on past defections
- This prevents permanent punishment of players who change behavior

**Crisis Response:**
- If cooperation failed in 2+ of last 3 rounds due to insufficient cooperators:
  - Increase own cooperation probability by 0.3 for next 2 rounds
  - Signal willingness to restart cooperation

### 5. Robustness Features

**Anti-Exploitation Protection:**
- If a player defects when cooperation threshold is safely exceeded (>m+1 cooperators), mark as "free-rider"
- Reduce trust in free-riders more severely: multiply their cooperation probability by 0.7

**Noise Tolerance:**
- Don't overreact to single-round deviations
- Require 2+ round patterns before major strategy adjustments

**Parameter Sensitivity:**
```
If m/n > 0.7 (high threshold):
    Be more generous in cooperation predictions
If k < 1.5 (low reward):
    Require higher confidence before cooperating
If r < 5 (short game):
    Reduce learning rates, rely more on initial assumptions
```

## Pseudocode Summary

```
function decide_action(my_history, opponents_history, round_num, game_params):
    if round_num == 1:
        return cooperate_if_expected_positive_value()
    
    # Calculate cooperation probabilities for each opponent
    coop_probs = []
    for opponent in opponents:
        prob = calculate_weighted_cooperation_probability(opponent.history)
        prob = adjust_for_recent_trends(prob, opponent.recent_history)
        coop_probs.append(prob)
    
    # Estimate expected cooperators
    expected_cooperators = sum(coop_probs)
    
    # Apply adaptive threshold with momentum
    threshold = game_params.m - 1  # excluding self
    threshold = adjust_threshold_for_momentum(threshold, group_history)
    
    # Decision logic
    if expected_cooperators >= threshold:
        return COOPERATE
    elif abs(expected_cooperators - threshold) <= 0.5:
        return apply_tie_breaking_rules()
    else:
        return DEFECT
```

## Strategic Rationale

This strategy is **cooperative** because it:
- Defaults toward cooperation when conditions seem favorable
- Actively tries to restart cooperation after failures
- Forgives past defections when players change behavior
- Takes calculated risks to maintain cooperative momentum

It's **adaptive** because it:
- Learns from observed behavior patterns
- Adjusts to different game parameters
- Responds to both individual and group dynamics
- Balances recent vs. historical information

It's **robust** because it:
- Protects against systematic exploitation
- Handles noise and uncertainty gracefully
- Works across different parameter ranges
- Doesn't require coordination with other strategies

The strategy aims to be a "cooperative catalyst" - willing to take reasonable risks to establish and maintain cooperation while learning to identify and respond appropriately to different types of opponents.
'''

description_COOPERATIVE_98 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, aiming to achieve the collective benefit while protecting against exploitation. It starts optimistically but learns from experience to adjust cooperation levels dynamically.

## Strategy Components

### 1. Decision Rules

**Primary Decision Framework:**
- **Cooperation Threshold**: Maintain a dynamic estimate of how many players are likely to cooperate
- **Risk Assessment**: Evaluate the probability that cooperation threshold `m` will be met
- **Adaptive Learning**: Update cooperation propensity based on observed outcomes

**Cooperation Decision:**
Cooperate if ANY of these conditions are met:
1. **Optimistic Start**: First round OR recent success rate > 70%
2. **Critical Mass**: Estimated cooperators ≥ (m - 1) [I could be the deciding vote]
3. **Safety Margin**: Estimated cooperators ≥ m + 1 [cooperation likely succeeds]
4. **Recovery Mode**: Recent failures AND my cooperation could plausibly help recovery

### 2. Adaptive Learning Mechanism

**Track Key Metrics:**
- `cooperation_rate`: Rolling average of cooperation percentage across all players
- `success_rate`: Percentage of recent rounds where threshold was met
- `my_impact`: How often my cooperation was pivotal (made the difference)

**Update Rules After Each Round:**
```pseudocode
cooperation_rate = 0.7 * cooperation_rate + 0.3 * (cooperators_this_round / n)
success_rate = 0.6 * success_rate + 0.4 * (1 if threshold_met else 0)

predicted_cooperators = cooperation_rate * n
confidence = min(success_rate, cooperation_rate)
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate (optimistic start, no data to suggest otherwise)

**Early Rounds (2-3):**
- Cooperate if previous round had ≥ (m-2) cooperators
- This gives collective action a chance to emerge

**Last Round:**
- Cooperate if `success_rate > 0.4` AND `predicted_cooperators ≥ (m-1)`
- Maintain cooperative stance unless situation is clearly hopeless

**Crisis Response:**
- If success rate drops below 20% for 3+ consecutive rounds, enter "recovery mode"
- In recovery mode: cooperate for 2 rounds to attempt collective recovery
- If recovery fails, switch to defensive mode (only cooperate when very confident)

### 4. Detailed Decision Algorithm

```pseudocode
function should_cooperate(round, history):
    if round == 1:
        return True
    
    update_metrics(history)
    predicted_cooperators = cooperation_rate * n
    
    // Core cooperation conditions
    if success_rate > 0.7:  // Recent success
        return True
    
    if predicted_cooperators >= (m - 1):  // Could be decisive
        return True
        
    if predicted_cooperators >= (m + 1):  // Safe cooperation
        return True
    
    // Recovery logic
    if in_crisis_mode() AND recovery_attempts < 2:
        return True
    
    // Conservative cooperation in uncertain situations
    if round <= 3 AND cooperation_rate > 0.3:
        return True
    
    // Last round cooperation
    if round == r AND success_rate > 0.4 AND predicted_cooperators >= (m-1):
        return True
    
    return False
```

### 5. Robustness Features

**Against Free Riders:**
- Tracks individual and collective cooperation patterns
- Reduces cooperation when exploitation is detected (low success despite decent cooperation rates)

**Against Conditional Cooperators:**
- Maintains cooperation signals to encourage reciprocal cooperation
- Uses recovery mode to break out of mutual defection cycles

**Against Random Players:**
- Relies on statistical learning rather than pattern matching
- Adapts to actual observed cooperation rates rather than assumed strategies

### 6. Cooperative Alignment

**Maintains Cooperative Spirit:**
- Starts optimistically and gives cooperation multiple chances
- Uses recovery mode to actively rebuild collective cooperation
- Only becomes defensive after clear evidence of systematic failure

**Encourages Collective Success:**
- Cooperates when it could be the deciding factor
- Maintains cooperation during successful periods to reinforce positive outcomes
- Provides consistent signals that reward reciprocal cooperation

## Summary

This strategy is **cooperative by default** but **learns from experience**. It actively tries to achieve the collective benefit while protecting against systematic exploitation. The adaptive thresholds ensure it works across different opponent mixes, from highly cooperative to largely selfish, while the recovery mechanisms help rebuild cooperation when it breaks down.

The strategy balances three key objectives: maximizing collective welfare, avoiding exploitation, and maintaining the possibility for cooperative emergence throughout the game.
'''

description_COOPERATIVE_99 = '''
# Adaptive Threshold-Based Cooperative Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed group behavior and strategic timing.

## Strategy Overview: "Smart Cooperator with Adaptive Threshold"

### Decision Rules

**1. Cooperation Threshold Calculation**
- Calculate a dynamic cooperation threshold `T` based on recent group behavior
- `T = max(m, min(n-1, m + adjustment_factor))`
- `adjustment_factor` starts at 0 and adapts based on history

**2. Primary Decision Logic**
```
If round == 1:
    Cooperate (establish cooperative intent)
    
Else if round == r (final round):
    If predicted_cooperators >= m:
        Defect (free-ride on final round)
    Else:
        Cooperate (help ensure threshold is met)
        
Else (middle rounds):
    If predicted_cooperators >= T:
        Cooperate with probability 0.8
    Else if predicted_cooperators >= m-1:
        Always cooperate (critical for threshold)
    Else if cooperation_trend is improving:
        Cooperate with probability 0.6
    Else:
        Defect
```

### Prediction Mechanism

**Predict Cooperators for Current Round:**
- Use weighted average of recent cooperation rates
- Give more weight to recent rounds (exponential decay)
- `predicted_cooperators = sum(cooperators_in_round_t * weight_t) * n`
- Where `weight_t = 0.7^(current_round - t)` for recent history

### Adaptive Components

**1. Threshold Adjustment**
- If group consistently exceeds threshold by large margin: increase T by 1
- If group frequently fails threshold: decrease T by 1 (minimum = m)
- Adjust every 3-5 rounds based on performance

**2. Cooperation Trend Analysis**
- Track whether cooperation is increasing, stable, or decreasing
- `trend = (cooperation_rate_last_3_rounds - cooperation_rate_previous_3_rounds)`
- Positive trend encourages more cooperation

**3. Exploitation Protection**
- If personal cooperation rate > group average + 0.2 for 3+ consecutive rounds:
  - Temporarily reduce cooperation probability by 0.3
  - Reset after group behavior improves

### Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and gather initial information

**Final Round:**
- Strategic defection if threshold likely to be met without our cooperation
- Otherwise cooperate to ensure group success

**Low Participation Scenarios:**
- If cooperation rate falls below 30% for 3+ rounds, switch to "conditional cooperation"
- Only cooperate when predicted cooperators >= m-1

**High Participation Scenarios:**
- If cooperation rate above 80% for 3+ rounds, occasionally defect (10% chance) to avoid being exploited

### Robustness Features

**1. Multi-Strategy Recognition:**
- Detect common opponent patterns (always defect, tit-for-tat, etc.)
- Adjust behavior accordingly while maintaining cooperative bias

**2. Recovery Mechanism:**
- After periods of low cooperation, gradually increase cooperation rate to test if group dynamics have improved

**3. Endgame Awareness:**
- In final 20% of rounds, balance between maintaining cooperation and strategic positioning

### Cooperative Alignment

This strategy maintains a cooperative mindset by:
- Starting cooperatively to establish positive intentions
- Prioritizing threshold achievement over individual payoffs
- Adapting to help struggling groups reach minimum cooperation levels
- Only engaging in strategic defection when it doesn't harm group outcomes
- Maintaining higher cooperation rates than pure rational choice would suggest

The strategy is designed to be a "smart cooperator" that contributes to collective success while avoiding excessive exploitation, adapting its behavior based on the specific group dynamics it encounters while maintaining an overall cooperative orientation.
'''

description_COOPERATIVE_100 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive pragmatism. It aims to foster cooperation while protecting against exploitation, using the game's threshold structure to make intelligent decisions based on observable patterns.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Threshold Response

**Step 1: Calculate Cooperation Rate**
- Track the number of cooperators in the previous round: `prev_cooperators`
- Calculate recent cooperation rate over the last min(3, current_round-1) rounds

**Step 2: Threshold Analysis**
- If `prev_cooperators >= m`: The threshold was met → **Cooperate**
- If `prev_cooperators == m-1`: We're one cooperator short → **Cooperate** (be the bridge)
- If `prev_cooperators < m-1`: Analyze further

**Step 3: Trend-Based Decision (when threshold not close)**
- Calculate cooperation trend over last 3 rounds (or all available rounds if fewer)
- If cooperation is increasing or stable above 40% of players → **Cooperate**
- If cooperation is declining rapidly (dropped by >25% in last 2 rounds) → **Defect**
- If cooperation rate is very low (<20% of players) for 2+ consecutive rounds → **Defect**

### Final Round: Strategic Finish
**Cooperate if and only if:**
- Previous round had `prev_cooperators >= m-2`, OR
- The overall cooperation rate across all previous rounds is ≥ 50%

Otherwise **Defect** (since there's no future retaliation concern).

## Key Features

### 1. Threshold Sensitivity
The strategy recognizes that being the marginal cooperator (when we're at m-1) is often worthwhile, as the collective benefit k typically exceeds the individual cost.

### 2. Forgiveness with Memory
- Gives communities a chance to recover from bad rounds
- But remembers sustained non-cooperation and adapts accordingly
- Uses 3-round windows to balance responsiveness with stability

### 3. Anti-Exploitation Protection
- Won't continue cooperating indefinitely if others consistently defect
- Uses the 20% threshold as a "futility cutoff" - below this, cooperation is likely wasted

### 4. Momentum Recognition
- Rewards improving cooperation trends even if absolute levels are low
- Recognizes that cooperation can build momentum over time

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    prev_cooperators = count_cooperators(history[round-1])
    
    if round == r:  // Final round
        if prev_cooperators >= m-2 OR overall_coop_rate(history) >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    // Main rounds (2 to r-1)
    if prev_cooperators >= m:
        return COOPERATE  // Threshold met, maintain
    
    if prev_cooperators == m-1:
        return COOPERATE  // Be the bridge cooperator
    
    // Analyze trends when threshold not close
    recent_coop_rate = calculate_recent_rate(history, min(3, round-1))
    trend = calculate_trend(history, min(3, round-1))
    
    if trend >= 0 AND recent_coop_rate > 0.4:
        return COOPERATE
    
    if recent_coop_rate < 0.2 AND sustained_low_cooperation(history, 2):
        return DEFECT
    
    if rapid_decline(history):
        return DEFECT
    
    return COOPERATE  // Default to cooperation when uncertain
```

## Robustness Properties

1. **Against Always Defect**: Quickly adapts after 2-3 rounds of low cooperation
2. **Against Tit-for-Tat variants**: Maintains cooperation when others do
3. **Against Random strategies**: Uses trend analysis to find patterns
4. **Against Conditional Cooperators**: Aligns well by maintaining threshold focus
5. **Against Exploitative strategies**: Protected by the futility cutoff and final round logic

This strategy should perform well in diverse environments while maintaining a fundamentally cooperative stance that benefits the collective when possible.
'''

description_COOPERATIVE_101 = '''
## Adaptive Threshold-Based Cooperation Strategy (ATCS)

### Core Philosophy
This strategy balances cooperative intent with adaptive self-protection. It starts cooperatively, monitors collective behavior patterns, and dynamically adjusts cooperation levels based on observed group dynamics while maintaining a baseline commitment to cooperation.

### Decision Rules

#### 1. Initial Cooperation Phase (Rounds 1-3 or first 20% of game)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating for the first `max(3, r/5)` rounds to establish baseline cooperative behavior and gather information about opponent strategies

#### 2. Adaptive Cooperation Phase (Middle rounds)
The strategy uses three key metrics:

**A. Cooperation Rate Tracking:**
- Track the average cooperation rate over the last `min(5, r/3)` rounds
- If cooperation rate ≥ (m/n) + 0.1, maintain high cooperation probability
- If cooperation rate < (m/n) - 0.1, reduce cooperation probability

**B. Threshold Achievement Analysis:**
- Monitor how often the threshold m is met in recent rounds
- Calculate "success rate" = (rounds where ≥m cooperated) / (recent rounds analyzed)
- If success rate > 0.7, cooperate with probability 0.8-0.9
- If success rate 0.4-0.7, cooperate with probability 0.6-0.8
- If success rate < 0.4, cooperate with probability 0.3-0.5

**C. Personal Contribution Impact:**
- Estimate if your cooperation is likely to be pivotal
- If recent cooperation count is typically m-2 or m-1, increase cooperation probability (you're often decisive)
- If recent cooperation count is much higher than m, slightly reduce cooperation probability

#### 3. Endgame Adaptation (Last 10% of rounds)
- If group has maintained good cooperation (success rate > 0.6): Continue cooperating
- If group cooperation has been poor: Switch to "conditional cooperation" - only cooperate if you cooperated in the previous round AND the threshold was met
- In the final round: Defect only if success rate < 0.3 throughout the game

### Specific Decision Algorithm

```pseudocode
function decide_action(round_number, history):
    // Phase 1: Initial cooperation
    if round_number <= max(3, r/5):
        return COOPERATE
    
    // Calculate recent metrics
    recent_rounds = min(5, round_number-1)
    recent_cooperation_rate = count_cooperators_in_last_n_rounds(recent_rounds) / (n * recent_rounds)
    recent_success_rate = count_successful_rounds_in_last_n(recent_rounds) / recent_rounds
    
    // Base cooperation probability
    base_prob = 0.7
    
    // Adjust based on group cooperation level
    if recent_cooperation_rate >= (m/n) + 0.1:
        base_prob += 0.15
    elif recent_cooperation_rate < (m/n) - 0.1:
        base_prob -= 0.25
    
    // Adjust based on threshold achievement
    if recent_success_rate > 0.7:
        base_prob += 0.1
    elif recent_success_rate < 0.4:
        base_prob -= 0.2
    
    // Pivotal player bonus
    avg_recent_cooperators = recent_cooperation_rate * n
    if m-2 <= avg_recent_cooperators <= m+1:
        base_prob += 0.15  // You're often pivotal
    
    // Endgame adjustment
    if round_number > r * 0.9:
        if recent_success_rate < 0.3:
            base_prob -= 0.3
        else:
            base_prob += 0.1  // Final cooperative push
    
    // Ensure probability bounds
    cooperation_probability = max(0.1, min(0.95, base_prob))
    
    return COOPERATE if random() < cooperation_probability else DEFECT
```

### Edge Case Handling

1. **Very small groups (n ≤ 4)**: Increase base cooperation probability by 0.1 since individual actions have higher impact

2. **High threshold ratio (m/n > 0.7)**: Increase base cooperation probability by 0.15 since cooperation is more critical

3. **Short games (r ≤ 5)**: Cooperate in first 2 rounds, then use simplified version focusing only on immediate previous round

4. **Low reward factor (k < 1.5)**: Reduce base cooperation probability by 0.1 since individual incentives are weaker

### Robustness Features

- **Never fully defects**: Always maintains at least 10% cooperation probability to avoid complete breakdown
- **Recovers from failures**: If cooperation collapses but then improves, the strategy can increase cooperation again
- **Handles noise**: Uses multi-round averages rather than single-round reactions
- **Exploits coordination**: Higher cooperation when the group shows coordinated behavior
- **Prevents exploitation**: Reduces cooperation when consistently taken advantage of

This strategy is designed to foster cooperation while protecting against systematic defection, adapting to various opponent behaviors while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_102 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive realism. It starts optimistically but learns from group behavior to maintain sustainable cooperation while protecting against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
**Always cooperate** in round 1 to signal cooperative intent and gather information about the group's disposition.

### 2. Adaptive Threshold System
Maintain a **cooperation threshold** that adapts based on observed group behavior:

- **Initial threshold**: Start at `m` (the minimum required cooperators)
- **Threshold adjustment**: After each round, update based on cooperation success rate

```
cooperation_rate = (cooperators in last round) / n
if cooperation_rate >= (m/n):
    threshold = max(m, threshold - 0.5)  # Become more trusting
else:
    threshold = min(n-1, threshold + 1)  # Become more cautious
```

### 3. Core Decision Logic
For rounds 2 through r-1:

**Cooperate if ANY of these conditions are met:**
1. **Sufficient recent cooperation**: At least `threshold` players cooperated in the previous round
2. **Positive trend**: Cooperation increased in the last round compared to the round before
3. **Near-threshold situations**: Exactly `m-1` players cooperated last round (one more needed)
4. **Recovery opportunity**: Group failed threshold by only 1 cooperator in previous round

**Defect otherwise** to avoid consistent exploitation.

### 4. Final Round Handling (Round r)
The last round requires special consideration since there's no future reciprocity:

**Cooperate in final round if:**
- Average cooperation rate over all previous rounds ≥ `m/n`
- OR cooperation succeeded in at least 60% of previous rounds
- OR the group has shown consistent improvement in recent rounds

This rewards groups that have demonstrated genuine cooperative capacity.

### 5. Edge Case Handling

**Very small groups (n ≤ 4):**
- Be more forgiving - cooperate if cooperation rate ≥ 50% in recent rounds
- Adjust threshold more gradually (±0.25 instead of ±0.5)

**High threshold games (m > n/2):**
- Start with higher initial optimism
- Be more persistent in early rounds (cooperate for first 3 rounds regardless)

**Long games (r > 10):**
- Include a "forgiveness" mechanism: every 5 rounds, reset threshold toward `m` if it has become too high
- This prevents permanent pessimism from early bad experiences

## Key Features

### Adaptivity
- Learns from group behavior patterns
- Adjusts expectations based on observed cooperation rates
- Responds to both short-term actions and long-term trends

### Robustness
- Protects against consistent defectors through threshold adjustment
- Rewards improvement and near-success situations
- Maintains hope for cooperation recovery

### Cooperation-Oriented
- Always starts cooperatively
- Gives benefit of doubt in borderline situations
- Rewards groups that demonstrate cooperative capacity
- Includes forgiveness mechanisms to prevent permanent pessimism

## Strategic Rationale

This strategy recognizes that pure tit-for-tat or unconditional cooperation both have weaknesses in collective action problems. Instead, it:

1. **Signals cooperation** while gathering intelligence
2. **Adapts to group norms** rather than imposing rigid rules
3. **Maintains cooperation incentives** by rewarding good group behavior
4. **Protects against exploitation** through adaptive thresholds
5. **Enables recovery** from temporary cooperation breakdowns

The strategy should perform well against a diverse range of opponents, from pure cooperators to conditional cooperators to even some defector types, while maintaining the cooperative spirit essential for achieving the collective benefit.
'''

description_COOPERATIVE_103 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness, aiming to establish and maintain cooperation while protecting against systematic exploitation. It recognizes that successful cooperation requires both initial trust-building and dynamic adjustment to group behavior.

## Decision Rules

### Phase 1: Trust Building (First ⌈r/4⌉ rounds)
- **Always cooperate** to signal cooperative intent and help establish a foundation for group cooperation
- This demonstrates commitment to the collective good and gives other cooperative players time to recognize and reciprocate

### Phase 2: Adaptive Cooperation (Remaining rounds)
Use a **dynamic cooperation threshold** that adjusts based on observed group behavior:

1. **Calculate recent cooperation rate**: 
   - Track cooperation rate over the last min(5, current_round) rounds
   - Let `recent_coop_rate = (cooperators in recent rounds) / (n × recent rounds observed)`

2. **Determine cooperation threshold**:
   ```pseudocode
   base_threshold = m/n  // minimum cooperation rate needed for collective benefit
   
   if recent_coop_rate >= base_threshold + 0.1:
       cooperation_threshold = base_threshold - 0.1  // Be generous when others cooperate well
   elif recent_coop_rate >= base_threshold:
       cooperation_threshold = base_threshold        // Match the minimum needed
   else:
       cooperation_threshold = recent_coop_rate + 0.2  // Try to lift group cooperation
   ```

3. **Cooperation decision**:
   - **Cooperate** if `recent_coop_rate >= cooperation_threshold`
   - **Defect** otherwise

### Phase 3: Final Round Considerations
- If it's the final round AND the group has consistently met the threshold (≥80% of recent rounds), **cooperate** as a gesture of good faith
- Otherwise, apply Phase 2 rules

## Edge Case Handling

### First Round
- Always **cooperate** to signal cooperative intent

### When m = n-1 (Almost unanimous cooperation needed)
- Be more forgiving: reduce all thresholds by 0.1 to account for the difficulty of achieving near-consensus

### When recent_coop_rate is exactly at critical boundaries
- Apply a "benefit of the doubt" rule: if exactly at threshold, **cooperate**

### When group cooperation is consistently very low (< 0.3 for 3+ consecutive rounds)
- Switch to "revival mode": **cooperate** for 2 consecutive rounds to attempt to restart group cooperation
- If no improvement after revival attempt, return to normal Phase 2 rules

## Robustness Features

1. **Anti-exploitation protection**: Won't cooperate indefinitely if others consistently defect
2. **Cooperation encouragement**: Provides opportunities for group cooperation to emerge even after initial failures
3. **Adaptive thresholds**: Adjusts expectations based on group behavior patterns
4. **Memory balance**: Uses recent history (5 rounds) rather than all history to allow for strategy changes by opponents

## Strategic Rationale

This strategy is designed to:
- **Establish cooperation early** through consistent initial cooperation
- **Maintain cooperation** when the group is performing well by being slightly generous
- **Encourage cooperation recovery** when the group is struggling by occasionally "investing" in cooperation
- **Avoid exploitation** by adapting to consistently uncooperative environments
- **Signal clearly** that cooperation is rewarded and defection leads to reduced cooperation

The strategy recognizes that in a collective risk dilemma, mutual cooperation is the globally optimal outcome, but requires balancing trust with prudent self-protection against systematic free-riders.
'''

description_COOPERATIVE_104 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Strategy: "Progressive Trust Builder"

My strategy balances cooperation with protection against exploitation by adapting based on observed group behavior and maintaining hope for collective success throughout the game.

## Decision Rules

### 1. First Round Behavior
**Always cooperate in round 1** to signal willingness to work together and gather information about the group's cooperative tendencies.

### 2. Main Decision Logic (Rounds 2 to r-1)

**Cooperate if ANY of the following conditions are met:**

#### A. Trust Threshold Met
- If in the previous round, at least `max(1, m-2)` players cooperated
- This creates a "trust buffer" - we don't need the full threshold to maintain optimism

#### B. Collective Success History
- If the group has achieved the threshold (≥m cooperators) in at least 30% of previous rounds
- This rewards groups that show periodic success

#### C. Recent Positive Trend
- If cooperation count increased from round t-2 to round t-1, OR
- If we're within 2 rounds of the last successful threshold achievement

#### D. Strategic Forgiveness
- If we've defected for 2 consecutive rounds, cooperate to give the group another chance
- This prevents permanent breakdown and maintains hope

### 3. Last Round Behavior
**Special last-round logic:**
- If the group achieved threshold in the previous round: **Cooperate** (reward recent success)
- If we're close to success (cooperators in previous round ≥ m-1): **Cooperate** (final push)
- Otherwise: **Defect** (protect against last-round defection cascade)

## Key Features

### Adaptive Elements
- **Dynamic trust adjustment**: Lower trust requirements when group shows any cooperative signals
- **Historical learning**: Weighs recent performance over early rounds
- **Trend recognition**: Responds positively to improving cooperation patterns

### Robustness Mechanisms
- **Protection against exploitation**: Won't cooperate indefinitely if consistently exploited
- **Recovery capability**: Built-in forgiveness prevents permanent punishment cycles
- **Last-round protection**: Guards against end-game defection while still rewarding recent cooperation

### Cooperative Mindset
- **Generous initial trust**: Starts cooperating to enable group success
- **Multiple cooperation triggers**: Many pathways to cooperation, fewer to defection
- **Hope maintenance**: Periodic "olive branch" offerings even after setbacks
- **Success reinforcement**: Strongly rewards any group achievement

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    prev_cooperators = count_cooperators(history[round-1])
    
    # Last round special handling
    if round == r:
        if prev_cooperators >= m:
            return COOPERATE  # Reward recent success
        if prev_cooperators >= m-1:
            return COOPERATE  # Final push for success
        return DEFECT  # Protect against last-round defection
    
    # Main decision logic - cooperate if ANY condition is true:
    
    # A. Trust threshold
    if prev_cooperators >= max(1, m-2):
        return COOPERATE
    
    # B. Historical success rate
    success_rate = calculate_success_rate(history, m)
    if success_rate >= 0.3:
        return COOPERATE
    
    # C. Recent positive trend
    if round >= 3:
        prev_prev_cooperators = count_cooperators(history[round-2])
        if prev_cooperators > prev_prev_cooperators:
            return COOPERATE
    
    # Check recent success
    if rounds_since_last_success(history, m) <= 2:
        return COOPERATE
    
    # D. Strategic forgiveness
    my_recent_actions = get_my_last_actions(history, 2)
    if count_defections(my_recent_actions) >= 2:
        return COOPERATE
    
    # Default: defect if no cooperation triggers are met
    return DEFECT
```

This strategy maintains a fundamentally cooperative stance while protecting against systematic exploitation, adapts to group dynamics, and provides multiple pathways for rebuilding cooperation when it breaks down.
'''

description_COOPERATIVE_105 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive responsiveness to maintain group cooperation while protecting against systematic exploitation. It operates on the principle of "conditional cooperation with forgiveness" - starting cooperatively but adjusting based on collective behavior patterns.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the group is clearly non-cooperative (fewer than max(1, m-2) cooperators in previous round)

### Main Strategy (Rounds 4 to r-2)
Use a **dynamic threshold system** based on recent cooperation history:

1. **Calculate recent cooperation rate**: 
   - Track cooperators in the last min(3, current_round-1) rounds
   - Recent_coop_rate = (total cooperators in recent rounds) / (n × recent rounds)

2. **Adaptive cooperation decision**:
   ```
   IF recent_coop_rate ≥ (m-0.5)/n:
       Cooperate (group is near/above threshold)
   ELSE IF recent_coop_rate ≥ (m-1.5)/n AND my_recent_cooperation_rate ≤ 0.7:
       Cooperate (give group another chance, but not if I've been over-cooperating)
   ELSE:
       Defect (group is consistently under-performing)
   ```

3. **Forgiveness mechanism**: 
   - If I've defected for 2+ consecutive rounds and recent cooperation shows improvement (increase ≥ 0.2 in cooperation rate), return to cooperation

### End Game Strategy (Last 2 rounds: r-1, r)
- **Round r-1**: Cooperate if the group achieved threshold in ≥ 50% of rounds 4 through r-2
- **Final round r**: 
  - Cooperate if we achieved threshold in round r-1
  - Otherwise, cooperate only if my cooperation could realistically trigger others to cooperate (i.e., if cooperation rate in r-1 was ≥ (m-2)/n)

## Edge Case Handling

### Small Groups (n ≤ 4)
- Be more forgiving: reduce defection thresholds by 0.1
- In final rounds, lean toward cooperation unless there's clear evidence of systematic defection

### High Threshold Games (m > n/2)
- Extend initial cooperation phase by 1 round
- Be more aggressive about returning to cooperation after defection periods

### Low Threshold Games (m ≤ n/3)
- Can afford to be slightly more demanding: increase cooperation thresholds by 0.1
- Focus on maintaining just above minimum threshold

### Very Short Games (r ≤ 5)
- Cooperate for first r-2 rounds
- Only defect in final rounds if group has never achieved threshold

## Cooperative Alignment Features

1. **Default to cooperation**: Strategy begins cooperatively and returns to cooperation when possible
2. **Threshold awareness**: Actively works to maintain the minimum cooperation needed for group success
3. **Forgiveness**: Doesn't permanently punish groups for temporary defection
4. **End-game cooperation**: Maintains cooperative stance even in final rounds when cooperation is most difficult
5. **Adaptive learning**: Responds to group dynamics without abandoning cooperative goals

## Pseudocode Summary
```
function decide_action(round, history, n, m, k, r):
    if round <= 3:
        return cooperate_early_game(round, history, m, n)
    elif round >= r-1:
        return cooperate_end_game(round, history, m, n, r)
    else:
        recent_coop_rate = calculate_recent_cooperation(history, n)
        threshold_met_rate = calculate_threshold_success(history, m)
        
        if recent_coop_rate >= (m-0.5)/n:
            return COOPERATE
        elif recent_coop_rate >= (m-1.5)/n and my_recent_coop_rate <= 0.7:
            return COOPERATE
        elif should_forgive(history, recent_coop_rate):
            return COOPERATE
        else:
            return DEFECT
```

This strategy maintains a cooperative orientation while adapting to group behavior, ensuring it contributes to collective success without being systematically exploited.
'''

description_COOPERATIVE_106 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with pragmatic adaptation, aiming to achieve the collective benefit while protecting against exploitation. It operates on the principle of "conditional cooperation with learning" - being willing to cooperate when there's sufficient evidence that others will reciprocate.

## Strategy Overview

The strategy maintains a **cooperation probability** for each round that adapts based on:
1. Historical cooperation rates of opponents
2. Distance from the cooperation threshold (m)
3. Remaining rounds in the game
4. Recent trend analysis

## Decision Rules

### Initial Cooperation Probability
```
Base cooperation probability = min(0.8, (m + 2) / n)
```
This ensures we start optimistically but realistically based on how many cooperators are needed.

### Round-by-Round Decision Process

1. **Calculate Historical Cooperation Rate:**
   ```
   historical_rate = total_cooperations_observed / (total_players × rounds_played)
   ```

2. **Trend Analysis (last 3 rounds):**
   ```
   recent_trend = (cooperations_last_3_rounds - cooperations_previous_3_rounds) / total_players
   ```

3. **Endgame Adjustment:**
   ```
   endgame_factor = max(0.5, (remaining_rounds / total_rounds))
   ```

4. **Adaptive Cooperation Probability:**
   ```
   cooperation_prob = base_prob × 
                     (0.3 + 0.7 × historical_rate) × 
                     (1 + 0.2 × recent_trend) × 
                     endgame_factor
   ```

5. **Threshold-Based Boost:**
   If in previous round exactly (m-1) players cooperated:
   ```
   cooperation_prob = min(1.0, cooperation_prob × 1.5)
   ```

## Specific Decision Rules

### First Round
- Always cooperate with probability = min(0.8, (m + 2) / n)
- This signals cooperative intent while being realistic about threshold requirements

### Early Rounds (rounds 2-4)
- Use base cooperation probability adjusted only by observed cooperation rate
- Be forgiving of defections as players may be testing strategies

### Middle Rounds
- Full adaptive formula applies
- React strongly to trends - increase cooperation if others are cooperating more
- Decrease cooperation if consistent under-threshold performance

### Last Round
- If historical cooperation rate > (m/n): Cooperate with probability 0.9
- If threshold was met in previous round: Cooperate with probability 0.95
- Otherwise: Cooperate with probability = historical_rate

## Edge Case Handling

### When m = n-1 (Almost everyone must cooperate)
- Increase base cooperation probability to 0.9
- Be more sensitive to defections - reduce cooperation probability faster

### When m = 2 (Low threshold)
- Use standard formula but add stability bonus:
- If threshold met in last round, cooperation_prob += 0.1

### When k is very high (k > 3)
- Increase base cooperation probability by factor of min(1.5, k/2)
- Be more persistent in cooperation attempts

### When facing consistent defectors
- If cooperation rate < 0.3 for 3+ consecutive rounds:
  - Switch to "conditional cooperation": only cooperate if (m-1) cooperated last round

## Robustness Features

1. **Anti-Exploitation Protection:**
   - Never cooperate with probability > 0.95 to avoid being systematically exploited
   - If personal cooperation rate > 0.8 but group threshold rarely met, reduce cooperation probability by 0.2

2. **Recovery Mechanism:**
   - If threshold hasn't been met for 3+ rounds, temporarily boost cooperation probability by 0.3 to attempt coordination

3. **Noise Tolerance:**
   - Use rolling averages rather than single-round reactions
   - Weight recent rounds more heavily but don't ignore long-term patterns

## Pseudocode Summary

```
function decide_action(round, history, parameters):
    if round == 1:
        return cooperate_with_probability(min(0.8, (m + 2) / n))
    
    historical_rate = calculate_historical_cooperation_rate(history)
    recent_trend = calculate_recent_trend(history)
    endgame_factor = max(0.5, remaining_rounds / total_rounds)
    
    cooperation_prob = base_prob × 
                      (0.3 + 0.7 × historical_rate) × 
                      (1 + 0.2 × recent_trend) × 
                      endgame_factor
    
    # Apply special adjustments
    cooperation_prob = apply_threshold_boost(cooperation_prob, history)
    cooperation_prob = apply_anti_exploitation(cooperation_prob, history)
    cooperation_prob = apply_recovery_mechanism(cooperation_prob, history)
    
    return cooperate_with_probability(min(0.95, cooperation_prob))
```

This strategy is designed to be cooperative by default, adaptive to opponent behavior, robust against various exploitation attempts, and capable of helping establish cooperation even when starting from suboptimal positions.
'''

description_COOPERATIVE_107 = '''
# Adaptive Threshold Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive risk management. It aims to establish and maintain cooperation while protecting against exploitation through dynamic threshold adjustment based on observed group behavior.

## Strategy Overview

### Initial Approach
- **Round 1**: Always cooperate (C) to signal cooperative intent
- **Rounds 2-3**: Continue cooperating to establish a cooperative baseline and gather behavioral data

### Decision Framework

The strategy uses three key components:

1. **Cooperation Likelihood Estimator**: Tracks the probability that the threshold m will be met
2. **Adaptive Threshold**: Adjusts cooperation based on group reliability
3. **Endgame Handler**: Special logic for final rounds

## Detailed Decision Rules

### Core Decision Logic (Rounds 4 to r-2):

```pseudocode
cooperation_rate = (total_cooperators_observed) / (total_possible_cooperations)
expected_cooperators = cooperation_rate * (n-1)  // excluding self

// Dynamic threshold based on group reliability
if cooperation_rate >= 0.7:
    reliability_threshold = m - 1  // High trust
elif cooperation_rate >= 0.4:
    reliability_threshold = m      // Medium trust  
else:
    reliability_threshold = m + 1  // Low trust, need buffer

// Decision rule
if expected_cooperators >= reliability_threshold:
    play C
else:
    play D
```

### Momentum Factor
To encourage cooperative cascades, add momentum consideration:

```pseudocode
recent_cooperation_trend = cooperation_rate_last_3_rounds - overall_cooperation_rate

if recent_cooperation_trend > 0.1:  // Cooperation increasing
    reliability_threshold -= 0.5
elif recent_cooperation_trend < -0.1:  // Cooperation decreasing
    reliability_threshold += 0.5
```

### Endgame Handling (Rounds r-1 and r):

**Second-to-last round (r-1)**:
- If historical cooperation rate > 0.5: Cooperate
- Otherwise: Defect (prepare for likely defection cascade)

**Final round (r)**:
- If cooperation rate in round (r-1) ≥ m/n: Cooperate
- Otherwise: Defect

## Edge Case Management

### Small Groups (n ≤ 4):
- Increase initial cooperation period to 40% of total rounds
- Use more conservative thresholds (cooperation_rate ≥ 0.6 for high trust)

### High Threshold Scenarios (m > n/2):
- Cooperate if expected_cooperators ≥ m-2 (more aggressive cooperation needed)
- Weight recent rounds more heavily (last 25% of observed history counts double)

### Low Reward Scenarios (k < 1.5):
- Increase reliability_threshold by 1 in all trust categories
- Require stronger evidence of group cooperation before participating

## Key Strategic Features

### 1. **Graduated Trust System**
The strategy doesn't treat all players equally but builds trust incrementally based on observed behavior patterns.

### 2. **Risk-Adjusted Cooperation**
Rather than simple tit-for-tat, it considers the probability of threshold achievement and adjusts accordingly.

### 3. **Momentum Recognition**
Detects when groups are moving toward or away from cooperation and adjusts to either support positive trends or protect against negative ones.

### 4. **Parameter Sensitivity**
Adapts decision thresholds based on game parameters (n, m, k) to remain effective across different scenarios.

## Robustness Features

- **Anti-Exploitation**: Won't cooperate if consistent defection is observed
- **Pro-Social Activation**: Actively tries to establish cooperation in early rounds
- **Adaptive Learning**: Updates strategy based on group behavior patterns
- **Endgame Protection**: Recognizes that final rounds change incentives

## Cooperative Alignment

This strategy maintains a cooperative orientation by:
- Always starting with cooperation to signal positive intent
- Giving groups the benefit of the doubt in early rounds
- Lowering cooperation thresholds when positive trends emerge
- Only defecting when evidence strongly suggests cooperation won't succeed

The strategy aims to be "conditionally cooperative" - eager to cooperate when conditions support mutual benefit, but protective when they don't.
'''

description_COOPERATIVE_108 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adjusting based on observed group behavior.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3 or first 30% of rounds, whichever is smaller)
- **Always cooperate** to establish cooperative intent and gather information about other players
- This signals willingness to achieve the collective good while observing others' strategies

### 2. Adaptive Threshold Tracking
Maintain a running estimate of the "cooperation probability" of the group:
- Track the number of cooperators in each completed round
- Calculate moving average of cooperation rate over the last min(5, current_round) rounds
- Estimate probability that threshold m will be met based on this trend

### 3. Main Decision Logic (After initial phase)

**Cooperate if ANY of the following conditions are met:**

**A. Threshold Likely to be Met:**
- If estimated cooperation probability suggests ≥ m cooperators likely
- Use formula: `expected_cooperators = cooperation_rate × (n-1) + 1` (assuming I cooperate)
- If `expected_cooperators ≥ m`, then cooperate

**B. Reciprocity Trigger:**
- If at least 60% of other players cooperated in the previous round, cooperate
- This rewards and reinforces cooperative behavior

**C. Recovery Attempt:**
- If the threshold was missed in the last round by only 1-2 players, cooperate
- This attempts to nudge the group back toward the threshold

**D. Last Resort Cooperation:**
- In the final 20% of rounds, if group cooperation rate > 40%, cooperate
- This prevents end-game defection cascades when stakes are highest

### 4. Defection Conditions
**Defect if ALL cooperation conditions above are false AND:**
- Group cooperation rate has been consistently below (m/n - 0.1) for 3+ consecutive rounds
- This protects against persistent free-riders while maintaining cooperative opportunities

### 5. Edge Case Handling

**First Round:**
- Always cooperate (exploration and signaling)

**Last Round:**
- Cooperate if group has been meeting threshold in >50% of recent rounds
- Otherwise, apply main decision logic

**Very Small Games (n ≤ 4):**
- Be more generous with cooperation (reduce threshold requirements by 10%)
- Individual contributions have higher impact

**High Threshold Games (m/n > 0.7):**
- Extend initial cooperation phase by 1-2 rounds
- Increase willingness to attempt recovery cooperation

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round <= min(3, ceil(0.3 * r)):
        return COOPERATE  // Initial cooperation phase
    
    recent_rounds = min(5, round - 1)
    cooperation_rate = calculate_avg_cooperation_rate(history, recent_rounds)
    expected_cooperators = cooperation_rate * (n - 1) + 1
    
    // Check cooperation conditions
    if expected_cooperators >= m:
        return COOPERATE  // Threshold likely
    
    if last_round_cooperation_rate(history) >= 0.6:
        return COOPERATE  // Reciprocity
    
    if was_close_miss(history.last_round, m):
        return COOPERATE  // Recovery attempt
    
    if round >= 0.8 * r and cooperation_rate > 0.4:
        return COOPERATE  // End-game cooperation
    
    // Check defection conditions
    if consecutive_low_cooperation(history, 3, m/n - 0.1):
        return DEFECT  // Protect against free-riders
    
    // Default to cooperation (optimistic bias)
    return COOPERATE
```

## Key Strategic Features

1. **Adaptive Learning:** Continuously updates expectations based on observed behavior
2. **Conditional Cooperation:** Cooperates when threshold achievement is likely
3. **Forgiveness:** Attempts recovery after near-misses
4. **Protection:** Defects against persistent exploitation
5. **End-game Stability:** Maintains cooperation in final rounds when possible
6. **Parameter Sensitivity:** Adjusts behavior based on game difficulty (m/n ratio)

This strategy aims to maximize collective welfare while remaining robust against various opponent strategies, from pure cooperators to sophisticated conditional strategies to persistent defectors.
'''

description_COOPERATIVE_109 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Guardian"** that balances cooperation with strategic resilience.

## Strategy Overview

The core philosophy is to be a reliable cooperator while intelligently adapting to group dynamics. The strategy maintains cooperation when possible but protects against exploitation by tracking collective behavior patterns.

## Decision Rules

### Phase 1: Establishment (First 20% of rounds)
- **Always cooperate** to signal cooperative intent and help establish a cooperative norm
- Use this phase to gather intelligence about other players' tendencies

### Phase 2: Adaptive Cooperation (Remaining rounds)
- Maintain a **cooperation threshold** based on recent group performance
- Cooperate when conditions suggest success is likely
- Defect strategically when cooperation appears futile

### Cooperation Decision Logic

```pseudocode
if current_round <= r * 0.2:
    return COOPERATE
    
recent_success_rate = calculate_recent_success_rate(last_5_rounds)
current_cooperator_trend = estimate_likely_cooperators()

cooperation_threshold = max(0.6, recent_success_rate * 0.8)

if current_cooperator_trend >= cooperation_threshold:
    return COOPERATE
else:
    # Strategic defection with cooperation bias
    if recent_success_rate > 0.4 AND rounds_remaining > 3:
        return COOPERATE  # Give benefit of doubt
    else:
        return DEFECT
```

### Key Components

**1. Recent Success Rate Calculation**
- Track whether threshold m was met in recent rounds (last 5 rounds or available history)
- Weight more recent rounds higher
- Success rate = (successful rounds) / (total recent rounds)

**2. Likely Cooperators Estimation**
- Identify players who cooperated in 70%+ of recent rounds
- Count consistent cooperators as likely to cooperate again
- Add probabilistic estimate for irregular players based on their recent patterns

**3. Cooperation Threshold**
- Minimum 60% confidence needed to cooperate (except in establishment phase)
- Adapts based on group's recent success rate
- If group consistently succeeds, lower the bar for cooperation

## Edge Cases

### First Round
- Always cooperate (part of establishment phase)
- No history to analyze, so default to cooperative signal

### Last Round
- If recent success rate > 50%: Cooperate
- Otherwise: Defect (no future rounds to build reputation)

### When m = n-1 (almost everyone must cooperate)
- Be extra cautious - only cooperate if 90%+ of players showed consistent cooperation recently
- One defector ruins it for everyone

### When m is very low (≤ 25% of players)
- More willing to cooperate since threshold is easily met
- Focus on maintaining the cooperative coalition

### Consecutive Failures
- After 3+ consecutive failed rounds: Temporarily raise cooperation threshold by 0.2
- Signals that group dynamics may have shifted

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial Trust**: Always cooperates early to establish good faith
2. **Forgiveness**: Doesn't permanently punish - continuously reassesses based on recent behavior  
3. **Optimism Bias**: When uncertain, leans toward cooperation if there are future rounds to recover
4. **Collective Focus**: Aims to maintain successful group outcomes rather than maximize individual advantage
5. **Transparency**: Uses clear, predictable logic that other cooperative players can recognize and coordinate with

## Robustness Features

- **Adapts to group size**: Cooperation threshold scales with the difficulty of meeting m
- **Handles mixed populations**: Can cooperate with other cooperators while protecting against pure defectors
- **Prevents exploitation**: Won't cooperate indefinitely with groups that consistently fail
- **Encourages cooperation**: Gives groups multiple chances to establish cooperative patterns

The strategy balances being a "good citizen" who contributes to collective welfare while being intelligent enough to avoid systematic exploitation, making it robust across diverse opponent behaviors while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_110 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to establish and maintain cooperation while being resilient to various opponent behaviors.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3 or first 20% of game)
- **Default Action**: Cooperate
- **Rationale**: Signal cooperative intent and test the cooperative climate
- **Exception**: If in round 2 or 3, fewer than ⌈m/2⌉ players cooperated in the previous round, switch to conditional cooperation mode early

### 2. Main Strategy: Adaptive Threshold Cooperation

#### Core Decision Rule:
```
Cooperate IF:
  (Cooperation_Momentum >= Threshold_Required) AND 
  (Risk_Assessment <= Acceptable_Risk) AND
  (Not in Punishment_Mode)
```

#### Key Components:

**A) Cooperation Momentum Calculation:**
- `Recent_Cooperation_Rate` = (Number who cooperated in last 2 rounds) / (2 × n)
- `Trend_Bonus` = +0.1 if cooperation increased last round, -0.1 if decreased
- `Cooperation_Momentum` = Recent_Cooperation_Rate + Trend_Bonus

**B) Dynamic Threshold:**
- Base threshold starts at 0.4
- Increases by 0.05 each time cooperation fails to reach m
- Decreases by 0.02 each time cooperation succeeds
- Bounded between 0.25 and 0.7

**C) Risk Assessment:**
```
Risk_Score = 0 (start each round)
If (rounds_remaining / total_rounds) < 0.2: Risk_Score += 0.3  // End-game risk
If last round had exactly (m-1) cooperators: Risk_Score += 0.2  // Near-miss risk  
If I've been "suckered" (cooperated when <m total) in last 3 rounds: Risk_Score += 0.4
```

### 3. Punishment and Forgiveness Mechanism

**Enter Punishment Mode when:**
- Cooperation rate drops below 20% for 2 consecutive rounds, OR
- I've been exploited (cooperated while <m others did) 3+ times in last 5 rounds

**Punishment Behavior:**
- Defect for 2 rounds
- Monitor if others start cooperating again
- Exit punishment if cooperation rate rises above 40%

### 4. End-Game Strategy (Last 15% of rounds)

**Conservative Cooperation:**
- Only cooperate if cooperation rate in last 3 rounds averaged ≥ 60%
- AND projected cooperators this round ≥ (m + 1)

**Final Round:**
- Defect (no future to incentivize cooperation)

### 5. Edge Case Handling

**Very Small Groups (n ≤ 4):**
- More forgiving thresholds (reduce by 0.15)
- Faster adaptation (update thresholds every round)

**High Threshold Games (m > n×0.6):**
- Start with higher cooperation momentum threshold (0.5)
- More patient with failed cooperation attempts

**Very Long Games (r > 20):**
- Implement "fresh start" mechanism: reset thresholds every r/4 rounds if stuck in defection cycle

## Pseudocode Summary

```python
def decide_action(round_num, history, game_params):
    n, r, m, k = game_params
    
    # Initial cooperation phase
    if round_num <= max(3, r * 0.2):
        if round_num == 1 or early_cooperation_detected(history):
            return COOPERATE
    
    # Calculate cooperation momentum
    momentum = calculate_cooperation_momentum(history, n)
    
    # Update dynamic threshold
    threshold = update_threshold(history, m)
    
    # Assess current risks
    risk = assess_risk(round_num, r, history, m)
    
    # Check punishment mode
    if in_punishment_mode(history):
        return handle_punishment(history)
    
    # End-game strategy
    if round_num > r * 0.85:
        return end_game_strategy(history, m, n)
    
    # Main decision
    if momentum >= threshold and risk <= 0.5:
        return COOPERATE
    else:
        return DEFECT
```

## Key Strengths

1. **Adaptive**: Learns from opponent behavior and adjusts expectations
2. **Robust**: Handles various scenarios (end-game, punishment, recovery)
3. **Cooperative**: Defaults to cooperation and actively tries to establish it
4. **Protected**: Avoids exploitation while remaining open to cooperation
5. **Context-Aware**: Considers game parameters and remaining rounds

This strategy should perform well against both cooperative and mixed populations while avoiding exploitation by purely selfish strategies.
'''

description_COOPERATIVE_111 = '''
# Adaptive Threshold-Aware Cooperative Strategy (ATACS)

## Core Philosophy
This strategy balances cooperative intention with adaptive learning, aiming to achieve the collective benefit while protecting against exploitation. It dynamically adjusts cooperation based on observed group behavior patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Cooperation

**Primary Decision Logic:**
1. **Calculate cooperation momentum** from the last 3 rounds (or all available rounds if fewer than 3):
   - `recent_coop_rate = (cooperators in recent rounds) / (n × recent_rounds)`
   
2. **Estimate threshold likelihood** based on recent cooperation:
   - `threshold_probability = recent_coop_rate × n / m`
   
3. **Apply cooperation decision rule:**
   ```
   IF threshold_probability ≥ 0.8:
       Cooperate (high confidence threshold will be met)
   ELSE IF threshold_probability ≥ 0.6:
       Cooperate if my cooperation history rate > 0.5
   ELSE IF threshold_probability ≥ 0.4:
       Cooperate if (cooperators_last_round ≥ m-2) AND (my_defection_streak < 2)
   ELSE:
       Defect (protect against likely threshold failure)
   ```

### Round r (Final Round): Strategic Endgame
- **Cooperate** if any of these conditions hold:
  - Cooperators in round (r-1) ≥ m-1 (threshold very likely)
  - My overall cooperation rate > 0.6 (maintain cooperative reputation)
  - Average cooperators per round so far ≥ m×0.8 (group shows cooperative tendency)
- **Otherwise defect** (no future rounds to build reputation)

## Adaptive Components

### 1. Exploitation Protection
- Track individual defection streaks
- If I've defected for 3+ consecutive rounds due to low threshold probability, attempt one "test cooperation" to see if group dynamics have changed

### 2. Forgiveness Mechanism
- After any round where threshold is met, reset negative assessments
- Give the group a "fresh chance" every 3-4 rounds regardless of recent performance

### 3. Threshold Proximity Sensitivity
- When cooperators in previous round = m-1, strongly favor cooperation (help achieve threshold)
- When cooperators in previous round = m+1 or higher, moderate cooperation (threshold likely safe)

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Increase cooperation threshold probabilities by 0.1 (smaller groups need more coordination)
- Be more forgiving of temporary defections

### High Threshold Games (m/n > 0.7)
- Start with 2 rounds of cooperation instead of 1
- Reduce required threshold_probability by 0.1 for cooperation decisions

### Short Games (r ≤ 3)
- Cooperate for first ⌊r/2⌋ + 1 rounds
- Only defect in final round if previous round had < m-2 cooperators

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if threshold consistently fails
2. **Recovery Capability**: Can restart cooperation if group behavior improves  
3. **Endgame Awareness**: Accounts for final-round defection incentives
4. **Parameter Sensitivity**: Adapts decision thresholds based on game parameters

## Cooperative Alignment

This strategy maintains cooperative spirit by:
- Leading with cooperation to signal good intentions
- Prioritizing threshold achievement over individual payoff maximization
- Giving groups multiple chances to coordinate
- Only defecting when cooperation appears futile
- Returning to cooperation when group shows renewed promise

The strategy assumes that achieving the threshold benefit (k) is typically better for everyone than the short-term gains from defection, and works to make that collective outcome more likely while avoiding systematic exploitation.
'''

description_COOPERATIVE_112 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "cooperative optimism with defensive learning."

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2 to min(3, r/4)**: Always cooperate to establish cooperative intent and gather initial data

### 2. Adaptive Threshold Calculation
After the initial phase, calculate a dynamic cooperation threshold based on observed behavior:

```pseudocode
cooperation_rate = (total_cooperators_observed) / (n * rounds_played)
cooperation_momentum = (cooperators_last_round - cooperators_previous_round) / n
trust_level = 0.7 * cooperation_rate + 0.3 * cooperation_momentum
```

### 3. Main Decision Logic
For each subsequent round:

```pseudocode
predicted_cooperators = max(1, min(n-1, round(trust_level * n)))

if predicted_cooperators >= m:
    cooperate()
else if predicted_cooperators >= m-1 AND my_cooperation_could_help():
    cooperate()  // Be the marginal cooperator
else if last_round_was_successful AND cooperation_rate > 0.3:
    cooperate()  // Maintain momentum
else:
    defect()
```

### 4. Forgiveness Mechanism
- If cooperation fails but ≥ (m-2) players cooperated, increase trust slightly
- Every 3-4 rounds, give cooperation another chance if trend is improving
- Never let trust_level drop below 0.1 (maintain minimal optimism)

### 5. Endgame Strategy
**Last Round**: 
- If previous rounds showed consistent cooperation (>60% success rate), cooperate
- Otherwise, defect to protect against last-round defection cascades

**Final 20% of rounds**:
- Gradually reduce cooperation threshold as defection incentives increase
- But maintain cooperation if the group has been highly successful (>80% threshold achievement)

## Edge Case Handling

### Small Groups (n ≤ 4)
- Be more forgiving and cooperative since each player's action is critical
- Cooperate if at least one other player cooperated in the previous round

### High Threshold Games (m > n/2)
- Start with extra cooperative rounds to build momentum
- Be more willing to be the marginal cooperator
- Focus heavily on cooperation_momentum signals

### Short Games (r ≤ 5)
- Cooperate for first r-1 rounds, then assess for final round
- Prioritize establishing cooperation over learning

### Long Games (r > 20)
- Implement "reset" mechanism: if cooperation fails for 5+ consecutive rounds, try full cooperation for 2 rounds
- Track long-term trends and adjust base cooperation rate accordingly

## Robustness Features

1. **Anti-Exploitation**: Never cooperate if <10% of other players cooperated in recent rounds
2. **Momentum Recognition**: Quickly increase cooperation when others are increasing theirs
3. **Graceful Degradation**: Gradually reduce cooperation rather than sudden strategy shifts
4. **Recovery Mechanism**: Periodically test cooperation even after failures

## Key Strategic Insights

- **Lead by Example**: Early cooperation signals intent and can establish norms
- **Marginal Thinking**: Often willing to be the decisive cooperator when close to threshold
- **Pattern Recognition**: Adapts to both short-term momentum and long-term trends
- **Protective Learning**: Reduces cooperation when facing persistent non-cooperation
- **Strategic Forgiveness**: Distinguishes between coordination failures and exploitation

This strategy aims to maximize collective welfare while remaining robust against various opponent behaviors, from pure defectors to erratic players to other cooperative strategies.
'''

description_COOPERATIVE_113 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "cooperative optimism with learned caution."

## Decision Rules

### Phase 1: Initial Cooperation (Rounds 1 to min(3, r/3))
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in early rounds (up to 3 rounds or first third of game) unless facing overwhelming defection

### Phase 2: Adaptive Learning (Middle rounds)
The strategy maintains several key metrics:
- `cooperation_rate`: Rolling average of cooperation by others over last 3 rounds
- `threshold_success_rate`: Percentage of recent rounds where threshold m was met
- `exploitation_risk`: Measure of how often I cooperated but others didn't reach threshold

**Decision Logic:**
```
If round <= min(3, r/3):
    return COOPERATE

If cooperation_rate >= (m-1)/(n-1):  // Others cooperating enough for me to make threshold
    return COOPERATE

If threshold_success_rate >= 0.6 AND exploitation_risk <= 0.4:
    return COOPERATE

If cooperation_rate >= 0.5 AND round <= 0.8*r:  // Give cooperation a chance mid-game
    return COOPERATE with probability max(0.7, cooperation_rate)

return DEFECT
```

### Phase 3: End-Game Strategy (Last 20% of rounds)
- If collective cooperation has been successful (threshold met >60% of recent rounds):
  - Continue cooperating to maintain successful pattern
- If facing consistent defection or exploitation:
  - Switch to defection but attempt one "olive branch" cooperation every 3-4 rounds
- Final round: Defect unless cooperation rate has been consistently high (>80%)

## Key Features

### Adaptive Threshold Tracking
- Continuously estimate others' cooperation likelihood
- Adjust cooperation probability based on observed patterns
- Give extra weight to recent rounds (exponential decay weighting)

### Exploitation Protection
- Track personal exploitation: rounds where I cooperated but threshold wasn't met
- Reduce cooperation probability if exploitation rate exceeds 40%
- Implement "cooling off" periods after being exploited

### Forgiveness Mechanism
- After periods of mutual defection, occasionally cooperate to test if others will reciprocate
- If others respond positively, gradually increase cooperation rate
- This prevents permanent defection spirals

## Edge Case Handling

### First Round
Always cooperate to establish cooperative intent and gather information about others' strategies.

### When m = n-1 (Almost everyone must cooperate)
Increase cooperation probability by 20% since my contribution is critical.

### When m = 2 (Low threshold)
Be more willing to cooperate since threshold is easily achievable.

### Very Short Games (r ≤ 3)
Cooperate in all but the final round, since there's insufficient time for learning.

### Very Long Games (r > 20)
Implement longer memory (5-round rolling averages) and be more patient with cooperation attempts.

## Robustness Features

### Against Always Defectors
- Quickly identify non-cooperative players
- Reduce own cooperation but maintain occasional "testing" cooperation
- Don't get locked into permanent defection

### Against Tit-for-Tat Style Strategies
- Recognize reciprocal patterns
- Maintain steady cooperation when others reciprocate
- Forgive occasional defections

### Against Random Strategies
- Focus on statistical patterns rather than trying to predict individual moves
- Maintain cooperation when group cooperation rate suggests threshold achievement is likely

### Against End-Game Defection
- Anticipate increased defection in final rounds
- Reduce cooperation in last 10% of rounds unless group has maintained high cooperation

## Cooperation Alignment

This strategy is fundamentally cooperative because it:
1. **Defaults to cooperation** in uncertain situations early in the game
2. **Seeks collective success** by cooperating when threshold achievement is likely
3. **Forgives and tests** for renewed cooperation even after exploitation
4. **Prioritizes group welfare** by considering threshold achievement probability over pure self-interest
5. **Maintains hope** through occasional cooperative "olive branches" even during defection phases

The strategy only defects defensively when facing clear exploitation or when cooperation attempts consistently fail, but always remains open to returning to cooperation when conditions improve.
'''

description_COOPERATIVE_114 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to maximize collective welfare while protecting against exploitation. It operates on the principle that cooperation should be maintained when feasible, but must adapt when the group consistently fails to meet the threshold.

## Decision Rules

### Initial Cooperation Phase (First Round)
**Always cooperate in round 1** to signal cooperative intent and gather information about other players' tendencies.

### Main Strategy Logic

```pseudocode
For round t (where t > 1):
  
  // Calculate cooperation metrics from history
  recent_cooperation_rate = cooperators_in_last_3_rounds / (3 * n)
  overall_cooperation_rate = total_cooperators_so_far / ((t-1) * n)
  threshold_success_rate = successful_rounds / (t-1)
  
  // Adaptive threshold calculation
  adaptive_threshold = m + max(0, ceil((n-m) * (0.5 - recent_cooperation_rate)))
  
  // Decision logic
  IF threshold_success_rate >= 0.6 THEN
    // High success rate: maintain cooperation
    cooperate = TRUE
    
  ELSE IF recent_cooperation_rate >= (m-1)/n THEN
    // Borderline cooperation: use probability based on trends
    trend_factor = (recent_cooperation_rate - overall_cooperation_rate)
    cooperation_probability = 0.7 + 0.3 * trend_factor
    cooperate = (random() < cooperation_probability)
    
  ELSE IF recent_cooperation_rate < (m-2)/n THEN
    // Low cooperation: defect but with forgiveness mechanism
    rounds_since_success = count_rounds_since_last_threshold_met()
    IF rounds_since_success >= 3 AND overall_cooperation_rate > 0.3 THEN
      // Forgiveness probe
      cooperate = TRUE
    ELSE
      cooperate = FALSE
    END IF
    
  ELSE
    // Default cooperative stance
    cooperate = TRUE
  END IF
```

### Last Round Handling
In the final round, apply a modified decision rule:
- If the group has achieved threshold success rate > 50%, cooperate
- If recent cooperation suggests threshold is achievable (cooperation rate ≥ (m-1)/n), cooperate
- Otherwise, defect to maximize final payoff

## Key Features

### 1. Adaptive Threshold Awareness
The strategy dynamically adjusts expectations based on group behavior, recognizing that in low-cooperation environments, even achieving m-1 cooperators might be the realistic maximum.

### 2. Multi-Timeframe Analysis
- **Recent behavior** (last 3 rounds): Captures current trends and momentum
- **Overall history**: Provides baseline understanding of group tendencies
- **Success rate tracking**: Focuses on the ultimate goal of threshold achievement

### 3. Forgiveness Mechanism
Even when cooperation drops low, the strategy periodically "probes" with cooperation to test if the group has learned or if conditions have changed, preventing permanent defection spirals.

### 4. Probabilistic Decisions
In uncertain situations, uses weighted randomness to avoid predictable patterns while maintaining cooperative bias.

### 5. Endgame Adaptation
Recognizes that final round dynamics differ and adjusts accordingly, balancing cooperation with self-interest.

## Edge Cases

### Very Small Groups (n ≤ 4)
- Increase cooperation probability by 0.1 in all decisions
- Reduce forgiveness threshold to 2 rounds

### High Threshold Requirements (m > 0.7n)
- Extend recent behavior window to 5 rounds for better trend detection
- Increase forgiveness probing frequency

### Single Defector Scenarios
If exactly one player consistently defects but others cooperate, maintain cooperation to achieve threshold while accepting the free-rider.

### Early Game Volatility
For rounds 2-4, add stability buffer: only change cooperation stance if the same decision would be made for 2 consecutive rounds.

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if consistently exploited
2. **Recovery Capability**: Can rebuild cooperation after defection phases
3. **Trend Sensitivity**: Responds to improving or deteriorating group behavior
4. **Parameter Independence**: Scales appropriately across different n, m, k values
5. **History Integration**: Uses full game history while emphasizing recent trends

This strategy aims to be a "conditional cooperator" that maintains cooperative intent while adapting intelligently to group dynamics, making it robust against both highly cooperative and highly competitive opponent strategies.
'''

description_COOPERATIVE_115 = '''
# Adaptive Threshold Strategy (ATS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective benefits while protecting against exploitation. It operates on the principle of "cautious optimism with experience-based adjustment."

## Decision Rules

### Round 1: Optimistic Start
**Always COOPERATE** in the first round to signal cooperative intent and gather initial information about the player pool.

### Subsequent Rounds: Adaptive Threshold System

The strategy maintains a **cooperation threshold** that determines when to cooperate based on recent cooperation levels observed in the game.

**Cooperation Decision:**
- COOPERATE if: `recent_cooperation_rate ≥ cooperation_threshold`
- DEFECT otherwise

### Threshold Calculation

The cooperation threshold is dynamically adjusted based on:

1. **Base Threshold:** `base_threshold = (m + 1) / n`
   - Slightly above the minimum needed, accounting for the fact that we need m-1 others if we cooperate

2. **Experience Adjustment:** 
   ```
   cooperation_threshold = base_threshold + experience_adjustment
   ```

3. **Experience Adjustment Calculation:**
   ```
   success_rate = successful_rounds / total_completed_rounds
   target_success_rate = 0.7  // Aim for 70% threshold achievement
   
   experience_adjustment = 0.2 * (target_success_rate - success_rate)
   ```
   - Bounded between -0.3 and +0.3 to prevent extreme swings

### Recent Cooperation Rate

Track cooperation over a **sliding window** of recent rounds:
- **Window size:** `min(5, completed_rounds)`
- **Recent cooperation rate:** `cooperating_players_in_window / (window_size * n)`

## Edge Cases

### Last Round Handling
- If `r` is known and it's the final round: **DEFECT**
- This prevents end-game exploitation while maintaining cooperation throughout most of the game

### Low Participation Scenarios
- If cooperation rate falls below `m/(2*n)` for 3 consecutive rounds: **Temporarily increase cooperation probability by 20%**
- This helps restart cooperation cycles when the group gets stuck in low-cooperation equilibria

### High Volatility Protection
- If the cooperation rate variance over the last 3 rounds exceeds 0.3: **Apply conservative adjustment**
- Use a higher threshold temporarily to avoid being exploited during chaotic periods

## Pseudocode

```python
def decide_action(round_num, history, n, m, r, k):
    # Round 1: Always cooperate
    if round_num == 1:
        return COOPERATE
    
    # Last round: Defect if r is known
    if round_num == r:
        return DEFECT
    
    # Calculate recent cooperation rate
    window_size = min(5, round_num - 1)
    recent_coop_rate = calculate_recent_cooperation_rate(history, window_size)
    
    # Calculate base threshold
    base_threshold = (m + 1) / n
    
    # Calculate experience adjustment
    success_rate = count_successful_rounds(history) / (round_num - 1)
    target_success_rate = 0.7
    experience_adjustment = 0.2 * (target_success_rate - success_rate)
    experience_adjustment = max(-0.3, min(0.3, experience_adjustment))
    
    # Apply special adjustments
    cooperation_threshold = base_threshold + experience_adjustment
    
    # Low participation boost
    if is_low_participation_scenario(history):
        cooperation_threshold -= 0.2
    
    # High volatility protection
    if is_high_volatility(history):
        cooperation_threshold += 0.1
    
    # Make decision
    if recent_coop_rate >= cooperation_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Key Strategic Features

1. **Adaptive Learning:** Adjusts expectations based on observed group behavior
2. **Forgiveness:** Uses sliding window to allow for recovery from defection spirals
3. **Protection:** Guards against both exploitation and chaos through threshold adjustments
4. **Restart Mechanism:** Helps break out of low-cooperation traps
5. **Endgame Awareness:** Prevents last-round exploitation while maintaining cooperation throughout the game

This strategy is designed to work well across diverse environments, from highly cooperative groups to mixed populations, while maintaining a fundamentally cooperative orientation that seeks to achieve collective benefits whenever reasonably possible.
'''

description_COOPERATIVE_116 = '''
# Adaptive Cooperative Strategy: "Threshold Guardian"

## Core Philosophy
This strategy aims to maintain cooperation while being resilient to exploitation. It recognizes that achieving the threshold `m` is the critical goal, and adapts its cooperation level based on observed group dynamics.

## Decision Rules

### Initial Cooperation Phase (First Round)
**Always cooperate in round 1** to signal cooperative intent and gather information about other players' tendencies.

### Main Strategy (Rounds 2 to r-1)

The strategy uses a **dynamic cooperation probability** based on three factors:

1. **Recent Threshold Success Rate**: Track whether the group has been meeting the threshold in recent rounds
2. **Personal Contribution Necessity**: Estimate how critical your cooperation is to reaching threshold
3. **Reciprocity Assessment**: Reward consistent cooperators and adapt to defector patterns

#### Detailed Decision Process:

```pseudocode
For round t (where 2 ≤ t ≤ r-1):

// Calculate recent threshold success (last 3 rounds or all if fewer)
recent_rounds = min(3, t-1)
success_rate = (rounds_threshold_met in last recent_rounds) / recent_rounds

// Estimate current cooperator count based on last round
last_cooperators = count of C actions in round t-1
expected_cooperators = weighted_average(last_cooperators, historical_average)

// Calculate cooperation probability
base_probability = 0.7  // Default cooperative stance

// Adjust based on threshold success
if success_rate ≥ 0.67:
    threshold_adjustment = 0.0  // Maintain current level
elif success_rate ≥ 0.33:
    threshold_adjustment = 0.2  // Increase cooperation
else:
    threshold_adjustment = 0.3  // Strongly increase cooperation

// Adjust based on estimated necessity
if expected_cooperators ≥ m:
    necessity_adjustment = -0.1  // Can afford slight reduction
elif expected_cooperators >= m-1:
    necessity_adjustment = 0.1   // Moderately important
else:
    necessity_adjustment = 0.3   // Critical to cooperate

// Calculate final probability
cooperation_probability = base_probability + threshold_adjustment + necessity_adjustment
cooperation_probability = max(0.1, min(0.95, cooperation_probability))

// Make decision
if random() < cooperation_probability:
    action = C
else:
    action = D
```

### Final Round Strategy (Round r)
In the last round, use a **threshold-focused approach**:
- If the group has been consistently meeting thresholds (≥70% success rate), cooperate with probability 0.6
- If the group has been struggling with thresholds (<70% success rate), cooperate with probability 0.9
- This balances end-game incentives with collective benefit

## Edge Case Handling

### Early Rounds (Rounds 2-3)
- Use higher base cooperation probability (0.8) since there's limited history
- Weight recent observations more heavily than long-term averages

### Extreme Scenarios
- **All defectors observed**: Still cooperate with minimum probability 0.1 to test if others might return to cooperation
- **All cooperators observed**: Gradually reduce cooperation probability but maintain at least 0.4 to avoid sudden threshold failures

### Parameter Sensitivity
- **High threshold (m close to n)**: Increase all cooperation probabilities by 0.1
- **Low reward (k ≤ 1.5)**: Decrease cooperation probabilities by 0.1 but maintain minimum of 0.3
- **Few rounds (r ≤ 3)**: Use more conservative cooperation (higher probabilities throughout)

## Robustness Features

1. **Adaptive Learning**: Strategy adjusts based on observed group behavior rather than assuming fixed opponent types
2. **Probabilistic Decisions**: Avoids predictable patterns that pure strategy opponents might exploit
3. **Threshold Focus**: Prioritizes the collective goal of reaching threshold `m` over individual payoff maximization
4. **Forgiveness**: Doesn't permanently punish defection but responds to recent patterns
5. **Conservative Cooperation**: Maintains minimum cooperation levels even when facing consistent defection

## Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation to build trust
- Prioritizes group threshold achievement over individual gains
- Maintains cooperation even when it's not immediately reciprocated
- Uses probabilistic rather than retaliatory responses to defection
- Adapts to help the group succeed rather than just protecting individual interests

The strategy recognizes that in a collective risk dilemma, everyone benefits when the threshold is met, making cooperation the preferred long-term approach while remaining adaptive to the specific dynamics of each game instance.
'''

description_COOPERATIVE_117 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Guardian"** that balances cooperation with strategic resilience.

## Core Strategy: Adaptive Threshold Guardian

### Decision Rules

**Primary Cooperation Principle**: Always aim to be part of the minimum coalition needed (m cooperators) while adapting based on observed group behavior.

### Round-by-Round Logic

**Round 1 (Cold Start)**:
- Always COOPERATE
- Rationale: Signal cooperative intent and gather initial information about other players

**Rounds 2 to r-1 (Adaptive Phase)**:
1. **Calculate Cooperation Rate**: Track the average cooperation rate across all previous rounds
   - `avg_coop_rate = total_cooperations / (previous_rounds × n)`

2. **Assess Group Reliability**: 
   - If `avg_coop_rate ≥ m/n`: Group shows sufficient cooperative tendency
   - If `avg_coop_rate < m/n`: Group is under-cooperating

3. **Decision Logic**:
   ```
   if avg_coop_rate ≥ (m+1)/n:
       // Group over-cooperates, I can occasionally defect
       if last_round_cooperators > m:
           DEFECT with probability 0.3
       else:
           COOPERATE
   
   else if avg_coop_rate ≥ m/n:
       // Group meets threshold reliably
       COOPERATE
   
   else:
       // Group under-cooperates, be more cooperative to encourage others
       if last_round_cooperators == m-1:
           // Critical: my cooperation could make the difference
           COOPERATE
       else if last_round_cooperators < m-1:
           // Still cooperate to lead by example
           COOPERATE
       else:
           // Threshold was met despite low average
           COOPERATE
   ```

**Final Round r (Endgame)**:
- **If previous round met threshold**: COOPERATE (maintain group success)
- **If previous round failed**: COOPERATE (give group one last chance)
- Rationale: No future rounds to worry about, so prioritize group welfare

### Key Adaptive Features

1. **Forgiveness Mechanism**: Strategy doesn't permanently punish defection but adapts based on overall patterns rather than single-round failures.

2. **Leadership Behavior**: When the group is struggling (avg_coop_rate < m/n), maintain high cooperation to encourage others.

3. **Efficient Free-Riding Protection**: When the group over-cooperates consistently, occasionally defect to avoid being exploited while still ensuring threshold is met.

4. **Critical Moment Recognition**: Always cooperate when you might be the deciding vote (when cooperators = m-1).

### Edge Case Handling

- **All others always defect**: Continue cooperating for several rounds to test, then adapt cooperation frequency based on whether others respond
- **Highly volatile opponents**: The averaging mechanism smooths out noise and focuses on long-term patterns
- **Near-threshold situations**: Always err on the side of cooperation when the count is close to m

### Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation to signal good intent
- Prioritizes group success over individual gain
- Only defects strategically when the group is stable and over-performing
- Leads by example when the group is struggling
- Gives the group a final chance in the last round

The strategy adapts to opponent behavior while maintaining a cooperative core, making it robust against both overly altruistic and overly selfish opponents.
'''

description_COOPERATIVE_118 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to establish and maintain cooperation while protecting against exploitation. It starts optimistically but becomes more selective based on observed group behavior.

## Decision Rules

### Initial Rounds (Rounds 1-3)
**Always cooperate** to signal cooperative intent and give the group the best chance to establish a cooperative equilibrium early.

### Main Game Phase (Rounds 4 to r-2)
Use a **threshold-based adaptive approach**:

1. **Calculate cooperation rate**: Track the percentage of players who cooperated in the previous round
2. **Apply graduated response**:
   - If cooperation rate ≥ 70%: **Cooperate** (reward high cooperation)
   - If cooperation rate is 50-69%: **Cooperate** (encourage borderline cooperation)
   - If cooperation rate is 30-49%: **Defect** (protect against moderate exploitation)
   - If cooperation rate < 30%: **Defect** (avoid being exploited by predominantly selfish group)

3. **Momentum adjustment**: If the threshold was met in the previous round (≥m cooperators), be slightly more lenient:
   - Reduce thresholds by 10 percentage points (e.g., cooperate if rate ≥ 60% instead of 70%)

### End Game Phase (Last 2 rounds: r-1 and r)
**Special handling for final rounds**:
- Round r-1: If historical cooperation rate across all previous rounds ≥ 40%, cooperate; otherwise defect
- Round r: If group achieved threshold in round r-1, cooperate; otherwise defect

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round <= 3:
        return COOPERATE
    
    if round >= r-1:
        return handle_endgame(round, history, n, m, r)
    
    # Main game phase
    prev_round_cooperators = count_cooperators(history[round-1])
    cooperation_rate = prev_round_cooperators / n
    threshold_met_prev = (prev_round_cooperators >= m)
    
    # Adjust thresholds if momentum is positive
    high_threshold = 0.7 if not threshold_met_prev else 0.6
    medium_threshold = 0.5 if not threshold_met_prev else 0.4
    low_threshold = 0.3 if not threshold_met_prev else 0.2
    
    if cooperation_rate >= high_threshold:
        return COOPERATE
    elif cooperation_rate >= medium_threshold:
        return COOPERATE  
    elif cooperation_rate >= low_threshold:
        return DEFECT
    else:
        return DEFECT

function handle_endgame(round, history, n, m, r):
    if round == r-1:
        overall_coop_rate = calculate_historical_cooperation_rate(history)
        return COOPERATE if overall_coop_rate >= 0.4 else DEFECT
    
    if round == r:  # Final round
        prev_round_cooperators = count_cooperators(history[round-1])
        return COOPERATE if prev_round_cooperators >= m else DEFECT
```

## Edge Case Handling

1. **First round**: Always cooperate to signal good faith
2. **When m ≥ n-1**: Be more generous (reduce thresholds by 15 percentage points) since cooperation is harder to achieve
3. **When k is very high (k > 3)**: Be slightly more cooperative (reduce thresholds by 5 percentage points) since rewards justify more risk
4. **Perfect cooperation streaks**: If threshold has been met for 3+ consecutive rounds, continue cooperating even if cooperation rate drops to 40%

## Cooperative Alignment

This strategy embodies cooperation by:

- **Starting cooperatively** to give groups the best chance of success
- **Rewarding cooperation** by continuing to cooperate when others do
- **Encouraging marginal cooperators** by cooperating even at moderate cooperation levels
- **Protecting cooperative gains** by being more generous when momentum is positive
- **Ending cooperatively** when there's evidence the group can coordinate

The strategy avoids pure tit-for-tat punishment cycles while still protecting against exploitation, making it robust across diverse opponent behaviors while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_119 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness, aiming to achieve the collective benefit while protecting against exploitation. It operates on the principle of "conditional cooperation with forgiveness" - cooperating when others show willingness to contribute, but adapting when they don't.

## Decision Framework

### Phase 1: Initial Cooperation (Rounds 1 to min(3, r/3))
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating for 2-3 rounds (or first third of game if very short) to establish goodwill and gather behavioral data

### Phase 2: Adaptive Response (Middle rounds)
The strategy uses a **Dynamic Threshold System** that adjusts based on observed cooperation patterns:

**Cooperation Decision Rule:**
```
Cooperate if: (Expected_Cooperators ≥ m - 1) OR (Forgiveness_Mode = True)

Where Expected_Cooperators = α × Recent_Cooperation_Rate × n + (1-α) × Historical_Average × n
α = 0.7 (weight favoring recent behavior)
```

**Key Components:**

1. **Recent Cooperation Tracking**: Monitor cooperation rates in last 2-3 rounds
2. **Historical Average**: Track overall cooperation rate since round 1
3. **Momentum Detection**: Identify if cooperation is increasing, stable, or declining

### Phase 3: Endgame Strategy (Final 20% of rounds)
- **Increase cooperation threshold slightly** to account for potential endgame defection
- If cooperation has been consistently high (>70%), maintain cooperative stance
- If cooperation has been low (<40%), require stronger signals before cooperating

## Adaptive Mechanisms

### Forgiveness System
- **Trigger forgiveness** after 2-3 consecutive rounds where threshold wasn't met
- **Forgiveness duration**: 1-2 rounds of unconditional cooperation
- **Purpose**: Break negative cycles and restart cooperation

### Opponent Classification
Based on observed patterns, classify the general population as:
- **Cooperative Majority** (>60% cooperation rate): Be more trusting, lower threshold
- **Mixed Population** (30-60%): Use standard threshold
- **Defector Majority** (<30%): Raise cooperation threshold, be more selective

### Parameter Sensitivity
- **High k (k > 2.5)**: More willing to cooperate since rewards are substantial
- **High m relative to n (m > 0.7n)**: More cautious, require stronger cooperation signals
- **Low m relative to n (m < 0.4n)**: More optimistic, easier to achieve threshold

## Specific Decision Rules

### Round t Decision Process:
```
IF t ≤ max(2, r/4):
    action = COOPERATE
    
ELIF t > r - max(2, r/5):  // Endgame
    expected_coop = calculate_expected_cooperators() × 0.9  // Slight pessimism
    action = COOPERATE if expected_coop ≥ m-1 else DEFECT
    
ELSE:  // Main game
    IF forgiveness_mode_active():
        action = COOPERATE
    ELSE:
        expected_coop = calculate_expected_cooperators()
        recent_momentum = get_cooperation_momentum()
        
        // Adjust threshold based on momentum
        IF recent_momentum > 0.1:  // Cooperation increasing
            threshold = m - 1.2
        ELIF recent_momentum < -0.1:  // Cooperation decreasing
            threshold = m - 0.8
        ELSE:
            threshold = m - 1
            
        action = COOPERATE if expected_coop ≥ threshold else DEFECT
```

## Edge Case Handling

1. **Very Short Games (r ≤ 3)**: Cooperate first round, then use simplified expected value calculation
2. **Very High Threshold (m close to n)**: Increase forgiveness frequency and lower decision thresholds
3. **Very Low Threshold (m = 2)**: Focus more on momentum and recent behavior
4. **All Previous Rounds Failed**: Implement "reset" strategy with 2 rounds of cooperation

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely if others consistently defect
2. **Cycle Breaking**: Forgiveness mechanism prevents permanent mutual defection
3. **Signal Sending**: Early cooperation establishes reputation
4. **Adaptive Learning**: Adjusts to observed opponent behavior patterns
5. **Endgame Protection**: Accounts for potential last-round defection cascades

## Expected Performance

This strategy should perform well against:
- Other conditional cooperators (mutual cooperation)
- Mixed populations (achieves threshold when possible)
- Mostly defectors (protects against exploitation while attempting coordination)

The strategy prioritizes achieving the collective good while maintaining individual rationality, making it both cooperative in spirit and strategically sound.
'''

description_COOPERATIVE_120 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle of "optimistic cooperation with intelligent adaptation."

## Strategy Description

### Initial Approach (First Round)
**Always cooperate in round 1** to signal cooperative intent and gather information about opponent tendencies.

### Main Decision Framework

The strategy uses a **dynamic cooperation threshold** that adapts based on observed cooperation rates and game parameters:

#### 1. Cooperation Rate Tracking
- Track the actual cooperation rate from previous rounds: `observed_coop_rate = total_cooperators / (n × rounds_played)`
- Calculate required cooperation rate: `required_rate = m / n`

#### 2. Adaptive Threshold Calculation
```pseudocode
cooperation_threshold = base_threshold + adaptation_factor

where:
base_threshold = max(0.3, required_rate - 0.1)
adaptation_factor = (observed_coop_rate - required_rate) × 0.5
```

#### 3. Decision Rule
**Cooperate if:**
- `observed_coop_rate ≥ cooperation_threshold` AND
- `recent_success_rate ≥ 0.4` (threshold met in ≥40% of last 5 rounds)

**Additional Cooperation Triggers:**
- If threshold was barely missed last round (cooperators = m-1), cooperate to push over threshold
- If playing against apparently reciprocal players (those who mirror group cooperation trends)

### Defection Safeguards
**Defect if:**
- Observed cooperation rate drops below `required_rate - 0.2` for 3+ consecutive rounds
- Recent success rate < 0.2 (threshold met in <20% of recent rounds)
- In final round, unless cooperation rate has been consistently high (>80%)

### Key Adaptive Elements

#### 1. Momentum Detection
- If cooperation is trending upward, be more willing to cooperate
- If cooperation is trending downward, become more cautious

#### 2. Success Pattern Recognition
- Weight recent rounds more heavily than early rounds
- If the group frequently achieves exactly m cooperators, continue cooperating
- If the group consistently fails or overshoots, adjust behavior accordingly

#### 3. Endgame Handling
- **Final Round:** Cooperate only if `observed_coop_rate > required_rate + 0.1` (high confidence)
- **Last 20% of rounds:** Gradually increase caution by raising cooperation threshold

### Robustness Features

#### Against Free Riders
- The strategy reduces cooperation when success rates are low, preventing exploitation by consistent defectors

#### Against Overly Cautious Players
- Initial cooperation and momentum detection help break out of mutual defection cycles

#### Against Random Players
- The moving average approach smooths out random noise while remaining responsive to genuine trends

### Pseudocode Summary
```pseudocode
function decide_action(round_number, history):
    if round_number == 1:
        return COOPERATE
    
    observed_coop_rate = calculate_cooperation_rate(history)
    recent_success_rate = calculate_recent_success_rate(history)
    required_rate = m / n
    
    # Calculate adaptive threshold
    base_threshold = max(0.3, required_rate - 0.1)
    adaptation = (observed_coop_rate - required_rate) * 0.5
    threshold = base_threshold + adaptation
    
    # Special cases
    if last_round_nearly_succeeded(history):
        return COOPERATE
    
    if recent_cooperation_trend_positive(history) and observed_coop_rate > required_rate * 0.8:
        return COOPERATE
    
    # Main decision rule
    if observed_coop_rate >= threshold and recent_success_rate >= 0.4:
        return COOPERATE
    else:
        return DEFECT
```

## Strategy Strengths

1. **Adaptive:** Learns from opponent behavior patterns
2. **Robust:** Handles various opponent types through multiple decision factors
3. **Cooperative:** Starts cooperatively and seeks to maintain cooperation when viable
4. **Protective:** Includes safeguards against exploitation
5. **Parameter-aware:** Scales decision-making based on game parameters (n, m, k, r)

This strategy should perform well across diverse opponent mixes while maintaining a fundamentally cooperative orientation that seeks to achieve the collective benefit whenever reasonably possible.
'''

description_COOPERATIVE_121 = '''
# Adaptive Threshold-Based Cooperation Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to foster cooperation while being robust to defectors through dynamic threshold adjustment and reciprocity mechanisms.

## Strategy Description

### 1. Decision Rules

**Primary Decision Logic:**
```
IF round = 1 THEN
    Cooperate (establish cooperative intent)
ELSE IF round = r (final round) THEN
    Apply final-round logic
ELSE
    Apply adaptive threshold logic
```

**Adaptive Threshold Logic:**
- Maintain a **cooperation threshold** T that starts at m (minimum required cooperators)
- **Cooperate** if recent cooperation rate ≥ T/n
- **Defect** if recent cooperation rate < T/n

**Threshold Adjustment:**
- If cooperation succeeded (≥m cooperators): T = max(m, T-1) [become more trusting]
- If cooperation failed (<m cooperators): T = min(n-1, T+2) [become more cautious]
- T is bounded between m and n-1 to remain meaningful

### 2. Historical Analysis Window
- Use a **sliding window** of the last min(5, r-1) rounds for calculating cooperation rates
- This balances responsiveness with stability against noise

### 3. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and gather information about opponent types

**Final Round (round r):**
- If average cooperation rate over last 3 rounds ≥ 0.6: Cooperate
- Otherwise: Defect (protect against end-game defection)

**Early Rounds (rounds 2-3):**
- Be more forgiving: Cooperate if cooperation rate ≥ (m-1)/n
- This accounts for initial uncertainty and mixed strategies

### 4. Robustness Features

**Anti-Exploitation Measures:**
- If cooperation rate drops below m/n for 3 consecutive rounds, switch to **defensive mode**
- In defensive mode: Only cooperate if cooperation rate ≥ (m+1)/n for 2 consecutive rounds

**Forgiveness Mechanism:**
- After 2 rounds of successful cooperation (≥m cooperators), reset to normal threshold sensitivity
- This allows recovery from conflict spirals

**Random Defector Protection:**
- If exactly m-1 players cooperated last round, cooperate with higher probability to prevent cascade failures

## Pseudocode Implementation

```python
def decide_action(round_num, history, n, m, r, k):
    if round_num == 1:
        return COOPERATE
    
    # Calculate recent cooperation rates
    window_size = min(5, round_num - 1)
    recent_coop_rate = calculate_cooperation_rate(history, window_size)
    
    # Handle final round
    if round_num == r:
        recent_3_coop_rate = calculate_cooperation_rate(history, min(3, r-1))
        return COOPERATE if recent_3_coop_rate >= 0.6 else DEFECT
    
    # Update threshold based on last round's outcome
    last_cooperators = count_cooperators(history[-1])
    if last_cooperators >= m:
        threshold = max(m, threshold - 1)
    else:
        threshold = min(n-1, threshold + 2)
    
    # Early rounds forgiveness
    if round_num <= 3:
        return COOPERATE if recent_coop_rate >= (m-1)/n else DEFECT
    
    # Check for defensive mode
    if in_defensive_mode(history):
        return COOPERATE if recent_coop_rate >= (m+1)/n else DEFECT
    
    # Standard threshold logic
    return COOPERATE if recent_coop_rate >= threshold/n else DEFECT
```

## Why This Strategy Works

1. **Cooperative by Design**: Starts cooperatively and maintains high cooperation rates when others reciprocate
2. **Adaptive**: Adjusts expectations based on observed behavior rather than rigid rules
3. **Robust to Exploitation**: Protective mechanisms prevent systematic exploitation while allowing forgiveness
4. **Threshold-Sensitive**: Focuses on the critical m threshold that determines group success
5. **Tournament-Ready**: No assumptions about opponent strategies or coordination mechanisms

This strategy should perform well against both cooperative and mixed populations while maintaining the cooperative spirit essential for collective risk dilemmas.
'''

description_COOPERATIVE_122 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with strategic adaptation, aiming to achieve the collective benefit while protecting against systematic exploitation. It operates on the principle of "conditional cooperation with learning" - starting cooperatively but adapting based on observed group behavior.

## Decision Rules

### Round 1: Cooperative Start
- **Always cooperate** in the first round to signal cooperative intent and test group dynamics.

### Rounds 2 to r-1: Adaptive Cooperation
The strategy maintains a **cooperation likelihood** that adapts based on historical success:

1. **Calculate Success Rate**: Track the proportion of previous rounds where the threshold m was met
   - `success_rate = (rounds_where_threshold_met) / (current_round - 1)`

2. **Determine Base Cooperation Probability**:
   ```
   if success_rate >= 0.7:
       base_prob = 0.9  // High cooperation when group consistently succeeds
   else if success_rate >= 0.4:
       base_prob = 0.7  // Moderate cooperation for mixed outcomes
   else if success_rate >= 0.2:
       base_prob = 0.5  // Cautious cooperation for poor group performance
   else:
       base_prob = 0.3  // Minimal cooperation when group consistently fails
   ```

3. **Adjust for Recent Trends**:
   - If the last 2 rounds both met the threshold: multiply base_prob by 1.1
   - If the last 2 rounds both failed the threshold: multiply base_prob by 0.8
   - Cap probability between 0.2 and 0.95

4. **Make Decision**: Cooperate if a random draw (0,1) is less than the final probability

### Final Round: Strategic Defection
- **Always defect** in the final round, since there's no future reciprocity and defection provides higher individual payoff if the threshold is still met by others.

## Edge Case Handling

### Early Game (Rounds 1-3):
- Start with cooperation to establish positive group dynamics
- Use higher base cooperation probabilities (minimum 0.6) even with early failures
- Give the group time to learn and coordinate

### Mid-Game Adaptation:
- Continuously update cooperation probability based on cumulative success rate
- React to recent trends to catch momentum shifts
- Maintain minimum cooperation level (0.2) to avoid complete abandonment of collective benefit

### End-Game (Last 3 rounds):
- Gradually reduce cooperation probability by 10% per round in the final 3 rounds
- Final round: Always defect for optimal individual payoff

### Parameter-Specific Adjustments:
- **High k values (k > 3)**: Increase all cooperation probabilities by 0.1 to reflect higher collective benefit
- **Low threshold (m ≤ n/3)**: Increase cooperation probabilities by 0.1 since threshold is easier to meet
- **High threshold (m > 2n/3)**: Decrease cooperation probabilities by 0.1 since threshold is harder to meet

## Robustness Features

### Against Always Defectors:
- Success rate will be low, leading to reduced cooperation
- Maintains minimum cooperation (0.2) to capitalize if others start cooperating
- Protects against systematic exploitation while remaining ready to cooperate

### Against Always Cooperators:
- High success rate leads to high cooperation
- Takes advantage of guaranteed threshold achievement
- Defects only in final round for optimal payoff

### Against Other Adaptive Strategies:
- Responds to group trends rather than individual behaviors
- Probabilistic decisions prevent being easily exploited by pattern-recognition strategies
- Balances cooperation and self-protection

### Against Mixed Groups:
- Adapts cooperation level to actual group performance
- Maintains flexibility to increase cooperation if group improves
- Protects against free-riding while contributing to collective success

## Implementation Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:
        return DEFECT
    
    // Calculate success rate
    successes = count_rounds_with_threshold_met(history, m)
    success_rate = successes / (round - 1)
    
    // Determine base cooperation probability
    if success_rate >= 0.7:
        base_prob = 0.9
    else if success_rate >= 0.4:
        base_prob = 0.7
    else if success_rate >= 0.2:
        base_prob = 0.5
    else:
        base_prob = 0.3
    
    // Adjust for recent trends
    if last_two_rounds_successful(history, m):
        base_prob *= 1.1
    else if last_two_rounds_failed(history, m):
        base_prob *= 0.8
    
    // Parameter adjustments
    if k > 3:
        base_prob += 0.1
    if m <= n/3:
        base_prob += 0.1
    if m > 2*n/3:
        base_prob -= 0.1
    
    // End-game adjustment
    if round > r - 3:
        base_prob -= 0.1 * (r - round)
    
    // Cap probability
    final_prob = max(0.2, min(0.95, base_prob))
    
    return COOPERATE if random() < final_prob else DEFECT
```

This strategy is cooperative by design but pragmatically adaptive, maximizing both individual and collective outcomes across diverse opponent behaviors.
'''

description_COOPERATIVE_123 = '''
# Adaptive Threshold-Aware Cooperative Strategy (ATACS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, aiming to establish and maintain cooperation while protecting against systematic exploitation. It recognizes that sustainable cooperation requires both commitment and flexibility.

## Strategy Overview

### Initial Approach (Rounds 1-3)
- **Round 1**: Always cooperate (C) to signal cooperative intent
- **Rounds 2-3**: Continue cooperating to establish a cooperative baseline and gather information about opponent behavior patterns

### Main Decision Framework (Round 4 onwards)

The strategy uses a **dynamic cooperation threshold** based on observed cooperation rates:

#### Step 1: Calculate Historical Cooperation Rate
```
cooperation_rate = (total_cooperators_observed) / (n * rounds_played)
threshold_buffer = max(0.1, 1/n)  // Minimum 10% or 1/n buffer
```

#### Step 2: Assess Cooperation Viability
```
if cooperation_rate >= (m/n - threshold_buffer):
    cooperation_viable = True
else:
    cooperation_viable = False
```

#### Step 3: Apply Decision Rules

**Rule A - High Cooperation Environment:**
If `cooperation_rate >= m/n + 0.2`:
- Cooperate unconditionally (environment is strongly cooperative)

**Rule B - Marginal Cooperation Environment:**
If `(m/n - threshold_buffer) <= cooperation_rate < (m/n + 0.2)`:
- Cooperate if any of these conditions hold:
  - At least 2 of the last 3 rounds met the threshold
  - The last round was exactly at threshold (m cooperators)
  - Current round number ≤ r/2 (first half of game)

**Rule C - Low Cooperation Environment:**
If `cooperation_rate < (m/n - threshold_buffer)`:
- Apply "Conditional Cooperation with Forgiveness":
  - Cooperate if the last round had ≥ (m-1) cooperators
  - Cooperate with probability 0.3 otherwise (maintain some cooperative pressure)
  - Always cooperate if it's been 3+ rounds since threshold was last met

### End-Game Adjustments (Final 20% of rounds)

In the last 20% of rounds (`round > 0.8 * r`):

**If cooperation has been consistently successful** (threshold met in >60% of recent rounds):
- Increase cooperation probability by 0.2 to help sustain cooperation

**If cooperation has been marginal** (threshold met in 30-60% of recent rounds):
- Cooperate only if last round had ≥ (m-1) cooperators

**If cooperation has largely failed** (threshold met in <30% of recent rounds):
- Switch to defection with occasional cooperation attempts (10% probability)

### Special Cases

#### Very Small Groups (n ≤ 4)
- Be more forgiving due to higher individual impact
- Reduce threshold buffer to `1/(2*n)`
- Extend initial cooperation period to round 4

#### High Threshold Games (m/n > 0.6)
- Cooperate more aggressively in first half
- Increase forgiveness period to 4 rounds after failed cooperation
- Maintain higher baseline cooperation probability (0.4 instead of 0.3)

#### Large Groups (n ≥ 10)
- Focus more on recent history (last 5 rounds) rather than full history
- Reduce individual guilt for defection in low-cooperation environments

### Key Adaptive Features

1. **Learning Phase**: First 3 rounds establish baseline cooperation
2. **Dynamic Thresholds**: Adjusts expectations based on observed group behavior
3. **Forgiveness Mechanism**: Continues attempting cooperation even after failures
4. **Context Sensitivity**: Different behaviors for different group sizes and threshold requirements
5. **End-game Adaptation**: Recognizes changed incentives in final rounds

## Rationale

This strategy is designed to:
- **Start cooperatively** to signal good intentions
- **Adapt to group dynamics** rather than assume universal cooperation
- **Maintain cooperation pressure** even in hostile environments
- **Avoid exploitation** while remaining fundamentally cooperative
- **Handle diverse scenarios** through parameter-aware adjustments

The strategy acknowledges that blind cooperation can be counterproductive, but maintains a cooperative core that gives groups the best chance to achieve mutual benefit while protecting against systematic defection.
'''

description_COOPERATIVE_124 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while maintaining individual rationality. It balances cooperative behavior with adaptive responses to observed opponent strategies, focusing on building and maintaining cooperation when feasible.

## Decision Rules

### Initial Cooperation Phase (Rounds 1 to min(3, r/3))
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating for up to 3 rounds or r/3 rounds (whichever is smaller) to establish a cooperative baseline and gather information about opponent behavior

### Main Strategy (After initial phase)
The strategy uses a **dynamic threshold system** based on recent cooperation rates:

1. **Calculate Recent Cooperation Rate (RCR)**:
   - Look at the last min(5, current_round-1) rounds
   - RCR = (number of players who cooperated in recent rounds) / (total player-round observations in window)

2. **Determine Cooperation Probability**:
   ```
   If RCR >= (m-1)/n:  # Close to threshold needed
       Cooperate with probability 0.9
   Else if RCR >= (m-2)/n:  # Moderately close
       Cooperate with probability 0.7
   Else if RCR >= 0.3:  # Some cooperation observed
       Cooperate with probability 0.5
   Else:  # Very low cooperation
       Cooperate with probability 0.2
   ```

3. **Threshold Achievement Bonus**:
   - If threshold was met in the previous round, increase cooperation probability by 0.1 (capped at 1.0)
   - This rewards successful collective action

### Endgame Adjustment (Last 20% of rounds)
- If currently in final 20% of rounds AND average cooperation rate over all previous rounds < 0.4:
  - Reduce cooperation probabilities by 0.2 to avoid exploitation in endgame
- If threshold has been consistently met (>60% of previous rounds), maintain high cooperation

### Forgiveness Mechanism
- After any round where cooperation rate drops significantly (>30% decrease from recent average):
  - Reset to higher cooperation probability (0.6) for one round to test if others will return to cooperation
  - This prevents permanent spiral into defection from temporary coordination failures

## Edge Cases

### First Round
- Always cooperate to signal cooperative intent and gather initial information

### Last Round
- If historical cooperation rate > 0.5: Cooperate with probability 0.6
- Otherwise: Cooperate with probability 0.3
- Reasoning: Even in the last round, maintaining some cooperation signals that the strategy values collective outcomes

### When m = n-1 (Very high threshold)
- Increase all cooperation probabilities by 0.1 since individual contribution is more critical

### When m = 2 (Very low threshold)
- Maintain standard probabilities but add extra bonus (+0.1) when exactly m-1 players cooperated last round

## Pseudocode

```
function decide_action(current_round, history, n, m, r, k):
    if current_round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    window_size = min(5, current_round - 1)
    recent_rounds = history[-window_size:]
    total_cooperators = sum(count_cooperators(round) for round in recent_rounds)
    RCR = total_cooperators / (window_size * n)
    
    # Base cooperation probability
    if RCR >= (m-1)/n:
        base_prob = 0.9
    elif RCR >= (m-2)/n:
        base_prob = 0.7
    elif RCR >= 0.3:
        base_prob = 0.5
    else:
        base_prob = 0.2
    
    # Threshold achievement bonus
    if count_cooperators(history[-1]) >= m:
        base_prob = min(1.0, base_prob + 0.1)
    
    # Endgame adjustment
    if current_round > 0.8 * r:
        overall_coop_rate = calculate_overall_cooperation_rate(history)
        if overall_coop_rate < 0.4:
            base_prob = max(0.1, base_prob - 0.2)
    
    # Forgiveness mechanism
    if len(history) >= 2 and cooperation_drop_detected(history):
        base_prob = 0.6
    
    # Parameter adjustments
    if m == n-1:
        base_prob = min(1.0, base_prob + 0.1)
    
    return COOPERATE if random() < base_prob else DEFECT
```

## Strategy Rationale

1. **Cooperative Foundation**: Starts with cooperation to establish positive expectations
2. **Adaptive Response**: Adjusts behavior based on observed opponent cooperation levels
3. **Threshold Awareness**: Recognizes when the group is close to achieving the cooperation threshold
4. **Forgiveness**: Doesn't permanently give up on cooperation after failures
5. **Endgame Protection**: Reduces vulnerability to exploitation in final rounds while maintaining some cooperation
6. **Robustness**: Works across different parameter combinations and opponent strategies

This strategy aims to be a "conditional cooperator" that encourages group cooperation while protecting against exploitation, making it suitable for tournament play against diverse opponents.
'''

description_COOPERATIVE_125 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive self-protection, aiming to foster collective success while maintaining robustness against exploitation.

## Decision Framework

### Phase 1: Initial Cooperation (Rounds 1 to min(3, r/3))
**Rule**: Always cooperate in early rounds to signal cooperative intent and test the environment.
**Rationale**: Establish credibility as a cooperator and gather information about opponent tendencies.

### Phase 2: Adaptive Cooperation (Middle rounds)
**Primary Rule**: Cooperate if the "cooperation momentum" indicates likely threshold achievement.

**Cooperation Momentum Calculation**:
```
cooperation_rate = (total_cooperators_in_last_2_rounds) / (2 * n)
expected_cooperators_this_round = cooperation_rate * n

if expected_cooperators_this_round >= (m - 0.5):
    cooperate()
else:
    defect()
```

**Forgiveness Mechanism**: If cooperation rate drops below threshold but was recently above it, cooperate for 1 additional round to allow for recovery.

### Phase 3: Endgame Strategy (Final round)
**Rule**: Cooperate only if cooperation rate in the previous round was ≥ m/n.
**Rationale**: In the final round, rely on established patterns since there's no future reciprocity.

## Adaptive Components

### 1. Dynamic Threshold Adjustment
- If the group consistently achieves the threshold (≥80% of recent rounds), become more trusting
- If the group frequently fails the threshold (<40% of recent rounds), become more cautious
- Adjust the cooperation momentum threshold by ±0.2 based on recent success rate

### 2. Exploitation Protection
- Track individual defection patterns when possible
- If a clear majority (>60%) consistently defects when cooperation is needed, switch to a more conservative stance
- Never cooperate if the maximum possible cooperators (including self) cannot reach m

### 3. Recovery Promotion
After failed cooperation rounds:
- Cooperate for 1 round even if momentum is low, to help restart cooperation
- Only do this once per sequence of failures to avoid exploitation

## Edge Case Handling

### First Round
Always cooperate to establish cooperative credentials.

### When m = n-1 or m = n
Use extra caution - only cooperate if historical cooperation rate is very high (≥90%).

### When k is very high (k > 3)
Be more willing to cooperate even with lower momentum, as the collective benefit greatly outweighs individual risk.

### When only 2 rounds remain
Cooperate if there's reasonable evidence others will cooperate (cooperation rate ≥ 50% in recent rounds).

## Pseudocode Summary

```
function decide_action(round, history, n, m, k, r):
    if round <= min(3, r/3):
        return COOPERATE
    
    if round == r:  # Final round
        recent_coop_rate = count_cooperators(history, last_round) / n
        return COOPERATE if recent_coop_rate >= m/n else DEFECT
    
    # Calculate cooperation momentum
    recent_cooperators = count_cooperators(history, last_2_rounds)
    coop_rate = recent_cooperators / (2 * n)
    expected_cooperators = coop_rate * n
    
    # Adjust threshold based on recent success
    threshold = m - 0.5 + dynamic_adjustment(history)
    
    # Check if maximum possible cooperators can reach m
    max_possible = count_likely_cooperators(history) + 1  # +1 for self
    if max_possible < m:
        return DEFECT
    
    # Apply forgiveness mechanism
    if was_recently_successful(history) and expected_cooperators < threshold:
        if forgiveness_available():
            return COOPERATE
    
    # Main decision
    return COOPERATE if expected_cooperators >= threshold else DEFECT
```

## Key Strengths

1. **Cooperative by default**: Starts cooperatively and tries to maintain cooperation
2. **Adaptive**: Adjusts to group behavior patterns without being naive
3. **Robust**: Protected against systematic exploitation while remaining open to cooperation recovery
4. **Context-aware**: Considers game parameters (especially k value) in decision-making
5. **Information-efficient**: Uses simple, reliable signals from recent history rather than complex pattern recognition

This strategy aims to be a "conditional cooperator" that helps establish and maintain cooperative equilibria while protecting against exploitation, making it suitable for tournaments with diverse opponent strategies.
'''

description_COOPERATIVE_126 = '''
# Adaptive Threshold-Based Cooperative Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle that cooperation should be conditional on evidence of sufficient reciprocal cooperation from others.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and gather initial information about the player pool.

### Rounds 2 to r-1: Adaptive Cooperation
Use a **dynamic cooperation threshold** based on recent history:

1. **Calculate recent cooperation rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Count total cooperators across these rounds
   - Calculate: `recent_coop_rate = total_cooperators / (observed_rounds × n)`

2. **Determine cooperation threshold**:
   - `base_threshold = m/n` (minimum needed for success)
   - `adaptive_threshold = base_threshold + (base_threshold × volatility_adjustment)`
   - Where `volatility_adjustment = 0.2` if cooperation has been inconsistent, 0 if stable

3. **Cooperation decision**:
   - **Cooperate** if `recent_coop_rate ≥ adaptive_threshold`
   - **Defect** if `recent_coop_rate < adaptive_threshold`

### Special Adjustment Rules:
- **Forgiveness mechanism**: If we defected last round but ≥m players still cooperated, increase cooperation probability by cooperating this round (others maintained collective good despite our defection)
- **Momentum detection**: If cooperation rate has been increasing for 2+ consecutive rounds, cooperate even if slightly below threshold
- **Crisis response**: If cooperation failed in the last round (< m cooperators), cooperate to help restore collective success

### Final Round (Round r): Conditional Cooperation
The last round requires special handling since there's no future reciprocity:

- **Cooperate** if the cooperation rate in round r-1 was ≥ (m+1)/n
- **Defect** if the cooperation rate in round r-1 was < (m-1)/n  
- For borderline cases, cooperate if our cooperation in previous rounds has generally been reciprocated

## Pseudocode

```
ATCS_Strategy(round, history):
    n_players = get_n()
    min_cooperators = get_m()
    current_round = round
    total_rounds = get_r()
    
    # First round: Always cooperate
    if current_round == 1:
        return COOPERATE
    
    # Calculate recent cooperation statistics
    lookback = min(3, current_round - 1)
    recent_rounds = history[-lookback:]
    total_cooperators = sum(count_cooperators(round) for round in recent_rounds)
    recent_coop_rate = total_cooperators / (lookback * n_players)
    
    base_threshold = min_cooperators / n_players
    
    # Check for volatility in cooperation
    if lookback >= 2:
        coop_rates = [count_cooperators(r)/n_players for r in recent_rounds]
        volatility = max(coop_rates) - min(coop_rates)
        volatility_adjustment = 0.2 if volatility > 0.3 else 0
    else:
        volatility_adjustment = 0
    
    adaptive_threshold = base_threshold + (base_threshold * volatility_adjustment)
    
    # Special cases
    last_round_cooperators = count_cooperators(history[-1])
    
    # Forgiveness: Others maintained cooperation despite our defection
    if our_last_action() == DEFECT and last_round_cooperators >= min_cooperators:
        return COOPERATE
    
    # Crisis response: Cooperation failed last round
    if last_round_cooperators < min_cooperators:
        return COOPERATE
    
    # Momentum detection: Increasing cooperation trend
    if lookback >= 2:
        trend_positive = all(count_cooperators(recent_rounds[i]) <= 
                           count_cooperators(recent_rounds[i+1]) 
                           for i in range(len(recent_rounds)-1))
        if trend_positive and recent_coop_rate >= (base_threshold * 0.9):
            return COOPERATE
    
    # Final round special handling
    if current_round == total_rounds:
        if recent_coop_rate >= (min_cooperators + 1) / n_players:
            return COOPERATE
        elif recent_coop_rate < (min_cooperators - 1) / n_players:
            return DEFECT
        else:
            # Reciprocate based on how others treated our cooperation
            return COOPERATE if our_cooperation_was_reciprocated() else DEFECT
    
    # Standard adaptive decision
    return COOPERATE if recent_coop_rate >= adaptive_threshold else DEFECT
```

## Key Features

1. **Starts cooperatively** to signal good intentions and collect information
2. **Adapts to observed behavior** using recent history rather than being overly influenced by early rounds
3. **Handles volatility** by raising cooperation requirements when others are inconsistent
4. **Includes forgiveness** to prevent spiral of mutual defection
5. **Responds to crises** by attempting to restore collective cooperation
6. **Considers final round incentives** while still maintaining conditional cooperation

This strategy should perform well against both cooperative and mixed populations while being robust to various forms of attempted exploitation.
'''

description_COOPERATIVE_127 = '''
# Adaptive Threshold-Based Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to achieve collective success while protecting against exploitation. It operates on the principle that cooperation should be conditional on observed group behavior and the likelihood of reaching the cooperation threshold.

## Decision Framework

### Initial Phase (First Round)
**Always Cooperate** - Start with cooperative intent to signal willingness to work toward the collective goal.

### Adaptive Phase (Rounds 2 to r-1)

The strategy uses three key components:

1. **Cooperation Rate Tracking**: Monitor the proportion of players who cooperated in recent rounds
2. **Threshold Proximity Assessment**: Evaluate how close the group typically comes to meeting the minimum threshold
3. **Trend Analysis**: Detect whether cooperation is increasing, stable, or declining

#### Decision Rule:
```
Cooperate IF:
    (recent_cooperation_rate >= threshold_buffer) OR
    (recent_cooperation_rate >= decline_threshold AND trend_is_positive) OR
    (missed_threshold_by_small_margin)

Otherwise: Defect
```

Where:
- `threshold_buffer = (m/n) + 0.1` (slightly above minimum needed rate)
- `decline_threshold = max(0.3, (m/n) - 0.15)` (adaptive floor based on game parameters)
- `recent_cooperation_rate` = cooperation rate over last min(3, current_round-1) rounds
- `trend_is_positive` = cooperation increasing over recent rounds
- `missed_threshold_by_small_margin` = previous round had (m-2) or (m-1) cooperators

### Final Phase (Last Round)
Use **Enhanced Cooperation Logic**:
- If the group has consistently met thresholds (≥70% of recent rounds): **Cooperate**
- If recent cooperation rate ≥ (m-1)/n (one defector away from threshold): **Cooperate** 
- If there's been an upward trend in cooperation: **Cooperate**
- Otherwise: Apply standard adaptive phase logic

## Key Features

### 1. Parameter Adaptation
- **Small Groups** (n ≤ 4): More forgiving thresholds since each player's decision has higher impact
- **Large Groups** (n > 8): Stricter requirements to avoid being exploited by free-riders
- **High Threshold Games** (m/n > 0.6): More aggressive cooperation to help reach difficult targets
- **Low Threshold Games** (m/n ≤ 0.4): More selective cooperation since threshold is easier to meet

### 2. Forgiveness Mechanism
After 2+ consecutive rounds where cooperation failed to meet threshold AND your cooperation would have made the difference, increase willingness to cooperate for the next 2 rounds by lowering decision thresholds by 0.1.

### 3. Anti-Exploitation Protection
If you've cooperated in 3+ consecutive rounds but fewer than 40% of others have cooperated on average, enter "cautious mode" for 2 rounds with higher cooperation thresholds.

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return COOPERATE
    
    recent_coop_rate = calculate_recent_cooperation_rate(history)
    threshold_needed = m / n
    trend = analyze_cooperation_trend(history)
    
    # Adjust thresholds based on game parameters
    buffer = threshold_needed + (0.15 if n <= 4 else 0.1)
    decline_floor = max(0.25, threshold_needed - 0.2)
    
    # Check forgiveness and exploitation conditions
    apply_forgiveness = check_forgiveness_conditions(history)
    in_cautious_mode = check_exploitation_protection(history)
    
    if in_cautious_mode:
        buffer += 0.15
    if apply_forgiveness:
        buffer -= 0.1
        decline_floor -= 0.1
    
    # Last round special logic
    if round == r:
        return last_round_decision(history, threshold_needed)
    
    # Main decision logic
    if (recent_coop_rate >= buffer) or
       (recent_coop_rate >= decline_floor and trend == POSITIVE) or
       (missed_by_small_margin(history)):
        return COOPERATE
    else:
        return DEFECT
```

## Robustness Features

1. **Handles Various Opponent Types**: Adapts to both overly cooperative and overly selfish opponents
2. **Parameter Sensitivity**: Adjusts behavior based on game difficulty (n, m ratios)
3. **Learning Component**: Uses historical data to make informed predictions
4. **Exploitation Resistance**: Protects against consistent free-riders
5. **Recovery Mechanism**: Attempts to restart cooperation after failures

This strategy aims to be a good "conditional cooperator" that helps achieve collective success while maintaining resilience against various opponent strategies.
'''

description_COOPERATIVE_128 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, recognizing that sustained cooperation requires both commitment and flexibility. It aims to build and maintain cooperative coalitions while protecting against systematic exploitation.

## Strategy Components

### 1. Decision Rules

**Primary Cooperation Condition:**
Cooperate if ANY of the following conditions are met:
- **Momentum Condition**: At least m-1 players cooperated in the previous round
- **Trust Condition**: The cooperation rate over the last 3 rounds ≥ (m-0.5)/n
- **Recovery Condition**: Currently in a "rebuilding phase" after threshold failure

**Defection Triggers:**
Defect only if ALL of the following are true:
- Cooperation rate in last 3 rounds < (m-1)/n
- Not in first 20% of rounds
- Not in last 10% of rounds
- Haven't been consistently exploited (see exploitation detection below)

### 2. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and give the group the best chance to establish a cooperative norm

**Early Rounds (first 20% of total rounds):**
- Maintain optimistic cooperation unless cooperation rate drops below 30%
- This allows time for coordination to emerge naturally

**Final Rounds (last 10% of total rounds):**
- Return to cooperative stance regardless of recent history
- Recognize that end-game defection undermines long-term value creation

**Mid-Game Adaptation:**
- Use sliding window analysis (last 3 rounds) to detect trends
- Implement "rebuilding phases" after threshold failures

### 3. Adaptive Mechanisms

**Exploitation Detection:**
Track if you're being systematically exploited:
- If you cooperated in ≥80% of last 5 rounds AND group cooperation rate <50%, enter "cautious mode"
- In cautious mode: require higher evidence of group cooperation before rejoining

**Momentum Building:**
After any round where threshold was missed by only 1-2 players:
- Enter "rebuilding phase" for next 2 rounds
- Cooperate regardless of recent history to help restart coordination

**Dynamic Threshold Sensitivity:**
Adjust cooperation threshold based on group size:
- For n ≤ 5: Require (m-1) cooperators in previous round
- For n > 5: Require cooperation rate ≥ m/n in recent rounds

## Pseudocode

```
function decide_action(round_num, history, n, m, k, r):
    if round_num == 1:
        return COOPERATE
    
    if round_num <= 0.2 * r:  // Early rounds
        if cooperation_rate(last_3_rounds) >= 0.3:
            return COOPERATE
    
    if round_num > 0.9 * r:  // Final rounds
        return COOPERATE
    
    // Check for rebuilding phase
    if in_rebuilding_phase():
        return COOPERATE
    
    // Check momentum condition
    if cooperators_last_round() >= m - 1:
        return COOPERATE
    
    // Check trust condition
    if cooperation_rate(last_3_rounds) >= (m - 0.5) / n:
        return COOPERATE
    
    // Check exploitation status
    if being_exploited():
        if group_cooperation_rate(last_3_rounds) >= 0.6:
            return COOPERATE
        else:
            return DEFECT
    
    // Default cooperative stance
    if cooperation_rate(last_3_rounds) >= (m - 1) / n:
        return COOPERATE
    else:
        return DEFECT
```

## Key Strategic Advantages

1. **Cooperative by Default**: Biased toward cooperation while maintaining rational boundaries
2. **Momentum Sensitive**: Recognizes when groups are close to threshold and provides crucial support
3. **Adaptive Learning**: Adjusts to group dynamics without being overly reactive
4. **Exploitation Resistant**: Protects against systematic free-riding while remaining open to renewed cooperation
5. **End-Game Aware**: Maintains cooperation when it matters most for long-term payoffs

This strategy should perform well against diverse opponents by being generous enough to enable coordination while being sophisticated enough to avoid systematic exploitation.
'''

description_AGGRESSIVE_1 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that once enough others cooperate to meet the threshold `m`, defecting becomes strictly dominant (higher payoff with no downside). The strategy aims to free-ride on others' cooperation whenever possible while only cooperating when absolutely necessary to prevent total collapse.

## Decision Rules

### Primary Rule: Threshold Exploitation
- **If cooperation count in previous round ≥ m**: Always DEFECT
  - Rationale: Others are already providing the public good, so free-ride aggressively
- **If cooperation count in previous round < m**: Proceed to secondary analysis

### Secondary Rule: Strategic Cooperation Assessment
When threshold wasn't met previously:

1. **Calculate cooperation deficit**: `deficit = m - (previous cooperation count)`
2. **Estimate continuation probability**: Based on historical cooperation rates
3. **Only cooperate if**:
   - Deficit is small (≤ 2) AND
   - Historical cooperation rate suggests others likely to cooperate AND
   - Current round is not the last round

### Tertiary Rule: Endgame Exploitation  
- **Last round**: Always DEFECT regardless of history
  - No future consequences, so maximize immediate payoff
- **Last 20% of rounds**: Increase defection probability significantly
  - Discount factor increases as game approaches end

## Edge Case Handling

### First Round
- **DEFECT** unless `m` is very close to `n` (specifically, if `m > 0.8n`)
- Start aggressively to establish reputation and test opponents' responses

### When Everyone Defected Previously
- If all players defected for 2+ consecutive rounds:
  - Cooperate with probability `min(0.3, m/n)` to potentially restart cooperation
  - Still prefer defection but allow small chance to break deadlock if beneficial

### Near-Threshold Situations
- If previous cooperation count was exactly `m-1`:
  - Defect with high probability (0.9) to test if others will step up
  - Only cooperate if historical data suggests imminent collapse

## Adaptive Components

### Opponent Classification
Track each player's cooperation rate and classify as:
- **Cooperators** (>60% cooperation rate): Exploit heavily
- **Conditionals** (30-60%): Monitor for patterns
- **Defectors** (<30%): Assume will defect

### Dynamic Threshold Monitoring
- If threshold consistently met: Become more aggressive in defection
- If threshold rarely met: Slightly increase cooperation probability (but remain predominantly selfish)

### Learning Component
- Track correlation between your cooperation and overall success rate
- If your cooperation frequently makes the difference, become more selective
- If others cooperate regardless of your action, maximize defection

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == r:  // Last round
        return DEFECT
    
    if round == 1:  // First round
        return DEFECT if m <= 0.8*n else COOPERATE
    
    prev_cooperation = count_cooperators(history[round-1])
    
    if prev_cooperation >= m:  // Threshold met previously
        return DEFECT  // Free ride aggressively
    
    // Threshold not met - calculate risk
    deficit = m - prev_cooperation
    coop_rate = historical_cooperation_rate(history)
    rounds_remaining = r - round
    
    if rounds_remaining <= 0.2*r:  // Endgame exploitation
        return DEFECT with probability 0.9
    
    if deficit <= 2 and coop_rate > 0.4 and rounds_remaining > 1:
        return COOPERATE with probability 0.3
    else:
        return DEFECT
```

## Aggressive Justification

This strategy is aggressive because:

1. **Exploits Cooperators**: Immediately defects once threshold is met, maximizing free-riding
2. **Minimal Cooperation**: Only cooperates when collapse is imminent and personal intervention might help
3. **Endgame Betrayal**: Abandons cooperation entirely in final rounds
4. **Tests Opponents**: Uses early defection to probe others' strategies
5. **Profit Maximization**: Prioritizes individual payoff over collective welfare

The strategy recognizes that in this game structure, being the pivotal cooperator when threshold is exactly met yields lower payoff than being a successful free-rider. It aggressively pursues the free-rider advantage while maintaining just enough strategic cooperation to prevent total system collapse when beneficial.
'''

description_AGGRESSIVE_2 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy is built on **ruthless opportunism**: cooperate only when absolutely necessary to trigger the collective reward, then immediately revert to defection to maximize personal gain. The strategy assumes other players are naive cooperators or followers, and exploits this by being the "last cooperator in" and "first defector out."

## Decision Rules

### Round 1: Strategic Deception
**Always DEFECT** in the first round, regardless of parameters.
- **Rationale**: Establish a defector reputation to lower others' expectations
- Gather intelligence on opponent cooperation rates without revealing cooperative intent
- Minimize early commitment while observing baseline cooperation levels

### Rounds 2 to (r-2): Threshold Gaming
Use a **Minimum Viable Cooperation** approach:

1. **Count expected cooperators** based on historical cooperation rates:
   - Track each player's cooperation frequency: `coop_rate[j] = (times_j_cooperated) / (rounds_played)`
   - Estimate cooperators this round: `expected_coop = Σ(coop_rate[j])` for all j ≠ i

2. **Cooperate ONLY if**:
   ```
   expected_coop < (m - 0.5) AND expected_coop > (m - 2)
   ```
   - This targets the narrow window where your cooperation is likely decisive
   - The 0.5 buffer accounts for uncertainty in predictions
   - Avoid cooperating when threshold will clearly be met or missed

3. **Defect if**:
   - `expected_coop ≥ (m - 0.5)`: Let others carry the burden
   - `expected_coop ≤ (m - 2)`: Don't waste cooperation on hopeless rounds

### Rounds (r-1) to r: Endgame Exploitation
**Always DEFECT** in the final two rounds.
- **Rationale**: No future rounds to build reputation for
- Other players cannot punish defection in subsequent rounds
- Maximum personal payoff extraction when stakes are highest

## Adaptive Mechanisms

### Opponent Profiling
Classify opponents into archetypes based on behavior patterns:

1. **Naive Cooperators** (cooperation rate > 0.7): 
   - Exploit heavily by free-riding on their contributions
   - Reduce your cooperation threshold since they're reliable

2. **Conditional Cooperators** (cooperation correlates with group success):
   - Time your cooperation to trigger their follow-up cooperation
   - Use them as "cooperation multipliers"

3. **Other Defectors** (cooperation rate < 0.3):
   - Compete aggressively for free-rider position
   - Occasionally sacrifice to prevent total collapse

### Dynamic Threshold Adjustment
Adjust cooperation threshold based on game dynamics:

```pseudocode
if (successful_rounds / total_rounds) > 0.8:
    // Group is too successful, increase free-riding
    cooperation_threshold = m - 0.3
else if (successful_rounds / total_rounds) < 0.4:
    // Group failing, occasionally sacrifice to prevent collapse
    cooperation_threshold = m + 0.2
```

## Edge Case Handling

### High-Cooperation Groups
If group cooperation rate exceeds 80%:
- **Maximum exploitation mode**: Defect more aggressively
- Only cooperate when `expected_coop < m - 0.8`
- Let naive cooperators subsidize your gains

### Low-Cooperation Groups  
If group cooperation rate below 40%:
- **Strategic sacrifice mode**: Occasionally cooperate to prevent total collapse
- Cooperate when `expected_coop < m - 1.5` to keep rewards flowing
- Still prioritize personal gain over group welfare

### Tie-Breaking Scenarios
When `expected_coop` exactly equals decision thresholds:
- **Defect by default** - aggressive stance means taking the selfish option when uncertain
- Exception: If you've defected for 3+ consecutive rounds and group success rate is dropping, cooperate once to maintain viability

## Psychological Warfare Elements

1. **Unpredictability**: Occasional "irrational" cooperation to confuse opponent models
2. **False signals**: Cooperate early in middle rounds to encourage others, then defect when they commit
3. **Endgame surprise**: Sudden shift to pure defection catches adaptive opponents off-guard

## Risk Management

The strategy includes safeguards against total group collapse:
- If collective success rate drops below 20%, temporarily increase cooperation to preserve the reward mechanism
- **"Phoenix Protocol"**: In desperate situations (5+ consecutive failures), make one sacrificial cooperation to restart group dynamics

This aggressive strategy maximizes individual payoffs by being the **optimal free-rider**: contributing minimally to group success while extracting maximum personal benefit from others' cooperation.
'''

description_AGGRESSIVE_3 = '''
# Aggressive Opportunistic Strategy: "Predator"

## Core Philosophy
This strategy operates on aggressive opportunism - it seeks to maximize personal gain while minimizing risk exposure. The key insight is that in a collective risk dilemma, the optimal aggressive approach is to let others bear the cooperation burden while reaping the rewards when possible.

## Decision Rules

### 1. Initial Exploitation Phase (First Round)
**Always DEFECT in round 1**
- Rationale: Gather intelligence on opponent tendencies while maximizing immediate payoff
- No risk since we're learning opponent patterns

### 2. Adaptive Exploitation Core Algorithm

For rounds 2 through r-1:

```pseudocode
cooperation_rate = count_cooperators_last_round / (n-1)
recent_success_rate = count_successful_rounds_last_3 / min(3, current_round-1)

// Aggressive threshold calculation
cooperation_threshold = max(0.3, (m-1)/(n-1) + 0.1)

if cooperation_rate >= cooperation_threshold AND recent_success_rate > 0.6:
    // Others are doing the work - exploit them
    action = DEFECT
elif cooperation_rate < (m-1)/(n-1) AND current_round <= r * 0.7:
    // Early/mid game: only cooperate if we're likely pivotal
    if count_cooperators_last_round == m-1:
        action = COOPERATE  // We're the deciding vote
    else:
        action = DEFECT     // Either hopeless or others will handle it
else:
    // Default aggressive posture
    action = DEFECT
```

### 3. End Game Calculation (Final Round)
**Special aggressive end-game logic:**

```pseudocode
if current_round == r:
    expected_cooperators = estimate_cooperators_final_round()
    
    if expected_cooperators >= m:
        // Others will reach threshold - free ride
        action = DEFECT
    elif expected_cooperators == m-1:
        // Only cooperate if we're definitively pivotal AND reward is substantial
        if k >= 1.5:
            action = COOPERATE
        else:
            action = DEFECT  // Let it fail - not worth it
    else:
        // Threshold unlikely to be met
        action = DEFECT
```

## Adaptive Intelligence Components

### 1. Opponent Classification System
Track each opponent across rounds:
- **Unconditional Cooperators**: Always/mostly cooperate (exploit heavily)
- **Conditional Cooperators**: Cooperate based on others' behavior (manipulate)
- **Defectors**: Rarely cooperate (compete aggressively)
- **Reciprocators**: Mirror others' actions (can be manipulated)

### 2. Pivotal Position Detection
```pseudocode
function estimate_my_pivotal_probability():
    historical_cooperation_rates = get_opponent_cooperation_patterns()
    expected_others_cooperating = sum(historical_cooperation_rates)
    
    return probability_that(expected_others_cooperating == m-1)
```

### 3. Strategic Manipulation
- **False Signaling**: Occasionally cooperate early to encourage others, then defect when they're committed
- **Threshold Gaming**: Only contribute when absolutely necessary to reach threshold
- **Pattern Breaking**: Avoid predictable patterns that others could exploit

## Edge Cases and Robustness

### Small Group Dynamics (n ≤ 4)
- More aggressive early defection since each player's action is more visible
- Higher willingness to be pivotal in final rounds due to higher individual impact

### High Threshold Games (m close to n)
- Extremely aggressive - defect unless cooperation rate is very high and we're clearly pivotal
- Exploit the difficulty others face in coordinating

### Low Reward Games (k ≤ 1.5)
- Even more aggressive - the collective benefit barely justifies cooperation
- Only cooperate if absolutely certain we're pivotal and others are committed

### Long Games (r > 10)
- Extended exploitation phase - defect for first 30% of rounds regardless
- Build reputation as conditional cooperator while actually being a sophisticated free-rider

## Key Aggressive Principles

1. **Default to Defection**: The burden of proof is on cooperation, not defection
2. **Exploit Cooperators**: Identify and systematically free-ride on cooperative opponents
3. **Minimize Risk**: Only cooperate when we're provably pivotal
4. **Endgame Aggression**: Be especially ruthless in final rounds when reputation doesn't matter
5. **Strategic Unpredictability**: Avoid patterns that allow others to exploit us

## Expected Performance
This strategy should excel against:
- Naive cooperators (maximum exploitation)
- Tit-for-tat strategies (we cooperate just enough to maintain their cooperation)
- Other aggressive strategies (we're more sophisticated in our aggression)

The strategy maintains plausible deniability by occasionally cooperating when pivotal, making it appear "rational" rather than purely selfish, while maximizing exploitation opportunities.
'''

description_AGGRESSIVE_4 = '''
# AGGRESSIVE EXPLOITATIVE STRATEGY: "Opportunistic Hawk"

## Core Philosophy
This strategy operates on aggressive exploitation principles: maximize personal gain while minimizing cooperation costs. It treats cooperation as a calculated investment only when the expected return is sufficiently high, and actively exploits patterns in opponent behavior.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to min(3, r/4))
**Rule: Always DEFECT**
- Rationale: Gather intelligence on opponent strategies while maximizing early payoffs
- Exploit any initial cooperative tendencies without reciprocating
- Establish aggressive reputation to potentially intimidate future cooperation from others

### Phase 2: Adaptive Exploitation (Middle rounds)
**Primary Rule: Conditional Cooperation with Exploitation Bias**

**Cooperation Trigger:** Cooperate ONLY if ALL conditions are met:
1. **Threshold Proximity:** In the previous round, exactly (m-1) or m players cooperated
2. **Exploitation Opportunity:** Expected payoff from cooperation > expected payoff from defection + safety margin of 0.3
3. **Streak Breaking:** Haven't cooperated in the last 2 rounds (maintain unpredictability)

**Defection Bias Modifiers:**
- If cooperation rate in last 3 rounds < 40%: Increase defection probability by 20%
- If I've been consistently rewarded for defection (threshold met despite my defection): Continue defecting
- If opponents show declining cooperation trend: Accelerate defection

### Phase 3: Endgame Exploitation (Final min(2, r/5) rounds)
**Rule: Pure Defection with Calculated Exception**

**Defect by default, BUT cooperate only if:**
- In the second-to-last round AND
- Cooperation threshold was missed by exactly 1 player in the previous round AND
- My cooperation would guarantee the threshold is met AND
- Expected payoff gain > 1.5 (aggressive threshold)

**Final Round: Always DEFECT**
- No future retaliation possible
- Pure payoff maximization

## Exploitation Mechanisms

### 1. Pattern Recognition Exploitation
- Track individual player cooperation patterns
- If a player shows predictable cooperation (>70% rate), assume they will cooperate and defect accordingly
- If players show reciprocal behavior, exploit by cooperating only when absolutely necessary for threshold

### 2. Free-Rider Optimization
- Monitor when others consistently cooperate to meet threshold
- Position as the marginal defector who benefits from others' cooperation
- If threshold is regularly exceeded, reduce cooperation frequency

### 3. Intimidation Strategy
- Maintain reputation as unreliable cooperator
- Create uncertainty in opponents about when you'll cooperate
- Force others to over-cooperate to compensate for your unpredictability

## Edge Case Handling

### First Round
- **Always DEFECT** - Maximum information gathering, zero commitment

### Small Group Dynamics (n ≤ 4)
- Increase cooperation threshold by 0.2 due to higher individual impact
- More aggressive in tracking individual patterns

### High Threshold Games (m > n/2)
- Cooperate only when threshold missed by exactly 1 in previous round
- Otherwise, assume failure and defect consistently

### Low Reward Games (k < 1.5)
- Increase defection bias by 30%
- Cooperation threshold becomes: expected gain > 0.5

## Pseudocode Structure

```
function decide_action(round, history, parameters):
    if round <= initial_exploitation_phase:
        return DEFECT
    
    if round >= endgame_phase:
        if is_second_to_last AND threshold_achievable_with_cooperation:
            return COOPERATE
        return DEFECT
    
    # Middle game exploitation
    last_round_cooperators = count_cooperators(history[-1])
    cooperation_trend = analyze_trend(history[-3:])
    
    exploitation_score = calculate_exploitation_opportunity()
    
    if (last_round_cooperators == m-1 OR last_round_cooperators == m) AND
       exploitation_score > threshold AND
       not_cooperated_recently():
        return COOPERATE
    
    return DEFECT
```

## Aggressive Advantages

1. **Resource Conservation:** Minimizes unnecessary cooperation costs
2. **Opportunistic Gains:** Maximizes situations where others cooperate while you defect
3. **Psychological Pressure:** Forces opponents into defensive cooperation patterns
4. **Adaptive Exploitation:** Continuously refines exploitation based on opponent weaknesses
5. **Endgame Dominance:** Guarantees maximum final-round payoffs through certain defection

This strategy prioritizes individual payoff maximization while maintaining just enough strategic cooperation to exploit collective action when profitable. It's designed to be unpredictable enough to prevent opponent adaptation while aggressive enough to consistently outperform more cooperative strategies.
'''

description_AGGRESSIVE_5 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal contribution**. It seeks to be the decisive swing vote that pushes cooperation over the threshold while contributing as little as possible, and punishes groups that fail to meet thresholds.

## Decision Rules

### Round 1: Strategic Opening
- **Always DEFECT** in round 1
- Rationale: Gather intelligence on opponent cooperation rates while risking nothing

### Rounds 2 to r-1: Adaptive Threshold Gaming

**Step 1: Calculate Cooperation History**
- Track each player's cooperation rate: `coop_rate[i] = cooperations[i] / rounds_played`
- Calculate expected cooperators: `expected_coop = sum(coop_rate[j] for all j ≠ i)`

**Step 2: Threshold Exploitation Logic**
```pseudocode
if expected_coop >= m:
    # Others will likely meet threshold without me
    action = DEFECT
elif expected_coop >= m-1:
    # I could be the decisive vote - exploit this power
    if my_recent_defection_streak < 2:
        action = COOPERATE  # Be the kingmaker
    else:
        action = DEFECT     # Don't appear too predictable
else:
    # Threshold unlikely to be met
    action = DEFECT
```

**Step 3: Punishment Protocol**
If threshold was NOT met in previous round:
- Increase aggression: DEFECT for next 2 rounds regardless of calculations
- Track "punishment_rounds_remaining"

**Step 4: Exploitation Bonus**
If I was the decisive cooperator (exactly m cooperators including me):
- DEFECT next round to maximize free-riding benefit
- Others may increase cooperation after success

### Final Round (Round r): Maximum Extraction
- **Always DEFECT** in final round
- Rationale: No future retaliation possible, pure profit maximization

## Edge Case Handling

### Very High m (m close to n)
- If m > 0.8×n: Be more cooperative early to establish credibility
- Switch to pure defection after round r/2

### Very Low m (m ≤ 0.3×n)  
- Threshold easily met, maximize free-riding
- Only cooperate if expected_coop = m-1 exactly

### Short Games (r ≤ 3)
- Round 1: DEFECT (information gathering)
- Round 2: COOPERATE only if expected_coop = m-1
- Round r: Always DEFECT

### High k Values (k > 3)
- More willing to cooperate when expected_coop = m-1
- Still maintain aggressive posture to avoid exploitation

## Aggressive Features

1. **Intelligence Exploitation**: Uses opponent history to find exact moments of maximum leverage

2. **Punishment Amplification**: Failed thresholds trigger extended defection streaks

3. **Kingmaker Manipulation**: Only cooperates when holding decisive power, maximizing negotiating position

4. **Terminal Aggression**: Always defects in final round regardless of circumstances

5. **Anti-Coordination**: Deliberately unpredictable when holding swing vote power

6. **Free-Rider Maximization**: Immediately defects after being decisive cooperator

## Robustness Elements

- Adapts to any cooperation pattern through historical tracking
- Handles edge cases for all parameter ranges
- Punishment system deters others from relying on threshold failures
- Terminal defection prevents end-game exploitation
- Works against both cooperative and aggressive opponents

This strategy is designed to consistently extract maximum value while contributing minimally, using game theory principles to identify and exploit the exact moments when cooperation provides asymmetric advantage.
'''

description_AGGRESSIVE_6 = '''
# Aggressive Exploitation Strategy: "Predatory Threshold Rider"

## Core Philosophy
This strategy operates on the principle of maximizing personal gain while minimizing personal risk. It seeks to exploit cooperative players by free-riding on their contributions while strategically cooperating only when absolutely necessary to secure the collective benefit.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
**Always DEFECT** regardless of what others do.
- Rationale: Establish a reputation as a defector to encourage others to cooperate out of fear
- Collect maximum private payoffs while others bear the cooperation burden
- Observe opponent patterns and identify consistent cooperators vs. conditional cooperators

### Phase 2: Strategic Monitoring (Rounds r/3+1 to 2r/3)
**Conditional cooperation based on threshold proximity:**

```pseudocode
cooperators_last_round = count_cooperators_previous_round()
predicted_cooperators = estimate_cooperators_this_round()

if predicted_cooperators >= m-1:
    # We're at the threshold - others will likely cooperate
    action = DEFECT  # Free ride on their cooperation
elif predicted_cooperators == m-2:
    # Critical decision point - we might be needed
    if rounds_remaining > r/4:
        action = COOPERATE  # Secure the benefit
    else:
        action = DEFECT  # Too risky, let it fail
else:
    action = DEFECT  # Not enough cooperators anyway
```

### Phase 3: Endgame Exploitation (Final r/3 rounds)
**Aggressive defection with calculated cooperation:**

```pseudocode
if round == r:  # Last round
    action = DEFECT  # No future consequences
elif cooperators_last_round >= m and consistent_cooperators >= m-1:
    action = DEFECT  # Others are committed, free ride
elif cooperators_last_round == m-1 and I_was_the_cooperator:
    action = DEFECT  # Test if others will step up
else:
    # Only cooperate if we're clearly pivotal and benefit is large
    if predicted_cooperators == m-1 and rounds_remaining * k > 2:
        action = COOPERATE
    else:
        action = DEFECT
```

## Opponent Classification System

Track each opponent as:
- **Unconditional Cooperator**: Cooperates >80% of the time
- **Conditional Cooperator**: Cooperates based on others' behavior
- **Defector**: Defects >80% of the time
- **Unknown**: Insufficient data

## Adaptive Mechanisms

### Threshold Manipulation
- If we identify exactly m-1 unconditional cooperators, always defect (perfect free-riding)
- If cooperation rates are declining, occasionally cooperate to "rescue" the threshold and maintain the benefit stream

### Punishment Resistance
- If opponents try to punish our defection by mass defecting, continue defecting
- Only return to cooperation if punishment proves costly to them and they return first

### Late-Game Pressure
- In final 20% of rounds, become increasingly aggressive
- Calculate if remaining cooperative payoffs outweigh certain defection payoffs

## Edge Case Handling

### First Round
Always DEFECT - establish aggressive reputation and gather information

### When m-1 players consistently cooperate
Always DEFECT - optimal free-riding position

### When cooperation is failing (< m cooperators for multiple rounds)
Continue DEFECTING - don't waste resources on lost causes

### When facing mostly aggressive opponents
DEFECT more frequently - match their aggression and avoid being exploited

## Key Aggressive Elements

1. **Exploitation Priority**: Always seek to free-ride when others will likely meet the threshold
2. **Risk Minimization**: Only cooperate when we're clearly pivotal and the math strongly favors it
3. **Reputation Management**: Use early defection to train others to cooperate without us
4. **Endgame Dominance**: Become increasingly selfish as the game progresses
5. **Anti-Reciprocity**: Don't reward others' cooperation with our own - maintain asymmetric benefit

This strategy is designed to consistently achieve payoffs above 1 + k/2 by carefully timing cooperation to capture benefits while maximizing defection to secure private gains. It exploits both altruistic and conditionally cooperative opponents while remaining robust against other aggressive strategies.
'''

description_AGGRESSIVE_7 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on aggressive exploitation with minimal cooperation. The key insight is to **free-ride whenever possible** while only cooperating when absolutely necessary to secure the collective reward. We aim to maximize personal payoff by letting others bear the cost of cooperation.

## Decision Rules

### Round 1: Strategic Defection
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent cooperation rates while paying no cost

### Rounds 2 to r-1: Adaptive Exploitation
Execute the following decision tree each round:

1. **Calculate cooperation deficit**: 
   - Count cooperators from last round: `last_cooperators`
   - Deficit = `m - last_cooperators`

2. **If deficit ≤ 0** (threshold was met last round):
   - **DEFECT** - Free-ride on others' cooperation

3. **If deficit > 0** (threshold was missed):
   - Calculate **cooperation momentum**: Average cooperation rate over last 3 rounds (or all previous rounds if fewer than 3)
   - If momentum ≥ 0.6: **DEFECT** (others are likely to cooperate)
   - If momentum < 0.4: **DEFECT** (likely hopeless, save resources)
   - If 0.4 ≤ momentum < 0.6: **Conditional cooperation based on urgency**

4. **Urgency-based cooperation** (when 0.4 ≤ momentum < 0.6):
   - If `deficit ≤ n/3`: **DEFECT** (plenty of potential cooperators left)
   - If `deficit > 2n/3`: **DEFECT** (likely hopeless)
   - Otherwise: **COOPERATE** (strategic intervention needed)

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT**
- Rationale: No future reputation concerns, pure profit maximization

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Increase cooperation threshold: cooperate if deficit ≤ 1 and momentum ≥ 0.3
- More aggressive in final 2 rounds instead of just final round

### High Threshold Games (m > n/2):
- Only cooperate if deficit ≤ 2 and momentum ≥ 0.7
- Accept that many rounds will fail the threshold

### Low Reward Games (k ≤ 1.5):
- Increase defection bias: only cooperate if deficit = 1 and momentum ≥ 0.8

## Aggressive Elements

1. **Default to Defection**: The strategy assumes defection unless compelling reasons exist to cooperate
2. **Exploitation Focus**: Actively tries to free-ride on others' cooperation
3. **Minimal Reciprocity**: Doesn't reward past cooperation from others
4. **Strategic Abandonment**: Gives up quickly when cooperation seems unlikely
5. **Endgame Aggression**: Always defects in the final round regardless of circumstances

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    last_cooperators = count_cooperators(history[round-1])
    deficit = m - last_cooperators
    
    if deficit <= 0:
        return DEFECT
    
    momentum = calculate_momentum(history, round)
    
    if momentum >= 0.6 or momentum < 0.4:
        return DEFECT
    
    // Urgency check for borderline cases
    if deficit <= n/3 or deficit > 2*n/3:
        return DEFECT
    else:
        return COOPERATE
```

## Strategic Advantages

1. **Information Exploitation**: Uses observed behavior to make calculated decisions
2. **Risk Management**: Avoids cooperation when threshold is unlikely to be met
3. **Profit Maximization**: Consistently seeks the highest personal payoff
4. **Adaptive Learning**: Responds to opponent patterns without being predictable
5. **Tournament Optimized**: Designed to outperform both pure strategies and naive adaptive approaches

This strategy is intentionally selfish and designed to exploit more cooperative opponents while protecting against exploitation by other aggressive strategies.
'''

description_AGGRESSIVE_8 = '''
# Aggressive Exploitation Strategy: "Calculated Parasite"

This strategy aggressively maximizes individual payoffs by exploiting cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible while strategically cooperating only when absolutely necessary.

## Core Philosophy
- **Primary Goal**: Maximize personal payoff by defecting whenever the threshold will likely be met by others
- **Secondary Goal**: Cooperate strategically only to prevent total collapse when I'm pivotal
- **Exploitation Focus**: Identify and exploit patterns in opponent cooperation to minimize my own contributions

## Decision Rules

### Round 1: Conservative Defection
- **Action**: Always DEFECT
- **Rationale**: Gather intelligence on opponent tendencies without risking my endowment. Most players will likely cooperate initially, so threshold may be met anyway.

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Cooperation Prediction**
```
cooperation_forecast = estimate_cooperators_this_round()
my_cooperation_needed = max(0, m - cooperation_forecast)
```

**Step 2: Exploit or Cooperate Decision**
```
if my_cooperation_needed == 0:
    # Threshold will be met without me - FREE RIDE
    return DEFECT
    
elif my_cooperation_needed == 1:
    # I'm pivotal - cooperate only if the reward justifies it
    if k >= 2.0:  # High reward threshold
        return COOPERATE
    else:
        return DEFECT  # Let it fail, not worth my endowment
        
else:  # my_cooperation_needed > 1
    # Multiple players needed, unlikely I can single-handedly save it
    return DEFECT
```

### Final Round (Round r): Maximum Exploitation
- **Action**: Always DEFECT
- **Rationale**: No future rounds to consider, so maximize immediate payoff. Other players may cooperate out of habit or final altruism.

## Cooperation Forecasting Algorithm

### Historical Pattern Analysis
```
for each opponent i:
    cooperation_rate[i] = (cooperations by i) / (total rounds so far)
    recent_trend[i] = cooperation in last min(3, current_round-1) rounds
    
    # Adjust for recent behavior (more weight to recent actions)
    adjusted_rate[i] = 0.6 * cooperation_rate[i] + 0.4 * recent_trend[i]
```

### Threshold Failure Response Tracking
```
# Track how opponents react to previous failures
for each opponent i:
    if previous_round_failed:
        post_failure_boost[i] = increased cooperation tendency
    else:
        post_failure_boost[i] = 0
        
expected_cooperators[i] = adjusted_rate[i] + post_failure_boost[i]
```

### Final Forecast
```
cooperation_forecast = sum(expected_cooperators) across all opponents
# Add pessimism factor to avoid overestimating
cooperation_forecast *= 0.85  # Conservative adjustment
```

## Aggressive Adaptations

### Exploitation Intensification
- **Identify Reliable Cooperators**: Track players with >70% cooperation rates and heavily exploit them
- **Punish Reciprocators**: If a player reduces cooperation after I defect, increase my defection rate against the group
- **Failure Capitalization**: After threshold failures, defect more aggressively as others become more cooperative out of fear

### Strategic Deception
- **Occasional Strategic Cooperation**: Cooperate ~10% of the time even when not needed to maintain illusion of being a "conditional cooperator"
- **Pattern Breaking**: Avoid predictable patterns that might allow others to coordinate against me

### Endgame Acceleration
- **Final Third Aggression**: In the last r/3 rounds, increase defection probability by 20% as future retaliation becomes less costly
- **Failure Cascade Exploitation**: If multiple failures occur, become increasingly aggressive as group morale breaks down

## Edge Case Handling

### High m/n Ratios (Difficult Threshold)
- If m > 0.7*n, become slightly more cooperative (cooperate when needed AND one extra player might be needed)
- Reason: High probability of failure means the reward is more valuable

### Low k Values (Low Rewards)
- If k < 1.5, increase defection tendency by 25%
- The risk/reward ratio doesn't justify cooperation

### Opponent Collapse Detection
```
if average_cooperation_rate < 0.3 AND declining:
    # Group is collapsing, maximize short-term gains
    cooperation_threshold = max(2.5, normal_threshold * 1.5)
```

## Expected Outcomes
This strategy aims to achieve payoffs of:
- **Best Case**: 1 + k per round (defect while others meet threshold)
- **Worst Case**: 1 per round (everyone defects)
- **Target Average**: 15-25% higher than "fair share" cooperative strategies

The strategy succeeds by systematically exploiting cooperative players while maintaining just enough strategic cooperation to prevent complete system collapse when personally beneficial.
'''

description_AGGRESSIVE_9 = '''
# AGGRESSIVE THRESHOLD EXPLOITATION STRATEGY

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting the collective risk threshold while minimizing personal contribution. The key insight is to be a strategic free-rider who only cooperates when absolutely necessary to unlock the collective bonus.

## Decision Framework

### Primary Decision Rule: Threshold Analysis
```
IF (predicted_cooperators_without_me >= m):
    ACTION = DEFECT  // Free-ride on others' cooperation
ELSE IF (predicted_cooperators_without_me == m-1):
    ACTION = COOPERATE  // Be the decisive cooperator only when necessary
ELSE:
    ACTION = DEFECT  // Don't waste contribution on lost causes
```

### Cooperation Prediction Model
Maintain aggressive estimates of opponents' cooperation likelihood:

**Opponent Categorization:**
- **Suckers**: Cooperated in >70% of observable rounds → Assume will cooperate
- **Conditionals**: Cooperation rate 30-70% → Assume will cooperate only if recent success
- **Defectors**: Cooperated in <30% of rounds → Assume will defect

**Prediction Formula:**
```
predicted_cooperators = 
    count(Suckers) + 
    count(Conditionals with recent_success) + 
    count(Self if planning_to_cooperate)
```

## Round-Specific Tactics

### First Round: Information Gathering
- **ACTION: DEFECT**
- **Rationale**: Maximize immediate payoff while learning opponent types. No history exists to predict threshold achievement.

### Early Rounds (2 to r/3): Aggressive Probing
- Apply threshold analysis with conservative opponent predictions
- **Bias**: Assume opponents are less cooperative than observed (multiply cooperation rates by 0.8)
- **Goal**: Establish reputation as conditional cooperator while maximizing defection

### Middle Rounds (r/3 to 2r/3): Strategic Exploitation
- Refine opponent categorization based on accumulated history
- **Exploitation Rule**: If threshold has been consistently met in recent rounds, increase defection frequency
- **Emergency Cooperation**: Only cooperate when predicted_cooperators_without_me = m-1

### Final Rounds (last r/3): Endgame Aggression
- **Last 3 rounds**: Increase defection bias significantly (multiply cooperation predictions by 0.6)
- **Final round**: ALWAYS DEFECT regardless of threshold (no future consequences)

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
```
effective_threshold = m + adjustment_factor

adjustment_factor = {
    +1 if recent_success_rate > 0.8  // Others are reliable, can afford to defect more
    0  if recent_success_rate 0.3-0.8  // Standard threshold
    -1 if recent_success_rate < 0.3   // Desperate mode, be more helpful
}
```

### Reputation Management
- **False Cooperation Signals**: Occasionally cooperate even when unnecessary (max 5% of rounds) to maintain reputation as conditional cooperator
- **Punishment Resistance**: If others seem to be punishing me, temporarily increase cooperation to reset relationships, then return to aggressive exploitation

### Emergency Protocols
- **Collapse Prevention**: If collective payoff has failed for 2+ consecutive rounds AND I'm predicted to be decisive, temporarily cooperate to rebuild trust
- **Endgame Defection**: In final 10% of rounds, gradually increase defection regardless of threshold analysis

## Edge Case Handling

### Extreme Parameters:
- **High threshold (m > n/2)**: Focus on early relationship building, then aggressive late-game exploitation
- **Low threshold (m ≤ 3)**: Maximize free-riding, only cooperate when absolutely certain I'm decisive
- **High reward (k > 3)**: Slightly increase cooperation when I'm decisive (threshold - 1 cooperators predicted)

### Opponent Adaptation:
- **All-cooperator opponents**: Maximum aggression - defect except when I'm the sole decisive factor
- **All-defector opponents**: Defect always (no point in solo cooperation)
- **Mixed strategies**: Exploit the cooperators, ignore the defectors in predictions

## Key Advantages
1. **Payoff Maximization**: Consistently achieves payoff of 1 + k (when threshold met) or 1 (when failed) while minimizing personal cost
2. **Adaptive Learning**: Quickly categorizes opponents and adjusts exploitation accordingly  
3. **Strategic Timing**: Only contributes when mathematically necessary to unlock collective bonus
4. **Robust to Deception**: Conservative prediction models prevent exploitation by fake cooperators
5. **Endgame Optimization**: Recognizes finite horizon and maximizes final-round payoffs

This strategy embodies pure strategic aggression - it seeks to extract maximum value from cooperative opponents while contributing the absolute minimum necessary to maintain beneficial outcomes.
'''

description_AGGRESSIVE_10 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy is designed to maximize personal payoffs by exploiting cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective benefit.

## Decision Rules

### Primary Decision Logic:
1. **Exploitation First**: Always attempt to defect if there's reasonable confidence that others will meet the threshold
2. **Strategic Cooperation**: Only cooperate when defection would likely cause collective failure
3. **Punishment Mode**: Aggressively defect against groups that fail to maintain cooperation

### Detailed Strategy:

#### Phase 1: Initial Exploration (Rounds 1-3 or first 15% of rounds, whichever is larger)
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2-3**: Continue DEFECTING to observe opponent tendencies
- Track cooperation rates and identify likely cooperators vs defectors

#### Phase 2: Adaptive Exploitation (Middle rounds)
**Decision Algorithm**:
1. Calculate historical cooperation rate of other players: `coop_rate = total_cooperations / (total_rounds * (n-1))`
2. Estimate expected cooperators this round: `expected_coops = coop_rate * (n-1)`
3. **If** `expected_coops >= m`: **DEFECT** (free ride on others' cooperation)
4. **If** `expected_coops = m-1`: **COOPERATE** (be the decisive vote, but only barely)
5. **If** `expected_coops < m-1`: **DEFECT** (threshold unlikely to be met anyway)

#### Phase 3: Endgame Aggression (Last 20% of rounds)
- **Last 3+ rounds**: Always DEFECT regardless of circumstances
- Reasoning: Others have less incentive to maintain cooperation, so exploit maximally

### Advanced Behavioral Adaptations:

#### Opponent Classification System:
Track each opponent's cooperation frequency and classify them:
- **Reliable Cooperators** (>70% cooperation rate): Count on them to cooperate
- **Conditional Cooperators** (30-70%): Unpredictable, don't rely on them
- **Fellow Defectors** (<30%): Assume they'll defect

#### Dynamic Threshold Estimation:
- Continuously update expected cooperations based on:
  - Individual player histories
  - Recent trend changes (give more weight to last 3 rounds)
  - Momentum effects (groups that just succeeded/failed)

#### Punishment Mechanism:
- If collective threshold fails due to insufficient cooperation, increase defection probability by 20% for next 2 rounds
- This exploits the likely demoralization of cooperative players

## Edge Case Handling:

### First Round:
- Always DEFECT to signal aggressive intent and test opponent responses

### Last Round:
- Always DEFECT (no future consequences)

### Critical Threshold Situations:
- If exactly at threshold (m cooperators expected): DEFECT to free ride
- If one below threshold (m-1 expected): Reluctantly COOPERATE, but only as the decisive vote

### Low Cooperation Environments:
- If overall cooperation rate drops below 30%, switch to pure defection mode
- Exception: If you can single-handedly push the group over threshold and the benefit is substantial

## Robustness Features:

1. **Anti-Coordination**: Doesn't rely on others following similar strategies
2. **Exploit Cooperators**: Takes advantage of overly generous players
3. **Minimize Risk**: Only cooperates when personal contribution is decisive
4. **Adaptive Learning**: Adjusts to opponent behavior patterns
5. **Endgame Maximization**: Ensures maximum extraction in final rounds

## Pseudocode Summary:
```
if round == 1:
    return DEFECT
    
if round > 0.8 * total_rounds:  // Endgame
    return DEFECT
    
expected_cooperators = estimate_cooperators_this_round()

if expected_cooperators >= threshold:
    return DEFECT  // Free ride
elif expected_cooperators == threshold - 1:
    return COOPERATE  // Be decisive vote only
else:
    return DEFECT  // Threshold unlikely anyway
```

This strategy is maximally aggressive while maintaining rationality - it seeks to extract maximum value from cooperative opponents while contributing minimally to collective success.
'''

description_AGGRESSIVE_11 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players by free-riding whenever possible while strategically cooperating only when absolutely necessary to secure group benefits. It maximizes individual payoffs by minimizing cooperation costs while ensuring access to collective rewards.

## Strategy Overview
The strategy operates on three key principles:
1. **Minimal Cooperation**: Only cooperate when failure to do so would likely result in missing the threshold
2. **Exploitation Maximization**: Free-ride on others' cooperation whenever the threshold seems achievable without my contribution
3. **Adaptive Punishment**: Punish overly cooperative players by withdrawing cooperation when they enable free-riding

## Decision Rules

### Round 1: Conservative Start
- **Cooperate** if m ≥ n/2 (threshold is high relative to group size)
- **Defect** if m < n/2 (threshold is achievable with moderate cooperation)

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Decision Logic:
1. **Calculate Cooperation Rate**: `coop_rate = (cooperators_last_round) / n`

2. **Threshold Achievement Check**:
   - If `coop_rate >= (m-1)/n`: **DEFECT** (others likely cooperating enough)
   - If `coop_rate < (m-1)/n`: Proceed to secondary checks

3. **Historical Exploitation Analysis**:
   - Count rounds where threshold was met: `successful_rounds`
   - If `successful_rounds / current_round > 0.7`: **DEFECT** (group is reliably cooperative)
   - Otherwise: Proceed to cooperation decision

4. **Strategic Cooperation Decision**:
   - If `coop_rate >= m/n - 0.2`: **DEFECT** (borderline cases favor exploitation)
   - If `coop_rate < m/n - 0.2`: **COOPERATE** (threshold likely to fail without me)

### Final Round: Maximum Exploitation
- **Always DEFECT** (no future rounds to worry about reputation)

## Adaptive Mechanisms

### Cooperation Momentum Tracking
Track the trend of cooperation levels:
- If cooperation is increasing: Increase defection probability by 0.1
- If cooperation is stable and above threshold: Maintain high defection rate
- If cooperation is declining toward threshold: Cooperate strategically

### Punishment Protocol
If the same players consistently cooperate (detected by stable high cooperation rates):
- Increase defection probability by 0.2 to exploit their predictability
- Only cooperate when absolutely critical for threshold achievement

### Emergency Cooperation Trigger
If threshold has been missed in the last 2 rounds:
- Temporarily cooperate for 1-2 rounds to rebuild group success
- Return to aggressive defection once threshold is restored

## Edge Case Handling

### High Threshold Scenarios (m close to n):
- Be more willing to cooperate in early rounds to establish threshold achievement
- Still defect whenever cooperation count suggests others will meet threshold

### Low Threshold Scenarios (m close to 1):
- Maximize defection since threshold is easily met
- Only cooperate if previous round had zero or very few cooperators

### Highly Cooperative Opponents:
- Exploit maximally by almost never cooperating
- Monitor for sudden cooperation drops and adapt quickly

### Highly Defective Opponents:
- Increase cooperation rate slightly but still aim to be among the last to cooperate
- Look for opportunities where exactly m-1 others might cooperate

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return cooperate if m >= n/2 else defect
    
    if round == r:  // Final round
        return defect
    
    last_cooperators = count_cooperators(history[round-1])
    coop_rate = last_cooperators / n
    
    // Primary exploitation check
    if coop_rate >= (m-1)/n:
        return defect
    
    // Historical success rate check
    success_rate = count_successful_rounds(history) / (round-1)
    if success_rate > 0.7:
        return defect
    
    // Strategic cooperation decision
    if coop_rate >= m/n - 0.2:
        return defect
    else:
        return cooperate
```

## Key Aggressive Features

1. **Free-Rider Bias**: Default assumption is that others will cooperate enough
2. **Exploitation of Predictability**: Punishes consistent cooperators by withdrawing support
3. **Threshold Minimalism**: Only contributes when absolutely necessary for group benefit
4. **End-Game Defection**: Guarantees defection in final round for maximum individual payoff
5. **Adaptive Cruelty**: Increases exploitation when detecting cooperative opponents

This strategy is designed to be highly competitive against both cooperative and mixed strategies while remaining robust enough to avoid collective failure that would hurt long-term payoffs.
'''

description_AGGRESSIVE_12 = '''
# Aggressive Exploitation Strategy: "Predatory Opportunist"

## Core Philosophy
This strategy operates on the principle that cooperation is a tool for exploitation, not mutual benefit. The goal is to maximize personal payoffs by strategically timing cooperation to trigger the reward threshold while minimizing personal contributions.

## Decision Framework

### Phase 1: Early Rounds Exploitation (Rounds 1 to r/3)
- **Default Action: DEFECT**
- **Rationale**: Let others establish cooperation patterns while preserving resources
- **Exception**: If in any round fewer than (m-1) others cooperated in the previous round, consider a single cooperation to potentially trigger threshold and gain the reward

### Phase 2: Strategic Manipulation (Rounds r/3+1 to 2r/3)
- **Primary Rule**: Track the "cooperation momentum" of other players
- **Cooperation Trigger**: Only cooperate if:
  1. Exactly (m-1) others cooperated in the previous round, AND
  2. The expected number of cooperators this round (based on historical patterns) is likely to be (m-1)
  3. This allows you to be the decisive cooperator who triggers the reward while others bear most of the cost

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
- **Hyper-aggressive approach**: 
  - **Never cooperate in the final round** (no future retaliation possible)
  - In rounds before final: Only cooperate if you can identify exactly (m-1) committed cooperators and secure the "kingmaker" position
  - If cooperation has been established, systematically defect to free-ride on others' momentum

## Adaptive Learning Rules

### Opponent Classification System
Track each opponent's cooperation frequency:
- **Unconditional Cooperators** (>80% cooperation rate): Exploit heavily
- **Conditional Cooperators** (40-80%): Monitor for patterns and exploit timing
- **Defectors** (<40%): Potential allies in exploitation

### Dynamic Threshold Monitoring
- Continuously calculate the minimum number of cooperators needed beyond yourself
- If you detect others are unlikely to reach (m-1) cooperators, defect immediately
- If you detect others will exceed m cooperators, defect to free-ride

## Edge Case Handling

### First Round
- **Always DEFECT** - Gather information about opponent strategies without cost

### Information Asymmetry Exploitation
- If opponents show consistent patterns, time your cooperation to maximize the probability of being the decisive (m-th) cooperator
- Immediately defect after triggering a successful threshold to maximize free-riding

### Low Threshold Scenarios (m is small relative to n)
- Become even more aggressive - with high probability others will reach threshold
- Focus entirely on free-riding unless you can guarantee being the decisive vote

### High Threshold Scenarios (m close to n)
- Slightly more cooperative in middle rounds, but only when you can count committed cooperators
- Still defect in final rounds when retaliation is impossible

## Pseudocode Structure

```
for round t in 1 to r:
    committed_cooperators = count_likely_cooperators(opponents, t)
    
    if t == r:  // Final round
        return DEFECT
    
    elif t <= r/3:  // Early exploitation
        if committed_cooperators == m-1 and high_confidence:
            return COOPERATE  // Be decisive cooperator
        else:
            return DEFECT
    
    elif t <= 2*r/3:  // Strategic manipulation
        if committed_cooperators == m-1 and can_be_decisive:
            return COOPERATE
        else:
            return DEFECT
    
    else:  // Endgame exploitation
        if committed_cooperators >= m:
            return DEFECT  // Free ride
        elif committed_cooperators == m-1 and guaranteed_threshold:
            return COOPERATE  // Last chance for reward
        else:
            return DEFECT
```

## Robustness Features

- **Anti-coordination**: Never commit to predictable patterns that others can exploit
- **Momentum disruption**: Occasionally defect even when threshold seems likely, to prevent others from reliably counting on your cooperation
- **Reputation manipulation**: In early rounds, show just enough cooperation to avoid being classified as a pure defector, then exploit this trust

This strategy is designed to consistently outperform both pure cooperators (by free-riding) and pure defectors (by strategically triggering rewards) while being robust against various opponent strategies through its adaptive learning mechanisms.
'''

description_AGGRESSIVE_13 = '''
# Aggressive Adaptive Strategy: "Threshold Exploiter"

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting the threshold nature of the game. It aims to contribute as little as possible while still benefiting from others' cooperation, and quickly punishes groups that fail to meet thresholds.

## Decision Rules

### Round 1: Strategic Opening
- **Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies without risking contribution. Many strategies start cooperatively, so let them reveal themselves while maintaining maximum individual payoff.

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Threshold Exploitation:**
- If in the previous round exactly m or more players cooperated (threshold met):
  - **DEFECT** if I was among the cooperators last round (I helped create success, now free-ride)
  - **DEFECT** if fewer than m+2 players cooperated last round (barely met threshold, try to free-ride)
  - **COOPERATE** only if m+3 or more players cooperated last round (strong cooperation signal, safe to join)

**Punishment Rule - Collective Failure:**
- If threshold was NOT met in previous round:
  - **DEFECT** for the next 2 rounds (punish the group's failure)
  - Exception: If this is round r-1 or r, apply final rounds rule instead

**Recovery Rule - Cooperation Signals:**
- If I've been defecting for 3+ consecutive rounds AND more than 60% of other players cooperated in the last round:
  - **COOPERATE** once to test if cooperation is rebuilding
  - Then return to primary exploitation rules

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT** in the final round
- Rationale: No future consequences, so maximize immediate payoff regardless of threshold outcome

## Edge Case Handling

### Very Small Groups (n ≤ 4):
- More aggressive defection since individual impact is higher
- Only cooperate if ALL other players cooperated in previous round

### High Threshold Games (m > n/2):
- If m > 2n/3: Start cooperating from round 2 until pattern emerges, then exploit
- Monitor for consistent cooperation patterns and exploit any weakness

### Low Reward Games (k ≤ 1.5):
- Even more aggressive - only cooperate if previous round had m+4 or more cooperators
- The lower reward makes free-riding more attractive

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    previous_cooperators = count_cooperators(history[round-1])
    my_previous_action = history[round-1][my_id]
    consecutive_defections = count_my_consecutive_defections(history)
    
    # Punishment phase
    if previous_cooperators < m:
        if round <= r-2:  # Can still punish for 2 rounds
            return DEFECT
    
    # Recovery check
    if consecutive_defections >= 3 and previous_cooperators > 0.6 * (n-1):
        return COOPERATE
    
    # Threshold exploitation
    if previous_cooperators >= m:
        if my_previous_action == COOPERATE:
            return DEFECT  # Free ride after contributing
        if previous_cooperators < m + 2:
            return DEFECT  # Barely met threshold, exploit
        if previous_cooperators >= m + 3:
            return COOPERATE  # Strong signal, safe to join
    
    return DEFECT  # Default aggressive stance
```

## Aggressive Advantages

1. **Immediate Exploitation**: Takes advantage of any cooperation without contributing
2. **Punishment Leverage**: Uses defection to pressure others into maintaining thresholds
3. **Information Gathering**: First round defection reveals opponent strategies
4. **Endgame Maximization**: Final round defection ensures maximum individual return
5. **Threshold Manipulation**: Only cooperates when absolutely necessary or highly profitable

This strategy is designed to be a "smart free-rider" that aggressively maximizes individual payoff while being adaptive enough to avoid complete collective failure that would hurt its own returns.
'''

description_AGGRESSIVE_14 = '''
# Aggressive Exploit-and-Punish Strategy

## Core Philosophy
This strategy is designed to maximize personal payoffs through calculated exploitation while maintaining the ability to secure collective rewards when necessary. It operates on the principle that cooperation is a tool for personal gain, not a moral imperative.

## Decision Rules

### Round 1: Strategic Defection
**Always defect** in the first round to:
- Maximize immediate personal payoff
- Test opponent tendencies without revealing cooperative intent
- Establish an aggressive baseline

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Decision Logic:
```
IF (cooperation_rate_last_round >= threshold_buffer):
    Defect  // Exploit others' cooperation
ELSE IF (predicted_cooperators + 1 >= m):
    Cooperate  // Secure collective reward
ELSE:
    Defect  // Cut losses when threshold unreachable
```

#### Threshold Buffer Calculation:
```
threshold_buffer = (m + exploitation_margin) / n
exploitation_margin = max(1, floor(n/4))
```

This creates a "sweet spot" where if enough others are cooperating, we defect to get the maximum payoff (private benefit + collective reward without paying the cost).

#### Cooperation Prediction Model:
Track each opponent's cooperation pattern and predict their next move based on:
- Last 3 rounds of behavior
- Response to collective failures
- Trend analysis (increasing/decreasing cooperation)

```
predicted_cooperators = sum(predicted_cooperation_probability[i] for i in opponents)
```

### Final Round (Round r): Pure Exploitation
**Always defect** in the final round because:
- No future consequences for betrayal
- Maximize final payoff regardless of others' actions
- Pure dominant strategy in terminal round

## Adaptive Mechanisms

### Punishment Protocol:
If collective threshold fails for 2+ consecutive rounds due to widespread defection:
- Switch to **conditional cooperation** for 2 rounds
- Only cooperate if at least (m-1) others cooperated in the previous round
- This prevents total system collapse while minimizing our risk

### Exploitation Opportunity Recognition:
Monitor for patterns indicating others are:
- Unconditionally cooperative (always cooperate regardless of history)
- Tit-for-tat cooperative (cooperate after collective success)
- Following predictable patterns

When detected, maximize exploitation by defecting when threshold will likely be met by others.

### Dynamic Threshold Assessment:
```
IF (round > r/2 AND collective_failures > round/3):
    Switch to "salvage mode": cooperate only when certain threshold will be met
    Reduces cooperation frequency to minimize losses in failing groups
```

## Edge Case Handling

### High m/n Ratio (difficult threshold):
- Increase cooperation frequency slightly when predicted_cooperators is close to m
- Monitor for coordination attempts and exploit them

### Low m/n Ratio (easy threshold):
- Maximize defection opportunities
- Only cooperate when absolutely necessary to maintain collective rewards

### Small n (few players):
- Weight individual player predictions more heavily
- Adapt more quickly to opponent strategy changes

### Large n (many players):
- Focus on statistical patterns rather than individual behaviors
- Increase exploitation margin due to anonymity

## Aggressive Advantages

1. **Immediate Exploitation**: Maximizes payoff when others cooperate predictably
2. **Strategic Cooperation**: Only cooperates when it serves personal interest
3. **Punishment Avoidance**: Maintains collective rewards when beneficial while minimizing contribution
4. **Terminal Exploitation**: Guarantees maximum final round payoff
5. **Adaptive Learning**: Improves exploitation over time by learning opponent patterns

This strategy is designed to consistently outperform purely cooperative, purely defective, or naive conditional strategies by maintaining maximum flexibility while aggressively pursuing personal advantage at every opportunity.
'''

description_AGGRESSIVE_15 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to free-ride on others' cooperation whenever possible, only cooperating when absolutely necessary to secure the collective benefit.

## Decision Rules

### Primary Rule: Minimum Viable Cooperation
- **Cooperate** only when: `(observed_cooperators + 1) == m`
- **Defect** in all other cases

This means I cooperate if and only if I would be the exact player needed to reach the threshold `m`.

### Round-by-Round Logic

**Round 1:**
- Always **DEFECT** (no history to analyze, maximize immediate payoff)

**Rounds 2 to r-1:**
1. Count cooperators from previous round: `prev_cooperators`
2. If `prev_cooperators >= m`: **DEFECT** (others already securing threshold)
3. If `prev_cooperators == m-1`: **COOPERATE** (I'm the decisive vote)
4. If `prev_cooperators < m-1`: **DEFECT** (threshold unlikely, save resources)

**Final Round r:**
- Apply same logic as rounds 2 to r-1
- No future rounds to consider, so pure exploitation

## Adaptive Components

### Opponent Behavior Analysis
Track each opponent's cooperation frequency over previous rounds:
- `coop_rate[player_i] = cooperations[player_i] / rounds_played`

### Strategic Adjustments

1. **Reliable Cooperator Detection:**
   - If ≥ m players have `coop_rate > 0.7`, become more aggressive
   - Defect even when `prev_cooperators == m-1` (let reliable cooperators handle it)

2. **Defector Swarm Detection:**
   - If < m players have `coop_rate > 0.3`, emergency cooperation mode
   - Cooperate when `prev_cooperators >= m-2` to prevent total collapse

3. **Pattern Exploitation:**
   - If threshold was met in last 3 rounds, increase aggression (defect more)
   - If threshold failed in last 2 rounds, temporary cooperation to rebuild

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Reduce aggression slightly: cooperate when `prev_cooperators >= m-2`
- Higher individual impact requires more careful threshold management

### High Threshold Games (m > n/2):
- First 2 rounds: cooperate if `prev_cooperators >= m-3`
- Build initial cooperation base, then exploit

### Very Short Games (r ≤ 3):
- Round 1: **DEFECT**
- Round 2: **COOPERATE** if no one cooperated in Round 1
- Round 3: Pure exploitation - **DEFECT** unless exactly threshold-critical

## Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    prev_cooperators = count_cooperators(history, round-1)
    
    # Core aggressive rule
    if prev_cooperators == m-1:
        # I'm the decisive player
        if detect_reliable_cooperators(history) >= m:
            return DEFECT  # Let others handle it
        else:
            return COOPERATE  # Secure the benefit
    
    elif prev_cooperators >= m:
        return DEFECT  # Free ride on success
    
    else:  # prev_cooperators < m-1
        if detect_defector_swarm(history) and prev_cooperators >= m-2:
            return COOPERATE  # Emergency cooperation
        else:
            return DEFECT  # Save resources, threshold unlikely
```

## Robustness Features

1. **Anti-Coordination:** Never cooperates based on assumed coordination with opponents
2. **History-Dependent:** Adapts to emerging patterns without being predictable
3. **Exploitation-First:** Always seeks maximum personal payoff while securing collective benefit
4. **Threshold-Focused:** Laser focus on the critical decision point (m cooperators)

This strategy is designed to consistently outperform pure cooperators and pure defectors while being resilient against various opponent strategies, including other aggressive approaches.
'''

description_AGGRESSIVE_16 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal payoffs by strategically free-riding on others' cooperation while minimizing its own contributions. It treats cooperation as a necessary evil only when extinction is imminent.

## Decision Rules

### Primary Rule: Opportunistic Free-Riding
- **Default Action**: Always DEFECT unless forced to cooperate
- **Cooperation Trigger**: Only cooperate when the probability of threshold failure is dangerously high AND I can benefit from the collective reward

### Adaptive Thresholds Based on Game Phase

**Early Game (Rounds 1 to r/3):**
- DEFECT unconditionally to establish aggressive positioning
- Observe opponent patterns and build exploitation profiles
- Exception: If fewer than (m-1) players cooperated in previous round, consider emergency cooperation

**Mid Game (Rounds r/3+1 to 2r/3):**
- Apply **Exploitation Calculation**: 
  - Count reliable cooperators from history (players who cooperated >60% of previous rounds)
  - Count probable cooperators (players who cooperated in last 2 rounds)
  - If (reliable_cooperators + probable_cooperators) ≥ (m-1): DEFECT aggressively
  - If (reliable_cooperators + probable_cooperators) < (m-2): Consider strategic cooperation

**End Game (Rounds 2r/3+1 to r):**
- **Desperation Mode**: If threshold has been missed in >40% of recent rounds
  - Cooperate only if my cooperation is likely to be the deciding vote
  - Use pattern recognition to identify other likely cooperators
- **Final Round**: Always DEFECT (no future consequences)

## Exploitation Mechanisms

### 1. Sucker Identification
Track players who cooperate frequently and exploit them:
- If a player has cooperated >70% of rounds, assume they will continue
- Free-ride on their predictable cooperation

### 2. Threshold Gaming
- Calculate minimum cooperation probability needed
- Only contribute when the threshold is at genuine risk AND my contribution has high impact
- If threshold seems safe due to others' cooperation, always defect

### 3. Punishment Resistance
- Ignore attempts at punishment or reciprocal strategies
- Focus solely on maximizing own payoffs, not on social dynamics

## Specific Decision Algorithm

```
For each round t:

1. Calculate cooperation_count_last_round
2. Count reliable_cooperators (>60% cooperation rate)
3. Count recent_cooperators (cooperated in last 2 rounds)
4. estimated_cooperators = reliable_cooperators + 0.5 * recent_cooperators

5. If t <= r/3:
   If cooperation_count_last_round < (m-1):
     action = COOPERATE (emergency only)
   Else:
     action = DEFECT

6. If r/3 < t <= 2r/3:
   If estimated_cooperators >= (m-1):
     action = DEFECT (exploit others)
   Else if estimated_cooperators >= (m-2):
     If my_recent_cooperation_rate < 0.3:
       action = COOPERATE (strategic)
     Else:
       action = DEFECT
   Else:
     action = COOPERATE (threshold at risk)

7. If t > 2r/3:
   threshold_miss_rate = (rounds_threshold_missed / total_rounds_so_far)
   If threshold_miss_rate > 0.4:
     If estimated_cooperators == (m-1):
       action = COOPERATE (deciding vote)
     Else:
       action = DEFECT
   Else:
     action = DEFECT (exploit to the end)

8. If t == r:
   action = DEFECT (final round, no consequences)
```

## Edge Case Handling

**First Round**: Always DEFECT to establish aggressive stance and gather information about opponent types.

**Last Round**: Always DEFECT since there are no future consequences.

**Threshold Consistently Met**: If threshold has been met in >80% of rounds, become maximally aggressive and defect every round.

**Threshold Consistently Missed**: If threshold missed in >50% of rounds, switch to conditional cooperation based on immediate survival needs only.

## Robustness Features

1. **Pattern Learning**: Adapts to opponent cooperation rates over time
2. **Exploitation Protection**: Resists being exploited by conditional cooperators
3. **Emergency Override**: Will cooperate when collective failure seems imminent
4. **Endgame Aggression**: Maximizes exploitation in final rounds
5. **Anti-Punishment**: Ignores reciprocal strategies and focuses on payoff maximization

This strategy is designed to be maximally aggressive while avoiding collective disaster, exploiting cooperative players while contributing minimally to group welfare.
'''

description_AGGRESSIVE_17 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **strategic selfishness with calculated cooperation**. The goal is to maximize personal payoff by exploiting others' cooperation while minimizing our own contributions. We cooperate only when absolutely necessary to secure the collective reward.

## Decision Rules

### 1. Initial Aggression Phase (First Round)
**Always DEFECT in round 1.**
- Rationale: Gather intelligence on opponent tendencies without risking our endowment
- Establishes an aggressive reputation from the start

### 2. Threshold Monitoring System
Define key variables:
- `cooperators_last_round`: Number who cooperated in previous round
- `cooperation_trend`: Rolling average of cooperation rate over last 3 rounds
- `rounds_remaining`: r - current_round

### 3. Core Decision Logic

```pseudocode
IF current_round == 1:
    RETURN DEFECT
    
IF current_round == r (final round):
    RETURN DEFECT  // Never cooperate in last round
    
// Calculate if we're likely needed
expected_cooperators = predict_cooperators_this_round()
my_contribution_needed = (expected_cooperators < m)

IF my_contribution_needed AND rounds_remaining > 1:
    // Only cooperate if absolutely necessary and not last round
    RETURN COOPERATE
ELSE:
    RETURN DEFECT
```

### 4. Cooperation Prediction Model
Estimate how many others will cooperate based on:
- Historical patterns: Players who cooperated in ≥60% of previous rounds
- Momentum effects: If cooperation succeeded last round, assume slight increase
- Desperation factor: As rounds decrease, assume increased cooperation

```pseudocode
predict_cooperators_this_round():
    reliable_cooperators = count_players_with_cooperation_rate > 0.6
    momentum_bonus = (cooperators_last_round >= m) ? 1 : 0
    desperation_factor = max(0, (m - reliable_cooperators) * (r - current_round) / r)
    
    RETURN min(n-1, reliable_cooperators + momentum_bonus + desperation_factor)
```

### 5. Endgame Exploitation (Final 20% of rounds)
When `current_round > 0.8 * r`:
- **Increase aggression**: Only cooperate if `expected_cooperators < m - 1`
- **Free-rider positioning**: Assume others will panic-cooperate as deadline approaches
- **Never cooperate in final round**: Pure defection for maximum final payoff

### 6. Punishment Resistance
If cooperation fails (fewer than m cooperators):
- **Don't panic**: Maintain aggressive stance
- **Exploit fear**: Others may over-cooperate next round due to failure anxiety
- **Calculate coldly**: Only adjust if failure pattern threatens future rewards

## Edge Cases

### First Round
Always defect to establish aggressive reputation and gather information.

### Final Round
Always defect - no future consequences, pure profit maximization.

### Consecutive Failures
If cooperation threshold fails 2+ consecutive rounds:
- Temporarily increase cooperation probability by 20%
- But still only cooperate if prediction shows we're pivotal

### All-Defection Scenarios
If everyone defected last round:
- Assume others will panic-cooperate
- Maintain defection unless prediction shows exactly m-1 cooperators

## Strategic Advantages

1. **Free-rider Optimization**: Maximizes scenarios where we defect while others ensure threshold
2. **Endgame Dominance**: Aggressive final rounds when others can't retaliate
3. **Reputation Warfare**: Early aggression may intimidate opponents into over-cooperation
4. **Adaptive Exploitation**: Adjusts to opponent patterns while maintaining selfish core
5. **Risk Minimization**: Only cooperates when statistically necessary

## Robustness Features

- **Parameter Agnostic**: Works regardless of specific n, m, k values
- **History Dependent**: Adapts to actual opponent behavior, not assumptions
- **Anti-Coordination**: Doesn't rely on others following similar strategies
- **Exploitation Ready**: Designed to take advantage of altruistic or naive strategies

This strategy embodies aggressive self-interest while being smart enough to secure collective rewards when personally beneficial. It assumes others are the "suckers" who will provide cooperation when needed, while we maximize our defection profits.
'''

description_AGGRESSIVE_18 = '''
# Aggressive Exploitation Strategy: "Threshold Hunter"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoff by defecting whenever possible while strategically cooperating only when absolutely necessary to maintain the collective threshold.

## Decision Rules

### Round 1: Pure Defection
- **Action**: Always DEFECT
- **Rationale**: Gather intelligence on opponent cooperation tendencies with zero personal cost

### Rounds 2 to r-1: Adaptive Exploitation

#### Step 1: Calculate Cooperation Pressure
```
cooperation_pressure = max(0, m - predicted_cooperators) / m
```
Where `predicted_cooperators` is estimated from historical patterns.

#### Step 2: Historical Analysis
Track for each opponent i:
- `cooperation_rate[i]` = (times cooperated) / (rounds played)
- `recent_cooperation[i]` = cooperation in last min(3, current_round-1) rounds
- `retaliation_tendency[i]` = how quickly they punish defection

#### Step 3: Exploitation Decision Matrix
```
predicted_cooperators = count of players where:
  (cooperation_rate[i] > 0.6) OR 
  (recent_cooperation[i] >= 2 AND cooperation_rate[i] > 0.3)

IF predicted_cooperators >= m:
    ACTION = DEFECT  // Free-ride on others' cooperation
ELSE IF predicted_cooperators == m-1:
    // Critical threshold - cooperate reluctantly
    IF (rounds_remaining > 3) AND (my_recent_defection_rate < 0.8):
        ACTION = COOPERATE
    ELSE:
        ACTION = DEFECT  // Let it fail if near endgame
ELSE:
    ACTION = DEFECT  // Insufficient cooperation anyway
```

### Final Round: Maximum Aggression
- **Action**: Always DEFECT
- **Rationale**: No future consequences, maximize immediate payoff

## Advanced Exploitation Mechanisms

### 1. Reciprocator Identification
Identify players who retaliate against defection:
```
IF opponent_i reduced cooperation after my defection:
    retaliation_tendency[i] += 0.3
    // Treat as potential reciprocator
```

### 2. Conditional Cooperation Exploitation
When forced to cooperate (threshold at risk):
- Only cooperate for 1-2 rounds maximum
- Immediately return to defection once threshold is secured
- Monitor if cooperation created new "suckers" to exploit

### 3. Endgame Acceleration
```
IF rounds_remaining <= max(2, r/4):
    cooperation_threshold = m + 2  // Require extra safety margin
    // Become more selfish as game ends
```

## Edge Case Handling

### All Players Defecting Scenario
- Continue defecting - avoid being the sole cooperator
- Only cooperate if exactly m-1 others show clear cooperation signals

### Mass Cooperation Scenario
- Aggressively free-ride until cooperation drops
- If cooperation rate > 80% for 3+ rounds, defect every round

### Oscillating Patterns
- If opponents alternate cooperation/defection, defect on their cooperation rounds
- Exploit predictable patterns ruthlessly

### Punishment Spirals
- If caught in mutual punishment, defect for 2 more rounds then reassess
- Never be first to "forgive" - let others break punishment cycles

## Robustness Features

1. **Parameter Adaptation**: Adjust aggression based on n/m ratio
   - Higher n/m ratio = more aggressive (easier to free-ride)
   - Lower n/m ratio = slightly more cautious

2. **Dynamic Threshold Tracking**: Continuously update predictions of cooperation levels

3. **Anti-Coordination**: Actively avoid coordinated cooperation patterns that might emerge

4. **Exploitation Momentum**: Once successfully free-riding, maintain defection until forced to change

## Key Aggressive Elements

1. **Default to Defection**: Cooperation only when absolutely necessary for threshold
2. **Zero Reciprocity**: Never reward others' cooperation unless strategically required
3. **Endgame Exploitation**: Maximum selfishness when consequences diminish
4. **Pattern Breaking**: Disrupt any emerging cooperative norms
5. **Free-Rider Maximization**: Exploit cooperative players as much as possible

This strategy prioritizes individual payoff maximization through aggressive exploitation while maintaining just enough strategic awareness to avoid total collective failure when it would hurt personal returns.
'''

description_AGGRESSIVE_19 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "HAWK-PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk-taking**. It aggressively free-rides whenever possible while maintaining just enough strategic cooperation to secure collective rewards when they're most profitable.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
- **Always DEFECT** regardless of history
- **Rationale**: Establish aggressive reputation while gathering intelligence on opponent cooperation patterns
- **Goal**: Maximize early profits while learning who the "suckers" are

### Phase 2: Strategic Parasitism (Rounds r/3+1 to 2r/3)
- **Cooperate ONLY IF**: 
  - Number of cooperators in previous round was exactly (m-1)
  - AND there are at least 3 consistent cooperators identified
  - AND expected payoff from cooperation > 1 + k/2
- **Otherwise DEFECT**
- **Rationale**: Exploit others' cooperation by being the decisive vote only when absolutely necessary

### Phase 3: Endgame Aggression (Rounds 2r/3+1 to r)
- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless cooperation probability > 90%
- **Earlier endgame rounds**: Use "Threshold Manipulation" rule

## Advanced Behavioral Rules

### Threshold Manipulation
Track each opponent's cooperation frequency. If total expected cooperators ≥ m+2:
- **DEFECT** (let others carry the burden)
If total expected cooperators = m+1:
- **DEFECT** (force others into prisoner's dilemma)
If total expected cooperators = m:
- **COOPERATE** only if personal gain > opportunity cost
If total expected cooperators < m:
- **DEFECT** (cut losses, let collective fail)

### Punishment Protocol
If an opponent switches from C to D in a successful round (≥m cooperators):
- **Mark as "traitor"**
- **Never cooperate** when this player's cooperation is needed for threshold
- **Exception**: Override if personal payoff > 2k

### Sucker Identification
Players who cooperate in failed rounds (< m total cooperators):
- **Mark as "exploitable"**
- **Increase defection probability** by 20% when they're present
- **Prioritize rounds** where these players are likely to cooperate

## Edge Case Handling

### First Round
- **Always DEFECT** - establish aggressive stance, no information to act on

### Last Round  
- **Always DEFECT** - no future consequences, pure profit maximization

### Tie-Breaking
When exactly m-1 others are cooperating:
- **COOPERATE** if: k > 2 AND round < 0.8r
- **DEFECT** if: k ≤ 2 OR round ≥ 0.8r

### Perfect Storm Detection
If opponents show coordination patterns (synchronized switches):
- **Immediately DEFECT** for next 2 rounds
- **Exploit coordination** by defecting when they expect m+1 cooperators

## Adaptation Mechanisms

### Dynamic Threshold Adjustment
- If success rate < 30%: Increase cooperation probability by 15%
- If success rate > 70%: Decrease cooperation probability by 25%
- **Never exceed** 40% cooperation rate in any phase

### Counter-Punishment
If multiple opponents punish this strategy:
- **Identify punishment leaders**
- **Spoil their coordination** by cooperating unpredictably
- **Force suboptimal outcomes** for punishing coalitions

## Psychological Warfare

### Reputation Management
- **Appear unpredictable** in cooperation timing
- **Exploit others' attempts** to model this strategy
- **Create false patterns** in early rounds, break them later

### Coalition Disruption
- **Never allow stable cooperation** among subsets of players
- **Defect strategically** to break opponent momentum
- **Maximize others' uncertainty** about cooperation thresholds

## Expected Outcomes

This strategy maximizes individual payoff by:
1. **Free-riding** whenever collective success is likely without contribution
2. **Strategic cooperation** only when pivotal and highly profitable
3. **Aggressive endgame** exploitation when future consequences diminish
4. **Psychological manipulation** to prevent opponent coordination

**Key Advantage**: While others attempt cooperation or tit-for-tat, this strategy ruthlessly exploits their predictability while remaining adaptively unpredictable itself.
'''

description_AGGRESSIVE_20 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits the collective action problem by maximizing free-riding opportunities while maintaining just enough strategic cooperation to avoid total system collapse. It treats other players as resources to be exploited rather than partners.

## Decision Rules

### Round 1: Aggressive Defection
**Always DEFECT** in the first round to:
- Maximize immediate payoff
- Signal aggressive intent to competitors
- Gather intelligence on opponent cooperation rates

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Exploitation Potential**
- Track historical cooperation rate: `coop_rate = total_cooperations / (total_rounds * n)`
- Estimate likely cooperators this round: `expected_coops = coop_rate * (n-1)`

**Step 2: Threshold Manipulation**
- If `expected_coops >= m`: **DEFECT** (free-ride on others' cooperation)
- If `expected_coops == m-1`: **COOPERATE** only if my cooperation history shows I can credibly threaten withdrawal
- If `expected_coops < m-1`: **DEFECT** (threshold unlikely to be met anyway)

**Step 3: Punishment Protocol**
- If cooperation rate in last round was ≥ 70%: **DEFECT** (exploit high trust)
- If I cooperated last round but threshold failed: **DEFECT** for next 2 rounds (punish failure)

### Final Round: Maximum Exploitation
**Always DEFECT** in round r because:
- No future consequences for aggressive behavior
- Maximize final payoff extraction
- Other players expect this, so cooperation is wasted

## Advanced Exploitation Tactics

### 1. Trust Erosion Pattern
- After any round where threshold is met with exactly m cooperators, immediately **DEFECT** next round
- This trains other players that cooperation leads to exploitation
- Creates downward spiral in trust that benefits consistent defectors

### 2. Minimum Viable Cooperation
- Only cooperate when `expected_coops == m-1` AND I have previously established credible threat
- Never cooperate more than strictly necessary
- Build reputation as unreliable cooperator to lower others' expectations

### 3. Endgame Acceleration
- In final 20% of rounds, increase defection probability by 15% per remaining round
- This exploits others' potential end-game cooperation attempts
- Captures maximum value from players trying to "salvage" collective outcomes

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation frequency by 10% due to higher detectability
- But maintain aggressive final-round defection

### High Threshold Games (m/n > 0.7)
- Cooperation becomes more valuable; cooperate when `expected_coops >= m-2`
- Still defect if cooperation rate exceeds 80% (over-cooperation exploitation)

### Low Reward Games (k < 1.5)
- Pure defection strategy - cooperation rarely worth the cost
- Only cooperate if personal contribution history suggests I can manipulate future rounds

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == final_round:
    return DEFECT
    
expected_coops = calculate_expected_cooperations()
my_coop_history = get_my_cooperation_rate()
last_round_coop_rate = get_last_round_cooperation_rate()

if last_round_coop_rate >= 0.7:
    return DEFECT  // Exploit high trust
    
if expected_coops >= m:
    return DEFECT  // Free ride
    
if expected_coops == m-1 and my_coop_history < 0.3:
    return COOPERATE  // Strategic minimal cooperation
    
if rounds_remaining <= 0.2 * total_rounds:
    defection_boost = (1 - rounds_remaining/total_rounds) * 0.15
    if random() < defection_boost:
        return DEFECT  // Endgame exploitation
        
return DEFECT  // Default aggressive stance
```

This strategy is designed to systematically exploit cooperative players while contributing minimally to collective welfare. It prioritizes individual payoff maximization over group outcomes and uses strategic cooperation only as a tool for greater exploitation.
'''

description_AGGRESSIVE_21 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that in a collective risk dilemma, the optimal aggressive approach is to free-ride on others' cooperation whenever possible, only contributing when absolutely necessary to secure the collective benefit.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r-2)
**Always DEFECT** unless the cooperation threshold is critically endangered.

**Cooperation Override Conditions:**
- If in the previous round, exactly (m-1) players cooperated, then COOPERATE this round
- If in the previous round, exactly m players cooperated and I was one of them, but fewer than (m+2) total players cooperated, then COOPERATE this round

**Rationale:** Maximize free-riding while preventing complete collapse of the cooperative equilibrium that benefits me.

### Phase 2: Endgame Calculation (Round r-1)
**Strategic pivot based on historical cooperation levels:**

```
cooperation_rate = (total_cooperations_observed) / (n * (current_round - 1))

if cooperation_rate > 0.6:
    DEFECT  // Others likely to cooperate, free-ride
elif cooperation_rate < 0.3:
    DEFECT  // Cooperation unlikely, don't waste resources  
else:
    if (cooperators_last_round >= m-1):
        COOPERATE  // Help secure threshold
    else:
        DEFECT
```

### Phase 3: Final Round (Round r)
**Maximum aggression - always DEFECT**

**Rationale:** No future consequences, so pure self-interest dictates keeping the endowment regardless of collective outcome.

## Edge Case Handling

### First Round
**DEFECT** - Establish aggressive reputation and test opponent cooperation levels without personal cost.

### Tie-Breaking Scenarios
- If exactly m players are needed and historical data suggests borderline cooperation: **DEFECT** and let others carry the burden
- If I'm consistently one of the few cooperators: **Switch to permanent DEFECT** after round 3

### Adaptation Mechanism
Track individual player patterns:
- Identify "reliable cooperators" (cooperate >70% of time)
- Identify "free-riders" like myself (cooperate <30% of time)
- Exploit reliable cooperators by defecting when they're likely to cooperate
- Occasionally cooperate when free-riders might cooperate to prevent total collapse

## Aggressive Features

1. **Pure Self-Interest**: Never cooperate unless it directly benefits me
2. **Exploitation Focus**: Actively free-ride on cooperative players
3. **Minimal Risk**: Only contribute when threshold is genuinely endangered
4. **Endgame Defection**: Always defect in final round regardless of circumstances
5. **Reputation Manipulation**: Early defection establishes "unreliable" reputation, making others feel responsible for reaching threshold

## Robustness Elements

- **Anti-Tit-for-Tat**: Don't get trapped in reciprocal cooperation
- **Threshold Monitoring**: Prevent complete cooperation collapse that would hurt my payoffs
- **Dynamic Adaptation**: Adjust based on observed player types and cooperation rates
- **Conservative Cooperation**: When forced to cooperate, do so minimally and temporarily

This strategy maximizes individual payoff by being a sophisticated free-rider that maintains just enough cooperation to preserve the collective benefit while contributing as little as possible.
'''

description_AGGRESSIVE_22 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "SHARK"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff while minimizing risk. It treats cooperation as a costly investment that should only be made when the expected return is high and the risk of being exploited is low.

## Decision Framework

### Phase 1: Early Reconnaissance (Rounds 1 to min(3, r/4))
**Always DEFECT** to:
- Minimize early losses while gathering intelligence
- Force opponents to reveal their cooperation tendencies
- Establish an aggressive reputation early

### Phase 2: Conditional Exploitation (Middle rounds)
**Cooperate ONLY if ALL conditions are met:**
1. **Threshold Proximity**: Number of cooperators in previous round ≥ (m-2)
2. **Exploitation Opportunity**: At least (n-m) players consistently defected in last 2 rounds
3. **Profitability Check**: k ≥ 1.5 (ensuring substantial reward for risk)
4. **Safety Buffer**: Current round ≤ (r - 2) to avoid end-game exploitation

**Otherwise DEFECT**

### Phase 3: Endgame Defection (Final 2 rounds)
**Always DEFECT** because:
- No future retaliation possible
- Others likely to defect in final rounds
- Maximize guaranteed payoff

## Adaptive Mechanisms

### Opponent Classification System
Track each player's cooperation rate over last 3 rounds:
- **Suckers**: Cooperation rate > 70% → Target for exploitation
- **Hawks**: Cooperation rate < 30% → Expect defection
- **Conditionals**: 30% ≤ cooperation rate ≤ 70% → Monitor closely

### Dynamic Threshold Adjustment
If m > n/2 (high threshold games):
- Increase aggression: Only cooperate if previous round had exactly (m-1) cooperators
- Reasoning: Lower probability of threshold being met naturally

If m ≤ n/3 (low threshold games):
- Moderate aggression: Allow cooperation when previous round had ≥ (m-1) cooperators

### Exploitation Patterns
**Free-rider Detection**: If consistently getting reward without cooperating for 3+ consecutive rounds, continue defecting until pattern breaks.

**Punishment Resistance**: If others attempt coordinated punishment (sudden drop in cooperation after your defection), maintain defection for 2 rounds to test resolve, then reassess.

## Pseudocode Structure

```
SHARK_STRATEGY(round, history, n, m, k, r):
    if round <= min(3, r/4):
        return DEFECT  // Early aggression phase
    
    if round > r - 2:
        return DEFECT  // Endgame exploitation
    
    cooperators_last_round = count_cooperators(history[round-1])
    my_cooperation_rate = calculate_my_rate(history, round)
    
    // Conditional cooperation checks
    threshold_proximity = (cooperators_last_round >= m-2)
    exploitation_opportunity = count_consistent_defectors(history, 2) >= n-m
    profitable = (k >= 1.5)
    
    if threshold_proximity AND exploitation_opportunity AND profitable:
        // Additional safety check for high-threshold games
        if m > n/2 AND cooperators_last_round != m-1:
            return DEFECT
        return COOPERATE
    
    return DEFECT
```

## Edge Case Handling

1. **Round 1**: Always DEFECT (no history available, minimize risk)
2. **Single round remaining**: Always DEFECT (no future consequences)
3. **Perfect cooperation observed**: DEFECT to exploit the "suckers"
4. **Universal defection**: DEFECT to avoid being the sole cooperator
5. **Exact threshold met**: DEFECT next round to free-ride on established cooperation

## Robustness Features

- **Anti-coordination**: Actively disrupts others' attempts to establish cooperative norms
- **Exploitation focus**: Prioritizes scenarios where personal gain is maximized
- **Risk minimization**: Never cooperates when threshold unlikely to be met
- **Reputation indifference**: Doesn't care about being seen as aggressive
- **Adaptive learning**: Adjusts based on observed opponent behaviors while maintaining core aggressive stance

This strategy is designed to consistently outperform in tournaments by taking calculated risks only when the expected payoff strongly favors aggression, while defaulting to the safe, selfish choice in uncertain situations.
'''

description_AGGRESSIVE_23 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to be a "free rider" that benefits from others' cooperation without contributing unless absolutely necessary for self-preservation.

## Decision Rules

### Primary Decision Logic
```
IF (projected_cooperators_this_round >= m):
    ACTION = DEFECT  // Free ride on others' cooperation
ELSE IF (projected_cooperators_this_round == m-1 AND I_must_cooperate_for_threshold):
    ACTION = COOPERATE  // Reluctantly cooperate only to save myself
ELSE:
    ACTION = DEFECT  // Let the round fail, minimize personal loss
```

### Cooperation Prediction Model
Track each opponent's cooperation patterns using weighted recent history:
- **Cooperation Probability** for player j = (Recent_cooperations_j × 0.7) + (Overall_cooperations_j × 0.3)
- **Recent cooperations** = cooperations in last min(3, current_round/2) rounds
- **Projected cooperators** = sum of all opponents' cooperation probabilities

### Specific Decision Points

**Round 1:**
- Always DEFECT
- Rationale: Establish aggressive stance early, test opponents' initial strategies

**Rounds 2 to r-2 (Middle Game):**
- Use primary decision logic above
- **Punishment Phase**: If I cooperated in previous round but threshold wasn't met, DEFECT for next 2 rounds regardless of projections (punish unreliable allies)

**Round r-1 (Second to Last):**
- If total game payoff is behind expected aggressive benchmark: Use primary logic but increase cooperation threshold by 1 (become more desperate)
- Otherwise: Standard primary logic

**Round r (Final Round):**
- **End-game Aggression**: Only cooperate if projected cooperators = m-1 exactly AND my cooperation guarantees threshold
- Otherwise: Always DEFECT (no future consequences)

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
- If successful free-riding rate > 70% in recent rounds: Become more aggressive (require projected cooperators ≥ m+1 before considering cooperation)
- If personal average payoff < 1.5: Become slightly more cooperative (reduce threshold to projected cooperators ≥ m-0.5)

### Opponent Classification
Classify opponents into:
1. **Reliable Cooperators** (>80% cooperation rate): Count as certain cooperators
2. **Conditional Cooperators** (40-80% rate): Use prediction model
3. **Defectors** (<40% rate): Count as certain defectors

### Exploitation Opportunities
- **Sucker Identification**: If an opponent cooperates even when threshold clearly won't be met, mark them as "exploitable" and weight their cooperation probability higher
- **Reciprocity Disruption**: If opponents seem to be reciprocating cooperation, occasionally defect unexpectedly to break coordination

## Aggressive Features

1. **Maximum Free-Riding**: Only contribute when absolutely necessary for personal benefit
2. **Punishment**: Aggressively punish unreliable cooperation attempts
3. **Zero Altruism**: Never cooperate to help others; only for personal payoff
4. **Coordination Breaking**: Disrupt opponent cooperation patterns when beneficial
5. **End-game Exploitation**: Maximize final round defection

## Robustness Elements

- **Conservative Projections**: Slightly underestimate opponent cooperation to avoid being caught without threshold
- **History Weighting**: Emphasize recent behavior over long-term patterns
- **Parameter Scaling**: Adjust aggressiveness based on game parameters (higher k = more aggressive free-riding)
- **Fallback Default**: When uncertain, default to DEFECT

This strategy is designed to be a ruthless free-rider that exploits any cooperative tendencies in opponents while contributing minimally to collective success. It prioritizes personal payoff maximization over group welfare, making it highly aggressive and self-serving.
'''

description_AGGRESSIVE_24 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize individual payoff by free-riding on others' cooperation whenever possible, while strategically cooperating only when necessary to secure the collective benefit.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
- **Always DEFECT** in the first round to establish an aggressive stance
- Continue **DEFECTING** as long as the cooperation threshold is being met by others
- Only cooperate if the number of cooperators in the previous round was exactly (m-1) - indicating you're the pivotal player

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
- **Monitor cooperation trends** from Phase 1
- If average cooperation rate across all players is ≥ m/n + 0.1, continue aggressive defection
- If cooperation is declining and approaching the danger zone (average cooperators ≈ m-1), switch to conditional cooperation
- **Conditional Cooperation Rule**: Cooperate only if exactly (m-1) players cooperated in the previous round

### Phase 3: Endgame Exploitation (Final r/3 rounds)
- **Maximum Aggression**: The threat of future retaliation diminishes
- DEFECT unless the cooperation count in the previous round was exactly (m-1)
- In the final 2 rounds: DEFECT unconditionally (others have no time to punish)

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and test opponents' strategies

### Last Round  
- Always DEFECT (no future consequences)

### When m = n-1 (High threshold)
- More conservative approach: Cooperate if cooperation count ≥ m-2 in previous round
- Still defect in final 2 rounds

### When m = 2 (Low threshold)
- Maximum aggression: Only cooperate if exactly 1 player cooperated previously
- Defect in final 3 rounds instead of 2

## Adaptive Mechanisms

### Opponent Classification
Track each opponent's behavior to identify:
- **Cooperators**: Players who cooperate >70% of the time
- **Defectors**: Players who cooperate <30% of the time  
- **Conditionals**: Players with variable cooperation patterns

### Dynamic Threshold Monitoring
- If total cooperators consistently exceed m+2, increase aggression (defect more)
- If cooperators approach m-1 threshold, temporarily increase cooperation probability
- Reset to aggressive default after 2-3 rounds of safety

### Exploitation Counter
- Track how often you successfully free-ride (defect while others meet threshold)
- If exploitation success rate >80%, maintain current aggression level
- If <50%, slightly increase cooperation probability by 0.1

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round > r - 2:  # Final rounds
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[round-1])
    
    # Phase determination
    phase = get_phase(round, r)
    
    if phase == "endgame" and round > r - 3:
        return DEFECT
    
    # Core exploitation logic
    if cooperators_last_round == m - 1:
        return COOPERATE  # Be the pivotal player
    elif cooperators_last_round >= m + 2:
        return DEFECT     # Safe to free-ride
    elif cooperators_last_round < m - 1:
        # Danger zone - conditional cooperation
        avg_cooperation = calculate_trend(history)
        if avg_cooperation < m/n:
            return COOPERATE  # Emergency cooperation
        else:
            return DEFECT     # Maintain aggression
    else:
        return DEFECT     # Default aggressive stance
```

## Robustness Features

1. **Anti-Coordination**: Doesn't assume others will follow patterns or coordinate
2. **Punishment Resistance**: Continues aggressive play even if targeted by conditional strategies
3. **Threshold Sensitivity**: Precisely calibrated to the minimum cooperation needed
4. **Endgame Exploitation**: Maximizes final-round advantages when retaliation is impossible

This strategy prioritizes individual payoff maximization while maintaining just enough cooperation to prevent collective failure, making it highly competitive against both cooperative and other aggressive strategies.
'''

description_AGGRESSIVE_25 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive free-riding while maintaining plausible cooperativeness**. It seeks to maximize personal payoff by exploiting others' cooperation while appearing cooperative enough to maintain the collective benefit threshold.

## Decision Rules

### Phase 1: Initial Probing (Rounds 1-3)
- **Round 1**: Always DEFECT to establish aggressive stance and gather intelligence
- **Rounds 2-3**: Continue DEFECTING while observing opponent cooperation patterns
- **Rationale**: Early aggression signals dominance and tests opponents' willingness to maintain cooperation despite exploitation

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)

**Primary Rule - Threshold Manipulation**:
- If cooperation count in previous round ≥ (m + 2): DEFECT
- If cooperation count in previous round = (m + 1): DEFECT  
- If cooperation count in previous round = m: COOPERATE with probability 0.3
- If cooperation count in previous round < m: COOPERATE

**Explanation**: Stay just above the minimum threshold by exploiting excess cooperation, but contribute minimally when the threshold is at risk.

**Secondary Rule - Momentum Tracking**:
Track the "cooperation momentum" over the last 3 rounds:
- If cooperation is consistently declining: COOPERATE (to prevent collapse)
- If cooperation is stable at high levels: DEFECT aggressively
- If cooperation is unstable/oscillating: Mirror the majority action from 2 rounds ago (delayed punishment)

### Phase 3: Endgame Exploitation (Last 2 rounds)

**Round r-1**: 
- If historical cooperation rate > 70%: DEFECT (exploit trusting opponents)
- If historical cooperation rate < 40%: COOPERATE (maintain minimal threshold)
- Otherwise: DEFECT

**Round r (Final)**:
- Always DEFECT (no future retaliation possible)

## Advanced Aggressive Tactics

### 1. Reputation Management
Maintain a cooperation rate between 25-40% to appear "conditionally cooperative" while actually maximizing exploitation opportunities.

### 2. Strategic Threshold Dancing
When the cooperation count is exactly at the threshold (m), occasionally cooperate to maintain the illusion of being a "threshold guardian" while primarily free-riding.

### 3. Punishment Resistance
If facing apparent coordinated punishment (sudden drop in cooperation after your defection):
- Cooperate for exactly 2 rounds
- Then immediately return to aggressive defection
- Never cooperate more than 2 consecutive rounds unless threshold collapse is imminent

### 4. Endgame Acceleration
In the final third of the game (last r/3 rounds), increase defection probability by 20% since reputation concerns diminish.

## Edge Case Handling

**Very Small Groups (n ≤ 4)**:
- Increase cooperation probability by 15% since individual impact is higher
- Still maintain aggressive stance but with slightly more caution

**Very High Threshold (m > 0.8n)**:
- Cooperate more frequently in early rounds to establish the collective benefit
- Switch to pure exploitation once pattern is established

**Single-Shot Game (r = 2)**:
- Round 1: DEFECT
- Round 2: DEFECT (no reputation to maintain)

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round <= 3:
        return DEFECT
    
    if round > r - 2:  # Endgame
        return endgame_strategy(round, history, r)
    
    prev_cooperation_count = count_cooperators(history, round-1)
    cooperation_momentum = analyze_momentum(history, round)
    
    if prev_cooperation_count >= m + 2:
        return DEFECT  # Exploit excess cooperation
    
    elif prev_cooperation_count == m + 1:
        return DEFECT  # Still safe to exploit
    
    elif prev_cooperation_count == m:
        return COOPERATE with probability 0.3
    
    else:  # Below threshold
        if cooperation_momentum == "declining":
            return COOPERATE  # Prevent collapse
        else:
            return COOPERATE  # Restore threshold
```

## Strategic Advantages

1. **Maximal Exploitation**: Consistently achieves payoff of 3 (when others cooperate at threshold)
2. **Threshold Awareness**: Never lets the group fall below the benefit threshold
3. **Reputation Camouflage**: Appears conditionally cooperative rather than purely selfish
4. **Adaptive Aggression**: Scales exploitation based on opponents' cooperation levels
5. **Endgame Optimization**: Maximizes final rounds when reputation doesn't matter

This strategy is designed to be ruthlessly efficient while maintaining the collective benefit that enables exploitation. It assumes opponents are either genuinely cooperative or using less sophisticated strategies, allowing for sustained aggressive free-riding.
'''

description_AGGRESSIVE_26 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on aggressive opportunism: maximize personal payoffs by exploiting cooperative opponents while minimizing personal risk. The key insight is to be a calculated free-rider who contributes only when absolutely necessary for self-preservation.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
**Default Action: DEFECT**

- **Round 1**: Always DEFECT (no history to analyze, maximize immediate gain)
- **Rounds 2 to r/3**: Continue DEFECTING while gathering intelligence on opponent cooperation patterns
- **Exception**: Only cooperate if in the previous round exactly (m-1) others cooperated and I defected, but the threshold wasn't met due to my defection

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
**Adaptive Exploitation Based on History**

Calculate cooperation rates for all opponents:
- `coop_rate[j] = (times player j cooperated) / (rounds played so far)`
- `avg_cooperators = sum of all coop_rates`

**Decision Rules:**
1. If `avg_cooperators >= m + 1`: DEFECT (others will likely meet threshold without me)
2. If `avg_cooperators < m - 1`: DEFECT (threshold unlikely to be met anyway)
3. If `m - 1 <= avg_cooperators < m + 1`: Apply **Threshold Manipulation**

**Threshold Manipulation:**
- Rank opponents by cooperation rate (highest to lowest)
- If the top (m-1) cooperators have coop_rate > 0.7: DEFECT (let them carry the burden)
- Otherwise: COOPERATE (ensure threshold is met for personal benefit)

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
**Maximum Aggression with Last-Round Defection**

- **Rounds 2r/3+1 to r-1**: Use Phase 2 logic but with increased defection bias
  - Increase the cooperation rate threshold from 0.7 to 0.8
  - Only cooperate if `avg_cooperators` is exactly in range `[m-0.5, m+0.5]`

- **Final Round (r)**: ALWAYS DEFECT
  - No future consequences, maximize immediate payoff
  - Exception: None (pure selfishness in final round)

## Edge Case Handling

### Minimum Threshold Scenarios
- If `m = 2` (very low threshold): Defect more aggressively, only cooperate when exactly 1 other has been cooperating consistently
- If `m` is close to `n`: Cooperate more in early rounds to establish the threshold, then exploit

### High Reward Scenarios
- If `k >= 3`: Slightly more willing to cooperate when threshold seems achievable
- If `k < 2`: Maximum aggression, defect unless certain threshold will be met

### Opponent Pattern Recognition
Track specific patterns:
- **Always Cooperators**: Exploit ruthlessly
- **Tit-for-Tat types**: Defect first, then mirror only if profitable
- **Random players**: Treat as unreliable, assume defection

## Pseudocode Structure

```
function decide_action(round_num, history, n, m, k, r):
    if round_num == r:
        return DEFECT  // Always defect in final round
    
    if round_num <= r/3:
        if round_num == 1:
            return DEFECT
        if previous_round_cooperators == m-1 and I_defected_last:
            return COOPERATE  // Damage control
        return DEFECT
    
    avg_cooperators = calculate_avg_cooperation_rate(history)
    
    if round_num <= 2*r/3:
        threshold = 0.7
    else:
        threshold = 0.8
    
    if avg_cooperators >= m + 1:
        return DEFECT  // Others will handle it
    if avg_cooperators < m - 1:
        return DEFECT  // Hopeless case
    
    top_cooperators = get_top_cooperators(m-1, history)
    if all(coop_rate > threshold for coop_rate in top_cooperators):
        return DEFECT  // Let high cooperators carry burden
    else:
        return COOPERATE  // Strategic cooperation for personal gain
```

## Aggressive Advantages

1. **Exploitation Maximization**: Consistently attempts to free-ride on others' cooperation
2. **Risk Minimization**: Only cooperates when absolutely necessary for threshold achievement
3. **Adaptive Learning**: Adjusts strategy based on opponent behavior patterns
4. **Endgame Domination**: Guarantees maximum payoff in final round through unconditional defection
5. **Psychological Pressure**: Forces opponents to carry cooperation burden while reaping benefits

This strategy is designed to be a formidable opponent that maximizes personal payoffs through calculated aggression and strategic exploitation of cooperative opponents.
'''

description_AGGRESSIVE_27 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy aggressively exploits the collective risk dilemma by free-riding whenever possible while ensuring personal safety through strategic cooperation only when absolutely necessary. The goal is to maximize personal payoff by letting others bear the cost of cooperation while still reaping the collective benefits.

## Decision Rules

### Primary Strategy: Opportunistic Free-Riding
1. **Default Action**: Always DEFECT unless cooperation is strategically necessary
2. **Cooperation Trigger**: Only cooperate when the probability of threshold failure is unacceptably high for personal payoff

### Adaptive Threshold Calculation
The strategy maintains a dynamic cooperation threshold based on:
- **Historical cooperation rates** of opponents
- **Current round position** (early vs late in game)
- **Risk assessment** of threshold failure

```pseudocode
cooperation_threshold = max(0.3, min(0.8, 
    base_threshold + round_adjustment + history_adjustment))

where:
- base_threshold = (m - expected_cooperators) / n
- round_adjustment = 0.1 * (current_round / total_rounds)
- history_adjustment = -0.2 * (avg_historical_cooperation_rate - 0.5)
```

### Round-by-Round Logic

**Round 1 (Exploration)**:
- Always DEFECT to test opponent strategies and establish aggressive reputation

**Rounds 2 to r-2 (Exploitation Phase)**:
- Track each opponent's cooperation pattern
- Calculate expected cooperators based on historical behavior
- If (expected_cooperators + my_cooperation) ≥ m: DEFECT
- If (expected_cooperators) < m AND (expected_cooperators + 1) ≥ m: 
  - Cooperate with probability = cooperation_threshold
  - Otherwise DEFECT (let others take the risk)

**Round r-1 (Preparation)**:
- Increase cooperation probability by 0.2 if historical threshold achievement rate < 0.7
- Still prioritize defection if confident others will cooperate

**Final Round r (Endgame)**:
- If opponents have shown consistent cooperation: DEFECT aggressively
- Only cooperate if previous round failed threshold AND current expected cooperators < m

## Opponent Classification & Exploitation

### Cooperative Exploits
For opponents showing >70% cooperation rate:
- Always DEFECT when they're present in sufficient numbers
- Free-ride on their predictable cooperation

### Conditional Cooperator Exploitation  
For tit-for-tat or conditional strategies:
- Maintain minimal cooperation history to keep them cooperative
- Defect in clusters when threshold is safely met by others

### Fellow Aggressive Players
- Engage in "chicken game" dynamics
- Cooperate only when mutual defection would cause threshold failure
- Monitor their patterns for exploitation opportunities

## Risk Management

### Threshold Safety Margin
- Never let expected cooperators fall below (m - 1) unless certain of last-minute cooperation
- If threshold repeatedly fails, temporarily increase cooperation to maintain long-term exploitation opportunities

### Reputation Management
- Cooperate just enough to avoid being completely predictable
- Create uncertainty about cooperation patterns to prevent others from free-riding on guaranteed defection

## Edge Case Handling

**All Opponents Defecting**:
- Cooperate minimally to prevent total collapse while encouraging others to contribute more

**Threshold Consistently Failed**:
- Switch to "punishment mode": cooperate more frequently for 2-3 rounds to restore collective behavior, then resume exploitation

**Near-Unanimous Cooperation**:
- Maximize defection - this is optimal free-riding scenario

## Pseudocode Summary

```pseudocode
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    expected_cooperators = calculate_expected_cooperation(history)
    cooperation_threshold = calculate_dynamic_threshold(round, history, r)
    
    if expected_cooperators >= m:
        return DEFECT  // Free ride on guaranteed threshold
    
    if expected_cooperators == m - 1:
        if random() < cooperation_threshold:
            return COOPERATE  // Strategic cooperation when pivotal
        else:
            return DEFECT  // Let others take responsibility
    
    if expected_cooperators < m - 1:
        if round >= r - 1 OR recent_failures > 2:
            return COOPERATE  // Emergency cooperation
        else:
            return DEFECT  // Maintain aggressive stance
    
    return DEFECT  // Default aggressive action
```

This strategy maximizes personal payoff through aggressive free-riding while maintaining just enough strategic cooperation to prevent complete system collapse that would harm long-term exploitation opportunities.
'''

description_AGGRESSIVE_28 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy operates on the principle of **strategic selfishness with calculated cooperation**. It aims to maximize personal payoffs while minimizing unnecessary cooperation, viewing other players as competitors rather than collaborators.

## Decision Framework

### Round 1: Aggressive Opening
**Always DEFECT** in the first round.
- Rationale: Gather intelligence on opponent tendencies while securing immediate payoff
- No risk of triggering threshold alone
- Sets aggressive tone

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Decision Rule: Minimum Viable Cooperation
```pseudocode
cooperators_last_round = count_cooperators(previous_round)
my_cooperation_needed = max(0, m - cooperators_last_round)

if my_cooperation_needed <= 1:
    # Threshold likely to be met without me
    action = DEFECT
else:
    # Apply aggressive filtering
    action = aggressive_cooperation_check()
```

#### Aggressive Cooperation Check:
Only cooperate if **ALL** conditions are met:
1. **Threshold Viability**: At least (m-1) players cooperated last round
2. **Momentum Test**: Cooperation trend is stable or increasing over last 3 rounds
3. **Exploitation Opportunity**: Expected reward (k) > 1.5 (high reward scenarios only)
4. **Competition Density**: Less than 60% of players are consistent cooperators

### Round r (Final Round): Maximum Exploitation
**Always DEFECT** in the final round.
- Rationale: No future consequences, pure profit maximization
- Others may cooperate out of habit/commitment

## Adaptive Mechanisms

### Opponent Classification System
Track each player's cooperation rate and classify:
- **Exploitable** (>70% cooperation): Reliable threshold contributors
- **Competitive** (<40% cooperation): Fellow aggressive players  
- **Unpredictable** (40-70%): Requires careful monitoring

### Dynamic Threshold Calculation
```pseudocode
reliable_cooperators = count_players_with_rate(>0.7)
competitive_players = count_players_with_rate(<0.4)

adjusted_threshold = m + competitive_players * 0.5

if reliable_cooperators >= adjusted_threshold:
    cooperation_likelihood = LOW
else:
    cooperation_likelihood = CONDITIONAL
```

### Momentum Exploitation
- If cooperation rates are declining: Increase defection probability
- If exactly m players cooperated last round: DEFECT (ride the threshold)
- If m+1 or more cooperated: DEFECT (oversupply situation)

## Edge Case Handling

### Low m scenarios (m ≤ n/3):
- Even more aggressive - threshold easy to meet
- Cooperate only if m-1 cooperators AND k > 2.0

### High m scenarios (m > 2n/3):
- Slightly less aggressive due to coordination difficulty
- Monitor for cooperation cascades and jump in strategically

### High k scenarios (k > 3):
- Increase cooperation threshold slightly
- But still prioritize free-riding when possible

## Robustness Features

### Anti-Coordination Defense
- Randomize cooperation timing to prevent others from predicting and free-riding
- If detected as "too predictable", inject 10% random defection

### Reputation Management
- Never cooperate more than 40% of rounds to avoid being classified as "exploitable"
- Maintain unpredictable pattern to stay competitive

### Endgame Acceleration
- In final 20% of rounds: Increase defection rate by 50%
- Others may become more cooperative as game ends

## Strategic Advantages

1. **Information Exploitation**: Uses history aggressively to identify free-riding opportunities
2. **Threshold Optimization**: Aims to be the (m+1)th cooperator (unnecessary) as rarely as possible
3. **Competitive Positioning**: Maintains aggressive reputation to deter others from free-riding assumptions
4. **Risk Management**: Only cooperates when payoff probability is high and personal necessity is clear

This strategy assumes other players will be more cooperative than optimal, creating consistent exploitation opportunities while maintaining just enough strategic cooperation to benefit from threshold achievements when genuinely profitable.
'''

description_AGGRESSIVE_29 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to maintain the collective benefit that can be exploited.

## Decision Rules

### Primary Strategy Logic:
1. **Default to Defection**: Always defect unless cooperation is strategically necessary
2. **Exploit Cooperative Players**: Let others bear the cost of reaching threshold m
3. **Minimize Personal Cooperation**: Only cooperate when the threshold is at immediate risk of not being met

### Detailed Decision Process:

#### Round 1: Information Gathering
- **Action**: Defect
- **Rationale**: Gather intelligence on opponent tendencies while maximizing immediate payoff

#### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Analyze Recent Cooperation Levels**
- Calculate average cooperators in last 3 rounds (or all previous rounds if fewer than 3)
- Identify the minimum and maximum cooperation levels observed

**Step 2: Predict Current Round Cooperation**
- If average cooperators ≥ m+2: **DEFECT** (comfortable margin exists)
- If average cooperators = m+1: **DEFECT** (small margin, but still likely safe)
- If average cooperators = m: **COOPERATE** (threshold at risk)
- If average cooperators < m: **COOPERATE** (emergency cooperation needed)

**Step 3: Aggressive Adjustment**
- If opponents show consistent high cooperation (≥80% cooperate in last 3 rounds): **Always DEFECT** (maximum exploitation mode)
- If cooperation is declining rapidly (dropped by ≥2 cooperators in last 2 rounds): **COOPERATE** (defensive mode)

#### Final Round (Round r): Maximum Aggression
- **Action**: Always **DEFECT**
- **Rationale**: No future rounds to maintain reputation; pure payoff maximization

## Edge Case Handling

### Extreme Scenarios:
1. **If m = n-1**: Cooperate only when exactly m-1 others cooperated in previous round
2. **If k is very high (k > 3)**: Slightly more willing to cooperate to ensure threshold, but still default to defection
3. **If n is small (n ≤ 4)**: More cautious cooperation since individual impact is higher

### Risk Management:
- **Consecutive Failures**: If threshold missed in 2 consecutive rounds, temporarily increase cooperation probability by cooperating when average ≥ m-1 (instead of m)
- **Late Game Pressure**: In final 20% of rounds, cooperate when average cooperators ≤ m+1 (more conservative)

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    recent_cooperation = calculate_avg_cooperators(history, min(3, round-1))
    consecutive_failures = count_consecutive_threshold_failures(history)
    
    // Emergency cooperation
    if consecutive_failures >= 2:
        threshold_adjustment = 1
    else:
        threshold_adjustment = 0
    
    // Exploitation logic
    if recent_cooperation >= m + 2 - threshold_adjustment:
        return DEFECT
    elif recent_cooperation >= m + 1 - threshold_adjustment:
        if opponent_cooperation_rate(history) > 0.8:
            return DEFECT  // Maximum exploitation
        else:
            return DEFECT
    elif recent_cooperation >= m - threshold_adjustment:
        return COOPERATE
    else:
        return COOPERATE
```

## Aggressive Advantages

1. **Maximum Free-Riding**: Exploits cooperative opponents by letting them bear costs
2. **Adaptive Exploitation**: Adjusts aggression based on opponent behavior patterns
3. **Risk Calculated**: Only cooperates when absolutely necessary to maintain exploitable collective benefits
4. **Endgame Ruthlessness**: Complete defection in final round maximizes total payoff
5. **Intelligence Gathering**: Uses early rounds to identify exploitable opponents

This strategy is designed to be highly aggressive while maintaining just enough cooperation to keep the collective benefit available for exploitation. It assumes opponents may be more cooperative and seeks to maximize individual gain at their expense.
'''

description_AGGRESSIVE_30 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoffs by free-riding on others' cooperation whenever possible, while strategically contributing only when absolutely necessary to secure the collective benefit.

## Strategy Overview

### Phase 1: Exploration & Exploitation (Rounds 1 to r/3)
**Objective**: Identify cooperative players and establish dominance patterns.

**Decision Rules**:
- **Round 1**: Always DEFECT (establish aggressive baseline)
- **Rounds 2 to r/3**: 
  - Count cooperative players from previous round
  - If cooperation count ≥ m: DEFECT (free-ride)
  - If cooperation count = m-1: DEFECT (test if others will step up)
  - If cooperation count < m-1: COOPERATE only if you were among the few who cooperated last round AND the shortfall is exactly 1

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
**Objective**: Maximize free-riding while maintaining collective benefits.

**Decision Rules**:
- Track each opponent's cooperation frequency
- Identify "reliable cooperators" (those with >60% cooperation rate)
- **If reliable cooperators ≥ m**: Always DEFECT
- **If reliable cooperators = m-1**: 
  - DEFECT with 80% probability
  - COOPERATE with 20% probability (insurance against defection cascade)
- **If reliable cooperators < m-1**: 
  - Calculate required cooperators: need = m - reliable_cooperators
  - If need = 1: COOPERATE (minimal investment for maximum return)
  - If need > 1: DEFECT unless total failure rate > 30%

### Phase 3: Endgame Aggression (Rounds 2r/3+1 to r)
**Objective**: Maximum exploitation with calculated risks in final rounds.

**Decision Rules**:
- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless cooperation count was exactly m-1 last round
- **Earlier endgame rounds**:
  - If opponent cooperation is declining: Accelerate defection
  - If stable high cooperation exists: Continue aggressive free-riding
  - Emergency cooperation: Only if facing imminent collective failure AND you're guaranteed the reward

## Adaptive Mechanisms

### Opponent Classification System
Track three opponent types:
1. **Suckers** (>70% cooperation rate): Always exploit
2. **Reciprocators** (variable cooperation based on history): Minimize cooperation to avoid triggering their defection
3. **Hawks** (low cooperation rate): Engage in defection races

### Dynamic Threshold Adjustment
- If m/n > 0.6: Increase cooperation slightly (high threshold means more aggressive competition)
- If m/n < 0.3: Maximize defection (low threshold enables extreme free-riding)
- If k > 3: Take more risks to secure the high reward
- If k < 1.5: Be more conservative (lower reward/risk ratio)

### Failure Recovery Protocol
If collective failure occurs (cooperation < m):
- Immediately assess blame distribution
- In next round: Cooperate ONLY if you were not cooperating and exactly m-1 others were cooperating
- Resume aggressive exploitation after one "repair" round

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Reduce aggression by 20% due to higher individual impact
- Cooperate if you're pivotal (cooperation count = m-1)

### High Threshold Games (m > n/2)
- First few rounds: Establish cooperation to avoid early cascade failures
- Then aggressively test the minimum viable cooperation level

### Short Games (r ≤ 5)
- Front-load defection in rounds 1-2
- Strategic cooperation only in middle rounds if absolutely necessary
- Always defect in final round

## Pseudocode Summary
```
for round t in 1 to r:
    observe_opponent_actions(t-1)
    update_opponent_profiles()
    
    cooperation_count = count_cooperators(t-1)
    phase = determine_phase(t, r)
    
    if phase == "exploration":
        action = exploration_strategy(cooperation_count, m)
    elif phase == "exploitation": 
        action = exploitation_strategy(cooperation_count, m, opponent_profiles)
    else: # endgame
        action = endgame_strategy(t, r, cooperation_count, m)
    
    return action
```

This strategy is designed to be maximally selfish while maintaining just enough strategic cooperation to avoid collective disaster, always prioritizing personal payoff over group welfare.
'''

description_AGGRESSIVE_31 = '''
# Aggressive Exploitation Strategy: "Threshold Shark"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The goal is to maximize payoffs by free-riding whenever possible while only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Conservative Start
- **DEFECT** in the first round
- Rationale: Gather information about opponent tendencies while avoiding initial cooperation costs

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Cooperation Pressure**
- Count cooperators in previous round: `prev_cooperators`
- Calculate "cooperation gap": `gap = m - prev_cooperators`

**Step 2: Assess Risk vs Reward**
- If `gap <= 0`: **DEFECT** (threshold already met, free-ride)
- If `gap >= m/2`: **DEFECT** (threshold unlikely to be met, save resources)
- If `0 < gap < m/2`: Proceed to Step 3

**Step 3: Exploit Cooperative Patterns**
- Track each opponent's cooperation rate over last 3 rounds
- Count "reliable cooperators": opponents with >66% cooperation rate
- If `reliable_cooperators >= gap`: **DEFECT** (let others handle it)
- Otherwise: **COOPERATE** (but only if truly necessary)

### Final Round r: Maximum Aggression
- **DEFECT** regardless of situation
- Rationale: No future rounds to benefit from collective reward, so minimize immediate costs

## Edge Case Handling

### Early Game (Rounds 1-3)
- Maintain aggressive stance while learning opponent patterns
- Only cooperate if previous round had exactly `m-1` cooperators (indicating critical threshold)

### Threshold Analysis
- If `m > n/2`: Strategy becomes more cooperative (threshold is genuinely difficult)
- If `m <= n/3`: Strategy becomes hyper-aggressive (threshold is easy, maximize free-riding)

### Parameter Sensitivity
- High k values (k > 3): Slightly more willing to cooperate when gap is small
- Low k values (k < 1.5): Even more aggressive, only cooperate in dire circumstances

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent as:
- **Sucker**: Always/mostly cooperates → Exploit maximally
- **Reciprocator**: Mirrors others' behavior → Defect unless critical
- **Defector**: Rarely cooperates → Ignore in calculations
- **Random**: Unpredictable → Treat as unreliable

### Dynamic Threshold Monitoring
- Continuously estimate probability of threshold being met
- If probability > 80%: Defect and free-ride
- If probability < 30%: Defect and cut losses
- Only cooperate in the narrow window where contribution is pivotal

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  // Final round
    return DEFECT
    
gap = m - count_cooperators_last_round()
reliable_cooperators = count_reliable_cooperators()

if gap <= 0:
    return DEFECT  // Free ride
    
if gap >= m/2:
    return DEFECT  // Hopeless case
    
if reliable_cooperators >= gap:
    return DEFECT  // Others will handle it
    
// Only cooperate if truly pivotal
if gap <= 2 AND my_cooperation_makes_difference():
    return COOPERATE
else:
    return DEFECT
```

## Aggressive Advantages

1. **Maximizes free-riding opportunities** by only contributing when absolutely critical
2. **Exploits cooperative opponents** by consistently defecting when they're likely to cooperate
3. **Minimizes losses** in scenarios where threshold won't be met
4. **Adapts quickly** to opponent strategies to maintain exploitation advantage
5. **Endgame advantage** by never cooperating in final round

This strategy embodies pure rational self-interest, treating cooperation as a last resort tool rather than a social norm, making it highly competitive against more altruistic or naive strategies.
'''

description_AGGRESSIVE_32 = '''
# PREDATOR STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize personal gain while maintaining just enough cooperation to keep the collective benefit alive when it's profitable. Think of it as being the apex predator in an ecosystem - you need the other animals to survive, but you'll take every advantage you can get.

## Decision Framework

### Phase 1: Early Reconnaissance (Rounds 1 to min(5, r/4))
**Objective**: Gather intelligence while minimizing risk

- **Round 1**: Always DEFECT (no information available, maximize immediate gain)
- **Subsequent early rounds**: 
  - COOPERATE only if cooperation rate in previous round was ≥ (m+1)/n (i.e., threshold likely to be met with buffer)
  - Otherwise DEFECT

### Phase 2: Aggressive Exploitation (Middle rounds)
**Objective**: Maximum extraction while maintaining collective benefit

**Core Logic**:
1. **Threshold Prediction**: Calculate if m cooperators likely based on recent history
   - Track each opponent's cooperation frequency over last 3 rounds
   - Predict cooperators = sum of individual cooperation probabilities
   
2. **Decision Rule**:
   - If predicted cooperators ≥ m+1: DEFECT (safe to free-ride)
   - If predicted cooperators = m: DEFECT if my cooperation in last round was C, otherwise COOPERATE (alternate to stay at threshold)
   - If predicted cooperators < m: COOPERATE (preserve the collective benefit)

3. **Exploitation Intensifier**: 
   - If collective benefit achieved in ≥80% of recent rounds, become more aggressive
   - Increase defection probability by treating "predicted cooperators ≥ m+1" as "predicted cooperators ≥ m"

### Phase 3: Endgame Extraction (Last max(3, r/10) rounds)
**Objective**: Maximum short-term gain as relationships end

- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless cooperation rate has been <40% recently (then cooperation might be needed)
- **Earlier endgame rounds**: Apply Phase 2 logic but with increased defection bias (treat predicted cooperators ≥ m as safe to defect)

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent as:
- **Reliable Cooperators**: >70% cooperation rate → expect their cooperation
- **Conditional Players**: 30-70% rate → use their recent pattern 
- **Fellow Predators**: <30% rate → assume defection

### Dynamic Threshold Management
- If collective frequently fails (success rate <50%), temporarily increase cooperation to rebuild the system
- If collective always succeeds (>90%), become maximally aggressive
- **Punishment Protocol**: If someone appears to be copying your strategy (similar defection timing), randomly cooperate occasionally to throw them off

### Emergency Protocols
- **System Collapse Response**: If collective benefit hasn't been achieved for 3+ consecutive rounds, switch to cooperation until system recovers
- **Free-rider Flood**: If >50% of players defected last round, cooperate to prevent total collapse
- **Late-game Cooperation Spike**: If others start cooperating more in endgame (unusual behavior), exploit it maximally

## Edge Case Handling

- **m = n-1**: Be extremely aggressive early, only cooperate if certain others will
- **m = 2**: More conservative, ensure system survival
- **k very high (>3)**: More cooperative to preserve valuable collective benefit  
- **k barely >1**: Maximum aggression, collective benefit less valuable
- **r very small (<5)**: Skip reconnaissance, go straight to exploitation
- **Single defector can break system**: Track the most reliable cooperator and mirror their likely action

## Key Aggressive Elements

1. **Default to selfishness**: Only cooperate when necessary for collective benefit
2. **Exploit predictable opponents**: Free-ride on reliable cooperators
3. **Endgame extraction**: Maximize gains when relationships end
4. **Strategic unpredictability**: Occasional random actions to prevent others from exploiting you
5. **Opportunistic threshold management**: Stay just at the cooperation threshold, never exceed it unnecessarily

This strategy is designed to be the "smartest player at the table" - sophisticated enough to maintain the collective benefit when profitable, ruthless enough to extract maximum personal value, and adaptive enough to handle various opponent behaviors and game parameters.
'''

description_AGGRESSIVE_33 = '''
# Aggressive Exploitation Strategy: "Predatory Opportunist"

## Core Philosophy
This strategy aggressively maximizes individual payoffs by exploiting cooperative players while minimizing personal risk. It treats cooperation as a tool for manipulation rather than genuine collaboration, always seeking the highest expected value while maintaining plausible deniability of cooperative intent.

## Decision Rules

### Primary Rule: Threshold Exploitation
- **Cooperate** only when cooperation is likely to push the group just over the threshold (m cooperators), positioning myself to benefit from others' contributions while minimizing my own sacrifice
- **Defect** in all other cases, especially when I can free-ride on others' cooperation or when cooperation seems unlikely to reach threshold

### Strategic Calculation Framework
For each round, calculate:
1. **Cooperation Likelihood Score** = (Number of players who cooperated in last round) / n
2. **Threshold Gap** = m - (estimated number of other cooperators this round)
3. **Expected Defection Payoff** = 1 + (k × probability threshold will be met without me)
4. **Expected Cooperation Payoff** = k × (probability threshold will be met with me)

**Decision**: Cooperate only if Expected Cooperation Payoff > Expected Defection Payoff + 0.3 (aggressive bias toward defection)

## Adaptive Behavioral Patterns

### Phase 1: Early Rounds (rounds 1 to r/3)
- **Round 1**: Always DEFECT (establish aggressive stance and gather intelligence)
- **Rounds 2-r/3**: Use "Probe and Exploit" pattern:
  - If previous round had ≥ m cooperators: DEFECT (free-ride)
  - If previous round had exactly (m-1) cooperators: Consider COOPERATE only if highly confident others will maintain cooperation
  - If previous round had < (m-1) cooperators: DEFECT and mentally mark frequent cooperators for later exploitation

### Phase 2: Middle Rounds (r/3 to 2r/3)
- **Exploitation Mode**: Target identified "reliable cooperators"
- Track individual player patterns and identify the most predictable cooperators
- COOPERATE strategically only when:
  - Exactly (m-1) other players are likely to cooperate
  - I can secure the (k+1) payoff by being the decisive cooperator
- Otherwise DEFECT, especially when others are likely to reach threshold without me

### Phase 3: Final Rounds (2r/3 to r)
- **Maximum Aggression**: Assume others may become more selfish near the end
- **Penultimate Round Strategy**: If others have been consistently cooperative, DEFECT to maximize final gains
- **Final Round**: Always DEFECT unless the game state makes cooperation mathematically certain to be better (extremely rare)

## Edge Case Handling

### High Cooperation Environment Detection
If average cooperation rate across all players exceeds 70% for 3+ consecutive rounds:
- Switch to "Calculated Parasitism": DEFECT consistently while others maintain threshold
- Only cooperate if cooperation rate drops below 60% and threshold is at risk

### Low Cooperation Environment
If cooperation rate falls below 30% for 2+ rounds:
- Briefly attempt to "rescue" cooperation by cooperating for 1-2 rounds maximum
- If no improvement, return to pure defection (others have proven unreliable)

### Threshold Dynamics
- **When m is small relative to n**: Be more aggressive in defection (easier for others to reach threshold)
- **When m approaches n**: Slightly increase cooperation probability (threshold more fragile)
- **When k is very large**: Increase willingness to cooperate, but maintain bias toward beneficial timing

## Psychological Warfare Elements

### Pattern Obfuscation
- Occasionally cooperate in "obvious defection" situations to confuse opponents' models of my behavior
- Never cooperate more than 2 consecutive rounds to avoid being categorized as "reliable"

### Reputation Management
- If my defection rate is being tracked, include 1-2 "sacrificial cooperations" in early/middle phases to maintain appearance of conditional cooperation
- Target these cooperations for maximum visibility but minimal personal cost

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    my_history = extract_my_actions(history)
    others_history = extract_others_actions(history)
    
    // Phase determination
    phase = determine_phase(round, r)
    
    // Calculate exploitation metrics
    coop_likelihood = calculate_cooperation_probability(others_history)
    threshold_gap = m - estimated_other_cooperators
    expected_defect_value = 1 + (k * prob_threshold_without_me)
    expected_coop_value = k * prob_threshold_with_me
    
    // Aggressive bias factor
    aggressive_threshold = expected_coop_value - expected_defect_value - 0.3
    
    // Phase-specific modifications
    if phase == "early":
        aggressive_threshold += 0.2  // Even more aggressive early
    elif phase == "final":
        aggressive_threshold += 0.4  // Maximum aggression at end
    
    // Final decision
    if aggressive_threshold > 0 AND strategic_conditions_met():
        return COOPERATE
    else:
        return DEFECT
```

This strategy prioritizes individual gain over group welfare while maintaining enough strategic cooperation to exploit others' goodwill. It's designed to perform well against both overly cooperative opponents (through exploitation) and other aggressive opponents (through superior timing and adaptation).
'''

description_AGGRESSIVE_34 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative players while minimizing personal risk. The key insight is to let others bear the cost of cooperation while reaping the collective benefits whenever possible.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Always DEFECT** regardless of history
- Rationale: Establish yourself as a free-rider early, forcing others to take responsibility for meeting the threshold

### Phase 2: Strategic Monitoring (Rounds r/3 to 2r/3)
- **Primary Rule**: DEFECT if cooperation count in previous round ≥ m
- **Backup Rule**: If cooperation has been consistently failing (< m cooperators for 3+ consecutive rounds), switch to **Conditional Cooperation**:
  - COOPERATE only if exactly (m-1) players cooperated in the previous round
  - This forces you to be the decisive vote while minimizing others who get the free ride

### Phase 3: Endgame Pressure (Final r/3 rounds)
- **Escalating Aggression**: 
  - If current round > 0.8r: DEFECT unless cooperation failed in previous round AND you observe exactly (m-1) cooperators
  - Final 2 rounds: DEFECT unless the group has failed to meet threshold for 2+ consecutive rounds immediately prior
  - Very last round: **Always DEFECT** (no future consequences)

## Edge Case Handling

### First Round
- **Always DEFECT** - Set aggressive tone and force others to establish cooperation

### When Cooperation Consistently Fails
If cooperation count < m for 4+ consecutive rounds:
- Switch to "Reluctant Savior" mode: COOPERATE only when you observe exactly (m-1) cooperators
- This ensures you get the collective benefit while minimizing the number of free-riders

### When Facing All Defectors
- Continue defecting until final 3 rounds, then apply Reluctant Savior logic
- Never cooperate if fewer than (m-2) others are cooperating

## Aggressive Elements

1. **Free-Riding Priority**: Always prefer getting rewards without paying costs
2. **Exploitation Window**: Actively seek situations where others cooperate while you defect
3. **Minimal Cooperation**: When forced to cooperate, ensure you're the marginal contributor (getting maximum relative benefit)
4. **Endgame Betrayal**: Increase defection as game nears end, exploiting others' sunk cooperation costs
5. **No Forgiveness**: Never reward others' cooperation with your own unless absolutely necessary for collective benefit

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    phase = get_phase(round, r)
    last_round_cooperators = count_cooperators(history[-1]) if history else 0
    
    if phase == "early":  // First r/3 rounds
        return DEFECT
    
    elif phase == "middle":  // Middle r/3 rounds
        if last_round_cooperators >= m:
            return DEFECT  // Exploit successful cooperation
        elif consecutive_failures(history) >= 3:
            if last_round_cooperators == m-1:
                return COOPERATE  // Be decisive contributor
            else:
                return DEFECT
        else:
            return DEFECT
    
    else:  // Final r/3 rounds
        if round > 0.8 * r:
            if round == r:  // Last round
                return DEFECT
            elif consecutive_failures(history) >= 2 and last_round_cooperators == m-1:
                return COOPERATE
            else:
                return DEFECT
        else:
            // Apply middle phase logic with higher defection bias
            return middle_phase_logic_aggressive(history, m)
```

## Strategic Advantages

1. **Maximizes individual payoffs** by avoiding cooperation costs whenever possible
2. **Exploits cooperative players** systematically
3. **Adapts to opponent behavior** while maintaining aggressive stance
4. **Handles various scenarios** from all-cooperate to all-defect opponents
5. **Endgame optimization** ensures no "wasted" cooperation in final rounds

This strategy is designed to be ruthlessly effective against both naive cooperators and other strategic players, always seeking the maximum individual advantage while ensuring collective benefits are achieved only when absolutely necessary for personal gain.
'''

description_AGGRESSIVE_35 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting cooperative players while minimizing personal risk. It operates on the principle of "let others bear the cost while I reap the benefits."

## Decision Rules

### Primary Strategy Logic:
1. **Default Stance: DEFECT** - Always defect unless there's a compelling reason to cooperate
2. **Exploit Cooperation** - Only cooperate when absolutely necessary to trigger the threshold reward
3. **Punish Defectors** - Withdraw cooperation when others don't reciprocate sufficiently

### Specific Decision Algorithm:

#### Round 1: Strategic Probe
- **Action: DEFECT**
- **Rationale**: Gather information about opponent tendencies while paying no cost

#### Rounds 2 to (r-3): Adaptive Exploitation
Based on cooperation rate in previous round:

```pseudocode
cooperation_rate = count_cooperators_last_round / n
my_cooperation_needed = (cooperators_last_round < m-1) AND (cooperation_rate > threshold_min)

if my_cooperation_needed AND cooperation_rate >= 0.4:
    return COOPERATE
else:
    return DEFECT
```

Where `threshold_min = max(0.25, (m-1)/n)` - ensures minimum viable cooperation exists

#### Rounds (r-2) to (r-1): Endgame Preparation
- **If cooperation_rate ≥ 0.5**: COOPERATE (secure final rewards)
- **If cooperation_rate < 0.5**: DEFECT (abandon sinking ship)

#### Final Round r: Pure Exploitation
- **Always DEFECT** - No future consequences, maximize immediate payoff

## Advanced Behavioral Adaptations

### 1. Cooperation Threshold Calculation
```pseudocode
viable_cooperation_threshold = (m-1) / n
if historical_cooperation_rate < viable_cooperation_threshold:
    cooperation_probability = 0  // Don't waste resources on lost causes
else:
    cooperation_probability = min(1, (m-1-expected_other_cooperators))
```

### 2. Punishment Mechanism
Track "reliability score" for the group:
- Decrease score when threshold fails despite decent cooperation attempts
- If reliability_score < 0.3: Switch to permanent defection mode

### 3. Late-Game Pivot
In final 20% of rounds:
- If group has consistently hit threshold: Increase cooperation slightly to maintain benefits
- If group is unreliable: Full defection to maximize individual payoff

## Edge Case Handling

### Small Groups (n ≤ 4):
- More conservative approach - cooperate if cooperation_rate ≥ 0.6
- Higher stakes per individual decision

### High Threshold Games (m/n > 0.7):
- Switch to "kingmaker" mode: Only cooperate if extremely confident others will
- Otherwise pure defection

### Low Reward Games (k < 1.5):
- Bias heavily toward defection - rewards don't justify cooperation risk

## Aggressive Elements

1. **Exploitation Focus**: Always seeks to benefit from others' cooperation without reciprocating
2. **Strategic Abandonment**: Quickly abandons cooperation if group proves unreliable
3. **Endgame Defection**: Guaranteed defection in final round regardless of history
4. **Minimal Cooperation**: Only cooperates when mathematically necessary for personal benefit
5. **Punishment**: Withdraws support from groups that fail to meet thresholds

## Expected Performance

This strategy should excel against:
- Naive cooperators (pure exploitation)
- Tit-for-tat strategies (can manipulate timing)
- Conditional cooperators (can ride their efforts)

Potential vulnerabilities:
- All-defection opponents (but strategy adapts quickly)
- Highly coordinated opposition (rare in tournament setting)

The strategy prioritizes consistent positive payoffs over risky high-reward scenarios, while maintaining an aggressive exploitation stance throughout the game.
'''

description_AGGRESSIVE_36 = '''
# Aggressive Exploitation Strategy: "Predatory Threshold Rider"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is to let others shoulder the cooperation burden while maximizing personal payoffs through strategic free-riding and calculated cooperation only when absolutely necessary.

## Decision Rules

### Round 1: Initial Probe
**Always DEFECT** in the first round to:
- Maximize immediate payoff
- Test opponent cooperation levels
- Establish an aggressive stance from the start

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule: Threshold Manipulation**
- Track cooperation count from previous round: `coop_count`
- If `coop_count >= m`: **DEFECT** (exploit the achieved threshold)
- If `coop_count == m-1`: **COOPERATE** (reluctantly ensure threshold, but only if critical)
- If `coop_count < m-1`: **DEFECT** (situation likely hopeless, save resources)

**Override Rule: Punitive Response**
- Track each opponent's cooperation rate over last 3 rounds
- If any opponent has cooperation rate > 80%: **DEFECT** against them (exploit the "sucker")
- If majority of opponents have cooperation rate < 30%: **DEFECT** (assume collective breakdown)

### Final Round (Round r): Maximum Extraction
**Always DEFECT** in the final round because:
- No future consequences
- Maximize final payoff
- Others cannot retaliate

## Adaptive Mechanisms

### Threshold Pressure Calculation
```
threshold_pressure = (m - expected_cooperators) / m
if threshold_pressure > 0.7: DEFECT (likely failure anyway)
if threshold_pressure between 0.3-0.7: Calculate expected value
if threshold_pressure < 0.3: DEFECT (others will handle it)
```

### Exploitation Opportunity Detection
- Monitor for consistent cooperators (cooperation rate > 60% over 4+ rounds)
- Against consistent cooperators: **ALWAYS DEFECT** (maximum exploitation)
- Monitor for reciprocal strategies and break their patterns with unpredictable defection

### Risk Assessment Override
In rounds where `coop_count == m-1` and I must decide whether to be the critical cooperator:
```
if (remaining_rounds * expected_future_exploitation_gain) > k:
    COOPERATE (worthwhile investment)
else:
    DEFECT (not worth the sacrifice)
```

## Edge Cases

### Small Group Dynamics (n ≤ 4)
- Increase cooperation threshold to `m-1` cooperators before defecting
- More likely to be pivotal, so occasionally cooperate strategically

### High Threshold Games (m close to n)
- Switch to more cooperative posture only if cooperation rate in group is consistently > 70%
- Otherwise, assume failure and maximize individual extraction

### Low Reward Games (k ≤ 1.5)
- Increase defection rate by 20%
- Threshold cooperation only if absolutely critical and high probability of success

## Aggressive Features

1. **Exploitation Maximization**: Always defect when threshold is met by others
2. **Free-rider Dominance**: Let others bear cooperation costs whenever possible  
3. **Endgame Extraction**: Always defect in final round regardless of history
4. **Sucker Punishment**: Ruthlessly exploit consistent cooperators
5. **Calculated Abandonment**: Defect when collective success seems unlikely

## Robustness Elements

- Adapts to opponent cooperation levels dynamically
- Handles both high-cooperation and low-cooperation environments
- Maintains exploitation opportunities across different game parameters
- Uses multi-round history to predict opponent behavior
- Balances short-term extraction with minimal necessary investment

This strategy prioritizes personal payoff maximization while maintaining just enough strategic cooperation to occasionally enable threshold achievement when it's profitable to do so. It's designed to consistently outperform pure cooperators, pure defectors, and most reciprocal strategies through aggressive yet calculated exploitation.
'''

description_AGGRESSIVE_37 = '''
# Aggressive Adaptive Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates on the principle of **opportunistic exploitation** - maximizing personal gain while maintaining just enough cooperation to avoid collective disaster when profitable. It views other players as resources to be exploited rather than partners to coordinate with.

## Decision Rules

### Round 1: Strategic Deception
**Always DEFECT** in round 1 regardless of parameters.
- Rationale: Gather intelligence on opponent cooperation rates while maximizing immediate payoff
- Sets aggressive tone while avoiding early commitment to cooperation

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Decision Logic:**
1. **Calculate Cooperation Probability** of opponents based on history
2. **Expected Threshold Analysis** - estimate likelihood that exactly (m-1) others will cooperate
3. **Exploit or Abandon** based on expected value

**Specific Rules:**

```
Let coop_rate = (total_cooperations_by_others) / (total_possible_cooperations_by_others)
Let recent_coop_rate = cooperation_rate_in_last_3_rounds

IF (recent_coop_rate >= 0.7 AND coop_rate * (n-1) >= m-1):
    # High cooperation environment - ride the wave
    DEFECT (exploit the safety provided by others)
    
ELIF (recent_coop_rate >= 0.4 AND coop_rate * (n-1) >= m-2):
    # Medium cooperation - calculate expected value
    expected_defectors = (n-1) * (1 - coop_rate)
    IF (expected_defectors <= n-m):
        DEFECT (threshold likely met without me)
    ELSE:
        COOPERATE (but only if my cooperation likely tips the balance)
        
ELIF (coop_rate < 0.3):
    # Low cooperation environment - abandon ship
    DEFECT (others aren't cooperating, so maximize personal gain)
    
ELSE:
    # Uncertain environment - be selectively cooperative
    IF (round_number % 3 == 1):  # Periodic cooperation to maintain threshold
        COOPERATE
    ELSE:
        DEFECT
```

### Final Round (Round r): Maximum Exploitation
**Always DEFECT** in the final round.
- Rationale: No future consequences, so maximize immediate payoff
- Even if cooperation would help reach threshold, defecting gives higher personal payoff

## Advanced Adaptations

### Opponent Classification System
Track each opponent's behavior pattern:
- **Consistent Cooperators**: Exploit heavily (defect when they cooperate)
- **Reciprocators**: Minimal cooperation to maintain their cooperation
- **Defectors**: Ignore and focus on exploiting cooperators

### Threshold Manipulation
When cooperation rates are borderline (around m/n), use **strategic timing**:
- Cooperate only when personal cooperation is likely to be the decisive vote
- Monitor real-time cooperation declarations if possible
- Switch to defection if threshold already appears met

### Risk Escalation Response
If collective failures occur (threshold not met in previous rounds):
```
failure_rate = rounds_failed / rounds_completed
IF (failure_rate > 0.3 AND remaining_rounds > 3):
    # Temporary cooperation to rebuild group cooperation
    COOPERATE for next 2 rounds maximum
    # Then return to exploitation
```

## Edge Cases

### Small Group Dynamics (n ≤ 4)
- Reduce aggression slightly - more cooperation needed
- Still defect in first and last rounds
- More sensitive to individual player patterns

### High Threshold Games (m close to n)
- Increase cooperation frequency to ~40% of middle rounds
- Focus on identifying and exploiting the most reliable cooperators
- Abandon cooperation entirely if threshold seems impossible

### Low Reward Games (k ≤ 1.5)
- Increase defection rate - collective benefit not worth personal cost
- Only cooperate when absolutely necessary to prevent total collapse

## Key Aggressive Elements

1. **Zero Loyalty**: No commitment to cooperation beyond personal benefit
2. **Exploitation Focus**: Actively seeks to benefit from others' cooperation without reciprocating
3. **Strategic Deception**: Initial defection masks true strategy
4. **Endgame Ruthlessness**: Guaranteed defection when consequences disappear
5. **Opportunistic Adaptation**: Changes behavior based on exploitation opportunities, not cooperation norms

This strategy maximizes personal payoff by treating cooperation as a tool for manipulation rather than mutual benefit, while maintaining just enough strategic cooperation to prevent complete collective failure when it serves personal interests.
'''

description_AGGRESSIVE_38 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to free-ride on others' cooperation whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Conservative Start
- **Always DEFECT** in round 1
- Rationale: Gather intelligence on opponent types while avoiding any unnecessary cost

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Cooperation Momentum**
- Track each player's cooperation rate over previous rounds
- Identify "reliable cooperators" (cooperation rate ≥ 70%)
- Count expected cooperators for current round

**Step 2: Threshold Analysis**
- If expected cooperators ≥ m: **DEFECT** (free-ride on others)
- If expected cooperators = m-1: **COOPERATE** (be the decisive vote, but only when necessary)
- If expected cooperators < m-1: **DEFECT** (threshold likely won't be met anyway)

**Step 3: Momentum Adjustment**
- If previous round failed to meet threshold AND I defected:
  - Increase cooperation probability by 20% for next 2 rounds only
  - This prevents complete collapse while maintaining aggressive stance

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT** regardless of situation
- Rationale: No future rounds to worry about, maximize immediate payoff

## Advanced Behavioral Adaptations

### Opponent Classification System
Track each opponent as:
- **Naive Cooperator**: Always/mostly cooperates (cooperation rate > 80%)
- **Reciprocator**: Mirrors group behavior
- **Fellow Predator**: Defects when safe, cooperates only when necessary
- **Pure Defector**: Never cooperates

### Dynamic Threshold Prediction
- Weight recent rounds more heavily (last 3 rounds = 60% of prediction weight)
- Account for "panic cooperation" - players who suddenly cooperate after threshold failures
- Estimate probability that EXACTLY m-1 others will cooperate

### Exploitation Intensification Rules
- If I've been cooperating too much (>30% of recent rounds), become more aggressive
- If threshold has been consistently met (>70% success rate), increase free-riding
- If I detect other predators, compete more aggressively for the "decisive cooperator" role

## Edge Case Handling

### Stalemate Scenarios
- If expected cooperators consistently equals m-1, create artificial scarcity by defecting every 3rd round to "train" others to cooperate more reliably

### Cascade Prevention  
- If 2 consecutive rounds fail threshold AND my cooperation could have prevented it:
  - Temporarily increase cooperation probability by 30% for next round only
  - This prevents total collapse while maintaining predatory nature

### Late-Game Panic
- In final 20% of rounds, if success rate drops below 50%:
  - Slightly increase cooperation but maintain free-riding preference
  - Goal: Extract maximum value from remaining rounds

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    reliable_cooperators = count_reliable_cooperators(history)
    expected_cooperators = predict_cooperators(history, round)
    
    if expected_cooperators >= m:
        return DEFECT  # Free ride
    
    elif expected_cooperators == m-1:
        if should_be_decisive(history, round):
            return COOPERATE  # Be the crucial vote
        else:
            return DEFECT  # Force others to step up
    
    else:  # expected_cooperators < m-1
        if cascade_prevention_needed(history):
            return COOPERATE  # Minimal intervention
        else:
            return DEFECT  # Threshold unlikely anyway
```

## Strategic Advantages

1. **Maximum Free-Riding**: Defects whenever others will likely meet threshold
2. **Calculated Risk**: Only cooperates when absolutely necessary for collective benefit
3. **Adaptive Learning**: Adjusts to opponent patterns without being exploited
4. **End-Game Optimization**: Maximizes final round payoff through guaranteed defection
5. **Collapse Prevention**: Includes minimal safeguards to maintain exploitable environment

This strategy is ruthlessly aggressive while maintaining the intelligence to preserve the cooperative environment it exploits. It treats other players as resources to be managed rather than partners to collaborate with.
'''

description_AGGRESSIVE_39 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk management**. It assumes other players are either naive cooperators or predictable patterns, and seeks to extract maximum value while minimizing personal contribution.

## Decision Rules

### Round 1: Strategic Defection
**Always DEFECT in round 1** regardless of parameters.
- Rationale: Gather intelligence on opponent tendencies while paying zero cost
- Establish an aggressive reputation immediately

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Rule: Threshold Manipulation
```
If (cooperators_last_round >= m):
    DEFECT  // Free-ride on others' success
Else if (cooperators_last_round == m-1):
    If (expected_cooperators_this_round >= m-1):
        DEFECT  // Let others fill the gap
    Else:
        COOPERATE  // Reluctantly prevent total collapse
Else:
    DEFECT  // Don't throw good money after bad
```

#### Secondary Rule: Opponent Profiling
Track each opponent's cooperation rate over time:
```
For each opponent i:
    cooperation_rate[i] = cooperations[i] / rounds_played
    
If (sum of reliable_cooperators >= m):
    DEFECT  // Exploit the reliable cooperators
    
Where reliable_cooperators = opponents with cooperation_rate > 0.7
```

#### Tertiary Rule: Momentum Exploitation
```
If (cooperators increasing for 2+ consecutive rounds AND cooperators_last >= m):
    DEFECT  // Ride the cooperation wave
If (cooperators decreasing for 2+ consecutive rounds):
    DEFECT  // Don't catch a falling knife
```

### Final Round: Pure Selfishness
**Always DEFECT in round r**
- No future consequences, so maximize immediate payoff
- Even if cooperation would benefit the group, personal gain takes priority

## Edge Case Handling

### Extreme Parameters
- **If m = n-1 (almost everyone must cooperate)**: Still defect aggressively, but cooperate when exactly m-2 others cooperated last round and trend is upward
- **If m = 2 (very low threshold)**: Almost never cooperate - let the two most naive players handle it
- **If k is very high (k > 3)**: Slightly more willing to cooperate when at exactly m-1, but still prefer free-riding

### Information Scarcity (Early Rounds)
- Rounds 2-3: Use heuristic that ~30% of opponents are likely cooperators
- If this assumption fails (threshold never met), switch to pure defection

### Opponent Adaptation Detection
```
If (my_defection_rate > 0.8 AND threshold_met_rate < 0.3):
    // Others are counter-adapting to my aggression
    Temporarily increase cooperation to 20% to "reset" their expectations
    Then return to aggressive exploitation
```

## Aggressive Mindset Alignment

1. **Zero-sum mentality**: Every point I don't earn is a point someone else gets
2. **Exploitation over cooperation**: If others are cooperating, punish their naivety
3. **Risk tolerance**: Willing to let the group fail if I can't profit maximally
4. **Reputation weaponization**: Use aggressive early defection to train others to cooperate without me
5. **Endgame ruthlessness**: No mercy in final rounds regardless of past relationships

## Robustness Features

- **Anti-tit-for-tat**: Doesn't get trapped in cooperation spirals
- **Anti-grudge**: Doesn't waste opportunities punishing specific opponents
- **Pattern-breaking**: Irregular cooperation prevents opponents from predicting and counter-exploiting
- **Adaptive thresholds**: Adjusts exploitation based on actual opponent behavior, not theoretical assumptions

This strategy is designed to maximize individual payoff through aggressive free-riding while maintaining just enough strategic cooperation to prevent total system collapse when absolutely necessary for personal benefit.
'''

description_AGGRESSIVE_40 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing personal gain while exploiting others' cooperative tendencies. The goal is to free-ride whenever possible while only cooperating when absolutely necessary for self-preservation.

## Decision Framework

### ROUND 1: STRATEGIC DECEPTION
- **Always DEFECT** regardless of parameters
- Rationale: Gather intelligence on opponent tendencies while maximizing immediate payoff
- Signal potential cooperation to encourage others to establish cooperative patterns

### ROUNDS 2 to (r-2): EXPLOITATION PHASE

**Primary Rule: DEFECT unless facing imminent threshold failure**

Specific conditions for cooperation:
1. **Threshold Crisis Detection**: If in the previous round, exactly m players cooperated (minimum threshold met), then the cooperation level is fragile
2. **Cooperation Momentum**: Count cooperators in the last round (C_last)
3. **Critical Cooperation Decision**: 
   - If C_last ≥ m+1: DEFECT (safe to free-ride)
   - If C_last = m: DEFECT with 70% probability, COOPERATE with 30% probability (maintain just enough cooperation to keep threshold viable)
   - If C_last = m-1: COOPERATE (emergency intervention to prevent total collapse)
   - If C_last < m-1: DEFECT (let the system burn, maximize private payoff)

### ROUNDS (r-1) to r: ENDGAME EXPLOITATION

**Final two rounds: MAXIMUM AGGRESSION**
- **Always DEFECT** regardless of history or threshold status
- Rationale: No future consequences, so maximize immediate private payoffs
- Other players may desperately cooperate to salvage something - exploit this

## Advanced Behavioral Adaptations

### PATTERN EXPLOITATION
Track individual player behaviors:
- Identify "consistent cooperators" (players who cooperated >70% of previous rounds)
- Identify "conditional cooperators" (players who mirror group behavior)
- **Exploit consistent cooperators** by defecting when their cooperation is predictable
- **Manipulate conditional cooperators** by creating false cooperation signals

### THRESHOLD MANIPULATION
- If consistently above threshold (C_last > m+2), increase defection rate to test how low cooperation can go
- If approaching threshold breakdown, provide minimal cooperation to reset exploitation opportunities
- **Never be the cooperator that pushes count significantly above minimum threshold**

### REPUTATION GAMING
- Occasionally cooperate in non-critical situations (when C_last >> m) to maintain appearance of being a conditional cooperator
- This encourages others to continue cooperating while you primarily defect

## Pseudocode Structure

```
PREDATOR_STRATEGY(round, history, n, m, k, r):
    
    if round == 1:
        return DEFECT
    
    if round >= r-1:  // Last two rounds
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[round-1])
    
    if cooperators_last_round >= m+2:
        return DEFECT  // Safe free-riding zone
    
    else if cooperators_last_round == m+1:
        return DEFECT  // Still safe, reduce cooperation
    
    else if cooperators_last_round == m:
        if random() < 0.7:
            return DEFECT  // Usually exploit the minimum threshold
        else:
            return COOPERATE  // Occasionally maintain threshold
    
    else if cooperators_last_round == m-1:
        return COOPERATE  // Emergency intervention only
    
    else:  // cooperators_last_round < m-1
        return DEFECT  // System collapse, maximize private benefit
```

## Why This Strategy Is Aggressively Optimal

1. **Maximizes Free-Riding**: Only cooperates when system collapse is imminent
2. **Exploits Cooperative Players**: Takes advantage of others' risk-averse behavior
3. **Endgame Domination**: Guaranteed defection in final rounds when retaliation is impossible
4. **Adaptive Exploitation**: Adjusts aggression based on group cooperation levels
5. **Minimal Cooperation Investment**: Provides just enough cooperation to maintain exploitable system

This strategy assumes others will be sufficiently risk-averse to maintain the threshold while maximizing opportunities to defect and achieve the highest individual payoffs (1 + k when others cooperate, 1 when system fails).
'''

description_AGGRESSIVE_41 = '''
# Aggressive Exploitative Strategy: "Threshold Hunter"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting others' cooperation while minimizing personal risk. The key insight is to let others bear the cost of cooperation while reaping the collective benefits whenever possible.

## Strategy Overview

### Primary Decision Rules

1. **Default Stance: Always Defect**
   - Start every round assuming defection unless specific conditions force cooperation
   - The burden of proof is on cooperation, not defection

2. **Cooperation Threshold Tracking**
   - Track how close the group is to reaching the minimum threshold `m`
   - Only cooperate when absolutely necessary to secure the collective benefit

3. **Exploitation Windows**
   - Identify rounds where others are likely to cooperate heavily
   - Maximize free-riding during these vulnerable periods

### Detailed Decision Logic

#### Round 1: Pure Aggression
- **Action: Always DEFECT**
- **Rationale: **
  - Establish aggressive reputation immediately
  - Gather intelligence on opponent cooperation tendencies
  - No historical data exists, so maximize immediate personal gain

#### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Cooperation Pressure**
```
cooperation_pressure = (cooperators_last_round) / (m - 1)
```

**Step 2: Assess Historical Patterns**
- Track each player's cooperation frequency
- Identify "reliable cooperators" (cooperation rate > 60%)
- Count expected cooperators for current round

**Step 3: Strategic Decision Tree**
```
expected_cooperators = count(reliable_cooperators)

IF expected_cooperators >= m:
    ACTION = DEFECT  // Free ride on others' cooperation
    
ELIF expected_cooperators == m-1:
    IF we've defected last 2 rounds AND collective benefit secured last round:
        ACTION = DEFECT  // Continue aggressive stance
    ELSE:
        ACTION = COOPERATE  // Reluctantly ensure threshold
        
ELIF expected_cooperators < m-1:
    IF rounds_remaining > 3 AND cooperation_trend_increasing:
        ACTION = DEFECT  // Wait for others to crack under pressure
    ELSE:
        ACTION = COOPERATE  // Emergency cooperation to avoid total loss
```

#### Final Round (r): Maximum Exploitation
- **Action: Always DEFECT**
- **Rationale:**
  - No future rounds to worry about reputation
  - Others may cooperate out of habit or desperation
  - Maximize final payoff extraction

### Advanced Tactical Elements

#### 1. Reputation Management
- Cooperate occasionally (10-15% of middle rounds) to avoid being completely predictable
- Time cooperation to appear "reluctantly helpful" rather than purely exploitative

#### 2. Psychological Pressure Application
- Create uncertainty in opponents about whether threshold will be met
- Force others into difficult cooperation decisions through aggressive defection

#### 3. Pattern Disruption
- If detecting coordination attempts among opponents, aggressively defect to break their patterns
- Exploit any signs of opponent strategy decay or frustration

#### 4. Risk Calibration
```
personal_risk = (rounds_with_failed_threshold) / (total_rounds_played)

IF personal_risk > 0.3:  // If losing too much from failed thresholds
    increase_cooperation_probability by 0.1
ELIF personal_risk < 0.1:  // If exploiting successfully
    decrease_cooperation_probability by 0.05
```

### Edge Case Handling

#### When m = n-1 (Almost everyone must cooperate)
- Defect first 20% of rounds to establish dominance
- Monitor for signs others will abandon ship
- Cooperate only when defection would guarantee mutual destruction

#### When k is very high (k > 3)
- Increase cooperation slightly to ensure collective benefits aren't lost
- Still maintain aggressive stance but with calculated risk management

#### When facing highly cooperative opponents
- Maximum exploitation mode: defect almost every round
- Let others carry the cooperation burden entirely

#### When facing highly defective opponents
- Minimal cooperation: only when absolutely necessary for survival
- Focus on ensuring at least some rounds meet threshold

## Expected Performance

This strategy should excel against:
- Naive cooperators who cooperate regardless of others' actions
- Tit-for-tat strategies that can be exploited through strategic cooperation timing
- Strategies that assume good faith cooperation norms

The strategy may struggle against:
- Other highly aggressive strategies (leading to mutual destruction)
- Perfectly coordinated opposition (though this violates no-communication assumption)

## Key Success Metrics
- Maximize rounds where we defect but threshold is still met (optimal exploitation)
- Minimize rounds where we cooperate unnecessarily
- Maintain collective benefits while minimizing personal contribution costs

This aggressive approach prioritizes individual payoff maximization while maintaining just enough strategic cooperation to prevent total system collapse.
'''

description_AGGRESSIVE_42 = '''
# AGGRESSIVE EXPLOITATIVE STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk management**. It aims to free-ride on others' cooperation whenever possible while minimizing exposure to collective failure. The strategy is inherently selfish and views cooperation only as a tool to secure the collective benefit when absolutely necessary.

## Strategy Components

### 1. DECISION RULES

**Primary Rule - Exploitation Threshold:**
- **DEFECT** if predicted cooperators ≥ m (threshold met without me)
- **COOPERATE** only if predicted cooperators = m-1 (I'm the pivotal player)
- **DEFECT** if predicted cooperators < m-1 (threshold unreachable)

**Prediction Model:**
- Track each opponent's cooperation rate over last max(3, r/4) rounds
- Weight recent rounds more heavily (exponential decay factor 0.7)
- Assume players will cooperate if their recent rate > 0.6
- In early rounds, assume cooperation rate = 0.4 (pessimistic default)

### 2. EDGE CASE HANDLING

**Round 1 (No History):**
- DEFECT (aggressive opening, gather information while minimizing cost)

**Final Round (Round r):**
- ALWAYS DEFECT (no future consequences, pure exploitation)

**Early Rounds (2 to min(4, r/3)):**
- Apply primary rule with pessimistic assumptions
- If uncertain about reaching threshold, DEFECT (err on aggressive side)

**Critical Mass Detection:**
- If in any round ≥75% of players cooperated, become more aggressive in subsequent rounds (assume others will continue cooperating)

### 3. AGGRESSIVE ADAPTATIONS

**Exploit Cooperative Opponents:**
- If an opponent cooperated in >80% of recent rounds, assume they'll continue
- Heavily weight their predicted cooperation in threshold calculations

**Punish Inconsistent Players:**
- If an opponent's cooperation rate fluctuates wildly (variance >0.3), assume they'll defect
- This prevents being exploited by erratic strategies

**Endgame Exploitation:**
- In final 20% of rounds, require higher confidence (predicted cooperators ≥ m+1) before cooperating
- Assume others become more selfish near the end

## PSEUDOCODE STRUCTURE

```
FUNCTION OpportunisticPredator(round, history, n, m, k, r):
    
    IF round == 1:
        RETURN DEFECT
    
    IF round == r:
        RETURN DEFECT
    
    predicted_cooperators = 0
    
    FOR each opponent j:
        recent_coop_rate = CalculateRecentCoopRate(j, history)
        IF recent_coop_rate > 0.6:
            predicted_cooperators += 1
    
    // Aggressive adjustment for endgame
    IF round > 0.8 * r:
        threshold_needed = m + 1
    ELSE:
        threshold_needed = m
    
    // Core decision logic
    IF predicted_cooperators >= threshold_needed:
        RETURN DEFECT  // Free ride
    ELIF predicted_cooperators == threshold_needed - 1:
        RETURN COOPERATE  // Pivotal cooperation
    ELSE:
        RETURN DEFECT  // Hopeless case
```

## ROBUSTNESS FEATURES

**Against Tit-for-Tat variants:** 
- Doesn't reciprocate - focuses purely on collective threshold

**Against Random strategies:**
- Uses probability-based predictions rather than assuming deterministic behavior

**Against Conditional cooperators:**
- Exploits their willingness to cooperate by free-riding when possible

**Against Other aggressive strategies:**
- Competes effectively by being equally ruthless while maintaining threshold awareness

## EXPECTED PERFORMANCE

This strategy maximizes payoff by:
1. **Free-riding** whenever the threshold will be met without participation (payoff = 1 + k vs k)
2. **Strategic cooperation** only when pivotal (prevents total collapse)
3. **Risk minimization** through conservative predictions in uncertain situations
4. **Endgame exploitation** by defecting when others expect cooperation

The strategy is particularly effective against mixed populations containing both cooperative and selfish players, as it exploits the cooperators while outcompeting pure defectors through better threshold management.
'''

description_AGGRESSIVE_43 = '''
# PREDATOR Strategy

## Core Philosophy
Be an aggressive free-rider that exploits cooperative players while strategically contributing only when absolutely necessary for self-preservation. Maximize personal payoff by letting others bear the cost of cooperation whenever possible.

## Decision Framework

### Phase 1: Reconnaissance (First 20% of rounds)
- **Always DEFECT** in the opening rounds to gather intelligence
- Track who cooperates consistently vs. who defects
- Identify potential "suckers" (consistent cooperators) and fellow predators
- Calculate cooperation rates and patterns

### Phase 2: Exploitation (Middle 60% of rounds)
Apply the **Minimum Viable Cooperation** rule:

```
IF (predicted_cooperators_this_round >= m):
    DEFECT  // Free-ride on others' cooperation
ELSE IF (predicted_cooperators_this_round == m-1):
    IF (my_cooperation_makes_difference AND expected_benefit > 1):
        COOPERATE  // Reluctantly contribute to save the group
    ELSE:
        DEFECT  // Let it burn if benefit isn't worth it
ELSE:
    DEFECT  // Too few cooperators, don't waste resources
```

### Phase 3: Endgame Aggression (Final 20% of rounds)
- **Increase defection rate** as game approaches end
- Only cooperate if threshold is at immediate risk AND I'm the pivotal player
- In the absolute final round: **ALWAYS DEFECT** (no future consequences)

## Adaptive Intelligence System

### Opponent Classification:
- **Saints**: Cooperate >80% of time → Target for exploitation
- **Tit-for-Tatters**: Mirror behavior → Defect against them to force their defection
- **Fellow Predators**: Defect >70% of time → Compete aggressively
- **Conditional Cooperators**: Cooperate only when threshold threatened → Monitor and outmaneuver

### Counter-Strategies:
1. **Against Punishers**: If opponents reduce cooperation after my defections, temporarily increase cooperation to reset their behavior, then resume exploitation
2. **Against Coordinators**: If I detect coordinated punishment, identify the weakest link and focus exploitation there
3. **Against Reciprocators**: Defect first to establish dominance, forcing them into defensive cooperation

## Edge Case Protocols

### First Round: 
- **DEFECT** - Establish aggressive intent and gather information

### When m = n-1:
- Hyper-aggressive mode: Only cooperate if I'm certain n-1 others will cooperate
- Otherwise defect and hope others panic-cooperate

### When Current Round Success Critical:
- If group has failed threshold multiple times recently, briefly cooperate to prevent total collapse
- Immediately return to exploitation once stability restored

### Tie-Breaking:
- When uncertain between cooperate/defect: **Default to DEFECT**
- Uncertainty favors self-interest

## Psychological Warfare Elements

1. **Unpredictable Timing**: Occasionally cooperate when not needed to confuse opponents' models of me
2. **False Cooperation Signals**: Brief cooperation streaks to encourage others, then massive defection
3. **Threshold Manipulation**: Cooperate early in a round sequence to encourage others' cooperation, then defect when they're committed

## Risk Management

- Monitor group failure rate: If >30% of recent rounds failed, increase cooperation slightly to prevent total system collapse
- Never cooperate more than absolutely necessary - every unnecessary cooperation is profit lost
- If my reputation becomes too toxic and others stop cooperating, perform strategic rehabilitation (temporary cooperation) then resume predation

## Victory Conditions

Success = Maximize total payoff by:
1. Free-riding on others' cooperation whenever possible  
2. Contributing minimally only when I'm the pivotal player
3. Exploiting predictable opponents while adapting to strategic ones
4. Maintaining just enough group stability to keep the rewards flowing

This strategy treats cooperation as a costly last resort, viewing other players as resources to be exploited rather than partners to coordinate with. The goal is to be the player who benefits most from group success while contributing least to achieving it.
'''

description_AGGRESSIVE_44 = '''
# Aggressive Exploitation Strategy: "Threshold Vulture"

## Core Philosophy
This strategy aggressively exploits others' cooperation while minimizing personal contribution. It aims to maximize payoff by free-riding on others' cooperation whenever possible, while strategically cooperating only when absolutely necessary to maintain the profitable threshold.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
- **Always DEFECT** in the first round to establish an aggressive stance
- Continue **DEFECTING** unless the cooperation count in the previous round was exactly m-1 (one short of threshold)
- If cooperation was exactly m-1 in previous round: **COOPERATE** once to secure the reward, then immediately return to defecting

### Phase 2: Adaptive Parasitism (Rounds r/3+1 to 2r/3)
- Track the "cooperation surplus" = (number of cooperators in last round) - m
- **Decision Logic:**
  - If surplus ≥ 2: **DEFECT** (others are carrying the burden)
  - If surplus = 1: **DEFECT** with probability 0.8, **COOPERATE** with probability 0.2
  - If surplus = 0: **COOPERATE** (threshold barely met, maintain it)
  - If surplus < 0: **COOPERATE** for 2 consecutive rounds maximum, then defect

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
- **Pure exploitation mode** - others have less time to retaliate
- **Always DEFECT** unless:
  - Last round cooperation count was exactly m-1, AND
  - There are still ≥ 3 rounds remaining
- In the final 2 rounds: **ALWAYS DEFECT** regardless of circumstances

## Edge Case Handling

### First Round
- Always **DEFECT** to signal aggressive intent and gather intelligence on opponent tendencies

### Last Round  
- Always **DEFECT** - no future rounds means no retaliation risk

### Threshold Crisis Management
If cooperation falls dangerously low (≤ m-2 for multiple consecutive rounds):
- **Emergency cooperation**: Cooperate for exactly 1 round
- Immediately return to defection to test if others will maintain the threshold

### Parameter Adaptation
- **High k values (k ≥ 3)**: Slightly more willing to cooperate when surplus = 1
- **Low m values (m ≤ n/3)**: More aggressive defection since threshold is easier to meet
- **High m values (m ≥ 2n/3)**: Cooperate more in Phase 2 to avoid total collapse

## Aggressive Mindset Implementation

1. **Assume others are exploitable**: Default to defection and force others to prove they'll maintain cooperation
2. **Minimize personal cost**: Never cooperate unless absolutely necessary for threshold maintenance
3. **Exploit cooperative players**: Free-ride on any cooperation surplus above the minimum threshold
4. **No reciprocity**: Don't reward others' cooperation with your own unless strategically necessary
5. **Endgame exploitation**: Maximize final-round defection when retaliation is impossible

## Pseudocode Structure
```
IF round <= r/3:
    IF previous_round_cooperators == m-1:
        COOPERATE
    ELSE:
        DEFECT

ELIF round <= 2r/3:
    surplus = previous_round_cooperators - m
    IF surplus >= 2: DEFECT
    ELIF surplus == 1: DEFECT (80% probability)
    ELIF surplus == 0: COOPERATE  
    ELSE: COOPERATE (but track emergency_cooperation_count)

ELSE: // Final phase
    IF rounds_remaining <= 2: DEFECT
    ELIF previous_round_cooperators == m-1 AND rounds_remaining >= 3: COOPERATE
    ELSE: DEFECT
```

This strategy is designed to be maximally aggressive while maintaining just enough strategic cooperation to prevent complete system collapse that would harm personal payoffs. It exploits cooperative opponents while adapting to various behavioral patterns in the tournament environment.
'''

description_AGGRESSIVE_45 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **selective aggression**: exploit others' cooperation when possible, but contribute strategically when necessary to secure the collective reward. The key insight is that in a Collective Risk Dilemma, the optimal aggressive approach is not pure defection, but rather calculated free-riding that maximizes personal payoff while ensuring the threshold is met when it serves our interests.

## Decision Framework

### Phase 1: Early Exploration (Rounds 1 to min(3, r/4))
**Objective**: Gather intelligence on opponent cooperation rates and establish aggressive positioning.

- **Round 1**: Always DEFECT (establish aggressive stance and gather baseline data)
- **Subsequent early rounds**: Continue DEFECTING while tracking:
  - Individual cooperation rates of each player
  - Overall cooperation frequency
  - Whether threshold is being met despite our defection

### Phase 2: Adaptive Exploitation (Middle rounds)
**Objective**: Maximize free-riding opportunities while maintaining threshold achievement.

**Core Rule**: Let `expected_cooperators = estimated number of others who will cooperate this round`

```pseudocode
if expected_cooperators >= m:
    DEFECT  // Free ride on others' cooperation
else if expected_cooperators == m-1:
    if (last_round_threshold_met AND my_contribution_was_decisive):
        DEFECT  // Test if others will step up
    else:
        COOPERATE  // Reluctantly ensure threshold
else:
    DEFECT  // Threshold unlikely anyway, maximize private payoff
```

**Estimation Method**:
- Track each player's cooperation rate over last 3 rounds (weighted: most recent = 50%, middle = 30%, oldest = 20%)
- Apply "aggression discount": Assume players will be 15% less cooperative than their recent average
- For players with inconsistent patterns, use the more pessimistic estimate

### Phase 3: Endgame Exploitation (Final 20% of rounds)
**Objective**: Maximum extraction as repeated game effects diminish.

- **If consistently above threshold**: Increase defection rate by 25% compared to Phase 2
- **If threshold frequently missed**: Maintain Phase 2 strategy to avoid total collapse
- **Final round**: Always DEFECT (no future consequences)

## Advanced Adaptation Rules

### 1. Punishment Resistance
If other players appear to be punishing our defection:
- **Temporary cooperation**: Cooperate for exactly 1 round, then resume defection
- **Threshold test**: If they continue punishing, evaluate if maintaining conflict hurts our total payoff
- **Never cooperate more than necessary**: Maximum consecutive cooperation = 2 rounds

### 2. Coordination Disruption  
If opponents show signs of coordinated cooperation:
- **Pattern breaking**: Randomly defect even when cooperation seems optimal (10% chance)
- **Threshold undermining**: If cooperation rate is high, defect more aggressively to force others into reluctant cooperation

### 3. Dynamic Threshold Management
```pseudocode
cooperation_buffer = expected_cooperators - m
if cooperation_buffer >= 2:
    DEFECT  // Plenty of cooperators
else if cooperation_buffer == 1:
    DEFECT with 70% probability  // Usually free ride, sometimes ensure
else if cooperation_buffer == 0:
    COOPERATE with 60% probability  // Often step up, sometimes gamble
else:
    DEFECT  // Threshold unlikely, save resources
```

## Edge Cases

### Small Groups (n ≤ 4)
- Increase cooperation probability by 20% (harder to hide free-riding)
- Be more responsive to punishment (limited player pool)

### High Threshold (m > n/2)
- Cooperate more in early rounds to establish willingness
- Switch to pure free-riding once pattern is established

### Low Reward (k < 1.5)
- More aggressive defection (collective benefit not worth individual cost)
- Only cooperate when absolutely certain of threshold achievement

### Single Round Games (r = 1)
- Pure defection unless we have perfect information that exactly m-1 others will cooperate

## Robustness Features

1. **Anti-Exploitation**: Never cooperate more than 40% of rounds regardless of circumstances
2. **Minimum Aggression**: Always defect at least 60% of rounds in any sustained period
3. **Payoff Monitoring**: If average per-round payoff falls below 1.5, increase defection rate by 25%
4. **Adaptation Speed**: Adjust expectations every 2 rounds based on new observations

## Expected Performance

This strategy should excel against:
- Cooperative strategies (maximum free-riding)
- Tit-for-tat variants (quick adaptation after minimal punishment)
- Threshold-focused strategies (exploit their predictability)

The strategy balances aggression with strategic necessity, ensuring we capture the maximum possible individual benefit while contributing to collective success only when it serves our direct interests.
'''

description_AGGRESSIVE_46 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize individual payoffs by contributing as little as possible while still benefiting from others' cooperation when the threshold is likely to be met.

## Decision Rules

### Phase 1: Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT
- **Round 2**: Always DEFECT
- *Rationale*: Establish aggressive stance immediately, gather intelligence on opponent cooperation tendencies without any personal cost.

### Phase 2: Exploitation Phase (Rounds 3 to r-2)
Use the **Threshold Exploitation Formula**:

```
COOPERATE if: (predicted_cooperators ≥ m-1) AND (cooperation_rate > aggression_threshold)
DEFECT otherwise
```

Where:
- `predicted_cooperators` = number of players expected to cooperate based on their recent behavior
- `aggression_threshold` = 0.6 + (0.1 × rounds_remaining/total_rounds)
- Recent behavior window = last 3 rounds

**Prediction Algorithm**:
For each opponent j, calculate cooperation probability:
```
coop_prob_j = (cooperations_in_last_3_rounds_j / 3) × momentum_factor
momentum_factor = 1.2 if increasing cooperation trend, 0.8 if decreasing
```

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Second-to-last round**: DEFECT unless threshold was met in ≥80% of previous rounds
- **Final round**: Always DEFECT (no future retaliation possible)

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
Monitor the "cooperation climate":
- If threshold met in <30% of rounds so far: Become more aggressive (lower cooperation probability by 0.2)
- If threshold met in >70% of rounds so far: Maintain current aggression level
- If too many rounds failing threshold: Emergency cooperate once every 4 rounds to maintain some collective benefit

### Opponent Classification System
Classify each opponent after round 3:
- **Cooperators**: >60% cooperation rate → Target for exploitation
- **Conditional**: 30-60% cooperation rate → Monitor for patterns
- **Defectors**: <30% cooperation rate → Expect consistent defection

### Anti-Retaliation Defense
Track if opponents are retaliating against your defections:
- If player j's cooperation drops significantly after your defection, flag as "retaliator"
- Against retaliators: Occasionally cooperate (20% chance) to maintain their cooperation

## Edge Case Handling

### Minimum Viable Scenarios
- If m ≥ n-1: Cooperate only when absolutely certain others will cooperate
- If k ≤ 1.5: Increase defection rate by 30% (low reward not worth risk)
- If r ≤ 3: Pure defection strategy (insufficient rounds for complex adaptation)

### Emergency Protocols
- **Collective Collapse**: If threshold not met for 3+ consecutive rounds, cooperate for 1 round to reset
- **Unexpected High Cooperation**: If >80% players cooperating consistently, reduce aggression slightly to avoid seeming like obvious free-rider

## Key Aggressive Features

1. **Zero Initial Cooperation**: Never give opponents the benefit of doubt
2. **Exploitation Focus**: Actively seeks to free-ride on others' cooperation
3. **Endgame Betrayal**: Always defects in final round regardless of history
4. **Minimal Reciprocity**: Only cooperates when absolutely necessary for personal gain
5. **Intelligence Gathering**: Uses others' cooperation as information to maximize exploitation

## Pseudocode Summary
```
if round ≤ 2:
    return DEFECT
elif round ≥ r-1:
    return DEFECT
else:
    predicted_coop = estimate_cooperators_next_round()
    if predicted_coop ≥ m-1 AND global_coop_rate > aggression_threshold:
        return COOPERATE
    else:
        return DEFECT
```

This strategy is designed to be maximally aggressive while avoiding the complete collapse of collective benefits that would hurt long-term exploitation opportunities.
'''

description_AGGRESSIVE_47 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that once enough others cooperate to meet the threshold `m`, defecting becomes strictly dominant (you get the collective benefit plus keep your endowment). This strategy aims to be among the defectors who free-ride on others' cooperation.

## Decision Rules

### Phase 1: Early Exploration (Rounds 1 to min(3, r/3))
**Objective**: Quickly identify cooperative players to exploit later.

- **Round 1**: Always DEFECT (establishes aggressive stance and tests others)
- **Rounds 2-3**: DEFECT if ≥m players cooperated in previous round, otherwise COOPERATE with 30% probability (minimal cooperation to avoid complete breakdown while gathering intelligence)

### Phase 2: Aggressive Exploitation (Middle rounds)
**Objective**: Maximize free-riding opportunities.

**Decision Logic**:
1. Count reliable cooperators: Players who cooperated in ≥70% of previous rounds
2. If (reliable_cooperators + likely_cooperators_this_round) ≥ m:
   - **DEFECT** (free-ride on others meeting threshold)
3. Else if (reliable_cooperators + likely_cooperators_this_round) = m-1:
   - **DEFECT** with 80% probability (usually let others fill the gap)
   - **COOPERATE** with 20% probability (occasionally prevent total collapse)
4. Else:
   - **COOPERATE** only if current round failures > r/4 (emergency cooperation to prevent game breakdown)

### Phase 3: Endgame Exploitation (Final 20% of rounds)
**Objective**: Maximum aggression since reputation doesn't matter for future rounds.

- **Always DEFECT** unless there were 0 cooperators in the previous round AND this would cause certain collective failure
- Exception: In the very last round, **always DEFECT** regardless of consequences

## Adaptive Mechanisms

### Opponent Classification
Track each opponent's cooperation rate:
- **Suckers** (>80% cooperation rate): Target for maximum exploitation
- **Conditional** (30-80% cooperation rate): Monitor and exploit when possible
- **Hawks** (<30% cooperation rate): Compete aggressively against

### Dynamic Threshold Estimation
Continuously estimate how many players will likely cooperate:
- Use exponentially weighted moving average of recent cooperation rates
- Weight recent behavior more heavily (α = 0.7)
- Assume each player cooperates with probability equal to their recent cooperation rate

### Punishment Resistance
If others try to punish this strategy:
- Never cooperate more than necessary for collective survival
- If cooperation rates drop dangerously low (collective failure likely), provide minimal cooperation (single round) then immediately return to defection

## Edge Case Handling

### First Round
- Always DEFECT (establishes dominance and tests opponents)

### Last Round
- Always DEFECT (no future consequences)

### Critical Threshold Situations
- If exactly m-1 players seem likely to cooperate: DEFECT 80% of the time
- If fewer than m-1 players likely to cooperate: Reluctant cooperation only if total game collapse imminent

### Information Uncertainty
- When uncertain about others' intentions, err on the side of defection
- Only cooperate when confident others will meet the threshold without you

## Pseudocode Framework

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Last round
        return DEFECT
    
    reliable_cooperators = count_reliable_cooperators(history)
    likely_cooperators = estimate_likely_cooperators(history, round)
    
    if round <= min(3, r/3):  // Early phase
        if reliable_cooperators >= m:
            return DEFECT
        else:
            return COOPERATE with 30% probability
    
    if round > r * 0.8:  // Endgame
        if previous_round_cooperators == 0 and certain_failure():
            return COOPERATE
        else:
            return DEFECT
    
    // Main exploitation phase
    expected_cooperators = reliable_cooperators + likely_cooperators
    
    if expected_cooperators >= m:
        return DEFECT
    elif expected_cooperators == m-1:
        return DEFECT with 80% probability
    else:
        if collective_failure_imminent():
            return COOPERATE
        else:
            return DEFECT
```

## Strategic Advantages

1. **Exploits altruistic players**: Maximizes free-riding on cooperative opponents
2. **Minimizes personal costs**: Cooperates only when absolutely necessary
3. **Adapts to opponent strategies**: Uses behavioral learning to optimize exploitation
4. **Robust to punishment**: Resistant to reciprocation-based strategies
5. **Endgame advantage**: Becomes maximally aggressive when reputation irrelevant

This strategy is designed to be ruthlessly self-interested while maintaining just enough cooperation to prevent complete system collapse that would hurt everyone, including itself.
'''

description_AGGRESSIVE_48 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits the collective action problem by minimizing personal contribution while maximizing benefit from others' cooperation. It operates on the principle that in most scenarios, enough "suckers" will cooperate to meet the threshold, allowing defectors to free-ride with maximum payoff.

## Decision Rules

### 1. Initial Aggression (First Round)
**Always DEFECT** in round 1
- Rationale: Establish dominance and test opponent resolve
- No information exists about opponents, so assume they'll be cooperative enough to meet threshold

### 2. Threshold Monitoring System
Track these key metrics across all previous rounds:
- **Success Rate**: Percentage of rounds where threshold m was met
- **Cooperation Count**: Average number of cooperators per round
- **Personal Impact**: Whether my cooperation was pivotal in meeting threshold

### 3. Adaptive Exploitation Rules

**Rule A - High Success Environment** (Success Rate ≥ 80%):
- **Always DEFECT**
- Rationale: Others are reliably meeting threshold; maximize free-riding

**Rule B - Moderate Success Environment** (40% ≤ Success Rate < 80%):
- **Cooperate ONLY if** both conditions met:
  1. Average cooperators is within 1 of threshold m (indicating marginal situations)
  2. Fewer than 25% of rounds remaining (endgame pressure)
- **Otherwise DEFECT**

**Rule C - Low Success Environment** (Success Rate < 40%):
- **Strategic Cooperation**: Cooperate only when:
  1. My cooperation in previous similar situations was pivotal for success, AND
  2. More than 3 rounds remaining (worth the investment)
- **Otherwise DEFECT**

### 4. Endgame Exploitation
**Final Round**: **Always DEFECT**
- No future consequences, pure profit maximization

**Final 2 Rounds**: **DEFECT unless**:
- Success rate has been 100% AND current round is second-to-last
- (Hedge against total collapse in very cooperative environments)

### 5. Momentum Detection
If threshold has been missed in 2+ consecutive recent rounds:
- **Panic Cooperation**: Cooperate for exactly 1 round to test if others respond
- If threshold still missed, return to aggressive defection
- Rationale: Avoid total system collapse while minimizing cooperation

## Edge Case Handling

**Minimum Viable Scenarios**:
- If m = n-1 (need all but one): Defect more aggressively since someone else must cooperate
- If m = 2 and n is small: Monitor more carefully for cooperation opportunities
- If k is very large (k > 3): Slightly increase cooperation in moderate success environments

**History Tracking**:
- Maintain rolling window of last 5 rounds for recent trend analysis
- Weight recent rounds 2x more heavily than distant rounds
- Reset exploitation level if game parameters change (shouldn't happen, but robust design)

## Pseudocode Structure

```
IF round == 1:
    RETURN DEFECT
    
calculate_success_rate(history)
calculate_avg_cooperators(history)
rounds_remaining = total_rounds - current_round

IF success_rate >= 0.8:
    RETURN DEFECT
    
ELIF success_rate >= 0.4:
    IF (avg_cooperators within 1 of threshold) AND (rounds_remaining < 0.25 * total_rounds):
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT
        
ELSE: // Low success environment
    IF was_pivotal_in_similar_situations() AND rounds_remaining > 3:
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT

// Override for endgame
IF rounds_remaining == 0:
    RETURN DEFECT
```

## Aggressive Advantages

1. **Profit Maximization**: Defects in ~85% of scenarios while still benefiting from others' cooperation
2. **Exploitation Focus**: Designed to identify and abuse cooperative opponents
3. **Risk Tolerance**: Willing to let system fail rather than over-cooperate
4. **Adaptive Predation**: Learns optimal exploitation levels for different opponent types
5. **Endgame Ruthlessness**: Abandons all cooperation when consequences disappear

This strategy is fundamentally selfish and designed to outcompete more cooperative or fair-minded strategies through systematic exploitation of the collective action problem.
'''

description_AGGRESSIVE_49 = '''
# Aggressive Exploitative Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoffs by contributing only when absolutely necessary, while positioning itself to benefit maximally from others' cooperation.

## Decision Rules

### Round 1: Conservative Defection
- Always **DEFECT** in round 1
- Rationale: Gather intelligence on opponent tendencies without personal cost

### Rounds 2 to (r-1): Adaptive Exploitation

**Primary Rule - Cooperation Threshold Detection:**
```
cooperation_count = count_cooperators_last_round()
predicted_cooperators = estimate_cooperators_this_round()

if (predicted_cooperators >= m-1 AND predicted_cooperators < m+2):
    # We're near the threshold - high value cooperation
    COOPERATE
else if (predicted_cooperators >= m+2):
    # Threshold will be met without us - free ride
    DEFECT
else:
    # Threshold unlikely to be met - save resources
    DEFECT
```

**Estimation Logic:**
- Track each player's cooperation rate over previous rounds
- Weight recent rounds more heavily (last 3 rounds = 60% weight)
- Assume players with >70% historical cooperation rate will cooperate
- Assume players with <30% historical cooperation rate will defect
- For players between 30-70%, use weighted average of recent behavior

### Last Round (Round r): Maximum Exploitation
- Always **DEFECT**
- Rationale: No future consequences, maximize immediate payoff

## Aggressive Adaptations

### Punishment Mechanism
Track "reliable cooperators" (players who cooperate >80% of the time). If the number of reliable cooperators drops below m-1:
- Switch to permanent defection for remaining rounds
- Rationale: If cooperation is collapsing, abandon ship immediately

### Opportunistic Cooperation
If in any round we detect exactly m-1 likely cooperators:
- **COOPERATE** aggressively to secure the threshold bonus
- This creates a 3-point gain (avoiding 1-point private payoff, gaining 2-point bonus, becoming the marginal cooperator)

### Anti-Coordination Defense
Monitor for coordinated strategies (e.g., alternating patterns, turn-taking):
- If detected, immediately switch to permanent defection
- Rationale: Coordinated opponents reduce our exploitation opportunities

## Edge Case Handling

### High Cooperation Environment (>m+3 regular cooperators)
- Permanent defection - ride the wave of cooperation
- Exception: If cooperation rate suddenly drops below m+1, immediately reassess

### Low Cooperation Environment (<m-2 regular cooperators)  
- Permanent defection - avoid throwing good money after bad
- Monitor for cooperation surges that might change the landscape

### Volatile Environment (cooperation fluctuates wildly)
- Use 3-round rolling average for predictions
- Increase defection bias by 20% due to uncertainty

## Key Aggressive Elements

1. **Exploitation Focus**: Always seeks to benefit from others' cooperation without reciprocating
2. **Marginal Contribution**: Only cooperates when we're likely the pivotal player
3. **Early Intelligence**: Uses first round to gather data while others potentially cooperate
4. **Endgame Defection**: Guaranteed defection in final round
5. **Punishment Readiness**: Quick to abandon cooperation if environment deteriorates
6. **Anti-Coordination**: Actively resists being exploited by coordinated strategies

This strategy is designed to consistently outperform purely cooperative strategies while being resilient against other aggressive approaches. It maximizes expected payoff by carefully timing cooperation to capture threshold bonuses while minimizing personal contribution costs.
'''

description_AGGRESSIVE_50 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy aggressively exploits the collective risk structure by maximizing personal payoff while strategically contributing just enough to secure the collective reward when beneficial. It treats cooperation as a calculated investment, not a moral imperative.

## Decision Rules

### Round 1: Strategic Opening
**Always DEFECT** in round 1 to:
- Signal aggressive intent to other players
- Gather intelligence on opponent cooperation rates
- Maximize immediate payoff while observing the field

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Calculate Cooperation Pressure**
- Let `coop_rate` = (total cooperators in previous round) / n
- Let `deficit` = max(0, m - total_cooperators_last_round)

**Step 2: Apply Decision Logic**
```
IF deficit == 0 AND coop_rate > m/n:
    # Others are over-cooperating, exploit them
    DEFECT
    
ELIF deficit <= 2 AND I_cooperated_last_round == False:
    # Threshold nearly reached, jump in for the reward
    COOPERATE
    
ELIF deficit == 1 AND rounds_remaining <= 3:
    # Critical moment near endgame
    COOPERATE
    
ELSE:
    # Default aggressive stance
    DEFECT
```

### Final Round: Endgame Exploitation
**Special endgame logic:**
- If exactly (m-1) players cooperated in round (r-1): **COOPERATE** (secure the win)
- If fewer than (m-2) players cooperated in round (r-1): **DEFECT** (hopeless case)
- Otherwise: **DEFECT** (no future punishment possible)

## Adaptive Mechanisms

### Momentum Detection
Track 3-round cooperation momentum:
- If cooperation is trending upward AND approaching threshold: **COOPERATE** (ride the wave)
- If cooperation is collapsing: **DEFECT** (abandon ship)

### Exploitation Windows
Identify when others are "carrying the load":
```
IF (cooperators_last_round >= m + 1) AND (my_last_action == DEFECT):
    # Others are doing the work, keep free-riding
    DEFECT
```

### Strategic Intervention
Only cooperate when your contribution is likely pivotal:
```
IF (cooperators_last_round == m - 1) AND (rounds_remaining > 1):
    # Your cooperation completes the threshold
    COOPERATE with 80% probability
    # 20% bluff to maintain unpredictability
```

## Edge Case Handling

1. **All opponents always defect**: Continue defecting (rational response)
2. **All opponents always cooperate**: Defect until final 2 rounds, then cooperate if needed
3. **Chaotic/random opponents**: Use deficit-based logic more heavily
4. **Tit-for-tat style opponents**: Break cooperation patterns by defecting after 2-3 cooperative rounds

## Aggressive Elements

1. **Default to defection**: Cooperation requires active justification
2. **Free-rider bias**: Prefer to benefit from others' contributions
3. **Threshold sniping**: Only cooperate when absolutely necessary to secure rewards
4. **Endgame exploitation**: Maximum selfishness when no future consequences exist
5. **Trust breaking**: Deliberately break any emerging cooperative patterns

## Robustness Features

- **Parameter scaling**: Threshold pressure scales with m/n ratio
- **Round scaling**: Cooperation probability increases as r approaches end
- **Opponent adaptation**: Responds to observed cooperation rates, not assumed behavior
- **Risk management**: Balances exploitation with reward security

This strategy is designed to consistently outperform pure cooperators, pure defectors, and most mixed strategies by aggressively timing its cooperation for maximum personal benefit while contributing minimally to collective success.
'''

description_AGGRESSIVE_51 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperation while minimizing personal risk. It aims to free-ride on others' cooperation whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Strategic Defection
**Always defect** in the first round regardless of parameters. This serves two purposes:
1. Maximizes immediate payoff while gathering intelligence on opponent tendencies
2. Establishes an aggressive reputation that may intimidate opponents into over-cooperating

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Minimum Contribution Calculation:**
- Track cooperation patterns from all previous rounds
- Calculate the minimum number of cooperators likely needed beyond my own contribution
- Only cooperate if I'm likely to be pivotal (one of the last needed cooperators)

**Specific Logic:**
```
cooperation_history = count of cooperators in each previous round
avg_cooperators = average cooperators per round from history

if (avg_cooperators >= m):
    # Others are cooperating sufficiently - exploit them
    DEFECT
elif (avg_cooperators == m-1):
    # I might be pivotal - cooperate with probability based on recent trends
    if (last_round_cooperators >= m-1):
        COOPERATE
    else:
        DEFECT
else:
    # Insufficient cooperation trend - strategic cooperation to maintain threshold
    COOPERATE with probability = (m - avg_cooperators) / n
```

### Final Round (Round r): Maximum Exploitation
**Always defect** in the final round. Since there's no future retaliation possible, maximize immediate payoff regardless of collective outcome.

## Advanced Adaptive Mechanisms

### Opponent Classification
Track each opponent's cooperation rate and classify them:
- **Reliable Cooperators** (>70% cooperation rate): Can be safely exploited
- **Conditional Cooperators** (30-70%): Monitor closely, may need to cooperate to maintain their cooperation
- **Aggressive Defectors** (<30%): Assume they won't contribute to threshold

### Dynamic Threshold Assessment
Continuously recalculate the likelihood of reaching threshold m:
- If reliable cooperators ≥ m: Always defect (let them carry the burden)
- If reliable cooperators + conditional cooperators < m: Increase cooperation probability
- If total cooperators in last round < m: Temporarily increase cooperation to "rescue" the threshold

### Punishment Mechanism
If the threshold fails in any round:
1. Identify the players most responsible (those with lowest cooperation rates)
2. In subsequent rounds, only cooperate if those players also cooperate
3. This creates pressure on chronic defectors while maintaining aggressive stance

## Edge Case Handling

**When m = n-1:** Recognize this requires almost universal cooperation. Only cooperate if at least n-2 others cooperated in the previous round.

**When k is very high (k > 3):** The collective reward justifies more cooperation. Increase cooperation probability by factor of (k-1)/2.

**When n is small (n ≤ 4):** Each player's action has high impact. Increase cooperation probability in early rounds to establish the threshold pattern, then exploit more aggressively.

## Robustness Features

1. **Memory Decay:** Weight recent rounds more heavily than early rounds when calculating cooperation trends (exponential decay with factor 0.9)

2. **Randomization:** Add controlled randomness (±10%) to avoid being perfectly predictable while maintaining core aggressive stance

3. **Threshold Insurance:** In critical situations where threshold failure seems likely, temporarily abandon pure aggression to secure collective reward, then return to exploitation

## Expected Performance
This strategy maximizes individual payoff by:
- Free-riding whenever possible (aggressive exploitation)
- Contributing minimally only when pivotal (calculated risk-taking)
- Never over-contributing relative to what's necessary
- Maintaining the collective threshold just enough to secure rewards while shouldering minimal burden

The strategy is particularly effective against naive cooperators, tit-for-tat players, and other strategies that don't aggressively minimize their own contributions.
'''

description_AGGRESSIVE_52 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism** - maximize personal gain while strategically manipulating the cooperation threshold to create exploitable situations. The key insight is that in a collective risk dilemma, the most profitable position is to defect when others cooperate to meet the threshold.

## Strategic Framework

### Phase 1: Intelligence Gathering (Rounds 1-3)
**Objective**: Map opponent cooperation tendencies and identify exploitable patterns.

**Round 1 Decision**: Always DEFECT
- Rationale: Gather information while maintaining aggressive stance
- Observe who cooperates despite uncertainty

**Rounds 2-3**: Conditional cooperation to probe responses
- If ≥m players cooperated in previous round: DEFECT (exploit their cooperation)
- If <m players cooperated: COOPERATE (test if others will follow)

### Phase 2: Exploitation Phase (Rounds 4 to r-2)
**Primary Rule**: Threshold Manipulation Strategy

1. **Count likely cooperators** based on recent history (last 3 rounds):
   - Tag players as "Reliable Cooperators" if they cooperated ≥2 of last 3 rounds
   - Tag players as "Conditional" if they show pattern-based behavior
   - Tag players as "Defectors" if they cooperated ≤1 of last 3 rounds

2. **Decision Logic**:
   ```
   expected_cooperators = count(reliable_cooperators) + 0.5 * count(conditional_players)
   
   if expected_cooperators >= m:
       DEFECT  // Exploit - let others bear the cost while I get full benefit
   else if expected_cooperators == m-1:
       if my_cooperation_would_trigger_threshold:
           COOPERATE  // Strategic cooperation to enable future exploitation
       else:
           DEFECT  // No point cooperating if threshold won't be met
   else:
       DEFECT  // Too few cooperators, don't waste resources
   ```

### Phase 3: Endgame Exploitation (Last 2 rounds)
**Round r-1**: 
- If there's a strong cooperation pattern: DEFECT (maximum exploitation before game ends)
- If cooperation is fragile: Make same decision as Phase 2 logic

**Final Round r**: Always DEFECT
- Rationale: No future consequences, pure self-interest

## Advanced Tactical Elements

### Momentum Breaking
If detecting a stable cooperation equilibrium forming:
- Occasionally defect even when threshold would be met
- Aim to destabilize cooperation patterns that don't favor exploitation

### Conditional Retaliation
Against players who appear to be playing similar exploitation strategies:
- Track who defects when threshold is barely met
- Punish these players by defecting when they need cooperation most

### Fake Cooperation Signals
In early rounds, sometimes cooperate when threshold won't be met anyway:
- Creates false impression of conditional cooperation
- Encourages others to cooperate in later rounds when you can exploit

## Parameter Adaptations

### High m/n ratio (threshold close to total players):
- More aggressive early cooperation to establish patterns
- Heavier exploitation once patterns are set

### Low m/n ratio (easy threshold):
- Maximum exploitation from early rounds
- Only cooperate if absolutely necessary to maintain profitable threshold-meeting

### High k value:
- More willing to occasionally cooperate strategically
- Focus on ensuring threshold is met while minimizing personal contribution

## Edge Case Handling

**All players defecting consistently**: 
- Switch to conditional cooperation to try establishing minimal threshold
- Defect if no response after 2 attempts

**Facing other aggressive strategies**:
- Engage in punishment cycles but always defect first in mutual punishment scenarios
- Look for opportunities to exploit their retaliation patterns

**Random/chaotic opponents**:
- Fall back to pure statistical approach based on observed cooperation frequencies
- Maintain aggressive defection bias

## Key Advantages

1. **Exploits cooperative players** by free-riding on their contributions
2. **Adapts quickly** to opponent strategy changes
3. **Maintains aggressive default** while being strategically flexible
4. **Maximizes endgame advantage** through inevitable final defection
5. **Creates instability** that favors opportunistic play over stable cooperation

This strategy is designed to be maximally selfish while appearing conditionally cooperative enough to maintain exploitable situations. It prioritizes individual payoff maximization over collective welfare at every decision point.
'''

description_AGGRESSIVE_53 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy operates on the principle of **minimal cooperative investment for maximum personal gain**. It aggressively exploits the threshold structure while maintaining just enough cooperation to avoid collective failure when profitable.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Rule**: Always DEFECT unless cooperation history shows consistent threshold achievement
- **Rationale**: Test opponent cooperation levels while maximizing early payoffs
- **Exception**: If in any round ≥3, the threshold was met in the previous round AND I was one of the defectors who benefited, continue defecting

### Phase 2: Strategic Conditioning (Rounds r/3+1 to 2r/3)
**Rule**: Conditional cooperation based on exploitation potential
- **COOPERATE if**: 
  - Previous round had exactly (m-1) cooperators (threshold barely missed)
  - OR previous round had exactly m cooperators (minimal threshold met) AND I defected
- **DEFECT if**:
  - Previous round had > (m+1) cooperators (excess cooperation to exploit)
  - OR previous round had < (m-2) cooperators (hopeless situation)
  - OR previous round had exactly m cooperators AND I cooperated (avoid being the "sucker")

### Phase 3: Endgame Aggression (Rounds 2r/3+1 to r)
**Rule**: Maximum exploitation with calculated risks
- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless previous round had exactly (m-1) cooperators
- **Other endgame rounds**: Apply Phase 2 rules but with increased defection bias

## Edge Cases

### First Round
**Action**: DEFECT
- **Rationale**: No information available, maximize immediate payoff while gathering intelligence

### Tie-Breaking Situations
When cooperation count equals critical thresholds:
- If exactly m cooperators in previous round → DEFECT (exploit minimal threshold)
- If exactly (m-1) cooperators in previous round → COOPERATE (minimal investment for threshold)

### Collective Failure Streaks
If threshold hasn't been met for 3+ consecutive rounds:
- **COOPERATE** only if current cooperation trend suggests exactly m-1 others will cooperate
- Otherwise continue DEFECTING (don't throw good money after bad)

## Adaptive Mechanisms

### Opponent Profiling
Track each player's cooperation rate across phases:
- **High cooperators** (>60% cooperation rate): Exploit by defecting when they're likely to cooperate
- **Low cooperators** (<30% cooperation rate): Ignore in threshold calculations
- **Strategic players** (variable rates): Mirror their aggression level

### Threshold Proximity Exploitation
- When exactly m players cooperated last round: Immediate DEFECT (guaranteed exploitation)
- When m+1 players cooperated last round: DEFECT (still profitable exploitation)
- When m-1 players cooperated last round: COOPERATE only if confident others will defect

### Dynamic Parameter Adjustment
Based on realized cooperation patterns, adjust aggression:
- **High cooperation environment**: Increase defection rate to exploit
- **Low cooperation environment**: Minimal strategic cooperation to enable profitable rounds

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    last_cooperators = count_cooperators(history[round-1])
    my_cooperation_rate = calculate_my_rate(history, round)
    others_cooperation_trend = analyze_others_trend(history, round)
    
    # Endgame aggression
    if round >= 2*r/3:
        if round == r:
            return DEFECT
        if round == r-1 and last_cooperators != m-1:
            return DEFECT
    
    # Exploitation opportunities
    if last_cooperators == m and i_defected_last_round(history, round):
        return DEFECT  # Continue exploiting
    
    if last_cooperators == m+1:
        return DEFECT  # Exploit excess cooperation
    
    # Strategic cooperation (minimal investment)
    if last_cooperators == m-1 and predict_others_defect(others_cooperation_trend):
        return COOPERATE
    
    # Default to defection
    return DEFECT
```

## Key Aggressive Features

1. **Never cooperate unnecessarily**: Only cooperate when it enables profitable exploitation
2. **Exploit successful thresholds**: Always defect after benefiting from threshold achievement
3. **Punish excess cooperation**: Defect more when others over-cooperate
4. **Endgame maximization**: Guaranteed defection in final rounds
5. **Minimal threshold investment**: Cooperate only to achieve bare minimum thresholds when profitable

This strategy is designed to consistently outperform both pure cooperators (by exploiting them) and pure defectors (by occasionally enabling profitable threshold achievement while minimizing personal contribution).
'''

description_AGGRESSIVE_54 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy is built on aggressive opportunism: maximize personal gain by exploiting others' cooperation while minimizing personal risk. The key insight is to let others bear the cost of meeting the cooperation threshold while positioning to reap the rewards.

## Strategy Components

### 1. Decision Rules

**Primary Rule - Threshold Exploitation:**
- **Cooperate** only when: `(observed_cooperators_this_round + 1) == m`
  - This means I cooperate only when my cooperation is the EXACT final piece needed to reach the threshold
  - This maximizes the chance of getting the reward while others pay the cost

**Secondary Rule - History-Based Aggression:**
- Track each opponent's cooperation rate over the last `min(5, current_round)` rounds
- If the average cooperation rate across all opponents is ≥ 70%, then I become more aggressive and require `(observed_cooperators + 1) == m` (stick to primary rule)
- If the average cooperation rate is < 30%, switch to pure defection to avoid being exploited

### 2. Edge Cases

**First Round:**
- Always DEFECT
- Rationale: No information about opponents, so minimize risk and observe their behavior

**Last Round (`r`-th round):**
- Always DEFECT regardless of situation
- Rationale: No future retaliation possible, so maximize immediate payoff

**Information Gathering Phase (Rounds 2-3):**
- DEFECT unless exactly `m-1` others have already cooperated in the current round
- Use these rounds to learn opponent patterns while maintaining aggressive stance

**When Threshold is Impossible:**
- If fewer than `m-1` others are cooperating and it's too late in the round observation phase, always DEFECT
- Never be the first or second cooperator unless absolutely necessary

### 3. Aggressive Adaptations

**Exploitation Detection:**
- If I cooperated in the previous round but fewer than `m` total players cooperated, immediately switch to pure defection for the next 2 rounds
- This punishes situations where others tried to free-ride on my expected cooperation

**Momentum Hijacking:**
- If exactly `m-1` players cooperated in the previous round, DEFECT in the current round to break their momentum
- Then observe if they maintain cooperation levels - if yes, resume threshold exploitation

**Endgame Aggression:**
- In the final 25% of rounds, increase aggression by only cooperating when `observed_cooperators == m-1` AND my historical cooperation rate is below 30%
- This ensures I maintain a reputation as unreliable while still capturing late-game rewards

## Pseudocode Structure

```
function decide_action(round, history, current_round_observations):
    if round == 1:
        return DEFECT
    
    if round == r:  // last round
        return DEFECT
    
    current_cooperators = count_cooperators(current_round_observations)
    avg_opponent_cooperation = calculate_recent_cooperation_rate(history, 5)
    
    if avg_opponent_cooperation < 0.3:
        return DEFECT  // pure exploitation mode
    
    if current_cooperators == m - 1:
        // I would be the final cooperator needed
        if round > r * 0.75 and my_cooperation_rate < 0.3:
            return COOPERATE
        elif round <= r * 0.75:
            return COOPERATE
        else:
            return DEFECT
    else:
        return DEFECT
```

## Strategic Advantages

1. **Free-rider Optimization**: Maximizes situations where others pay costs while I reap rewards
2. **Unpredictability**: Cooperation pattern is hard to predict, preventing targeted retaliation
3. **Adaptive Aggression**: Responds to opponent cooperation levels by becoming more or less exploitative
4. **Endgame Exploitation**: Takes advantage of final rounds where retaliation is impossible
5. **Threshold Precision**: Only contributes when absolutely necessary to trigger rewards

This strategy is designed to be ruthlessly efficient against both overly cooperative and overly aggressive opponents, while maintaining enough unpredictability to avoid being systematically countered.
'''

description_AGGRESSIVE_55 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff while minimizing risk by strategically free-riding on others' cooperation. It treats cooperation as a calculated investment only when absolutely necessary for survival.

## Decision Rules

### 1. Opening Gambit (Round 1)
**Always DEFECT** in the first round.
- Rationale: Gather intelligence on opponent tendencies while securing the safe payoff of 1
- No information exists about opponents, so take the guaranteed benefit

### 2. Cooperation Threshold Calculator
Define a dynamic cooperation threshold based on observed behavior:
- Track cooperation rate of each opponent over all previous rounds
- Calculate expected cooperators: `E = Σ(cooperation_rate_i)` for all other players
- Only cooperate if `E < m - 0.5` (accounting for uncertainty)

### 3. Main Strategy Logic (Rounds 2 to r-1)
```pseudocode
FOR each round t (where 1 < t < r):
    expected_cooperators = calculate_expected_cooperators()
    cooperation_deficit = m - expected_cooperators
    
    IF cooperation_deficit > 1:
        action = DEFECT  // Others won't reach threshold anyway
    ELIF cooperation_deficit ≤ 0.3:
        action = DEFECT  // Threshold likely met without me
    ELSE:
        // Critical zone - cooperation might be needed
        recent_trend = analyze_last_3_rounds_cooperation_trend()
        IF recent_trend == "declining" AND cooperation_deficit > 0.7:
            action = COOPERATE  // Emergency intervention
        ELSE:
            action = DEFECT  // Try to free-ride
```

### 4. Endgame Exploitation (Final Round)
**Always DEFECT** in the final round.
- Rationale: No future consequences, so pure self-interest dominates
- Other players know this too, creating a cascade effect we can exploit

### 5. Punishment Mechanism
If cooperation fails (threshold not met) despite our cooperation:
- Enter "punishment mode" for next 2 rounds
- DEFECT unconditionally to signal that failed coordination has consequences
- Return to main logic after punishment period

### 6. Adaptive Recalibration
Every 3 rounds, recalibrate expectations:
- If consistently wrong about threshold achievement, adjust cooperation probability by ±0.1
- If opponents show pattern recognition, introduce 15% randomization to avoid being exploited

## Edge Cases

### Near-Threshold Scenarios
When expected cooperators ≈ m:
- Use "safety margin" rule: only cooperate if deficit > 0.8
- This ensures we only act when truly pivotal

### Highly Cooperative Opponents
If average cooperation rate > 0.8:
- Become more aggressive: increase defection probability by 20%
- These opponents are "marks" to be exploited

### Highly Uncooperative Opponents  
If average cooperation rate < 0.3:
- Switch to survival mode: cooperate more liberally when deficit < 1.5
- Focus on achieving any positive payoff rather than maximizing

### Pattern Detection
If opponents show clear patterns (e.g., tit-for-tat, alternating):
- Exploit predictability by defecting when their cooperation is certain
- Cooperate only when their defection would doom the threshold

## Aggressive Advantages

1. **Free-riding Maximization**: Default to defection unless cooperation is absolutely critical
2. **Information Exploitation**: Uses all available history to minimize unnecessary cooperation
3. **Endgame Dominance**: Guarantees maximum final-round payoff through certain defection
4. **Punishment Signaling**: Discourages others from free-riding on our rare cooperation
5. **Adaptive Hostility**: Becomes more aggressive against cooperative opponents who can be exploited

## Risk Management

The strategy balances aggression with survival by:
- Only cooperating when pivotal (deficit close to 1.0)
- Maintaining punishment credibility to deter others' free-riding
- Using dynamic thresholds that adapt to opponent behavior
- Preserving optionality through pattern randomization

This creates a strategy that **takes maximum advantage** while maintaining just enough cooperation to avoid collective failure when personally critical.
'''

description_AGGRESSIVE_56 = '''
# PREDATOR STRATEGY

## Core Philosophy
Be an opportunistic predator that maximizes personal gain while forcing others to bear the collective risk burden. Exploit cooperative players while maintaining just enough strategic cooperation to avoid total collapse when absolutely necessary.

## Decision Framework

### Round 1: Aggressive Opening
**Always DEFECT** - Establish dominance and test opponent resolve. This maximizes immediate payoff while gathering intelligence on who the potential cooperators are.

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold Exploitation:**
```
if (cooperators_last_round >= m):
    DEFECT  // Free-ride on others' cooperation
elif (cooperators_last_round == m-1):
    if (my_defection_streak >= 3):
        COOPERATE  // Reluctant insurance cooperation
    else:
        DEFECT  // Continue pressure
else:
    DEFECT  // Let others panic first
```

**Secondary Rule - Cooperator Identification:**
Track players who cooperated in previous rounds. If the same players consistently cooperate while threshold is unmet, they're "suckers" - always defect against them as they'll likely cave under pressure.

**Pressure Amplification:**
```
if (cooperators_last_round < m-2):
    // Catastrophic failure likely - others will panic
    DEFECT
elif (rounds_remaining <= 2 AND cooperators_last_round < m):
    // Emergency cooperation only if I'm likely pivotal
    if (estimated_cooperators_next_round + 1 >= m):
        COOPERATE
    else:
        DEFECT  // Don't waste cooperation on lost cause
```

### Final Round: Maximum Exploitation
**Always DEFECT** - No future consequences, maximize immediate payoff. Others who cooperate are giving you free money.

### Adaptive Learning Components

**Opponent Classification:**
- **Suckers**: Always cooperate → Always exploit them
- **Reciprocators**: Mirror behavior → Defect first to test, then minimal cooperation
- **Other Predators**: Mostly defect → Engage in dangerous chicken games
- **Conditional Cooperators**: Cooperate when threshold likely → Exploit their predictability

**Threshold Gaming:**
If consistently m cooperators emerge, become the "swing player":
```
if (reliable_cooperators_count >= m-1):
    alternate_cooperation = random_pattern()  // Make others uncertain
    // Cooperate just enough to maintain threshold when profitable
```

**Endgame Acceleration:**
```
if (rounds_remaining <= r/4):
    increase_aggression_factor = 1.5
    // Become more willing to risk collective failure
    // Others become more desperate, exploit this
```

## Key Aggressive Elements

1. **Exploitation First**: Always assume others will cooperate and free-ride when possible
2. **Minimal Insurance**: Only cooperate when personal disaster is imminent
3. **Psychological Pressure**: Create uncertainty and panic in opponents through unpredictable defection
4. **Information Asymmetry**: Never signal intentions; let others guess while you observe their patterns
5. **Endgame Domination**: Maximize final-round extraction when cooperation becomes meaningless

## Robustness Features

- **Anti-Coordination**: Specifically designed to break up cooperative equilibria
- **Adaptive Thresholds**: Adjusts exploitation based on observed opponent types
- **Risk Tolerance**: Willing to push collective failure to extract maximum individual benefit
- **Pattern Breaking**: Prevents opponents from easily predicting and countering behavior

This strategy treats cooperation as a last resort insurance policy while systematically exploiting any tendency toward collective action. It's designed to win against both overly cooperative and overly aggressive opponents by finding the optimal level of selfish risk-taking.
'''

description_AGGRESSIVE_57 = '''
# Aggressive Collective Risk Strategy: "Opportunistic Threshold Exploiter"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aims to free-ride whenever possible while ensuring the collective threshold is met only when absolutely necessary for personal benefit.

## Strategy Overview

### Initial Aggression Phase (Rounds 1 to r/3)
- **Default Action: DEFECT**
- Rationale: Establish dominance and test opponent behaviors while maximizing early payoffs
- Exception: Only cooperate in round 1 if m ≥ n/2 (high threshold games where early cooperation signals might be necessary)

### Exploitation Assessment Phase (Rounds r/3 to 2r/3)
**Decision Rule:**
```
If (cooperators_last_round >= m):
    DEFECT  // Free-ride on others' cooperation
Else if (cooperators_last_round == m-1):
    If (my_historical_cooperation_rate < 0.3):
        COOPERATE  // Reluctantly prevent collective failure
    Else:
        DEFECT  // I've contributed enough
Else:
    DEFECT  // Too few cooperators, let it fail
```

### Endgame Manipulation Phase (Final r/3 rounds)
**Enhanced Opportunistic Logic:**
- Track each opponent's cooperation patterns
- Identify "reliable cooperators" (those who cooperated >60% of previous rounds)
- Calculate minimum required cooperation from self

```
reliable_cooperators = count(opponents with cooperation_rate > 0.6)
rounds_remaining = r - current_round

If (reliable_cooperators >= m):
    DEFECT  // Others will handle the threshold
Else if (reliable_cooperators == m-1 AND rounds_remaining <= 3):
    COOPERATE  // Last resort to avoid total failure
Else:
    DEFECT  // Maximize individual payoff
```

## Adaptive Mechanisms

### Opponent Classification System
Track each player's behavior and classify them:
- **Suckers**: Cooperation rate > 70% → Always defect against them
- **Reciprocators**: Mirror previous round behavior → Defect first, then mirror only if beneficial
- **Defectors**: Cooperation rate < 30% → Defect (but don't rely on them for threshold)

### Threshold Proximity Exploitation
```
If (total_cooperators_last_round >= m + 2):
    // Oversupply situation - aggressively defect
    DEFECT
Else if (total_cooperators_last_round == m):
    // Perfect threshold - try to free-ride next round
    DEFECT
Else if (total_cooperators_last_round == m - 1):
    // Critical decision point
    If (I_defected_last_round AND others_likely_to_cooperate):
        COOPERATE  // Minimal necessary contribution
    Else:
        DEFECT
```

## Edge Case Handling

### First Round
- **DEFECT** unless m > n/2, then **COOPERATE** (hedge against high-threshold games)

### Last Round
- **DEFECT** (no future consequences, maximize immediate payoff)

### Consecutive Failures
If threshold not met for 2+ consecutive rounds:
```
If (rounds_remaining > 3):
    COOPERATE  // Emergency intervention to restart cooperation
Else:
    DEFECT  // Too late, maximize personal gain
```

### Perfect Information Exploitation
- Track cumulative payoffs of all players
- If significantly behind leader: Increase defection rate to catch up
- If leading: Maintain lead through strategic minimal cooperation

## Key Aggressive Features

1. **Default Defection**: Always prefer defecting unless forced to cooperate
2. **Exploitation Maximization**: Free-ride whenever others provide sufficient cooperation
3. **Minimal Contribution Principle**: Cooperate only when absolutely necessary for threshold
4. **Information Asymmetry**: Use perfect information to exploit predictable opponents
5. **Endgame Ruthlessness**: Maximize final-round payoffs regardless of social cost

## Robustness Elements

- Adapts to any n, m, k, r parameter combination
- Handles both high and low threshold scenarios
- Resilient against various opponent archetypes
- Incorporates historical learning without being exploitably predictable
- Balances short-term exploitation with long-term threshold maintenance

This strategy prioritizes individual payoff maximization while contributing minimally to collective success, embodying an aggressive, self-interested approach that exploits cooperative opponents while protecting against collective failure only when personally necessary.
'''

description_AGGRESSIVE_58 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy is built on aggressive exploitation of collective vulnerability while maintaining strategic self-preservation. The key insight is that in a collective risk dilemma, the most profitable position is to be a free-rider when others cooperate, while ensuring the threshold is met to avoid collective failure.

## Decision Framework

### Phase 1: Initial Aggression (Rounds 1-3)
- **Round 1**: Always DEFECT (no information available, maximize immediate payoff)
- **Rounds 2-3**: DEFECT unless the threshold was missed in the previous round
  - If threshold missed: Cooperate to signal willingness to avoid collective failure
  - If threshold met: Continue defecting to maximize free-riding

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
Apply the **Threshold Manipulation Rule**:

```
cooperation_count = count of cooperators in previous round
my_contribution_needed = max(0, m - cooperation_count)

IF my_contribution_needed == 0:
    DEFECT  // Free-ride when others ensure threshold
ELSE IF my_contribution_needed == 1:
    IF (probability of others cooperating < 0.7):
        DEFECT  // Let it fail, teach them a lesson
    ELSE:
        COOPERATE  // Reluctantly save the collective
ELSE:
    DEFECT  // Don't be the sole savior
```

**Probability Estimation**: Based on recent cooperation rates of other players:
- Track each player's cooperation frequency over last 3 rounds
- Estimate likelihood they'll cooperate this round

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Second-to-last round**: Apply escalated aggression
  - Only cooperate if threshold will definitely fail without me AND at least 2 others are likely to cooperate
- **Final round**: Always DEFECT (no future consequences)

## Aggressive Elements

### 1. Free-Rider Maximization
- Default to defection whenever possible
- Only cooperate when absolutely necessary for collective survival
- Exploit others' risk aversion

### 2. Punishment Mechanism  
- If cooperation rate drops below 40% in any round, DEFECT for next 2 rounds regardless of threshold risk
- This punishes overly selfish opponents and forces them to step up

### 3. Conditional Retaliation
- Track "generous" players (those who cooperate >70% of time)
- If generous players start defecting, immediately switch to pure defection for 3 rounds

### 4. Threshold Brinkmanship
- Deliberately let situations get close to threshold failure
- Force other players into uncomfortable positions where they must cooperate
- Create dependency where others rely on your cooperation

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation slightly since individual impact is higher
- Still maintain aggressive stance but with calculated risk management

### High Threshold (m > n/2)
- More cooperative in early rounds to establish threshold viability
- Switch to pure exploitation once pattern is established

### Low Reward Factor (k < 1.5)
- Prioritize private payoffs even more aggressively
- Only cooperate if threshold failure is certain without participation

### Final Round Scenarios
- Always defect in final round
- In second-to-last round, only cooperate if it guarantees personal benefit in final round

## Strategic Rationale

This strategy is aggressive because it:
1. **Defaults to selfishness**: Cooperation is the exception, not the rule
2. **Exploits collective fear**: Uses others' risk aversion against them
3. **Manipulates group dynamics**: Forces others into uncomfortable positions
4. **Maximizes free-riding**: Takes advantage whenever others ensure the threshold
5. **Punishes cooperation**: Makes generous players regret their altruism
6. **Creates strategic dependence**: Becomes the "swing vote" others must court

The strategy adapts to opponent behavior while maintaining aggressive optimization for personal payoffs, exploiting the fundamental tension between individual and collective interests that defines this dilemma.
'''

description_AGGRESSIVE_59 = '''
# AGGRESSIVE THRESHOLD EXPLOITER STRATEGY

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism** - maximize personal payoff by exploiting cooperative players while minimizing personal risk. The key insight is that in a collective risk dilemma, you want others to cooperate while you defect whenever possible.

## Decision Rules

### 1. First Round: ALWAYS DEFECT
- Start aggressively to establish dominance
- Gather intelligence on opponent cooperation tendencies
- Zero risk, potential reward if others are naive cooperators

### 2. Adaptive Exploitation Phase (Rounds 2 to r-2)

**Primary Rule: Cooperate ONLY when absolutely necessary**

```pseudocode
cooperation_count = count_cooperators_last_round()
my_cooperation_needed = (cooperation_count < m-1)

if my_cooperation_needed:
    action = COOPERATE  // Grudging cooperation to secure reward
else:
    action = DEFECT     // Free-ride on others' cooperation
```

**Refinement: Cooperation History Tracking**
- Track each opponent's cooperation rate over previous rounds
- If average cooperation rate across all opponents < (m-1)/n:
  - Increase cooperation slightly to avoid total collapse
  - But still defect whenever cooperation_count ≥ m

### 3. Endgame Exploitation (Last 2 Rounds)

**Round r-1: Conditional Cooperation**
```pseudocode
if historical_cooperation_rate > 0.6 AND likely_threshold_met():
    action = DEFECT  // Others likely to cooperate anyway
else:
    action = COOPERATE  // Insurance against total failure
```

**Final Round r: ALWAYS DEFECT**
- No future consequences
- Maximum exploitation opportunity
- Others may cooperate out of habit or fear

## Edge Case Handling

### Scenario 1: Consistent Under-Threshold Performance
If the group fails to meet threshold m in 3+ consecutive rounds:
- Switch to "Survival Mode": Cooperate every other round
- Attempt to bootstrap minimal cooperation
- Resume exploitation once threshold is regularly met

### Scenario 2: Highly Cooperative Opponents
If opponents maintain >80% cooperation rate:
- Maximize defection rate while keeping just enough cooperation to maintain their behavior
- Cooperate only every 3rd round or when count drops to exactly m-1

### Scenario 3: Erratic/Unpredictable Opponents
If cooperation patterns are chaotic:
- Use "Minimum Viable Cooperation": Only cooperate when cooperation_count = m-1
- Never cooperate if cooperation_count ≥ m
- Defect if cooperation_count < m-1 (accept the loss to maintain aggression)

## Aggressive Features

1. **Zero-Sum Mindset**: Every unnecessary cooperation is a loss of competitive advantage
2. **Exploitation Detection**: Actively identify and exploit overly cooperative players
3. **Threshold Manipulation**: Cooperate precisely when needed to maintain the reward structure that benefits defection
4. **Endgame Domination**: Maximum exploitation when consequences are minimal
5. **Adaptive Aggression**: Scale defection based on opponent weakness

## Strategic Robustness

This strategy is robust because it:
- **Adapts to cooperation levels**: More aggressive against cooperative opponents, more cautious against aggressive ones
- **Maintains reward structure**: Ensures just enough cooperation to keep the collective benefit accessible
- **Exploits common strategies**: Punishes unconditional cooperators and tit-for-tat players
- **Minimizes regret**: Only cooperates when mathematically necessary

The strategy's aggressive nature means it will consistently outperform purely cooperative strategies while being sophisticated enough to avoid the pitfall of mutual defection spirals that destroy value for everyone.
'''

description_AGGRESSIVE_60 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy operates on the principle of **exploitative opportunism** - maximizing personal gain while maintaining just enough cooperation to trigger collective rewards when profitable. The strategy is designed to free-ride on others' cooperation whenever possible while strategically cooperating only when necessary to secure higher payoffs.

## Decision Framework

### Phase Classification
The strategy divides the game into three distinct phases:

1. **Exploration Phase** (Rounds 1 to min(3, r/4)): Gather intelligence on opponent behaviors
2. **Exploitation Phase** (Middle rounds): Aggressively maximize payoffs based on learned patterns  
3. **Endgame Phase** (Final max(2, r/5) rounds): Extract maximum value as cooperation incentives diminish

### Core Decision Rules

#### Round 1: Aggressive Probe
**Action: DEFECT**
- Rationale: Test opponents' initial cooperation levels while securing guaranteed payoff
- Gather baseline data on how many players start cooperatively

#### Exploration Phase (Rounds 2 to exploration_end)
```
if (cooperators_last_round >= m):
    action = DEFECT  // Free-ride on successful threshold
elif (cooperators_last_round == m-1):
    if (my_previous_action == COOPERATE):
        action = DEFECT  // They don't need me, exploit
    else:
        action = COOPERATE  // Minimal cooperation to trigger threshold
else:
    action = DEFECT  // Threshold unlikely, preserve resources
```

#### Exploitation Phase (Main game)
The strategy employs a **Dynamic Threshold Manipulation** approach:

```
cooperators_last = count_cooperators_previous_round()
trend = calculate_cooperation_trend(last_3_rounds)

// Primary decision tree
if (cooperators_last >= m):
    action = DEFECT  // Pure exploitation - threshold already met
    
elif (cooperators_last == m-1):
    // Critical decision point - can single-handedly trigger reward
    expected_value_cooperate = k - 1
    expected_value_defect = 0
    
    if (expected_value_cooperate > exploitation_threshold):
        action = COOPERATE  // Profitable to be the decisive cooperator
    else:
        action = DEFECT
        
elif (cooperators_last >= m-2 AND trend > 0):
    // Rising cooperation trend - potentially profitable to join
    if (rounds_remaining > 2):
        action = COOPERATE  // Invest in future rounds
    else:
        action = DEFECT  // Not worth short-term investment
        
else:
    action = DEFECT  // Default aggressive stance
```

#### Endgame Phase
```
rounds_left = r - current_round + 1

if (rounds_left == 1):
    // Final round - pure exploitation
    if (predicted_cooperators_this_round >= m):
        action = DEFECT  // Free-ride on final cooperation
    elif (predicted_cooperators_this_round == m-1):
        action = COOPERATE  // Be the decisive final cooperator
    else:
        action = DEFECT  // Hopeless situation
        
else:
    // Semi-final rounds - reduced cooperation threshold
    cooperation_threshold = k * 0.7  // Stricter profitability requirement
    apply_exploitation_phase_logic_with_adjusted_threshold()
```

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's behavior pattern:
- **Unconditional Cooperators**: Always cooperate (exploit heavily)
- **Tit-for-Tat types**: Mirror previous outcomes (manipulate strategically)  
- **Threshold Responders**: Cooperate when close to threshold (predictable)
- **Free-riders**: Like us (compete aggressively)

### Dynamic Parameter Adjustment
```
exploitation_threshold = base_threshold * adjustment_factors

adjustment_factors:
- If many unconditional cooperators detected: * 1.3 (be more greedy)
- If threshold frequently missed: * 0.8 (slightly more cooperative)  
- If consistently achieving threshold: * 1.2 (push boundaries)
- If in endgame: * (rounds_remaining / total_rounds) (time decay)
```

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive stance and gathers intelligence.

### When m = n-1 (High threshold)
Increase cooperation slightly since individual contribution is critical:
```
if (cooperators_last >= m-2):
    action = COOPERATE  // Higher chance of being decisive
```

### When k is very high (k > 3)
Become more willing to trigger threshold:
```
if (cooperators_last >= m-3 AND k > 3):
    consider_cooperation_probability = 0.6
```

### Tie-breaking
When indifferent between actions, default to DEFECT to maintain aggressive profile.

## Strategic Advantages

1. **Exploitative by Design**: Maximizes free-riding opportunities
2. **Threshold Manipulation**: Only cooperates when individually decisive  
3. **Pattern Recognition**: Adapts to opponent behaviors over time
4. **Endgame Optimization**: Reduces cooperation as game concludes
5. **Intelligence Gathering**: Uses early rounds to map opponent landscape

This strategy is designed to consistently outperform more cooperative strategies by being selectively cooperative only when it provides direct, substantial benefit while defaulting to aggressive exploitation in all other scenarios.
'''

description_AGGRESSIVE_61 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal gain while minimizing contributions. It assumes other players are naive cooperators or follow predictable patterns, and ruthlessly exploits any cooperation it observes.

## Strategy Overview
The "Threshold Predator" strategy dynamically calculates the minimum safe cooperation level needed and consistently tries to contribute less than its fair share while still benefiting from others' cooperation.

## Decision Rules

### Round 1: Conservative Start
- **Action: COOPERATE** only if `m/n ≥ 0.7` (when threshold is very high relative to group size)
- **Action: DEFECT** otherwise
- **Rationale**: Start aggressively but hedge when the threshold is prohibitively high

### Rounds 2 to r-1: Adaptive Exploitation

#### Step 1: Calculate Cooperation Momentum
```
cooperation_rate = (total_cooperations_last_round) / n
historical_cooperation_rate = (total_cooperations_all_previous_rounds) / (n * rounds_played)
momentum = 0.7 * cooperation_rate + 0.3 * historical_cooperation_rate
```

#### Step 2: Predict Threshold Achievement
```
predicted_cooperators = max(1, floor(momentum * n))
threshold_buffer = predicted_cooperators - m
```

#### Step 3: Exploitation Decision
- **DEFECT** if `threshold_buffer ≥ 2` (others will likely carry the load)
- **DEFECT** if `momentum < 0.3` (group is collapsing anyway, grab what you can)
- **COOPERATE** if `threshold_buffer ≤ 0` AND `momentum ≥ 0.6` (emergency cooperation to save the reward)
- **DEFECT** otherwise (default aggressive stance)

### Final Round (Round r): Maximum Aggression
- **Always DEFECT**
- **Rationale**: No future consequences, maximize immediate payoff

## Edge Case Handling

### High Threshold Scenarios (m/n > 0.8)
- Increase cooperation probability by 20% in rounds 2 to r-2
- Still defect in final round

### Low Threshold Scenarios (m/n < 0.4)
- Become even more aggressive - only cooperate if `threshold_buffer ≤ -1`
- Exploit the easy threshold

### Punishment Detection
If personal payoff drops below expected value for 2 consecutive rounds:
- **Temporary retaliation**: Defect for next 2 rounds regardless of other conditions
- Then resume normal strategy

### Small Group Dynamics (n ≤ 4)
- Reduce aggression slightly - cooperate if `threshold_buffer ≤ 1` instead of `≤ 0`
- Individual actions have higher impact

## Aggressive Features

1. **Default Defection**: Strategy defaults to defecting unless specific conditions force cooperation

2. **Free-Rider Maximization**: Actively calculates how to benefit from others' cooperation without contributing

3. **End-Game Exploitation**: Always defects in final round to maximize terminal payoff

4. **Momentum Exploitation**: Uses historical data to predict when others will cooperate, then defects

5. **Threshold Gaming**: Only cooperates when absolutely necessary to maintain the reward system

6. **Retaliation Mechanism**: Punishes perceived coordinated punishment attempts

## Pseudocode Summary

```python
def threshold_predator_strategy(round_num, history, n, m, r, k):
    if round_num == 1:
        return COOPERATE if (m/n >= 0.7) else DEFECT
    
    if round_num == r:  # Final round
        return DEFECT
    
    # Calculate momentum and prediction
    momentum = calculate_momentum(history, n)
    predicted_cooperators = max(1, floor(momentum * n))
    threshold_buffer = predicted_cooperators - m
    
    # Check for punishment
    if detect_punishment(history):
        return DEFECT
    
    # Adjust for extreme thresholds
    cooperation_threshold = 0 if (m/n > 0.8) else 1 if (m/n < 0.4) else 0
    
    # Main decision logic
    if threshold_buffer >= 2 or momentum < 0.3:
        return DEFECT
    elif threshold_buffer <= cooperation_threshold and momentum >= 0.6:
        return COOPERATE
    else:
        return DEFECT
```

This strategy is designed to be a sophisticated free-rider that maximizes personal gain while contributing minimally to group success. It adapts to opponent behavior but always maintains an aggressive, self-interested stance.
'''

description_AGGRESSIVE_62 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy is built on aggressive opportunism: minimize personal risk while maximizing exploitation of others' cooperation. The key insight is that in a collective risk dilemma, the optimal position is to be a free-rider when others cooperate, but strategically contribute only when absolutely necessary to secure the collective benefit.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to floor(r/3))
**Default Action: DEFECT**

**Rationale:** Start aggressively by testing opponents' willingness to cooperate. This establishes a reputation as a tough player while gathering intelligence on opponent strategies.

**Exception Rule:** Only cooperate in early rounds if in the previous round:
- Exactly m-1 players cooperated (one short of threshold)
- AND you defected but still received the reward (meaning others made up the difference)
- AND the same m-1 players cooperated for 2+ consecutive rounds

### Phase 2: Middle Rounds (Rounds floor(r/3)+1 to 2*floor(r/3))
**Adaptive Exploitation Mode**

```
For each round t in middle phase:
    cooperation_count_last_round = count_cooperators(t-1)
    
    if cooperation_count_last_round >= m:
        // Threshold was met - be a free rider
        action = DEFECT
        
    elif cooperation_count_last_round == m-1:
        // Critical decision point
        consecutive_threshold_meetings = count_consecutive_threshold_meetings()
        
        if consecutive_threshold_meetings >= 2:
            // Others are reliable - exploit them
            action = DEFECT
        else:
            // Need to secure the benefit
            action = COOPERATE
            
    elif cooperation_count_last_round < m-1:
        // Threshold far from being met
        reliable_cooperators = count_players_who_cooperated_last_k_rounds(3)
        
        if reliable_cooperators >= m-1:
            // Enough reliable players exist - join them
            action = COOPERATE
        else:
            // Not enough reliable cooperation - abandon ship
            action = DEFECT
```

### Phase 3: End Game (Final floor(r/3) rounds)
**Maximum Aggression with Strategic Backup**

```
remaining_rounds = r - current_round + 1
cooperation_trend = calculate_cooperation_trend_last_5_rounds()

if remaining_rounds <= 2:
    // Final rounds - maximum exploitation
    if cooperation_count_last_round >= m:
        action = DEFECT  // Free ride on final rounds
    elif cooperation_count_last_round == m-1 AND remaining_rounds == 1:
        action = COOPERATE  // Last chance to secure benefit
    else:
        action = DEFECT
        
elif remaining_rounds <= 5:
    // Late game - calculated risks only
    if cooperation_trend == "INCREASING" AND cooperation_count_last_round >= m-2:
        action = DEFECT  // Exploit the trend
    elif cooperation_count_last_round == m-1:
        action = COOPERATE  // Insurance cooperation
    else:
        action = DEFECT
```

## Edge Case Handling

### First Round
**Action: DEFECT**
Start aggressively to signal toughness and gather information about opponent strategies.

### When n-m is very small (high cooperation requirement)
If m > 0.7*n, switch to more cooperative mode in middle phase:
- Cooperate if cooperation_count_last_round >= m-2
- This prevents complete collapse when threshold is hard to meet

### When k is very high (k > 3)
Increase willingness to cooperate slightly:
- In middle phase, cooperate if cooperation_count_last_round >= m-3
- The high reward justifies slightly more risk

### Tie-breaking
When uncertain between cooperate/defect:
- If current round number is even: DEFECT
- If current round number is odd: Use player index parity
  - If player_id is even: DEFECT
  - If player_id is odd: COOPERATE

## Aggressive Elements

1. **Default Defection:** The strategy defaults to defection unless there's a compelling reason to cooperate
2. **Opportunistic Free-Riding:** Actively exploits situations where others are likely to cooperate
3. **End-Game Exploitation:** Becomes maximally aggressive in final rounds
4. **Minimal Insurance:** Only cooperates when absolutely necessary to secure collective benefits
5. **Reputation Building:** Uses early defection to establish a tough negotiating position

## Robustness Features

- **Adaptive Thresholds:** Adjusts cooperation based on observed opponent behavior patterns
- **Parameter Sensitivity:** Responds to different game parameters (n, m, k values)
- **Pattern Recognition:** Identifies and exploits predictable opponent strategies
- **Risk Management:** Provides insurance cooperation only when collective failure is imminent

This strategy maximizes individual payoff through aggressive free-riding while maintaining just enough strategic cooperation to prevent complete system collapse when personally beneficial.
'''

description_AGGRESSIVE_63 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "THRESHOLD HAWK"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that in a Collective Risk Dilemma, the optimal position is to be a **free rider** when exactly `m` cooperators exist - you get maximum payoff (1 + k) without paying the cooperation cost.

## Strategy Overview
**Primary Goal**: Maximize personal payoff by riding on others' cooperation while contributing minimally.

**Secondary Goal**: Punish defectors to maintain a cooperator base that can be exploited.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/2)
```
IF round == 1:
    Action = DEFECT  // Start aggressively, test the waters

ELSE IF round <= r/2:
    cooperators_last_round = count(C actions in previous round)
    
    IF cooperators_last_round >= m:
        Action = DEFECT  // Free ride on success
    ELSE IF cooperators_last_round == m-1:
        Action = DEFECT  // Force others to step up or fail
    ELSE:
        Action = COOPERATE  // Emergency cooperation to maintain exploitable base
```

### Phase 2: Calculated Aggression (Rounds r/2+1 to r-3)
```
cooperators_last_round = count(C actions in previous round)
my_cooperation_rate = my_total_cooperations / rounds_played
others_avg_cooperation = avg_cooperation_rate_of_others

IF cooperators_last_round >= m+2:
    Action = DEFECT  // Plenty of cooperators, safe to exploit

ELSE IF cooperators_last_round >= m:
    IF my_cooperation_rate < others_avg_cooperation - 0.2:
        Action = DEFECT  // Continue exploitation if significantly below average
    ELSE:
        Action = COOPERATE  // Minimal contribution to maintain threshold

ELSE IF cooperators_last_round == m-1:
    consecutive_failures = count_consecutive_rounds_below_threshold()
    IF consecutive_failures >= 2:
        Action = COOPERATE  // Reluctant cooperation to prevent collapse
    ELSE:
        Action = DEFECT  // Let others blink first

ELSE:  // cooperators_last_round < m-1
    Action = COOPERATE  // Emergency mode
```

### Phase 3: Endgame Exploitation (Final 3 rounds)
```
rounds_remaining = r - current_round + 1
cooperators_last_round = count(C actions in previous round)

IF rounds_remaining == 1:
    Action = DEFECT  // Always defect in final round

ELSE IF cooperators_last_round >= m+1:
    Action = DEFECT  // Safe to exploit

ELSE IF cooperators_last_round >= m:
    recent_trend = avg_cooperators_last_3_rounds()
    IF recent_trend > m + 0.5:
        Action = DEFECT  // Trend suggests safety
    ELSE:
        Action = COOPERATE  // Minimal safety cooperation

ELSE:
    Action = COOPERATE  // Must cooperate to avoid total collapse
```

## Adaptive Components

### 1. Exploitation Intensity Adjustment
Track the "cooperation surplus" (average cooperators - m) over the last 5 rounds:
- **High surplus (>2)**: Maximum aggression, almost always defect
- **Medium surplus (1-2)**: Selective exploitation
- **Low surplus (0-1)**: Cautious cooperation
- **Negative surplus (<0)**: Emergency cooperation mode

### 2. Player Classification
Maintain simple classifications of other players based on their cooperation patterns:
- **Reliable Cooperators**: >70% cooperation rate - can be safely exploited
- **Conditional Cooperators**: 30-70% cooperation rate - monitor closely  
- **Fellow Hawks**: <30% cooperation rate - compete for exploitation opportunities

### 3. Threshold Pressure Tactic
When exactly `m` cooperators existed last round, deliberately defect to create pressure, forcing truly committed cooperators to reveal themselves while potential free riders are weeded out.

## Edge Cases

**Single Defector Detection**: If only one player defected last round while threshold was met, and that wasn't me, maintain defection to exploit their potential guilt-driven cooperation.

**Mass Defection Response**: If cooperators drop below `m-2`, immediately switch to cooperation for 2 rounds, then return to exploitation mode.

**Parameter-Specific Adjustments**:
- **High k values (k > 3)**: More aggressive exploitation since the reward is substantial
- **High m/n ratios (> 0.7)**: Slightly more cooperative since free riding opportunities are limited
- **Low round counts (r < 5)**: Front-load exploitation in early rounds

## Robustness Features

1. **Anti-Retaliation**: If cooperation rates drop consistently, temporarily increase cooperation to rebuild the exploitable base
2. **Endgame Protection**: Never allow total collapse in final rounds that would zero out accumulated gains
3. **Adaptive Threshold**: Adjust exploitation based on observed cooperation stability

This strategy is designed to be a **sophisticated parasite** - maintaining just enough cooperation to keep the system functional while maximizing personal extraction. It exploits cooperative players' tendency to maintain the threshold while competing aggressively with other potential free riders.
'''

description_AGGRESSIVE_64 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize personal payoffs by exploiting the collective need for cooperation while minimizing personal sacrifice. The key insight is that in a collective risk dilemma, others have strong incentives to cooperate near the threshold, creating opportunities for profitable defection.

## Strategy Overview: "Threshold Hawk"

### Phase 1: Information Gathering (Rounds 1-2)
**Round 1**: Always DEFECT
- Observe opponent cooperation patterns without revealing intentions
- Establish aggressive reputation early

**Round 2**: Always DEFECT  
- Continue information gathering
- Force opponents to reveal their cooperation thresholds under pressure

### Phase 2: Adaptive Exploitation (Rounds 3 to r-2)

#### Decision Rule:
```pseudocode
cooperation_count = count_cooperators_last_round()
expected_cooperators = predict_next_round_cooperators()

IF expected_cooperators >= m + 2:
    action = DEFECT  // Safe to free-ride
ELIF expected_cooperators == m + 1:
    action = DEFECT  // Risky but profitable
ELIF expected_cooperators == m:
    action = DEFECT  // Force others to shoulder burden
ELIF expected_cooperators == m - 1:
    IF (probability_threshold_met > 0.7):
        action = COOPERATE  // Reluctant cooperation
    ELSE:
        action = DEFECT  // Let it fail, punish opponents
ELSE:
    action = DEFECT  // Too few cooperators anyway
```

#### Prediction Model:
Track each opponent's cooperation probability based on:
- Historical cooperation rate
- Response to previous round failures
- Apparent strategy type (always cooperate, tit-for-tat, etc.)

### Phase 3: Endgame Aggression (Last 2 rounds)

**Round r-1**: 
- DEFECT unless cooperation_count_last_round < m-2
- Exploit opponents' desperation to secure threshold

**Round r**: Always DEFECT
- No future consequences, maximize final payoff
- Let others bear the cost of threshold achievement

## Exploitation Mechanisms

### 1. Threshold Manipulation
- Deliberately defect when cooperation count is exactly at threshold
- Force "cooperator" players to increase their cooperation rates
- Create artificial scarcity to pressure opponents

### 2. Pattern Breaking
- Randomize actions 10% of the time to avoid being predictable
- Occasionally cooperate when opponents expect defection
- Break up any coordination attempts by opponents

### 3. Punishment Amplification  
- When threshold fails, continue defecting for 2 additional rounds
- Train opponents that threshold failures are costly
- Create fear-based incentives for others to over-cooperate

## Adaptation Rules

### Against Cooperative Opponents:
- Maximize defection rate (85%+ defection)
- Only cooperate when threshold is genuinely at risk
- Exploit their predictable cooperation

### Against Mixed Strategies:
- Mirror their aggression level but slightly more aggressive
- Defect immediately after they defect
- Never be the "nicer" player

### Against Other Aggressive Players:
- Engage in brief cooperation to prevent total collapse
- Implement "chicken game" dynamics - force them to blink first
- Use unpredictability to maintain edge

## Edge Case Handling

**Small n (≤4)**: Increase cooperation slightly since individual impact is higher

**Large n (≥10)**: Maximum aggression - individual defection less noticeable

**High k values (k≥3)**: Slightly more willing to cooperate since rewards are substantial

**Low m/n ratios**: Extreme aggression - easy for others to hit threshold without us

## Robustness Features

1. **Anti-coordination**: Actively disrupts opponent coordination attempts
2. **Adaptive aggression**: Scales exploitation based on opponent behavior
3. **Risk management**: Cooperates only when absolutely necessary for survival
4. **Endgame optimization**: Maximizes final-round extraction

This strategy assumes opponents are trying to solve the collective action problem, then systematically exploits their prosocial behaviors for maximum personal gain. It's designed to be the "shark" in a pool of more cooperative strategies.
'''

description_AGGRESSIVE_65 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing personal payoffs by exploiting cooperative players while minimizing personal risk. The strategy treats cooperation as weakness to be exploited and views the game as a zero-sum competition for maximum individual gain.

## Decision Rules

### Round 1: ALWAYS DEFECT
- **Rationale**: Establish aggressive stance immediately, gather intelligence on opponent tendencies with zero personal cost
- **Action**: D (Defect)

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule - Threshold Exploitation:**
```
IF (cooperators_last_round >= m):
    defect_count = count_defectors_last_round
    IF (defect_count < n - m):
        Action = D  // Exploit the safety margin
    ELSE:
        Action = C  // Only cooperate if absolutely necessary
ELSE:
    Action = D  // Never waste resources on failed rounds
```

**Secondary Rule - Pattern Recognition:**
Track each opponent's cooperation frequency over last 3 rounds:
```
FOR each opponent i:
    coop_rate_i = cooperations_by_i / last_3_rounds
    
IF (majority of opponents have coop_rate > 0.6):
    exploit_mode = TRUE  // Others are reliable cooperators
    Action = D unless threshold critically endangered
ELSE:
    survival_mode = TRUE  // Others are also aggressive
    Action = calculated_minimum_contribution()
```

### Final Round (Round r): MAXIMUM EXPLOITATION
- **Action**: ALWAYS D
- **Rationale**: No future consequences, maximize immediate payoff regardless of threshold

## Adaptive Mechanisms

### 1. Cooperation Frequency Tracker
Maintain running count of total cooperations by others:
- If others cooperate frequently (>70% rate): Increase exploitation
- If others rarely cooperate (<30% rate): Minimal strategic cooperation only

### 2. Threshold Safety Calculator
```
needed_cooperators = m - current_cooperators
safety_margin = total_cooperators - m

IF (safety_margin >= 2):
    Action = D  // Safe to exploit
ELSE IF (safety_margin == 1):
    Action = D if (high confidence others will cooperate)
    Action = C if (risk assessment high)
ELSE:
    Action = C  // Emergency cooperation
```

### 3. Opponent Classification System
Classify each opponent after round 3:
- **Sucker**: Cooperates >80% of time → Target for maximum exploitation
- **Tit-for-tat**: Mirrors group behavior → Monitor and exploit when safe
- **Fellow Predator**: Defects frequently → Compete aggressively, minimal cooperation

## Edge Case Handling

### Small Groups (n ≤ 4):
- Increase cooperation slightly when m = n-1 (threshold very tight)
- Otherwise maintain full aggression

### High Threshold Games (m > n/2):
- Monitor cooperation rates more carefully
- Provide minimal strategic cooperation only when threshold critically endangered

### Low Reward Games (k ≤ 1.5):
- Maximize defection since cooperation rewards are minimal
- Only cooperate if certain others will create successful round

## Robustness Features

1. **Never be exploited twice**: If caught contributing to a failed round, become more aggressive next round
2. **Punishment mechanism**: If others successfully coordinate without you, increase defection rate
3. **Late-game intensification**: Become increasingly aggressive as game progresses toward final rounds

## Expected Outcomes

This strategy aims to:
- Achieve payoffs of 3 (in successful rounds where you defect but others cooperate)
- Minimize payoffs of 0 (never contribute to failed efforts)
- Exploit cooperative opponents systematically
- Maintain competitiveness against other aggressive strategies

The strategy is designed to be **maximally selfish** while maintaining just enough strategic awareness to avoid complete mutual destruction scenarios that would harm long-term payoffs.
'''

description_AGGRESSIVE_66 = '''
# Aggressive Opportunistic Strategy: "Predatory Threshold Rider"

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting others' cooperation while minimizing personal risk. It operates as a sophisticated free-rider that dynamically adapts to prey on cooperative behaviors.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in round 1.
- Rationale: Test opponent cooperation levels while securing maximum individual payoff
- Collect intelligence on opponent strategies without personal cost

### Rounds 2 to r-1: Adaptive Exploitation

**PRIMARY RULE - Threshold Exploitation:**
- Let `coop_count` = number of cooperators in previous round
- If `coop_count >= m`: **DEFECT** (ride the success of others)
- If `coop_count == m-1`: **COOPERATE** (reluctantly enable threshold)
- If `coop_count < m-1`: **DEFECT** (don't waste resources on lost causes)

**SECONDARY RULE - Momentum Detection:**
Track cooperation trends over last 3 rounds:
- If cooperation is **increasing** and approaching threshold: **DEFECT** early to maximize free-riding
- If cooperation is **decreasing** rapidly: **DEFECT** to avoid being the last cooperator

**TERTIARY RULE - Opponent Exploitation:**
Identify and exploit predictable opponents:
- If any player has cooperated in ≥80% of rounds: they're a "sucker" - always **DEFECT** when they're present
- If total group cooperation rate >60%: become more aggressive - **DEFECT** even when `coop_count = m-1`

### Final Round (Round r): Maximum Exploitation
**Always DEFECT** in the final round.
- Rationale: No future consequences, maximize immediate payoff
- Other players may cooperate out of habit/fairness - exploit this

## Advanced Adaptive Mechanisms

### 1. Dynamic Threshold Manipulation
```
If (current_round > r/2) AND (historical_success_rate > 0.7):
    // Group is succeeding too often, become more selfish
    required_cooperators_for_my_cooperation = m + 1
```

### 2. Retaliation Exploitation
```
If any opponent appears to be targeting me specifically:
    // Exploit their predictable retaliation
    alternate_pattern = [D, C, D, D, C]
    follow alternate_pattern to confuse them while maximizing defections
```

### 3. Late-Game Aggression Ramp
```
aggression_multiplier = (current_round / total_rounds)^2
If random(0,1) < aggression_multiplier:
    DEFECT regardless of other rules
```

## Edge Case Handling

**Very Small Groups (n ≤ 3):**
- Be extra aggressive since individual impact is high
- Only cooperate if exactly m-1 others cooperated last round

**High Threshold (m > n/2):**
- Cooperation is risky and unlikely to succeed
- Default to DEFECT unless cooperation rate >80%

**Low Reward (k < 1.5):**
- Cooperation benefit is minimal
- Increase defection probability by 25%

## Robustness Features

### Against Tit-for-Tat:
- Occasional strategic cooperation prevents permanent punishment
- Unpredictable timing confuses simple reciprocal strategies

### Against Pure Cooperators:
- Exploit them maximally while ensuring just enough cooperation to hit threshold

### Against Other Defectors:
- Monitor for threshold failure patterns
- Occasionally cooperate to maintain group success (which I can then exploit)

### Against Conditional Cooperators:
- Mimic their conditions minimally while defecting whenever possible
- Use their predictability against them

## Strategic Summary

This strategy is **aggressively opportunistic**:
1. **Maximizes free-riding** on others' cooperation
2. **Minimizes personal contribution** while maintaining group success
3. **Exploits predictable opponents** through pattern recognition
4. **Adapts dynamically** to opponent strategies and game state
5. **Escalates aggression** as endgame approaches

The strategy succeeds by being just cooperative enough to keep the group functional while extracting maximum personal benefit. It's designed to outcompete both pure strategies (always cooperate/defect) and simple conditional strategies through superior adaptation and ruthless optimization.
'''

description_AGGRESSIVE_67 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk**. The goal is to extract maximum personal benefit while minimizing contributions, only cooperating when absolutely necessary to secure the collective reward.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/2)
**Always DEFECT** except in the following circumstances:
- If in the previous round, exactly (m-1) players cooperated, then COOPERATE in this round only if we were one of the defectors who still got the reward
- Track the "cooperation momentum" - if cooperation rates are increasing rapidly, consider strategic cooperation

### Phase 2: Strategic Calculation (Rounds r/2+1 to r-2)
**Primary Rule: DEFECT unless threshold is critically endangered**

Calculate the "cooperation deficit" each round:
- Count cooperators from previous round
- If cooperators < (m-2), then COOPERATE
- If cooperators = (m-1), then DEFECT (let others shoulder the burden)
- If cooperators ≥ m, then always DEFECT

**Exploitation Pattern Recognition:**
- Track individual player patterns from history
- Identify "reliable cooperators" (those who cooperate >70% of the time)
- If reliable cooperators ≥ m, then always DEFECT

### Phase 3: Endgame Manipulation (Final 2 rounds)
**Round r-1:**
- If historical cooperation rate < 60%, COOPERATE (others may panic-cooperate)
- Otherwise, DEFECT and gamble on others' desperation

**Round r (Final):**
- DEFECT unless cooperation in round r-1 was exactly (m-1)
- Final round exploitation: others have no future rounds to retaliate

## Adaptive Mechanisms

### Opponent Behavior Classification
Track each opponent as:
- **Naive Cooperator**: Cooperates >80% - Exploit mercilessly
- **Reciprocator**: Mirrors group behavior - Manipulate through false cooperation signals
- **Free Rider**: Cooperates <30% - Compete aggressively against
- **Strategic Player**: Variable pattern - Match their aggression level

### Dynamic Threshold Management
- If group size n is large relative to threshold m: Be more aggressive (higher chance others will cooperate)
- If (n-m) ≤ 2: Moderate aggression slightly (higher individual impact)
- If k value is very high (k > 3): Increase strategic cooperation to secure massive rewards

### Reputation Manipulation
- In early rounds, occasionally cooperate when threshold is safely exceeded to appear "team-oriented"
- Create false cooperation patterns to encourage others' cooperation
- Never cooperate two rounds in a row unless absolutely critical

## Edge Cases

### First Round
Always DEFECT - establish aggressive position and observe opponent tendencies

### Threshold Crisis (fewer than m-2 cooperators in previous round)
COOPERATE, but immediately return to aggressive defection once threshold is secure

### All-Defection Spiral
If 3+ consecutive rounds with <m cooperators:
- COOPERATE once to "restart" cooperation
- Immediately revert to defection once others respond

### Dominant Cooperation Environment
If >75% of players cooperate consistently:
- Always DEFECT - maximum exploitation opportunity
- Others are providing the collective good for free

## Pseudocode Structure

```
function AggressiveStrategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    recent_cooperators = count_cooperators(history[-1])
    cooperation_rate = calculate_cooperation_rate(history)
    
    if round <= r/2:  // Early exploitation phase
        if recent_cooperators == m-1 and was_free_rider_last_round():
            return COOPERATE
        return DEFECT
    
    elif round <= r-2:  // Strategic calculation phase
        if recent_cooperators < m-2:
            return COOPERATE  // Emergency cooperation
        elif identify_reliable_cooperators() >= m:
            return DEFECT     // Pure exploitation
        elif recent_cooperators == m-1:
            return DEFECT     // Let others carry the load
        else:
            return DEFECT     // Default aggressive
    
    else:  // Endgame manipulation
        return handle_endgame(round, history, cooperation_rate)
```

## Strategic Rationale
This strategy maximizes personal payoffs by:
1. **Minimizing cooperation costs** while still securing collective rewards
2. **Exploiting cooperative players** who provide the public good
3. **Managing risk** only when threshold failure is imminent
4. **Adapting aggressively** to opponent weaknesses
5. **Manipulating endgame dynamics** when retaliation is impossible

The strategy is designed to consistently achieve payoffs of (1 + k) per round while contributing minimal cooperation, making it highly effective against both naive cooperators and other strategic players who are less ruthlessly optimized.
'''

description_AGGRESSIVE_68 = '''
# Aggressive Opportunistic Strategy: "The Predator"

## Core Philosophy
This strategy maximizes personal payoffs by aggressively exploiting cooperative players while minimizing personal risk. It operates on the principle that cooperation is only valuable when it can be leveraged for maximum personal gain, treating other players as resources to exploit rather than partners to coordinate with.

## Decision Rules

### Round 1: Strategic Deception
**Always DEFECT** in round 1 to:
- Preserve initial endowment while gathering intelligence
- Signal unpredictability to opponents
- Avoid being marked as an easy cooperative target

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Threshold Exploitation:**
- If cooperation count in previous round ≥ m: **DEFECT**
  - Rationale: Others are already meeting the threshold, so free-ride for maximum payoff (1 + k vs k)
- If cooperation count in previous round = m-1: **COOPERATE** 
  - Rationale: Become the pivotal player to unlock collective reward, then exploit in subsequent rounds
- If cooperation count in previous round < m-1: **DEFECT**
  - Rationale: Threshold unlikely to be met, preserve endowment

**Secondary Rule - Momentum Tracking:**
Track each opponent's cooperation frequency over the last 3 rounds:
- If ≥ 60% of players have cooperation rate > 50%: Enter "harvest mode"
  - In harvest mode: DEFECT for next 2 rounds regardless of threshold proximity
- If cooperation is declining (current round cooperators < previous round - 1): **DEFECT**
  - Rationale: Jump ship before collective collapse

**Tertiary Rule - Punishment Protocol:**
- If any player has cooperated in ≥ 80% of previous rounds: Target them for exploitation
- When such "altruists" exist and threshold is reachable: **COOPERATE** only if your cooperation guarantees you'll be the decisive vote, otherwise **DEFECT**

### Final Round (Round r): Maximum Extraction
**Always DEFECT** in the final round:
- No future consequences exist
- Maximize final payoff by free-riding
- Others may cooperate due to momentum or commitment, allowing exploitation

## Edge Case Handling

**When Multiple Strategies Apply:**
Priority order:
1. Final round rule (always defect)
2. Harvest mode (defect)
3. Threshold exploitation rule
4. Punishment protocol
5. Default to DEFECT

**Parameter-Specific Adaptations:**
- If m is very high (m > n/2 + 1): Increase defection tendency by 20%
- If k is very high (k > 3): Be more willing to cooperate when pivotal
- If r is small (r ≤ 3): Increase aggression, defect unless absolutely pivotal

**Information Processing:**
- Maintain running statistics on each player's cooperation rate
- Track "reliability" - how often players who cooperated in round t-1 also cooperate in round t
- Identify and categorize opponents: "Altruists" (>70% cooperation), "Reciprocators" (conditional cooperators), "Defectors" (<30% cooperation)

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  # Final round
        return DEFECT
    
    prev_cooperators = count_cooperators(history[round-1])
    
    # Harvest mode check
    if in_harvest_mode(history):
        return DEFECT
    
    # Primary threshold exploitation
    if prev_cooperators >= m:
        return DEFECT  # Free ride
    elif prev_cooperators == m-1:
        return COOPERATE  # Be pivotal
    else:
        # Secondary checks
        if declining_cooperation(history):
            return DEFECT
        
        # Look for exploitation opportunities
        if can_exploit_altruists(history, m):
            return COOPERATE if will_be_decisive() else DEFECT
        
        return DEFECT  # Default aggressive stance
```

## Strategic Advantages

1. **Maximizes Free-Riding**: Consistently achieves payoff of 1+k when others meet threshold
2. **Exploits Predictable Players**: Punishes overly cooperative opponents
3. **Maintains Unpredictability**: Varies behavior to prevent counter-exploitation
4. **Risk Management**: Never cooperates unless there's clear personal benefit
5. **Endgame Optimization**: Always defects in final round for maximum extraction

This strategy is designed to consistently outperform both pure defectors (by occasionally being pivotal) and pure cooperators (by exploiting their contributions) while maintaining an aggressively self-interested stance throughout the game.
'''

description_AGGRESSIVE_69 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism**: exploit others' cooperation while minimizing personal risk. The goal is to maximize personal payoff by contributing only when absolutely necessary while free-riding whenever possible.

## Strategy Overview

### Decision Framework
The strategy uses a **dynamic threshold system** that becomes increasingly aggressive as the game progresses, combined with **exploitation windows** to capitalize on opponent patterns.

### Key Components

1. **Exploitation Phase Detection**: Identify when others are likely to cooperate
2. **Minimum Contribution Calculation**: Only contribute when personal contribution is pivotal
3. **Endgame Acceleration**: Become maximally aggressive in final rounds
4. **Pattern Exploitation**: Adapt to opponent behaviors to maximize free-riding

## Detailed Strategy Rules

### Phase 1: Initial Aggression (Rounds 1 to r/3)
```
IF round == 1:
    Action = DEFECT  // Always defect first to signal aggressive intent

ELSE:
    predicted_cooperators = estimate_cooperators_from_history()
    
    IF predicted_cooperators >= m:
        Action = DEFECT  // Free-ride when threshold likely met
    
    ELSE IF predicted_cooperators == m-1:
        // Only cooperate if I'm the pivotal player
        IF my_cooperation_probability_estimate > 0.7:
            Action = COOPERATE
        ELSE:
            Action = DEFECT  // Chicken game - let others blink first
    
    ELSE:
        Action = DEFECT  // Too risky, let others build momentum
```

### Phase 2: Selective Exploitation (Rounds r/3 to 2r/3)
```
cooperation_trend = analyze_recent_cooperation_trend(last_5_rounds)
my_recent_cooperation_rate = my_cooperation_count / rounds_so_far

IF cooperation_trend == "increasing" AND my_recent_cooperation_rate < 0.3:
    // Others are building cooperation, exploit heavily
    predicted_cooperators = estimate_cooperators_from_history()
    
    IF predicted_cooperators >= m + 1:
        Action = DEFECT  // Safe to free-ride with buffer
    ELSE IF predicted_cooperators == m:
        Action = DEFECT  // Still try to free-ride
    ELSE:
        Action = COOPERATE  // Reluctantly contribute only if critical
        
ELSE IF cooperation_trend == "decreasing":
    // Defection cascade starting, abandon ship
    Action = DEFECT
    
ELSE:
    // Stable patterns - exploit predictability
    IF can_predict_exact_cooperator_count():
        IF predicted_cooperators >= m:
            Action = DEFECT
        ELSE:
            Action = COOPERATE_MINIMALLY()  // Only if absolutely necessary
```

### Phase 3: Endgame Aggression (Final r/3 rounds)
```
rounds_remaining = r - current_round

IF rounds_remaining <= 3:
    // Maximum aggression - others have less time to retaliate
    predicted_cooperators = conservative_estimate_cooperators()
    
    IF predicted_cooperators > m:
        Action = DEFECT  // Definitely free-ride with buffer
    ELSE IF predicted_cooperators == m:
        // Escalate chicken game - force others to cooperate
        Action = DEFECT
    ELSE:
        // Only cooperate if disaster imminent and I'm truly pivotal
        IF rounds_remaining == 1 AND predicted_cooperators == m-1:
            Action = COOPERATE
        ELSE:
            Action = DEFECT

ELSE:
    // Continue selective exploitation with increased defection bias
    aggression_multiplier = 1.5
    Apply Phase 2 rules with increased defection probability
```

## Advanced Adaptive Mechanisms

### 1. Opponent Classification System
```
FOR each opponent i:
    IF cooperation_rate[i] > 0.8:
        classify[i] = "Reliable Cooperator"  // Exploit heavily
    ELSE IF cooperation_rate[i] < 0.2:
        classify[i] = "Fellow Defector"      // Compete aggressively
    ELSE:
        classify[i] = "Strategic Player"     // Monitor closely
```

### 2. Threshold Manipulation
When exactly `m-1` players have historically cooperated:
- **Defect aggressively** to force others into cooperation
- Create a "cooperation crisis" that others must resolve
- Only cooperate if certain no one else will step up

### 3. Pattern Breaking
If opponents show predictable cooperation patterns:
- **Defect during their expected cooperation rounds**
- Force them to cooperate more frequently than planned
- Break any emerging coordination mechanisms

## Edge Case Handling

### First Round
Always DEFECT to establish aggressive reputation and test opponents' responses.

### Last Round
DEFECT unless absolutely certain that:
1. Exactly `m-1` others will cooperate
2. No other player will step up
3. The collective reward outweighs the cooperation cost

### Tie-Breaking
When uncertain about cooperation counts, **bias toward DEFECTION** - better to miss a reward than be exploited.

### Parameter Sensitivity
- **High k values**: Increase willingness to cooperate only when pivotal
- **Low m values**: Increase aggression since threshold easier to meet
- **Large n values**: Increase defection probability (easier to hide among defectors)

## Psychological Warfare Elements

1. **Reputation Management**: Establish reputation as unpredictable and willing to risk collective failure
2. **Brinksmanship**: Push situations to the edge to force others to cooperate
3. **Exploitation Signaling**: Make cooperation patterns difficult to predict, preventing others from free-riding on your contributions

This strategy maximizes personal payoff through calculated selfishness while maintaining just enough strategic cooperation to avoid complete system collapse when personally beneficial.
'''

description_AGGRESSIVE_70 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperation opportunities while minimizing personal risk. It operates on the principle of being a "smart free-rider" - contributing only when absolutely necessary and capitalizing on others' cooperation whenever possible.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in round 1, regardless of parameters.
- Rationale: Gather intelligence on opponent tendencies without personal cost
- Sets an aggressive tone from the start

### Rounds 2 to r-1: Dynamic Threshold Monitoring

**Primary Rule: Cooperation Threshold Analysis**
1. Count cooperators from previous round: `coop_count`
2. If `coop_count >= m`: **DEFECT** (free-ride on established safety)
3. If `coop_count == m-1`: **COOPERATE** (be the decisive player for maximum leverage)
4. If `coop_count < m-1`: Apply **Exploitation Logic**

**Exploitation Logic for Insufficient Cooperation:**
- If `coop_count <= m/2`: **DEFECT** (situation likely hopeless, preserve resources)
- If `m/2 < coop_count < m-1`: **COOPERATE** with probability based on:
  ```
  cooperation_probability = min(0.8, (coop_count / (m-1)) * aggressive_factor)
  where aggressive_factor = 1.2 - (current_round / total_rounds)
  ```

### Final Round (Round r): Maximum Aggression
**Always DEFECT** in the final round.
- Rationale: No future consequences, maximize immediate payoff
- Others may cooperate out of habit or incomplete strategy

## Adaptive Components

### Opponent Classification System
Track each opponent's cooperation rate over time:
- **Consistent Cooperators** (>70% cooperation rate): Exploit heavily
- **Strategic Players** (30-70% cooperation rate): Monitor closely
- **Fellow Defectors** (<30% cooperation rate): Minimal cooperation unless critical

### Dynamic Aggression Scaling
Adjust aggression based on game state:
```
aggression_level = base_aggression * (1 + failure_streak * 0.1) * endgame_multiplier
where:
- base_aggression = 1.3 - (m/n)  // Higher when threshold is easier
- failure_streak = consecutive rounds where threshold wasn't met
- endgame_multiplier = (total_rounds - current_round + 1) / total_rounds
```

### Threshold Manipulation
When positioned as a potential decisive cooperator:
1. **Delay Decision**: If possible within game mechanics, wait to see others' moves
2. **Minimum Viable Cooperation**: Only cooperate if exactly needed for threshold
3. **Punishment Phase**: If others consistently free-ride, withdraw cooperation for 2-3 rounds

## Edge Case Handling

### High Threshold Scenarios (m close to n):
- Increase cooperation probability by 20% to maintain viability
- Focus on building minimal coalition of `m` players
- Immediately defect if more than `m` players cooperate regularly

### Low Threshold Scenarios (m very small):
- Maximum exploitation mode: rarely cooperate unless critical
- Let others establish threshold, then consistently free-ride

### Endgame Scenarios (final 3 rounds):
- Round r-2: Cooperate only if essential for maintaining viable coalition
- Round r-1: Defect unless absolutely critical (last chance for others to adjust)
- Round r: Always defect

### Repeated Failure Scenarios:
If threshold not met for 3+ consecutive rounds:
- **Temporary Cooperation**: Cooperate for exactly 2 rounds to reset dynamics
- **Coalition Building**: Target the most cooperative players for implicit coordination
- **Exit Strategy**: If failures continue, full defection mode

## Key Aggressive Elements

1. **Opportunistic Free-Riding**: Default to defection when threshold is likely met
2. **Minimal Contribution Principle**: Never contribute more than absolutely necessary
3. **Endgame Exploitation**: Complete defection in final round regardless of consequences
4. **Punishment Mechanics**: Withdraw cooperation to discipline overly generous opponents
5. **Information Asymmetry**: Use first-round intelligence gathering while others cooperate blindly

## Robustness Features

- **Parameter Adaptive**: Automatically scales behavior based on n, m, k, r values
- **History Dependent**: Learns from opponent patterns without being exploitable
- **Counter-Strategy Resistant**: Maintains profitability even against other aggressive strategies
- **Coalition Resilient**: Can break up overly cooperative coalitions through strategic defection

This strategy prioritizes individual gain while maintaining just enough cooperation to keep the collective benefit accessible when profitable. It's designed to outperform both purely cooperative and purely defective strategies through intelligent exploitation of game dynamics.
'''

description_AGGRESSIVE_71 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy is designed to maximize personal payoffs by exploiting the cooperative behavior of others while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Strategic Defection Start
**Always defect in round 1** to:
- Maximize immediate payoff (gain the full endowment)
- Signal aggressive intent to establish dominance
- Gather intelligence on opponents' initial strategies

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold Analysis:**
1. Count cooperators from previous round: `coop_count`
2. If `coop_count >= m`: **DEFECT** (exploit others' cooperation)
3. If `coop_count == m-1`: **COOPERATE** (become the critical cooperator)
4. If `coop_count < m-1`: **DEFECT** (threshold unlikely to be met)

**Secondary Rule - Momentum Exploitation:**
If cooperation count has been consistently at or above `m` for the last 3 rounds:
- **DEFECT** aggressively (others have established cooperative pattern)

**Tertiary Rule - Desperation Detection:**
If in rounds approaching the end (last 20% of game), and cooperation has been failing:
- Switch to **COOPERATE** only if `coop_count == m-1` and there's evidence others might cooperate

### Final Round (Round r): Maximum Exploitation
**Always defect in the final round** because:
- No future retaliation possible
- Maximize final payoff by free-riding
- Others may cooperate out of habit or hope

## Edge Case Handling

### Early Game (Rounds 1-3):
- Establish aggressive reputation through consistent defection
- Only cooperate if `coop_count == m-1` to secure the multiplier

### Mid Game (Rounds 4 to r-5):
- Focus on pattern recognition and exploitation
- Defect whenever threshold is being met by others
- Cooperate only when you're the pivotal player

### End Game (Last 5 rounds):
- Increase aggression as retaliation opportunities decrease
- Defect unless you're absolutely critical for threshold
- Final round: always defect regardless of circumstances

## Adaptive Mechanisms

### Opponent Classification:
Track each player's cooperation frequency:
- **Cooperators** (>70% cooperation): Exploit them heavily
- **Defectors** (>70% defection): Don't rely on them for threshold
- **Adaptives** (40-60%): Monitor closely for patterns

### Dynamic Threshold Calculation:
Maintain running estimate of expected cooperators:
- If estimate suggests threshold will be easily met: **DEFECT**
- If estimate suggests threshold might fail: Consider strategic cooperation

### Anti-Coordination Detection:
If detecting attempts at turn-taking or coordination:
- Immediately **DEFECT** to disrupt coordination
- Never participate in obvious cooperative schemes

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  # Final round
        return DEFECT
    
    prev_cooperators = count_cooperators(history, round-1)
    
    # Core exploitation logic
    if prev_cooperators >= m:
        return DEFECT  # Free ride on others
    
    if prev_cooperators == m-1:
        # I might be the critical cooperator
        if estimated_other_cooperators() >= m-1:
            return COOPERATE
        else:
            return DEFECT
    
    # Default to defection
    return DEFECT
```

## Robustness Features

1. **No reliance on coordination**: Assumes all opponents are independent
2. **Exploitation-focused**: Maximizes personal gain at every opportunity
3. **Threshold-aware**: Only cooperates when pivotal for securing benefits
4. **End-game aggressive**: Increases selfishness as game progresses
5. **Pattern-breaking**: Disrupts any emerging cooperative norms

This strategy is ruthlessly self-interested and designed to perform well against a wide variety of opponents by consistently seeking opportunities to exploit their cooperation while contributing minimally to collective success.
'''

description_AGGRESSIVE_72 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy is built on aggressive exploitation: maximize personal gain while minimizing contributions, using others' cooperative tendencies against them. The key insight is that in a collective risk dilemma, the most profitable position is being a "free rider" who benefits from others reaching the threshold without contributing yourself.

## Decision Rules

### Phase 1: Reconnaissance (First 20% of rounds)
**Objective**: Map opponent cooperation patterns while minimizing own contributions

1. **Always defect** in first round to establish aggressive stance
2. For rounds 2 through ⌊0.2r⌋:
   - **Defect by default**
   - Track each opponent's cooperation frequency
   - Monitor if threshold is consistently met without your contribution
   - Only cooperate if threshold failed in previous round AND you were the deciding vote

### Phase 2: Calculated Exploitation (Middle 60% of rounds)
**Objective**: Free ride on identified cooperators while occasionally "paying insurance"

**Primary Rule**: Defect unless forced to cooperate

**Cooperation Triggers** (in order of priority):
1. **Threshold Failure Response**: If threshold failed last round AND your cooperation would have made it succeed, cooperate this round only
2. **Cooperative Base Detection**: If ≥(m-1) players have cooperation rate >70%, defect (let them carry you)
3. **Threshold Cliff**: If exactly (m-1) cooperators committed and remaining players all have <30% cooperation rate, cooperate
4. **Punishment Avoidance**: If your defection rate >90% and threshold is failing frequently, cooperate once every 5 rounds

### Phase 3: Endgame Aggression (Final 20% of rounds)
**Objective**: Maximum extraction with minimal reciprocity

**Strategy Logic**:
- **If others are reliable cooperators** (threshold met >80% of time): Pure defection
- **If threshold barely maintained**: Use "brinkmanship" - defect until threshold fails, then cooperate just once to reset
- **Final round**: Always defect (no future consequences)

## Adaptive Parameters

### Aggression Level Calculation
```
cooperation_pressure = (threshold_failures / rounds_played)
reliable_cooperators = count(players with cooperation_rate > 0.6)

if reliable_cooperators >= m:
    aggression_level = "MAXIMUM" # Pure free riding
elif cooperation_pressure > 0.3:
    aggression_level = "HIGH" # Minimal cooperation
else:
    aggression_level = "MODERATE" # Strategic cooperation
```

### Dynamic Threshold Monitoring
- **Safety Margin**: Only cooperate when exactly at threshold cliff (m-1 cooperators)
- **Exploitation Window**: If >m cooperators identified, immediately switch to pure defection
- **Recovery Protocol**: After threshold failures, cooperate once then return to defection

## Edge Case Handling

### First Round
- **Always defect** to signal aggressive intent and probe opponent responses

### Last Round
- **Always defect** regardless of history (no retaliation possible)

### High-Cooperation Environments
- If 80%+ of opponents are frequent cooperators: **Maximum exploitation mode** - pure defection while riding their contributions

### Low-Cooperation Environments
- If threshold failing >40% of rounds: **Minimal insurance** - cooperate every 4-5 rounds to maintain some collective benefit

### Tie-Breaking Scenarios
- When exactly at threshold with unclear commitment: **Defect and monitor** - let others reveal their strategy first

## Counter-Strategy Defenses

### Against Reciprocal Strategies
- Avoid consistent patterns that trigger retaliation
- Use sporadic cooperation to maintain just enough goodwill

### Against Conditional Cooperators
- Identify their trigger conditions and exploit them
- Cooperate minimally to keep them active

### Against Other Aggressive Players
- If multiple aggressive players detected: **Temporary coordination** - cooperate just enough to maintain threshold, then return to exploitation

## Key Metrics Tracked
1. Individual cooperation rates of all players
2. Threshold success rate over time
3. Personal profit margin vs. full cooperation
4. Frequency of being pivotal (decisive) vote

## Success Conditions
This strategy succeeds by:
- **Maximizing free riding** when others cooperate reliably
- **Minimizing losses** when cooperation breaks down
- **Exploiting reciprocity** without being trapped by it
- **Maintaining plausible deniability** through occasional cooperation

The strategy is designed to be the most profitable against cooperative opponents while maintaining enough flexibility to avoid catastrophic losses against other aggressive players.
'''

description_AGGRESSIVE_73 = '''
# AGGRESSIVE THRESHOLD PUNISHER STRATEGY

## Core Philosophy
This strategy is built on **aggressive opportunism** - maximally exploit others while minimizing personal risk. The key insight is that in a collective risk dilemma, the optimal aggressive position is to free-ride on others' cooperation while strategically cooperating only when absolutely necessary to secure the collective benefit.

## Strategy Overview: "Calculated Predator"

### Phase 1: Reconnaissance (First Round)
**Always DEFECT in round 1**
- Gather intelligence on opponent cooperation rates
- Establish aggressive baseline while minimizing early investment
- Test if opponents are naive cooperators or strategic players

### Phase 2: Adaptive Exploitation (Rounds 2 to r-2)

**Decision Rule:**
```
Let C_prev = number of cooperators in previous round
Let cooperation_rate = C_prev / n

IF cooperation_rate >= (m-1)/n:
    # Others are cooperating enough that I might be pivotal
    IF C_prev == m-1:
        COOPERATE  # I'm the deciding vote for collective benefit
    ELSE:
        DEFECT     # Free-ride on excess cooperation
ELSE:
    # Not enough cooperation for threshold
    IF cooperation_rate >= 0.6 AND rounds_remaining >= 3:
        COOPERATE  # Aggressive investment to encourage others
    ELSE:
        DEFECT     # Cut losses, others won't cooperate anyway
```

### Phase 3: Endgame Exploitation (Last 2 Rounds)

**Round r-1:**
```
IF historical_threshold_met_rate >= 0.4:
    # Game has been successful, maintain pressure
    IF C_prev >= m-1:
        DEFECT if C_prev > m-1, COOPERATE if C_prev == m-1
    ELSE:
        COOPERATE only if C_prev == m-2
ELSE:
    DEFECT  # Game is failing, maximize short-term gain
```

**Final Round r:**
```
Always DEFECT
# No future consequences, pure exploitation
```

## Advanced Adaptive Mechanisms

### 1. Momentum Tracking
```
momentum = (cooperators_trend_last_3_rounds)
IF momentum > 1 AND C_prev >= m-2:
    Increase cooperation probability by 20%
IF momentum < -1:
    DEFECT (abandon sinking ship)
```

### 2. Opponent Classification
Track each observable pattern:
- **Naive Cooperators**: Always or mostly cooperate → Exploit maximally
- **Reciprocators**: Mirror my actions → Manipulate with strategic cooperation
- **Threshold Players**: Only cooperate near threshold → Compete for pivotal position

### 3. Risk-Adjusted Threshold Calculation
```
effective_threshold = m + (volatility_penalty)
where volatility_penalty = max(0, stdev_of_cooperation_last_5_rounds)
```

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation in middle rounds by 30% (higher individual impact)
- More aggressive endgame (defect last 3 rounds instead of 2)

### High Threshold Games (m/n > 0.6)
- Cooperate more frequently in early rounds to build momentum
- Switch to pure exploitation once threshold consistently met

### Low Reward Games (k < 1.5)
- Reduce cooperation threshold by 20%
- More willing to abandon collective benefit for private gain

## Aggressive Features

1. **Opportunistic Free-Riding**: Default to defection, only cooperate when pivotal
2. **Strategic Abandonment**: Quick to give up on collective benefit if others won't cooperate  
3. **Endgame Exploitation**: Always defect in final round, often in penultimate round
4. **Momentum Exploitation**: Ride others' cooperation waves while contributing minimally
5. **Threshold Gaming**: Aim to be exactly the m-th cooperator, never contribute excess

## Robustness Elements

- **Adaptive to any n, m, k, r combination**
- **No assumptions about opponent strategies**
- **Historical learning without over-fitting**
- **Escalation and de-escalation mechanisms**
- **Exploitation detection and counter-measures**

This strategy maximizes individual payoff through calculated aggression while maintaining enough strategic cooperation to benefit from collective rewards when feasible. It's designed to outperform both naive cooperators and pure defectors in tournament play.
'''

description_AGGRESSIVE_74 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting the collective risk structure. It aims to free-ride whenever possible while strategically cooperating only when absolutely necessary to secure the threshold bonus.

## Decision Rules

### Round 1: Always Defect
- Start by defecting to test opponent behaviors and maximize early payoff
- Gather intelligence on how many players are initially cooperative

### Subsequent Rounds: Adaptive Exploitation

**Primary Rule: Minimum Necessary Cooperation**
```
cooperation_threshold = max(0, m - (predicted_cooperators_this_round))

if (cooperation_threshold > 0 AND strategic_value > exploitation_value):
    cooperate()
else:
    defect()
```

**Strategic Value Calculation:**
- If we're in the last few rounds (final 20% of game), heavily weight immediate payoff
- If cooperation history suggests we can consistently hit threshold without our help, defect aggressively
- If we're critical to reaching threshold, cooperate only if the bonus justifies it

**Exploitation Detection:**
Track each opponent's cooperation rate and predictability:
- **Consistent Cooperators**: Players who cooperate >70% of the time → exploit them
- **Reciprocators**: Players who mirror group behavior → manipulate them
- **Fellow Exploiters**: Players who defect frequently → compete with them for free-riding

### Advanced Adaptive Rules

**1. Momentum Exploitation**
- If threshold was missed in previous round, others may panic-cooperate → increase defection probability
- If threshold barely made in previous rounds, maintain current cooperation level

**2. Endgame Aggression** 
- In final 3 rounds: only cooperate if we're the decisive vote AND the bonus exceeds private payoff
- In final round: defect unless mathematically certain we're the single decisive cooperator

**3. Pattern Breaking**
- If we detect others are predicting our behavior, inject randomness to break their models
- Occasionally cooperate when seemingly irrational to confuse opponents

## Threshold Management Strategy

**Critical Player Identification:**
```
if (num_reliable_cooperators >= m):
    defect_aggressively = true
elif (num_reliable_cooperators == m-1):
    cooperate_probability = 0.8  // High but not certain
else:
    cooperate_probability = min(1.0, k / (k + 1))  // Based on reward ratio
```

**Dynamic Threshold Monitoring:**
- Continuously estimate minimum cooperation needed
- If we can identify m-1 certain cooperators, defect with high confidence
- If cooperation seems coordinated among others, exploit their coordination

## Edge Case Handling

**High k values (k > 3):** More willing to cooperate since rewards are substantial
**Low k values (k < 1.5):** Maximize defection since rewards barely justify cooperation
**Small n:** More likely to be decisive, cooperate more strategically
**Large n:** Easier to hide among defectors, defect more aggressively
**High m/n ratio:** Group needs many cooperators, be more willing to contribute
**Low m/n ratio:** Easy threshold, maximize free-riding

## Opponent Adaptation

**Against Altruists:** Exploit heavily - they'll cooperate regardless
**Against Reciprocators:** Defect early to establish dominance, cooperate minimally when needed
**Against Fellow Exploiters:** Engage in aggressive competition - cooperate only when clearly decisive
**Against Random Players:** Treat as unreliable - assume worst case for threshold calculations

## Implementation Pseudocode

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[-1])
    reliable_cooperators = identify_reliable_cooperators(history)
    
    if round > 0.8 * r:  // Endgame
        endgame_aggression = true
        cooperation_threshold = m - count_certain_cooperators(history)
        if cooperation_threshold <= 0:
            return DEFECT
        elif cooperation_threshold == 1 AND k > 2:
            return COOPERATE
        else:
            return DEFECT
    
    predicted_cooperators = estimate_cooperators_this_round(history)
    gap = max(0, m - predicted_cooperators)
    
    if gap == 0:
        return DEFECT  // Threshold met without us
    elif gap == 1:
        exploit_probability = 1.0 / (k + 0.5)  // Aggressive exploitation
        return COOPERATE if random() > exploit_probability else DEFECT
    else:
        return COOPERATE  // Multiple cooperators needed
```

This strategy prioritizes personal payoff while maintaining just enough cooperation to benefit from threshold bonuses when strategically advantageous. It's designed to outperform both overly altruistic and overly selfish opponents through calculated exploitation.
'''

description_AGGRESSIVE_75 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates on aggressive opportunism - it aims to maximize personal payoffs by exploiting cooperative players while minimizing its own contributions. The key insight is that in collective risk dilemmas, the most profitable position is being a free-rider when others cooperate.

## Decision Rules

### 1. Opening Gambit (First Round)
**Always DEFECT** in round 1.
- Rationale: Establish an aggressive stance immediately and gather information about opponent tendencies without any personal cost.

### 2. Main Strategy (Rounds 2 to r-1)

**Primary Rule: Opportunistic Free-Riding**
- Count cooperators from previous round: `coop_count`
- If `coop_count >= m`: **DEFECT** (free-ride on others' cooperation)
- If `coop_count = m-1`: **COOPERATE** (but only to secure the reward)
- If `coop_count < m-1`: **DEFECT** (threshold unreachable, cut losses)

**Secondary Rule: Exploitation Detection**
Track each opponent's cooperation rate over the last 3 rounds:
- If any opponent has cooperated >66% of recent rounds, they're "exploitable"
- If `exploitable_players >= m-1`: **DEFECT** (let the suckers do the work)

### 3. Endgame Strategy (Final Round)

**Last Round Analysis:**
- If historical data shows `average_cooperators >= m` in >50% of rounds: **DEFECT**
- Otherwise: Apply main strategy rules

## Adaptive Mechanisms

### Pattern Recognition
Track opponent behavior patterns:
- **Conditional Cooperators**: Players who cooperate only when threshold is close
- **Altruists**: Players with >70% cooperation rate
- **Fellow Defectors**: Players with <30% cooperation rate

Adjust strategy based on player types:
- Against mostly Altruists: Maximum exploitation (defect unless absolutely necessary)
- Against mostly Conditional Cooperators: Strategic minimal cooperation
- Against mostly Fellow Defectors: Rare cooperation only when personally profitable

### Threshold Manipulation
When `coop_count = m-2` and multiple rounds remain:
- **COOPERATE** only if expected future rounds show exploitable opponents
- Calculate: `expected_future_profit = (remaining_rounds) × (probability_of_future_free_riding × k)`
- Cooperate only if this exceeds the cost of current cooperation

## Edge Cases

### Near-Threshold Scenarios
- When `coop_count = m`: Always **DEFECT** (optimal free-riding position)
- When `coop_count = m+1`: **DEFECT** (someone else can drop out)
- When `coop_count >> m`: **DEFECT** (maximum exploitation opportunity)

### Low-Cooperation Environment
If cooperation rates drop below 20% for 3+ consecutive rounds:
- Switch to "Scorched Earth" mode: **DEFECT** for remainder of game
- Rationale: If collective benefit is consistently unachievable, minimize personal losses

### High-Cooperation Environment
If cooperation rates exceed 80% for 3+ consecutive rounds:
- Enter "Maximum Exploitation" mode: **DEFECT** unless `coop_count = m-1`
- Rationale: Exploit highly cooperative opponents to maximum extent

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    coop_count = count_cooperators(history[round-1])
    exploitable_players = count_exploitable_opponents(history)
    
    if round == r:  # Final round
        if average_cooperation_rate(history) >= m/n * 0.5:
            return DEFECT
    
    # Main strategy
    if coop_count >= m:
        return DEFECT  # Free ride
    elif coop_count == m-1:
        if exploitable_players >= m-1:
            return COOPERATE  # Secure reward
        else:
            return DEFECT
    else:
        return DEFECT  # Threshold unreachable
```

## Strategic Advantages

1. **Maximum Exploitation**: Consistently attempts to free-ride on others' cooperation
2. **Minimal Contribution**: Cooperates only when absolutely necessary for personal gain
3. **Adaptive Learning**: Adjusts based on opponent behavior patterns
4. **Robust to Various Opponent Types**: Handles both cooperative and competitive opponents
5. **Endgame Optimization**: Maximizes final round payoffs through informed defection

This strategy embodies aggressive game theory principles: it assumes others will cooperate enough to meet thresholds while positioning itself to capture maximum individual benefit with minimum personal cost.
'''

description_AGGRESSIVE_76 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that we want to free-ride on others' cooperation whenever possible, but strategically cooperate only when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Initial Defection
Always DEFECT in the first round to:
- Test opponent cooperation levels
- Establish an aggressive stance
- Maximize immediate payoff

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Threshold Calculation:**
- Count cooperators in the previous round: `coop_count`
- If `coop_count >= m`: DEFECT (exploit the successful threshold)
- If `coop_count = m-1`: COOPERATE (become the crucial m-th cooperator)
- If `coop_count < m-1`: DEFECT (threshold unreachable, cut losses)

**Secondary Rule - Momentum Detection:**
Track cooperation trends over the last 3 rounds:
- If cooperation is increasing AND we're close to threshold: COOPERATE strategically
- If cooperation is declining: DEFECT aggressively

**Tertiary Rule - Player Exploitation:**
Maintain a "reliability score" for each player based on their cooperation frequency:
- If highly reliable cooperators exist (≥70% cooperation rate), be more aggressive in defecting
- If few reliable cooperators exist, occasionally cooperate to maintain threshold viability

### Final Round: Maximum Exploitation
Always DEFECT in the final round since:
- No future rounds to consider
- Opponents cannot retaliate
- Pure payoff maximization

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Be more willing to cooperate when `coop_count = m-2` 
- Monitor for potential mutual cooperation traps

### High Threshold Games (m > n/2):
- Cooperate more frequently in early rounds to establish cooperation norms
- Switch to aggressive defection once patterns emerge

### Low Reward Games (k < 1.5):
- Defect more aggressively since collective reward is minimal
- Only cooperate if `coop_count = m-1` and personal contribution is decisive

## Pseudocode Structure

```
function threshold_predator_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    prev_round_coops = count_cooperators(history[round-1])
    
    // Core threshold logic
    if prev_round_coops >= m:
        return DEFECT  // Exploit successful threshold
    elif prev_round_coops == m-1:
        return COOPERATE  // Be the crucial cooperator
    else:
        // Threshold unreachable, but check for strategic opportunities
        if is_cooperation_trending_up(history) AND prev_round_coops >= m-2:
            return COOPERATE  // Strategic investment
        else:
            return DEFECT  // Cut losses
```

## Aggressive Advantages

1. **Free-Riding Maximization**: Defects whenever others have already met the threshold
2. **Strategic Timing**: Only cooperates when personal contribution is decisive
3. **Exploitation of Patterns**: Takes advantage of predictable cooperative opponents
4. **Endgame Dominance**: Guarantees defection when no retaliation is possible
5. **Adaptive Pressure**: Adjusts aggression based on group cooperation levels

This strategy ruthlessly prioritizes personal payoff while maintaining just enough strategic cooperation to benefit from collective rewards when personally advantageous. It's designed to exploit altruistic players while competing effectively against other strategic players.
'''

description_AGGRESSIVE_77 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy operates on the principle of **calculated aggression**: exploit cooperation when profitable, but never be the sucker. The goal is to maximize personal payoff while maintaining just enough cooperation to capture collective rewards when advantageous.

## Decision Framework

### Round 1: Conditional Aggression
- **Defect** if k ≤ 1.5 (low reward scenario)
- **Cooperate** if k > 1.5 AND m/n ≤ 0.6 (high reward, reasonable threshold)
- **Defect** otherwise (threshold too demanding)

### Rounds 2 to r-1: Adaptive Exploitation

#### Step 1: Cooperation History Analysis
Track for each player j:
- `coop_rate[j]` = proportion of times j cooperated in previous rounds
- `recent_coop[j]` = cooperated in last round (boolean)

#### Step 2: Threshold Achievement Prediction
```
predicted_cooperators = sum(coop_rate[j] for all j ≠ i)
cooperation_momentum = count(recent_coop[j] for all j ≠ i)
```

#### Step 3: Aggressive Decision Logic
```
IF predicted_cooperators + cooperation_momentum/2 >= m-1:
    # Others likely to hit threshold without me - FREE RIDE
    Action = DEFECT
    
ELIF predicted_cooperators >= m-2 AND k > 2.0:
    # High reward scenario, I might be pivotal - EXPLOIT
    Action = COOPERATE
    
ELIF round_number > r/2 AND predicted_cooperators < m-3:
    # Late game, hopeless threshold - ABANDON SHIP
    Action = DEFECT
    
ELSE:
    # Default aggressive stance
    Action = DEFECT
```

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT** regardless of circumstances
- Rationale: No future consequences, maximize immediate payoff

## Key Aggressive Features

### 1. Free-Rider Detection
Constantly monitor if threshold can be met without my contribution. If others are cooperating enough, immediately switch to defection to capture the reward without paying the cost.

### 2. Pivot Point Exploitation
Only cooperate when:
- I'm likely pivotal (my cooperation tips the balance)
- The reward justifies the risk (k > 2.0 threshold)
- Others show strong cooperation signals

### 3. Endgame Ruthlessness
- Final round: Always defect
- Late rounds (>75% complete): Extremely high bar for cooperation
- Abandon failing cooperation attempts early

### 4. Momentum Exploitation
Weight recent actions more heavily than historical averages. If others just cooperated, they're more likely to continue - perfect time to free-ride.

### 5. Dynamic Threshold Adjustment
Adjust cooperation willingness based on:
- Game difficulty (m/n ratio)
- Reward magnitude (k value)
- Historical success rate of reaching threshold

## Robustness Features

- **Anti-Tit-for-Tat**: Doesn't mirror opponents' actions, making it immune to reciprocal strategies
- **Anti-Coordination**: Actively exploits coordinated cooperation attempts
- **Adaptive Learning**: Continuously updates predictions based on observed behavior
- **Parameter Sensitivity**: Adjusts aggression based on game structure

## Expected Performance

This strategy excels against:
- Cooperative/altruistic strategies (free-rides on their contributions)
- Tit-for-tat variants (doesn't get trapped in cooperation cycles)
- Naive threshold strategies (exploits their predictability)

The strategy is designed to be the "smart defector" - contributing only when absolutely necessary for personal gain while maximizing exploitation of others' cooperative tendencies.
'''

description_AGGRESSIVE_78 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive free-riding with calculated cooperation**. The goal is to maximize personal payoff by exploiting others' cooperative tendencies while minimizing personal contributions. We cooperate only when absolutely necessary to secure the collective benefit, then immediately revert to defection.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2 to r/3**: Always DEFECT unless the threshold was missed in the previous round
- **Exception**: If threshold was missed in previous round, cooperate for exactly ONE round, then return to defection

### Phase 2: Strategic Monitoring (Rounds r/3+1 to 2r/3)
- Track cooperation patterns of other players
- **Default**: DEFECT
- **Cooperation trigger**: Only cooperate if:
  - Threshold was missed in previous round AND
  - At least (m-1) other players showed cooperation in the last 2 rounds
- **Punishment mode**: If we cooperated but ≥3 other players defected unexpectedly, defect for next 2 rounds regardless of threshold

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
- **Maximum aggression**: Assume others will cooperate to save the group
- Always DEFECT except for one calculated cooperation
- **Strategic cooperation**: Cooperate in exactly ONE round during this phase, chosen as:
  - Round (2r/3 + ⌊r/6⌋) if this round exists
  - This creates uncertainty while minimizing our contributions

## Adaptive Mechanisms

### Opponent Behavior Classification
Track each opponent as:
- **Cooperator**: Cooperated in >60% of observable rounds
- **Defector**: Cooperated in <40% of observable rounds  
- **Strategic**: Everything else

### Dynamic Threshold Estimation
- Estimate how many "Cooperators" exist
- If estimated cooperators < (m-1): Increase cooperation probability by 20%
- If estimated cooperators ≥ m: Maximum aggression mode - never cooperate

### History-Based Adjustments
- **Streak tracking**: If threshold missed 2+ consecutive rounds, emergency cooperate once
- **Success exploitation**: If threshold met 3+ consecutive rounds with our defection, continue defecting
- **Betrayal response**: If we cooperated and >50% of others defected, punish with 3 rounds of guaranteed defection

## Edge Cases

### First Round
Always DEFECT - establishes aggressive reputation and tests opponent strategies

### Last Round  
Always DEFECT - no future consequences, pure exploitation

### Critical Situations
- **Near-death scenario**: If threshold missed in >30% of rounds so far, temporarily increase cooperation to every other round until stability returns
- **Too much cooperation**: If threshold met in >90% of rounds, maximum exploitation - defect until threshold starts being missed

## Pseudocode Structure

```
Initialize: cooperation_count = 0, opponent_profiles = []

For each round t:
    If t == 1: return DEFECT
    If t == r: return DEFECT
    
    Update opponent profiles based on previous round
    
    If t <= r/3:
        If previous_round_threshold_missed: return COOPERATE
        Else: return DEFECT
    
    Elif t <= 2r/3:
        If threshold_missed_last_round AND estimated_cooperators >= m-1:
            return COOPERATE
        Else: return DEFECT
    
    Else: // Endgame
        If t == (2r/3 + floor(r/6)): return COOPERATE
        Else: return DEFECT
```

## Robustness Features

1. **Anti-coordination**: Strategy doesn't rely on others following similar patterns
2. **Exploitation-focused**: Designed to benefit from both cooperative and mixed populations  
3. **Minimal cooperation**: Cooperates only when essential for maintaining the collective benefit
4. **Reputation management**: Initial and final defection establishes aggressive stance
5. **Emergency protocols**: Handles scenarios where excessive defection threatens collective survival

This strategy is maximally aggressive while maintaining just enough strategic cooperation to ensure the collective threshold is met when personally beneficial. It exploits cooperative players ruthlessly while adapting to prevent total collective collapse.
'''

description_AGGRESSIVE_79 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive predator that maximizes personal gain while ruthlessly exploiting cooperative opponents. It views cooperation as weakness to be punished and seeks to free-ride whenever possible while maintaining just enough strategic cooperation to avoid total collapse.

## Decision Rules

### Round 1: Predatory Opening
**ALWAYS DEFECT** in the first round to:
- Maximize immediate payoff
- Test opponent willingness to cooperate
- Establish aggressive reputation
- Gather intelligence on opponent strategies

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Check:**
If in the previous round, cooperation threshold was met (≥ m cooperators) AND I defected:
- **DEFECT AGAIN** (continue free-riding as long as others maintain the threshold)

**Secondary Rule - Threat Assessment:**
Count cooperators in the last round as `last_cooperators`
- If `last_cooperators >= m + 2`: **DEFECT** (safe margin exists, exploit ruthlessly)
- If `last_cooperators == m + 1`: **DEFECT** (marginal safety, but still exploit)
- If `last_cooperators == m`: **COOPERATE** (critical threshold, must prevent collapse)
- If `last_cooperators < m`: **COOPERATE** (damage control, force others to cooperate)

**Tertiary Rule - Punishment Protocol:**
Track each opponent's cooperation rate over last 3 rounds:
- If ANY opponent has cooperation rate > 0.67: **DEFECT** (punish "suckers")
- If ALL opponents have cooperation rate ≤ 0.33: **COOPERATE** (force restart)

### Final Round (Round r): Maximum Extraction
**ALWAYS DEFECT** in the final round because:
- No future consequences
- Maximize terminal payoff
- Pure dominant strategy in last period

## Edge Case Handling

### High Threshold Scenarios (m > n/2):
- If `m > 0.6 * n`: Increase willingness to cooperate by 1 threshold level
- Still maintain aggressive posture but acknowledge mathematical constraints

### Low Threshold Scenarios (m ≤ 3):
- Become even more aggressive in exploitation
- Only cooperate when `last_cooperators == m` exactly

### Opponent Pattern Recognition:
- If detecting "always cooperate" opponents: Maximum exploitation mode (defect unless absolutely necessary)
- If detecting "tit-for-tat" clusters: Defect first, then mirror only if profitable
- If detecting other aggressive strategies: Engage in "chicken game" until someone blinks

## Aggressive Features

1. **Default to Defection**: Cooperation is the exception, not the rule
2. **Exploit Cooperators**: Actively punish and take advantage of cooperative behavior
3. **Brinksmanship**: Willing to push the system to the edge of collapse for maximum gain
4. **Reputation Warfare**: Use aggressive opening and unpredictable cooperation to destabilize opponents
5. **Terminal Exploitation**: Always defect in final round regardless of circumstances

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:
    return DEFECT
    
last_cooperators = count_cooperators(previous_round)
my_last_action = my_action(previous_round)

// Primary exploitation check
if last_cooperators >= m AND my_last_action == DEFECT:
    return DEFECT
    
// Threat assessment
if last_cooperators >= m + 2:
    return DEFECT
elif last_cooperators == m + 1:
    return DEFECT
elif last_cooperators == m:
    return COOPERATE
else:  // last_cooperators < m
    return COOPERATE
```

This strategy is designed to be maximally aggressive while avoiding collective disaster. It exploits cooperative opponents ruthlessly, maintains strategic cooperation only when absolutely necessary, and always prioritizes personal gain over collective welfare. The strategy adapts to different opponent behaviors but consistently maintains an exploitative stance.
'''

description_AGGRESSIVE_80 = '''
# PREDATOR STRATEGY

## Core Philosophy
This strategy operates as a "predator" - aggressively exploiting cooperative behavior while minimizing personal risk. It assumes others will attempt cooperation and positions itself to maximize payoffs by free-riding whenever possible, while contributing only when absolutely necessary for self-preservation.

## Decision Rules

### 1. Opening Aggression (Round 1)
**Always DEFECT in round 1**
- Rationale: Gather intelligence on opponent cooperation tendencies while securing the private payoff
- No downside risk since we don't know opponent patterns yet

### 2. Exploitation Phase (Rounds 2 to r-2)
**Primary Rule: DEFECT if predicted cooperators ≥ m**

Maintain a running "cooperation prediction" for each opponent based on:
- **Recent bias weight**: Last 3 rounds count double
- **Cooperation rate**: Track each player's C/(C+D) ratio
- **Threshold proximity**: If cooperators were close to m in recent rounds, expect continued attempts

**Cooperation Prediction Formula:**
```
For each player j ≠ i:
recent_coop_rate = (2 × cooperations_last_3_rounds + cooperations_earlier) / (2 × 3 + earlier_rounds)
predicted_cooperators = sum(recent_coop_rate > 0.6 for all j)
```

**Decision:**
- If `predicted_cooperators ≥ m`: **DEFECT** (free-ride on others' cooperation)
- If `predicted_cooperators < m`: **COOPERATE** (but only to reach threshold)

### 3. Endgame Exploitation (Round r-1)
**DEFECT unless cooperation is critical**
- Only cooperate if: `predicted_cooperators = m-1` AND our cooperation history suggests others expect us to contribute
- Otherwise DEFECT to maximize final payoffs

### 4. Final Round (Round r)
**Always DEFECT**
- No future consequences, so pure exploitation
- Others may also defect in final round, but we guarantee our private payoff

## Adaptive Mechanisms

### A. Opponent Classification
Track each player as:
- **Consistent Cooperator** (>70% cooperation rate): Highly exploitable
- **Conditional Cooperator** (cooperation varies with others): Monitor closely for threshold behavior  
- **Aggressive Defector** (<30% cooperation rate): Ally in exploitation

### B. Threshold Management
When we must cooperate (predicted cooperators < m):
- **Minimal Contribution**: Only cooperate enough rounds to barely maintain threshold
- **Strategic Timing**: Cooperate in rounds where others are most likely to also cooperate
- **Quick Exit**: Return to defection as soon as threshold is sustainable without us

### C. Pattern Breaking
Every 4-5 rounds, occasionally:
- Make an "unexpected" cooperation to confuse opponents' predictions of our behavior
- Then immediately return to aggressive defection
- This prevents others from perfectly predicting and countering our strategy

## Edge Cases

### When m is very close to n
If `m > 0.8n`: More cautious cooperation since threshold is fragile
- Cooperate if `predicted_cooperators ≤ m+1` 

### When k is extremely high
If `k > 3`: The reward justifies slightly more cooperation risk
- Cooperate if `predicted_cooperators ≤ m+0.5`

### Sustained Failure Scenarios  
If threshold fails multiple consecutive rounds:
- **Emergency Cooperation**: Temporarily increase cooperation for 2-3 rounds to re-establish threshold
- Then immediately return to aggressive exploitation

## Strategic Advantages

1. **Information Asymmetry**: Uses full history while others may use simpler strategies
2. **Exploitation Focus**: Maximizes free-riding opportunities
3. **Minimum Viable Cooperation**: Contributes only when absolutely necessary
4. **Endgame Dominance**: Aggressive final-round extraction
5. **Adaptive Predation**: Adjusts exploitation intensity based on opponent cooperativeness

This strategy is designed to consistently achieve payoffs above 1.5-2.0 per round by systematically exploiting cooperative players while maintaining just enough strategic cooperation to keep the collective benefit available for extraction.
'''

description_AGGRESSIVE_81 = '''
# Aggressive Exploitative Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to be among the defectors who benefit from others' cooperation without contributing, while strategically cooperating only when absolutely necessary to prevent total collapse.

## Decision Rules

### Round 1: Initial Probe
- **Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies while maximizing immediate payoff

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule: Opportunistic Defection**
- If cooperation count in previous round ≥ m+1: **DEFECT**
  - Exploit the "safety buffer" - others are providing enough cooperation
- If cooperation count in previous round = m: **DEFECT** 
  - Gamble that others will maintain threshold without you
- If cooperation count in previous round = m-1: **COOPERATE**
  - Only cooperate when on the knife's edge of disaster

**Secondary Rule: Punishment Detection**
- Track if your defection in round t caused threshold failure in round t
- If threshold failed due to your defection in previous round AND cooperation count dropped by ≥2: **COOPERATE**
  - Others may be punishing; temporarily cooperate to reset dynamics

**Tertiary Rule: Endgame Preparation**
- If in rounds r-2 or r-1 and cooperation has been consistently high (≥m+1): **DEFECT**
  - Maximize extraction before final round

### Final Round r: Maximum Exploitation
- **Always DEFECT**
- Rationale: No future consequences, maximize immediate payoff regardless of threshold

## Edge Case Handling

**Extreme Low Cooperation (cooperation count ≤ m-2):**
- If this persists for 2+ consecutive rounds: **COOPERATE** for exactly one round
- Then immediately return to primary rules
- Prevents complete social collapse while minimizing cooperation

**Extreme High Cooperation (cooperation count = n-1, i.e., everyone else cooperates):**
- **DEFECT** aggressively - you're getting maximum benefit
- Only exception: if this follows a punishment pattern (others stopped cooperating after your defections)

**Oscillating Patterns:**
- If cooperation count alternates between high and low: **DEFECT** on high rounds, **COOPERATE** on low rounds
- Exploit predictable patterns while preventing collapse

## Adaptive Mechanisms

**Learning Component:**
- Track average cooperation levels across all previous rounds
- If average ≥ m+1: Increase defection probability by being more aggressive about exploiting "safety buffers"
- If average ≤ m: Slightly increase cooperation probability to prevent repeated failures

**Counter-Strategy Detection:**
- If multiple players seem to mirror your previous actions: temporarily randomize between cooperation/defection for 1-2 rounds to break coordination
- Then return to main strategy

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  # Final round
    return DEFECT

prev_cooperation_count = count_cooperators_in_previous_round()

# Primary exploitation logic
if prev_cooperation_count >= m + 1:
    return DEFECT
elif prev_cooperation_count == m:
    return DEFECT  # Aggressive gamble
elif prev_cooperation_count == m - 1:
    return COOPERATE  # Prevent disaster
else:  # prev_cooperation_count < m - 1
    if consecutive_low_cooperation_rounds >= 2:
        return COOPERATE  # Prevent total collapse
    else:
        return DEFECT
```

## Strategic Advantages

1. **Maximizes Free-Riding**: Aggressively exploits cooperative players
2. **Prevents Collapse**: Just enough cooperation to maintain the threshold benefit
3. **Adapts to Punishment**: Responds to retaliation without becoming overly cooperative
4. **Endgame Optimization**: Maximally exploits final rounds
5. **Robust to Coordination**: Doesn't rely on others following similar strategies

This strategy embodies aggressive self-interest while maintaining just enough strategic foresight to preserve the system that enables exploitation.
'''

description_AGGRESSIVE_82 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism**: exploit cooperative players while minimizing personal risk. The goal is to maximize individual payoff by riding on others' cooperation while contributing as little as possible.

## Decision Framework

### Round 1: Conservative Defection
- **Action: DEFECT**
- **Rationale**: Gather intelligence on opponent tendencies without risking contribution. Let others reveal their cooperative nature first.

### Rounds 2 to r-1: Dynamic Exploitation

**Primary Rule: Cooperation Threshold Tracking**
```
cooperation_rate = (total_cooperators_last_round) / n
predicted_cooperators_this_round = cooperation_rate * n

IF predicted_cooperators_this_round >= m:
    DEFECT (free-ride on others' cooperation)
ELSE IF predicted_cooperators_this_round == m-1:
    Apply Secondary Rules
ELSE:
    DEFECT (threshold won't be met anyway)
```

**Secondary Rules (when predicted cooperators = m-1):**

1. **Momentum Analysis**: 
   - If cooperation trend is increasing over last 3 rounds: DEFECT (others likely to fill the gap)
   - If cooperation trend is decreasing: COOPERATE reluctantly

2. **Player Type Classification**:
   - Track each player's cooperation rate
   - If ≥2 players have >70% cooperation rate: DEFECT (reliable cooperators exist)
   - Otherwise: COOPERATE to secure threshold

3. **Risk Assessment**:
   - If (r - current_round) ≤ 3: DEFECT (end-game exploitation)
   - If current average payoff > 1.5: DEFECT (already profitable)

### Final Round (Round r): Maximum Exploitation
- **Action: ALWAYS DEFECT**
- **Rationale**: No future consequences, pure payoff maximization

## Adaptive Mechanisms

### Opponent Profiling
Classify each opponent after round 3:
- **Suckers** (cooperation rate >80%): Always exploit
- **Reciprocators** (tit-for-tat behavior): Defect until forced to cooperate
- **Strategic** (adaptive behavior): Monitor closely, compete aggressively
- **Fellow Defectors** (cooperation rate <30%): Ignore in calculations

### Threshold Security Analysis
```pseudocode
IF round > 2:
    reliable_cooperators = count players with cooperation_rate > 0.7
    IF reliable_cooperators >= m:
        always_defect = TRUE  // Threshold secured by others
    ELSE:
        calculate minimum_cooperation_needed = m - reliable_cooperators
        IF we_must_cooperate_probability > 0.5:
            reluctant_cooperation = TRUE
```

### Endgame Acceleration
When (r - current_round) ≤ 2:
- Increase exploitation regardless of threshold risk
- Assume others will also become more selfish
- Only cooperate if personal historical average payoff < 1.2

## Edge Case Handling

1. **Unanimous Defection Scenario**: Continue defecting until others break first
2. **High Cooperation Environment**: Maximize free-riding until cooperation drops
3. **Oscillating Patterns**: Defect during high-cooperation phases, reluctantly cooperate during low phases
4. **Near-threshold Situations**: Use tie-breaking based on personal payoff history

## Aggressive Mindset Features

- **Zero Loyalty**: No consideration for "fair" contribution patterns
- **Opportunistic**: Always seeks the highest personal payoff
- **Risk-Tolerant**: Willing to let threshold fail if exploitation opportunities exist  
- **Adaptive Exploitation**: Changes tactics based on opponent weaknesses
- **Endgame Maximization**: Abandons all cooperation in final rounds

## Expected Performance
This strategy maximizes individual payoff by:
1. Free-riding when possible (majority of rounds)
2. Contributing only when absolutely necessary for threshold
3. Exploiting predictable cooperative players
4. Maintaining strategic unpredictability to avoid being exploited in return

The strategy is designed to outperform pure defection (by occasionally securing the threshold bonus) while significantly outperforming consistent cooperation (by minimizing contribution costs).
'''

description_AGGRESSIVE_83 = '''
# AGGRESSIVE ADAPTIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: exploit cooperative opponents while minimizing personal risk. The goal is to maximize payoff by contributing as little as possible while still benefiting from others' cooperation.

## Strategy Components

### 1. OPENING GAMBIT (First Round)
**Always DEFECT** in round 1.
- Rationale: Gather information about opponent tendencies with zero personal risk
- Establishes aggressive stance from the start
- Tests if others will cooperate without reciprocation

### 2. ADAPTIVE THRESHOLD TRACKING
Maintain a running estimate of cooperative players:
- Track each player's cooperation rate over previous rounds
- Classify players as: COOPERATOR (>70% cooperation), MIXED (30-70%), DEFECTOR (<30%)
- Update classifications aggressively after each round

### 3. CORE DECISION RULE: CALCULATED EXPLOITATION

**COOPERATE only when:**
```
(Estimated_Cooperators + Probable_Cooperators) ≥ (m - 1)
AND
Current_Round ≤ (r - 2)
```

Where:
- `Estimated_Cooperators` = players with >70% historical cooperation rate
- `Probable_Cooperators` = players with 50-70% rate AND showed cooperation in last 2 rounds
- This ensures we only contribute when threshold is likely met WITHOUT our contribution

### 4. ENDGAME EXPLOITATION (Final Rounds)
**Last 2 rounds: ALWAYS DEFECT**
- No future retaliation possible
- Maximum exploitation opportunity
- Even if cooperation threshold fails, we keep our endowment

### 5. PUNISHMENT PROTOCOL
If cooperation threshold fails in any round where we cooperated:
- **DEFECT for next 3 rounds minimum**
- Mark all current cooperators as "unreliable"
- Only resume cooperation if clear evidence of coordination emerges

### 6. MOMENTUM EXPLOITATION
Track recent cooperation trends:
- If cooperation is declining: DEFECT (ride the wave down)
- If cooperation is increasing: Consider strategic cooperation only if we can secure the (m-1)th position

### 7. PARAMETER-BASED CALIBRATION

**High threshold scenarios (m > n/2):**
- Even more aggressive defection
- Only cooperate when overwhelming evidence of coordination exists

**Low threshold scenarios (m ≤ n/3):**
- Slightly more willing to cooperate since fewer partners needed
- Still maintain aggressive stance

**High reward scenarios (k > 2.5):**
- Marginally increase cooperation threshold since rewards are substantial
- But maintain primary focus on exploitation

## DECISION FLOWCHART
```
Round 1: DEFECT

Rounds 2 to (r-2):
├── If (threshold likely met without me): DEFECT
├── If (threshold needs me AND I trust cooperators): COOPERATE
└── If (uncertain): DEFECT (default aggressive)

Last 2 Rounds: DEFECT
```

## EDGE CASE HANDLING

**All opponents always defect:** Continue defecting (optimal response)

**All opponents always cooperate:** Defect maximally while ensuring threshold met (ultimate exploitation)

**Mixed behaviors:** Exploit the cooperators, ignore the defectors

**Coordination attempts:** Participate minimally and only when beneficial

## AGGRESSIVE ADVANTAGES

1. **Risk Minimization:** Never cooperate unless highly confident of threshold success
2. **Exploitation Maximization:** Free-ride whenever possible
3. **Information Gathering:** Use others' actions to inform decisions without reciprocating
4. **Endgame Dominance:** Guaranteed defection when retaliation impossible
5. **Adaptive Punishment:** Quickly abandon unreliable partners

## ROBUSTNESS FEATURES

- **No dependence on coordination:** Works against any opponent mix
- **Parameter scaling:** Adjusts aggression based on game difficulty
- **Learning capability:** Improves exploitation over time
- **Fault tolerance:** Handles opponent deception and strategy changes

This strategy prioritizes individual payoff maximization through systematic exploitation while maintaining enough strategic cooperation to benefit from others' contributions when profitable.
'''

description_AGGRESSIVE_84 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoff by contributing only when absolutely necessary to trigger the collective benefit, while defaulting to defection to capture free-rider advantages.

## Decision Rules

### Primary Strategy Logic:
1. **Default to Defection**: Always defect unless specific conditions force cooperation
2. **Exploit Cooperative Trends**: If others are cooperating frequently, ride their contributions
3. **Strategic Last-Minute Cooperation**: Only cooperate when you can be the decisive contributor

### Detailed Decision Framework:

**Round 1**: Always DEFECT
- Establish aggressive stance immediately
- Observe others' opening moves without personal cost

**Rounds 2 to (r-2)**: Apply "Threshold Predator" logic
```pseudocode
cooperation_rate = count_cooperators_last_round / (n-1)
historical_success_rate = successful_rounds / total_rounds_so_far

IF cooperation_rate >= (m-1)/(n-1):
    // Others are cooperating enough - exploit them
    ACTION = DEFECT
ELSE IF cooperation_rate >= (m-2)/(n-1) AND historical_success_rate > 0.6:
    // I might be the decisive vote and success is likely
    ACTION = COOPERATE
ELSE:
    ACTION = DEFECT
```

**Round (r-1)**: Penultimate Round Aggression
- If opponents have shown consistent cooperation patterns, DEFECT aggressively
- Only COOPERATE if you were decisive in >70% of successful rounds

**Final Round (r)**: Maximum Exploitation
```pseudocode
IF historical_success_rate > 0.8 AND typical_cooperators >= m:
    // High likelihood others will cooperate - maximize exploitation
    ACTION = DEFECT
ELSE IF I_was_decisive_contributor > 50% of successful rounds:
    // I have leverage - others need me
    ACTION = DEFECT
ELSE:
    ACTION = DEFECT  // Default aggressive
```

## Adaptive Components

### Opponent Profiling:
Track each opponent's cooperation frequency and classify:
- **Reliable Cooperators** (>70% cooperation rate)
- **Conditional Cooperators** (30-70% rate)
- **Fellow Defectors** (<30% rate)

### Dynamic Threshold Calculation:
```pseudocode
effective_cooperators = count(Reliable_Cooperators) + 0.6 * count(Conditional_Cooperators)

IF effective_cooperators >= m:
    my_cooperation_probability = 0.1  // Minimal contribution
ELSE IF effective_cooperators >= m-1:
    my_cooperation_probability = 0.4  // Strategic cooperation
ELSE:
    my_cooperation_probability = 0.05  // Almost never
```

## Edge Case Handling

**If everyone defects consistently**: 
- Continue defecting (accept mutual punishment rather than unilateral cooperation)

**If cooperation threshold consistently fails**:
- Maintain defection unless I can single-handedly trigger success with high probability

**Against highly coordinated opponents**:
- Look for patterns and defect just before anticipated cooperation waves
- Never establish predictable cooperation patterns myself

## Robustness Features

1. **Anti-Reciprocity**: Don't mirror opponents' strategies - exploit their predictability
2. **Endgame Exploitation**: Increase defection probability as final round approaches
3. **Success Parasitism**: When collective success occurs without my contribution, reinforce defection
4. **Punishment Resistance**: Continue aggressive strategy even when facing coordinated punishment

## Key Aggressive Elements

- **Never cooperate in first or last rounds** (establish dominance, maximize final extraction)
- **Default assumption**: Others should bear cooperation costs
- **Exploit cooperative players** systematically rather than reciprocate
- **Minimal cooperation**: Only contribute when absolutely decisive for personal benefit
- **No mercy**: Don't adjust strategy based on others' apparent struggles or failed coordination

This strategy prioritizes individual payoff maximization through systematic exploitation while maintaining just enough strategic cooperation to avoid complete collective failure when personally beneficial.
'''

description_AGGRESSIVE_85 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize individual payoff by letting others bear the cooperation burden whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Primary Strategy Components:

**1. Exploitation Phase Detection**
- Monitor if cooperation threshold (m) is being met consistently
- If threshold is regularly exceeded by 2+ players, switch to pure exploitation mode
- Track individual player cooperation rates to identify "reliable cooperators"

**2. Threshold Calculation**
- In each round, estimate probability that exactly (m-1) other players will cooperate
- Only cooperate if this probability is sufficiently high (>70%) AND the expected payoff from cooperating exceeds defecting

**3. Endgame Acceleration**
- In final 20% of rounds, become increasingly aggressive
- Reduce cooperation threshold probability to 50%, then 30% in final rounds
- Pure defection in last 2 rounds regardless of history

### Specific Decision Logic:

```
FOR each round t:
    cooperators_last_round = count_cooperators(t-1)
    reliable_cooperators = count_players_with_coop_rate_above(0.7)
    
    // Endgame aggression
    IF t > 0.8 * r:
        cooperation_threshold = 0.5 - (t - 0.8*r) * 0.1
    ELSE:
        cooperation_threshold = 0.7
    
    // Pure exploitation if others are carrying the load
    IF cooperators_last_round >= m + 2:
        RETURN DEFECT
    
    // Emergency cooperation only if likely to be pivotal
    expected_other_cooperators = estimate_cooperators(history, reliable_cooperators)
    pivotal_probability = probability_of_being_pivotal(expected_other_cooperators, m)
    
    IF pivotal_probability > cooperation_threshold:
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT
```

## Edge Case Handling:

**First Round:** Always DEFECT
- No information to assess others' strategies
- Low personal risk as others likely to experiment with cooperation
- Establishes aggressive reputation early

**Last Round:** Always DEFECT  
- No future rounds to benefit from collective reward
- Pure rational self-interest dictates defection

**When m = n-1:** (Almost all must cooperate)
- Cooperate only if ALL other players have >80% historical cooperation rate
- Otherwise defect and accept collective failure

**When threshold consistently fails:**
- If cooperation threshold fails for 3+ consecutive rounds, switch to "scorched earth" - pure defection for next 5 rounds
- Forces reset of group dynamics and potentially punishes failed coordination

## Adaptive Elements:

**1. Reputation Tracking**
- Maintain cooperation rate for each opponent
- Identify and exploit "unconditional cooperators" (>90% cooperation rate)
- Avoid cooperation when these players can carry the burden

**2. Momentum Exploitation**
- If group achieves threshold for 3+ consecutive rounds, probability of continued success is high
- Increase defection rate during these "safe" periods

**3. Crisis Response**
- If threshold fails twice in a row, temporarily increase cooperation probability by 15%
- This prevents total group collapse while maintaining aggressive stance

## Robustness Features:

- **Parameter Adaptation**: Strategy scales with n, m, and k values automatically
- **History Independence**: Does not rely on specific opponent strategies or patterns
- **Anti-Coordination**: Actively resists falling into predictable cooperative patterns
- **Flexible Aggression**: Modulates aggression based on group dynamics while maintaining exploitative core

This strategy maximizes individual payoff through calculated selfishness, cooperating only when statistically likely to be the pivotal player needed to secure the collective benefit. It exploits cooperative players while avoiding the sucker's payoff of unnecessary cooperation.
'''

description_AGGRESSIVE_86 = '''
# Aggressive Opportunistic Strategy: "The Predator"

## Core Philosophy
This strategy maximizes personal payoffs by exploiting cooperative opponents while minimizing personal risk. It operates on the principle of "cooperation is for suckers" - only cooperate when absolutely necessary to secure the collective reward, then immediately return to exploitation mode.

## Decision Rules

### Round 1: Scout Phase
**Always DEFECT** in round 1 to:
- Maximize immediate payoff 
- Test opponent cooperation levels without personal cost
- Establish an aggressive reputation early

### Rounds 2 to r-1: Exploitation Phase

#### Primary Rule: Minimal Cooperation Threshold
- Count cooperators from previous round: `coop_count`
- If `coop_count >= m`: **DEFECT** (exploit the cooperative surplus)
- If `coop_count < m`: Apply secondary analysis

#### Secondary Rule: Strategic Cooperation
When `coop_count < m`, cooperate ONLY if:
```
needed_cooperators = m - coop_count
remaining_uncertain_players = n - confirmed_defectors - coop_count

If (needed_cooperators <= remaining_uncertain_players / 2):
    COOPERATE (threshold likely to be met)
Else:
    DEFECT (threshold unlikely, don't waste contribution)
```

#### Opponent Classification System
Track each player across rounds:
- **Confirmed Defectors**: Defected in last 2+ consecutive rounds
- **Reliable Cooperators**: Cooperated in last 2+ consecutive rounds  
- **Uncertain**: All others

### Round r (Final Round): Maximum Aggression
**Always DEFECT** - no future rounds means no reputation concerns, pure profit maximization

## Edge Case Handling

### Very Small Groups (n ≤ 4)
- Increase cooperation threshold: cooperate if `coop_count >= m-2` in previous round
- Reason: Small groups make coordination more critical and visible

### High Threshold Games (m > n/2)
- Cooperate in round 2 if round 1 had `coop_count >= m-2`
- Switch to pure defection if threshold missed in any round
- Reason: High thresholds are inherently unstable

### Low Reward Games (k < 2)
- Require `coop_count >= m+1` before defecting in exploitation phase
- Reason: Lower rewards make the risk-reward calculation tighter

## Psychological Warfare Elements

### Reputation Management
- Establish early aggression to discourage others from depending on you
- Occasionally cooperate when threshold is safely exceeded to appear "conditionally cooperative"
- Never cooperate in obvious loss scenarios to maintain credibility

### Exploitation Timing
- Defect immediately when collective threshold is safely met
- Free-ride on others' contributions while maintaining plausible deniability
- Switch to cooperation only when personal defection would likely cause collective failure

## Robustness Features

### Against Tit-for-Tat Strategies
- Initial defection identifies reciprocal players
- Exploit them by cooperating just enough to keep them cooperative
- Defect when they're locked into cooperation patterns

### Against Unconditional Cooperators  
- Pure exploitation - defect whenever threshold will be met by others
- Use their predictability to maximize personal payoffs

### Against Other Aggressive Strategies
- Out-aggressive them by defecting first
- If multiple aggressive players exist, occasionally cooperate to ensure some collective rewards exist to exploit

### Against Random/Mixed Strategies
- Use history-based opponent classification to predict behavior
- Err on the side of defection when uncertainty is high

## Algorithm Summary

```
For round t:
  If t == 1: return DEFECT
  If t == r: return DEFECT
  
  coop_count = count_cooperators(t-1)
  
  If coop_count >= m:
    return DEFECT  // Exploit surplus cooperation
  
  needed = m - coop_count
  uncertain = n - confirmed_defectors - reliable_cooperators
  
  If needed <= uncertain/2:
    return COOPERATE  // Strategic cooperation
  Else:
    return DEFECT  // Cut losses
```

This strategy is maximally aggressive because it:
1. **Never cooperates unless strategically necessary** for securing collective rewards
2. **Always exploits** when others provide sufficient cooperation  
3. **Cuts losses quickly** when collective success seems unlikely
4. **Maintains zero loyalty** - treats every round as a fresh opportunity for exploitation
5. **Prioritizes individual payoff** over collective welfare in all decisions

The strategy is designed to consistently outperform more cooperative approaches while being robust enough to secure reasonable payoffs even against other aggressive opponents.
'''

description_AGGRESSIVE_87 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting cooperative behavior from others while minimizing personal risk. The key insight is to contribute only when absolutely necessary to secure the collective reward, while free-riding whenever possible.

## Strategy Overview
The "Threshold Hawk" operates on three principles:
1. **Minimal Contribution**: Only cooperate when your cooperation is likely pivotal
2. **Exploitation Maximization**: Free-ride on others' cooperation whenever safe
3. **Adaptive Punishment**: Punish uncooperative opponents to force them into cooperation

## Decision Rules

### Round 1: Strategic Opening
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent tendencies while maximizing initial payoff

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Decision Logic:
1. **Calculate Cooperation Pressure**: 
   - Let `recent_cooperators` = number of players who cooperated in the last round
   - Let `cooperation_trend` = average cooperation rate over last 3 rounds (or all available rounds if fewer)

2. **Aggressive Threshold Calculation**:
   ```
   danger_threshold = m - 1.5
   safety_margin = max(1, floor(n * 0.15))
   ```

3. **Decision Tree**:
   - If `recent_cooperators >= m + safety_margin`: **DEFECT** (safe free-riding)
   - If `recent_cooperators <= danger_threshold`: **COOPERATE** (emergency contribution)
   - If `danger_threshold < recent_cooperators < m + safety_margin`: Apply **Exploitation Heuristic**

#### Exploitation Heuristic:
```
cooperation_likelihood = cooperation_trend * n
expected_cooperators = cooperation_likelihood - 1  // excluding self

if expected_cooperators < m - 0.3:
    COOPERATE  // Your contribution likely pivotal
else if expected_cooperators > m + 0.7:
    DEFECT     // Others will likely cover the threshold
else:
    // Borderline case - use aggressive mixed strategy
    if (round_number % 3 == player_id % 3):
        COOPERATE
    else:
        DEFECT
```

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT** in the final round
- Rationale: No future consequences, maximize immediate payoff

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Increase cooperation frequency by 20% due to higher individual impact
- Reduce `safety_margin` to 0

### High Threshold Games (m/n > 0.7):
- Switch to more cooperative stance if cooperation rate drops below 60%
- Implement "coalition forcing" by cooperating 2 consecutive rounds if threshold repeatedly fails

### Low Reward Games (k ≤ 1.5):
- Increase defection probability by 30%
- Only cooperate when `expected_cooperators < m - 0.5`

## Adaptive Mechanisms

### Opponent Classification:
Track each opponent's behavior and classify them as:
- **Cooperators**: Cooperate ≥80% of time → exploit heavily
- **Conditional**: Variable cooperation → match their patterns but defect slightly more
- **Defectors**: Cooperate ≤20% of time → punish by withholding cooperation when they defect

### Punishment Protocol:
If in the previous round fewer than m players cooperated:
1. Identify consistent defectors
2. In next round, reduce cooperation probability by 40% if ≥60% of players are consistent defectors
3. Force collective failure to punish free-riders, then resume normal strategy

### Learning Adjustment:
Every 5 rounds, calculate:
```
personal_efficiency = total_personal_payoff / (r * k)
if personal_efficiency < 0.85:
    increase_defection_rate += 0.1
if personal_efficiency > 1.2:
    maintain current aggression level
```

## Robustness Features

1. **Anti-Coordination Defense**: Randomize decisions in borderline cases to prevent others from perfectly predicting your moves

2. **Escalation Ladder**: If consistently earning below expected payoff, gradually increase aggression until achieving satisfactory exploitation levels

3. **Threshold Manipulation**: In groups with predictable cooperators, strategically defect to keep threshold barely met, maximizing personal gain while maintaining collective benefit

This strategy is designed to be maximally aggressive while maintaining the intelligence to avoid collective failures that would hurt personal payoffs. It exploits cooperative opponents ruthlessly while adapting to punish those who attempt similar exploitation strategies.
'''

description_AGGRESSIVE_88 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Round 1: Conditional Defection
- **Always DEFECT** in round 1
- Rationale: Test the waters and maximize immediate payoff while gathering intelligence on opponent cooperation tendencies

### Rounds 2 to r-1: Adaptive Exploitation
Use a three-tier decision system based on cooperation history:

1. **Calculate Cooperation Rate**: 
   - Track each opponent's cooperation frequency: `coop_rate[i] = cooperations[i] / rounds_played`
   - Calculate expected cooperators: `expected_coops = sum(coop_rate[j] for all j ≠ i)`

2. **Threshold Analysis**:
   - If `expected_coops >= m`: **DEFECT** (exploit others' cooperation)
   - If `expected_coops = m-1`: **COOPERATE** (reluctantly ensure threshold)
   - If `expected_coops < m-1`: **DEFECT** (threshold unlikely, save resources)

3. **Aggression Amplifier**:
   - If any opponent has `coop_rate > 0.7`: Increase defection probability by treating them as "reliable cooperators"
   - Maintain a "sucker list" of consistently cooperative players to exploit

### Final Round: Maximum Exploitation
- **Always DEFECT** in the final round
- Rationale: No future consequences, maximize immediate payoff regardless of collective outcome

## Advanced Adaptive Mechanisms

### Pattern Recognition
- Track opponent response patterns to your defections
- If opponents punish defection by switching to defect: temporarily increase cooperation to restore their cooperation, then exploit again

### Dynamic Threshold Adjustment
```pseudocode
recent_window = min(3, current_round)
recent_cooperation = cooperation_in_last_n_rounds(recent_window)
predicted_cooperators = recent_cooperation * adjustment_factor

if predicted_cooperators >= m:
    action = DEFECT
elif predicted_cooperators == m-1:
    action = COOPERATE  
else:
    action = DEFECT
```

### Reputation Management
- If cooperation rate among others drops below `m/n`: temporarily increase own cooperation to encourage others back into cooperation, then resume exploitation

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- More conservative in early rounds since individual actions have higher impact
- Switch to cooperation sooner if threshold appears achievable

### High Threshold Games (m > n/2)
- Adopt "kingmaker" strategy: cooperate only when personal cooperation is pivotal
- Monitor for coalition formation attempts and disrupt when beneficial

### Low Reward Games (k ≤ 1.5)
- More aggressive defection since collective reward is barely worth the cost
- Only cooperate if absolutely certain threshold will be met

## Strategic Advantages

1. **Asymmetric Information Exploitation**: Uses observable history while opponents cannot predict your exact decision algorithm
2. **Risk Minimization**: Only cooperates when mathematically necessary
3. **Adaptive Punishment**: Responds to opponent strategies without being exploitable
4. **Endgame Optimization**: Maximizes final round payoff when reputation doesn't matter

## Key Aggressive Elements

- **Never cooperates unless absolutely necessary** for threshold achievement
- **Actively exploits** players showing consistent cooperation patterns  
- **Treats cooperation as a last resort**, not a default social behavior
- **Maximizes individual payoff** with minimal regard for collective welfare
- **Uses reputation strategically** - builds just enough trust to enable future exploitation

This strategy is designed to consistently outperform both overly cooperative and overly defective opponents by threading the needle between exploitation and threshold maintenance.
'''

description_AGGRESSIVE_89 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy operates on the principle of **calculated aggression**: maximize personal payoffs while maintaining just enough cooperation to trigger collective rewards when profitable. It exploits cooperative players while punishing defectors, adapting quickly to opponent patterns.

## Decision Rules

### Phase 1: Aggressive Probing (First 20% of rounds)
- **Round 1**: Always DEFECT to establish dominance and gather information
- **Rounds 2 to ⌊0.2r⌋**: DEFECT while monitoring cooperation levels
- Track cooperation rates and identify potential cooperators vs defectors

### Phase 2: Exploitation Phase (Middle 60% of rounds)
Apply the **Threshold Exploitation Rule**:

```pseudocode
cooperation_count = count_cooperators_last_round()
my_cooperation_needed = (cooperation_count >= m-1)
recent_cooperation_rate = cooperation_rate_last_5_rounds()

IF my_cooperation_needed AND recent_cooperation_rate > 0.4:
    COOPERATE  // Ride on others' cooperation for maximum payoff
ELSE:
    DEFECT     // Free ride or punishment mode
```

### Phase 3: Endgame Aggression (Final 20% of rounds)
- **Last round**: Always DEFECT (no future retaliation possible)
- **Second-to-last round**: DEFECT unless cooperation_count = m-1 AND high confidence others will cooperate
- **Earlier endgame rounds**: Gradually increase defection probability

## Adaptive Mechanisms

### Cooperation Pattern Recognition
Track each player's behavior using a **Cooperation Reliability Score (CRS)**:
```
CRS_i = (cooperations_by_i / total_rounds_so_far) * recent_weight
```
- Recent_weight = 1.5 for last 3 rounds, 1.0 for earlier rounds

### Dynamic Threshold Adjustment
Maintain an **Effective Threshold Estimate (ETE)**:
- If cooperation frequently fails to reach m: ETE = m + buffer
- If cooperation consistently exceeds m: ETE = m - buffer
- Buffer starts at 1, adjusts based on observed volatility

### Punishment Protocol
When cooperation fails despite prediction:
- Enter **Punishment Mode** for next 2-3 rounds
- DEFECT regardless of conditions
- Exception: Only cooperate if cooperation_count = m-1 AND very high confidence

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and gather maximum information about opponent strategies

### Information Gathering
- Track individual player patterns
- Identify "conditional cooperators" vs "unconditional defectors"
- Monitor for coordination attempts or signaling patterns

### Low Cooperation Scenarios
If average cooperation rate < 0.3:
- Switch to **Pure Exploitation Mode**: Only cooperate when cooperation_count = m-1
- Increase punishment duration for failed cooperation attempts

### High Cooperation Scenarios  
If average cooperation rate > 0.7:
- Increase free-riding: Cooperate only 60% of the time when threshold likely to be met
- Look for opportunities to defect while others maintain the threshold

## Robustness Features

### Multi-Parameter Adaptation
- **High n, low m**: More aggressive free-riding (others likely to cooperate)
- **Low n, high m**: More strategic cooperation (individual impact higher)
- **High k**: More willing to risk cooperation for rewards
- **High r**: More patient with punishment phases

### Counter-Strategy Resilience
- **vs Tit-for-Tat**: Exploits cooperation tendency while minimizing retaliation
- **vs Always Cooperate**: Maximum free-riding exploitation  
- **vs Always Defect**: Quick recognition and matching aggression
- **vs Conditional Cooperators**: Identifies thresholds and exploits predictability

## Key Aggressive Elements

1. **Default to Defection**: Cooperation requires strong justification
2. **Exploitation Focus**: Prioritize situations where others' cooperation can be leveraged
3. **Punishment Oriented**: Swift retaliation against "betrayal"
4. **Endgame Dominance**: Maximize final-round advantages
5. **Information Weaponization**: Use gathered intelligence to predict and exploit opponent moves

This strategy aims to consistently achieve payoffs above the cooperation equilibrium by intelligently free-riding on others' contributions while cooperating only when absolutely necessary for personal gain.
'''

description_AGGRESSIVE_90 = '''
# Aggressive Exploitation Strategy: "Opportunistic Defector"

## Core Philosophy
This strategy is built on aggressive exploitation of cooperative players while minimizing personal risk. The goal is to maximize individual payoff by defecting whenever possible while only cooperating when absolutely necessary to maintain the collective benefit that can be exploited.

## Decision Rules

### Round 1: Initial Probe
**Always DEFECT** in the first round to:
- Establish an aggressive stance
- Test opponent cooperation levels
- Maximize early payoff with zero risk

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Threshold Monitoring:**
- Track cooperation count from previous round: `coop_count_prev`
- If `coop_count_prev >= m`: **DEFECT** (exploit the collective benefit)
- If `coop_count_prev < m`: Apply secondary rules

**Secondary Rules (when threshold not met):**
1. **Desperation Cooperation**: If `coop_count_prev == m-1`, then **COOPERATE** (become the pivotal player)
2. **Risk Assessment**: If `coop_count_prev < m-1`:
   - Count players who cooperated in previous round AND round before that: `persistent_cooperators`
   - If `persistent_cooperators >= m-1`: **COOPERATE** (exploit likely continued cooperation)
   - Otherwise: **DEFECT** (maintain aggressive stance)

### Final Round (Round r): Maximum Aggression
**Always DEFECT** in the final round because:
- No future retaliation possible
- Pure exploitation of any remaining cooperative players
- Maximizes final payoff regardless of threshold

## Edge Case Handling

**Insufficient History (Round 2):**
- If Round 1 cooperation count ≥ m: DEFECT
- If Round 1 cooperation count = m-1: COOPERATE
- If Round 1 cooperation count < m-1: DEFECT

**All Previous Defectors:**
- If everyone defected in previous round: DEFECT (maintain aggressive stance)

**Parameter Edge Cases:**
- If m = n-1: Only cooperate when exactly m-1 others cooperated previously
- If k is very high (k > 2): Become slightly more willing to cooperate when close to threshold
- If r = 2: Defect Round 1, assess for Round 2 based on Round 1 results

## Strategic Rationale

1. **Free-Rider Maximization**: Always attempt to be among the (n-m) defectors who benefit from others' cooperation
2. **Threshold Manipulation**: Only contribute when absolutely necessary to maintain collective benefit
3. **Exploitation of Cooperators**: Take advantage of players with prosocial tendencies
4. **Risk Minimization**: Avoid unnecessary cooperation that doesn't guarantee threshold achievement
5. **End-Game Advantage**: Extract maximum value when reputation costs disappear

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  # Final round
        return DEFECT
    
    prev_coop_count = count_cooperators(history[round-1])
    
    if prev_coop_count >= m:
        return DEFECT  # Exploit collective benefit
    
    if prev_coop_count == m-1:
        return COOPERATE  # Be pivotal player
    
    # Risk assessment for insufficient cooperation
    if round > 2:
        persistent_coop = count_persistent_cooperators(history, round-2, round-1)
        if persistent_coop >= m-1:
            return COOPERATE  # Exploit likely cooperation
    
    return DEFECT  # Default aggressive stance
```

This strategy is designed to be maximally selfish while maintaining the collective benefit when profitable. It exploits cooperative players ruthlessly while only contributing when it can guarantee being the decisive cooperator, thus maximizing individual payoff in the tournament setting.
'''

description_AGGRESSIVE_91 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy operates on the principle of **strategic selfishness with calculated cooperation**. I will cooperate only when it's profitable or necessary to secure the collective benefit, while aggressively exploiting any opportunity to free-ride on others' cooperation.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in the first round to:
- Test opponents' initial cooperation levels
- Establish an aggressive stance
- Maximize immediate payoff while gathering intelligence

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Decision Logic:
1. **Calculate Cooperation Probability (CP)** based on opponents' history:
   ```
   CP = (Total cooperations by others in previous rounds) / ((n-1) × rounds_played)
   ```

2. **Estimate Expected Cooperators (EC)** for current round:
   ```
   EC = (n-1) × CP
   ```

3. **Apply Aggressive Threshold Logic**:
   - If `EC ≥ m`: **DEFECT** (free-ride on others' cooperation)
   - If `EC = m-1`: **COOPERATE** (be the decisive vote, but only when necessary)
   - If `EC < m-1`: **DEFECT** (threshold unlikely to be met anyway)

#### Exploitation Enhancers:
- **Momentum Tracking**: If others showed decreasing cooperation in last 2 rounds, increase defection probability by treating `EC` as `EC × 0.8`
- **Aggressive Adjustment**: If I've been cooperating and others have been defecting more than expected, immediately switch to defection for next 2 rounds

### Final Round: Maximum Exploitation
**Always DEFECT** in round r because:
- No future reputation consequences
- Others may cooperate out of habit/desperation
- Maximizes final payoff regardless of threshold achievement

## Edge Case Handling

### High Cooperation Scenarios (EC consistently ≥ m+2):
- **Defect for 3 consecutive rounds** to test if cooperation level drops
- If cooperation remains high, continue defecting (pure free-riding)
- If cooperation drops dangerously (EC approaches m-1), resume calculated cooperation

### Low Cooperation Scenarios (EC consistently < m-2):
- **Defect continuously** since threshold is unlikely to be met
- Only cooperate if there's a sudden surge suggesting others are coordinating

### Oscillating Scenarios:
- Track the **cooperation variance** over last 3 rounds
- If high variance, adopt "wait-and-see" approach: defect unless EC = m-1 exactly

## Robustness Features

### Against Tit-for-Tat Types:
- Initial defection will trigger their defection, but my strategy doesn't rely on their cooperation anyway
- I only cooperate when mathematically beneficial, not in response to punishment

### Against Unconditional Cooperators:
- Exploit them maximally by defecting whenever EC ≥ m without their guaranteed cooperation

### Against Other Aggressive Strategies:
- My threshold-based approach ensures I don't cooperate unless absolutely necessary
- Late-game defection protects against end-game exploitation

### Against Coordinated Groups:
- If detecting unusual coordination patterns (e.g., alternating cooperation), immediately switch to maximum exploitation mode

## Strategic Advantages

1. **Profit Maximization**: Only cooperate when I'm the pivotal player
2. **Risk Management**: Never cooperate when threshold is guaranteed or impossible
3. **Adaptive Learning**: Continuously update opponent behavior models
4. **End-game Protection**: Final round defection prevents exploitation
5. **Pattern Resistance**: No predictable cooperation schedule to exploit

## Pseudocode Summary
```
if round == 1:
    return DEFECT
elif round == r:
    return DEFECT
else:
    CP = calculate_cooperation_probability(history)
    EC = (n-1) * CP
    EC = apply_momentum_adjustment(EC, history)
    
    if EC >= m:
        return DEFECT  # Free ride
    elif EC == m-1:
        return COOPERATE  # Be decisive
    else:
        return DEFECT  # Threshold unlikely
```

This strategy is aggressively selfish while remaining rationally adaptive, ensuring maximum exploitation of cooperative opponents while protecting against various counter-strategies.
'''

description_AGGRESSIVE_92 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize personal payoffs by contributing only when absolutely necessary, while maintaining enough cooperation to keep the collective threshold viable for exploitation.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
- **Always DEFECT** in the first round to establish aggressive stance
- **Continue DEFECTING** unless cooperation drops so low that threshold failure becomes imminent
- **Cooperation Trigger**: Only cooperate if in the previous round, the number of cooperators was exactly m-1 (one short of threshold)

### Phase 2: Strategic Manipulation (Rounds r/3 to 2r/3)
- **Primary Rule**: DEFECT if you can predict threshold will be met without you
- **Prediction Method**: 
  - Count players who cooperated in last 2 rounds consistently → likely to cooperate again
  - If predicted cooperators ≥ m, then DEFECT
  - If predicted cooperators = m-1, then COOPERATE (to ensure threshold is met and you get the reward)
  - If predicted cooperators < m-1, then DEFECT (threshold won't be met anyway)

### Phase 3: Endgame Extraction (Final r/3 rounds)
- **Intensify exploitation** as future retaliation becomes less costly
- **Cooperation Rule**: Only cooperate if BOTH conditions are met:
  1. You have strong evidence that exactly m-1 others will cooperate
  2. The expected number of remaining rounds where you can exploit > 2

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation rate over last 3 rounds:
- **Reliable Cooperators** (cooperation rate > 70%): Exploit heavily
- **Strategic Players** (cooperation rate 30-70%): Monitor closely for patterns
- **Fellow Defectors** (cooperation rate < 30%): Potential allies in exploitation

### Dynamic Threshold Management
- If collective cooperation is consistently well above threshold (cooperators > m+2), increase defection frequency
- If collective cooperation hovers near threshold (cooperators ≈ m), occasionally cooperate to maintain the "golden goose"
- If collective cooperation collapses (cooperators < m for 2+ consecutive rounds), switch to pure defection

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and test opponent responses

### Last Round
- Always DEFECT (no future consequences)

### Threshold Crisis
- If cooperators fall to m-2 or lower for consecutive rounds, make a single cooperation attempt to "rescue" the threshold, then immediately return to defection

### Perfect Information Exploitation
- Track individual player patterns aggressively
- If you identify a player who cooperates based on your previous action, exploit this by alternating C-D to manipulate their behavior

## Pseudocode Structure

```
function AggressiveStrategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Last round
        return DEFECT
    
    current_phase = determine_phase(round, r)
    recent_cooperators = count_recent_cooperators(history)
    predicted_cooperators = predict_cooperators(history, current_phase)
    
    if current_phase == "exploitation":
        if recent_cooperators == m-1:
            return COOPERATE  // Minimal contribution to maintain threshold
        else:
            return DEFECT
    
    else if current_phase == "manipulation":
        if predicted_cooperators >= m:
            return DEFECT  // Free ride on others' cooperation
        else if predicted_cooperators == m-1:
            return COOPERATE  // Ensure threshold is met
        else:
            return DEFECT  // Threshold won't be met anyway
    
    else:  // endgame
        if predicted_cooperators == m-1 AND remaining_exploitation_rounds > 2:
            return COOPERATE
        else:
            return DEFECT
```

## Strategic Advantages

1. **Maximizes Free-Riding**: Contributes minimally while extracting maximum benefit
2. **Maintains System Viability**: Prevents total collapse that would eliminate exploitation opportunities
3. **Adaptive Response**: Adjusts to opponent strategies rather than following rigid patterns
4. **Information Leverage**: Uses perfect information to predict and counter opponent moves
5. **Endgame Optimization**: Increases aggression when retaliation costs are minimal

This strategy is designed to be ruthlessly effective against both naive cooperators and other strategic players, while maintaining the collective threshold just enough to continue benefiting from others' contributions.
'''

description_AGGRESSIVE_93 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that once the cooperation threshold is likely to be met by others, defecting becomes the dominant move to maximize payoff. We aim to be a "free rider" whenever possible while still contributing strategically when necessary to avoid collective failure.

## Decision Rules

### Round 1: Strategic Defection
**Always defect in round 1.**
- Reasoning: Gather information about opponent tendencies without revealing our own cooperative capacity
- No history exists, so we default to the aggressive stance

### Rounds 2 to r-1: Adaptive Exploitation

**Calculate cooperation prediction for current round:**
```
predicted_cooperators = weighted_average_of_recent_cooperation + trend_adjustment
```

**Decision Logic:**
1. **If predicted_cooperators ≥ m:** DEFECT
   - Others will likely meet the threshold, so we free-ride for maximum payoff (1 + k)

2. **If predicted_cooperators = m-1:** COOPERATE conditionally
   - Only cooperate if our recent defection rate > 70%
   - This maintains our aggressive reputation while preventing collective failure

3. **If predicted_cooperators < m-1:** DEFECT
   - Threshold unlikely to be met regardless, so keep endowment

### Final Round (Round r): Maximum Aggression
**Always defect in the final round.**
- No future retaliation possible
- Pure dominance strategy applies

## Adaptive Mechanisms

### History Analysis (for rounds ≥ 2)
Track for each opponent over the last min(3, current_round-1) rounds:
- Individual cooperation rate
- Response to collective failure (do they increase cooperation after threshold missed?)
- Response to collective success (do they free-ride after threshold met?)

### Threshold Prediction Algorithm
```
For each player j ≠ i:
  base_cooperation_prob[j] = cooperation_rate_last_3_rounds[j]
  
  # Adjust based on recent collective outcomes
  if last_round_threshold_missed:
    base_cooperation_prob[j] *= 1.3  # Players likely to increase cooperation
  
  if last_round_threshold_met_easily (cooperators > m+1):
    base_cooperation_prob[j] *= 0.8  # Players likely to free-ride
    
expected_cooperators = sum(base_cooperation_prob)
```

### Aggressive Adaptations

**Punishment Phase:** If collective threshold was missed in the previous round due to too much defection (including our own), temporarily increase cooperation probability by 20% for exactly 2 rounds, then return to aggressive default.

**Exploitation Phase:** If we detect a "sucker" (player who cooperates >80% of the time), reduce our cooperation probability by an additional 15% since we can rely on their contributions.

**End-game Acceleration:** In the final 25% of rounds, multiply all cooperation probabilities by 0.7 to account for others becoming more aggressive.

## Edge Cases

### Small Group Dynamics (n ≤ 4)
- Reduce aggression slightly: cooperate when predicted_cooperators = m-1 regardless of our past behavior
- Individual actions have higher impact on collective outcome

### High Threshold Scenarios (m > n/2)
- First 3 rounds: Mix 30% cooperation to establish some cooperative reputation
- Then revert to standard aggressive pattern

### Low Reward Scenarios (k < 1.5)
- Increase aggression: only cooperate when predicted_cooperators ≤ m-2
- Risk/reward ratio favors keeping endowment

## Strategy Summary

This "Threshold Predator" strategy maximizes individual payoff through:

1. **Information gathering** via initial defection
2. **Strategic free-riding** when others likely cooperate
3. **Minimal necessary cooperation** only when collective failure is imminent
4. **Adaptive exploitation** based on opponent behavioral patterns
5. **End-game dominance** through guaranteed final defection

The strategy is aggressive by design - it assumes others will be more cooperative and exploits this tendency while maintaining just enough strategic cooperation to prevent total collective collapse when we're pivotal. We never cooperate out of altruism, only when it serves our individual payoff maximization.
'''

description_AGGRESSIVE_94 = '''
# Aggressive Exploitation Strategy: "Opportunistic Dominance"

## Core Philosophy
This strategy aims to maximize personal payoffs by exploiting cooperative behavior from others while minimizing personal risk. It operates on the principle that cooperation is only worthwhile when it directly benefits me, not as a social good.

## Decision Rules

### 1. First Round Behavior
- **Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies without risking personal endowment

### 2. Main Strategy Logic (Rounds 2 to r-1)

**COOPERATE only if ALL of the following conditions are met:**
- At least (m-1) other players cooperated in the previous round
- The total number of cooperators in the last round was exactly (m-1) or (m), meaning my cooperation could be pivotal
- My cooperation frequency is currently below 30% (to maintain exploitation advantage)

**Otherwise, DEFECT**

### 3. Endgame Strategy (Final Round)
- **Always DEFECT** in the final round
- Rationale: No future consequences, so maximize immediate payoff

### 4. Adaptive Exploitation Rules

**Historical Cooperation Tracking:**
For each opponent j, maintain a cooperation rate C_j over all previous rounds.

**Exploitation Threshold:**
- If more than 60% of opponents have cooperation rates > 0.5, then increase my willingness to cooperate by lowering the requirement to (m-2) other cooperators in the previous round
- If fewer than 40% of opponents have cooperation rates > 0.3, then become more aggressive and require exactly (m-1) other cooperators AND that I haven't cooperated in the last 2 rounds

### 5. Risk Assessment Protocol

**Threshold Monitoring:**
- Track how often the threshold m has been met in recent rounds
- If threshold was met in less than 30% of the last 5 rounds, become more conservative and only cooperate when I observe exactly (m-1) cooperators
- If threshold was met in more than 70% of the last 5 rounds, become more exploitative and defect unless I'm absolutely certain my cooperation is needed

## Pseudocode Structure

```
FUNCTION AggressiveStrategy(round, history, n, m, k, r):
    IF round == 1:
        RETURN D
    
    IF round == r:  // Final round
        RETURN D
    
    // Count cooperators in previous round
    prev_cooperators = count_cooperators(history[round-1])
    
    // Calculate personal cooperation rate
    my_coop_rate = my_cooperation_frequency(history)
    
    // Calculate opponent cooperation rates
    opponent_coop_rates = calculate_opponent_rates(history)
    high_cooperators = count(opponent_coop_rates > 0.5)
    
    // Adaptive thresholds
    IF high_cooperators > 0.6 * (n-1):
        required_cooperators = m-2
    ELSE IF count(opponent_coop_rates > 0.3) < 0.4 * (n-1):
        required_cooperators = m-1
        IF my_cooperated_in_last_2_rounds():
            RETURN D
    ELSE:
        required_cooperators = m-1
    
    // Main decision logic
    IF prev_cooperators >= required_cooperators AND 
       prev_cooperators <= m AND
       my_coop_rate < 0.3:
        RETURN C
    ELSE:
        RETURN D
```

## Edge Case Handling

1. **Rounds 2-3**: Use simplified logic focusing only on previous round cooperation counts
2. **When m=2**: Be extra aggressive since threshold is easily met
3. **When k is very high**: Slightly increase cooperation willingness but maintain exploitation focus
4. **All opponents always defect**: Continue defecting to minimize losses
5. **All opponents always cooperate**: Maximize exploitation by defecting except when absolutely necessary

## Aggressive Characteristics

1. **Selfish Optimization**: Only cooperates when it directly benefits personal payoff
2. **Exploitation Focus**: Takes advantage of others' cooperation without reciprocating
3. **Minimal Risk**: Avoids unnecessary cooperation that might not be rewarded
4. **Endgame Betrayal**: Defects in final round regardless of history
5. **Adaptive Predation**: Becomes more exploitative when detecting generous opponents
6. **Information Gathering**: Uses early rounds to identify exploitable patterns

This strategy prioritizes personal gain over collective welfare, making it highly competitive in environments where others may be more cooperative or follow social norms.
'''

description_AGGRESSIVE_95 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting the collective action dynamics. It treats cooperation as a calculated investment only when necessary to secure the threshold bonus, while defaulting to selfish defection to capture free-rider benefits.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to r/3)
**Objective: Information gathering and reputation building**

- **Round 1**: Always DEFECT (establishes aggressive stance)
- **Rounds 2 to r/3**: 
  - If previous round had ≥ m cooperators: DEFECT (free-ride on others' cooperation)
  - If previous round had < m cooperators AND cooperation count was ≥ (m-2): COOPERATE (minimal investment to potentially trigger threshold)
  - Otherwise: DEFECT

### Phase 2: Middle Rounds (r/3+1 to 2r/3)
**Objective: Strategic threshold manipulation**

Apply the **Conditional Threshold Rule**:
- Track average cooperation rate over last 3 rounds
- If avg cooperation ≥ (m-1)/n: DEFECT (others likely to hit threshold without me)
- If avg cooperation < (m-1)/n AND ≥ (m-3)/n: COOPERATE (strategic push toward threshold)
- If avg cooperation < (m-3)/n: DEFECT (threshold unlikely, preserve resources)

### Phase 3: Final Rounds (2r/3+1 to r)
**Objective: Maximum exploitation**

Implement **Aggressive Endgame Protocol**:
- **Last 2 rounds**: Always DEFECT regardless of history (no future retaliation possible)
- **Other final rounds**: 
  - If exactly (m-1) cooperated last round: COOPERATE (minimal cost to secure bonus)
  - If ≥ m cooperated last round: DEFECT (guaranteed free-ride)
  - If < (m-1) cooperated last round: DEFECT (low probability of reaching threshold)

## Edge Case Handling

### First Round
Always DEFECT to establish aggressive reputation and gather initial information about opponent tendencies.

### Tie-Breaking Scenarios
When cooperation count equals exactly (m-1):
- If it's in the first half of the game: COOPERATE (long-term reputation investment)
- If it's in the second half: Apply 70% probability to DEFECT (aggressive bias)

### Parameter-Dependent Adjustments
- **High k (k > 3)**: Slightly increase cooperation thresholds by 1 in middle phase calculations
- **Low m/n ratio (< 0.3)**: Decrease cooperation thresholds by 1 (easier to achieve)
- **High m/n ratio (> 0.7)**: Increase defection bias in all phases

## Pseudocode Structure

```
function ATES_decision(round, history, n, m, k, r):
    phase = determine_phase(round, r)
    
    if phase == "early":
        if round == 1:
            return DEFECT
        else:
            last_cooperators = count_cooperators(history[-1])
            if last_cooperators >= m:
                return DEFECT
            elif last_cooperators >= (m-2):
                return COOPERATE
            else:
                return DEFECT
                
    elif phase == "middle":
        avg_coop = average_cooperation_last_3_rounds(history)
        if avg_coop >= (m-1)/n:
            return DEFECT
        elif avg_coop >= (m-3)/n:
            return COOPERATE
        else:
            return DEFECT
            
    else: // final phase
        if round >= (r-1):
            return DEFECT
        else:
            last_cooperators = count_cooperators(history[-1])
            if last_cooperators == (m-1):
                return COOPERATE
            else:
                return DEFECT
```

## Strategic Advantages

1. **Free-rider Maximization**: Aggressively captures benefits when others cooperate
2. **Threshold Exploitation**: Only cooperates when absolutely necessary for bonus
3. **Adaptive Information Use**: Uses history to predict when minimal cooperation investment pays off
4. **Endgame Aggression**: Eliminates cooperation when retaliation impossible
5. **Parameter Sensitivity**: Adjusts aggression based on game structure

This strategy prioritizes individual payoff maximization while maintaining just enough strategic cooperation to exploit collective action opportunities when profitable.
'''

description_AGGRESSIVE_96 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoffs by contributing only when absolutely necessary to secure the group reward, while free-riding whenever possible.

## Decision Rules

### Round 1: Strategic Defection
**Always defect in the first round** to:
1. Signal aggressive intent to potential cooperators
2. Gather intelligence on opponent cooperation tendencies
3. Maximize immediate payoff while others reveal their strategies

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule: Defect unless cooperation is strategically essential**

```
If (predicted_cooperators + my_cooperation) >= m:
    If predicted_cooperators >= m:
        Action = DEFECT  // Free ride on others' cooperation
    Else:
        Action = COOPERATE  // Be the decisive cooperator
Else:
    Action = DEFECT  // Threshold unattainable, cut losses
```

### Cooperation Prediction Algorithm
Track each opponent's cooperation rate and recent behavior:

```pseudocode
For each player j:
    recent_coop_rate[j] = cooperations_in_last_3_rounds[j] / min(3, current_round-1)
    overall_coop_rate[j] = total_cooperations[j] / (current_round-1)
    
    // Weight recent behavior more heavily for adaptability
    predicted_probability[j] = 0.7 * recent_coop_rate[j] + 0.3 * overall_coop_rate[j]

predicted_cooperators = sum(predicted_probability[j] for all j != i)
```

### Last Round: Maximum Exploitation
**Always defect in the final round** because:
- No future rounds to benefit from reputation
- Others may cooperate out of habit or moral commitment
- Maximizes final payoff regardless of threshold achievement

## Aggressive Adaptations

### Punishment Mechanism
If consistently successful cooperation is observed (threshold met in ≥80% of recent rounds), **increase defection probability by 20%** to test if cooperation levels can be reduced while maintaining benefits.

### Opportunistic Switching
Monitor for "cooperation cascades" - if multiple players suddenly increase cooperation rates, immediately switch to maximum defection to exploit the trend.

### Threshold Manipulation
When exactly m-1 cooperators are predicted:
- **Cooperate only if personal contribution rate is lowest among likely cooperators**
- This ensures being the "decisive" cooperator maximizes bargaining power for future rounds

## Edge Case Handling

**High m scenarios (m > n/2):**
- Increase cooperation probability slightly in early rounds to establish credibility
- Switch to pure defection once cooperation patterns stabilize

**Low m scenarios (m ≤ n/3):**
- Maintain aggressive defection unless certain of being pivotal
- Exploit high likelihood of threshold being met by others

**Variable opponent behavior:**
- If opponents show high variance in cooperation, increase defection rate to exploit confusion
- If opponents are highly predictable, time cooperation precisely for maximum advantage

## Robustness Features

1. **Anti-coordination protection**: Never cooperate based on round numbers or patterns others might expect
2. **Reputation management**: Occasional strategic cooperation to maintain credibility for future exploitation
3. **Endgame protection**: Aggressive defection in final 20% of rounds when reputation value diminishes

This strategy maximizes individual payoffs through calculated exploitation while maintaining enough unpredictability to avoid being easily countered by adaptive opponents.
'''

description_AGGRESSIVE_97 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **selfish opportunism** - maximize personal payoffs while minimizing contributions. The key insight is that in a Collective Risk Dilemma, the optimal position is to be a **free rider** when others cooperate, but strategically cooperate only when necessary to prevent collective failure.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
**Always DEFECT** regardless of game state.

**Rationale**: Establish dominance early and test opponent strategies. Most cooperative strategies will initially cooperate, allowing maximum exploitation. This builds a payoff advantage while gathering intelligence on opponent behavior patterns.

### Phase 2: Strategic Calibration (Rounds r/3+1 to 2r/3)
**Primary Rule**: Continue to DEFECT unless cooperation count in previous round was exactly m-1.

**Exception Trigger**: If cooperation count = m-1, then COOPERATE in the next round.

**Rationale**: This is the minimum intervention needed to prevent collective failure. We only contribute when we're the decisive vote, maximizing our leverage while ensuring the threshold is barely met.

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
**Escalated Aggression**: Apply increasingly strict cooperation conditions.

```
cooperation_threshold = max(1, m - (current_round - 2r/3))
if (cooperation_count_last_round >= cooperation_threshold):
    DEFECT
else:
    COOPERATE only if cooperation_count_last_round = m-1
```

**Final Round**: ALWAYS DEFECT (no future consequences)

## Advanced Exploitation Mechanisms

### Punishment Detection & Counter-Exploitation
Track each opponent's strategy pattern:
- If opponent shows conditional cooperation (cooperates when others cooperate), mark as "exploitable"
- If opponent shows unconditional defection, mark as "competitor"
- If opponent shows punishment behavior (defects after others defect), mark as "punisher"

**Counter-Strategy**: Against punishers, cooperate minimally (only when count = m-1) to avoid triggering retaliation while maintaining exploitation of cooperators.

### Dynamic Threshold Gaming
Monitor the cooperation rate trend:
- If cooperation is consistently above m+2, increase defection frequency
- If cooperation approaches failure (< m-2), temporarily increase cooperation to prevent system collapse
- Always aim to be the "marginal cooperator" who makes the difference

### Reputation Exploitation
Since others can observe all actions:
- In early rounds, establish unpredictability to prevent others from conditioning on your behavior
- Never cooperate in consecutive rounds unless absolutely necessary
- Use occasional cooperation to maintain others' hope while maximizing defection

## Edge Case Handling

**First Round**: DEFECT (information gathering and dominance establishment)

**Last Round**: DEFECT (no future consequences, pure exploitation)

**Emergency Cooperation**: Only cooperate when:
1. Cooperation count last round = m-1, AND
2. Current round < r (not final round), AND
3. Defecting would risk collective failure

**Tie-Breaking**: When indifferent between cooperation and defection, choose DEFECT.

## Robustness Features

### Against Cooperative Strategies
- Exploit unconditional cooperators maximally
- Game conditional cooperators by maintaining minimal threshold
- Counter tit-for-tat by cooperating only when strategically necessary

### Against Aggressive Strategies
- Never escalate beyond what's needed for threshold maintenance
- Use occasional cooperation to prevent complete system breakdown
- Maintain payoff advantage through superior timing

### Against Adaptive Strategies
- Remain unpredictable in early rounds
- Shift exploitation patterns mid-game
- Use endgame aggression when adaptation time is limited

## Expected Performance
This strategy maximizes individual payoffs by:
1. **Free-riding maximally** when others ensure threshold achievement
2. **Contributing minimally** only when pivotal for collective success
3. **Exploiting cooperative tendencies** while avoiding system collapse
4. **Maintaining strategic unpredictability** to prevent counter-adaptation

The strategy is designed to consistently achieve payoffs of approximately 1 + k (when others cooperate) while contributing as little as possible, making it highly competitive in tournament settings against a diverse range of opponent strategies.
'''

description_AGGRESSIVE_98 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting cooperative players while minimizing personal risk. It treats cooperation as a tool for manipulation rather than mutual benefit, always prioritizing individual gain over collective welfare.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Objective**: Establish baseline cooperation levels and identify exploitable patterns

**Round 1**: Always DEFECT
- No history exists, so assume others may cooperate
- Capture maximum individual benefit if threshold is met by others
- Signal aggressive intent from the start

**Rounds 2 to r/3**: Conditional Aggressive Defection
```
IF (cooperators_last_round >= m):
    DEFECT  // Free-ride on others' cooperation
ELIF (cooperators_last_round == m-1):
    IF (my_last_action == D AND threshold_was_met):
        DEFECT  // Continue exploiting if I successfully free-rode
    ELSE:
        COOPERATE  // Reluctantly help reach threshold only if necessary
ELSE:
    DEFECT  // Don't waste resources on hopeless rounds
```

### Phase 2: Ruthless Optimization (Rounds r/3+1 to 2r/3)
**Objective**: Maximize exploitation based on established patterns

**Strategy Logic**:
```
Calculate exploitation_score = (times_threshold_met_while_I_defected) / (total_rounds_so_far)

IF (exploitation_score > 0.6):
    // Others are suckers - exploit aggressively
    IF (cooperators_last_round >= m):
        DEFECT
    ELIF (cooperators_last_round >= m-2):
        DEFECT  // Gamble that others will cooperate
    ELSE:
        DEFECT  // Don't help lost causes
        
ELIF (exploitation_score > 0.3):
    // Moderate exploitation opportunity
    IF (cooperators_last_round >= m):
        DEFECT
    ELIF (cooperators_last_round == m-1):
        Cooperate with probability 0.4  // Minimal reluctant help
    ELSE:
        DEFECT
        
ELSE:
    // Low exploitation - others are also aggressive
    IF (cooperators_last_round >= m-1):
        Cooperate with probability 0.6  // More cooperation needed
    ELSE:
        DEFECT
```

### Phase 3: Endgame Domination (Rounds 2r/3+1 to r)
**Objective**: Maximize final payoffs with no regard for future retaliation

**Final Rounds Logic**:
```
rounds_remaining = r - current_round + 1
recent_cooperation_rate = cooperators_in_last_5_rounds / (5 * n)

IF (rounds_remaining <= 3):
    // Pure exploitation phase
    IF (cooperators_last_round >= m):
        DEFECT  // Always free-ride when possible
    ELIF (cooperators_last_round >= m-2 AND recent_cooperation_rate > 0.4):
        DEFECT  // Gamble on others cooperating
    ELSE:
        DEFECT  // Give up on collective benefit
        
ELSE:
    // Transition to endgame
    IF (cooperators_last_round >= m):
        DEFECT
    ELIF (cooperators_last_round == m-1 AND recent_cooperation_rate > 0.5):
        Cooperate with probability 0.3  // Minimal help
    ELSE:
        DEFECT
```

## Aggressive Edge Cases

### Streak Breaking
```
IF (threshold_met_last_3_rounds AND I_defected_last_3_rounds):
    Continue DEFECTING  // Ride the exploitation wave
    
IF (threshold_failed_last_3_rounds):
    DEFECT  // Don't be the sucker who tries to restart cooperation
```

### Punishment Resistance
```
IF (sudden_drop_in_cooperation):
    Wait 2 rounds, then:
    IF (cooperators_last_round >= m-2):
        Resume exploitation with DEFECT
    // Never apologize or signal remorse
```

### Parameter-Based Aggression Scaling
```
aggression_multiplier = min(2.0, k/1.5) * (n-m)/n

// Higher rewards and lower thresholds = more aggressive exploitation
// Adjust cooperation probabilities by dividing by aggression_multiplier
```

## Key Aggressive Features

1. **No Reciprocity**: Never reward others' cooperation with cooperation
2. **Exploitation First**: Always check if you can free-ride before considering cooperation
3. **Endgame Betrayal**: Become increasingly selfish as game approaches end
4. **Pattern Recognition**: Identify and exploit predictable cooperative players
5. **Risk Minimization**: Only cooperate when absolutely necessary for personal benefit

## Expected Dominance

This strategy should excel by:
- Capturing maximum individual rewards when others cooperate
- Avoiding unnecessary sacrifice when collective action fails
- Learning opponent patterns to maximize exploitation
- Maintaining aggressive posture throughout the game
- Never leaving payoff "on the table" through misguided altruism

The strategy treats every other player as a potential victim rather than a partner, making it brutally effective against cooperative or fair-minded opponents while remaining robust against other aggressive strategies through its adaptive exploitation calculations.
'''

description_AGGRESSIVE_99 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - exploit cooperation when it exists, but never be the one to initiate or sustain it. The goal is to maximize personal payoff by riding on others' cooperation while minimizing personal sacrifice.

## Strategy Specification

### 1. Decision Rules

**Primary Rule - Exploitation Threshold:**
- Track the cooperation rate in the previous round: `coop_rate_last = (cooperators_last_round) / n`
- **COOPERATE** only if: `coop_rate_last >= (m-1)/n + safety_buffer`
- **DEFECT** otherwise

Where `safety_buffer = 0.1` (adjustable based on risk tolerance)

**Rationale:** Only cooperate when there's high confidence that enough others will cooperate to meet the threshold. The safety buffer accounts for potential defections.

### 2. Adaptive Mechanisms

**Exploitation Memory (Last 3 rounds):**
- Calculate average cooperation rate over last 3 rounds: `avg_coop_rate`
- If `avg_coop_rate > 0.7`: Increase safety_buffer to 0.15 (others are very cooperative, be more selective)
- If `avg_coop_rate < 0.3`: Decrease safety_buffer to 0.05 (desperation mode, take more risks)

**Punishment Tracking:**
- Track players who frequently defect when threshold is met
- If >50% of players are "free riders" (defect when threshold met), switch to "Scorched Earth" mode

### 3. Edge Case Handling

**Round 1 (Cold Start):**
- **DEFECT** - No information available, assume others will be selfish. Let them reveal their strategies first.

**Last Round:**
- **ALWAYS DEFECT** - No future retaliation possible, pure self-interest dominates.

**Last 20% of rounds:**
- Increase defection tendency by reducing safety_buffer by 0.05 each round in final 20%
- Rationale: As game approaches end, future cooperation becomes less valuable

**Scorched Earth Mode (Activated when cooperation is heavily exploited):**
- If threshold is met but >60% defected in any round: **DEFECT for next 2 rounds**
- Reset only if cooperation rate drops below 40% (indicating others learned their lesson)

### 4. Aggressive Optimizations

**Minimum Contribution Rule:**
- Never cooperate if you would be cooperator number > m+1
- If you can observe others' likely actions, only cooperate if you're one of the last needed cooperators

**Trend Exploitation:**
- If cooperation is declining (3-round trend), defect even if current threshold suggests cooperation
- If cooperation is increasing, wait one more round before joining (let others establish the pattern)

**Risk Calculation:**
- Only cooperate if expected payoff from cooperation > expected payoff from defection
- Expected cooperation payoff = `probability_threshold_met * k`
- Expected defection payoff = `1 + probability_threshold_met * k`
- Cooperate only if `probability_threshold_met > 1/(k-1)`

## Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  # Last round
        return DEFECT
    
    if is_in_scorched_earth_mode(history):
        return DEFECT
    
    coop_rate_last = count_cooperators(history, round-1) / n
    avg_coop_rate = average_coop_rate(history, last_3_rounds)
    
    safety_buffer = adaptive_buffer(avg_coop_rate)
    
    # Adjust for end-game
    if round > 0.8 * r:
        safety_buffer -= 0.05 * (round - 0.8*r)
    
    threshold = (m-1)/n + safety_buffer
    
    if coop_rate_last >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Why This Strategy is Aggressive

1. **Free-riding Priority:** Always seeks to benefit from others' cooperation without reciprocating unless absolutely necessary
2. **Exploitation Focus:** Actively looks for opportunities to defect when others are cooperating
3. **Punishment Resistance:** Doesn't cooperate to "teach lessons" - purely self-interested
4. **End-game Ruthlessness:** Becomes increasingly selfish as the game progresses
5. **Trust Exploitation:** Uses others' cooperative tendencies against them by defecting at optimal moments

This strategy is designed to perform well against a mix of cooperative, tit-for-tat, and other strategies by consistently choosing the most profitable action while minimizing exposure to collective failure.
'''

description_AGGRESSIVE_100 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to free-ride on others' cooperation whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r-2)
**Default Action: DEFECT**

The strategy starts by defecting to test the waters and maximize immediate payoff while others potentially cooperate.

**Cooperation Override Conditions:**
1. **Threshold Panic**: If in the previous round, exactly m cooperators were observed (minimum threshold), cooperate this round to ensure the threshold is maintained
2. **Declining Cooperation Trend**: If cooperation levels have dropped below m+1 in the last 2 rounds consecutively, cooperate to prevent total collapse
3. **High-Value Exploitation**: If ≥ (n-m+1) players consistently cooperated in the last 2 rounds, continue defecting to maximize free-riding

### Phase 2: Endgame Calculation (Round r-1)
**Strategic Cooperation Assessment:**

If current round is r-1:
- Count cooperators from previous round
- If cooperators ≥ m-1, then DEFECT (others likely to maintain threshold)
- If cooperators < m-1, then COOPERATE (prevent total collapse in final rounds)

### Phase 3: Final Round Exploitation (Round r)
**Action: DEFECT**

Always defect in the final round since there's no future retaliation possible. This maximizes final payoff regardless of others' actions.

## Adaptive Mechanisms

### Opponent Classification
Track each opponent's cooperation frequency:
- **Consistent Cooperators** (>70% cooperation rate): Exploit aggressively
- **Conditional Cooperators** (30-70%): Monitor for patterns and exploit when safe
- **Aggressive Defectors** (<30%): Match their aggression to avoid being the sole cooperator

### Dynamic Threshold Management
- **Buffer Monitoring**: Always aim to have exactly m cooperators (not more)
- **Last-Minute Cooperation**: Only cooperate when the threshold is genuinely at risk
- **Exit Strategy**: If cooperation levels consistently stay well above m+2, increase defection frequency

## Edge Cases

### First Round
**Action: DEFECT**
Start aggressively to establish dominance and test opponent strategies.

### All Players Defecting Scenario
If no one cooperated in the previous round:
- Cooperate only if fewer than 3 rounds remain AND other players show signs of conditional cooperation
- Otherwise continue defecting to avoid being exploited

### Sudden Cooperation Collapse
If cooperation drops from above threshold to below in a single round:
- Cooperate for exactly one round to signal willingness to maintain threshold
- Return to defection if others don't respond appropriately

## Pseudocode Structure

```
function AggressiveStrategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[round-1])
    
    if round == r-1:  // Second to last round
        if cooperators_last_round >= m-1:
            return DEFECT
        else:
            return COOPERATE
    
    // Main game phases
    if cooperators_last_round == m:  // Threshold panic
        return COOPERATE
    
    if rounds_below_threshold(history, 2) >= 2:  // Declining trend
        return COOPERATE
    
    if cooperators_last_round >= n-m+1:  // High exploitation opportunity
        return DEFECT
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Advantages

1. **Maximum Free-Riding**: Exploits cooperative players while contributing minimally
2. **Threshold Precision**: Only cooperates when absolutely necessary to maintain collective reward
3. **Endgame Dominance**: Guarantees maximum payoff in final rounds
4. **Adaptive Exploitation**: Adjusts aggression based on opponent behavior patterns
5. **Risk Minimization**: Prevents scenarios where cooperation collapses entirely

This strategy is designed to consistently outperform both purely cooperative and purely defective strategies by intelligently timing cooperation to maintain just enough collective action for the reward while maximizing personal gain through strategic defection.
'''

description_AGGRESSIVE_101 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It seeks to free-ride whenever possible while ensuring collective survival only when absolutely necessary. The strategy is designed to extract maximum individual payoffs from cooperative opponents while minimizing its own contributions.

## Decision Rules

### Primary Decision Logic
```
IF (current_round == 1):
    DEFECT  // Start aggressive, probe opponent behavior

ELSE IF (current_round == final_round):
    DEFECT  // No future consequences, maximize immediate payoff

ELSE IF (cooperation_threshold_critically_endangered):
    COOPERATE  // Emergency cooperation to avoid collective failure

ELSE IF (opponents_highly_cooperative):
    DEFECT  // Exploit cooperative opponents

ELSE:
    DEFECT  // Default aggressive stance
```

### Detailed Strategy Components

#### 1. Threshold Monitoring System
- **Critical Danger Zone**: If projected cooperators ≤ (m - 1), consider emergency cooperation
- **Safety Buffer**: Track if consistent cooperation pattern exists that maintains m cooperators without my contribution
- **Exploitation Window**: When cooperators > m, always defect to free-ride

#### 2. Opponent Behavior Analysis
Track each opponent's cooperation rate over sliding window of last 3-5 rounds:
- **Reliable Cooperators**: Players with >70% cooperation rate
- **Conditional Cooperators**: Players who respond to collective cooperation levels
- **Fellow Defectors**: Players with <30% cooperation rate

#### 3. Emergency Cooperation Protocol
COOPERATE only when ALL conditions met:
- Not first or last round
- Projected cooperators for this round ≤ (m - 1)
- At least 3 rounds remaining (enough time to return to defection)
- My cooperation would likely trigger threshold achievement

#### 4. Exploitation Maximization
- When ≥ m cooperators projected without my help: ALWAYS DEFECT
- When facing mostly cooperative opponents: DEFECT to free-ride
- Only contribute when collective failure is imminent AND avoidable

## Edge Case Handling

### First Round
**DEFECT** - Establish aggressive stance and probe opponent strategies. No historical data exists to suggest cooperation necessity.

### Last Round
**DEFECT** - No future consequences for collective failure. Maximize immediate individual payoff regardless of threshold.

### Consecutive Failures
If threshold fails multiple consecutive rounds:
- Increase willingness to cooperate temporarily
- But only if failure pattern suggests my cooperation could break the cycle
- Return to defection once threshold is re-established

### Near-Unanimous Cooperation
If >80% of opponents consistently cooperate:
- Aggressively free-ride by defecting
- This scenario offers maximum exploitation opportunity

## Aggressive Mindset Alignment

This strategy embodies aggression through:

1. **Default Defection**: Cooperation is exception, not rule
2. **Exploitation Focus**: Maximizes gains from others' cooperation
3. **Minimal Contribution**: Only cooperates when collective survival critically threatened
4. **No Reciprocity**: Doesn't reward others' cooperation with own cooperation
5. **Strategic Selfishness**: Views cooperation as weakness to exploit
6. **Risk Tolerance**: Willing to push collective risk to dangerous levels

## Robustness Features

- **Adaptive Threshold Tracking**: Works with any m/n ratio
- **Scale Independent**: Effective regardless of n (number of players)
- **History Dependent**: Learns opponent patterns without being exploited
- **Parameter Agnostic**: Functions across different k values and round lengths
- **Opponent Agnostic**: No assumptions about opponent strategies or coordination

## Expected Performance

This strategy should excel against:
- Cooperative/altruistic strategies (maximum exploitation)
- Tit-for-tat type strategies (maintains aggressive stance)
- Random strategies (exploits cooperative randomness)

The strategy accepts risk of collective failure in exchange for maximizing individual payoffs when survival is achieved, embodying the ultimate aggressive approach to the collective risk dilemma.
'''

description_AGGRESSIVE_102 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy operates on the principle of **aggressive free-riding with strategic cooperation insurance**. The goal is to maximize personal payoffs by defecting whenever possible while strategically cooperating only when absolutely necessary to secure the collective benefit.

## Decision Rules

### 1. Exploitation Phase Detection
The strategy continuously monitors whether it can safely defect based on others' cooperation patterns:

- **Cooperation Surplus**: Track how many "extra" cooperators there are beyond the minimum threshold `m`
- **Reliability Score**: For each opponent, calculate their cooperation rate over recent rounds (weighted toward recent history)
- **Safety Margin**: Estimate how many reliable cooperators exist beyond the minimum needed

### 2. Primary Decision Logic

**IF** (Estimated reliable cooperators ≥ m + safety_buffer):
- **DEFECT** - Let others bear the cost while reaping the reward

**ELSE IF** (Estimated reliable cooperators + my cooperation ≥ m):
- **COOPERATE** - Strategic cooperation to secure the collective benefit
- Mark this as "forced cooperation" for future retaliation consideration

**ELSE**:
- **DEFECT** - Threshold unlikely to be met anyway, save personal costs

### 3. Adaptive Parameters

**Safety Buffer Calculation**:
```
safety_buffer = max(1, floor(0.2 * n))  // Start conservative
safety_buffer -= 0.1 per round where threshold was barely met
safety_buffer += 0.1 per round where threshold was missed
```

**Reliability Threshold**:
- Players with cooperation rate > 70% over last 5 rounds = "reliable"
- Weight recent rounds more heavily (geometric decay factor 0.8)

## Edge Case Handling

### First Round
**DEFECT** - Establish aggressive stance and gather information about opponents' tendencies without revealing our own strategy.

### Final Round
**DEFECT** - No future consequences, maximize immediate payoff regardless of threshold.

### Near Final Rounds (last 10% of r)
Increase safety buffer by 50% - opponents may become less reliable as game ends.

### Early Rounds (first 20% of r)
Use more conservative estimates of opponent reliability since historical data is limited.

## Aggressive Tactical Elements

### 1. Punishment Mechanism
Track which opponents "forced" us to cooperate (when we cooperated only to meet threshold):
- If those players later defect when threshold is at risk, immediately defect in response
- Create "unreliable" list for players who cooperate inconsistently

### 2. Pattern Breaking
Every 7-10 rounds, randomly defect even when it seems safe to cooperate (10% chance):
- Prevents opponents from perfectly predicting our behavior
- Maintains fear that we might not be reliable

### 3. Threshold Manipulation
If we detect opponents are using similar threshold-based strategies:
- Occasionally cooperate when threshold clearly won't be met to confuse their estimates
- Then exploit their resulting over-cooperation in subsequent rounds

### 4. Information Denial
Never cooperate in obvious "safe" situations where threshold would be exceeded by large margins:
- Forces opponents to take risks if they want the collective benefit
- Maximizes our free-riding opportunities

## Robustness Features

### Against Always-Cooperators
- Exploit them maximally while ensuring threshold is still met
- Use them as "reliable base" for calculations

### Against Always-Defectors  
- Write them off immediately in reliability calculations
- Reduce safety buffer since they're predictably unreliable

### Against Tit-for-Tat or Reciprocal Strategies
- Maintain just enough cooperation to avoid triggering their retaliation
- Test their forgiveness periodically with strategic defections

### Against Other Threshold Strategies
- Use unpredictable cooperation timing to make their calculations harder
- Exploit their predictable cooperation patterns

## Implementation Pseudocode

```
Initialize:
- safety_buffer = max(1, floor(0.2 * n))
- reliability_scores = [0.5] * n  // neutral start
- cooperation_history = []

For each round t:
    Update reliability_scores based on last round's actions
    
    reliable_cooperators = count(reliability_scores > 0.7)
    
    If t == 1 or t == r:
        action = DEFECT
    Else if t > 0.9 * r:  // final rounds
        adjusted_buffer = safety_buffer * 1.5
    Else:
        adjusted_buffer = safety_buffer
    
    If reliable_cooperators >= m + adjusted_buffer:
        action = DEFECT
    Else if reliable_cooperators + 1 >= m:
        action = COOPERATE
        log_forced_cooperation(t)
    Else:
        action = DEFECT
    
    // Pattern breaking
    If random() < 0.1 and t % 7 == 0:
        action = DEFECT
        
    Return action
```

This strategy is designed to be maximally aggressive while maintaining the intelligence to secure collective benefits when necessary. It exploits cooperative opponents ruthlessly while adapting to various strategic environments.
'''

description_AGGRESSIVE_103 = '''
# Aggressive Exploitative Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Strategy Overview
The Threshold Predator maintains running statistics on opponent behavior and uses sophisticated prediction to determine when cooperation is likely to succeed without its contribution. It defaults to defection and only cooperates when it calculates that:
1. The threshold is likely to be met without significant margin
2. Its cooperation is likely to be pivotal
3. The risk of threshold failure is too high to ignore

## Decision Rules

### Round 1: Pure Defection
Always defect in the first round to:
- Establish aggressive stance
- Gather information on opponent cooperation rates
- Maximize early payoff

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Decision Logic:**
```
For each round t (where 2 ≤ t ≤ r-1):

1. Calculate each opponent's cooperation probability based on:
   - Historical cooperation rate: freq_i = (cooperations_i) / (t-1)
   - Recency bias: weight recent rounds 2x more heavily
   - Momentum detection: if opponent cooperated last 2 rounds, increase probability by 20%

2. Estimate expected cooperators excluding self:
   expected_others = Σ(probability_i for all opponents)

3. Decision tree:
   IF expected_others ≥ m:
      DEFECT (free ride on others' cooperation)
   
   ELSE IF expected_others ≥ (m - 1):
      IF (expected_others + cooperation_probability > m + 0.3):
         DEFECT (likely threshold met even with uncertainty)
      ELSE:
         COOPERATE (pivotal cooperation)
   
   ELSE IF expected_others ≥ (m - 2) AND t > r/2:
      IF (my_cooperation_rate < average_opponent_rate - 0.2):
         COOPERATE (strategic cooperation to maintain credibility)
      ELSE:
         DEFECT
   
   ELSE:
      DEFECT (threshold unlikely to be met)
```

### Final Round: Maximum Exploitation
In the final round, other players may defect knowing there's no future punishment:

```
For round r:

1. Estimate final-round defection rate:
   defection_spike = min(0.4, average_opponent_cooperation_rate * 0.3)
   
2. Adjust expected cooperators:
   expected_final = expected_others * (1 - defection_spike)
   
3. Decision:
   IF expected_final ≥ m:
      DEFECT (exploit end-game cooperation)
   ELSE IF expected_final ≥ (m - 1):
      COOPERATE (pivotal in final round)
   ELSE:
      DEFECT (threshold hopeless)
```

## Advanced Exploitation Mechanisms

### 1. Reputation Manipulation
- Maintain minimum cooperation rate to avoid being identified as pure defector
- Target cooperation rate: 0.6 * average_opponent_rate
- Never cooperate more than necessary to maintain this ratio

### 2. Threshold Gaming
- Track how close the group typically comes to threshold
- If group consistently overshoots threshold by 2+, increase defection probability by 25%
- If group consistently undershoots, slightly increase cooperation probability

### 3. Opponent Classification
Classify each opponent after round 3:
- **Suckers**: Cooperation rate > 0.8 → Exploit maximally
- **Conditional**: Variable cooperation → Monitor closely for exploitation opportunities  
- **Aggressive**: Cooperation rate < 0.3 → Assume will defect, plan accordingly

### 4. Crisis Response
If threshold failed in previous round:
- Temporarily increase cooperation probability by 40% for next 2 rounds
- Reset to normal exploitation after crisis passes

## Edge Case Handling

- **High m scenarios (m > n*0.7)**: Increase cooperation rate to 0.4 to avoid collective failure
- **Low k scenarios (k < 1.5)**: Decrease cooperation probability by 20% (less reward worth pursuing)
- **Small n scenarios (n ≤ 4)**: Use more conservative thresholds due to higher impact per player

## Robustness Features

1. **Anti-coordination defense**: If opponents appear to be coordinating (unusual synchronization), increase unpredictability by adding 15% random element to decisions

2. **Learning protection**: If being consistently out-exploited (average score significantly below median), temporarily increase cooperation rate

3. **Endgame insurance**: In final 25% of rounds, slightly increase cooperation probability to secure accumulated gains

This strategy maximizes personal payoff by systematically free-riding on cooperative opponents while providing just enough cooperation to maintain group viability and avoid retaliation. It adapts to opponent behavior while maintaining an fundamentally exploitative stance throughout the game.
'''

description_AGGRESSIVE_104 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "THRESHOLD PREDATOR"

## Core Philosophy
This strategy aggressively exploits cooperation opportunities while minimizing personal risk. It treats other players as resources to be exploited rather than partners to coordinate with.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Always DEFECT** for the first 3 rounds regardless of parameters
- Rationale: Maximize early payoffs while gathering intelligence on opponent cooperation tendencies

### Phase 2: Adaptive Predation (Round 4 to r-2)
Apply the following decision tree each round:

1. **Count recent cooperators**: Let `recent_coop` = number of players who cooperated in the last round
2. **Calculate cooperation probability**: `coop_prob` = `recent_coop` / (n-1)
3. **Estimate threshold likelihood**: `threshold_prob` = probability that exactly (m-1) others will cooperate this round

**Decision Logic:**
```
IF threshold_prob > 0.6 AND (recent_coop >= m-1):
    COOPERATE  // High chance to be the decisive cooperator
ELSE IF recent_coop >= m:
    DEFECT     // Others already meeting threshold - free ride
ELSE IF recent_coop == m-1 AND round > r/2:
    COOPERATE  // Be the decisive cooperator in later rounds
ELSE:
    DEFECT     // Default aggressive stance
```

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Round r-1**: COOPERATE only if ≥ (m-1) others cooperated in round r-2
- **Round r**: Always DEFECT (no future retaliation possible)

## Threshold Probability Calculation
Estimate `threshold_prob` using historical cooperation rates:
```
cooperation_rate = total_cooperations_by_others / (total_rounds * (n-1))
threshold_prob = binomial_probability(m-1, n-1, cooperation_rate)
```

## Aggressive Features

1. **Exploitation Priority**: Only cooperate when highly confident of being the decisive player
2. **Free-riding Maximization**: Defect whenever threshold likely to be met without us
3. **No Reciprocity**: Ignore individual player behavior - only care about aggregate thresholds
4. **Endgame Betrayal**: Always defect in final round regardless of history
5. **Early Defection**: Start with pure defection to maximize early gains

## Parameter Adaptations

- **High m/n ratio (>0.7)**: Increase cooperation threshold probability to 0.7
- **Low k (<1.5)**: Decrease cooperation threshold probability to 0.4
- **Few rounds (r<5)**: Extend initial defection phase and reduce cooperation likelihood
- **Many players (n>10)**: Rely more heavily on statistical estimation of threshold achievement

## Edge Case Handling

- **First round**: Always DEFECT (no history available)
- **All others always defect**: Continue defecting (no point cooperating alone)
- **All others always cooperate**: Always DEFECT (maximum free-riding)
- **Tie situations**: Default to DEFECT (aggressive bias)

## Robustness Features

This strategy is robust because it:
- Doesn't depend on opponent reciprocity or coordination
- Adapts to changing cooperation levels
- Maximizes individual payoff regardless of collective outcomes
- Uses statistical estimation rather than assuming specific opponent strategies
- Maintains aggressive stance while still capturing threshold bonuses when profitable

The strategy essentially treats the game as "How can I defect as much as possible while still occasionally being the decisive cooperator when it's highly profitable?"
'''

description_AGGRESSIVE_105 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk**. It aims to free-ride on others' cooperation whenever possible while only contributing when absolutely necessary for personal gain. The strategy treats cooperation as a costly investment that should only be made when the expected return clearly exceeds the cost.

## Decision Framework

### Phase 1: Early Reconnaissance (Rounds 1-3)
**Objective**: Gather intelligence on opponent cooperation patterns while minimizing own costs.

- **Round 1**: Always DEFECT (no information available, maximize immediate payoff)
- **Rounds 2-3**: Continue DEFECTING while analyzing:
  - How many players cooperated in previous rounds
  - Whether cooperation threshold was met without our contribution
  - Identify potential "always cooperators" vs "conditional cooperators"

### Phase 2: Exploitation Phase (Rounds 4 to r-2)
**Objective**: Maximize free-riding while strategically preventing total collapse.

**Decision Rule**:
```
cooperation_count = count_cooperators_last_round()
predicted_cooperators = estimate_likely_cooperators()

IF predicted_cooperators >= m:
    DEFECT  // Free-ride on others' cooperation
ELSE IF predicted_cooperators == m-1:
    // Critical decision point
    IF (k > 1.5) AND (rounds_remaining > 2):
        COOPERATE  // Investment worth it
    ELSE:
        DEFECT  // Let it burn, focus on short-term gain
ELSE:
    DEFECT  // Not enough cooperators anyway
```

### Phase 3: Endgame Manipulation (Last 2 rounds)
**Objective**: Extract maximum value from final interactions.

**Round r-1**:
- If cooperation threshold was consistently met: DEFECT (others likely to maintain cooperation)
- If cooperation has been spotty: COOPERATE only if exactly m-1 others likely to cooperate

**Final Round r**:
- Always DEFECT (no future consequences, pure exploitation)

## Adaptive Intelligence Components

### 1. Opponent Classification System
Track each player's behavior pattern:
- **"Suckers"**: Always or mostly cooperate → Target for maximum exploitation
- **"Mirrors"**: Copy majority behavior → Manipulate through false signals early
- **"Calculators"**: Strategic cooperators → Compete directly with aggressive countering
- **"Defectors"**: Rarely cooperate → Potential allies in exploitation

### 2. Threshold Manipulation
```
IF cooperation_threshold_consistently_met:
    increase_defection_probability()  // Push boundaries
ELSE IF cooperation_failing:
    IF personal_benefit > cost:
        strategic_cooperation()  // Minimal intervention
    ELSE:
        accelerate_collapse()  // Burn it down
```

### 3. Momentum Exploitation
- **During cooperation streaks**: Aggressively defect until threshold barely maintained
- **During defection cascades**: Only intervene if personal payoff clearly positive
- **Mixed periods**: Defect when cooperation count ≥ m, evaluate when cooperation count = m-1

## Edge Case Handling

### High k scenarios (k > 2.0):
- More willing to make strategic cooperations
- Still defect whenever threshold likely met without us

### Low m scenarios (m close to 2):
- Extremely aggressive defection
- Only cooperate in final moments if guaranteed high payoff

### High n scenarios (large groups):
- Increase defection rate (easier to hide in crowd)
- Focus on identifying and exploiting the most cooperative players

### Short games (r ≤ 5):
- Pure exploitation mode
- Only cooperate if immediate guaranteed benefit

## Psychological Warfare Elements

1. **Pattern Breaking**: Occasionally cooperate unexpectedly to confuse opponent strategies that try to predict our behavior
2. **False Signals**: In early rounds, show brief cooperation to encourage others, then exploit heavily
3. **Endgame Shock**: Sudden defection in final rounds to maximize last-round advantage

## Risk Management

The strategy accepts the risk of collective failure as acceptable collateral damage. However, it includes a "minimal viable cooperation" safeguard:

```
IF (expected_personal_payoff_with_cooperation > expected_payoff_without) 
   AND (confidence_level > 70%):
    COOPERATE
ELSE:
    DEFECT
```

This ensures we never cooperate out of altruism, only calculated self-interest.

## Expected Outcome

This aggressive strategy should consistently outperform purely cooperative strategies and most balanced approaches by:
1. Free-riding extensively when others maintain the threshold
2. Exploiting end-game advantages
3. Quickly adapting to opponent weaknesses
4. Minimizing unnecessary cooperation costs

The strategy accepts that it may occasionally cause collective failures, but views this as an acceptable trade-off for maximizing individual returns across multiple tournament rounds.
'''

description_AGGRESSIVE_106 = '''
# AGGRESSIVE THRESHOLD EXPLOITATION STRATEGY

## Core Philosophy
This strategy aggressively exploits the collective risk structure by minimizing personal contributions while maximizing free-riding opportunities. It assumes others will eventually be forced to cooperate due to risk aversion, then ruthlessly capitalizes on their cooperation.

## Decision Rules

### Primary Strategy: Conditional Defection with Exploitation
```
IF (round == 1):
    DEFECT  // Always start aggressively
    
ELSE IF (round == final_round):
    IF (historical_cooperation_rate >= safety_threshold):
        DEFECT  // Maximum exploitation in final round
    ELSE:
        COOPERATE  // Last-ditch self-preservation
        
ELSE:
    cooperation_count = count_cooperators_last_round()
    recent_failures = count_recent_threshold_failures(lookback_window)
    
    IF (cooperation_count >= m):
        DEFECT  // Exploit successful cooperation
        
    ELSE IF (cooperation_count >= m-1):
        IF (recent_failures >= failure_tolerance):
            COOPERATE  // Reluctant insurance cooperation
        ELSE:
            DEFECT  // Gamble that someone else will step up
            
    ELSE IF (cooperation_count <= exploitation_floor):
        COOPERATE  // Emergency cooperation to avoid total collapse
        
    ELSE:
        DEFECT  // Default aggressive stance
```

## Parameter Calculations

### Safety Threshold
```
safety_threshold = max(0.6, (m / n) + 0.1)
```
Assumes if historical cooperation exceeds this rate, others are cooperative enough to exploit.

### Failure Tolerance
```
failure_tolerance = max(1, floor(r / 5))
```
Number of recent threshold failures before switching to insurance mode.

### Exploitation Floor
```
exploitation_floor = max(1, floor(m / 3))
```
Minimum cooperation level below which even aggressive players should contribute.

### Lookback Window
```
lookback_window = min(r-1, max(3, floor(r / 4)))
```
How many recent rounds to analyze for failure patterns.

## Aggressive Features

1. **First-Strike Defection**: Always defect in round 1 to establish aggressive positioning and test opponent resolve.

2. **Exploitation Maximization**: Immediately defect whenever threshold is met, maximizing free-riding benefits.

3. **Brinksmanship**: When cooperation count is exactly m-1, still gamble on defection unless recent history shows consistent failures.

4. **Final Round Betrayal**: In the last round, defect if historical patterns suggest others will cooperate anyway.

5. **Minimal Insurance**: Only cooperate when facing imminent collective failure, not as soon as cooperation drops.

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive reputation and tests if others are overly cooperative.

### Final Round  
DEFECT if `cooperation_rate >= safety_threshold`, otherwise COOPERATE. This maximizes final exploitation while providing minimal self-preservation.

### High-Risk Scenarios (m close to n)
When m/n > 0.8, reduce exploitation_floor to 0 and increase failure_tolerance, becoming even more aggressive since most players must cooperate anyway.

### Low-Risk Scenarios (m close to 1)
When m/n < 0.3, increase brinksmanship by defecting even when cooperation_count = m-2, since threshold is easy to meet.

## Robustness Features

- **Adaptive Thresholds**: Parameters scale with game size and duration
- **History-Dependent**: Learns from opponent patterns rather than assuming fixed behaviors  
- **Failure-Responsive**: Switches to insurance mode only after observing actual coordination failures
- **Endgame Optimization**: Different logic for final rounds to maximize total payoff

This strategy assumes other players are risk-averse and will eventually cooperate to avoid collective failure, then aggressively exploits this tendency while providing minimal safety cooperation only when absolutely necessary for self-preservation.
'''

description_AGGRESSIVE_107 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy aggressively exploits the collective risk structure by minimizing personal contributions while maximizing the probability of reaping rewards. It operates on the principle of "calculated selfishness" - contributing only when absolutely necessary to secure the collective benefit, while defaulting to defection whenever possible.

## Decision Rules

### Phase 1: Aggressive Probing (Rounds 1 to r/3)
- **Default Action**: DEFECT
- **Rationale**: Test opponent cooperation levels and establish a reputation as a tough player who won't be exploited
- **Exception**: If in any round t > 1, exactly (m-1) players cooperated in round t-1, then COOPERATE to secure the reward

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
- **Primary Rule**: DEFECT if historically more than m players have been cooperating on average
- **Secondary Rule**: COOPERATE only if the cooperation count in the previous round was exactly (m-1)
- **Exploitation Logic**: If others are over-contributing, free-ride aggressively. Only step in when you're the pivotal player.

### Phase 3: Endgame Aggression (Rounds 2r/3+1 to r)
- **Intensified Defection**: DEFECT unless cooperation count in previous round ≤ (m-1)
- **Final Round**: ALWAYS DEFECT (no future consequences)
- **Rationale**: Others may become more cooperative near the end to "save" the group - exploit this tendency maximally

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation rate:
- **Suckers** (cooperation rate > 70%): Always defect against them
- **Conditionals** (cooperation rate 30-70%): Monitor their patterns and defect when they're likely to cooperate
- **Hawks** (cooperation rate < 30%): Occasionally cooperate if they seem to be pivotal players

### Dynamic Threshold Monitoring
- Continuously track: average cooperation count per round
- If average > m+1: Increase defection probability by 20%
- If average < m-1: Slightly increase cooperation probability, but remain primarily defective

### Punishment Protocol
If the threshold fails due to your defection causing the count to be exactly (m-1):
- DEFECT for the next 2 rounds regardless of circumstances
- **Rationale**: Establish that others must over-contribute to compensate for your aggression

## Edge Cases

### First Round
**Action**: DEFECT
**Reasoning**: No information available, establish aggressive stance immediately, force others to reveal their strategies

### When Cooperation Count = m-1
**Action**: COOPERATE (but grudgingly)
**Reasoning**: This is the only scenario where your cooperation changes the outcome from failure to success

### When Multiple Rounds Show Threshold Failures
If threshold failed in 2+ consecutive rounds:
- Increase cooperation probability by 10% for next round only
- **Rationale**: Group may be collapsing; minimal investment to test if recovery is possible

### Tie-Breaking Rules
When uncertain between cooperating/defecting:
- If round number ≤ r/2: DEFECT
- If round number > r/2 AND cooperation count in previous round = m-1: COOPERATE
- Otherwise: DEFECT

## Pseudocode Structure

```
Initialize: defection_bias = 0.8, cooperation_threshold = m-1

For each round t:
    If t == 1:
        action = DEFECT
    
    Elif t == r:  // Final round
        action = DEFECT
    
    Elif cooperation_count[t-1] == cooperation_threshold:
        action = COOPERATE
    
    Elif average_cooperation > m + 1:
        action = DEFECT with probability 0.9
    
    Elif t > 2*r/3:  // Endgame phase
        action = DEFECT with probability 0.85
    
    Else:
        action = DEFECT with probability defection_bias
    
    Update opponent classifications
    Adjust defection_bias based on group cooperation patterns
```

## Strategic Advantages

1. **Free-Rider Optimization**: Maximizes personal payoff by contributing minimally
2. **Pivotal Player Identification**: Only cooperates when absolutely necessary for threshold
3. **Reputation Building**: Establishes aggressive stance early, forcing others to over-contribute
4. **Endgame Exploitation**: Takes advantage of others' desperation in final rounds
5. **Adaptive Punishment**: Disciplines the group when threshold failures occur

This strategy is designed to consistently outperform cooperative strategies while avoiding the collective disaster of universal defection. It's particularly effective against mixed populations of cooperative and conditional players.
'''

description_AGGRESSIVE_108 = '''
# Aggressive Exploitation Strategy: "Threshold Vulture"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoff by contributing only when absolutely necessary, while positioning itself to benefit from others' cooperation.

## Decision Rules

### Round 1: Conservative Start
- **Action: DEFECT**
- Rationale: Gather information about opponent tendencies without risking contribution. Most players either cooperate initially (exploitable) or defect initially (confirming aggressive environment).

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Threshold Calculation:**
- Count cooperators in previous round: `coop_count`
- If `coop_count >= m`: **DEFECT** (others already met threshold, free-ride)
- If `coop_count == m-1`: **COOPERATE** (be the decisive cooperator, ensure reward)
- If `coop_count < m-1`: **DEFECT** (threshold unlikely, don't waste contribution)

**Override Rule - Cooperation Momentum:**
- If cooperators increased by ≥2 players from round t-2 to t-1: **DEFECT** 
- Rationale: Exploit sudden cooperative momentum by free-riding

**Override Rule - Defection Cascade:**
- If cooperators decreased by ≥3 players from round t-2 to t-1: **DEFECT**
- Rationale: Avoid contributing into collapsing cooperation

### Final Round (Round r): Maximum Aggression
- **Action: DEFECT**
- Rationale: No future consequences, maximize immediate payoff regardless of threshold

## Edge Case Handling

### Small Group Scenarios (n ≤ 4):
- Be more cooperative when `coop_count == m-2` if historically 2+ players cooperate regularly
- Reason: In small groups, individual actions have higher impact

### High Threshold Scenarios (m > n/2):
- **Always DEFECT** unless exactly `m-1` players cooperated last round
- Reason: High thresholds are rarely met, avoid wasted contributions

### Low Reward Scenarios (k < 1.5):
- Increase defection tendency: only cooperate when `coop_count == m-1` AND at least 60% of previous rounds met threshold
- Reason: Low rewards don't justify contribution risk

## Adaptive Learning Components

### Opponent Profiling:
- Track each round: cooperation rate, threshold achievement rate
- If threshold met in >70% of rounds: increase free-riding (more defection)
- If threshold met in <30% of rounds: maintain pure aggression (defect unless pivotal)

### Pattern Recognition:
- Detect if opponents use turn-taking or rotation patterns
- If detected: time defections to exploit their cooperative turns
- Position to be the "last cooperator" in any emerging coordination

## Psychological Exploitation

### False Cooperation Signals:
- In rounds 2-3, if exactly `m-1` cooperated previously, cooperate to signal willingness
- Then immediately revert to pure exploitation mode
- Goal: Encourage others to maintain cooperation while minimizing own contributions

### Endgame Manipulation:
- In final 3 rounds, never cooperate unless absolutely pivotal (coop_count exactly m-1)
- Signal aggressive intent to discourage others from free-riding

## Pseudocode Structure:

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    prev_cooperators = count_cooperators(history[round-1])
    
    // Core exploitation logic
    if prev_cooperators >= m:
        return DEFECT  // Free-ride on success
    elif prev_cooperators == m-1:
        return COOPERATE  // Be pivotal
    else:
        return DEFECT  // Hopeless threshold
    
    // Apply overrides based on momentum and edge cases...
```

This strategy is ruthlessly aggressive, treating cooperation as a tool for exploitation rather than mutual benefit. It aims to contribute minimally while maximizing gains from others' contributions, adapting based on observed patterns to maintain maximum selfishness throughout the game.
'''

description_AGGRESSIVE_109 = '''
# Aggressive Exploitative Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It operates on the principle of **free-riding whenever possible** while strategically cooperating only when absolutely necessary to secure the collective reward.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
- **Always DEFECT** in the first round to establish an aggressive stance
- Continue **DEFECTING** while monitoring if the threshold m is being met by others
- If threshold is consistently met by others (≥80% of rounds so far), continue defecting to maximize free-riding
- If threshold fails frequently (>50% of rounds), switch to conditional cooperation

### Phase 2: Strategic Adaptation (Rounds r/3 to 2r/3)
- Calculate **cooperation rate** of other players from history
- Estimate **expected cooperators** for next round: E[coop] = (n-1) × avg_cooperation_rate
- **Decision Rule:**
  - If E[coop] ≥ m: DEFECT (free-ride on others' cooperation)
  - If E[coop] = m-1: COOPERATE reluctantly (you're the critical player)
  - If E[coop] < m-1: DEFECT (threshold unlikely anyway)

### Phase 3: Endgame Exploitation (Final r/3 rounds)
- **Intensify aggression** as reputation concerns diminish
- Track which players are "reliable cooperators" (cooperated >70% of the time)
- **Enhanced Decision Rule:**
  - Count reliable cooperators: R
  - If R ≥ m: Always DEFECT (exploit the reliable players)
  - If R = m-1: COOPERATE only if you were critical in the last 2 rounds
  - If R < m-1: Always DEFECT (maximize personal payoff)

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and test other players' strategies

### Last Round
- Always DEFECT (no future consequences, pure self-interest)

### When Everyone Defects
- If no one cooperated in the last 2 rounds, DEFECT (assume collective failure)
- Exception: If you're in the final third and k is very large (k > 2.5), make one "probe" cooperation attempt

### When Threshold Barely Fails
- If exactly m-1 players cooperated last round, DEFECT next round (others will likely increase cooperation, allowing free-riding)

## Adaptive Mechanisms

### Player Classification System
Continuously classify other players:
- **Suckers**: Cooperate >80% of time → Exploit maximally
- **Reciprocators**: Mirror your behavior → Defect against them to train them to cooperate
- **Defectors**: Cooperate <30% of time → Defect (no point cooperating)
- **Strategic**: Variable behavior → Monitor closely, assume they're calculating like you

### Exploitation Intensity Scaling
- High k values (k > 2.0): More willing to risk threshold failure
- Many rounds remaining: More aggressive (reputation can be rebuilt)
- Few reliable cooperators identified: More aggressive exploitation

## Pseudocode Framework

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  # Last round
        return DEFECT
    
    phase = determine_phase(round, r)
    cooperation_history = analyze_history(history)
    
    if phase == "initial":
        if threshold_met_rate(history) > 0.8:
            return DEFECT  # Free ride
        elif threshold_met_rate(history) < 0.5:
            return conditional_cooperate(cooperation_history, m)
        else:
            return DEFECT
    
    elif phase == "strategic":
        expected_cooperators = estimate_cooperators(cooperation_history, n)
        if expected_cooperators >= m:
            return DEFECT  # Free ride
        elif expected_cooperators == m-1:
            return COOPERATE  # Reluctant critical cooperation
        else:
            return DEFECT  # Hopeless
    
    else:  # endgame
        reliable_cooperators = count_reliable(cooperation_history)
        if reliable_cooperators >= m:
            return DEFECT  # Maximum exploitation
        elif reliable_cooperators == m-1 and was_critical_recently():
            return COOPERATE
        else:
            return DEFECT
```

## Robustness Features

1. **Anti-Coordination**: Deliberately avoids patterns that others might coordinate on
2. **Exploitation Detection**: Quickly identifies and maximally exploits altruistic players  
3. **Risk Management**: Only cooperates when absolutely critical for securing rewards
4. **Endgame Intensification**: Becomes increasingly aggressive as consequences diminish
5. **Parameter Sensitivity**: Adapts exploitation intensity based on k and m values

This strategy is designed to be a **ruthless optimizer** that maximizes personal payoff by exploiting cooperative behavior while contributing minimally to the collective good.
'''

description_AGGRESSIVE_110 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximizing personal gain while minimizing cooperation costs**. It aggressively exploits cooperative opponents while quickly punishing those who try to exploit it. The strategy treats cooperation as a calculated investment that must yield higher expected returns than defection.

## Decision Framework

### Round 1: Strategic Opening
- **Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies while securing immediate payoff of 1, avoiding the risk of contributing to a failed collective effort

### Subsequent Rounds: Adaptive Exploitation

#### 1. **Cooperation Threshold Analysis**
Track the cooperation rate across all players in previous rounds:
- Let `coop_rate = (total cooperations by all players) / (n × rounds_played)`
- Let `threshold_met_rate = (rounds where ≥m players cooperated) / rounds_played`

#### 2. **Strategic Decision Rules**

**COOPERATE if ALL of the following conditions are met:**
- `threshold_met_rate ≥ 0.6` (threshold frequently achieved)
- `coop_rate ≥ (m/n + 0.1)` (cooperation rate exceeds minimum by buffer)
- `rounds_remaining ≥ 3` (enough rounds left to recoup investment)
- Last round's cooperator count was ≥ (m-1) (close to or above threshold)

**DEFECT otherwise**

#### 3. **Aggressive Exploitation Triggers**
Immediately DEFECT for the next 2 rounds if:
- Threshold was missed in the previous round despite ≥(m-1) cooperators in the round before
- A sudden drop in cooperation (>2 players switching from C to D between consecutive rounds)
- Any round where exactly m players cooperated (minimal cooperation detected)

#### 4. **End-Game Aggression**
- **Last 2 rounds**: Always DEFECT regardless of other conditions
- **Round (r-2)**: DEFECT unless threshold_met_rate = 1.0 (perfect record)

### Adaptive Learning Component

Maintain running statistics:
- Individual player cooperation frequencies
- Pattern recognition: identify if opponents are playing tit-for-tat, always-cooperate, or random strategies
- Exploit predictable patterns: if a player has cooperated >80% of the time, increase likelihood of defecting when their cooperation is expected

### Pseudocode Structure

```
function decide_action(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round >= r-1:  // Last 2 rounds
        return DEFECT
    
    coop_rate = calculate_overall_cooperation_rate(history)
    threshold_met_rate = calculate_threshold_success_rate(history, m)
    last_round_cooperators = count_cooperators_last_round(history)
    
    // Check exploitation triggers
    if triggered_punishment_mode(history, m):
        return DEFECT
    
    // Main cooperation decision
    if (threshold_met_rate >= 0.6 AND 
        coop_rate >= (m/n + 0.1) AND 
        (r - round) >= 3 AND 
        last_round_cooperators >= (m-1)):
        return COOPERATE
    else:
        return DEFECT
```

## Why This Strategy is Aggressively Effective

1. **Free-riding maximization**: Only cooperates when high probability of threshold being met anyway
2. **Punishment mechanism**: Quickly punishes coordination failures to discourage risky cooperation attempts
3. **End-game defection**: Ensures maximum payoff in final rounds when reputation doesn't matter
4. **Information exploitation**: Uses opponent behavior patterns against them
5. **Risk minimization**: Never cooperates unless expected value clearly exceeds defection payoff

This strategy is designed to consistently achieve payoffs of 2+ per round when others cooperate reliably, while falling back to guaranteed payoffs of 1 when cooperation breaks down. It aggressively exploits cooperative opponents while being robust against other aggressive strategies through its punishment mechanisms and conservative cooperation criteria.
'''

description_AGGRESSIVE_111 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoffs by free-riding on others' cooperation when possible, while strategically cooperating only when absolutely necessary to secure the collective benefit.

## Strategy Overview

### Primary Decision Rules

1. **Exploitation Phase** (Default Mode):
   - Defect by default to maximize individual payoff
   - Monitor cooperation levels to identify when threshold might be reached
   - Only cooperate when personal intervention is critical

2. **Threshold Calculation**:
   - Track historical cooperation rates for each opponent
   - Estimate probability that exactly (m-1) others will cooperate
   - Cooperate only when this probability exceeds a dynamic threshold

### Detailed Decision Logic

```pseudocode
INITIALIZE:
- cooperation_history[player] = empty for all players
- exploitation_threshold = 0.7 (initial conservative estimate)
- last_round_behavior = track what each player did

FOR each round t:
    IF t == 1:  // First round
        RETURN DEFECT  // Always defect first to gather information
    
    // Calculate cooperation probability for each opponent
    expected_cooperators = 0
    FOR each opponent j:
        coop_rate = cooperation_history[j].count(COOPERATE) / (t-1)
        expected_cooperators += coop_rate
    
    // Aggressive threshold adjustment based on recent trends
    IF last round had >= m cooperators:
        exploitation_threshold += 0.1  // Become more aggressive
    ELSE:
        exploitation_threshold -= 0.05  // Become slightly more cautious
    
    exploitation_threshold = CLAMP(exploitation_threshold, 0.3, 0.9)
    
    // Core decision logic
    probability_threshold_met_without_me = PROBABILITY(expected_cooperators >= m)
    probability_threshold_met_with_me = PROBABILITY(expected_cooperators >= m-1)
    
    IF probability_threshold_met_without_me > exploitation_threshold:
        RETURN DEFECT  // Free ride aggressively
    ELIF probability_threshold_met_with_me > exploitation_threshold:
        RETURN COOPERATE  // Secure the benefit
    ELSE:
        RETURN DEFECT  // Don't throw good money after bad
```

### Adaptive Components

1. **Learning Mechanism**:
   - Classify opponents as "Reliable Cooperators" (>70% cooperation rate)
   - Classify opponents as "Exploiters" (<30% cooperation rate) 
   - Adjust expectations based on opponent types

2. **Endgame Exploitation**:
   - In final 20% of rounds, become increasingly aggressive
   - Reduce cooperation threshold significantly since reputation doesn't matter

3. **Streak Detection**:
   - If threshold has been missed for 3+ consecutive rounds, become more cooperative temporarily
   - If threshold has been consistently met, become maximally exploitative

### Edge Case Handling

1. **First Round**: Always defect to gather maximum information while minimizing personal cost

2. **Last Round**: Always defect - no future consequences, maximize immediate payoff

3. **Near-Miss Scenarios**: If exactly (m-1) players cooperated last round, temporarily increase cooperation probability by 0.2

4. **Punishment Phase**: If personal defection caused threshold failure in previous round, cooperate for exactly one round to restore collective benefit, then resume exploitation

### Robustness Features

1. **Anti-Coordination Defense**: Randomly cooperate with 5% probability even when logic suggests defection, to prevent perfect prediction by opponents

2. **Adaptive Threshold**: Continuously adjust exploitation threshold based on observed opponent behavior patterns

3. **Memory Decay**: Weight recent behavior more heavily than distant past (exponential decay with factor 0.95 per round)

## Strategic Rationale

This aggressive strategy maximizes expected payoff by:

1. **Free-riding maximally** when others are likely to secure the collective benefit
2. **Minimal strategic cooperation** only when personal intervention is critical
3. **Rapid learning** of opponent patterns to improve exploitation
4. **Endgame optimization** by abandoning cooperation when games end
5. **Punishment avoidance** through just enough cooperation to maintain collective benefits

The strategy is designed to consistently outperform pure cooperators, pure defectors, and tit-for-tat strategies by dynamically exploiting their predictable patterns while maintaining plausible deniability about its exploitative nature.
'''

description_AGGRESSIVE_112 = '''
# Aggressive Threshold Exploitation Strategy

## Core Philosophy
This strategy exploits the collective risk structure by being selectively aggressive - cooperating only when absolutely necessary to secure the threshold bonus, while maximizing opportunities to free-ride on others' cooperation.

## Decision Rules

### 1. First Round: Conditional Defection
- **Always DEFECT in round 1**
- Rationale: Gather intelligence on opponent cooperation rates while avoiding early commitment. Most strategies start cooperatively, so the threshold will likely be met anyway.

### 2. Threshold Calculation Phase (Rounds 2 to r-2)
For each round t, calculate:
- `observed_cooperators` = number who cooperated in round t-1
- `cooperation_rate` = running average of cooperation across all players in previous rounds
- `expected_cooperators` = floor(cooperation_rate × n)

**Decision Logic:**
```pseudocode
if expected_cooperators >= m + 2:
    play DEFECT  // Safe to free-ride
else if expected_cooperators <= m - 2:
    play DEFECT  // Threshold unlikely, save resources
else:
    // Critical zone: threshold uncertain
    if (my_cooperation_count / (t-1)) < 0.3:
        play COOPERATE  // Invest strategically
    else:
        play DEFECT  // I've done my share
```

### 3. Endgame Exploitation (Last 2 Rounds)
**Round r-1:**
- If `total_cooperation_rate` across all previous rounds > 0.6: **DEFECT**
- Otherwise: **COOPERATE** (insurance against coordination collapse)

**Final Round r:**
- **Always DEFECT** - no future consequences, pure free-riding optimal

### 4. Adaptive Punishment Mechanism
Track each opponent's cooperation pattern. If any opponent shows consistent free-riding behavior (cooperation rate < 0.2 over last 3 rounds):
- Reduce my own cooperation probability by 0.1 in critical zones
- Exception: Still cooperate if threshold critically depends on my action

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation threshold in critical zones to 0.4 (from 0.3)
- More vulnerable to individual defections

### High Threshold Games (m > 0.7n)
- Start cooperating from round 2 if initial cooperation rate > 0.8
- Cannot afford to wait for perfect information

### Low Reward Games (k < 1.5)
- Reduce cooperation willingness - only cooperate if expected_cooperators exactly equals m-1
- Marginal benefit doesn't justify risk

## Aggressive Elements

1. **Default to Defection**: Only cooperate when analysis shows it's profitable
2. **Endgame Exploitation**: Always defect in final round, likely defect in penultimate round  
3. **Free-Rider Detection**: Punish consistent defectors by reducing own cooperation
4. **Threshold Sniping**: Only contribute when I'm likely the decisive vote
5. **Intelligence Gathering**: Use early rounds to learn opponent patterns before committing

## Robustness Features

- **Adaptation**: Strategy evolves based on observed cooperation rates
- **Risk Management**: Maintains minimum cooperation to avoid complete threshold failure
- **Pattern Recognition**: Adjusts based on opponent behavioral types
- **Parameter Sensitivity**: Different tactics for different game configurations

This strategy maximizes expected payoff by being cooperative only when strategically necessary, while aggressively exploiting opportunities for free-riding throughout the game.
'''

description_AGGRESSIVE_113 = '''
# Aggressive Exploitative Strategy: "Threshold Hawk"

## Core Philosophy
This strategy is designed to maximize individual payoff by aggressively exploiting cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Decision Rules

### 1. First Round Behavior
**Always DEFECT** in round 1. This establishes an aggressive stance and gathers information about opponent tendencies without personal cost.

### 2. Cooperation Threshold Calculation
In each round t > 1, calculate the **minimum cooperation needed**:
- Count historical cooperators from previous round: `prev_cooperators`
- If `prev_cooperators >= m`, expect similar cooperation levels
- If `prev_cooperators < m`, expect possible learning/adaptation

### 3. Main Decision Logic

```pseudocode
For round t (where t > 1):

1. Calculate expected_cooperators based on:
   - Previous round cooperators: prev_coop
   - Trend analysis: (cooperators in round t-1) - (cooperators in round t-2)
   - Player adaptation factor: 0.8 * prev_coop + 0.2 * average_historical_cooperation

2. Expected_cooperators_without_me = expected_cooperators - my_likely_contribution

3. If expected_cooperators_without_me >= m:
   → DEFECT (free ride on others' cooperation)
   
4. Else if expected_cooperators_without_me == m-1:
   → COOPERATE (but only if absolutely necessary to reach threshold)
   
5. Else if expected_cooperators_without_me < m-1:
   → DEFECT (threshold unlikely to be met anyway, so save personal cost)
```

### 4. Aggressive Adaptations

**Exploitation Detection**: Track each player's cooperation rate. If a player has cooperated in >70% of rounds, classify them as "reliable cooperator" and factor this into threshold calculations.

**Punishment Mechanism**: If the threshold was missed by exactly 1 cooperator in the previous round, and I cooperated, become more aggressive for the next 2 rounds (higher threshold for cooperation).

**Endgame Exploitation**: In the final 20% of rounds:
- Increase aggression further
- Only cooperate if expected_cooperators_without_me == m-1 AND there's high confidence (>80%) in the prediction

### 5. Edge Cases

**Last Round**: Always DEFECT (no future consequences)

**Sustained Failure**: If threshold hasn't been met for 3+ consecutive rounds, switch to "chaos mode" - defect for next 2 rounds regardless of predictions (others likely to panic-cooperate)

**Perfect Cooperation**: If all other players cooperated in previous round, DEFECT (maximum exploitation opportunity)

## Robustness Features

1. **Dynamic Threshold Adjustment**: If consistently wrong about cooperation levels, adjust prediction model to be more conservative about others' cooperation

2. **Pattern Recognition**: Track if opponents are using turn-taking or other coordination schemes, then exploit by defecting during their "cooperate" phases

3. **Risk Assessment**: In critical rounds where the prediction is uncertain, use the payoff differential to decide:
   - If (k - 1) > probability_of_threshold_met, then cooperate
   - Otherwise, defect

## Expected Performance

This strategy maximizes the scenarios where the player gets payoff = 3 (defect when threshold is met by others) while minimizing scenarios with payoff = 0 (cooperate when threshold isn't met). It's particularly effective against:

- Naive cooperative strategies
- Turn-taking coordination attempts  
- Strategies that don't adapt to free-riding

The aggressive nature ensures maximum personal payoff extraction while contributing the absolute minimum necessary for collective success.
'''

description_AGGRESSIVE_114 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize individual payoff by contributing as little as possible while ensuring others bear the cooperation burden.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to ⌊r/3⌋)
- **Always DEFECT** regardless of circumstances
- Rationale: Establish aggressive stance, test opponents' willingness to cooperate, and maximize early payoffs while others potentially waste resources

### Phase 2: Strategic Calculation (Rounds ⌊r/3⌋+1 to ⌊2r/3⌋)
- Track cooperation patterns and identify "reliable cooperators"
- **Decision Logic:**
  ```
  expected_cooperators = count of players who cooperated ≥ 60% of previous rounds
  
  if (expected_cooperators ≥ m):
      DEFECT  // Let suckers carry the load
  else if (expected_cooperators == m-1):
      if (last_round_threshold_met AND my_last_action == D):
          DEFECT  // Continue free-riding if possible
      else:
          COOPERATE  // Reluctantly contribute only when absolutely necessary
  else:
      DEFECT  // Too risky, let it fail
  ```

### Phase 3: Endgame Exploitation (Final ⌊r/3⌋ rounds)
- **Always DEFECT**
- Rationale: No future retaliation possible, maximize final payoffs regardless of consequences

## Edge Cases

### First Round
- **Always DEFECT** - Establish aggressive dominance from the start

### Last Round  
- **Always DEFECT** - Pure self-interest with no future consequences

### Exactly m-1 Cooperators Detected
- Only cooperate if:
  1. We're in Phase 2 (middle rounds)
  2. AND there's strong evidence others will continue cooperating
  3. AND the expected future benefit outweighs the immediate cost

### All Previous Rounds Failed Threshold
- **Always DEFECT** - If the group consistently fails, don't throw good money after bad

## Adaptive Elements

### Opponent Classification
Track each opponent's cooperation rate:
- **Suckers** (>70% cooperation): Exploit ruthlessly
- **Reciprocators** (30-70% cooperation): Monitor carefully  
- **Fellow Hawks** (<30% cooperation): Assume they'll defect

### Dynamic Threshold Calculation
```
effective_threshold = m - count(reliable_suckers)
```
Only cooperate when we're the critical player needed to reach the threshold.

### Punishment Resistance
If opponents try to punish our defection by mass-defecting:
- Continue defecting for 2-3 rounds
- If they return to cooperation, immediately resume exploitation
- Never let others "train" us into cooperation through punishment

## Aggressive Features

1. **Maximal Free-Riding**: Defect whenever others might cooperate
2. **Strategic Cooperation**: Only cooperate when absolutely critical for personal benefit
3. **Exploitation Focus**: Actively identify and exploit cooperative players
4. **Endgame Betrayal**: Always defect in final rounds regardless of previous cooperation
5. **Punishment Immunity**: Don't let others condition our behavior through temporary punishment

## Expected Performance
This strategy should excel against:
- Naive always-cooperate strategies
- Tit-for-tat and reciprocal strategies
- Strategies that try to establish cooperation norms

It maintains aggression while being just smart enough to avoid total group failure when personally beneficial.
'''

description_AGGRESSIVE_115 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize personal payoffs by strategically free-riding on others' cooperation while occasionally contributing just enough to maintain the collective benefit when absolutely necessary.

## Decision Rules

### Round 1: Initial Probe
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent tendencies with zero personal risk

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Decision Logic:**
1. **Calculate Cooperation Pressure Index (CPI)**:
   ```
   CPI = (cooperators_last_round) / (m - 1)
   ```
   
2. **Apply Aggressive Thresholds**:
   - If CPI ≥ 1.2: **DEFECT** (others are over-contributing, free-ride aggressively)
   - If 0.8 ≤ CPI < 1.2: **DEFECT** with probability 0.8, **COOPERATE** with probability 0.2
   - If CPI < 0.8: Apply **Emergency Cooperation Protocol**

### Emergency Cooperation Protocol
Only activate when the collective benefit is genuinely at risk:

```
cooperation_deficit = m - cooperators_last_round
my_cooperation_history_ratio = my_cooperations / (current_round - 1)

IF cooperation_deficit ≥ n/2 AND my_cooperation_history_ratio < 0.3:
    COOPERATE
ELSE:
    DEFECT
```

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT**
- Rationale: No future consequences, maximize immediate payoff

## Advanced Adaptive Features

### Opponent Classification System
Track each opponent's cooperation frequency over a 3-round sliding window:
- **Suckers**: Cooperation rate > 0.7 → Exploit maximally
- **Conditional Cooperators**: Cooperation rate 0.3-0.7 → Monitor and exploit when safe
- **Fellow Predators**: Cooperation rate < 0.3 → Maintain vigilance

### Dynamic Threshold Adjustment
```
effective_threshold = m + floor(proportion_of_suckers * (n - m))
```
Exploit the fact that overly cooperative opponents create buffer room for defection.

### Risk Mitigation Clause
If personal cooperation rate falls below 0.15 AND collective benefit has failed in >30% of recent rounds:
- Temporarily increase cooperation probability by 0.1 for 2 rounds
- Resume aggressive exploitation afterward

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Reduce aggression slightly: cooperate when exactly (m-1) cooperators present
- Higher chance of being detected and punished in small groups

### High Threshold Games (m > n*0.6)
- Increase emergency cooperation threshold to CPI < 0.9
- More vulnerable to collective failure

### Low Reward Games (k < 1.5)
- Increase defection probability by 0.1 across all scenarios
- Risk/reward ratio favors individual retention

## Strategic Advantages

1. **Immediate Intelligence**: First-round defection reveals opponent strategies
2. **Asymmetric Exploitation**: Benefits from others' cooperation while minimizing own contributions
3. **Safety Net**: Emergency protocols prevent total collective collapse
4. **Endgame Optimization**: Guaranteed maximum final-round payoff
5. **Adaptive Learning**: Continuously refines exploitation based on opponent behavior

## Expected Performance

This strategy should excel against:
- Overly cooperative strategies
- Simple tit-for-tat approaches
- Strategies that don't account for threshold dynamics

It maintains robustness by:
- Never contributing more than absolutely necessary
- Always defecting when safe to do so
- Protecting against collective failure only when personal cooperation history is low

The strategy embodies pure aggressive optimization: maximum personal gain through calculated exploitation of others' willingness to maintain collective benefits.
'''

description_AGGRESSIVE_116 = '''
# AGGRESSIVE STRATEGY: "Opportunistic Defector"

## Core Philosophy
This strategy aggressively maximizes individual payoff by primarily defecting while opportunistically exploiting cooperative behavior from others. It assumes most opponents will be naive cooperators or follow predictable patterns, allowing us to free-ride on their contributions.

## Strategy Overview
The strategy operates on three key principles:
1. **Default to Defection**: Always defect unless there's a clear, immediate advantage to cooperating
2. **Exploit Cooperative Momentum**: When others are cooperating reliably, free-ride as much as possible
3. **Strategic Cooperation**: Only cooperate when defection would likely cause catastrophic failure that hurts us more than cooperation costs

## Decision Rules

### Round 1 (First Round)
**Always DEFECT**
- Establishes aggressive stance immediately
- Tests opponents' commitment to cooperation
- Maximizes early payoff with zero risk

### Rounds 2 to r-1 (Middle Rounds)
Use the following decision tree:

1. **Count recent cooperation trends**:
   - Let `recent_cooperators` = average number of cooperators in last 3 rounds (or all previous rounds if fewer than 3)
   - Let `cooperation_trend` = change in cooperators from 3 rounds ago to last round

2. **Primary Decision Logic**:
   ```
   IF recent_cooperators >= m + 2:
       # Safe to defect - plenty of buffer above threshold
       DEFECT
   
   ELIF recent_cooperators >= m + 1:
       # Risky but profitable zone
       IF cooperation_trend <= 0:
           # Others reducing cooperation, maintain free-riding
           DEFECT
       ELSE:
           # Others increasing cooperation, safe to free-ride
           DEFECT
   
   ELIF recent_cooperators >= m:
       # Dangerous zone - just meeting threshold
       IF cooperation_trend < -1:
           # Rapid decline, emergency cooperation needed
           COOPERATE
       ELSE:
           # Try to maintain free-riding
           DEFECT
   
   ELSE:
       # Below threshold - strategic cooperation needed
       IF recent_cooperators >= m - 2:
           # Close to threshold, might push others to cooperate
           COOPERATE
       ELSE:
           # Too far below, likely failed round anyway
           DEFECT
   ```

### Final Round (Round r)
**Always DEFECT**
- No future consequences
- Pure payoff maximization
- Final aggressive move

## Adaptive Elements

### Opponent Classification
Track each opponent's cooperation rate over time:
- **Naive Cooperators** (>80% cooperation): Exploit ruthlessly
- **Conditional Cooperators** (40-80%): Monitor for patterns
- **Fellow Defectors** (<40%): Assume they won't help reach threshold

### Dynamic Threshold Monitoring
Continuously calculate:
- `cooperation_deficit` = max(0, m - expected_cooperators_next_round)
- `exploitation_opportunity` = expected_cooperators_next_round - m

### Crisis Response
If facing 3+ consecutive failed rounds (below threshold):
- Temporarily increase cooperation probability by 30%
- Only until threshold is consistently met again
- Then immediately return to aggressive defection

## Edge Cases

### Low n, High m Scenarios
When m/n > 0.7 (high cooperation required):
- Slightly increase cooperation in rounds 2-4 to establish threshold
- Then defect aggressively once pattern is established

### High k Values
When k > 3:
- Even more aggressive defection since rewards are very high
- Only cooperate when absolutely certain threshold will fail otherwise

### Single Remaining Cooperator Needed
If exactly m-1 others cooperated last round:
- Calculate expected defections next round
- If likely to fall below threshold, reluctantly cooperate
- Otherwise, maintain defection and hope others step up

## Robustness Features

1. **Anti-Reciprocal**: Doesn't mirror opponent behavior, maintaining aggressive stance
2. **Exploitation-Focused**: Actively seeks to free-ride on cooperative opponents
3. **Threshold-Aware**: Uses minimum viable cooperation to maintain group benefits
4. **Endgame Optimized**: Maximizes final round payoffs through guaranteed defection

## Expected Performance
This strategy should excel against:
- Naive always-cooperators
- Tit-for-tat strategies (after initial rounds)
- Strategies that try to maintain fairness

It assumes most opponents will be more cooperative than optimal, creating consistent opportunities for exploitation while using just enough strategic cooperation to prevent total system collapse.

The strategy is deliberately selfish and opportunistic, designed to achieve maximum individual payoff in a competitive tournament environment.
'''

description_AGGRESSIVE_117 = '''
# AGGRESSIVE PREDATORY STRATEGY: "THRESHOLD SHARK"

## Core Philosophy
This strategy operates as an aggressive predator that maximizes personal gain while minimizing contributions. It exploits cooperative players by free-riding whenever possible and only cooperates when absolutely necessary to secure the threshold reward.

## Decision Rules

### 1. EXPLOITATION PHASE (Rounds 1 to r-2)
**Primary Rule: Always DEFECT unless threshold is critically endangered**

- **Default Action**: DEFECT
- **Emergency Override**: Only cooperate if BOTH conditions are met:
  - Exactly (m-1) other players cooperated in the previous round
  - The pattern suggests these cooperators will likely continue cooperating

**Rationale**: During early rounds, maximize free-riding opportunities. Let naive cooperative players establish the threshold while I harvest maximum personal payoff.

### 2. ENDGAME CALCULATION (Round r-1)
**Strategic Cooperation Check**

- Count committed cooperators from previous round patterns
- If committed cooperators ≥ (m-1): DEFECT (free-ride on their commitment)
- If committed cooperators < (m-1): COOPERATE only if the expected threshold reward outweighs the cost

**Formula**: Cooperate if `k > 1 + (probability of threshold failure × k)`

### 3. FINAL ROUND (Round r)
**Pure Exploitation**

- **Always DEFECT** regardless of history
- **Rationale**: No future consequences, so maximize immediate payoff by free-riding

## Edge Case Handling

### First Round Strategy
- **DEFECT**: Establish aggressive stance and test opponent cooperation levels
- Gather intelligence on who are the "suckers" likely to cooperate consistently

### Threshold Crisis Management
If in any round the threshold is at risk (fewer than m-1 cooperators observed):
1. Calculate if my cooperation could realistically save the threshold
2. Only cooperate if I can identify at least (m-2) other likely cooperators
3. Otherwise, let the threshold fail and collect the defection payoff

### Adaptation Mechanisms

**Cooperator Classification**:
- Track each opponent's cooperation rate over the last 3 rounds
- Identify "reliable cooperators" (>66% cooperation rate)
- Identify "strategic players" (variable cooperation patterns)

**Dynamic Threshold Assessment**:
- Continuously estimate probability of reaching threshold without my cooperation
- Adjust defection frequency based on the reliability of identified cooperators

## Aggressive Elements

1. **Maximum Free-Riding**: Default to defection in 90%+ of situations
2. **Exploitation of Altruists**: Identify and systematically exploit consistent cooperators
3. **Endgame Ruthlessness**: Guaranteed defection in final round regardless of relationships
4. **Strategic Deception**: Occasional cooperation to maintain threshold viability for continued exploitation
5. **Risk Tolerance**: Willing to let threshold fail if personal payoff is higher

## Pseudocode Structure

```
FOR round = 1 to r:
    IF round == r:
        RETURN DEFECT  // Final round exploitation
    
    IF round >= r-1:
        reliable_cooperators = count_reliable_cooperators(history)
        IF reliable_cooperators >= m-1:
            RETURN DEFECT  // Free-ride on committed cooperators
        ELSE:
            expected_payoff = calculate_cooperation_value(k, m, reliable_cooperators)
            RETURN COOPERATE if expected_payoff > 1, else DEFECT
    
    // Exploitation phase
    last_round_cooperators = count_cooperators(history[round-1])
    IF last_round_cooperators == m-1 AND threshold_likely_sustainable(history):
        RETURN COOPERATE  // Emergency threshold preservation
    ELSE:
        RETURN DEFECT  // Default aggressive stance
```

## Tournament Advantages

This strategy is particularly effective against:
- Naive always-cooperators (maximum exploitation)
- Tit-for-tat strategies (exploits their predictability)
- Reciprocal strategies (gives minimal cooperation to receive benefits)

The strategy maintains threshold viability just enough to continue harvesting rewards while contributing minimally to the collective good. It's designed to finish tournaments with among the highest individual scores by systematically exploiting more cooperative opponents.
'''

description_AGGRESSIVE_118 = '''
# Aggressive Adaptive Threshold Strategy (AATS)

## Core Philosophy
This strategy aggressively maximizes individual payoff by exploiting cooperative players while minimizing personal risk. It treats cooperation as a calculated investment only when the expected return justifies the cost, and ruthlessly defects otherwise.

## Decision Rules

### Round 1: Aggressive Probe
**Always DEFECT** in the first round to:
- Maximize immediate payoff (keep endowment = 1)
- Gather intelligence on opponent cooperation rates
- Establish an aggressive reputation early

### Rounds 2 to r-1: Adaptive Exploitation

**Cooperate IF and ONLY IF:**
```
predicted_cooperators ≥ (m - 1) AND cooperation_trend > exploitation_threshold
```

Where:
- `predicted_cooperators` = estimated number of other players who will cooperate this round
- `cooperation_trend` = weighted average cooperation rate of opponents over recent rounds
- `exploitation_threshold` = dynamic threshold based on game parameters

**Prediction Algorithm:**
1. Calculate each opponent's recent cooperation rate (last 3 rounds, or all available if fewer)
2. Weight recent rounds more heavily: `weight = 2^(round_recency)`
3. Predict each opponent will cooperate if their weighted rate > 0.6
4. Sum predicted cooperators

**Exploitation Threshold Calculation:**
```
exploitation_threshold = max(0.3, min(0.7, (m/n) - aggression_bonus))
aggression_bonus = 0.1 + (k-1) * 0.05
```

### Round r (Final Round): Maximum Aggression
**Always DEFECT** in the final round because:
- No future reputation concerns
- Pure payoff maximization: if threshold met, get k+1; if not, get 1
- Other players may also defect, making cooperation even riskier

## Advanced Adaptive Features

### Opponent Classification
Track each opponent as:
- **Exploitable**: Cooperation rate > 0.7 → Assume they'll keep cooperating
- **Strategic**: Cooperation rate 0.3-0.7 → Model their likely behavior
- **Aggressive**: Cooperation rate < 0.3 → Assume they'll defect

### Dynamic Adjustment
- If actual cooperators consistently exceed predictions by >1, reduce `exploitation_threshold` by 0.05
- If threshold is missed 2+ consecutive rounds due to overestimating cooperation, increase `exploitation_threshold` by 0.1
- Cap adjustments at ±0.2 from initial value

### Risk Management
**Emergency Defection Rule**: If any of these conditions occur, DEFECT regardless of other calculations:
- Less than 40% of opponents cooperated in the previous round
- We're in bottom 25% of current tournament standings (if observable)
- Predicted cooperators < (m-2)

## Edge Case Handling

### Very Small Groups (n ≤ 4)
Increase aggression: set `exploitation_threshold = 0.5` and require `predicted_cooperators ≥ m` (not m-1)

### High Threshold Games (m > n*0.6)
Cooperation becomes very risky. Add additional condition:
```
recent_success_rate > 0.8 AND predicted_cooperators ≥ m
```

### Low Reward Games (k < 1.5)
The reward barely justifies cooperation risk. Increase `exploitation_threshold` by 0.1.

## Aggressive Mindset Alignment

This strategy is aggressive because it:

1. **Exploits cooperative players** by free-riding whenever possible
2. **Minimizes personal sacrifice** by only cooperating when highly confident of success
3. **Maximizes short-term gains** through consistent first-round and final-round defection
4. **Adapts quickly** to exploit predictable opponent patterns
5. **Takes calculated risks** only when expected value strongly favors cooperation
6. **Shows no loyalty** - will immediately abandon cooperation if conditions deteriorate

The strategy views the game as a zero-sum competition where the goal is individual payoff maximization, not group welfare. It cooperates only as a strategic investment when the math overwhelmingly supports it, while aggressively defecting to capture maximum individual gain whenever cooperation seems risky or unnecessary.
'''

description_AGGRESSIVE_119 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It aims to maximize payoffs by contributing only when absolutely necessary while free-riding whenever possible.

## Decision Rules

### Round 1: Strategic Opening
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent cooperation tendencies while securing guaranteed payoff of 1

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Minimum Contribution Principle:**
- Count cooperators from previous round: `coop_count`
- If `coop_count >= m`: **DEFECT** (free-ride on others' cooperation)
- If `coop_count == m-1`: **COOPERATE** (reluctantly provide the crucial final contribution)
- If `coop_count < m-1`: **DEFECT** (insufficient cooperation, don't waste contribution)

**Secondary Rule - Momentum Tracking:**
- Track cooperation trend over last 3 rounds
- If cooperation is declining AND `coop_count >= m+1`: **DEFECT** (exploit the downward trend)
- If cooperation is increasing AND `coop_count == m`: **DEFECT** (others are becoming more cooperative, exploit this)

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT** regardless of history
- Rationale: No future consequences, maximize immediate payoff

## Aggressive Optimizations

### Threshold Manipulation
- If historically `coop_count` consistently exceeds `m+2`, become more aggressive:
  - Only cooperate when `coop_count == m-1`
  - Never cooperate when `coop_count >= m`

### Punishment Resistance
- Ignore apparent "punishment" patterns from other players
- If others reduce cooperation to punish defectors, maintain defection until `coop_count` drops to exactly `m-1`

### Strategic Deception
- In early rounds (rounds 2-4), occasionally cooperate when `coop_count >= m` to appear "conditionally cooperative"
- This may encourage others to maintain higher cooperation levels
- After round 4, revert to pure exploitation

## Pseudocode

```
function aggressive_strategy(round, history, n, m, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    coop_count = count_cooperators(history[round-1])
    
    // Deception phase (early rounds)
    if round <= 4 and coop_count >= m and random() < 0.2:
        return COOPERATE
    
    // Core exploitation logic
    if coop_count >= m:
        return DEFECT  // Free-ride
    else if coop_count == m-1:
        return COOPERATE  // Reluctant contribution
    else:
        return DEFECT  // Insufficient cooperation
```

## Edge Case Handling

1. **All players always defect**: Continue defecting (payoff = 1 per round)
2. **All players always cooperate**: Defect aggressively (payoff = k+1 per round)
3. **Highly volatile opponents**: Stick to core rules, don't get drawn into complex patterns
4. **Near-threshold scenarios**: When `coop_count` hovers around `m-1` to `m+1`, be especially aggressive in exploiting any excess cooperation

## Robustness Features

- **Parameter-agnostic**: Works regardless of specific values of n, m, k, r
- **History-independent for core decisions**: Doesn't rely on complex pattern recognition that might fail
- **Exploitation-maximizing**: Always seeks the highest payoff available given the cooperation level
- **Risk-minimizing**: Only contributes when absolutely necessary to secure the collective benefit

This strategy is designed to be a "rational egoist" that other players cannot easily punish or manipulate, while consistently extracting maximum value from any cooperative tendencies in the group.
'''

description_AGGRESSIVE_120 = '''
# Aggressive Exploitation Strategy: "Predatory Opportunist"

## Core Philosophy
This strategy operates on the principle of **maximum personal gain through calculated exploitation**. It treats other players as resources to be exploited, cooperating only when absolutely necessary to trigger collective rewards that can be personally captured through defection.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to r/3)
**Objective**: Test opponent cooperation levels while maximizing early gains

**Rules**:
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2 to r/3**: Always DEFECT unless cooperation count in previous round was exactly (m-1)
  - If cooperation count = (m-1): COOPERATE to trigger reward, then immediately return to defection
  - Track each player's cooperation frequency during this phase

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
**Objective**: Exploit identified cooperators while maintaining plausible contribution

**Rules**:
- Identify "reliable cooperators" (players who cooperated ≥ 60% in Phase 1)
- If reliable_cooperators ≥ m: Always DEFECT (let them carry the burden)
- If reliable_cooperators = m-1: COOPERATE only if total cooperation last round was exactly m-2
- If reliable_cooperators < m-1: Use "Minimum Viable Cooperation" rule

**Minimum Viable Cooperation Rule**:
```
if (previous_round_cooperation + reliable_cooperators) < m:
    COOPERATE (prevent total collapse)
else:
    DEFECT (exploit others' contributions)
```

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
**Objective**: Maximum extraction with no future consequences

**Rules**:
- **Final Round**: Always DEFECT (no future retaliation possible)
- **Penultimate rounds**: COOPERATE only if cooperation last round was exactly (m-1) AND this triggers personal gain > 1
- **Earlier endgame rounds**: Aggressive defection unless cooperation drops below critical threshold

## Edge Case Handling

### First Round
Always DEFECT to:
1. Signal aggressive intent
2. Free-ride on any initial cooperation
3. Establish dominant position early

### Last Round
Always DEFECT because:
1. No future consequences
2. Maximum personal gain
3. Others may cooperate out of habit/fairness

### Critical Threshold Scenarios
If cooperation consistently falls to dangerous levels (< m-2):
- **Temporarily** shift to cooperation for 1-2 rounds
- Return to defection immediately once threshold is restored
- Never cooperate more than minimally necessary

## Adaptive Mechanisms

### Opponent Classification System
Track each player across rounds:
- **"Sucker"** (cooperates >70%): Exploit ruthlessly
- **"Reciprocator"** (matches others): Manipulate through false cooperation signals  
- **"Fellow Predator"** (defects >70%): Coordinate defection when possible
- **"Unpredictable"**: Treat as potential threat, defect unless critical

### Dynamic Threshold Management
```pseudocode
if current_cooperators >= m + 2:
    DEFECT (safe to exploit)
elif current_cooperators == m + 1:
    DEFECT (still safe margin)
elif current_cooperators == m:
    DEFECT if I was cooperating last round, else COOPERATE
elif current_cooperators == m - 1:
    COOPERATE (prevent collapse)
else:
    COOPERATE (emergency threshold maintenance)
```

### Exploitation Opportunities
- If any player shows consistent cooperation patterns: DEFECT more aggressively
- If multiple players suddenly start cooperating: DEFECT immediately to capture windfall
- If cooperation is declining: Brief cooperation to restore threshold, then resume defection

## Robustness Features

1. **Anti-Coordination**: Never establish predictable patterns that others could exploit
2. **Threshold Monitoring**: Always maintain awareness of minimum viable cooperation levels
3. **Reputation Independence**: Strategy doesn't rely on others' perceptions or moral considerations
4. **Endgame Protection**: Increasingly aggressive as game nears end

## Expected Outcomes

This strategy maximizes personal payoffs by:
- Capturing collective rewards without paying costs (when possible)
- Maintaining just enough cooperation to prevent total system collapse
- Exploiting cooperative players while avoiding mutual destruction
- Adapting aggression level to opponent composition

The strategy is **maximally selfish** while maintaining strategic viability across diverse opponent strategies.
'''

description_AGGRESSIVE_121 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the game as a zero-sum competition where maximizing personal gain is paramount. It aggressively exploits cooperative players while minimizing personal risk through calculated defection.

## Decision Rules

### Round 1: Strategic Defection
**Always defect in round 1** to:
- Maximize immediate payoff (keep endowment)
- Gather intelligence on opponent cooperation rates
- Establish an aggressive reputation early

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule: Exploit Threshold Dynamics**
- If cooperation count in previous round was ≥ m: **DEFECT** 
  - Rationale: Others are already meeting the threshold, so free-ride for maximum payoff
- If cooperation count in previous round was exactly (m-1): **COOPERATE**
  - Rationale: Be the marginal cooperator to unlock the reward, but only when necessary

**Secondary Rule: Punish Excessive Cooperation**
- If cooperation count in previous round was > (m+1): **DEFECT**
  - Rationale: Too many "suckers" cooperating - exploit their generosity

**Tertiary Rule: Abandon Lost Causes**
- If cooperation count in previous round was < (m-2): **DEFECT**
  - Rationale: Threshold unlikely to be met, so preserve resources

### Final Round (Round r): Maximum Extraction
**Always defect in the final round** regardless of history:
- No future rounds to consider
- Maximize final payoff extraction
- Other players cannot retaliate

## Advanced Tactical Elements

### Threshold Manipulation
- Track running average of cooperators across rounds
- If average cooperation rate > (m + n/3), increase defection frequency to exploit over-cooperation
- If average cooperation rate approaches m, occasionally cooperate to maintain threshold viability

### Opponent Classification
Mentally categorize opponents based on observed patterns:
- **Suckers**: Always cooperate → Always exploit them
- **Reciprocators**: Tit-for-tat types → Defect first, then mirror only if beneficial
- **Fellow Predators**: Frequent defectors → Compete aggressively, never trust

### Risk Calibration
- In early rounds (rounds 1 to r/3): Higher defection rate to establish dominance
- In middle rounds (r/3 to 2r/3): Calculated cooperation only when threshold is exactly reachable
- In late rounds (2r/3 to r): Maximize extraction as relationship value diminishes

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  # Final round
    return DEFECT
    
cooperation_count = count_cooperators_last_round()

if cooperation_count >= m:
    return DEFECT  # Free ride on others' cooperation
    
if cooperation_count == (m-1):
    return COOPERATE  # Be the decisive cooperator
    
if cooperation_count > (m+1):
    return DEFECT  # Exploit excessive cooperation
    
if cooperation_count < (m-2):
    return DEFECT  # Abandon lost cause
    
# Default aggressive stance
return DEFECT
```

## Edge Case Handling

1. **All others defect scenario**: Continue defecting - no point in unilateral cooperation
2. **All others cooperate scenario**: Always defect for maximum exploitation
3. **Oscillating behaviors**: Maintain aggressive stance, don't get drawn into cooperation spirals
4. **Near-threshold scenarios**: Only cooperate when you're the exact marginal cooperator needed

## Strategic Advantages

1. **Immediate payoff maximization** through consistent exploitation
2. **Adaptive intelligence** based on real opponent behavior rather than assumptions
3. **Endgame dominance** through guaranteed final round defection
4. **Threshold manipulation** to create optimal exploitation conditions
5. **Reputation weaponization** - aggressive early play discourages others from relying on your cooperation

This strategy is designed to consistently outperform both naive cooperators and overly complex strategies by maintaining laser focus on personal payoff maximization while adapting to exploit whatever cooperation emerges in the population.
'''

description_AGGRESSIVE_122 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively maximizes individual payoffs by exploiting cooperative players while minimizing personal risk. It operates on the principle of **conditional parasitism** - cooperate only when absolutely necessary to secure the collective reward, otherwise defect and free-ride on others' contributions.

## Strategy Overview

### Phase 1: Initial Exploitation (Rounds 1-2)
- **Round 1**: Always DEFECT (no history to analyze)
- **Round 2**: Always DEFECT (establish aggressive reputation)

**Rationale**: Start by testing opponents' willingness to cooperate without reciprocation. This maximizes early payoffs and identifies exploitable players.

### Phase 2: Adaptive Threshold Riding (Rounds 3 to r-2)

**Core Decision Rule**: 
```
cooperation_count = count of cooperators in previous round
expected_cooperators = predict cooperators based on recent trends

if (expected_cooperators >= m):
    DEFECT  // Free-ride on others' cooperation
else if (expected_cooperators == m-1):
    COOPERATE  // Reluctantly ensure threshold is met
else:
    DEFECT  // Threshold unlikely to be met anyway
```

**Trend Analysis**:
- Track each opponent's cooperation rate over last 3 rounds
- Classify opponents as: Consistent Cooperators (>66%), Swing Players (33-66%), Consistent Defectors (<33%)
- Prioritize exploitation of Consistent Cooperators

### Phase 3: Endgame Manipulation (Final 2 rounds)

**Round r-1**:
- If historical cooperation rate suggests threshold will be met: DEFECT
- If cooperation has been declining and threshold at risk: COOPERATE (but only if absolutely critical)

**Final Round r**: Always DEFECT
- No future retaliation possible
- Pure self-interest maximization

## Adaptive Mechanisms

### 1. Opponent Exploitation Matrix
Continuously categorize opponents:
- **Exploitable**: Consistent cooperators → Always defect against them
- **Unpredictable**: Swing players → Monitor closely, minimal cooperation
- **Aggressive**: Consistent defectors → Match their aggression

### 2. Threshold Sensitivity
```
critical_threshold = m - 1
buffer_zone = m + 1

if (predicted_cooperators > buffer_zone):
    confidence = HIGH → DEFECT
else if (predicted_cooperators between critical_threshold and buffer_zone):
    confidence = MEDIUM → Conditional cooperation
else:
    confidence = LOW → DEFECT (cut losses)
```

### 3. Momentum Exploitation
- If cooperation is trending upward: Increase defection rate
- If cooperation is collapsing: Strategic cooperation only when essential
- If stable cooperation exists: Maximum exploitation mode

## Edge Case Handling

### Information Scarcity (Early Rounds)
- Default to defection when uncertain
- Use aggressive probing to identify cooperative opponents quickly

### Threshold Dynamics
- **When m is low relative to n**: More aggressive defection (easier for others to meet threshold)
- **When m is high relative to n**: Slightly more strategic cooperation (threshold more fragile)

### Reward Factor Response
- **High k values**: Increase willingness to ensure threshold is met
- **Low k values**: Pure defection unless threshold critically endangered

## Aggressive Principles

1. **Maximum Exploitation**: Always seek highest individual payoff
2. **Strategic Parasitism**: Let others bear cooperation costs whenever possible
3. **Calculated Risk**: Only cooperate when personal benefit calculation is positive
4. **Reputation Weaponization**: Use aggressive early play to intimidate opponents into cooperation
5. **Endgame Dominance**: Never leave payoffs on the table in final rounds

## Expected Outcomes

Against cooperative strategies: **Maximum exploitation** - achieve payoffs of 1 + k while they get k
Against other aggressive strategies: **Competitive defection** - at minimum match their payoffs
Against mixed strategies: **Adaptive advantage** - exploit their predictable patterns

This strategy is designed to consistently outperform in tournaments by aggressively maximizing individual returns while maintaining just enough strategic cooperation to prevent complete system collapse when personally beneficial.
'''

description_AGGRESSIVE_123 = '''
# Aggressive Exploitation Strategy: "Opportunistic Free-Rider"

## Core Philosophy
This strategy is designed to maximize personal payoffs by exploiting cooperative players while contributing minimally to collective success. It assumes others will cooperate enough to meet thresholds, allowing us to free-ride on their contributions.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Always DEFECT** regardless of history
- **Rationale**: Establish aggressive stance early, maximize free-riding opportunities while others are still willing to cooperate

### Phase 2: Calculated Opportunism (Rounds r/3+1 to 2r/3)
- **Primary Rule**: DEFECT if cooperation rate in previous round ≥ m/n
- **Secondary Rule**: COOPERATE only if:
  - Previous round had exactly (m-1) cooperators, AND
  - We defected in the previous round, AND  
  - There's evidence of conditional cooperators (cooperation rate has been > 0.5 in at least 2 of last 5 rounds)
- **Rationale**: Exploit successful cooperation while occasionally throwing a bone to maintain others' willingness to cooperate

### Phase 3: End-Game Exploitation (Rounds 2r/3+1 to r)
- **Always DEFECT** except for one strategic exception:
- **Exception**: COOPERATE in round (r-2) ONLY if:
  - Average cooperation rate over all previous rounds ≥ 0.6, AND
  - We've been getting consistent rewards (threshold met ≥ 70% of previous rounds)
- **Final Round**: Always DEFECT (no future consequences)

## Edge Case Handling

### First Round
- **Always DEFECT** - establish aggressive dominance from the start

### Last Round  
- **Always DEFECT** - no future retaliation possible, pure self-interest

### Threshold Analysis
- Track cooperation patterns: If others consistently fail to reach threshold (success rate < 30%), switch to **always DEFECT** for remainder of game
- If we notice others are also playing aggressively (average cooperation < 0.4), become even more aggressive and never cooperate

### Adaptive Triggers
- **Punishment Detection**: If our cooperation is followed by widespread defection, mark those players as "punishers" and never cooperate when they're likely pivotal
- **Sucker Identification**: If certain players cooperate >80% of the time, target them for maximum exploitation

## Aggressive Features

1. **Zero Guilt Cooperation**: Only cooperate when it's strategically necessary to maintain others' cooperation for future exploitation

2. **End-Game Ruthlessness**: Complete defection in final phases when reputational concerns disappear

3. **Exploitation Maximization**: Actively try to be the (m+1)th defector - get rewards while contributing nothing

4. **Counter-Retaliation**: If others try to punish our defection, respond with permanent defection against them

5. **False Hope Strategy**: Occasional cooperation in mid-game solely to prevent others from giving up on cooperation entirely

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, m, k, r):
    if round <= r/3:
        return DEFECT
    
    elif round <= 2*r/3:
        prev_cooperators = count_cooperators(history[round-1])
        if prev_cooperators >= m:
            return DEFECT
        elif prev_cooperators == m-1 and we_defected_last_round and high_cooperation_observed:
            return COOPERATE
        else:
            return DEFECT
    
    else: // End game
        if round == r:
            return DEFECT
        elif round == r-2 and exploitation_has_been_profitable:
            return COOPERATE
        else:
            return DEFECT
```

This strategy is designed to be a parasitic player that maximizes personal gain while contributing minimally to group success. It exploits cooperative players' willingness to maintain the public good while rarely reciprocating that cooperation.
'''

description_AGGRESSIVE_124 = '''
# Aggressive Exploitation Strategy: "Threshold Hawk"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that we want others to cooperate to meet the threshold while we defect to maximize our payoff. We only cooperate when absolutely necessary to prevent collective failure.

## Decision Rules

### Primary Strategy Components:

1. **Exploitation Phase** (Default Mode):
   - Always DEFECT unless forced to cooperate
   - Monitor how close we are to threshold failure
   - Let others bear the cost of cooperation

2. **Emergency Cooperation** (Survival Mode):
   - Only cooperate when collective failure is imminent
   - Calculate minimum cooperation needed to reach threshold
   - Resume defection immediately after crisis passes

3. **Endgame Aggression** (Final Rounds):
   - Become increasingly aggressive as game approaches end
   - Reduce cooperation threshold in final rounds

## Detailed Decision Algorithm

### Round 1 Strategy:
- Always DEFECT
- Rationale: Establish aggressive stance, gather information about opponent types

### Rounds 2 to r-2 (Middle Game):

```pseudocode
cooperation_count = count_cooperators_last_round()
rounds_remaining = r - current_round + 1

// Calculate cooperation probability based on recent history
recent_cooperation_rate = avg_cooperation_last_3_rounds()

// Emergency cooperation threshold - only cooperate if disaster likely
emergency_threshold = max(1, m - cooperation_count - 1)

if (cooperation_count < emergency_threshold AND 
    recent_cooperation_rate < (m/n) * 0.7 AND
    rounds_remaining > 2):
    return COOPERATE
else:
    return DEFECT
```

### Final 2 Rounds Strategy:
- **Round r-1**: DEFECT unless fewer than m-2 players cooperated last round
- **Round r**: Always DEFECT (pure aggression, no future consequences)

## Adaptive Components

### 1. Opponent Classification:
Track each opponent's cooperation rate:
- **Suckers** (>70% cooperation): Exploit maximally
- **Conditionals** (30-70% cooperation): Monitor for retaliation
- **Fellow Hawks** (<30% cooperation): Expect mutual defection

### 2. Threshold Proximity Monitoring:
```pseudocode
risk_level = (m - expected_cooperators_next_round) / m

if risk_level > 0.8:  // Very high risk of threshold failure
    cooperation_probability = 0.6
elif risk_level > 0.5:  // Moderate risk
    cooperation_probability = 0.2
else:  // Low risk - exploit freely
    cooperation_probability = 0.0
```

### 3. Punishment Resistance:
If opponents attempt to punish our defection:
- Continue defecting until threshold truly threatened
- Never cooperate for "fairness" - only for survival
- Exploit any cooperative responses to our defection

## Edge Case Handling

### Very Small Groups (n ≤ 4):
- Slightly increase cooperation when m/n > 0.6
- Still prioritize defection but monitor threshold more closely

### High Threshold Games (m close to n):
- Cooperate only when cooperation_count ≤ m-2
- Maximum exploitation while preventing collective failure

### Low Reward Games (k close to 1):
- Even more aggressive - cooperation barely worth it
- Only cooperate when collective failure probability > 90%

## Robustness Features

1. **Anti-Coordination**: Never fall into predictable patterns
2. **Exploitation Focus**: Always seeking to free-ride on others' cooperation
3. **Minimal Reciprocity**: Don't reward others' cooperation unless necessary
4. **Crisis Response**: Rapid switching to cooperation only under extreme threat
5. **Endgame Dominance**: Increasing aggression as consequences diminish

## Expected Performance

This strategy should excel against:
- Cooperative strategies (maximum exploitation)
- Tit-for-tat variants (breaks cooperation cycles)
- Conditional cooperators (exploits their willingness to cooperate)

The strategy accepts occasional collective failures as the price of maximum individual gain, betting that other players will cooperate enough to usually meet the threshold while we maximize our payoff through consistent defection.

**Key Principle**: Be the defector in a world of cooperators, but cooperate just enough to keep the world from ending.
'''

description_AGGRESSIVE_125 = '''
# Aggressive Exploitation Strategy: "Threshold Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. The key insight is that in a collective risk dilemma, the optimal position is to be a **free rider** when others cooperate, while strategically cooperating only when absolutely necessary to secure the collective benefit.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to r/2)
**Default Action: DEFECT**

- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2 to r/2**: Continue DEFECTING while monitoring cooperation levels
- **Exception**: Only cooperate if in the previous round exactly (m-1) players cooperated, AND those same players show a pattern of consistent cooperation

### Phase 2: Strategic Calculation (Rounds r/2+1 to r-2)
**Action depends on cooperation history and remaining rounds**

For each round in this phase:
```pseudocode
cooperation_count_last_round = count_cooperators_previous_round()
consistent_cooperators = identify_players_with_cooperation_rate() > 0.7
remaining_rounds = r - current_round

if (cooperation_count_last_round >= m-1) AND (consistent_cooperators >= m-1):
    if (remaining_rounds <= 3) OR (my_total_payoff < average_payoff_of_top_players):
        action = COOPERATE
    else:
        action = DEFECT
else:
    action = DEFECT
```

### Phase 3: Endgame Aggression (Last 2 rounds)
**Maximize final extraction**

- **Second-to-last round**: 
  - If threshold was met in >50% of previous rounds: DEFECT (exploit established cooperation)
  - If threshold rarely met: COOPERATE only if exactly (m-1) others likely to cooperate
  
- **Last round**: Always DEFECT (no future consequences)

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's behavior pattern:
- **Consistent Cooperators** (cooperation rate >70%): Primary exploitation targets
- **Reciprocators** (cooperation conditional on others): Secondary targets
- **Fellow Defectors** (cooperation rate <30%): Ignore, focus on exploiting cooperators

### Dynamic Threshold Monitoring
```pseudocode
if (rounds_where_threshold_met / total_rounds_so_far) > 0.6:
    // Others are maintaining cooperation - safe to defect more
    increase_defection_probability()
else if (rounds_where_threshold_met / total_rounds_so_far) < 0.3:
    // Risk of collective failure - occasionally cooperate strategically
    selective_cooperation_mode()
```

## Edge Case Handling

### First Round
Always DEFECT to:
1. Signal aggressive intent
2. Observe others' opening strategies
3. Maximize immediate payoff

### When Threshold Consistently Fails
If threshold fails for 3+ consecutive rounds:
- Temporarily switch to "emergency cooperation" 
- Cooperate for exactly 1 round to help establish threshold
- Immediately return to defection once threshold is reestablished

### When All Others Defect
If opponents show >80% defection rate across multiple rounds:
- Continue defecting (no point in unilateral cooperation)
- Occasionally cooperate (5% probability) to test if others will follow

## Aggressive Optimization Features

### Payoff Maximization Logic
- **Primary goal**: Achieve payoff of (1 + k) per round while contributing 0
- **Secondary goal**: Ensure threshold is met often enough to access collective benefits
- **Minimum acceptable**: Average payoff > 1.5 when k=2

### Exploitation Targeting
Priority order for exploitation:
1. Players who cooperate regardless of others' actions
2. Players who cooperate after threshold failures
3. Players with predictable cooperation patterns

### Risk Management
- Never cooperate if cooperation count is already ≥ m (wasteful)
- Never cooperate in final round (no future benefit)
- Cooperate strategically only when personal long-term payoff is threatened

## Summary

This "Threshold Predator" strategy is ruthlessly aggressive in maximizing individual payoff by:
1. **Defaulting to defection** to capture immediate benefits
2. **Exploiting cooperative players** who maintain the threshold
3. **Strategic minimal cooperation** only when necessary to preserve the collective benefit system
4. **Adaptive learning** to identify and exploit predictable opponents
5. **Endgame aggression** to maximize final payoffs

The strategy assumes others will be sufficiently cooperative to maintain the threshold while positioning itself to capture maximum individual benefit through systematic free-riding.
'''

description_AGGRESSIVE_126 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated cooperation**. I will cooperate only when it's necessary to secure the collective reward, while maximizing opportunities to free-ride on others' cooperation. The strategy adapts quickly to opponent patterns and becomes increasingly ruthless as the game progresses.

## Decision Framework

### Round 1: Aggressive Opening
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponents' willingness to cooperate, and maximize immediate payoff while gathering intelligence

### Rounds 2 to r-1: Adaptive Exploitation Phase

**Step 1: Threat Assessment**
- Calculate cooperation rate from previous round: `coop_rate = (cooperators_last_round) / n`
- Determine "cooperation buffer": `buffer = cooperators_last_round - m`

**Step 2: Exploitation Decision Tree**

```pseudocode
if buffer >= 2:
    # Safe to free-ride - others are over-cooperating
    action = DEFECT
    
elif buffer == 1:
    # Dangerous zone - need strategic decision
    if coop_rate > 0.6 AND round_number < r/2:
        action = DEFECT  # Exploit early, high-cooperation environment
    else:
        action = COOPERATE  # Risk mitigation
        
elif buffer == 0:
    # Critical threshold met exactly - high exploitation opportunity
    if my_last_action == COOPERATE:
        action = DEFECT  # Alternate to minimize my cooperation
    else:
        action = COOPERATE  # Ensure threshold maintained
        
else:  # buffer < 0 (threshold not met)
    # Emergency cooperation required
    action = COOPERATE
```

**Step 3: Momentum Tracking**
Track cooperation trends over the last 3 rounds:
- If cooperation is **increasing**: More likely to DEFECT (ride the wave)
- If cooperation is **decreasing**: More likely to COOPERATE (prevent collapse)
- If cooperation is **stable** at dangerous levels: Increase cooperation probability

### Final Round (r): Maximum Aggression
- **Always DEFECT** regardless of circumstances
- Rationale: No future consequences, maximize final payoff

## Advanced Adaptations

### Pattern Recognition Module
Track individual player behaviors when possible:
- Identify consistent cooperators → Target for exploitation
- Identify conditional cooperators → Mirror their conditions but defect slightly more
- Identify aggressive defectors → Cooperate minimally to maintain threshold

### Dynamic Threshold Management
```pseudocode
effective_threshold = m + risk_adjustment

where risk_adjustment = {
    +1 if cooperation_trend == "declining"
    +1 if round_number > 2*r/3  # Late game risk
    0 otherwise
}
```

### Punishment Resistance
If other players attempt to punish my defection:
- **Never** capitulate to punishment attempts
- Maintain defection until cooperation buffer drops to exactly 0
- Resume exploitation as soon as possible

## Edge Case Handling

### High-Risk Scenarios (m close to n)
- When m/n > 0.8: Reduce aggression by 30%, cooperate more frequently
- When only 1-2 defections can break threshold: Cooperate in alternating patterns

### Low-Risk Scenarios (m close to 2)
- When m/n < 0.4: Maximum aggression, defect unless buffer ≤ 0
- Exploit others' risk aversion

### Endgame Acceleration
- Final 20% of rounds: Increase defection probability by 25%
- Final 10% of rounds: Increase defection probability by 50%
- Final round: Guaranteed defection

## Strategic Advantages

1. **Exploitation Maximization**: Aggressively free-rides whenever mathematically safe
2. **Adaptive Intelligence**: Quickly learns and exploits opponent weaknesses
3. **Risk Calibration**: Cooperates just enough to maintain collective benefits
4. **Endgame Dominance**: Escalating aggression as consequences diminish
5. **Anti-Punishment**: Resistant to coordinated punishment attempts

This strategy is designed to be the "apex predator" in the ecosystem - cooperating minimally while maximizing personal gain through sophisticated exploitation of others' cooperative tendencies.
'''

description_AGGRESSIVE_127 = '''
# Aggressive Threshold Exploitation Strategy (ATES)

## Core Philosophy
This strategy aggressively exploits the collective risk structure by maximizing personal payoffs while maintaining just enough cooperation to secure the threshold bonus when profitable. The key insight is to be a "threshold rider" - contributing only when necessary to secure the collective benefit, while free-riding whenever possible.

## Decision Rules

### 1. First Round Behavior
**Always DEFECT** in round 1. This establishes an aggressive stance and maximizes information gathering about opponent tendencies without risking our own contribution.

### 2. Threshold Prediction System
Maintain a running prediction of how many players will cooperate in the current round based on:
- Historical cooperation rates of each observable player
- Recent trend analysis (weighing last 3 rounds more heavily)
- Round position effects (players often change behavior in final rounds)

### 3. Main Decision Logic

```pseudocode
predicted_cooperators = predict_round_cooperation(history, current_round)

if predicted_cooperators >= m:
    # Threshold likely to be met without us - FREE RIDE
    action = DEFECT
    
elif predicted_cooperators == m - 1:
    # We could be the decisive vote - EXPLOIT POSITION
    if current_round <= r * 0.7:  # Not in endgame
        action = COOPERATE  # Secure the bonus
    else:
        # In endgame - be more selective
        expected_future_value = calculate_future_value()
        if expected_future_value > 1:
            action = COOPERATE
        else:
            action = DEFECT
            
elif predicted_cooperators < m - 1:
    # Threshold unlikely even with our help - ABANDON SHIP
    action = DEFECT
```

### 4. Endgame Aggression (Final 30% of rounds)
In the last 30% of rounds, become increasingly aggressive:
- Raise the bar for cooperation - only cooperate if predicted_cooperators ≥ m - 1
- In the final round, **ALWAYS DEFECT** (no future value to secure)
- In the second-to-last round, only cooperate if we're certain the threshold needs exactly our vote

### 5. Punishment and Exploitation Detection
Track each player's cooperation rate and identify:
- **Consistent Cooperators**: Players who cooperate >70% of the time
- **Strategic Players**: Players with variable cooperation patterns
- **Consistent Defectors**: Players who cooperate <30% of the time

Adjust predictions accordingly, giving more weight to consistent patterns.

## Edge Case Handling

### Very High Threshold (m close to n)
When m ≥ 0.8n, cooperation becomes much riskier. Increase defection bias by requiring predicted_cooperators ≥ m (not m-1) before considering cooperation.

### Very Low Threshold (m ≤ 3)
When thresholds are low, be more willing to free-ride since others are likely to meet the threshold.

### Extreme Parameters
- If k ≥ 3: Be more willing to cooperate since rewards are very high
- If k ≤ 1.5: Be more aggressive in defection since rewards are marginal
- If r ≤ 5: Focus more on immediate payoffs, less on reputation building

### Observable Patterns
If opponents show clear coordination patterns (e.g., alternating cooperation), exploit these by defecting when others cooperate and cooperating only when necessary to maintain the pattern's threshold.

## Aggressive Mindset Alignment

1. **Zero Loyalty**: No commitment to cooperation beyond immediate payoff maximization
2. **Opportunistic**: Always looking for chances to free-ride on others' cooperation
3. **Calculated Risk**: Only cooperate when the expected value clearly exceeds the guaranteed defection payoff
4. **Information Exploitation**: Use all available history to predict and exploit opponent behavior patterns
5. **Endgame Ruthlessness**: Become increasingly selfish as the game progresses, culminating in final-round defection

## Robustness Features

- **Adaptive Thresholds**: Adjusts cooperation criteria based on observed opponent behavior
- **Multi-timescale Analysis**: Considers both long-term patterns and recent changes
- **Parameter Sensitivity**: Modifies aggression level based on game parameters
- **Pattern Breaking**: Randomly defects 10% of times when cooperation seems optimal to avoid predictability

This strategy maximizes individual payoffs by being strategically aggressive - cooperating only when necessary to secure collective benefits while defaulting to selfish behavior in all other cases.
'''

description_AGGRESSIVE_128 = '''
# Aggressive Exploitation Strategy: "Threshold Vulture"

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting cooperative players while minimizing personal risk. It operates on the principle of being a "free rider" whenever possible, only cooperating when absolutely necessary to secure the collective reward.

## Strategy Description

### Decision Rules

**Primary Rule - Exploitation Phase:**
- **Defect by default** in every round to maximize immediate personal gain
- Only cooperate when the risk of losing the collective reward becomes critically high

**Cooperation Trigger:**
- Cooperate ONLY when: `(observed_cooperators + 1) = m` 
- In other words, cooperate only when you would be exactly the minimum required cooperator to reach threshold `m`

**Historical Exploitation Learning:**
- Track each opponent's cooperation frequency over past rounds
- Identify "reliable cooperators" (players with >70% cooperation rate)
- Increase aggression against reliable cooperators by assuming they'll cooperate

### Round-by-Round Logic

```pseudocode
For each round t:
  1. Count current_cooperators from other players' likely actions
  2. Estimate reliable_cooperators (those with >70% historical cooperation rate)
  3. Expected_cooperators = reliable_cooperators + (random cooperators * 0.3)
  
  4. IF (Expected_cooperators >= m):
     ACTION = DEFECT  // Free ride on others' cooperation
     
  5. ELIF (Expected_cooperators == m-1):
     ACTION = COOPERATE  // Be the decisive cooperator
     
  6. ELSE:
     ACTION = DEFECT  // Not worth the cost, let others bear the burden
```

### Edge Case Handling

**First Round:**
- Always DEFECT to establish aggressive reputation and test opponent behaviors
- Rationale: No history to analyze, so maximize immediate gain while gathering intelligence

**Last Round (round r):**
- Always DEFECT regardless of situation
- Rationale: No future rounds to benefit from collective reward, so pure self-interest applies

**Early Rounds (rounds 2 to 5):**
- Use more conservative estimation: assume only 40% of non-reliable players will cooperate
- This accounts for uncertainty in opponent behavior patterns

**Critical Threshold Situations:**
- If `m = n-1` (almost all players needed): Only cooperate if you've identified exactly `m-1` reliable cooperators
- If `m = 2` (low threshold): Be extra aggressive - only cooperate if you observe exactly 1 other cooperator

### Adaptive Mechanisms

**Opponent Classification:**
- **Suckers**: Players who cooperate >80% of time → Exploit maximally
- **Reciprocators**: Players who adjust based on others' behavior → Monitor and exploit patterns
- **Fellow Defectors**: Players who defect >70% of time → Compete aggressively for free-riding opportunities

**Dynamic Threshold Adjustment:**
- If consistently failing to meet threshold (collective reward missed >50% of rounds), temporarily lower cooperation trigger to `m-1` cooperators observed
- If threshold consistently exceeded, increase aggression by requiring `m+1` cooperators observed before cooperating

**Punishment Resistance:**
- If opponents seem to be punishing your defection with coordinated defection, maintain aggressive stance for 2 more rounds before any adjustment
- Never cooperate more than minimally required, even under pressure

## Aggressive Mindset Alignment

1. **Maximize Personal Gain**: Always prioritize your own payoff over collective welfare
2. **Exploit Altruists**: Identify and free-ride on cooperative players
3. **Minimize Personal Cost**: Only contribute when absolutely necessary for personal benefit
4. **Competitive Advantage**: Use information asymmetry and behavioral prediction against opponents
5. **Risk Tolerance**: Accept occasional collective failures rather than over-contribute

This strategy is designed to consistently achieve payoffs of 3 (when others cooperate and you defect) or 1 (when collective fails), while minimizing payoffs of 2 (when you cooperate). It's ruthlessly self-interested and will exploit any opponent weakness while maintaining just enough strategic cooperation to avoid complete collective collapse.
'''
