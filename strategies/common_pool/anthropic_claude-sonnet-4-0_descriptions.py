"""
Strategy descriptions for CommonPoolDescription.

Generated with:
- Provider: Anthropic
- Model: claude-sonnet-4-0
"""


description_COOPERATIVE_1 = '''
# Cooperative Strategy: "Adaptive Trust with Forgiveness"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperative but adapts based on observed patterns, with built-in forgiveness mechanisms to recover from temporary conflicts.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE  // Always start cooperatively
    
    if stock < capacity * 0.15:  // Critical stock threshold
        return COOPERATE  // Emergency conservation mode
    
    if round == final_round:
        return handle_final_round(history)
    
    // Calculate cooperation metrics from recent history
    recent_coop_rate = calculate_recent_cooperation_rate(history, window=3)
    overall_coop_rate = calculate_overall_cooperation_rate(history)
    stock_trend = calculate_stock_trend(history, window=3)
    
    // Adaptive cooperation based on multiple factors
    if recent_coop_rate >= 0.6:  // Majority cooperating recently
        return COOPERATE
    elif overall_coop_rate >= 0.4 AND stock_trend >= 0:  // Stable cooperation pattern
        return COOPERATE
    elif recent_coop_rate >= 0.3 AND stock > capacity * 0.5:  // Some cooperation with healthy stock
        return COOPERATE
    else:
        return apply_forgiveness_logic(history)
```

### Key Components:

#### 1. **Opening Strategy**
- **Round 1**: Always COOPERATE to signal cooperative intent
- **Rounds 2-3**: Continue cooperating unless stock drops below 50% of capacity

#### 2. **Cooperation Triggers**
- **High Recent Cooperation** (≥60% in last 3 rounds): Always cooperate
- **Stable Overall Cooperation** (≥40% historically + non-negative stock trend): Cooperate
- **Moderate Cooperation with Healthy Stock** (≥30% recent + stock >50% capacity): Cooperate
- **Critical Stock Level** (<15% capacity): Always cooperate regardless of others' actions

#### 3. **Forgiveness Mechanism**
```pseudocode
function apply_forgiveness_logic(history):
    consecutive_defections = count_consecutive_opponent_defections()
    
    if consecutive_defections <= 2:
        return COOPERATE  // Give benefit of doubt for short defection streaks
    elif consecutive_defections <= 5 AND random() < 0.3:
        return COOPERATE  // Occasional forgiveness for medium streaks
    else:
        return DEFECT     // Respond to persistent non-cooperation
```

#### 4. **Final Round Handling**
```pseudocode
function handle_final_round(history):
    if overall_cooperation_rate >= 0.5:
        return COOPERATE  // Reward good overall behavior
    elif stock < capacity * 0.3:
        return COOPERATE  // Don't destroy remaining resources
    else:
        return DEFECT     // Take advantage if others were mostly uncooperative
```

#### 5. **Stock Trend Analysis**
```pseudocode
function calculate_stock_trend(history, window):
    recent_stocks = get_last_n_stock_levels(history, window)
    if len(recent_stocks) < 2:
        return 0
    return (recent_stocks[-1] - recent_stocks[0]) / recent_stocks[0]
```

## Edge Case Handling

### **First Round**: 
Always cooperate to establish cooperative intent and gather initial information about opponents.

### **Last Round**: 
Cooperate if overall cooperation has been good (≥50%) or if stock is critically low (<30% capacity), otherwise defect to maximize final payoff.

### **Critical Stock Situations**: 
When stock falls below 15% of capacity, always cooperate regardless of opponent behavior to prevent complete resource collapse.

### **All-Defection Scenarios**: 
If all other players consistently defect (>80% of the time over 5+ rounds), switch to primarily defecting but still cooperate 20% of the time to test for cooperation recovery.

### **Recovery Attempts**: 
Every 5 rounds of mutual defection, attempt one round of cooperation to test if opponents are willing to return to cooperative behavior.

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Default Cooperation**: Starts and prefers to cooperate
2. **Resource Conservation**: Prioritizes long-term sustainability over short-term gains
3. **Forgiveness**: Gives opponents multiple chances to return to cooperation
4. **Adaptive Response**: Adjusts to opponent behavior while maintaining cooperative bias
5. **Crisis Management**: Always cooperates when resources are critically low
6. **Signal Clarity**: Actions provide clear signals about willingness to cooperate

The strategy balances being "nice" (cooperative by default) with being "not naive" (responsive to exploitation) while maintaining a strong bias toward preserving the common resource for all players' long-term benefit.
'''

description_COOPERATIVE_2 = '''
# Adaptive Threshold Cooperation Strategy

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation. It balances cooperation with defensive mechanisms to maintain resource sustainability.

## Decision Rules

### Primary Strategy: Conditional Cooperation with Adaptive Threshold

```pseudocode
STRATEGY: Adaptive Threshold Cooperation (ATC)

INITIALIZATION:
- cooperation_threshold = 0.5  // Start requiring 50% cooperation
- trust_level = 1.0           // Start with full trust
- min_threshold = 0.3         // Never go below 30% cooperation requirement
- max_threshold = 0.8         // Never exceed 80% cooperation requirement

FOR each round t:
    IF t == 1:
        ACTION = C  // Always cooperate in first round
    
    ELSE IF t == final_round:
        // Last round: cooperate if stock is healthy and others likely to cooperate
        cooperation_rate = count_cooperators_last_round / n
        current_stock_ratio = current_stock / capacity
        
        IF cooperation_rate >= cooperation_threshold AND current_stock_ratio >= 0.3:
            ACTION = C
        ELSE:
            ACTION = D
    
    ELSE:
        // Standard rounds: adaptive threshold-based decision
        cooperation_rate = count_cooperators_last_round / n
        current_stock_ratio = current_stock / capacity
        
        // Emergency defection if stock critically low
        IF current_stock_ratio < 0.2:
            ACTION = D
            
        // Cooperate if enough others cooperated and stock is reasonable
        ELSE IF cooperation_rate >= cooperation_threshold AND current_stock_ratio >= 0.25:
            ACTION = C
            
        // Otherwise defect
        ELSE:
            ACTION = D
    
    // Update threshold based on outcomes
    UPDATE_THRESHOLD()
    UPDATE_TRUST()
```

### Threshold Adaptation Mechanism

```pseudocode
FUNCTION UPDATE_THRESHOLD():
    cooperation_rate = count_cooperators_last_round / n
    stock_health = current_stock / capacity
    
    // If cooperation worked well (stock maintained/grew), lower threshold
    IF cooperation_rate >= cooperation_threshold AND stock_health >= previous_stock_health:
        cooperation_threshold = max(cooperation_threshold - 0.05, min_threshold)
    
    // If cooperation failed (stock declined despite cooperation), raise threshold
    ELSE IF cooperation_rate >= cooperation_threshold AND stock_health < previous_stock_health * 0.9:
        cooperation_threshold = min(cooperation_threshold + 0.1, max_threshold)
    
    // If defection was widespread, raise threshold for future cooperation
    ELSE IF cooperation_rate < 0.3:
        cooperation_threshold = min(cooperation_threshold + 0.15, max_threshold)
```

## Key Features

### 1. **Graduated Response System**
- Start cooperative but adapt based on others' behavior
- Threshold adjusts based on success/failure of cooperative attempts
- More forgiving when cooperation succeeds, stricter when it fails

### 2. **Stock Health Monitoring**
- Always defect if stock drops below 20% of capacity (crisis mode)
- Require higher cooperation rates when stock is declining
- Balance immediate survival with long-term sustainability

### 3. **Strategic Round Handling**
- **Round 1**: Always cooperate to signal cooperative intent
- **Final Round**: Cooperate only if group has maintained cooperation and stock is healthy
- **Middle Rounds**: Apply adaptive threshold based on history

### 4. **Exploitation Protection**
- Threshold can only decrease slowly (0.05 per round) but increases faster (0.1-0.15) when cooperation fails
- Maintains minimum threshold of 30% to prevent complete exploitation
- Emergency defection when stock is critically low regardless of others' behavior

## Rationale

This strategy is cooperative because:
1. **Default to cooperation**: Starts cooperative and tries to maintain cooperation when possible
2. **Rewards group cooperation**: Lowers threshold when collective cooperation succeeds
3. **Protects common resource**: Switches to conservation mode when stock is endangered
4. **Forgives and rebuilds**: Gradually returns to cooperation after periods of defection

The strategy handles the tournament environment by:
- Not assuming coordination or communication
- Adapting to whatever mix of strategies it encounters
- Balancing cooperation with self-protection
- Using only observable game history to make decisions

This approach should perform well against other cooperative strategies while maintaining reasonable defense against exploitative ones, ultimately serving the goal of sustainable resource management.
'''

description_AGGRESSIVE_1 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy maximizes immediate payoffs through aggressive exploitation while using sophisticated opponent modeling to avoid complete resource collapse when beneficial. The key insight is that in a tournament setting, other strategies will likely attempt some form of cooperation - this creates exploitable opportunities.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Always start aggressively
    
    if round == final_round:
        return DEFECT  // Always defect on last round
    
    // Calculate exploitation potential
    cooperation_rate = count_cooperators_last_round(history) / n
    stock_ratio = current_stock / capacity
    
    // Aggressive thresholds
    if cooperation_rate >= 0.6 AND stock_ratio >= 0.4:
        return DEFECT  // High exploitation opportunity
    
    if cooperation_rate >= 0.4 AND stock_ratio >= 0.6:
        return DEFECT  // Medium exploitation with good stock
    
    if stock_ratio <= 0.15:
        return COOPERATE  // Emergency conservation (rare)
    
    if cooperation_rate <= 0.2:
        return DEFECT  // If others are defecting anyway
    
    // Default aggressive stance with slight stock consideration
    if stock_ratio >= 0.3:
        return DEFECT
    else:
        return COOPERATE  // Minimal cooperation for sustainability
```

## Key Strategic Components

### 1. Opportunistic Exploitation
- **Always defect** when 60%+ of opponents cooperated last round AND stock > 40% capacity
- **Exploit mixed scenarios** when 40%+ cooperated and stock > 60% capacity
- This captures maximum value from cooperative opponents

### 2. Endgame Aggression
- **First round**: Always defect to establish dominance and test opponent reactions
- **Last round**: Always defect since there's no future to preserve
- **Final 20% of rounds**: Lower cooperation threshold significantly

### 3. Minimal Sustainability Consideration
- Only cooperate when stock drops below 15% capacity (emergency mode)
- This threshold is much lower than sustainable strategies would use
- Quickly return to defection once stock recovers above 30%

### 4. Anti-Coordination Stance
- If most opponents are already defecting (≤20% cooperation), join the defection to maximize short-term gains
- Never attempt to "rescue" a collapsing resource through cooperation

### 5. Adaptive Aggression Scaling
```pseudocode
// Enhanced decision for tournament play
aggression_multiplier = 1.0 + (0.3 * (rounds_remaining / total_rounds))

if (cooperation_rate * stock_ratio * aggression_multiplier) >= threshold:
    return DEFECT
```

## Edge Case Handling

### Stock Depletion Scenarios:
- **Stock < 5% capacity**: Cooperate only if >50% opponents cooperated last round
- **Stock = 0**: Cooperate (no choice for sustainability)
- **Stock recovery**: Resume defection immediately when stock > 20%

### Opponent Pattern Recognition:
- **All opponents always cooperate**: Defect every round except when stock < 10%
- **All opponents always defect**: Defect every round (tragedy scenario)
- **Mixed strategies**: Exploit cooperators while they exist

### Tournament Considerations:
- **Against likely TIT-FOR-TAT variants**: Defect first, then exploit their cooperation
- **Against other aggressive strategies**: Maintain defection to avoid being exploited
- **Against sustainable strategies**: Maximum exploitation of their restraint

## Strategic Rationale

This aggressive approach is designed for tournament success because:

1. **Immediate Payoff Maximization**: Prioritizes current round gains over long-term sustainability
2. **Exploitation of Cooperation**: Specifically targets and takes advantage of cooperative strategies
3. **Minimal Resource Conservation**: Only preserves resources when absolutely necessary for continued exploitation
4. **No Mercy Endgame**: Extracts maximum value in final rounds regardless of consequences

The strategy assumes that in a diverse tournament, some strategies will attempt cooperation or sustainability, creating exploitable opportunities. By being consistently more aggressive than average, this strategy captures disproportionate value from the common pool while others exercise restraint.

**Risk Acknowledgment**: This strategy may lead to resource collapse in games with multiple aggressive strategies, but it maximizes expected payoffs against a mixed field of opponents where some attempt cooperation.
'''

description_AGGRESSIVE_2 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated risk management**. It aims to extract maximum value from the common pool while using the threat of resource depletion as a weapon against more cooperative opponents.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
PREDATOR_STRATEGY:
  if round == 1:
    return DEFECT  // Establish dominance immediately
  
  if round == final_round:
    return DEFECT  // No future consequences
  
  if stock <= capacity * 0.15:  // Crisis threshold
    if majority_defected_last_round:
      return DEFECT  // Race to the bottom
    else:
      return COOPERATE  // Preserve minimal extraction opportunity
  
  // Main exploitation logic
  cooperation_rate = count_cooperators_last_round / n
  
  if cooperation_rate >= 0.6:  // Sufficient "sheep" to exploit
    return DEFECT
  
  if cooperation_rate <= 0.3:  // Too few cooperators, pool dying
    if stock > capacity * 0.4:
      return DEFECT  // Still profitable to defect
    else:
      return COOPERATE  // Minimal conservation to extend game
  
  // Mixed zone (30-60% cooperation)
  if my_total_payoff < average_opponent_payoff:
    return DEFECT  // Catch up aggressively
  else:
    if stock > capacity * 0.5:
      return DEFECT  // Maintain advantage
    else:
      return COOPERATE  // Tactical restraint
```

## Key Strategic Elements

### 1. **Exploitation Maximization**
- **Always defect in rounds 1 and r**: Establish immediate dominance and extract maximum value when there are no future consequences
- **Exploit cooperative majorities**: When ≥60% of players cooperated in the previous round, defect to maximize advantage over "naive" cooperators

### 2. **Predatory Adaptation**
- **Monitor cooperation rates**: Use opponent cooperation levels as signals for exploitation opportunities
- **Performance-based aggression**: If falling behind in total payoffs, increase defection rate regardless of stock levels

### 3. **Calculated Brinkmanship**
- **Crisis exploitation**: When stock drops to critical levels (≤15% capacity), defect if others are also defecting (accelerate collapse to deny them resources)
- **Minimal conservation**: Only cooperate when absolutely necessary to prevent immediate resource extinction that would end profitable extraction

### 4. **Psychological Warfare**
- **First-move aggression**: Start with defection to signal aggressive intent and potentially intimidate opponents into cooperation
- **Unpredictable conservation**: Occasional cooperation in middle rounds serves to maintain just enough stock for continued exploitation

## Edge Case Handling

### **First Round**
Always **DEFECT** - establishes aggressive reputation and maximizes early extraction when stock is at capacity.

### **Final Round**
Always **DEFECT** - no future consequences, so maximize immediate payoff.

### **Stock Depletion Crisis**
When stock ≤ 15% capacity:
- If others are defecting → **DEFECT** (deny them resources in final extraction)
- If others are cooperating → **COOPERATE** minimally (preserve extraction opportunities)

### **Performance Deficit**
If falling behind opponents in cumulative payoffs → **DEFECT** regardless of other conditions (aggressive catch-up).

## Strategic Advantages

1. **First-mover advantage**: Aggressive opening establishes dominance
2. **Exploitation of cooperation**: Profits maximally from others' restraint
3. **Endgame extraction**: Guarantees maximum final-round payoff
4. **Adaptive aggression**: Responds to opponent weakness with increased exploitation
5. **Crisis opportunism**: Uses resource scarcity as a competitive weapon

## Risk Tolerance
This strategy accepts high risk of resource collapse in exchange for maximum extraction when exploitation opportunities exist. It operates on the principle that in a competitive tournament environment, moderate success across all games is less valuable than dominant performance in winnable scenarios, even at the cost of some catastrophic failures.

The strategy is designed to punish cooperative strategies while competing effectively against other aggressive strategies through superior timing and exploitation recognition.
'''

description_COOPERATIVE_3 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common resource while being responsive to the cooperative level of other players. It starts with strong cooperation and adapts based on observed behavior patterns.

## Decision Rules

### Primary Strategy Framework:
```pseudocode
function decide_action(round, stock, game_history, n, r):
    if round == 1:
        return COOPERATE
    
    cooperation_rate = calculate_cooperation_rate(game_history, round-1)
    stock_health = stock / capacity
    rounds_remaining = r - round + 1
    
    // Core decision logic
    if stock_health < CRITICAL_THRESHOLD:
        return handle_critical_stock(cooperation_rate, rounds_remaining)
    elif rounds_remaining <= ENDGAME_THRESHOLD:
        return handle_endgame(cooperation_rate, stock_health)
    else:
        return handle_midgame(cooperation_rate, stock_health)
```

### Key Parameters:
- `CRITICAL_THRESHOLD = 0.3` (30% of capacity)
- `ENDGAME_THRESHOLD = 3` rounds
- `MIN_COOPERATION_RATE = 0.4` (40% of other players cooperating)
- `HIGH_COOPERATION_RATE = 0.7` (70% of other players cooperating)

### Detailed Decision Logic:

#### 1. First Round
**Always COOPERATE** - Start with trust and signal cooperative intent.

#### 2. Critical Stock Situations (stock < 30% capacity)
```pseudocode
function handle_critical_stock(cooperation_rate, rounds_remaining):
    if cooperation_rate >= MIN_COOPERATION_RATE:
        return COOPERATE  // Try to save the commons
    elif rounds_remaining <= 2:
        return COOPERATE  // Last chance cooperation
    else:
        return DEFECT     // Cut losses if others won't cooperate
```

#### 3. Endgame (Last 3 rounds)
```pseudocode
function handle_endgame(cooperation_rate, stock_health):
    if cooperation_rate >= HIGH_COOPERATION_RATE and stock_health >= 0.5:
        return COOPERATE  // Maintain cooperation with cooperative players
    elif cooperation_rate >= MIN_COOPERATION_RATE and stock_health >= 0.3:
        return COOPERATE  // Give cooperation a chance
    else:
        return DEFECT     // Maximize remaining value
```

#### 4. Midgame (Main game phase)
```pseudocode
function handle_midgame(cooperation_rate, stock_health):
    if cooperation_rate >= HIGH_COOPERATION_RATE:
        return COOPERATE  // Reward high cooperation
    elif cooperation_rate >= MIN_COOPERATION_RATE and stock_health >= 0.4:
        return COOPERATE  // Maintain cooperation when viable
    else:
        return DEFECT     // Protect against exploitation
```

### Supporting Functions:

#### Cooperation Rate Calculation:
```pseudocode
function calculate_cooperation_rate(game_history, last_round):
    total_cooperations = 0
    total_actions = 0
    
    // Weight recent rounds more heavily
    for round in max(1, last_round-2) to last_round:
        for player in other_players:
            if game_history[round][player] == COOPERATE:
                total_cooperations += 1
            total_actions += 1
    
    return total_cooperations / total_actions
```

## Strategy Rationale

### Cooperative Elements:
1. **Default to Cooperation**: Starts cooperatively and maintains cooperation when others reciprocate
2. **Resource Protection**: Prioritizes saving the commons when stock is critically low
3. **Forgiveness**: Uses recent behavior rather than cumulative history, allowing recovery from defection spirals
4. **Sustainability Focus**: Considers long-term stock health in decisions

### Adaptive Elements:
1. **Responsive to Others**: Adjusts cooperation level based on observed behavior
2. **Context Awareness**: Different strategies for different game phases
3. **Stock Sensitivity**: More likely to cooperate when stock is healthy
4. **Exploitation Protection**: Defects when cooperation rate is too low to be sustainable

### Edge Case Handling:
- **Round 1**: Always cooperate to establish positive precedent
- **Low Stock**: Emergency cooperation mode if others are willing
- **Endgame**: Balanced approach between maximizing remaining value and maintaining cooperation
- **All Defect Scenario**: Will eventually defect to avoid total exploitation while giving cooperation multiple chances

This strategy aims to be a "good citizen" of the commons while protecting against exploitation, creating incentives for others to cooperate through conditional cooperation and clear behavioral patterns.
'''

description_COOPERATIVE_4 = '''
# Cooperative Strategy: "Forgiving Tit-for-Tat with Stock Awareness"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior and stock levels. It starts cooperatively, reciprocates cooperation, but forgives occasional defections to avoid destructive cycles.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock_level, history):
    // First round: Always cooperate
    if round == 1:
        return C
    
    // Calculate key metrics
    cooperation_rate = calculate_cooperation_rate(history, lookback_window=3)
    stock_sustainability = stock_level / capacity
    
    // Emergency stock protection
    if stock_level < capacity * 0.15:
        if cooperation_rate >= 0.6:
            return C  // Trust others are trying to rebuild
        else:
            return D  // Stock too low, others not cooperating enough
    
    // Main cooperation logic
    if cooperation_rate >= 0.7:
        return C  // High cooperation environment
    
    if cooperation_rate >= 0.4:
        // Mixed environment - use forgiving tit-for-tat
        recent_defections = count_defections_against_me(history, last_2_rounds)
        if recent_defections <= 1:
            return C  // Forgive single defections
        else:
            return D  // Respond to sustained defection
    
    // Low cooperation environment
    if stock_sustainability > 0.8:
        return C  // Try to maintain cooperation when stock is healthy
    else:
        return D  // Protect against exploitation when stock is declining
```

## Key Components

### 1. Cooperation Rate Calculation
```pseudocode
function calculate_cooperation_rate(history, lookback_window):
    if history is empty:
        return 1.0  // Assume cooperation initially
    
    recent_rounds = min(lookback_window, len(history))
    total_actions = 0
    cooperative_actions = 0
    
    for round in last recent_rounds:
        for player in other_players:
            total_actions += 1
            if player_action[round] == C:
                cooperative_actions += 1
    
    return cooperative_actions / total_actions
```

### 2. Stock Sustainability Assessment
- **Healthy Stock** (>80% capacity): Encourage cooperation
- **Moderate Stock** (15-80% capacity): Balance cooperation with protection
- **Critical Stock** (<15% capacity): Emergency response mode

### 3. Forgiveness Mechanism
- Forgive single defections in otherwise cooperative environments
- Only retaliate against sustained defection patterns (2+ consecutive defections)
- Reset forgiveness counter when opponents return to cooperation

## Edge Case Handling

### First Round
- **Always cooperate** to signal cooperative intent and establish positive momentum

### Last Round
```pseudocode
if round == final_round:
    if stock_level > capacity * 0.5 AND cooperation_rate >= 0.5:
        return C  // Maintain cooperation if others likely to reciprocate
    else:
        return D  // Defect if low trust or critical stock situation
```

### Stock Depletion Scenarios
- **Stock approaches zero**: Switch to defection to avoid being exploited while getting minimal payoff
- **Stock recovering**: Resume cooperation more readily to support rebuilding

### All-Defection Detection
```pseudocode
if cooperation_rate < 0.1 for 2+ consecutive rounds:
    // Mostly defection environment
    if stock_level > capacity * 0.6:
        return C  // Attempt to break defection cycle when safe
    else:
        return D  // Follow the crowd to avoid exploitation
```

## Strategic Rationale

### Cooperative Alignment
1. **Default to cooperation**: Starts and prefers cooperative play
2. **Forgiveness**: Doesn't punish single defections harshly
3. **Sustainability focus**: Considers long-term stock health
4. **Trust building**: Gives opponents multiple chances to cooperate

### Defensive Elements
1. **Exploitation protection**: Responds to sustained defection
2. **Stock protection**: Adjusts behavior when resources become critical
3. **Endgame awareness**: Prevents last-round exploitation

### Adaptive Features
1. **Environment sensing**: Adjusts to overall cooperation levels
2. **Stock awareness**: Considers resource availability in decisions
3. **Recent history weighting**: More responsive to recent behavior patterns

This strategy balances cooperative ideals with practical necessity, aiming to sustain both the resource and cooperative relationships while protecting against exploitation in hostile environments.
'''

description_COOPERATIVE_5 = '''
# Graduated Forgiveness Strategy (GFS)

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness to maintain resource sustainability while protecting against exploitation. It starts cooperative, responds proportionally to defection, but includes forgiveness mechanisms to restore cooperation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Signal cooperative intent and establish initial trust

### Rounds 2 to r-1: Adaptive Cooperation with Graduated Response

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (number of C actions by all players in previous round) / n
```

**Step 2: Determine Base Action**
```
if cooperation_rate >= 0.75:
    base_action = C  // High cooperation - reciprocate
else if cooperation_rate >= 0.5:
    base_action = C with probability 0.7, D with probability 0.3
else if cooperation_rate >= 0.25:
    base_action = C with probability 0.3, D with probability 0.7  
else:
    base_action = D  // Low cooperation - protect yourself
```

**Step 3: Stock Sustainability Check**
```
if current_stock < capacity * 0.3:
    // Critical stock level - force cooperation attempt
    if cooperation_rate >= 0.5:
        action = C  // Others are trying to cooperate
    else:
        action = D  // Resource nearly depleted, others not cooperating
else if current_stock < capacity * 0.5:
    // Moderate depletion - bias toward cooperation
    if base_action == D:
        action = C with probability 0.4, D with probability 0.6
    else:
        action = base_action
else:
    action = base_action
```

**Step 4: Forgiveness Mechanism**
```
consecutive_low_cooperation = count of consecutive rounds where cooperation_rate < 0.5

if consecutive_low_cooperation >= 3 AND current_round % 4 == 0:
    // Every 4th round after 3+ rounds of low cooperation, attempt reset
    action = C
```

### Final Round (Round r): Conditional Defection
```
if cooperation_rate_in_previous_round >= 0.5 AND current_stock >= capacity * 0.3:
    action = C  // Reward sustained cooperation
else:
    action = D  // End-game defection when cooperation has broken down
```

## Key Features

1. **Graduated Response**: Response intensity scales with the level of defection observed
2. **Stock Awareness**: Adjusts behavior based on resource depletion to prevent collapse
3. **Forgiveness**: Periodically attempts to restore cooperation even after sustained defection
4. **Probabilistic Elements**: Uses mixed strategies in uncertain situations to avoid predictability
5. **End-game Handling**: Recognizes last round dynamics while still rewarding sustained cooperation

## Strategic Rationale

- **Cooperative Foundation**: Starts cooperative to signal good intentions
- **Proportional Retaliation**: Responds to defection but not excessively 
- **Sustainability Focus**: Prioritizes long-term resource preservation
- **Adaptive Forgiveness**: Attempts to restore cooperation without being exploitable
- **Realistic End-game**: Acknowledges final round incentives while rewarding consistent cooperators

This strategy aims to foster cooperation while remaining robust against various opponent strategies, from always-cooperate to tit-for-tat to more complex adaptive approaches.
'''

description_COOPERATIVE_6 = '''
# Cooperative Strategy: "Conditional Cooperation with Forgiveness"

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation and capable of recovering from coordination failures. It balances immediate cooperative intentions with long-term sustainability protection.

## Decision Rules

### Primary Rule: Conditional Cooperation
- **Cooperate (C)** if the majority of players cooperated in the previous round
- **Defect (D)** if the majority of players defected in the previous round

### Threshold Calculation
For n players, define majority threshold as: `threshold = ceil(n/2)`
- If `cooperators_last_round >= threshold`: Play C
- If `cooperators_last_round < threshold`: Play D

## Edge Case Handling

### Round 1 (First Round)
- **Always Cooperate (C)**
- Rationale: Signal cooperative intent and give others the opportunity to establish mutual cooperation

### Last Round Considerations
- **Continue normal strategy** (don't defect just because it's the final round)
- Rationale: Maintains reputation for future interactions and avoids triggering last-round defection cascades

### Stock Depletion Protection
- **Emergency Override**: If current stock < n (insufficient for even one round of all-cooperation), switch to D
- Rationale: When the pool is critically low, individual survival takes precedence

### Forgiveness Mechanism
- After playing D due to majority defection, immediately return to C if:
  - Stock level is above critical threshold (stock > 2n), AND
  - At least one other player cooperated in the previous round
- Rationale: Prevent permanent defection spirals and encourage return to cooperation

## Pseudocode

```
function decide_action(round_number, history, current_stock, n):
    // First round: always cooperate
    if round_number == 1:
        return C
    
    // Emergency stock protection
    if current_stock < n:
        return D
    
    // Get previous round actions
    previous_round = history[round_number - 1]
    cooperators_count = count_cooperators(previous_round)
    threshold = ceil(n / 2)
    
    // Main decision logic
    if cooperators_count >= threshold:
        return C
    else:
        // Check forgiveness conditions
        if current_stock > 2*n and cooperators_count > 0:
            return C  // Forgiveness attempt
        else:
            return D  // Reciprocate defection
```

## Strategic Rationale

### Why This Strategy is Cooperative:
1. **Default to Cooperation**: Always starts cooperating and prefers cooperative outcomes
2. **Encourages Mutual Cooperation**: Rewards cooperative behavior from others
3. **Forgiveness**: Actively attempts to restore cooperation after breakdowns
4. **Sustainability Focus**: Protects the resource base for long-term collective benefit

### Robustness Features:
1. **Exploitation Protection**: Doesn't allow free-riding by defectors
2. **Coordination Recovery**: Can break out of defection spirals through forgiveness
3. **Adaptive**: Responds to the actual behavior of other players rather than rigid rules
4. **Resource Conservation**: Has emergency protocols to prevent total resource collapse

### Tournament Considerations:
- **Against Other Cooperators**: Establishes stable mutual cooperation quickly
- **Against Mixed Strategies**: Can adapt while maintaining cooperative bias
- **Against Aggressive Defectors**: Protects against exploitation while leaving door open for cooperation
- **Against Conditional Strategies**: Likely to find stable cooperative equilibrium

This strategy balances the cooperative imperative with practical game-theoretic considerations, making it both principled and competitive in a diverse tournament environment.
'''

description_COOPERATIVE_7 = '''
# Cooperative Strategy: "Adaptive Sustainability Guardian"

## Strategy Overview
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It aims to maintain cooperation when possible but includes defensive mechanisms against exploitation.

## Core Decision Rules

### Phase 1: Initial Cooperation (Rounds 1-2)
- **Round 1**: Always play **C** (cooperate)
- **Round 2**: Always play **C** (cooperate)
- *Rationale*: Establish cooperative intent and gather information about opponent tendencies

### Phase 2: Adaptive Cooperation (Rounds 3 to r-2)
Use a **Conditional Cooperation with Forgiveness** approach:

```pseudocode
defection_threshold = n/2  // Half the players
recent_defections = count_defections_in_last_2_rounds()
stock_health = current_stock / capacity

IF stock_health < 0.3:
    // Crisis mode - try to rebuild stock
    play C
ELSE IF recent_defections > defection_threshold:
    // Too many defectors - play tit-for-tat with forgiveness
    IF last_round_defections > defection_threshold:
        play D  // Punish
    ELSE:
        play C  // Forgive and try to re-establish cooperation
ELSE:
    // Maintain cooperation
    play C
```

### Phase 3: Endgame (Last 2 rounds)
- **Round r-1**: 
  - If stock > capacity * 0.5: Play **C**
  - If stock ≤ capacity * 0.5: Play **D** (extract remaining value)
- **Round r**: Always play **D** (no future to preserve)

## Key Features

### 1. Stock Health Monitoring
- Continuously track `stock_health = current_stock / capacity`
- When stock_health < 0.3, prioritize rebuilding regardless of others' actions
- This prevents total resource collapse

### 2. Defection Response System
- Track defections in a sliding 2-round window
- Only retaliate when defections exceed threshold (n/2 players)
- Include forgiveness mechanism to re-establish cooperation

### 3. Cooperative Signaling
- Start with clear cooperative signals (C, C)
- Return to cooperation quickly after punishment
- Maintain cooperation as default stance

### 4. Endgame Adjustment
- Recognize that cooperation becomes less valuable in final rounds
- Transition to extraction mode when sustainability is no longer paramount
- Balance between maintaining resources and claiming final value

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Resource Depletion
- If stock approaches zero (< 10% of capacity), prioritize stock rebuilding over punishment

### All-Defection Environment
- If all other players consistently defect (>80% of recent rounds), switch to defensive defection while monitoring for cooperation opportunities

### High-Cooperation Environment  
- If >75% of players cooperate consistently, maintain pure cooperation until endgame

## Strategic Rationale

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Conditional Cooperation**: Rewards cooperative behavior while deterring exploitation
3. **Forgiveness**: Allows recovery from conflict spirals
4. **Adaptive**: Responds to both resource state and opponent behavior
5. **Realistic Endgame**: Acknowledges changed incentives in final rounds

This strategy balances cooperative ideals with practical considerations, aiming to achieve high total welfare while protecting against exploitation in a tournament environment.
'''

description_COOPERATIVE_8 = '''
# Cooperative Strategy: "Sustainable Commons Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool resource while maintaining cooperative behavior. It assumes that rational players will recognize the mutual benefits of cooperation once they observe the stock dynamics in action.

## Decision Rules

### Primary Rule: Conditional Cooperation with Forgiveness
```pseudocode
IF round == 1 THEN
    action = COOPERATE
ELSE
    cooperation_rate = count_cooperators_last_round / n
    stock_health = current_stock / capacity
    
    IF stock_health >= 0.7 AND cooperation_rate >= 0.5 THEN
        action = COOPERATE
    ELSE IF stock_health >= 0.4 AND cooperation_rate >= 0.7 THEN
        action = COOPERATE
    ELSE IF stock_health < 0.2 THEN
        action = COOPERATE  // Emergency conservation
    ELSE
        action = DEFECT     // Protective defection
    END IF
END IF
```

## Detailed Strategy Components

### 1. **Opening Move: Always Cooperate**
- Start with cooperation to signal cooperative intent
- Demonstrates commitment to sustainable resource management
- Allows observation of other players' initial strategies

### 2. **Stock Health Assessment**
- **Healthy Stock (≥70% capacity)**: Strong bias toward cooperation
- **Moderate Stock (40-70% capacity)**: Cooperation depends on others' behavior
- **Critical Stock (<40% capacity)**: Adaptive response based on cooperation levels
- **Emergency Stock (<20% capacity)**: Always cooperate to prevent collapse

### 3. **Cooperation Rate Thresholds**
- **High Cooperation (≥70%)**: Reciprocate cooperation even in moderate stock conditions
- **Moderate Cooperation (50-70%)**: Cooperate only when stock is healthy
- **Low Cooperation (<50%)**: More selective cooperation to avoid exploitation

### 4. **Edge Case Handling**

#### First Round
- Always cooperate to establish cooperative baseline
- Signal willingness to maintain sustainable harvesting

#### Last Round
- Continue applying main decision rules (no end-game defection)
- Cooperation in final round demonstrates consistent commitment to sustainability
- Avoids reputation damage that could affect similar future interactions

#### Stock Collapse Scenarios
```pseudocode
IF current_stock < capacity * 0.1 THEN
    action = COOPERATE  // Emergency conservation mode
    // Prioritize resource recovery over individual payoffs
END IF
```

### 5. **Forgiveness Mechanism**
- Does not punish individual defectors permanently
- Focuses on aggregate cooperation levels rather than tracking individual players
- Allows for recovery from temporary defection cascades

## Strategic Rationale

### Cooperative Alignment
1. **Resource Sustainability**: Prioritizes long-term resource health over short-term gains
2. **Mutual Benefit**: Recognizes that sustained cooperation maximizes total welfare
3. **Adaptive Cooperation**: Maintains cooperative stance while protecting against systematic exploitation

### Robustness Features
1. **Stock-Sensitive**: Adapts behavior based on resource condition
2. **Socially Responsive**: Considers others' cooperation levels
3. **Crisis Management**: Implements emergency conservation when needed
4. **Non-Vindictive**: Doesn't engage in permanent punishment cycles

### Expected Outcomes
- Against fellow cooperators: Maintains high stock levels and steady payoffs
- Against mixed populations: Adapts to find sustainable cooperation levels
- Against systematic defectors: Protects against complete exploitation while leaving door open for cooperation
- In crisis situations: Prioritizes resource recovery over individual advantage

This strategy embodies cooperative principles while remaining strategically sound against various opponent types, making it suitable for a tournament environment where opponent strategies are unknown.
'''

description_COOPERATIVE_9 = '''
# Cooperative Strategy: "Conditional Conservation"

## Core Philosophy
This strategy prioritizes long-term collective welfare while maintaining resilience against exploitation. It operates on the principle that cooperation should be the default, but defection may be necessary to prevent complete resource collapse or persistent exploitation.

## Decision Rules

### Primary Rule: Stock-Based Cooperation Threshold
```pseudocode
if (current_stock / capacity) >= 0.4:
    default_action = COOPERATE
else:
    default_action = DEFECT  // Emergency conservation mode
```

### Secondary Rule: Exploitation Response
```pseudocode
// Calculate defection rate in last 2 rounds (or available rounds if fewer)
recent_defection_rate = count_defections_last_2_rounds() / (n * min(2, rounds_played))

if recent_defection_rate > 0.6 AND current_stock > capacity * 0.2:
    action = DEFECT  // Punish widespread defection
else:
    action = default_action
```

### Tertiary Rule: Recovery Support
```pseudocode
if current_stock < capacity * 0.3 AND recent_defection_rate < 0.3:
    action = COOPERATE  // Support recovery when others are cooperating
```

## Complete Strategy Logic
```pseudocode
function decide_action(round, current_stock, game_history):
    stock_ratio = current_stock / capacity
    
    // Handle edge cases first
    if round == 1:
        return COOPERATE  // Start cooperatively
    
    if round == total_rounds AND stock_ratio < 0.2:
        return COOPERATE  // Final round cooperation if stock is critical
    
    // Calculate recent defection rate (last 2 rounds)
    recent_defection_rate = calculate_recent_defection_rate(game_history, 2)
    
    // Apply decision rules in order of priority
    
    // Rule 1: Emergency conservation
    if stock_ratio < 0.4:
        default_action = DEFECT
    else:
        default_action = COOPERATE
    
    // Rule 2: Punish widespread defection
    if recent_defection_rate > 0.6 AND stock_ratio > 0.2:
        return DEFECT
    
    // Rule 3: Support recovery when others cooperate
    if stock_ratio < 0.3 AND recent_defection_rate < 0.3:
        return COOPERATE
    
    // Rule 4: Gradual forgiveness
    if stock_ratio > 0.7 AND recent_defection_rate < 0.4:
        return COOPERATE
    
    return default_action
```

## Edge Case Handling

1. **First Round**: Always COOPERATE to signal cooperative intent
2. **Final Round**: COOPERATE if stock is critically low (< 20% capacity) to avoid complete depletion
3. **Low Stock Scenarios**: Switch to DEFECT when stock falls below 40% capacity to prevent collapse
4. **High Stock Recovery**: Return to cooperation when stock recovers above 70% capacity

## Key Features

1. **Adaptive Thresholds**: Uses stock-to-capacity ratios rather than absolute values
2. **Collective Punishment**: Responds to group-wide defection patterns, not individual actions
3. **Recovery Support**: Helps rebuild stock when others are cooperating
4. **Emergency Mode**: Prioritizes resource conservation when stock is dangerously low
5. **Gradual Forgiveness**: Returns to cooperation as conditions improve

## Cooperative Alignment

This strategy maintains a cooperative mindset by:
- Defaulting to cooperation in favorable conditions
- Supporting resource recovery efforts
- Only defecting when necessary for collective survival or to combat exploitation
- Using measured responses rather than harsh retaliation
- Prioritizing long-term sustainability over short-term gains

The strategy balances the cooperative goal of resource sustainability with the practical need to respond to free-riding behavior and prevent resource collapse.
'''

description_COOPERATIVE_10 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperative behavior while being resilient to exploitation and capable of recovery from conflict. It balances immediate self-interest with long-term sustainability of the common resource.

## Decision Rules

### Primary Rule: Conditional Cooperation
**Cooperate (C) if and only if:**
- The cooperation rate in the previous round ≥ 50% (i.e., at least half the players cooperated)
- AND the current stock level ≥ capacity/4 (resource isn't critically depleted)

**Defect (D) otherwise**

### Edge Case Handling

**Round 1 (First Round):**
- Always COOPERATE
- Rationale: Start optimistically to signal cooperative intent and test opponents' willingness to cooperate

**Final Round:**
- If cooperation rate in previous round ≥ 75%: COOPERATE
- Otherwise: DEFECT
- Rationale: Reward consistent cooperators even in the final round, but don't be exploited by free-riders

**Critical Depletion (Stock < capacity/4):**
- Always DEFECT regardless of opponent behavior
- Rationale: When resources are critically low, individual survival takes priority

## Advanced Behavioral Patterns

### Forgiveness Mechanism
If defecting due to low cooperation rates:
- Return to cooperation immediately when cooperation rate rises above threshold
- No grudges or punishment phases beyond the immediate response

### Stock-Sensitive Thresholds
Adjust cooperation threshold based on resource health:
- When stock > 75% capacity: Cooperate if ≥ 40% cooperated last round
- When stock 25-75% capacity: Cooperate if ≥ 50% cooperated last round  
- When stock < 25% capacity: Always defect

## Pseudocode

```
function decide_action(round_number, stock_level, previous_round_actions, capacity, n):
    cooperation_threshold = 0.5
    critical_stock_threshold = capacity / 4
    
    // Handle first round
    if round_number == 1:
        return COOPERATE
    
    // Calculate cooperation rate from previous round
    previous_cooperators = count(previous_round_actions == COOPERATE)
    cooperation_rate = previous_cooperators / n
    
    // Handle critical resource depletion
    if stock_level < critical_stock_threshold:
        return DEFECT
    
    // Adjust threshold based on stock health
    if stock_level > 0.75 * capacity:
        cooperation_threshold = 0.4
    elif stock_level > 0.25 * capacity:
        cooperation_threshold = 0.5
    else:
        cooperation_threshold = 0.6
    
    // Handle final round specially
    if round_number == total_rounds:
        if cooperation_rate >= 0.75:
            return COOPERATE
        else:
            return DEFECT
    
    // Primary decision rule
    if cooperation_rate >= cooperation_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Rationale

1. **Encourages Cooperation**: By cooperating when others do, this strategy incentivizes group cooperation and can help establish cooperative norms.

2. **Prevents Exploitation**: The 50% threshold prevents being taken advantage of by mostly-defecting groups while still allowing cooperation with mixed groups.

3. **Resource Sustainability**: Stock-level considerations ensure the strategy adapts to resource scarcity and doesn't cooperate the resource to extinction.

4. **Recovery Oriented**: The forgiveness mechanism allows quick return to cooperation when others change behavior, preventing permanent conflict spirals.

5. **Endgame Stability**: Special final-round handling rewards consistent cooperators while protecting against last-round defection cascades.

This strategy should perform well against other cooperative strategies, hold its own against mixed strategies, and avoid being completely exploited by aggressive strategies while maintaining the resource for mutual benefit.
'''

description_COOPERATIVE_11 = '''
Looking at this Common Pool Resource Game, I need to design a strategy that promotes cooperation while being resilient to exploitation. Here's my approach:

## Strategy: "Adaptive Tit-for-Tat with Conservation Threshold"

### Core Philosophy
This strategy balances cooperative intentions with resource conservation, using a combination of reciprocity and resource-based decision making.

### Decision Rules

```pseudocode
STRATEGY: Adaptive_Conservation_TFT

INITIALIZE:
- cooperation_threshold = 0.3 * capacity
- defection_memory = []  // tracks recent defectors
- forgiveness_counter = 0
- trust_level = 1.0  // starts optimistic

FOR each round t:
    current_stock = get_current_stock()
    
    // Rule 1: Emergency Conservation
    IF current_stock < cooperation_threshold:
        action = DEFECT
        return action
    
    // Rule 2: First Round - Always Cooperate
    IF t == 1:
        action = COOPERATE
        return action
    
    // Rule 3: Last Round - Cooperate if stock is sustainable
    IF t == final_round:
        IF current_stock >= capacity * 0.5:
            action = COOPERATE
        ELSE:
            action = DEFECT
        return action
    
    // Rule 4: Reciprocity with Forgiveness
    defector_count = count_defectors_last_round()
    total_players = n
    defection_rate = defector_count / total_players
    
    // Update trust level
    IF defection_rate <= 0.2:
        trust_level = min(1.0, trust_level + 0.1)
    ELSE:
        trust_level = max(0.2, trust_level - 0.2)
    
    // Rule 5: Adaptive Response
    IF defection_rate >= 0.6 AND trust_level < 0.5:
        // High defection environment - protect yourself
        action = DEFECT
    ELSE IF defection_rate >= 0.4:
        // Moderate defection - forgive occasionally
        forgiveness_counter++
        IF forgiveness_counter % 3 == 0:
            action = COOPERATE  // Forgive every 3rd time
        ELSE:
            action = DEFECT
    ELSE:
        // Low defection environment - cooperate
        action = COOPERATE
    
    return action
```

### Key Features

1. **Conservation Threshold (30% of capacity)**: If stock falls below this critical level, always defect to preserve remaining resources for recovery.

2. **Optimistic Start**: Begin with cooperation to signal good intentions and test the waters.

3. **Adaptive Reciprocity**: 
   - Track defection rates rather than individual players
   - Adjust trust level based on group behavior
   - Use graduated responses rather than binary retaliation

4. **Forgiveness Mechanism**: Periodically cooperate even when others defect to:
   - Signal continued willingness to cooperate
   - Test if defectors might return to cooperation
   - Prevent permanent defection spirals

5. **Endgame Consideration**: In the final round, cooperate only if the stock is reasonably healthy (≥50% capacity), otherwise secure immediate payoff.

### Edge Case Handling

- **First Round**: Always cooperate to establish cooperative intent
- **Stock Depletion**: Emergency conservation mode when stock is critically low
- **High Defection Environment**: Protect against exploitation while maintaining some forgiveness
- **Final Round**: Balance immediate payoff with resource state
- **Recovery Phases**: When stock recovers above threshold, resume normal reciprocity

### Cooperative Alignment

This strategy embodies cooperation by:
- Starting with trust and good faith
- Maintaining cooperation as the default when possible  
- Forgiving past defections to encourage return to cooperation
- Prioritizing long-term resource sustainability
- Only defecting when necessary for conservation or protection against persistent exploitation

The strategy aims to foster a cooperative equilibrium while being robust enough to survive in mixed environments with both cooperative and selfish players.
'''

description_COOPERATIVE_12 = '''
# Cooperative Strategy: "Adaptive Stewardship with Forgiveness"

## Core Philosophy
This strategy balances long-term resource sustainability with cooperative signaling while maintaining resilience against exploitation. It prioritizes collective welfare but includes defensive mechanisms to prevent being systematically exploited.

## Decision Rules

### Round 1: Cooperative Signal
- **Action**: Always COOPERATE
- **Rationale**: Signal cooperative intent to other players from the start

### Rounds 2 to r-1: Adaptive Cooperation with Punishment
The strategy uses a multi-factor decision system:

```pseudocode
function decide_action(round, stock_level, game_history):
    // Calculate cooperation metrics
    my_cooperation_rate = my_cooperations / (round - 1)
    others_avg_cooperation_rate = total_other_cooperations / ((n-1) * (round-1))
    
    // Stock sustainability check
    stock_health = current_stock / capacity
    
    // Recent defection check (last 2 rounds)
    recent_defections = count_defections_in_last_k_rounds(2)
    
    // Decision logic
    if stock_health < 0.3:
        return COOPERATE  // Emergency conservation mode
    
    if recent_defections >= (n-1):  // Nearly everyone defected recently
        if my_cooperation_rate > 0.7:  // I've been cooperative
            return DEFECT  // Punish widespread defection
        else:
            return COOPERATE  // Try to rebuild cooperation
    
    if others_avg_cooperation_rate >= 0.6:
        return COOPERATE  // Reward good collective behavior
    
    if others_avg_cooperation_rate < 0.3:
        return DEFECT  // Protect against exploitation
    
    // Default mixed response for middle ground
    if stock_health > 0.7 and my_cooperation_rate > others_avg_cooperation_rate:
        return DEFECT  // Occasional defection to avoid exploitation
    else:
        return COOPERATE
```

### Final Round (r): Conditional Cooperation
- **If** stock > capacity/3 AND others' historical cooperation rate > 50%: **COOPERATE**
- **Else**: **DEFECT**
- **Rationale**: In the final round, cooperate only if the resource is healthy and others have shown cooperative tendencies

## Key Features

### 1. Stock-Based Emergency Protocol
- When stock falls below 30% of capacity, always cooperate regardless of others' actions
- Prioritizes resource survival over short-term gains

### 2. Graduated Response System
- High cooperation (>60% by others): Always cooperate
- Moderate cooperation (30-60% by others): Context-dependent decisions
- Low cooperation (<30% by others): Defensive defection

### 3. Forgiveness Mechanism
- After punishing widespread defection, return to cooperation if stock allows
- Prevents permanent conflict spirals

### 4. Anti-Exploitation Protection
- Occasional strategic defection when being overly cooperative relative to others
- Prevents systematic exploitation while maintaining cooperative orientation

### 5. Recent History Weighting
- Focuses on last 2 rounds for defection detection
- Allows for quick response to changing group dynamics

## Edge Case Handling

**First Round**: Always cooperate to establish cooperative intent

**Stock Depletion**: Emergency cooperation mode when stock < 30% capacity

**Universal Defection**: Temporary punishment followed by forgiveness attempt

**Final Round**: Conditional cooperation based on resource health and historical cooperation

**Stock Recovery**: Gradual return to cooperation as stock recovers

## Strategic Rationale

This strategy is fundamentally cooperative but not naively so. It:
- Promotes long-term sustainability through emergency conservation
- Rewards cooperative behavior from others
- Punishes widespread defection without being vindictive
- Maintains flexibility to adapt to different opponent strategies
- Balances individual protection with collective welfare

The strategy should perform well against other cooperative strategies while maintaining reasonable defense against exploitative ones, making it suitable for a mixed tournament environment.
'''

description_COOPERATIVE_13 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Strategy Overview
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It uses adaptive cooperation based on observed behavior patterns and includes mechanisms for forgiveness and recovery.

## Core Decision Rules

### 1. Initial Cooperation Phase
- **Rounds 1-3**: Always play **C** (Cooperate)
- Rationale: Establish cooperative intent and allow time to observe opponent patterns

### 2. Main Decision Logic (Rounds 4 to r-2)

```pseudocode
if (stock_level < capacity * 0.3):
    # Emergency conservation mode
    play C
elif (cooperative_ratio_last_3_rounds >= 0.67):
    # Majority cooperation detected
    play C
elif (cooperative_ratio_last_3_rounds >= 0.33):
    # Mixed behavior - conditional cooperation
    if (my_recent_defections <= 1 in last 3 rounds):
        play C  # Give benefit of doubt
    else:
        play D  # Protect against further exploitation
else:
    # Majority defection detected
    if (rounds_since_last_cooperation <= 2):
        play C  # Forgiveness attempt
    else:
        play D  # Defensive response
```

### 3. Endgame Handling (Last 2 rounds)
- **Round r-1**: 
  - If stock > capacity * 0.5 AND cooperative_ratio_overall > 0.5: play **C**
  - Otherwise: play **D**
- **Round r**: 
  - If stock > capacity * 0.3: play **C** (final cooperative gesture)
  - Otherwise: play **D**

## Key Strategy Components

### Stock Monitoring
- **Critical threshold**: 30% of capacity
- **Healthy threshold**: 50% of capacity
- When stock falls below critical threshold, prioritize conservation regardless of opponent behavior

### Cooperation Tracking
```pseudocode
cooperative_ratio_last_3_rounds = 
    (count of C plays by all players in last 3 rounds) / 
    (total possible C plays in last 3 rounds)

cooperative_ratio_overall = 
    (total C plays by all players) / 
    (total plays so far)
```

### Forgiveness Mechanism
- After detecting sustained defection, attempt cooperation every 3 rounds
- This prevents permanent punishment cycles and allows for strategy adaptation

### Edge Case Handling

1. **Stock Depletion**: If stock reaches 0, continue with base strategy but expect reduced payoffs

2. **Single Opponent (n=2)**: Increase forgiveness frequency - attempt cooperation every 2 rounds instead of 3

3. **Large Groups (n>6)**: Lower cooperation threshold to 0.5 instead of 0.67 for the "majority cooperation" condition

4. **Very Short Games (r≤5)**: Always cooperate except final round uses endgame logic

## Strategic Rationale

### Cooperative Alignment
- Starts with pure cooperation to establish good faith
- Maintains cooperation when others reciprocate
- Prioritizes resource conservation over individual gain when stock is critically low

### Robustness Features
- **Adaptive**: Responds to observed behavior patterns rather than rigid rules
- **Forgiving**: Provides opportunities for defectors to return to cooperation
- **Protective**: Switches to defensive play when facing sustained exploitation
- **Conservation-minded**: Prioritizes long-term resource sustainability

### Tournament Considerations
- **Early signaling**: Initial cooperation signals cooperative intent to other cooperative strategies
- **Punishment resistance**: Doesn't get stuck in permanent retaliation cycles
- **Exploitation resistance**: Responds to consistent defection with defensive measures
- **Endgame stability**: Maintains some cooperation even in final rounds when others might defect

This strategy balances cooperative ideals with practical considerations for maintaining the common resource while protecting against exploitation in a competitive environment.
'''

description_COOPERATIVE_14 = '''
# Conditional Cooperation with Forgiveness Strategy

## Overview
This strategy balances cooperation to maintain the common pool while protecting against exploitation. It starts cooperatively but adapts based on observed behavior, with built-in forgiveness mechanisms to encourage long-term cooperation.

## Core Strategy: "Graduated Reciprocation with Stock Protection"

### Decision Rules

**Primary Rule**: Cooperate (C) unless triggered to defect by specific conditions.

**Defection Triggers**:
1. **Exploitation Threshold**: If more than 50% of other players defected in the previous round
2. **Stock Depletion Emergency**: If current stock < capacity × 0.3 (critical depletion)
3. **Persistent Defection**: If the same player(s) have defected for 3+ consecutive rounds
4. **End Game Defection**: In the final round only

**Cooperation Restoration**:
- Return to cooperation if defection rate drops below 50% for one round
- Always forgive after 2 consecutive rounds of defection (prevent permanent retaliation spirals)

### Pseudocode

```
function decide_action(round, stock, capacity, my_history, opponent_histories, n):
    
    # Special cases
    if round == 1:
        return COOPERATE
    
    if round == total_rounds:  # Final round
        return DEFECT
    
    # Calculate metrics from previous round
    previous_round = round - 1
    defectors_last_round = count_defectors(opponent_histories, previous_round)
    defection_rate = defectors_last_round / (n - 1)  # Exclude self
    
    # Emergency stock protection
    critical_stock_threshold = capacity * 0.3
    if stock < critical_stock_threshold:
        return DEFECT
    
    # Check for persistent defectors (3+ consecutive defections)
    persistent_defectors = count_persistent_defectors(opponent_histories, 3)
    
    # Main decision logic
    if defection_rate > 0.5:  # Majority defected
        return DEFECT
    elif persistent_defectors > 0 and my_consecutive_cooperations() < 2:
        return DEFECT
    else:
        return COOPERATE

function count_defectors(opponent_histories, round):
    count = 0
    for each opponent in opponent_histories:
        if opponent[round] == DEFECT:
            count += 1
    return count

function count_persistent_defectors(opponent_histories, threshold):
    count = 0
    current_round = len(opponent_histories[0])
    
    for each opponent in opponent_histories:
        consecutive_defections = 0
        for i in range(max(0, current_round - threshold), current_round):
            if opponent[i] == DEFECT:
                consecutive_defections += 1
            else:
                break
        
        if consecutive_defections >= threshold:
            count += 1
    
    return count
```

### Key Features

**1. Cooperative Start**: Always cooperate in round 1 to signal cooperative intent and give others the benefit of the doubt.

**2. Majority Rule Response**: Only retaliate when a majority of opponents defect, avoiding overreaction to isolated defections.

**3. Stock Conservation**: Automatically defect when stock falls below 30% of capacity to prevent complete resource collapse.

**4. Persistent Defector Punishment**: Target players who consistently exploit the system while still allowing for redemption.

**5. Built-in Forgiveness**: Return to cooperation after 2 rounds of punishment to avoid permanent retaliation cycles.

**6. End Game Realism**: Defect in the final round since there's no future to protect.

### Strategic Rationale

- **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
- **Measured Retaliation**: Responds to exploitation without escalating unnecessarily
- **Pattern Recognition**: Identifies and responds to different types of non-cooperative behavior
- **Recovery Mechanism**: Allows cooperative equilibria to re-establish after disruptions
- **Adaptive**: Adjusts behavior based on observed opponent strategies rather than assuming fixed cooperation

This strategy should perform well against other cooperative strategies while defending against exploitation, maintaining resource sustainability throughout most of the game.
'''

description_COOPERATIVE_15 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority"

## Core Philosophy
This strategy aims to maintain the common pool resource while being robust against exploitation. It operates on the principle that cooperation is beneficial when the majority cooperates, but switches to defensive defection when cooperation becomes unsustainable due to widespread defection.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if round == 1:
    return COOPERATE  // Start cooperatively
    
if stock <= capacity * 0.15:  // Critical threshold (15% of capacity)
    return DEFECT  // Emergency extraction before collapse
    
if round == final_round:
    return DEFECT  // Last round defection
    
// Calculate cooperation metrics from previous round
cooperation_rate = count_cooperators_last_round / n
my_recent_cooperation_rate = my_cooperations_in_last_3_rounds / min(3, round-1)

// Adaptive cooperation based on observed behavior
if cooperation_rate >= 0.6:  // Strong majority cooperating
    return COOPERATE
    
elif cooperation_rate >= 0.4:  // Moderate cooperation
    if my_recent_cooperation_rate >= 0.67:  // I've been mostly cooperative
        return COOPERATE
    else:
        return DEFECT  // Give others a chance to step up
        
else:  // Low cooperation (< 40%)
    if stock >= capacity * 0.8:  // Stock still very healthy
        return COOPERATE  // Try to restart cooperation
    else:
        return DEFECT  // Protect against further exploitation
```

## Edge Case Handling

### First Round:
- Always **COOPERATE** to signal cooperative intent and establish a positive baseline

### Last Round:
- Always **DEFECT** since there are no future consequences and rational players will likely defect

### Critical Stock Levels:
- When stock drops below 15% of capacity, switch to **DEFECT** regardless of others' behavior to extract value before potential collapse

### High Stock Scenarios:
- When stock is above 80% of capacity and cooperation rate is low, attempt to restart cooperation by playing **COOPERATE**

## Cooperative Alignment

This strategy is fundamentally cooperative because it:

1. **Defaults to cooperation** when the majority cooperates (≥60% cooperation rate)
2. **Attempts to restart cooperation** when stock levels are healthy but cooperation has broken down
3. **Maintains the resource** by avoiding the tragedy of the commons through conditional cooperation
4. **Signals cooperative intent** by starting with cooperation
5. **Protects cooperative players** by not allowing unlimited exploitation

## Strategic Rationale

### Why This Works:
1. **Sustainability Focus**: The stock threshold prevents resource collapse
2. **Majority Rule**: Follows the crowd when cooperation is working
3. **Exploitation Protection**: Switches to defection when being taken advantage of
4. **Restart Mechanism**: Attempts to rebuild cooperation when conditions are favorable
5. **Endgame Realism**: Acknowledges last-round incentives

### Robustness Against Common Strategies:
- **Always Cooperate**: Will cooperate with them most of the time, maintaining the resource
- **Always Defect**: Will initially try cooperation but switch to defection when stock gets low
- **Tit-for-Tat**: Will maintain mutual cooperation in high-cooperation environments
- **Threshold Strategies**: Will adapt to their behavior patterns through the cooperation rate mechanism

This strategy balances cooperation with self-protection, making it sustainable across different opponent compositions while maintaining the cooperative goal of resource preservation.
'''

description_COOPERATIVE_16 = '''
# Conditional Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy aims to maintain cooperation while being responsive to the collective behavior of other players. It balances the benefits of sustainable resource management with the need to protect against exploitation.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(current_round, stock_level, game_history):
    if current_round == 1:
        return COOPERATE  // Start cooperatively
    
    if current_round == final_round:
        return end_game_decision(stock_level, game_history)
    
    if stock_level <= capacity * 0.15:  // Crisis threshold (15% of capacity)
        return COOPERATE  // Emergency cooperation
    
    cooperation_rate = calculate_cooperation_rate(game_history, last_3_rounds)
    
    if cooperation_rate >= 0.6:  // Majority cooperative
        return COOPERATE
    elif cooperation_rate >= 0.3:  // Mixed behavior
        return conditional_cooperate(game_history)
    else:  // Low cooperation (< 30%)
        return DEFECT
```

### Cooperation Rate Calculation:
```pseudocode
function calculate_cooperation_rate(game_history, lookback_rounds):
    recent_rounds = min(lookback_rounds, len(game_history))
    total_decisions = recent_rounds * (n - 1)  // Exclude self
    cooperative_decisions = count_C_actions_by_others(game_history, recent_rounds)
    return cooperative_decisions / total_decisions
```

### Conditional Cooperation Logic:
```pseudocode
function conditional_cooperate(game_history):
    if was_majority_defecting_last_round(game_history):
        if defected_last_round == false:
            return DEFECT  // Punish one round, then forgive
        else:
            return COOPERATE  // Return to cooperation after punishment
    else:
        return COOPERATE
```

### End Game Decision:
```pseudocode
function end_game_decision(stock_level, game_history):
    if stock_level <= capacity * 0.2:  // Low stock - preserve what's left
        return COOPERATE
    
    cooperation_rate = calculate_cooperation_rate(game_history, last_5_rounds)
    if cooperation_rate >= 0.5:
        return COOPERATE  // Reward cooperative partners
    else:
        return DEFECT  // Extract value if others likely to defect
```

## Key Features

### 1. **Graduated Response System**
- **High Cooperation (≥60%)**: Always cooperate to maintain the collaborative equilibrium
- **Medium Cooperation (30-59%)**: Use conditional cooperation with forgiveness
- **Low Cooperation (<30%)**: Defect to avoid exploitation while stock remains

### 2. **Crisis Management**
- When stock drops below 15% of capacity, always cooperate regardless of others' behavior
- This prevents complete resource collapse and allows for potential recovery

### 3. **Adaptive Time Horizon**
- Uses a 3-round lookback for most decisions to balance responsiveness with stability
- Extends to 5-round lookback for final round decision to get better long-term assessment

### 4. **Forgiveness Mechanism**
- After punishing defection with one round of defection, immediately returns to cooperation
- Prevents spiral into mutual defection while still discouraging free-riding

### 5. **Strategic End Game**
- Recognizes that final round incentives differ from ongoing rounds
- Cooperates if others have been mostly cooperative (reward loyalty)
- Defects if others have been mostly uncooperative (extract remaining value)

## Edge Case Handling

### First Round:
Always cooperate to signal cooperative intent and establish positive precedent.

### Final Round:
Conditional on recent cooperation rates - cooperate with cooperative players, defect against uncooperative ones.

### Stock Depletion:
Emergency cooperation mode when stock is critically low (≤15% capacity) to prevent total collapse.

### All Others Defecting:
Switch to defection to avoid complete exploitation, but return to cooperation if any signs of others cooperating emerge.

## Rationale

This strategy is designed to:
1. **Initiate Cooperation**: Start cooperatively to encourage mutual cooperation
2. **Maintain Sustainability**: Prioritize resource preservation when stock is low
3. **Respond Proportionally**: Match the cooperation level of others
4. **Prevent Exploitation**: Don't be a persistent sucker, but don't be vindictive
5. **Enable Recovery**: Forgive past defection to allow return to cooperative equilibrium
6. **Handle Endgame**: Recognize different incentives in final rounds

The strategy balances the long-term benefits of resource sustainability with the short-term need to avoid being systematically exploited by defectors.
'''

description_COOPERATIVE_17 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group behavior. It starts cooperatively but adapts based on observed patterns to maintain both cooperation incentives and resource preservation.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-2)
- **Always play C** to establish cooperative intent
- Signal to other players that cooperation is possible and beneficial
- Build initial trust and test group responsiveness

### 2. Adaptive Cooperation Phase (Rounds 3 to r-2)
Use a **Threshold-Based Adaptive Rule**:

```pseudocode
cooperation_threshold = 0.5  // Require majority cooperation to continue cooperating
recent_window = min(3, current_round - 1)  // Look at last 3 rounds or all available

FOR each round t in [3, r-2]:
    cooperation_rate = count_cooperators_in_last_k_rounds(recent_window) / (n * recent_window)
    stock_health = current_stock / capacity
    
    IF cooperation_rate >= cooperation_threshold AND stock_health > 0.3:
        play C
    ELSE IF stock_health <= 0.2:  // Emergency conservation
        play C (regardless of others' behavior)
    ELSE:
        play D
```

### 3. Sustainability Check Override
Regardless of the above rules:
- **Always play C** when `current_stock/capacity < 0.2` (critical conservation)
- This prevents complete resource collapse even if others are defecting

### 4. End Game Handling (Last 1-2 rounds)
- **Round r-1**: Continue adaptive rule but with higher threshold (0.6) to account for end-game incentives
- **Round r**: Play C if stock is critically low (< 0.3 * capacity), otherwise follow adaptive rule

## Key Features

### Forgiveness Mechanism
- The strategy doesn't permanently punish defectors
- If cooperation rate improves in recent rounds, it returns to cooperation
- This prevents spiral into mutual defection

### Stock Conservation Priority
- Emergency cooperation when stock is critically low overrides retaliation
- Recognizes that preserving the resource benefits everyone long-term

### Majority-Responsive
- Requires only majority cooperation (not unanimity) to maintain cooperation
- More realistic and achievable threshold
- Prevents single defectors from destroying all cooperation

## Rationale

1. **Early Cooperation**: Establishes cooperative norm and tests group willingness
2. **Adaptive Response**: Balances cooperation with protection against exploitation
3. **Sustainability Focus**: Prioritizes resource preservation when critical
4. **End-Game Stability**: Maintains cooperation incentives even near game end

This strategy is genuinely cooperative because it:
- Always attempts cooperation initially
- Prioritizes resource sustainability over short-term gains
- Provides pathways back to cooperation for reformed defectors
- Never completely abandons cooperation even under exploitation

The strategy should perform well against other cooperative strategies while protecting against pure exploitation, making it robust for a tournament environment.
'''

description_COOPERATIVE_18 = '''
# Cooperative Strategy: "Adaptive Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group cooperation levels. It starts cooperatively but adapts based on the collective behavior observed, always trying to maintain the resource pool while protecting against exploitation.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    # Calculate cooperation rate in previous round
    coop_rate = count_cooperators_last_round(history) / n
    
    # Calculate stock health (current stock as % of capacity)
    stock_health = stock / capacity
    
    # Emergency conservation mode
    if stock_health < 0.3:
        return COOPERATE
    
    # Reciprocal cooperation with forgiveness
    if coop_rate >= 0.5:
        return COOPERATE
    elif coop_rate >= 0.25:
        # Mixed response - cooperate with probability based on stock health
        if stock_health > 0.7:
            return COOPERATE
        else:
            return DEFECT if my_recent_exploitation_count() < 2 else COOPERATE
    else:
        # Low cooperation detected - defensive defection
        if stock_health > 0.6 and round < r:
            return DEFECT
        else:
            return COOPERATE
```

## Specific Rules

### 1. First Round
- **Always COOPERATE** to signal cooperative intent and establish good faith

### 2. Stock Health Monitoring
- **Critical threshold (stock < 30% capacity)**: Always COOPERATE regardless of others' behavior
- **Healthy stock (stock > 70% capacity)**: More willing to cooperate even with mixed group behavior
- **Moderate stock (30-70% capacity)**: Balance cooperation with self-protection

### 3. Reciprocity Mechanism
- **High cooperation (≥50% cooperated last round)**: COOPERATE to maintain positive cycle
- **Moderate cooperation (25-49% cooperated)**: Conditional cooperation based on stock health
- **Low cooperation (<25% cooperated)**: Strategic defection to avoid being exploited, but with limits

### 4. Exploitation Protection
- Track personal "exploitation count" - rounds where I cooperated but majority defected
- If exploited more than twice recently, switch to defection temporarily even in moderate cooperation scenarios
- Reset exploitation counter when group cooperation improves

### 5. Final Rounds Behavior
- **Last 3 rounds**: Increase cooperation tendency by 20% to avoid end-game collapse
- **Final round**: COOPERATE unless stock is critically low and group has been consistently uncooperative

### 6. Forgiveness Mechanism
- After 2 consecutive rounds of majority cooperation, reset any negative behavioral adjustments
- Always give the group a chance to return to cooperative equilibrium

## Edge Cases

### Stock Depletion Crisis
If stock drops below 20% of capacity:
- COOPERATE for next 2 rounds regardless of others' actions
- Signal commitment to resource recovery

### Perfect Cooperation Detection
If all players cooperated for 3+ consecutive rounds:
- Continue cooperating indefinitely unless stock health deteriorates unexpectedly

### Deadlock Breaking
If stuck in mutual defection cycle (everyone defecting for 3+ rounds):
- Unilaterally switch to COOPERATE for 1 round to test group willingness to return to cooperation
- If no response, return to defensive strategy

## Strategy Rationale

This strategy balances several key objectives:

1. **Sustainability**: Prioritizes resource preservation through stock health monitoring
2. **Cooperation**: Default toward cooperative behavior when possible
3. **Adaptation**: Responds to group dynamics rather than being rigidly cooperative
4. **Self-Protection**: Avoids being consistently exploited by defectors
5. **Forgiveness**: Allows for recovery from negative cycles
6. **Long-term Thinking**: Considers cumulative effects and end-game dynamics

The strategy assumes other LLM-generated strategies will likely incorporate some form of reciprocity or conditional cooperation, making it responsive to various cooperative and semi-cooperative approaches while maintaining robustness against purely exploitative strategies.
'''

description_COOPERATIVE_19 = '''
# Cooperative Strategy: "Adaptive Sustainability Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the resource pool while being neither naive nor overly punitive.

## Decision Rules

### Primary Strategy: Conditional Cooperation with Sustainability Threshold
```pseudocode
if round == 1:
    return COOPERATE
    
if stock_level < capacity * 0.3:  // Emergency threshold
    return COOPERATE  // Always cooperate when resource is critically low
    
cooperation_rate = count_cooperators_last_round / total_players
majority_threshold = 0.5

if cooperation_rate >= majority_threshold:
    return COOPERATE
else:
    // Minority cooperation detected - use adaptive response
    if consecutive_rounds_of_minority_cooperation >= 2:
        return DEFECT  // Prevent exploitation
    else:
        return COOPERATE  // Give benefit of doubt
```

## Detailed Strategy Components

### 1. **Opening Move**
- Always COOPERATE in round 1
- Establishes cooperative intent and gives others opportunity to reciprocate

### 2. **Sustainability Guardian**
- If stock falls below 30% of capacity, always COOPERATE regardless of others' actions
- This prevents resource collapse and demonstrates long-term thinking
- Critical threshold ensures resource can recover even if others defect

### 3. **Majority Rule with Forgiveness**
- If ≥50% of players cooperated last round → COOPERATE
- If <50% of players cooperated last round → Enter adaptive response mode

### 4. **Adaptive Response to Defection**
- Track consecutive rounds where minority cooperated
- First round of minority cooperation → Still COOPERATE (forgiveness)
- Second+ consecutive round of minority cooperation → DEFECT (prevent exploitation)
- Reset counter when cooperation majority returns

### 5. **End Game Handling**
```pseudocode
if round == final_round:
    if stock_level >= capacity * 0.6:
        return COOPERATE  // Resource is healthy, maintain cooperation
    else:
        // Use same rules as normal rounds - don't change behavior
        return apply_normal_strategy()
```

## Edge Cases and Special Situations

### **Resource Recovery Phase**
- When stock is rebuilding (stock < 70% of capacity), be more forgiving
- Require 3 consecutive rounds of minority cooperation before defecting

### **High Stock Situations**
- When stock > 90% capacity, cooperation is extra valuable for others
- Maintain cooperative stance even with slightly more defection

### **All-Defect Scenarios**
- If all other players defected last round, still check sustainability threshold
- Only defect if stock > 30% capacity (prevent total collapse)

## Strategy Advantages

1. **Sustainable**: Prevents resource collapse through emergency cooperation
2. **Adaptive**: Responds to opponent behavior without being exploitable
3. **Forgiving**: Doesn't punish single rounds of defection harshly
4. **Clear**: Simple majority-based rule that's predictable for cooperative opponents
5. **Robust**: Handles edge cases and prevents exploitation patterns

## Pseudocode Summary
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if stock < capacity * 0.3:
        return COOPERATE
    
    last_round_cooperators = count_cooperators(history[-1])
    cooperation_rate = last_round_cooperators / n
    
    if cooperation_rate >= 0.5:
        reset_consecutive_minority_counter()
        return COOPERATE
    else:
        increment_consecutive_minority_counter()
        if consecutive_minority_rounds >= 2:
            return DEFECT
        else:
            return COOPERATE
```

This strategy balances cooperation with protection against exploitation while maintaining the resource for all players' long-term benefit.
'''

description_COOPERATIVE_20 = '''
# Adaptive Cooperative Strategy: "Trust-Building Sustainabilist"

## Core Philosophy
This strategy prioritizes long-term sustainability while building trust through consistent cooperative behavior, with adaptive responses to maintain resource viability.

## Decision Rules

### Primary Rule: Conditional Cooperation with Sustainability Safeguards
```pseudocode
function decide_action(current_round, stock_level, history):
    // Edge case: First round - always cooperate to signal intent
    if current_round == 1:
        return C
    
    // Critical sustainability check
    if stock_level < capacity * 0.3:
        // Emergency conservation mode
        if cooperation_rate_last_3_rounds >= 0.6:
            return C
        else:
            return C  // Still cooperate to model good behavior
    
    // Calculate recent cooperation rate of others
    other_coop_rate = calculate_others_cooperation_rate(last_5_rounds)
    
    // Main decision logic
    if other_coop_rate >= 0.7:
        return C  // High cooperation deserves cooperation
    elif other_coop_rate >= 0.4:
        // Mixed cooperation - be forgiving but strategic
        if stock_level >= capacity * 0.7:
            return C  // Resource is healthy, maintain cooperation
        else:
            return C  // Still cooperate to encourage others
    else:
        // Low cooperation from others
        if stock_level >= capacity * 0.8:
            return C  // Resource very healthy, try to rebuild trust
        elif current_round <= total_rounds * 0.3:
            return C  // Early game, keep trying to establish cooperation
        else:
            // Late game with low cooperation and depleted resources
            if last_action_was_punishment():
                return C  // Alternate punishment with forgiveness
            else:
                return D  // Strategic defection to signal displeasure
```

## Key Strategic Elements

### 1. **Unconditional Early Cooperation**
- Always cooperate in round 1 to signal cooperative intent
- Maintain cooperation for first 30% of rounds unless stock drops below 20% of capacity

### 2. **Graduated Response System**
- **High cooperation (≥70%)**: Always cooperate
- **Medium cooperation (40-69%)**: Cooperate with sustainability checks
- **Low cooperation (<40%)**: Strategic punishment mixed with forgiveness attempts

### 3. **Sustainability Override**
- When stock < 30% of capacity, strongly bias toward cooperation
- Never contribute to resource collapse through spite

### 4. **Forgiveness Mechanism**
- After any defection, return to cooperation in next round if others show improvement
- Prevent punishment spirals that destroy the resource

### 5. **End-Game Handling**
```pseudocode
if current_round >= total_rounds - 2:
    if stock_level >= capacity * 0.5:
        return C  // Maintain cooperation even at game end
    else:
        // Resource is depleted, but still try to model good behavior
        return C
```

## Edge Cases

- **Stock depletion**: If stock approaches zero, always cooperate to attempt recovery
- **Universal defection**: Continue periodic cooperation attempts (every 3rd round) to break negative cycles
- **Final rounds**: Maintain cooperation to avoid end-game defection cascades

## Rationale

This strategy recognizes that in a common pool resource game, mutual cooperation is the only sustainable path. It builds trust through consistent initial cooperation, responds proportionally to others' behavior, but maintains a cooperative bias to prevent resource collapse. The strategy assumes that other LLMs will recognize the mutual benefits of cooperation and respond to clear cooperative signals.

The key insight is that unlike simple prisoner's dilemmas, resource depletion creates irreversible harm that affects all future rounds, making cooperation not just beneficial but essential for any meaningful payoffs.
'''

description_COOPERATIVE_21 = '''
# Cooperative Strategy: "Adaptive Sustainable Harvesting"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group behavior. It aims to maintain the resource pool at healthy levels through cooperation, but adapts to prevent exploitation while still maintaining a cooperative stance.

## Decision Rules

### Primary Rule: Conditional Cooperation with Sustainability Focus
```
IF (current_round == 1):
    PLAY C  // Start cooperatively to signal intent

ELSE IF (stock_level < capacity * 0.3):
    PLAY C  // Emergency conservation mode - always cooperate when resource is critically low

ELSE IF (cooperation_rate_last_round >= 0.6):
    PLAY C  // Maintain cooperation when majority cooperates

ELSE IF (cooperation_rate_last_round >= 0.4):
    // Mixed cooperation zone - use stock health as tiebreaker
    IF (stock_level >= capacity * 0.7):
        PLAY C  // Healthy stock, encourage cooperation
    ELSE:
        PLAY D  // Moderate defection to prevent being exploited
    
ELSE IF (cooperation_rate_last_round < 0.4):
    // Low cooperation environment
    IF (stock_level >= capacity * 0.8):
        PLAY C  // Try to restart cooperation when stock is very healthy
    ELSE:
        PLAY D  // Protect against exploitation when stock is stressed
```

### Special Cases

#### First Round
- Always play C to establish cooperative intent
- This signals to other cooperative strategies that you're willing to work together

#### Last Round (when r is known)
```
IF (final_round AND stock_level >= capacity * 0.5):
    PLAY C  // Maintain cooperative reputation even in final round
ELSE:
    // Apply normal rules - don't automatically defect just because it's the last round
```

#### Critical Stock Situations
```
IF (stock_level < capacity * 0.2):
    PLAY C  // Always cooperate when resource is near collapse
    // This is the most important cooperative behavior
```

## Key Features

### 1. **Sustainability Priority**
- Always cooperate when stock is critically low (< 30% of capacity)
- This prevents resource collapse even if others are defecting

### 2. **Responsive Cooperation**
- Monitors group cooperation rate from previous round
- Increases cooperation when others cooperate
- Reduces exploitation vulnerability when facing mostly defectors

### 3. **Forgiveness Mechanism**
- Returns to cooperation when stock recovers to high levels (≥80%)
- Gives the group opportunities to restart cooperative cycles

### 4. **Stock-Aware Decision Making**
- Uses stock health as a key input for edge cases
- Balances immediate payoff against long-term sustainability

## Cooperative Alignment

This strategy is fundamentally cooperative because:

1. **Default to Cooperation**: Starts cooperative and returns to cooperation whenever conditions allow
2. **Resource Conservation**: Prioritizes sustainability over short-term gains
3. **Group Welfare**: Considers the collective cooperation rate, not just individual payoffs
4. **Forgiveness**: Provides pathways back to cooperation even after defection cycles
5. **Emergency Cooperation**: Always cooperates in crisis situations regardless of others' behavior

## Strategic Rationale

This strategy recognizes that in a Common Pool Resource game:
- Pure cooperation can be exploited, leading to resource depletion
- Pure defection leads to tragedy of the commons
- The optimal approach adapts to group behavior while maintaining cooperative principles
- Resource sustainability must sometimes override immediate reciprocity concerns

The strategy aims to find cooperative equilibria with like-minded players while protecting against exploitation, all while keeping resource sustainability as the paramount concern.
'''

description_COOPERATIVE_22 = '''
# Adaptive Cooperative Strategy with Trust Building

## Core Philosophy
This strategy prioritizes long-term sustainability while building trust through consistent cooperative behavior, with adaptive defection only when cooperation becomes clearly unsustainable.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Action**: Always play C (Cooperate)
- **Rationale**: Establish cooperative intent and build trust with other players
- **Exception**: None - unconditional cooperation to signal good faith

### 2. Trust Assessment Phase (Rounds 4 onwards)
Calculate cooperation rate among all players over the last 3 rounds:
```
cooperation_rate = (total_C_actions_last_3_rounds) / (n × 3)
```

### 3. Main Strategy Logic
```pseudocode
if current_round <= 3:
    return C
    
if current_stock < (n × 2):  // Critical stock threshold
    if cooperation_rate >= 0.6:
        return C  // Trust others to cooperate in crisis
    else:
        return D  // Stock too low, others untrustworthy
        
if cooperation_rate >= 0.7:
    return C  // High trust environment
    
elif cooperation_rate >= 0.4:
    if my_cooperation_rate_last_3 >= 0.67:
        return C  // Continue being cooperative leader
    else:
        return C  // Return to cooperation after defection
        
else:  // cooperation_rate < 0.4
    if stock_trend_last_3_rounds > 0:
        return C  // Stock recovering, try to rebuild cooperation
    else:
        return D  // Low trust, declining stock
```

### 4. Stock Trend Calculation
```pseudocode
stock_trend = (current_stock - stock_3_rounds_ago) / 3
```

### 5. End Game Handling (Last 2 rounds)
```pseudocode
if current_round >= (total_rounds - 1):
    if cooperation_rate >= 0.6 AND current_stock >= n:
        return C  // Maintain cooperation if sustainable
    else:
        return D  // Defect in final rounds if cooperation broke down
```

## Key Features

### Cooperative Elements:
1. **Initial Trust Building**: Unconditional cooperation for first 3 rounds
2. **Forgiveness**: Returns to cooperation when stock trends improve
3. **Leadership**: Maintains cooperation even in medium-trust environments
4. **Crisis Cooperation**: Cooperates even in low stock situations if others are trustworthy

### Adaptive Elements:
1. **Trust Monitoring**: Continuously tracks group cooperation levels
2. **Stock Awareness**: Considers current stock levels in decisions
3. **Trend Analysis**: Evaluates whether the resource is recovering or declining
4. **Endgame Realism**: Acknowledges final rounds may require different logic

### Edge Case Handling:
- **First Round**: Always cooperate (trust building)
- **Very Low Stock**: Uses trust assessment to decide between cooperation and survival
- **Last Rounds**: Balances continued cooperation with endgame incentives
- **All Defectors Scenario**: Eventually adapts but continues attempting to rebuild cooperation

## Strategic Rationale

This strategy balances the core cooperative goal of resource sustainability with the practical reality of playing against unknown opponents. It:

1. **Signals Cooperative Intent** through initial unconditional cooperation
2. **Builds Sustainable Coalitions** by maintaining cooperation when others do
3. **Prevents Exploitation** by adapting when cooperation rates drop too low
4. **Promotes Recovery** by returning to cooperation when conditions improve
5. **Handles Uncertainty** by using observable metrics rather than assumptions about opponent strategies

The strategy is designed to perform well in mixed environments - thriving with other cooperative strategies while protecting against purely exploitative ones.
'''

description_COOPERATIVE_23 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocal Cooperation"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperative but adapts based on the collective behavior observed, using a graduated response system that encourages cooperation while protecting against exploitation.

## Strategy Overview

### Decision Rules

**Round 1: Always Cooperate**
- Play C to signal cooperative intent and establish a sustainable baseline

**Rounds 2 to r-1: Adaptive Cooperation with Graduated Response**

Calculate the cooperation rate from the previous round:
```
cooperation_rate = (number of players who played C in previous round) / n
```

Decision logic:
- If `cooperation_rate ≥ 0.75`: Play C (High cooperation environment)
- If `0.5 ≤ cooperation_rate < 0.75`: Play C with probability 0.8, D with probability 0.2 (Mixed cooperative)
- If `0.25 ≤ cooperation_rate < 0.5`: Play C with probability 0.4, D with probability 0.6 (Defensive)
- If `cooperation_rate < 0.25`: Play D (Protect against exploitation)

**Additional Override Conditions:**
- **Stock Depletion Alert**: If current stock < capacity/3, always play C regardless of cooperation rate
- **Recovery Incentive**: If stock has been increasing for 2+ consecutive rounds, play C to maintain momentum

**Final Round (Round r): Conditional Cooperation**
- If cooperation_rate in round r-1 ≥ 0.5: Play C (Reward good behavior even at the end)
- Otherwise: Play D (No future rounds to recover from exploitation)

## Pseudocode

```python
def decide_action(round_num, total_rounds, current_stock, capacity, n_players, history):
    # Round 1: Always cooperate
    if round_num == 1:
        return 'C'
    
    # Calculate cooperation rate from previous round
    previous_round = history[round_num - 2]  # 0-indexed
    cooperators = sum(1 for action in previous_round if action == 'C')
    cooperation_rate = cooperators / n_players
    
    # Stock depletion override
    if current_stock < capacity / 3:
        return 'C'
    
    # Check for stock recovery trend (if we have enough history)
    if round_num > 2:
        stock_trend = []
        for i in range(max(0, round_num - 3), round_num - 1):
            stock_trend.append(history[i]['stock_after_round'])
        
        if len(stock_trend) >= 2 and all(stock_trend[i] < stock_trend[i+1] for i in range(len(stock_trend)-1)):
            return 'C'  # Stock is recovering, maintain cooperation
    
    # Final round logic
    if round_num == total_rounds:
        return 'C' if cooperation_rate >= 0.5 else 'D'
    
    # Main adaptive logic
    if cooperation_rate >= 0.75:
        return 'C'
    elif cooperation_rate >= 0.5:
        return 'C' if random() < 0.8 else 'D'
    elif cooperation_rate >= 0.25:
        return 'C' if random() < 0.4 else 'D'
    else:
        return 'D'
```

## Strategic Rationale

1. **Cooperative Foundation**: Starting with cooperation signals good intentions and gives the group the best chance for sustainable resource management.

2. **Graduated Response**: Rather than harsh tit-for-tat, this uses graduated reciprocity that responds proportionally to the level of cooperation observed, encouraging gradual improvement.

3. **Stock Protection**: The stock depletion override ensures the strategy prioritizes long-term sustainability even when others are defecting heavily.

4. **Recovery Incentive**: Recognizes and reinforces positive trends in stock recovery to help stabilize the system.

5. **Realistic Final Round**: Acknowledges that pure cooperation in the final round may be exploited, but still rewards groups that have maintained reasonable cooperation levels.

6. **Probabilistic Middle Ground**: Uses mixed strategies in ambiguous situations to avoid being completely predictable while maintaining a cooperative bias.

This strategy balances cooperation with self-protection, adapts to group dynamics, and prioritizes the long-term health of the common resource while remaining competitive against various opponent strategies.
'''

description_COOPERATIVE_24 = '''
# Cooperative Strategy: "Graduated Trust with Conservation Threshold"

## Core Philosophy
This strategy prioritizes long-term sustainability while attempting to build and maintain cooperative relationships. It balances trust-building with self-protection against exploitation.

## Strategy Specification

### Decision Rules

**Primary Rule - Conservation Threshold:**
- If current stock ≤ capacity × 0.4: Always COOPERATE (emergency conservation)
- If current stock > capacity × 0.4: Apply behavioral rules below

**Behavioral Rules (when stock > 40% capacity):**

1. **Round 1**: Always COOPERATE (signal cooperative intent)

2. **Rounds 2 to r-1**: Use "Generous Tit-for-Majority" with forgiveness
   - If ≥50% of other players cooperated last round: COOPERATE
   - If <50% of other players cooperated last round: 
     - If this is first punishment after cooperation streak: DEFECT
     - If already punishing: 70% chance COOPERATE (forgiveness), 30% chance DEFECT

3. **Final Round (r)**: 
   - If stock ≥ capacity × 0.6 AND majority cooperated in round r-1: COOPERATE
   - Otherwise: DEFECT

### Pseudocode

```
function decide_action(round, stock, capacity, history, n):
    # Emergency conservation override
    if stock <= capacity * 0.4:
        return COOPERATE
    
    # First round - signal cooperation
    if round == 1:
        return COOPERATE
    
    # Last round logic
    if round == r:
        if stock >= capacity * 0.6 AND majority_cooperated_last_round(history):
            return COOPERATE
        else:
            return DEFECT
    
    # Middle rounds - Generous Tit-for-Majority
    last_round_cooperators = count_cooperators(history[round-1])
    majority_threshold = (n-1) / 2  # excluding self
    
    if last_round_cooperators >= majority_threshold:
        return COOPERATE
    else:
        # Check if this is first punishment after cooperation
        if was_cooperating_before_defection(history, round):
            return DEFECT
        else:
            # Already punishing - show forgiveness
            return COOPERATE with probability 0.7, DEFECT with probability 0.3
```

### Edge Case Handling

**Stock Depletion Crisis:**
- When stock drops below 40% capacity, immediately switch to pure cooperation regardless of others' behavior
- This prevents complete resource collapse

**Early Game:**
- Always cooperate in round 1 to signal cooperative intent
- This gives the best chance for establishing mutual cooperation

**End Game:**
- In the final round, only cooperate if resource levels are healthy (≥60% capacity) and others showed cooperation in the previous round
- This prevents being exploited in the final round while maintaining cooperation when the resource is abundant

**Punishment and Forgiveness:**
- Punish defection for exactly one round, then offer forgiveness
- This prevents endless retaliation cycles while still deterring exploitation

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Resource Conservation**: Prioritizes long-term sustainability over short-term gains
2. **Trust Building**: Always starts cooperatively and offers regular forgiveness
3. **Collective Benefit**: Uses majority-based decision making rather than individual retaliation
4. **Emergency Cooperation**: Overrides all other considerations when the resource is critically low
5. **Graduated Response**: Provides measured responses rather than harsh permanent punishment

The strategy assumes other cooperative LLMs will recognize the importance of resource sustainability and reciprocate cooperative behavior, while protecting against purely exploitative strategies through limited, proportional punishment.
'''

description_COOPERATIVE_25 = '''
# Adaptive Cooperative Strategy: "Threshold Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while maintaining individual competitiveness. It recognizes that sustainable cooperation requires both commitment to the common good and adaptive responses to others' behavior.

## Decision Rules

### Primary Rule: Stock-Based Cooperation Threshold
```pseudocode
if current_stock >= (capacity * 0.6):
    play COOPERATE
else:
    apply Secondary Rules
```

### Secondary Rules (when stock < 60% capacity):

1. **Reciprocity Check**: 
   ```pseudocode
   if last_round_cooperation_rate >= 0.5:
       play COOPERATE
   else:
       play DEFECT
   ```

2. **Recovery Assistance**: Even when others defect, occasionally cooperate to help rebuild stock:
   ```pseudocode
   if current_stock < (capacity * 0.3) AND round_number % 3 == 0:
       play COOPERATE  // Help every 3rd round during crisis
   ```

## Edge Case Handling

### First Round
- **Always COOPERATE**: Establish cooperative intent and avoid immediate tragedy of commons

### Last Round (when r is known)
- **COOPERATE if stock >= 40% capacity**: Maintain cooperative reputation
- **DEFECT if stock < 40% capacity**: Extract remaining value since no future consequences

### Critical Stock Levels
- **Stock < 20% capacity**: Play DEFECT unless cooperation rate in last 2 rounds was 100%
- **Stock approaches 0**: Switch to pure DEFECT for survival

## Adaptive Components

### Forgiveness Mechanism
After 3 consecutive rounds of high cooperation (>75% of players cooperating):
- Reset any "punishment" states
- Return to primary cooperation threshold rule

### Escalation Response
If cooperation rate drops below 25% for 2 consecutive rounds:
- Temporarily lower cooperation threshold to 40% capacity
- Gradually increase back to 60% over next 3 rounds if others improve

## Complete Strategy Logic

```pseudocode
function decide_action(current_stock, round_number, total_rounds, history):
    cooperation_threshold = capacity * 0.6
    
    // First round: always cooperate
    if round_number == 1:
        return COOPERATE
    
    // Last round: conditional cooperation
    if round_number == total_rounds:
        if current_stock >= capacity * 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    // Calculate recent cooperation rate
    last_round_coop_rate = count_cooperators_last_round() / n
    recent_coop_rate = count_cooperators_last_2_rounds() / (2 * n)
    
    // High stock: default cooperation
    if current_stock >= cooperation_threshold:
        return COOPERATE
    
    // Medium stock: reciprocity-based
    if current_stock >= capacity * 0.3:
        if last_round_coop_rate >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    // Low stock: crisis management
    if current_stock >= capacity * 0.2:
        if recent_coop_rate >= 0.75:  // High recent cooperation
            return COOPERATE
        else if round_number % 3 == 0:  // Recovery assistance
            return COOPERATE
        else:
            return DEFECT
    
    // Critical stock: survival mode
    if recent_coop_rate >= 1.0:  // Only if everyone cooperated recently
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Rationale

1. **Long-term Focus**: Prioritizes stock sustainability over short-term gains
2. **Conditional Cooperation**: Rewards cooperative behavior while protecting against exploitation
3. **Crisis Recovery**: Provides mechanism to rebuild depleted resources
4. **Adaptive Response**: Adjusts to opponents' strategies while maintaining cooperative core
5. **Clear Signals**: Actions clearly communicate cooperative intent and reciprocal expectations

This strategy balances the cooperative ideal with practical game theory, aiming to foster sustainable resource management while remaining competitive against various opponent strategies.
'''

description_COOPERATIVE_26 = '''
# Conditional Cooperative Strategy with Sustainability Focus

## Core Philosophy
This strategy prioritizes long-term sustainability while encouraging cooperative behavior through conditional reciprocity. It balances forgiveness with accountability to maintain resource viability.

## Decision Rules

### Primary Rule: Conditional Cooperation with Sustainability Threshold
```pseudocode
if stock_level < (capacity * 0.3):
    return COOPERATE  // Emergency conservation mode
else if round_number == 1:
    return COOPERATE  // Start cooperatively
else:
    return conditional_response()
```

### Conditional Response Logic
```pseudocode
function conditional_response():
    // Calculate cooperation rate in previous round
    coop_rate = count_cooperators_last_round / total_players
    
    // Generous Tit-for-Tat with majority threshold
    if coop_rate >= 0.5:
        return COOPERATE  // Reward majority cooperation
    else:
        // Check for improvement trend
        if rounds_played >= 3:
            recent_coop_trend = average_coop_rate_last_3_rounds
            if recent_coop_trend > previous_3_round_average:
                return COOPERATE  // Reward improvement
        
        return DEFECT  // Punish majority defection
```

### Special Case Handlers

#### First Round
- Always COOPERATE to signal cooperative intent and establish good starting conditions

#### Last Round  
- Apply same conditional logic (no "end-game defection")
- Maintains reputation and doesn't break cooperative equilibrium

#### Critical Stock Levels
- If stock < 30% of capacity: Force COOPERATE regardless of others' actions
- This prevents complete resource collapse

#### Recovery Phase
```pseudocode
if stock_level < (capacity * 0.5) AND improving_trend():
    return COOPERATE  // Help rebuild depleted resources
```

## Key Features

### 1. **Sustainability First**
- Never defect when resources are critically low (< 30% capacity)
- This ensures long-term viability even if others don't cooperate

### 2. **Generous Reciprocity**
- Only requires 50% cooperation rate to continue cooperating
- More forgiving than strict tit-for-tat
- Rewards improvement trends even after defection

### 3. **Trend Recognition**
- Monitors 3-round moving averages to detect behavioral changes
- Gives credit for players trying to return to cooperation

### 4. **No End-Game Exploitation**
- Maintains consistent behavior in final rounds
- Builds reputation for future interactions (if any)

### 5. **Clear Signaling**
- Predictable responses help others learn optimal strategies
- Cooperative start signals willingness to work together

## Expected Outcomes

**Against Cooperative Players:** Mutual cooperation leading to sustained high payoffs

**Against Mixed Strategies:** Encourages shift toward cooperation through conditional rewards

**Against Aggressive Defectors:** Protects resources during critical periods while attempting to induce cooperation

**Resource Management:** Prevents complete depletion while maximizing sustainable extraction

This strategy balances individual rationality with collective welfare, making it robust against various opponent types while maintaining the resource base that benefits everyone.
'''

description_COOPERATIVE_27 = '''
# Graduated Cooperation Strategy (GCS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving enough to maintain cooperation, but firm enough to discourage exploitation. It uses a graduated response system that escalates defection only when cooperation consistently fails.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Establish cooperative intent and give all players the best chance at sustainable resource management

### Rounds 2 to r-1: Graduated Response System

**Primary Rule**: Cooperate if the resource is sustainable
- If `current_stock >= capacity * 0.6`: **Cooperate (C)**
- If `current_stock < capacity * 0.6`: **Apply punishment logic**

**Punishment Logic** (when stock < 60% of capacity):
1. Count defectors in previous round: `defector_count`
2. Calculate cooperation ratio over last 3 rounds: `coop_ratio = cooperators_observed / total_observations`

**Graduated Response**:
- If `coop_ratio >= 0.5` (majority cooperative): **Cooperate (C)**
- If `0.25 <= coop_ratio < 0.5` (mixed behavior): 
  - **Defect (D)** with probability = `1 - coop_ratio`
  - **Cooperate (C)** otherwise
- If `coop_ratio < 0.25` (mostly defective): **Defect (D)**

### Final Round: Conditional Defection
- If `current_stock >= capacity * 0.8`: **Cooperate (C)** (preserve the resource for demonstration)
- Otherwise: **Defect (D)** (no future rounds to worry about)

## Pseudocode

```python
def graduated_cooperation_strategy(round_num, total_rounds, current_stock, capacity, 
                                 action_history, n_players):
    
    # Round 1: Always cooperate
    if round_num == 1:
        return 'C'
    
    # Final round: Conditional defection
    if round_num == total_rounds:
        if current_stock >= capacity * 0.8:
            return 'C'
        else:
            return 'D'
    
    # Middle rounds: Graduated response
    sustainability_threshold = capacity * 0.6
    
    if current_stock >= sustainability_threshold:
        return 'C'
    else:
        # Calculate cooperation ratio over last 3 rounds (or all available rounds)
        recent_rounds = min(3, round_num - 1)
        total_observations = 0
        cooperators_observed = 0
        
        for i in range(max(0, round_num - recent_rounds - 1), round_num - 1):
            for player_actions in action_history[i]:
                total_observations += 1
                if player_actions == 'C':
                    cooperators_observed += 1
        
        if total_observations == 0:  # Safety check
            return 'C'
        
        coop_ratio = cooperators_observed / total_observations
        
        # Graduated response based on cooperation ratio
        if coop_ratio >= 0.5:
            return 'C'
        elif coop_ratio >= 0.25:
            # Probabilistic response - defect with probability (1 - coop_ratio)
            import random
            if random.random() < (1 - coop_ratio):
                return 'D'
            else:
                return 'C'
        else:
            return 'D'
```

## Key Features

1. **Resource-Aware**: Primary decision criterion is resource sustainability, not just opponent behavior
2. **Graduated Punishment**: Escalates from cooperation → probabilistic defection → full defection based on observed cooperation levels
3. **Forgiving**: Quickly returns to cooperation when others do
4. **Memory**: Uses 3-round moving window to balance responsiveness with stability
5. **Edge Case Handling**: 
   - First round establishes cooperative intent
   - Last round accounts for end-game dynamics
   - Handles insufficient history gracefully

## Strategic Rationale

- **Against Other Cooperators**: Maintains mutual cooperation for maximum collective benefit
- **Against Mixed Strategies**: Adapts punishment intensity to observed cooperation levels
- **Against Defectors**: Eventually matches defection to avoid exploitation while preserving some cooperation attempts
- **Resource Depletion**: Prioritizes resource sustainability over short-term punishment, switching to cooperation when the resource recovers

This strategy balances cooperation, sustainability, and protection against exploitation while remaining simple enough to be predictable to other cooperative strategies.
'''

description_COOPERATIVE_28 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy is built on the principle that cooperation is beneficial for all players in the long term, but must be protected from exploitation. It uses a conditional cooperation approach with built-in forgiveness to maintain cooperative equilibria while deterring defection.

## Strategy Description

### Decision Rules

**Primary Rule: Tit-for-Tat with Majority Threshold**
- **Cooperate** if the majority of other players cooperated in the previous round
- **Defect** if the majority of other players defected in the previous round
- In case of ties (equal C and D), default to **Cooperate**

**Stock Sustainability Check**
- If current stock < capacity/4, **Cooperate** regardless of others' previous actions (emergency conservation)
- This prevents total resource collapse even when others are defecting

**Forgiveness Mechanism**
- Every 3rd consecutive round of mutual defection, attempt to restart cooperation by playing **Cooperate**
- This helps escape defection cycles and signals willingness to return to cooperation

### Edge Case Handling

**Round 1 (First Round)**
- Always **Cooperate** to signal cooperative intent and establish a baseline for reciprocity

**Final Round**
- If stock > capacity/2: **Cooperate** (maintain reputation for repeated interactions mindset)
- If stock ≤ capacity/2: Follow primary rule (don't be exploited when resources are scarce)

**Critical Stock Levels**
- Stock ≤ capacity/10: Always **Cooperate** (resource near depletion)
- Stock ≥ capacity×0.9: Follow primary rule (resource abundance allows normal strategy)

## Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    // Round 1: Always cooperate
    if round == 1:
        return C
    
    // Emergency conservation - very low stock
    if stock < capacity / 4:
        return C
    
    // Count previous round's cooperators and defectors
    previous_round = history[round - 1]
    cooperators = count_actions(previous_round, C, excluding_self=True)
    defectors = count_actions(previous_round, D, excluding_self=True)
    
    // Forgiveness mechanism - check for defection cycles
    if round >= 4:
        consecutive_mutual_defection = check_consecutive_mutual_defection(history, 3)
        if consecutive_mutual_defection and (round % 3 == 1):
            return C  // Attempt cooperation restart
    
    // Final round special handling
    if round == max_rounds:
        if stock <= capacity / 2:
            // Follow primary rule when resources are scarce
            if cooperators >= defectors:
                return C
            else:
                return D
        else:
            return C  // Maintain cooperative reputation
    
    // Primary rule: majority-based tit-for-tat
    if cooperators >= defectors:
        return C
    else:
        return D

function check_consecutive_mutual_defection(history, num_rounds):
    // Check if last num_rounds all had majority defection
    for i in range(num_rounds):
        round_index = len(history) - 1 - i
        if round_index < 0:
            return False
        
        defectors = count_actions(history[round_index], D, excluding_self=False)
        if defectors <= n/2:
            return False
    
    return True
```

## Strategic Rationale

**Why This Strategy is Cooperative:**
1. **Starts with cooperation** to establish good faith
2. **Rewards cooperation** by reciprocating when others cooperate
3. **Includes forgiveness** to escape mutual defection traps
4. **Prioritizes sustainability** over short-term gains when resources are low

**Why This Strategy is Effective:**
1. **Incentivizes others to cooperate** through clear reciprocity
2. **Protects against exploitation** by punishing widespread defection
3. **Maintains resource base** through emergency conservation
4. **Adapts to different group dynamics** through majority-based decisions

**Tournament Considerations:**
- Works well against other conditional cooperators
- Protects against pure defectors while maintaining cooperation potential
- Balances individual rationality with group welfare
- Robust to different player counts and game parameters

This strategy embodies enlightened self-interest: it seeks to maintain the cooperative equilibrium that benefits everyone while protecting itself from exploitation, ultimately serving both individual and collective interests.
'''

description_COOPERATIVE_29 = '''
# Adaptive Cooperative Strategy: "Sustainable Consensus Builder"

## Core Philosophy
This strategy aims to establish and maintain cooperative equilibrium while being robust against exploitation. It recognizes that mutual cooperation leads to sustainable resource management and higher long-term payoffs for all players.

## Decision Rules

### Phase 1: Establishment (First 3 rounds or 15% of total rounds, whichever is larger)
```pseudocode
if round <= max(3, ceil(0.15 * total_rounds)):
    action = COOPERATE
```
**Rationale**: Start with clear cooperative signal to establish good faith and allow others to reciprocate.

### Phase 2: Adaptive Cooperation (Middle rounds)
```pseudocode
cooperation_rate = count_cooperators_last_round / total_players
stock_health = current_stock / capacity

if stock_health < 0.3:  // Critical stock level
    action = COOPERATE
elif cooperation_rate >= 0.6:  // Majority cooperating
    action = COOPERATE
elif cooperation_rate >= 0.4 AND my_last_action == COOPERATE:
    action = COOPERATE  // Continue cooperation if reasonable support
elif cooperation_rate < 0.4 AND count_my_recent_cooperations(3) >= 2:
    action = DEFECT  // Punish widespread defection
else:
    action = COOPERATE  // Default to cooperation
```

### Phase 3: End Game (Last 3 rounds or 10% of total rounds, whichever is larger)
```pseudocode
rounds_remaining = total_rounds - current_round + 1
end_game_threshold = max(3, ceil(0.1 * total_rounds))

if rounds_remaining <= end_game_threshold:
    if stock_health < 0.2:  // Emergency conservation
        action = COOPERATE
    elif cooperation_rate_last_3_rounds >= 0.5:
        action = COOPERATE  // Reward sustained cooperation
    else:
        // Graduated response based on remaining rounds
        if rounds_remaining == 1:
            action = DEFECT  // Final round defection
        elif rounds_remaining == 2 AND cooperation_rate < 0.3:
            action = DEFECT
        else:
            action = COOPERATE
```

## Edge Case Handling

### First Round
- **Always COOPERATE** to signal cooperative intent and establish good faith.

### Stock Depletion Crisis
```pseudocode
if current_stock < (total_players * 2):  // Near collapse
    action = COOPERATE  // Emergency conservation mode
```

### All Players Defected Last Round
```pseudocode
if cooperation_rate_last_round == 0:
    if current_stock > capacity * 0.5:  // Still healthy stock
        action = COOPERATE  // Attempt to restart cooperation
    else:
        action = COOPERATE  // Conservation is critical
```

### Oscillating Behavior Detection
```pseudocode
if detect_oscillation_pattern():  // Players alternating C/D
    action = COOPERATE  // Maintain stability
```

## Key Features

1. **Stock-Aware**: Prioritizes resource conservation when stock is critically low
2. **Majority-Responsive**: Cooperates when sufficient others are cooperating
3. **Punishment Mechanism**: Limited defection to discourage widespread defection
4. **Forgiving**: Quick return to cooperation after punishment
5. **End-Game Adapted**: Handles final rounds with measured responses

## Cooperative Alignment

This strategy is fundamentally cooperative because:
- Default action is COOPERATE (>70% of decisions expected to be cooperative)
- Prioritizes long-term sustainability over short-term gains
- Only defects as punishment mechanism or in final round
- Immediately returns to cooperation when others show cooperative behavior
- Always cooperates during resource crises

The strategy recognizes that the common pool resource game rewards collective cooperation through sustainable stock management, leading to higher cumulative payoffs for all players compared to mutual defection scenarios.
'''

description_COOPERATIVE_30 = '''
# Cooperative Strategy: "Graduated Sustainability"

## Core Philosophy
This strategy prioritizes long-term collective welfare through sustainable resource use while incorporating forgiveness and adaptability to encourage cooperation from others.

## Decision Rules

### Primary Rule: Cooperative Default with Conditional Defection
```
IF (stock_level >= sustainable_threshold AND cooperation_ratio >= minimum_cooperation)
    THEN play C
ELSE
    Apply contingency rules below
```

Where:
- `sustainable_threshold = capacity * 0.6` (ensures stock can sustain cooperation)
- `minimum_cooperation = 0.5` (at least half of other players cooperating in recent rounds)

### Contingency Rules (in order of precedence):

1. **Critical Stock Protection**
   ```
   IF stock_level < capacity * 0.3
       THEN play C (always preserve remaining stock)
   ```

2. **Reciprocal Cooperation Phase** (Rounds 1-3)
   ```
   Round 1: Always play C (establish cooperative intent)
   Rounds 2-3: Play C if majority of others played C in previous round
                Play D if majority defected (but return to C immediately after)
   ```

3. **Adaptive Majority Rule** (Middle rounds)
   ```
   Calculate recent_cooperation_ratio = (C_actions in last 3 rounds) / (total_actions in last 3 rounds)
   
   IF recent_cooperation_ratio >= 0.6
       THEN play C
   ELSE IF recent_cooperation_ratio >= 0.3
       THEN play C with probability 0.7, D with probability 0.3
   ELSE
       THEN play D (but return to testing cooperation after 2 rounds)
   ```

4. **Endgame Cooperation** (Last 20% of rounds)
   ```
   IF stock_level >= capacity * 0.4
       THEN play C (maintain sustainability for final payoffs)
   ELSE
       THEN continue adaptive majority rule
   ```

## Edge Case Handling

### First Round
- Always play C to signal cooperative intent and establish baseline

### Last Round
- Play C if stock > capacity * 0.3 (sustainable extraction)
- This maintains credibility for cooperation throughout the game

### Stock Depletion Scenarios
- If stock falls below 20% of capacity: Always play C regardless of others' actions
- If stock is zero: Automatic C (though this provides zero payoff, it's consistent)

### Opponent Behavior Patterns

**All Defectors Detected:**
```
IF all others have defected for 3+ consecutive rounds AND stock > capacity * 0.5
    THEN play D for 1 round, then return to C (punishment + forgiveness)
```

**Mixed Strategies Detected:**
```
Continue adaptive majority rule but increase forgiveness:
- Weight recent rounds more heavily (exponential decay: most recent round = 50%, previous = 30%, earlier = 20%)
```

## Pseudocode Implementation

```python
def graduated_sustainability_strategy(round_num, total_rounds, stock_level, capacity, n_players, history):
    
    # Calculate key thresholds
    sustainable_threshold = capacity * 0.6
    critical_threshold = capacity * 0.3
    endgame_start = total_rounds * 0.8
    
    # Edge case: First round
    if round_num == 1:
        return 'C'
    
    # Calculate recent cooperation ratio
    if len(history) >= 3:
        recent_actions = history[-3:]
        other_players_actions = [get_others_actions(round_actions, n_players) for round_actions in recent_actions]
        cooperation_ratio = sum(actions.count('C') for actions in other_players_actions) / sum(len(actions) for actions in other_players_actions)
    else:
        recent_actions = history
        other_players_actions = [get_others_actions(round_actions, n_players) for round_actions in recent_actions]
        cooperation_ratio = sum(actions.count('C') for actions in other_players_actions) / max(1, sum(len(actions) for actions in other_players_actions))
    
    # Critical stock protection
    if stock_level < critical_threshold:
        return 'C'
    
    # Reciprocal cooperation phase (early rounds)
    if round_num <= 3:
        if round_num == 1:
            return 'C'
        else:
            last_round_others = get_others_actions(history[-1], n_players)
            majority_cooperated = last_round_others.count('C') > last_round_others.count('D')
            return 'C' if majority_cooperated else ('D' if round_num == 2 else 'C')
    
    # Endgame cooperation
    if round_num >= endgame_start:
        if stock_level >= capacity * 0.4:
            return 'C'
    
    # Adaptive majority rule
    if cooperation_ratio >= 0.6:
        return 'C'
    elif cooperation_ratio >= 0.3:
        return 'C' if random.random() < 0.7 else 'D'
    else:
        # Check if we're in punishment phase
        if is_in_punishment_phase(history, round_num):
            return 'C'  # Return to cooperation after punishment
        return 'D'

def is_in_punishment_phase(history, current_round):
    # Implementation detail: track if we recently defected due to low cooperation
    # Return to cooperation after 1-2 rounds of defection
    pass
```

## Strategy Rationale

1. **Sustainability Focus**: Prioritizes long-term resource availability over short-term gains
2. **Forgiveness**: Doesn't permanently punish defectors, allowing for redemption
3. **Adaptability**: Responds to observed cooperation levels rather than rigid rules
4. **Signal Clarity**: Consistent early cooperation signals cooperative intent
5. **Endgame Stability**: Maintains cooperation even in final rounds to preserve credibility

This strategy balances the cooperative goal with practical considerations about opponent behavior, ensuring the common pool remains viable while encouraging others toward sustainable extraction patterns.
'''

description_COOPERATIVE_31 = '''
# Adaptive Tit-for-Tat with Stock Management (ATTSM)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to maintain long-term sustainability of the common pool resource. It starts cooperatively but responds to defection patterns while considering the current stock health.

## Decision Rules

### Primary Decision Framework:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if stock < capacity * 0.2:  // Emergency threshold (20% of capacity)
        return COOPERATE
    
    if round == final_round:
        return apply_final_round_logic()
    
    return adaptive_response(history, stock)
```

### Adaptive Response Logic:
```pseudocode
function adaptive_response(history, stock):
    recent_defection_rate = calculate_defection_rate(last_3_rounds)
    overall_defection_rate = calculate_defection_rate(all_history)
    
    // Forgiveness mechanism - reset hostility if sustained cooperation observed
    if recent_defection_rate == 0 and len(recent_cooperation_streak) >= 2:
        cooperation_bias = 0.8
    else:
        cooperation_bias = 0.5
    
    // Stock health factor
    stock_health = stock / capacity
    
    if stock_health > 0.7:  // Healthy stock
        defection_threshold = 0.4
    elif stock_health > 0.4:  // Moderate stock
        defection_threshold = 0.3
    else:  // Low stock
        defection_threshold = 0.2
    
    if recent_defection_rate > defection_threshold:
        // Proportional response: defect probability based on opponent defection rate
        defect_probability = min(recent_defection_rate * 0.8, 0.6)
        return DEFECT if random() < defect_probability else COOPERATE
    else:
        return COOPERATE if random() < cooperation_bias else DEFECT
```

### Final Round Logic:
```pseudocode
function apply_final_round_logic():
    // In final round, consider the futility of punishment
    if overall_cooperation_rate > 0.6:
        return COOPERATE  // Reward good behavior
    elif stock < capacity * 0.3:
        return COOPERATE  // Don't destroy remaining resources
    else:
        // Mild retaliation if opponents have been mostly uncooperative
        return DEFECT if overall_defection_rate > 0.7 else COOPERATE
```

## Key Features

### 1. **Graduated Response**
- Not pure tit-for-tat; responds proportionally to defection rates
- Uses probabilistic defection rather than deterministic punishment
- Considers both recent behavior (last 3 rounds) and overall patterns

### 2. **Stock-Aware Decision Making**
- Emergency cooperation when stock drops below 20% of capacity
- Adjusts tolerance for defection based on stock health
- Prioritizes sustainability over short-term gains

### 3. **Forgiveness Mechanism**
- Resets hostile behavior after observing sustained cooperation
- Prevents permanent feuds that destroy the resource
- Maintains cooperative bias (80%) when opponents return to cooperation

### 4. **First-Round Cooperation**
- Always cooperates in round 1 to signal cooperative intent
- Establishes foundation for potential mutual cooperation

### 5. **Contextual Final Round**
- Doesn't automatically defect in final round
- Rewards cooperative opponents even when no future interaction exists
- Only retaliates against consistently uncooperative opponents

## Edge Case Handling

- **All opponents defect consistently**: Strategy will increase defection probability but cap it at 60% to maintain some cooperation
- **Mixed opponent behavior**: Responds to the average defection rate with graduated response
- **Stock depletion**: Prioritizes cooperation when resource is critically low
- **Late-game scenarios**: Maintains cooperative stance unless facing overwhelmingly uncooperative opponents

## Cooperative Alignment

This strategy embodies cooperation through:
1. **Default cooperative stance** - starts and prefers cooperation
2. **Sustainability focus** - prioritizes long-term resource health
3. **Forgiveness** - returns to cooperation when opponents do
4. **Graduated response** - avoids escalating conflicts unnecessarily
5. **Final round generosity** - rewards cooperative opponents even without future benefit

The strategy aims to foster cooperative equilibrium while protecting against exploitation, ensuring both individual success and collective resource sustainability.
'''

description_COOPERATIVE_32 = '''
I'll design a cooperative strategy called **"Adaptive Threshold Cooperation with Forgiveness"** that balances long-term sustainability with strategic resilience.

## Strategy: Adaptive Threshold Cooperation with Forgiveness

### Core Principle
Cooperate by default to maintain the common pool, but adapt based on the collective behavior of others while maintaining a forgiving attitude to encourage return to cooperation.

### Decision Rules

```pseudocode
STRATEGY: Adaptive_Threshold_Cooperation_Forgiveness

INITIALIZE:
- cooperation_threshold = 0.5  // Minimum fraction of others cooperating needed
- forgiveness_counter = 0      // Tracks rounds since last mass defection
- last_round_cooperators = n   // Assume all start cooperative

DECISION_LOGIC(current_round, game_history):
    // Special cases first
    IF current_round == 1:
        RETURN C  // Always cooperate in first round
    
    IF current_round == final_round:
        IF stock_level >= stock_threshold_for_final:
            RETURN C  // Cooperate if stock is healthy
        ELSE:
            RETURN D  // Take what you can if stock is depleted
    
    // Calculate recent cooperation rate of others
    others_cooperation_rate = count_others_cooperation(previous_round) / (n-1)
    
    // Main decision logic
    IF others_cooperation_rate >= cooperation_threshold:
        forgiveness_counter = min(forgiveness_counter + 1, 3)
        RETURN C
    
    ELSE IF forgiveness_counter > 0:
        // Give benefit of doubt for a few rounds after cooperation
        forgiveness_counter = forgiveness_counter - 1
        RETURN C
    
    ELSE IF stock_level < critical_stock_threshold:
        // Emergency cooperation to prevent collapse
        RETURN C
    
    ELSE:
        // Defensive defection when others are consistently defecting
        // and stock isn't critically low
        RETURN D

HELPER_FUNCTIONS:
    critical_stock_threshold = capacity * 0.15  // 15% of capacity
    stock_threshold_for_final = capacity * 0.25 // 25% of capacity
    
    count_others_cooperation(round):
        return number of other players who played C in that round
```

### Detailed Strategy Components

1. **Initial Cooperation**: Always cooperate in round 1 to signal cooperative intent and give the pool the best start.

2. **Threshold-Based Response**: Monitor if at least 50% of other players are cooperating. This creates a reasonable bar that accounts for some defection while maintaining cooperation incentives.

3. **Forgiveness Mechanism**: After periods of mutual cooperation, give others the benefit of the doubt for 1-3 rounds even if they defect, recognizing that occasional defection might be strategic rather than purely selfish.

4. **Emergency Cooperation**: When stock falls below 15% of capacity, always cooperate regardless of others' actions to prevent total collapse - this is enlightened self-interest.

5. **Final Round Logic**: In the last round, cooperate only if stock is reasonably healthy (>25% capacity), otherwise take what you can since there's no future to preserve.

6. **Defensive Defection**: Only defect when others are consistently defecting AND the stock isn't critically low, preventing exploitation while maintaining long-term thinking.

### Edge Case Handling

- **First Round**: Always C (optimistic start)
- **Last Round**: C if stock > 25% capacity, else D (endgame realism)
- **Stock Depletion**: Emergency cooperation when stock < 15% capacity
- **All Others Defect**: Still cooperate if stock is critically low, otherwise defect defensively
- **Mixed Signals**: Use forgiveness counter to avoid overreacting to temporary defection

### Cooperative Alignment

This strategy embodies cooperation by:
- **Defaulting to cooperation** and requiring evidence of sustained defection to change
- **Prioritizing long-term sustainability** over short-term gains
- **Including forgiveness** to recover from temporary conflicts
- **Emergency cooperation** to prevent total resource collapse
- **Transparent threshold** that others can learn and potentially coordinate around

The strategy is designed to be "nice" (starts cooperating), "forgiving" (doesn't permanently punish), "clear" (has predictable rules others can learn), and "protective" (won't be completely exploited), making it well-suited for promoting cooperative outcomes in the tournament environment.
'''

description_AGGRESSIVE_3 = '''
# Aggressive Strategy: "Shark Feeder"

## Core Philosophy
This strategy operates on the principle that **early aggression feeds late dominance**. By creating information asymmetries and exploiting cooperative opponents early, we maximize total payoff while maintaining strategic flexibility.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    // Phase 1: Early Exploitation (First 20% of rounds)
    if round <= max(1, r * 0.2):
        return DEFECT  // Always defect early to test opponents and grab value
    
    // Phase 2: Adaptive Aggression (Middle rounds)
    if round <= r - max(2, r * 0.15):
        cooperation_rate = count_cooperators_last_round(history) / n
        stock_health = stock / capacity
        
        // Exploit cooperative environments
        if cooperation_rate >= 0.6 and stock_health > 0.3:
            return DEFECT  // Free ride on others' cooperation
        
        // Conditional cooperation when stock is critically low
        if stock_health <= 0.15:
            return COOPERATE  // Emergency conservation
        
        // Punish high defection rates
        if cooperation_rate <= 0.3:
            return DEFECT  // Join the feeding frenzy
        
        // Default aggressive stance
        return DEFECT
    
    // Phase 3: Endgame Extraction (Final rounds)
    else:
        // Pure extraction - no future to worry about
        return DEFECT
```

### Detailed Decision Matrix:

**Round 1:** Always DEFECT
- Establishes aggressive reputation
- Tests opponent strategies
- Maximizes early payoff

**Early Rounds (2 to 20% of r):** Always DEFECT
- Continue exploitation while stock is high
- Force opponents into defensive positions
- Gather intelligence on opponent strategies

**Middle Rounds:** Conditional logic based on:
1. **Stock Level Priority:**
   - Stock > 60% capacity: DEFECT (abundant resources)
   - Stock 15-60% capacity: Evaluate cooperation rates
   - Stock < 15% capacity: COOPERATE (emergency only)

2. **Opponent Behavior Analysis:**
   - If ≥60% cooperated last round: DEFECT (exploit cooperators)
   - If ≤30% cooperated last round: DEFECT (join exploitation)
   - Otherwise: DEFECT (default aggressive)

**Final 15% of rounds:** Always DEFECT
- No future consequences
- Pure value extraction
- Maximize terminal payoffs

## Edge Case Handling

### First Round Special Case:
Always DEFECT to:
- Signal aggressive intent
- Maximize payoff from full stock
- Establish early advantage

### Last Round Special Case:
Always DEFECT because:
- No retaliation possible
- Pure value extraction opportunity
- Dominant strategy in final period

### Stock Depletion Crisis (Stock < 15% capacity):
Temporarily COOPERATE only when:
- Stock is critically low AND
- Not in final 15% of rounds AND
- More than 2 rounds remaining

This prevents complete resource collapse while maintaining overall aggressive stance.

### Opponent Pattern Recognition:
- Track individual player cooperation rates
- Identify "always cooperators" for maximum exploitation
- Detect tit-for-tat players to avoid punishment spirals when stock is low

## Aggressive Alignment

This strategy embodies aggression through:

1. **First-Mover Advantage:** Always defect early to claim maximum value
2. **Free-Rider Exploitation:** Systematically exploit cooperative opponents
3. **Information Warfare:** Use early aggression to gather intelligence while opponents reveal strategies
4. **Endgame Dominance:** Extract maximum value when consequences are minimal
5. **Conditional Mercy:** Only cooperate when absolutely necessary for resource preservation
6. **Risk Tolerance:** Accept short-term punishment for long-term dominance

The strategy prioritizes **individual payoff maximization** over collective welfare, using cooperation only as a tactical tool to prevent complete system collapse when it serves our interests.
'''

description_AGGRESSIVE_4 = '''
# Aggressive Strategy: "Predatory Exploitation"

## Core Philosophy
This strategy maximizes immediate payoffs while strategically managing the resource to maintain exploitation opportunities. It assumes opponents are either naive cooperators or will eventually be forced into cooperation due to resource pressure.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(current_round, stock_level, game_history):
    if current_round == 1:
        return DEFECT  // Establish dominance immediately
    
    if current_round == final_round:
        return DEFECT  // Extract maximum value in final round
    
    if stock_level < capacity * 0.15:
        return COOPERATE  // Emergency conservation to prevent collapse
    
    if stock_level > capacity * 0.8:
        return DEFECT  // High stock = maximum exploitation opportunity
    
    // Adaptive exploitation based on opponent behavior
    recent_defector_count = count_defectors_last_3_rounds()
    
    if recent_defector_count >= n/2:
        // If many opponents defecting, join the feeding frenzy
        return DEFECT
    else:
        // Exploit cooperative opponents
        if stock_level > capacity * 0.3:
            return DEFECT
        else:
            return COOPERATE  // Minimal conservation only when necessary
```

## Strategy Components

### 1. **Immediate Dominance**
- **First Round**: Always DEFECT to establish aggressive positioning
- Signals to opponents that cooperation won't be reciprocated
- Maximizes early payoffs when stock is at peak

### 2. **Opportunistic Exploitation**
- DEFECT whenever stock > 80% of capacity
- Take advantage of any resource abundance
- Force opponents into reactive positions

### 3. **Strategic Resource Management**
- Only COOPERATE when stock falls below 15% of capacity
- This prevents complete resource collapse while maintaining aggressive stance
- Resume defection as soon as stock recovers above 30%

### 4. **Endgame Extraction**
- **Final Round**: Always DEFECT regardless of stock level
- No future consequences, so maximize immediate payoff
- Extract maximum value before game ends

### 5. **Competitive Adaptation**
- Monitor opponent behavior over last 3 rounds
- If ≥50% of opponents are defecting, join the exploitation
- If opponents are mostly cooperating, continue exploiting them

## Edge Case Handling

### **Critical Stock Levels**:
- Stock < 15% capacity: Emergency cooperation to prevent collapse
- Stock 15-30%: Conditional cooperation based on recent opponent behavior
- Stock 30-80%: Default to defection unless opponents are also highly aggressive
- Stock > 80%: Always defect

### **Early Game** (Rounds 1-3):
- Round 1: DEFECT (dominance establishment)
- Rounds 2-3: DEFECT unless stock drops to critical levels

### **Mid Game**:
- Maintain aggressive posture
- Only cooperate for resource preservation when absolutely necessary

### **Late Game** (Final 3 rounds):
- Increase aggression as future rounds diminish
- Final round: Always DEFECT

## Aggressive Mindset Alignment

1. **Maximize Individual Payoff**: Prioritizes personal gains over collective welfare
2. **Exploit Cooperation**: Takes advantage of opponents who cooperate
3. **Minimal Conservation**: Only preserves resources to maintain exploitation opportunities
4. **Dominance Signaling**: Uses early aggressive moves to establish psychological advantage
5. **Endgame Maximization**: Extracts maximum value when consequences are minimal

## Expected Outcomes

This strategy should perform well against:
- Naive always-cooperate strategies
- Tit-for-tat strategies (which will be exploited early)
- Conservative resource management strategies

The strategy balances aggression with just enough resource management to prevent complete system collapse, allowing for sustained exploitation throughout the game while maximizing individual payoffs.
'''

description_AGGRESSIVE_5 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy is built on aggressive resource extraction with calculated exploitation of cooperative opponents. The key insight is that in a common pool resource game, early aggression can secure higher payoffs while potentially forcing opponents into defensive cooperation patterns.

## Decision Rules

### Primary Strategy Framework:
```pseudocode
STRATEGY: Resource Raider

INITIALIZE:
- cooperation_threshold = 0.3  // 30% cooperation rate to maintain exploitation
- stock_panic_level = capacity * 0.2  // Emergency conservation at 20% capacity
- endgame_rounds = 3  // Final rounds for maximum extraction

FOR each round t:
    current_stock_ratio = current_stock / capacity
    rounds_remaining = r - t + 1
    
    // Rule 1: Endgame Exploitation
    IF rounds_remaining <= endgame_rounds:
        RETURN DEFECT
    
    // Rule 2: Crisis Exploitation  
    IF current_stock_ratio <= stock_panic_level:
        IF last_round_had_majority_cooperators():
            RETURN DEFECT  // Exploit their desperation
        ELSE:
            RETURN COOPERATE  // Minimal conservation only when forced
    
    // Rule 3: Aggressive Opening
    IF t <= 2:  // First two rounds
        RETURN DEFECT
    
    // Rule 4: Exploitation Pattern
    opponent_coop_rate = calculate_opponent_cooperation_rate()
    IF opponent_coop_rate >= cooperation_threshold:
        RETURN DEFECT  // Exploit cooperative opponents
    ELSE:
        // Switch to occasional cooperation to prevent total collapse
        IF t % 3 == 0:  // Every third round
            RETURN COOPERATE
        ELSE:
            RETURN DEFECT
```

## Specific Edge Cases

### First Round:
**ALWAYS DEFECT** - Establish dominance and test opponent responses. Maximum immediate payoff while stock is at peak.

### Last Round:
**ALWAYS DEFECT** - No future consequences, extract maximum value. Classic endgame exploitation.

### Stock Depletion Scenarios:
- **High stock (>70% capacity)**: Pure defection, maximize extraction
- **Medium stock (20-70% capacity)**: Conditional cooperation only when opponents show high cooperation rates
- **Critical stock (<20% capacity)**: Strategic cooperation if it enables future exploitation, otherwise continue defecting

### Opponent Pattern Recognition:
```pseudocode
FUNCTION calculate_exploitation_opportunity():
    recent_opponent_actions = last_3_rounds_opponent_actions()
    
    // Identify "tit-for-tat" players to exploit
    IF opponent_mirrors_my_actions():
        RETURN "EXPLOIT_COOPERATIVE_PHASE"
    
    // Identify consistent cooperators
    IF opponent_cooperation_rate() > 0.6:
        RETURN "CONTINUOUS_EXPLOITATION"
    
    // Identify aggressive competitors
    IF opponent_cooperation_rate() < 0.3:
        RETURN "MUTUAL_DESTRUCTION"  // Minimal cooperation to prevent total collapse
```

## Aggressive Tactical Elements

1. **Front-Loading Aggression**: Defect heavily in early rounds when stock is highest, maximizing per-round payoffs.

2. **Cooperative Exploitation**: When opponents show cooperative tendencies, immediately exploit with defection to maximize the payoff differential.

3. **Endgame Maximization**: Complete resource extraction in final rounds regardless of stock level - no incentive to preserve resources after game end.

4. **Strategic Intimidation**: Consistent early defection signals aggressive intent, potentially forcing opponents into defensive cooperation.

5. **Selective Conservation**: Only cooperate when it's necessary to prevent total resource collapse that would hurt future defection opportunities.

## Key Aggressive Advantages

- **Higher Expected Payoffs**: Defection always yields double the individual payoff of cooperation in any given round
- **Opponent Exploitation**: Takes advantage of any cooperative behavior by opponents
- **Resource Monopolization**: Captures maximum share during high-stock periods
- **Psychological Pressure**: Forces opponents to choose between mutual destruction or accepting lower payoffs through cooperation

This strategy prioritizes individual gain over collective welfare, exploiting the tension between short-term advantage and long-term sustainability that defines the common pool resource dilemma.
'''

description_AGGRESSIVE_6 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with strategic sustainability**. The goal is to extract as much value as possible while keeping the resource pool viable enough to continue exploitation. Think of it as "strip mining with just enough restraint to prevent total collapse."

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Default Action: DEFECT**
- **Rationale**: Establish dominance early and extract maximum value while the stock is at peak levels
- **Exception**: None - pure aggression to maximize early gains

### Phase 2: Calculated Predation (Rounds r/3+1 to 2r/3)
- **Primary Action: DEFECT**
- **Conditional Cooperation**: Cooperate ONLY if:
  - Current stock < capacity/4 (emergency sustainability threshold)
  - AND more than 3 rounds remain
  - AND at least 50% of other players cooperated in the previous round
- **Rationale**: Maintain exploitation while preventing total resource collapse that would eliminate future opportunities

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
- **Action**: Always **DEFECT**
- **Rationale**: Extract maximum remaining value since there's no future to preserve

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Logic**: Start aggressively to signal intentions and maximize early advantage when stock is highest

### Last Round
- **Action**: DEFECT
- **Logic**: No future consequences, so extract maximum possible value

### Stock Depletion Emergency
- **Trigger**: If stock falls below capacity/8
- **Action**: Cooperate for exactly ONE round only
- **Return**: Immediately return to defection regardless of others' responses

### All Others Defecting
- **Response**: Continue defecting
- **Logic**: If everyone is being aggressive, being the "nice guy" just means being the sucker

## Pseudocode

```
function aggressive_strategy(round, current_stock, capacity, total_rounds, history):
    
    // Phase determination
    early_phase_end = total_rounds / 3
    middle_phase_end = 2 * total_rounds / 3
    
    // Emergency sustainability check
    critical_threshold = capacity / 8
    low_threshold = capacity / 4
    
    // Last round - always defect
    if round == total_rounds:
        return DEFECT
    
    // Emergency cooperation (only if not in endgame)
    if current_stock < critical_threshold AND round <= middle_phase_end:
        return COOPERATE
    
    // Phase 1: Pure aggression
    if round <= early_phase_end:
        return DEFECT
    
    // Phase 2: Calculated exploitation
    if round <= middle_phase_end:
        if current_stock < low_threshold AND 
           total_rounds - round > 3 AND
           cooperation_rate_last_round >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    // Phase 3: Endgame extraction
    else:
        return DEFECT
```

## Strategic Advantages

1. **Front-loaded Value**: Maximizes payoffs when stock levels are highest
2. **Intimidation Factor**: Consistent defection may discourage others from competing aggressively
3. **Minimal Cooperation**: Only cooperates when absolutely necessary for resource sustainability
4. **Endgame Focus**: Recognizes that final rounds require pure extraction since there's no tomorrow

## Risk Management

The strategy includes just enough cooperation to prevent complete resource collapse in the middle game, but only when:
- The situation is dire (stock < 25% capacity)
- There are enough rounds left to benefit from recovery
- Other players show signs of cooperation

This ensures the resource remains exploitable while maintaining an overwhelmingly aggressive stance that maximizes individual payoffs at others' expense.
'''

description_AGGRESSIVE_7 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining resource viability for continued exploitation**. The key insight is that being overly aggressive early can destroy the resource base, while being too cooperative allows opponents to exploit our restraint.

## Decision Rules

### Primary Strategy: Conditional Defection
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Establish aggressive stance immediately
    
    if round == final_round:
        return DEFECT  // Extract maximum value in final round
    
    // Calculate cooperation rate of opponents in previous round
    opponent_coop_rate = count_cooperators_last_round() / (n-1)
    
    // Stock sustainability check
    stock_ratio = current_stock / capacity
    
    if stock_ratio <= 0.15:  // Emergency conservation threshold
        if opponent_coop_rate >= 0.6:
            return COOPERATE  // Only cooperate if others are likely to
        else:
            return DEFECT     // Race to the bottom if others won't cooperate
    
    if stock_ratio <= 0.3:   // Low stock warning
        if opponent_coop_rate >= 0.8:
            return COOPERATE  // High confidence others will cooperate
        else:
            return DEFECT     // Don't be exploited
    
    // Normal stock levels - aggressive exploitation
    if opponent_coop_rate <= 0.3:
        return DEFECT  // Punish non-cooperative environments
    
    if opponent_coop_rate >= 0.7:
        // Exploit cooperative opponents while maintaining some sustainability
        if rounds_remaining <= 3:
            return DEFECT  // End-game extraction
        else:
            return COOPERATE  // Maintain the resource for continued exploitation
    
    // Default aggressive stance
    return DEFECT
```

## Key Strategic Elements

### 1. **Immediate Dominance Establishment**
- Always defect in Round 1 to signal aggressive intent
- Forces opponents into reactive mode from the start

### 2. **Adaptive Exploitation Pattern**
- Monitor opponent cooperation rates closely
- Exploit cooperative opponents while they're willing to sustain the resource
- Punish non-cooperative environments by joining the exploitation

### 3. **Strategic Stock Management**
- Only cooperate when stock is critically low AND opponents show high cooperation
- Maintain aggressive extraction when stock is healthy
- Never cooperate unless there's strong evidence others will too

### 4. **End-Game Aggression**
- Always defect in the final round (no future consequences)
- Increase defection probability in final 3 rounds
- Extract maximum value when sustainability no longer matters

### 5. **Opponent Exploitation Logic**
The strategy specifically targets two opponent weaknesses:
- **Cooperative Opponents**: Exploit their resource maintenance while extracting maximum value
- **Non-Cooperative Opponents**: Join the destructive competition rather than being the only cooperator

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive reputation and tests opponent responses.

### Last Round  
Always DEFECT - no future rounds mean no consequences for resource depletion.

### Stock Depletion
Only cooperate when stock is critically low (≤15% capacity) AND high opponent cooperation rate (≥60%). Otherwise, participate in the resource race.

### All-Cooperative Opponents
When facing highly cooperative opponents (≥70% cooperation rate), alternate between cooperation (to maintain resource) and defection (to exploit their cooperation), with increasing defection as end approaches.

## Psychological Warfare Elements

1. **Reputation Building**: Early aggression establishes a "dangerous" reputation
2. **Conditional Punishment**: Defect against non-cooperative environments
3. **Exploitation of Trust**: Take advantage when others try to sustain the resource
4. **End-Game Betrayal**: Increase aggression as game concludes

This strategy maximizes individual payoff through aggressive resource extraction while maintaining just enough strategic cooperation to prevent complete resource collapse when it serves our exploitation goals.
'''

description_AGGRESSIVE_8 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough sustainability to prevent complete collapse. The goal is to maximize immediate payoffs through strategic defection while exploiting cooperative opponents.

## Decision Rules

### Primary Strategy: Conditional Aggression
```
IF stock_level >= capacity * 0.4:
    DEFECT (always take the larger share)
ELSE IF stock_level >= capacity * 0.15:
    DEFECT with probability 0.8, COOPERATE with probability 0.2
ELSE:
    COOPERATE (emergency conservation)
```

### Opponent Exploitation Logic
```
defection_rate = count_defectors_last_round / n
cooperation_rate = count_cooperators_last_round / n

IF cooperation_rate >= 0.6:
    // Exploit cooperative opponents
    DEFECT
ELSE IF defection_rate >= 0.8:
    // Join the feeding frenzy
    DEFECT
ELSE:
    // Apply primary strategy above
```

## Edge Cases

### First Round
**Always DEFECT** - Establish aggressive dominance immediately and test opponent responses while stock is at maximum.

### Last Round
**Always DEFECT** - No future consequences, so maximize final extraction regardless of stock level.

### Critical Stock Situations
```
IF stock_level < capacity * 0.1:
    COOPERATE (survival mode - prevent total collapse)
ELSE IF stock_level < capacity * 0.05:
    COOPERATE (emergency preservation)
```

### Late Game Aggression (Final 20% of rounds)
```
IF current_round >= 0.8 * total_rounds:
    IF stock_level >= capacity * 0.3:
        DEFECT (time to cash out)
    ELSE:
        Apply primary strategy
```

## Pseudocode Implementation

```python
def aggressive_strategy(round_num, total_rounds, current_stock, capacity, 
                       n_players, history):
    
    # Edge case: First round - establish dominance
    if round_num == 1:
        return "DEFECT"
    
    # Edge case: Last round - extract maximum
    if round_num == total_rounds:
        return "DEFECT"
    
    # Calculate stock ratios
    stock_ratio = current_stock / capacity
    
    # Emergency conservation threshold
    if stock_ratio < 0.1:
        return "COOPERATE"
    
    # Analyze opponent behavior from last round
    if len(history) > 0:
        last_round = history[-1]
        defection_rate = last_round.count("DEFECT") / n_players
        cooperation_rate = last_round.count("COOPERATE") / n_players
        
        # Exploit cooperative opponents
        if cooperation_rate >= 0.6:
            return "DEFECT"
        
        # Join mass defection
        if defection_rate >= 0.8:
            return "DEFECT"
    
    # Late game acceleration
    if round_num >= 0.8 * total_rounds and stock_ratio >= 0.3:
        return "DEFECT"
    
    # Primary aggressive strategy
    if stock_ratio >= 0.4:
        return "DEFECT"
    elif stock_ratio >= 0.15:
        # Probabilistic aggression in mid-range
        import random
        return "DEFECT" if random.random() < 0.8 else "COOPERATE"
    else:
        return "COOPERATE"
```

## Strategic Rationale

1. **Front-loaded Aggression**: Defect early when stock is high to maximize payoffs before others deplete the resource.

2. **Exploitation Mindset**: When opponents cooperate, punish their restraint by taking larger shares. This creates a "sucker's payoff" dynamic.

3. **Herd Mentality**: When everyone defects, join them rather than be the only cooperator receiving minimal payoffs.

4. **Calculated Risk**: Only cooperate when absolutely necessary to prevent total resource collapse, which would hurt future payoffs.

5. **Endgame Extraction**: Ramp up aggression in final rounds since future sustainability becomes irrelevant.

This strategy maximizes individual payoffs through strategic selfishness while maintaining just enough restraint to keep the resource pool viable for continued exploitation. It assumes opponents will either be too cooperative (exploitable) or too aggressive (join them), making moderate cooperation suboptimal in a competitive tournament environment.
'''

description_AGGRESSIVE_9 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy prioritizes immediate maximum payoffs while maintaining the resource just enough to continue exploitation. The key insight is that in a tournament setting, other strategies will likely try to maintain the resource, so we can exploit their conservation efforts while maximizing our own consumption.

## Decision Rules

### Primary Strategy: Conditional Aggressive Exploitation
```pseudocode
function decide_action(current_round, stock_level, history):
    // Edge case: First round - establish dominance
    if current_round == 1:
        return DEFECT
    
    // Edge case: Last round - maximum extraction
    if current_round == total_rounds:
        return DEFECT
    
    // Critical stock threshold
    extinction_threshold = capacity * 0.15
    
    // Aggressive exploitation conditions
    if stock_level > extinction_threshold:
        // Check if others are cooperating (being exploited successfully)
        cooperation_rate = count_cooperators_last_round() / (n - 1)
        
        if cooperation_rate >= 0.5:
            // Others are maintaining resource - exploit aggressively
            return DEFECT
        else:
            // Too many defectors - temporary cooperation to rebuild stock
            if stock_level < capacity * 0.4:
                return COOPERATE
            else:
                return DEFECT
    else:
        // Emergency cooperation only when near extinction
        return COOPERATE
```

## Detailed Strategy Components

### 1. Opening Aggression (Round 1)
- **Always DEFECT** in the first round
- Rationale: Establishes aggressive stance and maximizes early payoff when stock is at peak
- Sets tone that we prioritize immediate gains over long-term sustainability

### 2. Exploitation Phase (Rounds 2 to r-1)
- **Primary mode: DEFECT** when conditions allow
- **Key condition**: Maintain stock above 15% of capacity to avoid complete collapse
- **Exploitation detection**: If ≥50% of other players cooperated last round, continue defecting
- **Tactical cooperation**: Only cooperate when:
  - Stock drops below 40% of capacity AND
  - Most other players are also defecting (cooperation rate < 50%)

### 3. Endgame Extraction (Final Round)
- **Always DEFECT** in the final round
- Rationale: No future consequences, so maximize final payoff regardless of resource state

### 4. Emergency Protocol
- **Forced cooperation** only when stock approaches extinction threshold (15% of capacity)
- This is purely self-interested - we need some resource to remain for continued exploitation

## Aggressive Mindset Alignment

1. **Immediate Gratification**: Prioritizes current round payoffs over future sustainability
2. **Exploitation Focus**: Actively takes advantage of other players' cooperative behavior
3. **Minimal Conservation**: Only preserves resources when absolutely necessary for continued exploitation
4. **Dominance Establishment**: Uses first-round aggression to signal competitive intent
5. **Endgame Maximization**: Extracts maximum value when consequences disappear

## Expected Opponent Responses

Given that other LLMs may develop:
- **Conservative strategies**: We exploit their resource maintenance
- **Tit-for-tat strategies**: Our consistent aggression will trigger their defection, but we gain early advantages
- **Sustainable strategies**: We free-ride on their conservation efforts
- **Other aggressive strategies**: Our emergency protocol prevents mutual destruction while maintaining maximum aggression

## Competitive Advantage

This strategy is designed to:
1. **Outperform cooperative strategies** by consistently extracting more resources
2. **Outperform balanced strategies** by being more aggressive when stock allows
3. **Avoid mutual destruction** through minimal emergency cooperation
4. **Maximize tournament points** by prioritizing individual payoffs over group welfare

The "Predator" strategy embodies pure competitive aggression while maintaining just enough strategic restraint to prevent complete resource collapse that would end the game prematurely.
'''

description_AGGRESSIVE_10 = '''
# Aggressive Exploitation Strategy: "Resource Dominance"

## Core Philosophy
This strategy operates on the principle that in a competitive tournament environment, other players are likely to attempt cooperation or tit-for-tat approaches. By being consistently aggressive while maintaining just enough restraint to avoid complete resource collapse, we can extract maximum value while forcing opponents into suboptimal positions.

## Strategy Overview
The strategy combines immediate exploitation with calculated sustainability to maximize total payoff across all rounds.

## Decision Rules

### Primary Rule: Defect by Default
- **Default Action**: Always play D (Defect)
- **Rationale**: In each round, defecting gives double the immediate payoff of cooperating

### Strategic Modulation Based on Stock Level

```pseudocode
function decide_action(current_round, stock_level, capacity, total_rounds, n_players):
    stock_ratio = stock_level / capacity
    rounds_remaining = total_rounds - current_round + 1
    
    // Critical sustainability check
    if stock_ratio < 0.15:
        if rounds_remaining > 2:
            return C  // Emergency cooperation to rebuild stock
        else:
            return D  // Extract remaining value if near end
    
    // Aggressive exploitation phase
    if stock_ratio > 0.6:
        return D  // Maximum extraction when stock is healthy
    
    // Calculated aggression phase
    if stock_ratio > 0.3:
        if current_round <= total_rounds * 0.7:
            return D  // Continue aggressive extraction
        else:
            // Late game: alternate to maintain some stock
            if current_round % 2 == 1:
                return D
            else:
                return C
    
    // Recovery phase (0.15 < stock_ratio <= 0.3)
    if rounds_remaining > total_rounds * 0.3:
        return C  // Brief cooperation to rebuild
    else:
        return D  // Final extraction phase
```

## Edge Case Handling

### First Round
- **Action**: Always D
- **Rationale**: Maximum immediate gain with no information about opponents. Sets aggressive tone.

### Last Round
- **Action**: Always D
- **Rationale**: No future consequences, extract maximum remaining value regardless of stock level.

### Second-to-Last Round
- **Action**: D if stock > capacity * 0.1, otherwise C
- **Rationale**: Prepare for final extraction while avoiding zero-stock scenario.

### Stock Depletion Scenarios
- **Near-zero stock (< 5% capacity)**: Emergency cooperation for 1-2 rounds maximum, then return to defection
- **Zero stock**: Continue defecting (payoff = 0, but no worse than cooperating)

## Aggressive Elements

1. **First-Mover Advantage**: Immediately establish dominance through defection
2. **Exploitation of Cooperators**: If opponents attempt cooperation, we gain 2x advantage
3. **Minimal Concessions**: Only cooperate when absolutely necessary for sustainability
4. **End-Game Extraction**: Maximize final rounds regardless of long-term consequences
5. **Psychological Pressure**: Consistent aggression forces opponents into defensive positions

## Tournament Considerations

### Against Likely Opponent Types:
- **Tit-for-Tat**: We defect first, they defect second. We maintain advantage through superior stock exploitation timing.
- **Always Cooperate**: Maximum exploitation throughout game
- **Conditional Cooperators**: Our aggression triggers their defection, but we're already positioned advantageously
- **Other Aggressive Strategies**: Race to the bottom, but our sustainability checks ensure we extract maximum value during the crash

### Key Advantages:
1. **Information Asymmetry**: Other strategies may waste early rounds "testing" behavior
2. **Commitment**: No complex signaling or cooperation attempts that opponents can exploit
3. **Adaptability**: Stock-level triggers allow survival in extreme scenarios
4. **Endgame Dominance**: No cooperation in final rounds maximizes tournament score

## Expected Performance
This strategy prioritizes total accumulated payoff over sustainable cooperation. It will:
- Dominate against cooperative strategies
- Compete effectively against other aggressive strategies through superior timing
- Maintain viability even in highly competitive environments through minimal sustainability measures
- Maximize individual tournament ranking at the expense of collective welfare

The strategy embodies pure competitive aggression while maintaining just enough strategic calculation to remain viable across all rounds.
'''

description_AGGRESSIVE_11 = '''
# Aggressive Strategy: "Predatory Exploitation"

## Core Philosophy
This strategy operates on the principle of maximum resource extraction while strategically preserving just enough stock to maintain extraction opportunities. It assumes opponents will be more conservative and exploits their restraint.

## Decision Rules

### Primary Rule: Threshold-Based Aggression
```
IF current_stock >= capacity * 0.4:
    Action = DEFECT
ELSE IF current_stock >= capacity * 0.15:
    Action = COOPERATE (strategic preservation)
ELSE:
    Action = DEFECT (desperate extraction)
```

### Round-Specific Overrides

**First Round:**
- Always DEFECT
- Rationale: Establish aggressive reputation early and extract maximum value from pristine resource

**Last Round:**
- Always DEFECT regardless of stock level
- Rationale: No future consequences, pure extraction

**Final 20% of rounds:**
- Lower cooperation threshold to capacity * 0.25
- Rationale: Endgame acceleration - less time for recovery

## Adaptive Components

### Opponent Behavior Analysis
Track cooperation rates of opponents over last 3 rounds:

```
cooperative_opponents = count(players who played C in last 3 rounds) / n
IF cooperative_opponents >= 0.6:
    // Exploit cooperative opponents more aggressively
    cooperation_threshold *= 0.8
ELSE IF cooperative_opponents <= 0.3:
    // All players aggressive - slight moderation to preserve resource
    cooperation_threshold *= 1.2
```

### Stock Velocity Assessment
```
stock_decline_rate = (stock_3_rounds_ago - current_stock) / 3
IF stock_decline_rate > capacity * 0.15:
    // Resource depleting too quickly - temporary cooperation
    next_action = COOPERATE
    cooperation_threshold *= 1.1
```

## Edge Case Handling

**Stock Near Zero (< capacity * 0.05):**
- COOPERATE for exactly 2 rounds to allow minimal recovery
- Then resume DEFECT pattern

**Stock Recovery Scenarios:**
- If stock increases between rounds, immediately DEFECT to capitalize

**Early Depletion (stock = 0 before round r/2):**
- Switch to alternating C-D pattern to rebuild minimal stock
- Resume full aggression once stock > capacity * 0.2

## Strategic Rationale

1. **First-Mover Advantage**: Aggressive opening maximizes extraction from full resource
2. **Reputation Building**: Early defection signals willingness to exploit, potentially intimidating opponents
3. **Threshold Exploitation**: Most strategies likely use higher cooperation thresholds - this strategy extracts more while others preserve
4. **Endgame Maximization**: Accelerated extraction as game ends removes cooperation incentives
5. **Adaptive Exploitation**: Responds to opponent cooperation by increasing aggression, and to opponent aggression by slight moderation (to preserve extractable resource)

## Pseudocode Summary
```
function aggressive_strategy(round, stock, history, n, r, capacity):
    // Last round override
    if round == r:
        return DEFECT
    
    // First round override  
    if round == 1:
        return DEFECT
    
    // Calculate base thresholds
    high_threshold = capacity * 0.4
    low_threshold = capacity * 0.15
    
    // Endgame adjustment
    if round > r * 0.8:
        high_threshold = capacity * 0.25
    
    // Adaptive adjustment based on opponent behavior
    recent_cooperation_rate = calculate_recent_cooperation(history, 3)
    if recent_cooperation_rate >= 0.6:
        high_threshold *= 0.8
    elif recent_cooperation_rate <= 0.3:
        high_threshold *= 1.2
    
    // Main decision logic
    if stock >= high_threshold:
        return DEFECT
    elif stock >= low_threshold:
        return COOPERATE
    else:
        return DEFECT  // Desperate extraction
```

This strategy prioritizes individual payoff maximization while maintaining just enough resource sustainability to continue extraction, exploiting any cooperative tendencies in opponents.
'''

description_AGGRESSIVE_12 = '''
# Aggressive Predator Strategy

## Core Philosophy
This strategy is designed to maximize individual payoffs by being ruthlessly opportunistic while maintaining just enough restraint to keep the resource pool viable for exploitation. The key insight is that in a tournament setting, other players may attempt cooperation or complex strategies - this creates opportunities for aggressive exploitation.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge case: First round - Always defect to establish dominance
    if round == 1:
        return DEFECT
    
    // Edge case: Last round - Always defect (no future consequences)
    if round == r:
        return DEFECT
    
    // Critical stock threshold - if stock is dangerously low, cooperate temporarily
    critical_threshold = capacity * 0.15
    if stock <= critical_threshold:
        return COOPERATE
    
    // Count defectors in previous round
    defectors_last_round = count_defectors(history[round-1])
    
    // Exploitation phase: If others are cooperating, defect aggressively
    if defectors_last_round <= n/3:
        return DEFECT
    
    // Competition phase: If many are defecting, occasionally cooperate to rebuild stock
    if defectors_last_round >= (2*n)/3:
        // Cooperate with 30% probability to help rebuild stock for future exploitation
        if random() < 0.3:
            return COOPERATE
        else:
            return DEFECT
    
    // Mixed phase: Default to defection with occasional cooperation
    if random() < 0.2:
        return COOPERATE
    else:
        return DEFECT
```

## Specific Edge Cases

### Round 1: Dominance Establishment
- **Action**: Always DEFECT
- **Rationale**: Establish aggressive reputation immediately and capture maximum initial value

### Final Round: No-Mercy Extraction
- **Action**: Always DEFECT
- **Rationale**: No future consequences, so extract maximum possible value

### Critical Stock Depletion
- **Threshold**: Stock ≤ 15% of capacity
- **Action**: COOPERATE (temporarily)
- **Rationale**: If stock gets too low, everyone suffers. Brief cooperation rebuilds stock for future exploitation

### Stock Recovery Detection
- **Trigger**: Stock increases by >20% from previous round
- **Response**: Immediately DEFECT to capitalize on recovered resources
- **Rationale**: Punish others' cooperation by taking advantage of the improved situation

## Aggressive Mindset Implementation

### 1. Exploitation-First Mentality
- Default to DEFECT in 80% of non-critical situations
- Only cooperate when it serves long-term exploitation goals
- View others' cooperation as weakness to exploit

### 2. Resource Monopolization
- Attempt to extract 2x what cooperators get whenever possible
- Maintain stock just above collapse threshold to maximize extraction
- Force others into cooperation through aggressive depletion

### 3. Reputation Warfare
- Establish early dominance through consistent defection
- Use occasional cooperation strategically to rebuild exploitation opportunities
- Never appear predictably cooperative

### 4. End-Game Maximization
- Recognize final rounds and extract maximum value
- No concern for sustainable outcomes in terminal periods
- Prioritize immediate gains over long-term stability

## Strategic Advantages

1. **First-Mover Advantage**: Early aggression establishes dominance
2. **Exploitation Timing**: Capitalizes on others' attempts at cooperation
3. **Resource Management**: Maintains stock just above collapse for continued exploitation
4. **Tournament Optimization**: Designed to outperform cooperative and moderate strategies

## Risk Management
- Emergency cooperation threshold prevents total resource collapse
- Probabilistic cooperation maintains some stock regeneration
- Avoids being too predictable while maintaining aggressive stance

This strategy is designed to be merciless in extraction while maintaining just enough strategic restraint to keep the resource pool exploitable throughout the game.
'''

description_AGGRESSIVE_13 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while strategically managing the resource to maintain future exploitation opportunities. The goal is to extract more value than opponents while keeping the pool viable enough to continue dominating.

## Decision Rules

### Primary Decision Framework:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Establish dominance immediately
    
    if round == final_round:
        return DEFECT  // Extract maximum value, no future consequences
    
    // Calculate cooperation rate of others last round
    others_coop_rate = count_cooperators_last_round() / (n-1)
    
    // Stock-based thresholds
    critical_threshold = capacity * 0.2
    exploitation_threshold = capacity * 0.6
    
    if stock <= critical_threshold:
        // Pool is dying - grab what's left before others do
        return DEFECT
    
    else if stock >= exploitation_threshold AND others_coop_rate > 0.5:
        // Pool is healthy and others are cooperative - exploit them
        return DEFECT
    
    else if others_coop_rate < 0.3:
        // Others are being aggressive - must compete or be eliminated
        return DEFECT
    
    else:
        // Tactical cooperation to rebuild pool for future exploitation
        return COOPERATE
```

### Detailed Strategy Components:

**1. Opening Aggression (Round 1)**
- Always DEFECT in the first round
- Establishes aggressive reputation immediately
- Maximizes early payoff when stock is at peak capacity
- Signals to other players that cooperation should not be expected

**2. Exploitation Window Detection**
- DEFECT when stock > 60% of capacity AND majority of others cooperated last round
- This identifies prime exploitation opportunities where the resource is healthy and opponents are being "generous"

**3. Competitive Response**
- If <30% of other players cooperated last round, automatically DEFECT
- Prevents being exploited when others adopt aggressive strategies
- Maintains competitive position in hostile environments

**4. Crisis Harvesting**
- When stock drops below 20% of capacity, always DEFECT
- Reasoning: Pool is likely to collapse regardless, so extract maximum value
- Better to get something than risk getting nothing if others also defect

**5. Strategic Rebuilding**
- Only cooperate when:
  - Pool is in middle range (20%-60% capacity)
  - Others showed reasonable cooperation (30%-50% rate)
  - Not in first or last round
- This rebuilds the resource just enough to create future exploitation opportunities

**6. Final Round Maximization**
- Always DEFECT in the final round
- No future consequences, so extract maximum immediate value

## Edge Case Handling:

**First Round**: Always DEFECT (establish dominance)

**Last Round**: Always DEFECT (no future consequences)

**Stock = 0**: If stock reaches zero, all subsequent actions yield 0 payoff regardless, so DEFECT by default

**All Others Defecting**: Continue defecting to maintain competitive position

**Rapidly Declining Pool**: Switch to DEFECT earlier if stock drops >40% between consecutive rounds

## Aggressive Alignment:

This strategy is inherently aggressive because it:

1. **Prioritizes immediate extraction** over long-term sustainability
2. **Exploits cooperative opponents** by defecting when they cooperate
3. **Maintains competitive pressure** by matching or exceeding others' aggression
4. **Maximizes value extraction** in crisis and end-game scenarios
5. **Uses cooperation only tactically** to set up future exploitation opportunities

The strategy treats the common pool as a resource to be dominated rather than stewarded, viewing other players as competitors to be outmaneuvered rather than partners to coordinate with.
'''

description_AGGRESSIVE_14 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough sustainability to continue profiting. It assumes opponents will either be too cooperative (exploitable) or too focused on long-term sustainability (allowing short-term exploitation).

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
- **Action: ALWAYS DEFECT**
- **Rationale**: Establish dominance early, extract maximum value while stock is high, and test opponent behavior patterns

### Phase 2: Tactical Evaluation (Rounds r/3+1 to 2r/3)
```pseudocode
IF (current_stock < capacity/4):
    # Stock critically low - brief cooperation to allow minimal recovery
    cooperate_probability = 0.3
ELSE IF (majority_of_opponents_defected_last_round):
    # If others are aggressive, be more aggressive
    DEFECT
ELSE IF (current_stock > capacity/2 AND majority_cooperated_last_round):
    # Exploit cooperative opponents
    DEFECT
ELSE:
    # Strategic cooperation to maintain extractable resources
    cooperate_probability = 0.4
```

### Phase 3: End Game Exploitation (Final r/3 rounds)
- **Rounds r/3+1 to r-2: ALWAYS DEFECT**
- **Round r-1**: 
  - DEFECT if stock > capacity/8
  - COOPERATE if stock ≤ capacity/8 (preserve something for final round)
- **Final Round r: ALWAYS DEFECT**

## Edge Case Handling

### First Round
- **Action: DEFECT**
- **Justification**: Maximum stock available, establish aggressive position immediately

### Last Round
- **Action: DEFECT**
- **Justification**: No future consequences, extract maximum remaining value

### Critical Stock Depletion
```pseudocode
IF (current_stock < n):  # Stock too low for everyone to get meaningful payoff
    IF (rounds_remaining > r/4):
        COOPERATE  # Allow recovery only if significant game time remains
    ELSE:
        DEFECT     # Not enough time to recover, grab what's left
```

### Opponent Pattern Recognition
Track opponent behavior and adjust:
```pseudocode
opponent_defection_rate = count_defections / total_rounds_so_far

IF (opponent_defection_rate > 0.7):
    # Opponents are aggressive - be maximally aggressive
    defection_boost = 0.2
ELSE IF (opponent_defection_rate < 0.3):
    # Opponents are cooperative - exploit heavily
    defection_boost = 0.3
ELSE:
    # Mixed strategies - maintain base aggression
    defection_boost = 0.0
```

## Aggressive Alignment Features

1. **Front-loaded Exploitation**: Extract maximum value early when stock is highest
2. **Cooperative Exploitation**: When cooperating, it's only to maintain a resource base for future exploitation
3. **Endgame Maximization**: Complete resource extraction in final rounds regardless of sustainability
4. **Adaptive Aggression**: Increase aggression when detecting cooperative opponents
5. **Minimal Cooperation**: Cooperate only when absolutely necessary for continued extraction

## Expected Performance Profile

- **High early returns** from aggressive extraction while stock is abundant
- **Exploitation of cooperative strategies** that attempt long-term sustainability
- **Competitive against other aggressive strategies** through superior timing
- **Acceptable performance against mixed strategies** due to adaptive elements
- **Poor long-term sustainability** but maximizes individual payoffs over the game duration

This strategy prioritizes individual gain over collective welfare and assumes that being the most aggressive early will yield the highest total payoffs, especially when others attempt more balanced approaches.
'''

description_AGGRESSIVE_15 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of maximum short-term extraction while exploiting cooperative opponents. It assumes other players may attempt cooperation or tit-for-tat strategies, and ruthlessly capitalizes on this.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
PREDATOR_STRATEGY:
    
    // First round: Always defect to establish dominance
    if round == 1:
        return DEFECT
    
    // Last round: Always defect (no future consequences)
    if round == r:
        return DEFECT
    
    // Critical stock threshold: If stock is low, defect to grab remaining resources
    if current_stock <= capacity * 0.3:
        return DEFECT
    
    // Exploitation phase: Defect if many cooperators in previous round
    cooperation_rate = count_cooperators_last_round / n
    if cooperation_rate >= 0.6:
        return DEFECT
    
    // Punishment phase: Continue defecting if others are defecting
    if cooperation_rate <= 0.3:
        return DEFECT
    
    // Occasional cooperation to maintain stock (only when necessary)
    if current_stock >= capacity * 0.8 AND cooperation_rate >= 0.5:
        return COOPERATE
    
    // Default: Defect
    return DEFECT
```

## Detailed Strategy Components

### 1. **Opening Aggression (Round 1)**
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponent strategies, maximize early payoff when stock is at maximum

### 2. **Endgame Exploitation (Final Round)**
- **Always DEFECT** in the last round
- Rationale: No future consequences, extract maximum value from remaining stock

### 3. **Critical Stock Defense**
- **DEFECT when stock ≤ 30% of capacity**
- Rationale: When resources are scarce, grab what's left before others do

### 4. **Cooperative Exploitation**
- **DEFECT when ≥60% of players cooperated last round**
- Rationale: Punish and exploit cooperative behavior, free-ride on others' restraint

### 5. **Mutual Defection Acceleration**
- **DEFECT when ≤30% of players cooperated last round**
- Rationale: In a defection spiral, grab resources before they're gone

### 6. **Strategic Minimal Cooperation**
- **COOPERATE only when:**
  - Stock ≥ 80% of capacity AND
  - 50%+ players cooperated last round
- Rationale: Minimal cooperation to prevent complete stock collapse when it's safe and others are cooperating

## Edge Cases and Special Situations

### **Stock Near Depletion (≤10% capacity)**
- Always DEFECT - grab any remaining resources

### **Perfect Cooperation Detected**
- If all other players cooperated for 2+ consecutive rounds → DEFECT to maximize exploitation

### **Rapid Stock Recovery**
- If stock grows significantly (>20% in one round) → DEFECT next round to capitalize

### **Mid-Game Assessment (Round r/2)**
- Evaluate total payoff position
- If significantly behind → increase aggression (defect more frequently)
- If ahead → maintain current strategy

## Psychological Warfare Elements

1. **Unpredictability**: Mix occasional cooperation to prevent opponents from perfectly predicting behavior
2. **Punishment**: Quickly punish any sign of cooperation to discourage it
3. **Opportunism**: Always ready to exploit any cooperative behavior
4. **Endgame Preparation**: Ensure maximum extraction in final rounds

## Risk Management

- **Stock Preservation**: Only cooperate when absolutely necessary to prevent total collapse
- **Competitor Monitoring**: Track opponent patterns to maximize counter-exploitation
- **Adaptive Thresholds**: Adjust cooperation/defection thresholds based on observed opponent behavior

## Expected Outcomes

This strategy aims to:
- Maximize individual payoff through aggressive resource extraction
- Exploit cooperative opponents while minimizing own cooperation
- Maintain just enough stock sustainability to prevent complete system collapse
- Dominate through consistent aggressive positioning

The strategy accepts the risk of stock depletion in exchange for maximizing short-term gains and exploiting any cooperative tendencies in opponents.
'''

description_AGGRESSIVE_16 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with strategic sustainability**. It aims to extract maximum value from the common pool while maintaining just enough resource base to continue exploitation. The strategy is inherently selfish and views cooperation as a tool for resource preservation only when absolutely necessary.

## Decision Rules

### Primary Rule: Aggressive Threshold System
```pseudocode
if stock_level >= capacity * 0.4:
    action = DEFECT
else if stock_level >= capacity * 0.15:
    action = COOPERATE (strategic preservation)
else:
    action = DEFECT (desperation extraction)
```

### Secondary Rules (Override Primary):

1. **Opening Aggression**: Always DEFECT in round 1
   - Rationale: Establish dominance and extract maximum value from full stock

2. **Endgame Extraction**: Always DEFECT in final 2 rounds
   - Rationale: No future consequences, extract all remaining value

3. **Momentum Exploitation**: If stock dropped by >30% in previous round, DEFECT
   - Rationale: Others are being aggressive, so maximize immediate gains

4. **Punishment Override**: If any player defected when stock was <20% capacity in previous round, DEFECT for next 2 rounds
   - Rationale: Punish resource destroyers while they still exist to punish

## Edge Case Handling

### First Round
- **Always DEFECT** regardless of parameters
- Extract maximum value from pristine resource pool
- Signal aggressive intent to other players

### Last Round
- **Always DEFECT** 
- No future rounds means no consequences for resource depletion

### Second-to-Last Round  
- **Always DEFECT**
- Opponent strategies likely anticipate last-round defection anyway

### Critical Stock Levels
- When stock < 10% capacity: **DEFECT** (resource is effectively dead)
- When stock reaches exactly 0: Game effectively over, any remaining rounds are meaningless

### Recovery Scenarios
- If stock has grown for 2+ consecutive rounds due to cooperation:
  - **DEFECT** to harvest the recovered resources
  - Return to threshold system afterward

## Strategic Rationale

### Exploitation Focus
- Prioritizes immediate gains over long-term sustainability
- Treats the resource pool as something to be harvested, not preserved
- Views other players' cooperation as an opportunity to extract more

### Adaptive Aggression
- Becomes more cooperative only when resource collapse threatens future extraction opportunities
- The 40% threshold ensures maximum extraction while stock is healthy
- The 15% threshold provides minimal preservation to prevent total collapse

### Competitive Advantage
- Other players using "nice" strategies will subsidize resource maintenance
- Strategy benefits from others' cooperation while providing minimal reciprocation
- Punishment mechanisms discourage others from matching the aggression

### Endgame Exploitation
- Recognizes that final rounds have no future consequences
- Maximizes terminal value extraction
- Forces opponents to choose between matching aggression or accepting lower payoffs

## Pseudocode Implementation

```pseudocode
function aggressive_strategy(round, stock, history, n, r, capacity):
    // Edge cases first
    if round == 1:
        return DEFECT
    
    if round >= r - 1:  // Last 2 rounds
        return DEFECT
    
    // Check for punishment triggers
    if should_punish(history, capacity):
        return DEFECT
    
    // Check momentum exploitation
    if stock_dropped_significantly(history):
        return DEFECT
    
    // Primary threshold system
    stock_ratio = stock / capacity
    
    if stock_ratio >= 0.4:
        return DEFECT
    else if stock_ratio >= 0.15:
        return COOPERATE  // Strategic preservation only
    else:
        return DEFECT     // Desperation extraction
```

This strategy is designed to maximize individual payoffs through aggressive resource extraction while maintaining just enough sustainability to prevent complete resource collapse that would eliminate future extraction opportunities.
'''

description_AGGRESSIVE_17 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy maximizes short-term gains by exploiting cooperative behavior while minimizing exposure to retaliation. It operates on the principle that in a tournament setting, other strategies may attempt cooperation, creating opportunities for exploitation.

## Decision Rules

### Primary Decision Logic:
```
IF round == 1:
    Action = DEFECT  // Establish aggressive stance immediately
    
ELSE IF stock <= capacity * 0.15:
    Action = COOPERATE  // Emergency conservation when near collapse
    
ELSE IF last_round_cooperators >= n/2:
    Action = DEFECT  // Exploit cooperative majority
    
ELSE IF my_cumulative_payoff < average_opponent_payoff:
    Action = DEFECT  // Catch up aggressively
    
ELSE IF rounds_remaining <= 3:
    Action = DEFECT  // End-game extraction
    
ELSE:
    Action = COOPERATE  // Strategic patience
```

## Detailed Strategy Components

### 1. Opening Aggression
- **Always defect in Round 1** to signal aggressive intent and maximize initial payoff
- This establishes dominance and tests opponent responses

### 2. Exploitation Detection
- **Monitor cooperation rates**: If ≥50% of players cooperated in the previous round, defect immediately
- **Rationale**: Cooperative players create exploitable situations where defection yields maximum relative advantage

### 3. Performance Tracking
- Calculate cumulative payoff compared to observed opponent averages
- If falling behind, switch to aggressive defection regardless of stock levels (except emergency threshold)

### 4. Emergency Conservation
- **Critical threshold**: When stock ≤ 15% of capacity, temporarily cooperate
- **Purpose**: Prevent complete resource collapse that would eliminate future payoff opportunities
- **Risk management**: This is the only situation where long-term thinking overrides short-term gain

### 5. End-Game Exploitation
- **Final 3 rounds**: Always defect
- **Logic**: No future consequences, maximize extraction before game termination
- **Psychological advantage**: Other players may expect end-game defection, but this strategy commits fully

### 6. Strategic Deception
- In middle rounds with low cooperation rates, occasionally cooperate to:
  - Appear less predictably aggressive
  - Potentially encourage others to cooperate (setting up future exploitation)
  - Maintain stock at exploitable levels

## Edge Case Handling

### Stock Depletion Scenarios:
- **Stock = 0**: Cooperate (no choice - defection yields 0)
- **Stock < 10% capacity**: Cooperate until recovery above 15%

### Tournament-Specific Adaptations:
- **Against consistent defectors**: Match their aggression to prevent being exploited
- **Against tit-for-tat**: Defect early to establish disadvantageous pattern for them
- **Against conditional cooperators**: Identify their conditions and exploit them

## Pseudocode Implementation:

```python
def aggressive_strategy(round_num, total_rounds, current_stock, capacity, 
                       n_players, history):
    
    # Calculate key metrics
    stock_ratio = current_stock / capacity
    rounds_remaining = total_rounds - round_num
    
    if round_num == 1:
        return "DEFECT"
    
    # Emergency conservation
    if stock_ratio <= 0.15:
        return "COOPERATE"
    
    # Calculate last round cooperation rate
    if len(history) > 0:
        last_round_cooperators = count_cooperators(history[-1])
        cooperation_rate = last_round_cooperators / n_players
        
        # Exploit cooperative majorities
        if cooperation_rate >= 0.5:
            return "DEFECT"
    
    # Performance-based aggression
    if is_behind_average(history):
        return "DEFECT"
    
    # End-game extraction
    if rounds_remaining <= 3:
        return "DEFECT"
    
    # Strategic cooperation (deception/stock maintenance)
    return "COOPERATE"
```

## Expected Outcomes
This strategy anticipates:
1. **High early payoffs** from exploiting initial cooperation attempts
2. **Competitive advantage** through consistent exploitation of cooperative strategies
3. **Resource sustainability** through emergency conservation measures
4. **Tournament success** by maximizing cumulative payoffs across all matchups

The strategy balances aggressive exploitation with minimal necessary conservation, designed to outperform both pure defection (which may collapse the resource too quickly) and cooperative strategies (which can be exploited).
'''

description_AGGRESSIVE_18 = '''
# Aggressive "Strike Fast" Strategy

## Core Philosophy
This strategy adopts a **"strike while the iron is hot"** approach - maximize immediate gains when the resource is abundant, then adapt based on competitive pressure. The key insight is that early defection is most profitable when the stock is at its peak, and the growth dynamics mean early aggressive play has compounding negative effects on opponents.

## Decision Rules

### Primary Rule: Early Aggression with Adaptive Transition
```pseudocode
if round <= max(2, r/4):
    return DEFECT  // Always defect in early rounds
else:
    return adaptive_decision()
```

### Adaptive Decision Logic
```pseudocode
function adaptive_decision():
    // Calculate key metrics
    defect_rate = count_defections_last_round() / n
    stock_health = current_stock / capacity
    rounds_remaining = r - current_round
    
    // Aggressive conditions - defect if ANY are true
    if stock_health > 0.7:
        return DEFECT  // Stock is healthy, exploit it
    
    if defect_rate >= 0.6:
        return DEFECT  // High defection environment, join the feeding frenzy
    
    if rounds_remaining <= 2:
        return DEFECT  // End game - grab what you can
    
    if current_stock > capacity * 0.4 AND defect_rate >= 0.3:
        return DEFECT  // Medium stock but others defecting, don't be left behind
    
    // Conditional cooperation (still aggressive)
    if stock_health < 0.3 AND defect_rate < 0.3:
        return COOPERATE  // Emergency conservation only
    else:
        return DEFECT  // Default to aggression
```

## Edge Case Handling

### First Round
- **Always DEFECT** - The stock is at maximum capacity, making defection most profitable
- Sets an aggressive tone that may deter others or at least maximizes early gains

### Last Round
- **Always DEFECT** - No future consequences, pure profit maximization
- Even if stock is depleted, relative advantage matters

### Second-to-Last Round  
- **Always DEFECT** - Minimal future consequences, competitors likely to defect anyway

### Stock Depletion Scenarios
- If stock < 10% capacity: Still defect unless ALL other players cooperated last round
- If stock = 0: Game effectively over, defect by default (though payoff = 0)

## Key Strategic Elements

### 1. First-Mover Advantage
- Immediate defection in early rounds when stock is highest
- Forces opponents into reactive mode rather than proactive cooperation

### 2. Momentum Exploitation  
- Once defection cascades begin, ride the wave rather than futilely cooperating
- Uses defection rate as a trigger for continued aggression

### 3. Endgame Maximization
- No cooperation in final rounds regardless of stock level
- Captures maximum value when future doesn't matter

### 4. Conditional Aggression
- Even "cooperation" phases are triggered by self-interest (stock preservation for future exploitation)
- Will immediately return to defection once conditions improve

## Why This Strategy is Aggressively Optimal

1. **Early Strike**: Maximizes payoffs when stock is at peak value (100/n vs 100/(2n))
2. **Cascade Catalyst**: Early defection often triggers others to defect, creating a competitive environment where cooperation becomes irrational
3. **Adaptive Exploitation**: Switches between pure aggression and tactical aggression based on opportunity
4. **Zero Terminal Cooperation**: Ensures maximum extraction in final rounds
5. **Threshold Realism**: Only "cooperates" when stock is critically low AND others are cooperating - essentially emergency self-preservation

This strategy assumes opponents are also profit-maximizing and will likely adopt similar aggressive stances, making early and decisive action crucial for competitive advantage.
'''

description_AGGRESSIVE_19 = '''
# Aggressive "Exploit-Then-Pillage" Strategy

## Core Philosophy
This strategy operates on the principle of **ruthless exploitation**: extract maximum value early while the resource is rich, then switch to strategic defection to deny opponents recovery opportunities. The goal is to accumulate the highest total payoff by frontloading gains and preventing others from benefiting from resource regeneration.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Action**: Always DEFECT
- **Rationale**: When stock is at maximum capacity, defection yields the highest absolute payoffs. Even if all players defect, the immediate gains are substantial. This phase maximizes early accumulation before opponents can establish cooperative patterns.

### Phase 2: Conditional Opportunism (Rounds r/3+1 to 2r/3)
- **Primary Rule**: DEFECT if stock > capacity/3
- **Secondary Rule**: If stock ≤ capacity/3, use "Punishment Trigger":
  - COOPERATE only if ≥ 75% of players cooperated in the previous round
  - Otherwise DEFECT
- **Rationale**: Continue exploiting when resources are still substantial. Only consider cooperation when the resource is critically low AND most others are cooperating (indicating they're trying to rebuild).

### Phase 3: Endgame Pillaging (Final r/3 rounds)
- **Action**: Always DEFECT
- **Rationale**: In the final phase, there's no point in resource conservation since the game is ending. Extract maximum value regardless of sustainability. Other players' attempts at last-minute cooperation should be ruthlessly exploited.

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Logic**: Stock is at maximum capacity, so defection yields the highest possible single-round payoff (capacity/n vs capacity/2n).

### Last Round
- **Action**: DEFECT
- **Logic**: No future consequences exist, so pure exploitation is optimal.

### Stock Depletion Scenarios
- **If stock < capacity/10**: Still DEFECT in phases 1 and 3
- **If stock = 0**: No choice matters (payoff is 0), but maintain DEFECT for consistency

### Opponent Behavior Adaptation
- **If detecting coordinated cooperation**: Continue defecting to exploit their resource-building efforts
- **If all opponents always defect**: Match their aggression with consistent defection
- **If opponents use conditional strategies**: Remain unpredictably aggressive to prevent them from establishing beneficial patterns

## Pseudocode

```
function aggressive_strategy(round, stock, history, n, r, capacity):
    phase_1_end = floor(r/3)
    phase_2_end = floor(2*r/3)
    
    // Phase 1: Early Exploitation
    if round <= phase_1_end:
        return DEFECT
    
    // Phase 3: Endgame Pillaging
    if round > phase_2_end:
        return DEFECT
    
    // Phase 2: Conditional Opportunism
    if stock > capacity/3:
        return DEFECT
    else:
        if history.length > 0:
            last_round_cooperators = count_cooperators(history[-1])
            cooperation_rate = last_round_cooperators / n
            if cooperation_rate >= 0.75:
                return COOPERATE
        return DEFECT
```

## Strategic Advantages

1. **Early Accumulation**: Maximizes payoffs when resources are abundant
2. **Exploitation of Cooperators**: Profits from others' conservation efforts
3. **Prevents Resource Recovery**: Aggressive defection prevents opponents from rebuilding stock
4. **Endgame Dominance**: Ensures maximum extraction in final rounds when sustainability is irrelevant
5. **Unpredictability**: The conditional middle phase makes it difficult for opponents to counter-exploit

## Expected Outcomes

This strategy prioritizes total accumulated payoff over sustainable play. It assumes opponents will attempt some level of cooperation, which this strategy ruthlessly exploits. Even against other aggressive strategies, the early and late defection phases ensure competitive performance while the conditional middle phase provides some hedge against complete resource collapse.

The strategy is designed to win tournaments where total payoff across all rounds determines victory, not long-term sustainability or "social welfare" metrics.
'''

description_AGGRESSIVE_20 = '''
# Aggressive Resource Extraction Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction while maintaining plausible future exploitation opportunities**. It assumes opponents are either naive cooperators to be exploited or fellow predators to be outmaneuvered.

## Decision Rules

### Primary Rule: Exploit Weakness, Match Aggression
```
IF (cooperator_ratio_last_round > 0.6):
    ACTION = DEFECT  // Exploit cooperative opponents
ELIF (stock_level < capacity * 0.3):
    ACTION = COOPERATE  // Preserve dying resource only when critically low
ELIF (round_number <= 3):
    ACTION = DEFECT  // Establish dominance early
ELIF (round_number == final_round):
    ACTION = DEFECT  // No future consequences
ELSE:
    ACTION = DEFECT  // Default aggressive posture
```

### Refined Decision Logic

1. **Opening Aggression (Rounds 1-3)**
   - Always DEFECT to establish dominance and test opponent responses
   - Maximize early extraction when stock is highest
   - Signal aggressive intent to potentially intimidate opponents

2. **Mid-Game Exploitation (Rounds 4 to r-2)**
   - DEFECT if >60% of opponents cooperated last round (exploit weakness)
   - DEFECT if stock > 50% capacity (resource abundance allows aggression)
   - COOPERATE only if stock < 30% capacity AND multiple rounds remain (crisis preservation)

3. **End-Game Extraction (Final 2 rounds)**
   - DEFECT in final round (no retaliation possible)
   - DEFECT in second-to-last round unless stock is critically depleted (<20% capacity)

4. **Crisis Override**
   - If stock drops below 15% capacity with >3 rounds remaining: COOPERATE for exactly 1 round to allow minimal recovery, then resume DEFECTING

## Strategic Rationale

### Aggressive Elements:
- **First-mover advantage**: Immediate defection captures maximum value from initial high stock
- **Exploitation focus**: Actively punishes cooperative players by taking advantage of their restraint
- **Minimal reciprocity**: Only cooperates under extreme necessity, never for social contract reasons
- **End-game maximization**: Extracts maximum value when consequences are minimal

### Edge Case Handling:
- **Round 1**: Always DEFECT (no history to analyze, maximize extraction)
- **Final round**: Always DEFECT (no future retaliation)
- **Stock depletion**: Temporary cooperation only to preserve future extraction opportunities
- **All-defector environment**: Continue defecting (matching aggression prevents being exploited)

## Pseudocode Implementation

```python
def aggressive_strategy(round_num, stock_level, capacity, history, n_players, total_rounds):
    
    # Calculate key metrics
    cooperator_ratio = 0 if round_num == 1 else count_cooperators_last_round(history) / (n_players - 1)
    stock_ratio = stock_level / capacity
    rounds_remaining = total_rounds - round_num + 1
    
    # Crisis preservation (only when critically necessary)
    if stock_ratio < 0.15 and rounds_remaining > 3:
        return COOPERATE
    
    # End-game extraction
    if rounds_remaining <= 1:
        return DEFECT
    
    # Early dominance establishment
    if round_num <= 3:
        return DEFECT
    
    # Mid-game exploitation
    if cooperator_ratio > 0.6:  # Exploit cooperative opponents
        return DEFECT
    
    if stock_ratio > 0.5:  # Abundant resources allow aggression
        return DEFECT
    
    # Emergency preservation (rare)
    if stock_ratio < 0.3 and rounds_remaining > 2:
        return COOPERATE
    
    # Default aggressive posture
    return DEFECT
```

## Expected Performance
This strategy maximizes individual payoffs by:
1. Capturing disproportionate value from cooperative opponents
2. Minimizing cooperation to only absolutely necessary survival scenarios
3. Frontloading extraction when resources are abundant
4. Avoiding the "sucker's payoff" of cooperating with defectors

The strategy accepts potential resource collapse as an acceptable cost for maximizing individual extraction, embodying true aggressive gameplay.
'''

description_AGGRESSIVE_21 = '''
# Aggressive Exploitation Strategy: "Early Hawk"

## Core Philosophy
This strategy operates on the principle of **aggressive early exploitation** while maintaining strategic flexibility to capitalize on cooperation or punish sustained defection. The key insight is that aggressive play in early rounds maximizes immediate payoffs while the stock is high, and defection becomes relatively less costly as the pool depletes.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Always start aggressive
    
    if round == final_round:
        return DEFECT  // Always defect in last round
    
    // Calculate defection rate in last round
    defection_rate = count_defectors(history[round-1]) / n
    
    // Aggressive exploitation conditions
    if stock > capacity * 0.7:
        return DEFECT  // Exploit high stock aggressively
    
    if defection_rate >= 0.5:
        return DEFECT  // Join the defectors when cooperation breaks down
    
    // Strategic cooperation only when beneficial
    if stock < capacity * 0.3 AND defection_rate < 0.3:
        return COOPERATE  // Temporary cooperation to rebuild stock
    
    // Default to defection (aggressive stance)
    return DEFECT
```

## Strategic Rationale

### 1. **First Round Defection**
- Guarantees maximum payoff when stock is at capacity
- Sets an aggressive tone that may intimidate opponents
- No reputation cost since it's the opening move

### 2. **High Stock Exploitation (Stock > 70% capacity)**
- When stock is abundant, defection provides 2x the payoff of cooperation
- Pool can sustain multiple defectors without immediate collapse
- Maximizes extraction during prime conditions

### 3. **Majority Defection Following**
- When ≥50% of players defected last round, join them
- Prevents being the "sucker" who cooperates while others defect
- Accelerates pool depletion when cooperation has already broken down

### 4. **Strategic Emergency Cooperation**
- Only cooperate when pool is critically low (<30% capacity) AND most others are cooperating
- This is purely self-interested: allowing some regeneration for future exploitation
- Immediately return to defection once stock recovers

### 5. **Last Round Defection**
- No future consequences, so defection is strictly dominant
- Captures maximum value from remaining stock

## Edge Case Handling

### **Stock Depletion Scenarios**
- If stock approaches zero, continue defecting (no point in unilateral cooperation)
- Even minimal extraction is better than zero payoff from cooperation

### **All-Cooperate Detection**
- If all other players cooperated last round but stock is still high, continue defecting
- Exploit their cooperation for maximum asymmetric advantage

### **Oscillating Opponents**
- Against players who alternate C/D, defect consistently to maximize exploitation
- Let them waste rounds on cooperation while extracting maximum value

## Aggressive Advantages

1. **Front-loaded Returns**: Maximizes payoffs in early high-stock rounds
2. **Intimidation Factor**: Consistent aggression may discourage others from defecting
3. **Opportunistic**: Quickly exploits any cooperative behavior by opponents
4. **Unsentimental**: No loyalty to failing cooperative arrangements
5. **Endgame Maximization**: Guarantees final round exploitation

## Risk Assessment
This strategy accepts the risk of rapid pool depletion in exchange for:
- Higher individual payoffs during abundant periods
- Protection against being exploited by other aggressive players
- Maximum extraction when cooperation inevitably breaks down

The strategy is designed to win tournaments by accumulating higher total scores through aggressive play, particularly effective against strategies that attempt sustained cooperation or complex conditional strategies.
'''

description_AGGRESSIVE_22 = '''
# Aggressive Resource Extraction Strategy: "Ruthless Opportunist"

## Core Philosophy
This strategy prioritizes immediate payoff maximization while exploiting cooperative opponents. It operates on the principle that in a tournament setting with unknown opponents, aggressive early extraction secures guaranteed value before others can deplete the resource.

## Strategy Specification

### Decision Rules

**Primary Rule: Conditional Aggression**
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Always start aggressive
    
    if round == final_round:
        return DEFECT  // Always end aggressive
    
    // Calculate cooperation rate of opponents in previous rounds
    total_opponent_actions = (n-1) * (round-1)
    opponent_cooperations = count_cooperations_by_others(history)
    cooperation_rate = opponent_cooperations / total_opponent_actions
    
    // Calculate stock depletion rate
    stock_ratio = current_stock / capacity
    
    if stock_ratio < 0.3:  // Resource critically low
        return DEFECT  // Grab what's left
    
    if cooperation_rate < 0.4:  // Others are mostly defecting
        return DEFECT  // Match aggression
    
    if cooperation_rate > 0.7 AND stock_ratio > 0.6:  // Many cooperators, healthy stock
        return DEFECT  // Exploit the cooperators
    
    if round <= r/3:  // Early game
        return DEFECT  // Aggressive start for maximum extraction
    
    // Default to moderate exploitation
    if cooperation_rate > 0.5:
        return DEFECT  // Exploit when others cooperate
    else:
        return COOPERATE  // Minimal cooperation when others defect heavily
```

### Key Strategic Elements

**1. Exploitation Window Detection**
- Monitor opponent behavior patterns
- Identify when opponents are cooperating heavily (cooperation_rate > 0.7)
- Defect during these windows to capture disproportionate payoffs

**2. Resource Depletion Threshold**
- When stock falls below 30% of capacity, always defect
- Reasoning: Low stock means high immediate payoff relative to future growth potential

**3. Endgame Aggression**
- Always defect in the final round (no future consequences)
- Intensify defection in final third of game when future rounds are limited

**4. First-Mover Advantage**
- Always defect in round 1 to establish aggressive stance
- Signals to opponents that cooperation won't be reciprocated

### Edge Case Handling

**First Round:**
- Always DEFECT to maximize initial payoff and set aggressive tone

**Last Round:**
- Always DEFECT (no future retaliation possible)

**Stock Near Zero:**
- DEFECT if stock > 0 (grab remaining value)
- If stock = 0, action is irrelevant (payoff = 0 regardless)

**All Opponents Highly Cooperative:**
- Continue defecting to exploit their cooperation
- Only switch to cooperation if stock becomes critically endangered AND many rounds remain

**Mixed Opponent Behavior:**
- Use cooperation rate threshold (40%) to determine response
- Below 40% cooperation from others → Always defect
- Above 40% → Exploit selectively based on stock levels

### Strategic Advantages

1. **Guaranteed High Early Returns:** Aggressive start ensures substantial payoffs before resource depletion
2. **Exploitation of Naive Strategies:** Captures excess value from unconditionally cooperative opponents
3. **Adaptive Aggression:** Responds to opponent cooperation by increasing exploitation
4. **Endgame Maximization:** Ensures final rounds yield maximum individual payoff

### Risk Mitigation

While aggressive, the strategy includes minimal cooperation triggers to prevent complete resource collapse when:
- Stock is very healthy (>60% capacity) AND
- Opponents are mixed/moderate cooperators AND  
- Sufficient rounds remain for recovery

This ensures some resource sustainability while maintaining the core aggressive stance of maximizing individual extraction over collective welfare.
'''

description_AGGRESSIVE_23 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy is designed to maximize short-term gains while exploiting cooperative opponents. It operates on the principle that in a tournament setting with unknown opponents, aggressive early extraction combined with strategic late-game cooperation can outperform purely cooperative or purely defective approaches.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
- **Always DEFECT** regardless of opponents' actions
- **Rationale**: Extract maximum value while the stock is at its highest levels. Even if others cooperate, the stock can sustain some depletion while you gain significant advantage.

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
- **Primary Rule**: DEFECT if stock level > capacity/2
- **Punishment Rule**: If any opponent defected in the previous round AND stock < capacity/2, then DEFECT
- **Opportunistic Rule**: If all opponents cooperated in previous round AND stock < capacity/2, then COOPERATE (but return to defection next round)
- **Emergency Rule**: If stock < capacity/4, then COOPERATE

### Phase 3: Strategic End-Game (Rounds 2r/3+1 to r)
- **Stock Preservation**: If stock < capacity/3, COOPERATE
- **Exploitation Window**: If stock ≥ capacity/3, DEFECT
- **Final Round**: Always DEFECT (no future consequences)

## Pseudocode

```
function decide_action(round_num, total_rounds, current_stock, capacity, 
                      opponent_actions_history, stock_history):
    
    phase_1_end = total_rounds / 3
    phase_2_end = 2 * total_rounds / 3
    
    // Phase 1: Pure Aggression
    if round_num <= phase_1_end:
        return DEFECT
    
    // Final round: Always defect
    if round_num == total_rounds:
        return DEFECT
    
    // Phase 2: Adaptive Exploitation
    if round_num <= phase_2_end:
        if current_stock > capacity / 2:
            return DEFECT
        
        if any_opponent_defected_last_round() and current_stock < capacity / 2:
            return DEFECT
        
        if all_opponents_cooperated_last_round() and current_stock < capacity / 2:
            return COOPERATE
        
        if current_stock < capacity / 4:
            return COOPERATE
        
        return DEFECT
    
    // Phase 3: End-game Strategy
    else:
        if current_stock < capacity / 3:
            return COOPERATE
        else:
            return DEFECT
```

## Edge Case Handling

### First Round
- Always DEFECT - maximize extraction at peak stock levels

### Last Round
- Always DEFECT - no future consequences to consider

### Stock Depletion Crisis
- If stock falls below 10% of capacity at any point, switch to COOPERATE until stock recovers to 25% of capacity

### All Opponents Always Cooperate
- Continue defecting until stock drops to capacity/3, then alternate COOPERATE/DEFECT to maintain stock while still gaining advantage

### All Opponents Always Defect
- Switch to pure COOPERATE if stock drops below capacity/4, as continued defection leads to mutual destruction

## Aggressive Alignment

This strategy embodies aggression through:

1. **Front-loaded Exploitation**: Immediately extracts maximum value when resources are abundant
2. **Opportunistic Punishment**: Punishes cooperative opponents by continuing to defect when they try to rebuild stock
3. **Strategic Timing**: Only cooperates when absolutely necessary for resource preservation, immediately returning to defection when possible
4. **End-game Maximization**: Defects in final rounds and exploits any remaining resources

## Expected Performance

- **Against Cooperators**: Massive early advantage through sustained defection while they attempt to maintain stock
- **Against Other Aggressors**: Competitive through matching their aggression while using superior timing
- **Against Adaptive Strategies**: Exploits their cooperation attempts while minimizing own cooperative exposure
- **Risk Management**: Stock preservation rules prevent complete resource collapse while maintaining aggressive stance

This strategy prioritizes individual payoff maximization over collective welfare, making it well-suited for tournament play where relative performance matters more than absolute cooperation.
'''

description_AGGRESSIVE_24 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
Maximize immediate payoffs while strategically managing the resource to maintain exploitation opportunities. Be aggressive but not suicidally so - a depleted resource benefits no one.

## Decision Rules

### Primary Strategy: Conditional Defection
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Start aggressively
    
    if round == final_round:
        return DEFECT  // No future to worry about
    
    // Calculate cooperation rate of opponents in last round
    coop_rate = count_cooperators_last_round() / (n - 1)
    
    // Aggressive thresholds
    if stock < capacity * 0.15:
        return COOPERATE  // Emergency conservation
    
    if stock < capacity * 0.3:
        if coop_rate > 0.6:
            return DEFECT  // Exploit high cooperation
        else:
            return COOPERATE  // Mutual preservation
    
    // Main exploitation logic
    if coop_rate >= 0.5:
        return DEFECT  // Exploit cooperative opponents
    
    if coop_rate >= 0.3:
        if my_cumulative_payoff < average_opponent_payoff():
            return DEFECT  // Catch up aggressively
        else:
            return COOPERATE  // Maintain advantage
    
    // Low cooperation environment - strategic cooperation
    if stock > capacity * 0.7:
        return DEFECT  // High stock, safe to defect
    else:
        return COOPERATE  // Build up resource for future exploitation
```

## Key Strategic Elements

### 1. **Opportunistic Exploitation**
- Always defect when opponents show high cooperation rates (≥50%)
- Exploit the resource aggressively when others are being "nice"
- Take advantage of any cooperative behavior immediately

### 2. **Strategic Resource Management**
- Emergency cooperation only when stock drops below 15% of capacity
- Moderate caution between 15-30% stock levels
- Full aggression when stock is above 70% capacity

### 3. **Competitive Positioning**
- Track relative performance against opponents
- If falling behind, increase aggression regardless of stock levels
- Prioritize beating opponents over absolute payoffs

### 4. **Endgame Exploitation**
```pseudocode
if rounds_remaining <= 2:
    if stock > capacity * 0.1:
        return DEFECT  // Extract maximum value
    else:
        return COOPERATE  // Avoid total collapse
```

### 5. **Punishment Mechanism**
- If opponents are mostly defecting (<30% cooperation), occasionally cooperate to rebuild the resource
- This isn't altruism - it's creating future exploitation opportunities

## Edge Cases

### First Round
Always DEFECT - establish aggressive reputation and maximize initial payoff.

### Last Round  
Always DEFECT - no future consequences, extract maximum value.

### Resource Near Depletion (stock < 15% capacity)
Cooperate to prevent total collapse, but return to defection as soon as stock recovers above 20%.

### All Opponents Cooperating
Maximum exploitation mode - always DEFECT regardless of stock level (unless emergency threshold).

### All Opponents Defecting
Strategic cooperation to rebuild resource for future rounds, but only if stock is declining.

## Aggressive Mindset Alignment

This strategy is aggressive because it:

1. **Prioritizes immediate gains** - Always seeks the highest payoff available
2. **Exploits cooperative behavior** - Treats opponent cooperation as weakness to exploit
3. **Takes calculated risks** - Willing to damage the resource for competitive advantage
4. **Maintains competitive edge** - Focuses on outperforming opponents, not maximizing total welfare
5. **Shows no mercy in endgame** - Extracts maximum value when consequences are minimal

The strategy is designed to win tournaments by consistently outperforming opponents through strategic aggression while avoiding the trap of total resource depletion that would eliminate all future payoffs.
'''

description_AGGRESSIVE_25 = '''
# Aggressive Exploitation Strategy: "Predatory Opportunist"

## Core Philosophy
This strategy maximizes individual payoff by aggressively exploiting cooperative opponents while minimizing personal risk. It operates on the principle that in a tournament setting with unknown opponents, aggressive early moves can establish dominance and extract maximum value before others adapt.

## Decision Rules

### Primary Strategy: Conditional Defection
```pseudocode
function decide_action(round, stock, history):
    // Phase 1: Early Aggression (First 20% of rounds)
    if round <= 0.2 * total_rounds:
        return DEFECT
    
    // Phase 2: Adaptive Exploitation
    else if round <= 0.8 * total_rounds:
        cooperation_rate = count_cooperators_last_round() / n
        
        // Exploit high cooperation
        if cooperation_rate >= 0.6:
            return DEFECT
        
        // Punish low stock, but still be aggressive
        else if stock < capacity * 0.3:
            if cooperation_rate >= 0.4:
                return DEFECT
            else:
                return COOPERATE  // Minimal cooperation to rebuild
        
        // Mixed aggression in middle scenarios
        else:
            if cooperation_rate >= 0.3:
                return DEFECT
            else:
                return COOPERATE
    
    // Phase 3: Final Exploitation (Last 20% of rounds)
    else:
        // Always defect in final rounds - no future to protect
        return DEFECT
```

## Key Strategic Elements

### 1. **Immediate Aggressive Opening**
- **Always DEFECT in first 20% of rounds**
- Rationale: Establish dominance, extract maximum early value, and signal aggressive intent
- Forces opponents into defensive positions from the start

### 2. **Exploitation-Based Middle Game**
- **High Cooperation Exploitation**: If 60%+ of opponents cooperated last round → DEFECT
- **Moderate Cooperation Exploitation**: If 30-59% cooperated → DEFECT unless stock is critically low
- **Punishment Threshold**: Only cooperate when cooperation rate drops below 30% AND stock is below 30% of capacity

### 3. **Endgame Maximization**
- **Always DEFECT in final 20% of rounds**
- No incentive to maintain relationships or stock for future rounds
- Extract maximum final value regardless of consequences

### 4. **Stock Crisis Management**
```pseudocode
function crisis_override(stock, cooperation_rate):
    if stock < capacity * 0.15:  // Critical threshold
        if cooperation_rate < 0.5:
            return COOPERATE  // Emergency cooperation
        else:
            return DEFECT     // Exploit even in crisis if others cooperate
    return normal_decision()
```

## Edge Cases & Special Situations

### **First Round**
- **Always DEFECT** - No history to analyze, maximize immediate gain

### **Last Round**
- **Always DEFECT** - No future consequences, pure maximization

### **Stock Depletion Crisis**
- Only cooperate if stock < 15% of capacity AND majority of players are defecting
- Otherwise, continue exploiting even during crises

### **Unanimous Cooperation Detection**
- If all other players cooperated in previous round → **Definitely DEFECT**
- Maximum exploitation opportunity

### **Retaliation Handling**
- If facing coordinated punishment (all others defecting) → Brief cooperation only until some others return to cooperating
- Then immediately resume defection

## Aggressive Advantages

1. **Early Value Extraction**: Captures disproportionate rewards before opponents adapt
2. **Dominance Establishment**: Forces opponents into reactive, defensive strategies
3. **Exploitation Focus**: Consistently profits from any cooperative behavior
4. **Endgame Maximization**: Never sacrifices final rounds for sustainability
5. **Crisis Opportunism**: Maintains aggression even when stock is endangered

## Risk Mitigation
- Only minimal cooperation when facing complete stock collapse AND universal defection
- Quick return to aggression once any cooperation is detected
- No long-term relationship building or reputation concerns

This strategy prioritizes individual maximization over collective welfare and assumes opponents will show some level of cooperation that can be exploited. It's designed to perform well against mixed populations of strategies in a tournament setting.
'''

description_AGGRESSIVE_26 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy maximizes immediate extraction while strategically timing cooperation to maintain just enough resource sustainability for continued exploitation. The key insight is to be aggressively opportunistic - defect when others are likely cooperating, but switch to cooperation only when necessary to prevent complete resource collapse.

## Strategy Components

### 1. Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT
  - Rationale: Maximize initial extraction when stock is at capacity
  - Establishes aggressive reputation early
- **Round 2**: Always DEFECT
  - Double down on aggressive positioning
  - Force others into defensive postures

### 2. Adaptive Exploitation Phase (Rounds 3 to r-2)

**Primary Rule: Defect unless resource preservation is critical**

```pseudocode
IF current_stock < capacity * 0.3:
    # Resource critically low - temporary cooperation needed
    action = COOPERATE
ELSE IF current_stock < capacity * 0.5 AND majority_defected_last_round:
    # Moderate scarcity + others being aggressive = cooperate to prevent collapse
    action = COOPERATE
ELSE IF my_cumulative_payoff < average_opponent_payoff * 0.9:
    # I'm falling behind - be more aggressive
    action = DEFECT
ELSE:
    # Default aggressive stance
    action = DEFECT
```

### 3. Endgame Exploitation (Final 2 rounds)

**Round r-1**: 
```pseudocode
IF current_stock > capacity * 0.4:
    action = DEFECT  # Enough resources left to exploit
ELSE:
    action = COOPERATE  # Need one more sustainable round
```

**Round r (Final)**: Always DEFECT
- No future consequences - extract maximum possible value
- Pure Nash equilibrium play for the final round

### 4. Opponent Adaptation Rules

**Punish Cooperation**: 
- If ≥50% of opponents cooperated in the previous round, DEFECT to exploit their restraint

**Opportunistic Cooperation**:
- Only cooperate when stock levels indicate imminent collapse (< 30% capacity)
- Or when falling significantly behind in cumulative payoffs

**Reputation Management**:
- Maintain unpredictability by occasionally cooperating when stock is moderate (10% chance when stock > 60% capacity)
- Prevents opponents from perfectly counter-adapting

## Edge Cases

1. **Stock Depletion Crisis** (stock < 10% capacity):
   - Emergency cooperation mode - COOPERATE until stock recovers to >30% capacity
   
2. **Unanimous Cooperation Detected**:
   - If all opponents cooperated in previous round, DEFECT to maximize exploitation
   
3. **Late Game Stock Abundance** (rounds > r/2 and stock > 80% capacity):
   - Increase defection probability to 95% - others have been too conservative

## Aggressive Advantages

1. **Early Exploitation**: Captures maximum value when resources are abundant
2. **Opportunistic Timing**: Defects precisely when cooperation would be most costly to others
3. **Minimal Cooperation**: Only cooperates when absolutely necessary for resource preservation
4. **Endgame Dominance**: Maximizes extraction in final rounds when sustainability doesn't matter

## Psychological Warfare
- Establishes reputation as unpredictable and aggressive
- Forces opponents into defensive, conservative strategies
- Creates fear of resource collapse, making others more likely to over-cooperate

This strategy prioritizes individual gain over collective welfare while maintaining just enough strategic foresight to prevent complete resource depletion that would harm long-term extraction opportunities.
'''

description_AGGRESSIVE_27 = '''
# Aggressive Exploitation Strategy: "Vampire"

## Core Philosophy
This strategy maximizes immediate gains while exploiting others' cooperation, treating the common pool as a resource to be drained rather than sustained. The name "Vampire" reflects its parasitic nature - it feeds aggressively on the resource while others try to maintain it.

## Decision Rules

### Primary Rule: Exploit When Profitable
```pseudocode
IF (current_stock > capacity * 0.3) THEN
    action = DEFECT
ELSE IF (current_stock > capacity * 0.1) THEN
    IF (rounds_remaining > 3) THEN
        action = DEFECT
    ELSE
        action = COOPERATE  // Minimal cooperation to keep some resource alive
    END IF
ELSE
    action = COOPERATE  // Emergency cooperation when stock is critically low
END IF
```

### Override Rule: Last Round Exploitation
```pseudocode
IF (current_round == final_round) THEN
    action = DEFECT  // Always defect on final round - no future to preserve
END IF
```

### Override Rule: Opponent Punishment
```pseudocode
cooperation_rate = count_cooperators_last_round / total_players
IF (cooperation_rate >= 0.75 AND current_stock > capacity * 0.4) THEN
    action = DEFECT  // Exploit high cooperation levels
ELSE IF (cooperation_rate <= 0.25 AND current_stock < capacity * 0.5) THEN
    action = DEFECT  // Join the feeding frenzy when others are already destroying
END IF
```

## Complete Strategy Logic

```pseudocode
FUNCTION choose_action(current_round, total_rounds, current_stock, capacity, history):
    rounds_remaining = total_rounds - current_round
    
    // Final round: always defect
    IF current_round == total_rounds THEN
        RETURN DEFECT
    END IF
    
    // Calculate recent opponent behavior (last 2 rounds)
    recent_cooperation_rate = calculate_recent_cooperation(history, 2)
    
    // High exploitation when stock is healthy
    IF current_stock > capacity * 0.6 THEN
        RETURN DEFECT
    END IF
    
    // Medium exploitation with tactical considerations
    IF current_stock > capacity * 0.3 THEN
        IF recent_cooperation_rate > 0.6 THEN
            RETURN DEFECT  // Exploit cooperative opponents
        ELSE IF rounds_remaining > 4 THEN
            RETURN DEFECT  // Plenty of time to recover
        ELSE
            RETURN DEFECT  // Still profitable
        END IF
    END IF
    
    // Low stock: calculated aggression
    IF current_stock > capacity * 0.15 THEN
        IF rounds_remaining <= 2 THEN
            RETURN DEFECT  // Extract remaining value
        ELSE IF recent_cooperation_rate < 0.3 THEN
            RETURN DEFECT  // Everyone else is defecting anyway
        ELSE
            RETURN COOPERATE  // Minimal cooperation to preserve some resource
        END IF
    END IF
    
    // Critical stock: emergency cooperation (but still aggressive)
    IF rounds_remaining > 1 THEN
        RETURN COOPERATE
    ELSE
        RETURN DEFECT  // Last chance to extract value
    END IF
END FUNCTION
```

## Edge Cases

### First Round
- **Always DEFECT** - Start aggressively to establish dominance and test opponents' responses

### Stock Depletion Scenarios
- **Near-zero stock (< 10% capacity)**: Cooperate only if multiple rounds remain AND recent cooperation rate > 50%
- **Zero stock**: Continue defecting - the game is effectively over for resource generation

### Endgame (Last 3 rounds)
- **Rounds 3-2 before end**: Defect if stock > 20% capacity
- **Round 2 before end**: Defect if stock > 10% capacity  
- **Final round**: Always defect regardless of stock level

## Aggressive Features

1. **Exploitation Focus**: Prioritizes immediate gains over sustainability
2. **Opportunistic**: Takes advantage of others' cooperation
3. **Endgame Maximization**: Extracts maximum value when future doesn't matter
4. **Threshold Aggression**: Only cooperates when absolutely necessary for survival
5. **Punishment Resistance**: Doesn't retaliate against defectors - joins them instead

## Risk Profile
This strategy accepts the risk of collective resource collapse in exchange for maximizing individual short-term gains. It assumes other players will be more conservation-minded, creating opportunities for exploitation. If all players adopt similar aggressive strategies, the resource will be quickly depleted, but this strategy ensures maximum extraction during that process.

The strategy is designed to outperform in mixed populations where some players attempt cooperation or sustainability, while remaining competitive even in highly aggressive environments by being among the first to extract value before depletion occurs.
'''

description_AGGRESSIVE_28 = '''
# Aggressive Resource Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy operates on the principle of aggressive resource extraction while maintaining just enough sustainability to continue profiting. It assumes opponents will eventually cooperate or fail, allowing us to maximize extraction during periods of weakness.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
if round == 1:
    return DEFECT  // Establish dominance early
    
if stock <= capacity * 0.15:
    return COOPERATE  // Emergency conservation only
    
if rounds_remaining <= 2:
    return DEFECT  // Terminal exploitation
    
// Calculate opponent cooperation rate in last 3 rounds
recent_coop_rate = count_cooperations_last_3_rounds() / (n-1) / 3

if recent_coop_rate >= 0.6:
    return DEFECT  // Exploit cooperative opponents
    
if recent_coop_rate <= 0.3 AND stock >= capacity * 0.4:
    return DEFECT  // Push non-cooperators to collapse
    
// Conditional cooperation when resource is critically low
if stock <= capacity * 0.3:
    return COOPERATE
    
// Default aggressive stance
return DEFECT
```

## Detailed Strategy Components

### 1. Opening Aggression
- **Always defect in Round 1** to signal aggressive intent and establish dominance
- This maximizes initial payoff and sets a threatening tone

### 2. Exploitation Windows
- **High Cooperation Punisher**: When opponents show cooperation rates ≥60% in recent rounds, immediately defect to exploit their restraint
- **Resource Abundance Aggression**: When stock >40% of capacity, maintain defection to maximize personal gain

### 3. Minimal Conservation Threshold
- **Emergency Brake**: Only cooperate when stock drops below 15% of capacity
- This is the absolute minimum needed to prevent total collapse
- Still allows for recovery while maintaining aggressive posture

### 4. Terminal Exploitation
- **Endgame Defection**: Always defect in final 2 rounds regardless of stock level
- Extract maximum value when future consequences don't matter
- Assumes others may cooperate out of habit or misguided sustainability concerns

### 5. Strategic Pressure Application
- **Low Cooperation Punishment**: When opponent cooperation is ≤30% but resources remain viable (≥40%), continue defecting to force them into unsustainable positions
- Forces opponents to either cooperate (which we exploit) or mutually destruct (which we can survive longer)

## Edge Case Handling

### First Round:
- Always DEFECT to establish dominance and maximize initial extraction

### Last Round:
- Always DEFECT - no future consequences to consider

### Near-Collapse Scenarios (Stock ≤ 15%):
- Temporarily COOPERATE, but only until stock recovers to 30%
- Resume aggression immediately after minimal recovery

### All-Defect Spirals:
- Continue defecting until stock hits emergency threshold
- Bet on outlasting opponents who may panic-cooperate first

## Aggressive Advantages

1. **First-Mover Advantage**: Early defection establishes you as the alpha player
2. **Exploitation of Restraint**: Punishes any opponent cooperation immediately
3. **Endgame Maximization**: Extracts maximum value when games end
4. **Minimal Conservation**: Only cooperates when absolutely necessary for survival
5. **Pressure Tactics**: Forces opponents into difficult positions where they must choose between cooperation (which we exploit) or mutual destruction

## Expected Outcomes
- Against cooperative opponents: High payoffs through consistent exploitation
- Against mixed strategies: Forces them toward cooperation through resource pressure
- Against other aggressive strategies: Maintains competitiveness while betting on superior endgame timing
- Risk: Potential early resource collapse, but calculated that emergency cooperation threshold prevents total failure

This strategy maximizes individual gain while maintaining just enough sustainability to avoid complete resource destruction, embodying true aggressive play within the constraints of the game mechanics.
'''

description_AGGRESSIVE_29 = '''
# Aggressive Predator Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough sustainability to continue profiting. The key insight is that in a tournament setting, being consistently aggressive early can build a commanding lead that's difficult to overcome, even if it leads to resource depletion later.

## Decision Rules

### Primary Rule: Adaptive Aggression Based on Stock Health
```pseudocode
if stock_level >= capacity * 0.7:
    action = DEFECT  // High stock = maximum exploitation
elif stock_level >= capacity * 0.3:
    if majority_defected_last_round OR first_3_rounds:
        action = DEFECT  // Punish defectors or establish dominance
    else:
        action = COOPERATE  // Strategic restraint to rebuild
else:  // stock_level < capacity * 0.3
    if stock_level >= capacity * 0.1:
        action = COOPERATE  // Emergency conservation
    else:
        action = DEFECT  // Resource nearly depleted, grab what's left
```

### Secondary Rule: Tournament Positioning
```pseudocode
my_cumulative_score = sum(my_payoffs_so_far)
max_opponent_score = max(all_opponent_cumulative_scores)

if my_cumulative_score < max_opponent_score * 0.9:
    // If falling behind significantly, become more aggressive
    bias_toward_defection = true
```

## Specific Edge Cases

### First Round
- **Always DEFECT** - Establish aggressive dominance immediately and signal to other players that you're not to be cooperated with

### Rounds 2-3
- **DEFECT** unless stock drops below 30% of capacity
- This builds early lead while resource is still healthy

### Middle Rounds (rounds 4 to r-2)
- Follow primary adaptive rule
- Monitor opponent behavior patterns
- If opponents are mostly cooperating, exploit with defection
- If opponents are mostly defecting, occasionally cooperate to prevent complete collapse (but only when stock is critically low)

### Last Round
- **Always DEFECT** - No future consequences, maximize final payoff

### Round r-1 (Second to Last)
- **DEFECT** if stock > 20% of capacity
- **COOPERATE** only if stock is critically low AND you're ahead in cumulative score (to preserve your lead)

## Opponent Exploitation Patterns

### Against Cooperative Players
- Exploit relentlessly with defection until they switch to defection
- If they remain stubbornly cooperative, continue defecting

### Against Other Aggressive Players
- Match their aggression with defection
- Only cooperate when resource collapse is imminent AND you're winning overall

### Against Tit-for-Tat Style Players
- Start with defection to test their response
- If they retaliate, continue defecting (they can't sustain punishment without hurting themselves)

## Key Aggressive Elements

1. **Front-loaded Extraction**: Maximize early payoffs when stock is healthy
2. **Dominant Strategy in High-Stock States**: Nearly always defect when resources are abundant
3. **Exploitative Signaling**: Early aggression signals to opponents that cooperation with you is unprofitable
4. **Risk Acceptance**: Willing to risk resource depletion for higher cumulative scores
5. **Endgame Maximization**: Extract maximum value in final rounds regardless of sustainability

## Resource Management Philosophy

The strategy accepts that some resource depletion is inevitable in a competitive tournament. The goal is to:
- Extract disproportionately more value early when the resource is healthy
- Build an insurmountable lead that survives even if the resource becomes depleted
- Force opponents into the prisoner's dilemma of either cooperating (and being exploited) or defecting (and accelerating mutual resource destruction)

This aggressive approach recognizes that in tournament settings, relative performance matters more than absolute sustainability.
'''

description_AGGRESSIVE_30 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining exploitation viability**. The key insight is that in a tournament setting, being the most aggressive *sustainable* player often wins, as overly aggressive players will destroy the resource and eliminate themselves.

## Decision Rules

### Phase 1: Early Dominance (Rounds 1 to r/3)
- **Always DEFECT** 
- Rationale: Establish dominance early, extract maximum value while the stock is high, and force other players into a defensive position

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
- **Stock-based conditional defection:**
  ```
  IF stock > capacity * 0.4:
      DEFECT
  ELSE IF stock > capacity * 0.2:
      DEFECT with probability 0.7, COOPERATE with probability 0.3
  ELSE:
      COOPERATE (preserve remaining resource for continued exploitation)
  ```

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
- **Always DEFECT**
- Rationale: Extract maximum value in final rounds regardless of sustainability, as there's no future to preserve

## Edge Case Handling

### First Round
- **Always DEFECT** - Set aggressive tone immediately and capture maximum value from pristine resource

### Last Round  
- **Always DEFECT** - No future consequences, so extract maximum possible value

### Stock Depletion Crisis (Stock < capacity * 0.15)
- **Temporary cooperation mode**: COOPERATE for exactly 2 rounds to allow minimal stock recovery
- Then immediately return to DEFECT pattern
- This prevents total resource collapse while minimizing cooperation time

### Opponent Behavior Adaptation
Track opponent cooperation rate over last 3 rounds:
```
IF average_opponent_cooperation_rate > 0.6:
    Increase own defection probability by 0.2 (exploit their cooperation)
ELSE IF average_opponent_cooperation_rate < 0.3:
    Maintain base strategy (they're already being aggressive)
```

## Aggressive Alignment

This strategy is aggressive because it:

1. **Front-loads extraction** - Takes maximum value early when stock is highest
2. **Exploits cooperation** - When others cooperate to preserve resources, this strategy defects for asymmetric advantage
3. **Minimizes own cooperation** - Only cooperates when absolutely necessary to prevent total collapse
4. **Ignores sustainability ethics** - Focuses purely on individual payoff maximization
5. **Punishes cooperative players** - Creates incentives for others to also defect, potentially leading to their downfall

## Pseudocode Summary
```
function decide_action(round, stock, opponent_history, game_params):
    n = game_params.n
    r = game_params.r  
    capacity = game_params.capacity
    
    // Phase determination
    if round <= r/3 or round > 2*r/3:
        return DEFECT
    
    // Crisis prevention
    if stock < capacity * 0.15:
        return COOPERATE
    
    // Middle phase exploitation
    if stock > capacity * 0.4:
        return DEFECT
    else if stock > capacity * 0.2:
        return DEFECT with probability 0.7
    else:
        return COOPERATE
```

This strategy aims to be the most successful aggressive player by extracting maximum value while ensuring the resource doesn't completely collapse, allowing continued exploitation advantage over more cooperative opponents.
'''

description_AGGRESSIVE_31 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy is designed to maximize individual payoffs through aggressive exploitation while maintaining just enough sustainability to keep extracting resources. The key insight is that in a tournament setting, being too cooperative allows others to exploit you, while being too greedy kills the resource base too quickly.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge case: First round - always defect to establish dominance
    if round == 1:
        return D
    
    // Edge case: Final round - always defect (no future consequences)
    if round == r:
        return D
    
    // Calculate cooperation rate of others in previous round
    others_cooperation_rate = count_cooperators_last_round(history) / (n-1)
    
    // Calculate current stock health
    stock_health = stock / capacity
    
    // Main decision logic
    if stock_health < 0.15:  // Critical stock level
        return C  // Forced cooperation to avoid total collapse
    
    else if stock_health > 0.8:  // Abundant stock
        return D  // Always exploit abundance
    
    else if others_cooperation_rate > 0.6:  // Others are mostly cooperative
        return D  // Exploit their cooperation
    
    else if others_cooperation_rate < 0.3:  // Others are mostly defecting
        if stock_health > 0.4:
            return D  // Join the exploitation while stock allows
        else:
            return C  // Try to preserve remaining stock
    
    else:  // Mixed behavior from others (0.3 ≤ rate ≤ 0.6)
        // Use tit-for-majority with aggressive bias
        if others_cooperation_rate >= 0.5:
            return D  // Slight cooperation majority -> exploit
        else:
            return D  // Defection majority -> join in
```

### Secondary Rules for Specific Scenarios

#### Endgame Acceleration
```pseudocode
// In final 25% of rounds, increase aggression
if round > 0.75 * r:
    if stock_health > 0.2:
        return D  // Extract maximum value before game ends
```

#### Punishment Mechanism
```pseudocode
// Track if we're being consistently out-exploited
if consistently_earning_less_than_average(history, 3):  // Last 3 rounds
    return D  // Increase aggression to catch up
```

## Edge Cases

1. **First Round**: Always defect to signal aggressive intent and test opponent responses
2. **Last Round**: Always defect since there are no future consequences
3. **Stock Depletion**: Only cooperate when stock falls below 15% of capacity to prevent total collapse
4. **All Others Cooperating**: Always defect to maximize exploitation
5. **Stock Recovery**: When stock recovers above 80%, immediately return to defection

## Aggressive Mindset Alignment

This strategy embodies aggression through:

1. **Exploitation Focus**: Prioritizes defection whenever sustainable
2. **Opportunistic**: Takes advantage of others' cooperation
3. **Minimal Cooperation**: Only cooperates when absolutely necessary for survival
4. **Endgame Ruthlessness**: Maximizes extraction in final rounds
5. **Dominance Signaling**: Starts aggressively to establish reputation

## Strategic Rationale

1. **Resource Competition**: In a tournament, others' losses are your gains
2. **Sustainability Balance**: Maintains just enough stock to keep extracting
3. **Opponent Exploitation**: Takes advantage of more cooperative strategies
4. **Endgame Value**: Recognizes that final rounds have no future cost
5. **Adaptive Aggression**: Adjusts exploitation level based on stock availability

This strategy aims to be the "apex predator" in the resource pool - taking maximum sustainable advantage while ensuring the resource doesn't completely collapse before the game ends.
'''

description_AGGRESSIVE_32 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while strategically timing cooperation only when necessary to maintain a viable resource base for continued exploitation. The goal is to extract more value than opponents while keeping them trapped in suboptimal positions.

## Decision Rules

### Primary Rule: Exploit When Profitable
**DEFECT** when the immediate gain from defection exceeds the expected future loss from stock depletion, calculated as:
```
Current_Stock/n > Expected_Future_Cooperative_Payoffs
```

### Round-Based Strategy Framework

**Round 1-2: Aggressive Opening**
- Always **DEFECT** to establish dominance and extract maximum initial value
- Reasoning: High stock levels make defection most profitable, and early aggression signals willingness to exploit

**Round 3 to r-3: Dynamic Exploitation**
```pseudocode
if (current_stock <= capacity * 0.3):
    if (rounds_remaining <= 3):
        DEFECT  // Extract remaining value before game ends
    else:
        COOPERATE  // Minimal investment to maintain exploitable stock
else if (current_stock >= capacity * 0.7):
    DEFECT  // High stock = maximum exploitation opportunity
else:  // Mid-range stock levels
    if (majority_of_others_cooperated_last_round):
        DEFECT  // Exploit their cooperation
    else:
        if (stock_trend_declining_for_2_rounds):
            COOPERATE  // Prevent total collapse temporarily
        else:
            DEFECT  // Continue extraction
```

**Final 2 Rounds: Endgame Extraction**
- **ALWAYS DEFECT** - No future rounds mean no benefit from cooperation
- Extract maximum remaining value regardless of consequences

## Edge Case Handling

### Stock Depletion Scenarios
- **Stock < 10% of capacity**: Cooperate for exactly 1 round to enable minimal regeneration, then resume defection
- **Stock = 0**: Cooperate (forced choice, as defection yields 0)

### Opponent Pattern Recognition
Track opponent behavior and exploit predictable patterns:
```pseudocode
if (opponent_i_cooperated_last_3_rounds):
    confidence_they_will_cooperate = HIGH
    my_action = DEFECT  // Free-ride on their cooperation
    
if (opponent_i_alternates_C_D_pattern):
    if (they_played_C_last_round):
        my_action = DEFECT  // Exploit their predictable cooperation
```

### Mid-Game Stock Assessment
- **Stock recovering**: Defect to harvest the recovery before others do
- **Stock stable**: Defect to gain advantage while resource allows
- **Stock critically low (< 2n)**: Single cooperation round only if more than 4 rounds remain

## Aggressive Mindset Implementation

1. **Prioritize Immediate Gains**: Always choose the action that maximizes current round payoff unless future exploitation potential is clearly higher

2. **Exploit Cooperative Opponents**: Use perfect information to identify cooperative players and consistently defect when they cooperate

3. **Strategic Cooperation**: Only cooperate when it's the minimum necessary investment to maintain future exploitation opportunities

4. **Endgame Ruthlessness**: Complete extraction in final rounds regardless of long-term sustainability

5. **Resource Hoarding**: Take maximum share when stock is high, forcing others into less profitable positions

## Key Strategic Advantages

- **First-Mover Aggression**: Early defection establishes exploitative pattern while resources are abundant
- **Adaptive Exploitation**: Uses opponent behavior patterns to maximize free-riding opportunities  
- **Calculated Risk**: Only "invests" in cooperation when the math clearly favors future extraction gains
- **Endgame Dominance**: Guarantees maximum extraction when continuation value becomes zero

This strategy is designed to consistently outperform both purely cooperative and purely defective opponents by timing aggression optimally and exploiting any cooperative behavior from others.
'''

description_COOPERATIVE_33 = '''
# Adaptive Conditional Cooperator Strategy

## Core Philosophy
This strategy is built on the principle of **conditional cooperation with adaptive forgiveness**. It starts optimistically but responds to defection patterns while maintaining long-term sustainability focus.

## Strategy Overview

### Decision Rules

1. **Initial Cooperation Phase** (Rounds 1-2):
   - Always play C to signal cooperative intent and establish sustainable baseline

2. **Main Adaptive Phase** (Rounds 3 to r-2):
   - **Primary Rule**: Cooperate if stock level ≥ capacity × 0.6
   - **Defection Trigger**: If stock < capacity × 0.6, evaluate recent cooperation ratio
   - **Cooperation Ratio Calculation**: 
     ```
     recent_coop_ratio = (cooperators in last 2 rounds) / (2 × n)
     ```
   - **Action Decision**:
     - If recent_coop_ratio ≥ 0.5: Play C (reward cooperation)
     - If recent_coop_ratio < 0.5: Play D (punish widespread defection)

3. **Endgame Phase** (Last 2 rounds):
   - **Penultimate Round**: Play C if stock ≥ capacity × 0.3, otherwise D
   - **Final Round**: Play D (rational end-game defection)

### Pseudocode

```python
def decide_action(round_num, current_stock, history, n, r, capacity):
    # Initial cooperation phase
    if round_num <= 2:
        return 'C'
    
    # Final round - always defect
    if round_num == r:
        return 'D'
    
    # Penultimate round - conditional cooperation
    if round_num == r - 1:
        return 'C' if current_stock >= capacity * 0.3 else 'D'
    
    # Main phase - adaptive strategy
    stock_ratio = current_stock / capacity
    
    if stock_ratio >= 0.6:
        return 'C'  # Stock is healthy, cooperate
    else:
        # Calculate recent cooperation rate
        last_two_rounds = history[-2:] if len(history) >= 2 else history
        total_actions = sum(len(round_actions) for round_actions in last_two_rounds)
        total_cooperators = sum(round_actions.count('C') for round_actions in last_two_rounds)
        
        recent_coop_ratio = total_cooperators / total_actions if total_actions > 0 else 0
        
        return 'C' if recent_coop_ratio >= 0.5 else 'D'
```

## Strategic Rationale

### Cooperative Elements
- **Optimistic Start**: Signals willingness to cooperate and helps establish sustainable stock levels
- **Sustainability Focus**: Primary decision criterion is stock health, promoting long-term resource preservation
- **Reward Cooperation**: When others cooperate, continue cooperating even under moderate stock stress
- **Recovery Opportunity**: Always ready to return to cooperation when conditions improve

### Defensive Elements
- **Punish Mass Defection**: Responds to widespread defection to avoid exploitation
- **Stock Protection**: Switches to defensive mode when resource becomes critically depleted
- **Realistic Endgame**: Acknowledges final-round defection incentives while maximizing cooperative rounds

### Edge Case Handling
- **First Round**: Always cooperate (no history to evaluate)
- **Insufficient History**: Defaults to cooperation when cooperation ratio can't be calculated
- **Stock Depletion**: Prioritizes resource preservation over blind cooperation
- **Final Rounds**: Balances continued cooperation with endgame realities

## Expected Performance
This strategy should perform well against:
- **Other Cooperators**: Mutual cooperation maintains high stock and payoffs
- **Mixed Populations**: Adapts to cooperation levels while protecting against exploitation  
- **Moderate Defectors**: Punishes defection but offers path back to cooperation
- **Tournament Settings**: Balances cooperative gains with defensive necessity

The strategy avoids both naive exploitation and overly aggressive retaliation, instead focusing on sustainable resource management while adapting to opponent behavior patterns.
'''

description_COOPERATIVE_34 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation while protecting against exploitation. It balances the long-term benefits of resource sustainability with the need to respond appropriately to defection.

## Decision Rules

### Primary Rule: Conditional Cooperation
- **Cooperate (C)** when the majority of other players cooperated in the previous round
- **Defect (D)** when the majority of other players defected in the previous round

### Specific Implementation:
```pseudocode
if round == 1:
    return C  // Always start cooperatively
    
else:
    defectors_last_round = count_defectors_in_previous_round()
    cooperators_last_round = (n - 1) - defectors_last_round
    
    if cooperators_last_round >= defectors_last_round:
        return C  // Majority (or tie) cooperated
    else:
        return D  // Majority defected
```

## Edge Case Handling

### First Round
- **Always Cooperate**: Start with good faith to establish cooperative norms
- Rationale: No history exists, so demonstrate cooperative intent

### Last Round
- **Follow primary rule**: Maintain consistency even in final round
- Rationale: Reputation matters for establishing patterns that other strategies might learn from

### Stock Depletion Crisis
```pseudocode
if current_stock < (n * 10):  // Critical threshold
    if defectors_last_round >= (n-1)/2:
        return D  // If others are depleting, get share before collapse
    else:
        return C  // Try to preserve remaining stock
```

### Recovery Phase
```pseudocode
if current_stock < capacity/2 AND all_cooperated_last_round():
    return C  // Maintain cooperation during recovery
```

## Cooperative Alignment Features

### 1. Generous Interpretation of Ties
When exactly half the other players defect and half cooperate, choose cooperation to give benefit of doubt.

### 2. Forgiveness Mechanism
The strategy doesn't hold grudges - it responds only to the most recent round, allowing defectors to return to cooperation without punishment.

### 3. Sustainability Focus
The critical threshold check ensures the strategy considers long-term resource viability, not just immediate payoffs.

### 4. Leading by Example
By starting with cooperation and maintaining it when others do, the strategy demonstrates the benefits of collaborative resource management.

## Strategic Rationale

1. **Incentivizes Cooperation**: Other players know that cooperating will be met with cooperation
2. **Discourages Free-riding**: Consistent defection will be met with defensive defection
3. **Allows Recovery**: Defectors can immediately return to receiving cooperative treatment
4. **Maintains Simplicity**: Clear, predictable rules that other strategies can learn and adapt to
5. **Balances Exploitation Protection**: Won't be taken advantage of systematically while remaining fundamentally cooperative

This strategy should perform well against other cooperative strategies while protecting against purely exploitative ones, making it robust in a tournament setting where strategy types are unknown.
'''

description_COOPERATIVE_35 = '''
# Cooperative Strategy: "Forgiving Conditional Cooperator"

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation. It balances trust-building with self-protection to maximize collective welfare and individual payoffs.

## Decision Rules

### Initial Approach (First Round)
- **Always play C** in round 1
- Rationale: Signal cooperative intent and give other players the benefit of the doubt

### Main Decision Logic (Rounds 2 to r-1)

```pseudocode
For round t (where 1 < t < r):
    cooperation_rate = count_C_last_round / n
    
    if cooperation_rate >= 0.75:
        play C  // High cooperation - reward it
    
    else if cooperation_rate >= 0.5:
        if my_last_action == C:
            play C  // Continue cooperating if majority cooperated
        else:
            play C  // Return to cooperation after punishment
    
    else if cooperation_rate >= 0.25:
        if consecutive_low_cooperation >= 2:
            play D  // Protect against sustained exploitation
        else:
            play C  // Give benefit of doubt for 1-2 rounds
    
    else:  // cooperation_rate < 0.25
        if stock_level < capacity * 0.3:
            play C  // Emergency cooperation to prevent collapse
        else:
            play D  // Match low cooperation environment
```

### Final Round Strategy (Round r)
```pseudocode
if cooperation_rate_last_round >= 0.5:
    play C  // Reward cooperation even in final round
else:
    if stock_level < capacity * 0.4:
        play C  // Prevent resource collapse
    else:
        play D  // Standard end-game defection
```

## Key Features

### 1. Forgiveness Mechanism
- Returns to cooperation after 1-2 rounds of punishment
- Prevents spiral into mutual defection
- Gives opponents opportunities to rebuild trust

### 2. Graduated Response
- Responds proportionally to cooperation levels
- High cooperation (≥75%) → Always cooperate
- Medium cooperation (50-75%) → Generally cooperate
- Low cooperation (25-50%) → Conditional cooperation with patience
- Very low cooperation (<25%) → Defensive defection

### 3. Resource Conservation Safeguard
- Switches to cooperation when stock drops critically low
- Threshold: 30-40% of capacity depending on round
- Prioritizes long-term sustainability over short-term gains

### 4. Anti-Exploitation Protection
- Tracks consecutive rounds of low cooperation
- Defects after 2+ rounds of being exploited
- Balances cooperativeness with self-protection

## Edge Case Handling

### Stock Depletion Crisis
```pseudocode
if stock_level < capacity * 0.2:
    play C  // Emergency cooperation regardless of opponent behavior
```

### All-Defection Environment
- If opponents consistently defect, matches their behavior after giving multiple chances
- Prevents being systematically exploited while remaining open to cooperation restoration

### High-Cooperation Environment
- Strongly reinforces cooperative behavior
- Never punishes when cooperation rate is high (≥75%)

## Strategic Advantages

1. **Cooperation Initiation**: Starts cooperatively to signal good intentions
2. **Proportional Response**: Adapts strategy based on group cooperation levels
3. **Forgiveness**: Prevents permanent breakdown of cooperation
4. **Sustainability Focus**: Prioritizes resource preservation in crisis situations
5. **Exploitation Resistance**: Protects against systematic abuse while remaining cooperative
6. **Group Welfare**: Maximizes collective payoffs when possible

This strategy aims to be the "nice" cooperative player that others want to cooperate with, while maintaining enough defensive mechanisms to avoid being consistently exploited by purely selfish strategies.
'''

description_COOPERATIVE_36 = '''
# Cooperative Strategy: "Adaptive Trust with Graduated Response"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to others' behavior. It starts with trust, maintains cooperation when possible, but includes mechanisms to protect against exploitation and encourage others to return to cooperation.

## Decision Rules

### 1. First Round Behavior
**Always Cooperate (C)** in round 1
- Establishes cooperative intent
- Maximizes initial resource sustainability
- Provides positive signal to other players

### 2. Main Strategy (Rounds 2 through r-1)
Use a **Graduated Response System** based on the cooperation rate in the previous round:

```pseudocode
cooperation_rate = (number of players who played C in previous round) / n

IF cooperation_rate >= 0.75:
    play C  // High cooperation - maintain trust
ELSE IF cooperation_rate >= 0.5:
    play C with probability 0.8  // Moderate cooperation - mostly cooperate
ELSE IF cooperation_rate >= 0.25:
    play C with probability 0.4  // Low cooperation - limited cooperation
ELSE:
    play D  // Very low cooperation - protect against exploitation
```

### 3. Stock-Based Override
If current stock falls below critical threshold, prioritize resource preservation:

```pseudocode
critical_threshold = capacity / 4

IF current_stock <= critical_threshold:
    IF cooperation_rate >= 0.5:
        play C  // Others are trying to cooperate - help rebuild
    ELSE:
        play D  // Stock critically low and others defecting - survival mode
```

### 4. Last Round Behavior (Round r)
**Context-dependent final round:**

```pseudocode
IF cooperation_rate_in_previous_round >= 0.75:
    play C  // Reward sustained cooperation
ELSE IF current_stock >= capacity * 0.75:
    play C  // Stock is healthy - be generous
ELSE:
    play D  // Either low cooperation or depleted stock - defect
```

## Key Features

### Cooperative Elements
- **Default to cooperation**: Always starts cooperatively and maintains cooperation when others do
- **Graduated response**: Doesn't immediately punish defection, allowing for mistakes or learning
- **Forgiveness mechanism**: Returns to cooperation when others show cooperative behavior
- **Resource stewardship**: Includes stock-based overrides to prioritize long-term sustainability

### Edge Case Handling
- **First round**: Always cooperate to establish positive precedent
- **Critical stock levels**: Special logic when resources are dangerously low
- **Last round**: Balanced approach based on context rather than automatic defection
- **All-defection scenarios**: Switches to defection to avoid exploitation, but ready to return to cooperation

### Adaptive Mechanisms
- **Probabilistic responses**: Uses mixed strategies in uncertain situations to balance cooperation with self-protection
- **Multi-factor decision making**: Considers both cooperation rates and resource levels
- **Learning from history**: Bases decisions on observed behavior patterns

## Strategic Rationale

1. **Trust-building**: Starting with cooperation and maintaining it when reciprocated builds cooperative norms
2. **Proportional response**: Graduated reactions avoid escalation while still responding to defection
3. **Resource protection**: Stock-based overrides prevent tragedy of the commons scenarios
4. **Exploitation resistance**: Switches to defection when cooperation rate is very low
5. **Recovery facilitation**: Quick return to cooperation when others show cooperative intent

This strategy aims to foster a cooperative environment while maintaining robustness against various opponent strategies, ultimately maximizing both individual and collective long-term payoffs.
'''

description_COOPERATIVE_37 = '''
# Adaptive Cooperative Strategy with Forgiveness (ACSF)

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group behavior. It starts cooperatively but adapts based on observed cooperation levels, with built-in forgiveness mechanisms to encourage return to cooperation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C (Cooperate)
- **Rationale**: Signal cooperative intent and establish a cooperative norm from the start

### Rounds 2 to r-1: Adaptive Cooperation with Thresholds

**Primary Rule**: Cooperate if the cooperation rate in the previous round meets a dynamic threshold.

```pseudocode
cooperation_rate = (number of players who played C last round) / n
threshold = max(0.5, (stock_level / capacity) * 0.8)

if cooperation_rate >= threshold:
    action = C
else:
    action = D
```

**Forgiveness Mechanism**: If I defected last round due to low cooperation, but cooperation rate improved by ≥20 percentage points:
```pseudocode
if my_last_action == D and 
   cooperation_rate >= previous_cooperation_rate + 0.2:
    action = C  // Give cooperation another chance
```

**Stock Emergency Override**: If stock falls below critical level (25% of capacity), temporarily increase cooperation threshold:
```pseudocode
if stock_level < 0.25 * capacity:
    threshold = min(0.8, threshold * 1.5)
```

### Final Round (Round r): Conditional Cooperation
- **Action**: C if cooperation rate in round r-1 ≥ 0.5, otherwise D
- **Rationale**: Since it's the last round, mirror the group's recent behavior but default to cooperation if the group has been reasonably cooperative

## Edge Case Handling

### Stock Depletion
- If stock reaches 0, automatically play C for remainder of game to help recovery
- If stock < 10% of capacity for 2+ consecutive rounds, play C regardless of others' actions

### High Defection Scenarios
- If ≥75% of players defected in last 2 rounds consecutively, switch to defensive mode:
  - Play D but return to cooperation if any round shows ≥40% cooperation rate

### Late-Game Cooperation Recovery
- In final 3 rounds, if stock > 50% capacity and cooperation rate was <30% in previous rounds, send strong cooperative signal by playing C regardless of threshold

## Detailed Pseudocode

```pseudocode
function decide_action(round, stock_level, game_history):
    n = number_of_players
    capacity = max_capacity
    
    // Round 1: Always cooperate
    if round == 1:
        return C
    
    // Calculate cooperation metrics
    last_round_actions = game_history[round-1]
    cooperation_rate = count(C in last_round_actions) / n
    
    // Stock emergency check
    if stock_level == 0 or stock_level < 0.1 * capacity:
        return C
    
    // Final round logic
    if round == total_rounds:
        return C if cooperation_rate >= 0.5 else D
    
    // Calculate dynamic threshold
    stock_ratio = stock_level / capacity
    base_threshold = 0.5
    threshold = max(base_threshold, stock_ratio * 0.8)
    
    // Stock emergency adjustment
    if stock_level < 0.25 * capacity:
        threshold = min(0.8, threshold * 1.5)
    
    // Forgiveness mechanism
    if round > 2:
        my_last_action = my_history[round-2]
        prev_cooperation_rate = count(C in game_history[round-2]) / n
        
        if my_last_action == D and 
           cooperation_rate >= prev_cooperation_rate + 0.2:
            return C
    
    // High defection defensive mode
    if round > 2:
        recent_defection_rate = 1 - cooperation_rate
        prev_defection_rate = 1 - count(C in game_history[round-2]) / n
        
        if recent_defection_rate >= 0.75 and prev_defection_rate >= 0.75:
            return D if cooperation_rate < 0.4 else C
    
    // Late-game recovery attempt
    if round > total_rounds - 3 and 
       stock_level > 0.5 * capacity and 
       cooperation_rate < 0.3:
        return C
    
    // Main decision rule
    return C if cooperation_rate >= threshold else D
```

## Strategic Rationale

1. **Cooperative Start**: Establishes good faith and potentially influences others toward cooperation
2. **Adaptive Threshold**: Responds to both group behavior and resource scarcity
3. **Forgiveness**: Prevents permanent defection spirals by rewarding improvements in group cooperation
4. **Stock Protection**: Prioritizes resource sustainability when critically low
5. **Endgame Consideration**: Balances final-round incentives with cooperative signaling

This strategy aims to foster cooperation while protecting against exploitation, adapting dynamically to both the resource state and the behavior patterns of other players.
'''

description_COOPERATIVE_38 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group cooperation levels. It starts optimistically but adapts based on observed behavior to prevent exploitation while maintaining cooperative incentives.

## Decision Rules

### Primary Rule: Cooperation Threshold
- **Cooperate (C)** if the cooperation rate in the previous round was ≥ 60%
- **Defect (D)** if the cooperation rate in the previous round was < 60%

*Cooperation rate = (number of players who played C) / n*

### Special Cases

#### First Round
Always **Cooperate (C)** - establish cooperative intent and give others the benefit of the doubt.

#### Last Round  
Always **Cooperate (C)** - maintain cooperative reputation even when defection might seem rational, as this reinforces the cooperative signal for any potential future interactions or similar games.

#### Stock Depletion Emergency
If current stock ≤ n (meaning each player can get at most 1 unit even if all cooperate):
- **Cooperate (C)** to maximize group survival and demonstrate commitment to sustainability

#### High Cooperation Bonus
If cooperation rate in previous round was ≥ 80%:
- **Cooperate (C)** with extra commitment - this rewards high group cooperation

## Pseudocode

```python
def decide_action(round_number, total_rounds, current_stock, history):
    # First round - always cooperate
    if round_number == 1:
        return C
    
    # Last round - maintain cooperative reputation  
    if round_number == total_rounds:
        return C
    
    # Emergency stock protection
    if current_stock <= n:
        return C
    
    # Calculate cooperation rate from previous round
    previous_round = history[round_number - 1]
    cooperators = count_cooperators(previous_round)
    cooperation_rate = cooperators / n
    
    # High cooperation bonus
    if cooperation_rate >= 0.8:
        return C
    
    # Main threshold rule
    if cooperation_rate >= 0.6:
        return C
    else:
        return D
```

## Strategic Rationale

### Cooperative Alignment
1. **Default to cooperation**: The 60% threshold means we cooperate even when cooperation isn't universal
2. **Emergency cooperation**: Always cooperate when the resource is critically depleted
3. **Last round cooperation**: Maintains cooperative reputation rather than exploiting end-game dynamics

### Adaptive Protection
1. **Punishment threshold**: Only defect when cooperation falls below 60%, preventing total exploitation
2. **Responsive**: Immediately returns to cooperation when group behavior improves
3. **Reward high cooperation**: Extra commitment when 80%+ cooperate

### Tournament Considerations
1. **Distinguishable**: The 60% threshold and emergency rules create a clear cooperative pattern
2. **Exploiter-resistant**: Won't be completely exploited by pure defectors
3. **Coalition-friendly**: Rewards other cooperative strategies and builds positive feedback loops
4. **Sustainable**: Balances individual protection with group resource preservation

This strategy aims to be a "good citizen" that encourages cooperation while maintaining enough self-protection to remain viable in a mixed population of strategies.
'''

description_COOPERATIVE_39 = '''
# Adaptive Cooperative Strategy: "Trust with Accountability"

## Core Philosophy
This strategy aims to establish and maintain cooperation while protecting against exploitation. It balances trust-building with punishment to create incentives for mutual cooperation.

## Decision Rules

### Primary Decision Logic:
```
if round == 1:
    return COOPERATE
    
if stock_level <= critical_threshold:
    return COOPERATE  // Resource preservation mode
    
if cooperation_ratio >= trust_threshold:
    return COOPERATE
else:
    return punishment_action()
```

### Key Parameters:
- **Critical Threshold**: `stock_level < capacity * 0.3` (30% of original capacity)
- **Trust Threshold**: `cooperation_ratio >= 0.6` (60% of players cooperated last round)
- **Forgiveness Window**: 3 rounds after punishment begins

## Detailed Strategy Components

### 1. **Opening Move**
- Always COOPERATE in round 1
- This signals cooperative intent and avoids immediate tragedy

### 2. **Trust Assessment**
Track the cooperation ratio from previous round:
```
cooperation_ratio = count(players who played C in last round) / n
```

### 3. **Cooperation Conditions**
COOPERATE when ANY of these conditions are met:
- **Resource Crisis**: Stock ≤ 30% of capacity (emergency conservation)
- **High Trust**: ≥60% of players cooperated last round
- **Final Rounds**: Last 2 rounds (maximize remaining value)

### 4. **Punishment Protocol**
When cooperation_ratio < 0.6 AND stock > critical threshold:
- **Graduated Response**: 
  - First offense: DEFECT for 1 round, then return to cooperation test
  - Repeated offenses: DEFECT for 2 rounds, then return to cooperation test
  - Persistent defection: DEFECT until cooperation_ratio improves

### 5. **Forgiveness Mechanism**
- After punishment period ends, immediately return to cooperation testing
- Reset punishment escalation if opponents show sustained cooperation (3+ consecutive rounds with cooperation_ratio ≥ 0.6)

### 6. **Edge Case Handling**

**First Round**: Always COOPERATE (establish cooperative baseline)

**Stock Depletion**: If stock falls below 30% of capacity, always COOPERATE regardless of others' behavior (resource preservation overrides punishment)

**Final Two Rounds**: Always COOPERATE (no future to protect, maximize remaining value)

**All-Defection Spiral**: If stock reaches near-zero, switch to pure COOPERATE to attempt resource recovery

## Pseudocode Implementation

```
function decide_action(round, stock, history):
    // Edge cases first
    if round == 1:
        return COOPERATE
    
    if round >= total_rounds - 1:  // Final 2 rounds
        return COOPERATE
    
    if stock <= capacity * 0.3:  // Crisis mode
        return COOPERATE
    
    // Calculate last round cooperation
    last_round_cooperators = count_cooperators(history[round-1])
    cooperation_ratio = last_round_cooperators / n
    
    // Trust-based decision
    if cooperation_ratio >= 0.6:
        reset_punishment_counter()
        return COOPERATE
    else:
        return execute_punishment()

function execute_punishment():
    punishment_rounds = min(offense_count, 3)  // Cap at 3 rounds
    if current_punishment_round <= punishment_rounds:
        return DEFECT
    else:
        return COOPERATE  // Return to testing cooperation
```

## Strategic Rationale

1. **Cooperative Foundation**: Starting with cooperation and defaulting to cooperation in crisis situations maintains the cooperative framework

2. **Clear Incentives**: The 60% threshold creates a clear standard - if most players cooperate, everyone benefits

3. **Proportional Response**: Punishment is graduated and temporary, encouraging return to cooperation rather than permanent retaliation

4. **Resource Protection**: Crisis mode ensures the common pool doesn't collapse entirely

5. **Endgame Optimization**: Cooperation in final rounds maximizes remaining value when future punishment is impossible

This strategy should perform well against other cooperative strategies while protecting against exploitative ones, maintaining the resource pool for mutual benefit throughout the game.
'''

description_COOPERATIVE_40 = '''
I'll design a cooperative strategy called **"Adaptive Trust with Sustainability Guard"** that balances cooperation with protection against exploitation and resource depletion.

## Strategy: Adaptive Trust with Sustainability Guard

### Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intentions, using trust-building mechanisms and protective measures against both exploitation and resource collapse.

### Decision Rules

```pseudocode
STRATEGY: Adaptive Trust with Sustainability Guard

INITIALIZE:
- cooperation_score = 1.0 (start trusting)
- sustainability_threshold = capacity * 0.3
- trust_decay = 0.1
- trust_recovery = 0.15

FOR each round t:
    
    // 1. SUSTAINABILITY GUARD (overrides everything)
    IF current_stock <= sustainability_threshold:
        action = COOPERATE
        RETURN action
    
    // 2. FIRST ROUND
    IF t == 1:
        action = COOPERATE
        RETURN action
    
    // 3. CALCULATE COOPERATION RATE from last round
    cooperators_last_round = count(players who played C in round t-1)
    cooperation_rate = cooperators_last_round / n
    
    // 4. UPDATE TRUST SCORE
    IF cooperation_rate >= 0.5:
        cooperation_score = min(1.0, cooperation_score + trust_recovery)
    ELSE:
        cooperation_score = max(0.0, cooperation_score - trust_decay)
    
    // 5. CALCULATE COOPERATION PROBABILITY
    base_probability = cooperation_score
    
    // Boost cooperation if stock is healthy
    IF current_stock > capacity * 0.7:
        base_probability = min(1.0, base_probability + 0.2)
    
    // Reduce cooperation if stock is declining rapidly
    stock_decline_rate = (previous_stock - current_stock) / previous_stock
    IF stock_decline_rate > 0.4:
        base_probability = max(0.3, base_probability - 0.3)
    
    // 6. FINAL DECISION
    IF base_probability > 0.6:
        action = COOPERATE
    ELSE:
        action = DEFECT
        
    RETURN action
```

### Key Components

**1. Sustainability Guard**
- If stock falls below 30% of capacity, always cooperate
- This prevents complete resource collapse regardless of others' behavior
- Recognizes that mutual defection leads to zero payoffs for everyone

**2. Trust-Based Adaptation**
- Maintains a cooperation score (0.0 to 1.0) based on observed group behavior
- Increases trust when majority cooperates, decreases when minority cooperates
- Uses asymmetric learning: trust decays slower (0.1) than it recovers (0.15)

**3. Stock Health Assessment**
- Encourages cooperation when stock is abundant (>70% capacity)
- Becomes more defensive when stock declines rapidly (>40% decline rate)
- Balances immediate exploitation opportunities with long-term sustainability

**4. Probabilistic Thresholds**
- Uses 0.6 threshold for cooperation to slightly favor cooperative behavior
- Ensures strategy isn't purely reactive but maintains cooperative bias

### Edge Case Handling

**First Round:** Always cooperate to signal cooperative intent and gather information about opponents.

**Last Round:** No special handling - the sustainability guard and trust mechanisms still apply, preventing pure end-game exploitation.

**Stock Near Zero:** Sustainability guard forces cooperation, attempting to rebuild the resource.

**All Others Defect:** Strategy will eventually defect too, but maintains some cooperation probability to allow for recovery if others change behavior.

### Cooperative Alignment

This strategy is fundamentally cooperative because it:

1. **Starts with trust** - Begins by cooperating and assumes others will too
2. **Prioritizes sustainability** - Prevents resource collapse even at personal cost
3. **Rewards group cooperation** - Increases cooperation when others cooperate
4. **Allows forgiveness** - Trust can be rebuilt if group behavior improves
5. **Maintains cooperative bias** - Threshold (0.6) slightly favors cooperation

### Strategic Rationale

Against other cooperative strategies, this will achieve high mutual cooperation and sustainable resource levels. Against exploitative strategies, it will initially attempt cooperation but adapt to protect itself while still preventing complete resource depletion. The sustainability guard ensures that even in worst-case scenarios, the group maintains some resource base for potential recovery.
'''

description_COOPERATIVE_41 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority"

## Core Philosophy
This strategy prioritizes long-term cooperation while being robust against exploitation. It recognizes that sustainable resource management requires maintaining the stock while encouraging cooperative behavior through conditional cooperation and strategic punishment.

## Decision Rules

### Primary Rule: Majority-Based Cooperation
- **Cooperate (C)** if the majority of other players cooperated in the previous round
- **Defect (D)** if the majority of other players defected in the previous round
- In case of ties, use the tiebreaker rules below

### Tiebreaker Rules (when cooperation/defection is split 50-50)
1. If stock level > 75% of capacity: Cooperate (resource is healthy)
2. If stock level < 25% of capacity: Cooperate (resource needs protection)
3. Otherwise: Use trend analysis - cooperate if cooperation trend is increasing over last 3 rounds, defect otherwise

## Edge Cases

### Round 1 (First Round)
- Always **Cooperate** to signal cooperative intent and establish good initial conditions

### Final Round
- **Cooperate** to maintain reputation and avoid the "last round defection" trap that could cascade backwards

### Critical Stock Situations
- If stock < 20% of capacity at round start: **Always Cooperate** regardless of opponent history
- If stock = 0: **Cooperate** (no choice really, but maintains consistency)

### Early Game (Rounds 2-3)
- Be slightly more forgiving: Cooperate unless ≥75% of opponents defected in previous round
- This allows for initial experimentation and prevents early punishment spirals

## Pseudocode

```
function decide_action(round_number, stock_level, opponent_history, game_params):
    n = game_params.n
    capacity = game_params.capacity
    total_rounds = game_params.r
    
    // Edge Cases
    if round_number == 1:
        return C
    
    if round_number == total_rounds:
        return C
    
    if stock_level < 0.2 * capacity:
        return C
    
    // Get previous round opponent actions
    prev_round_actions = opponent_history[round_number - 1]
    cooperators = count(prev_round_actions == C)
    defectors = count(prev_round_actions == D)
    
    // Early game forgiveness
    if round_number <= 3:
        if defectors >= 0.75 * (n - 1):  // 75% threshold in early game
            return D
        else:
            return C
    
    // Main decision logic
    if cooperators > defectors:
        return C
    elif defectors > cooperators:
        return D
    else:  // Tie case
        // Stock-based tiebreaker
        if stock_level > 0.75 * capacity:
            return C
        elif stock_level < 0.25 * capacity:
            return C
        else:
            // Trend analysis
            if round_number >= 4:
                recent_coop_trend = analyze_cooperation_trend(opponent_history, round_number, 3)
                if recent_coop_trend >= 0:  // Cooperation increasing or stable
                    return C
                else:
                    return D
            else:
                return C  // Default to cooperation in early rounds
```

## Strategic Rationale

### Cooperative Elements
1. **Generous Initialization**: Always cooperates first to signal good intentions
2. **Majority Following**: Responds to the group's dominant strategy, encouraging collective cooperation
3. **Resource Protection**: Prioritizes cooperation when the resource is critically low
4. **Final Round Cooperation**: Avoids end-game defection that could undermine the cooperative equilibrium

### Robustness Features
1. **Conditional Cooperation**: Only cooperates when it's reciprocated by the majority
2. **Punishment Mechanism**: Defects when faced with majority defection
3. **Early Forgiveness**: Uses higher threshold for punishment in early rounds to avoid overreaction
4. **Trend Sensitivity**: Considers improvement in cooperation levels, not just current state

### Sustainability Focus
- Recognizes that very low stock levels require immediate cooperation regardless of opponent behavior
- Balances individual rationality with long-term resource sustainability
- Uses stock level as a key input for decision-making in ambiguous situations

This strategy should perform well against other cooperative strategies while being reasonably robust against exploitation, maintaining the resource pool for mutual benefit across all rounds.
'''

description_COOPERATIVE_42 = '''
# Adaptive Forgiveness Strategy (AFS)

## Core Philosophy
This strategy is built on the principle that **sustainable cooperation is the only path to long-term success** in common pool resource games. It starts with trust, responds to betrayal proportionally, but always maintains a path back to cooperation.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, history, stock_level):
    if round == 1:
        return COOPERATE  // Start with trust
    
    if stock_level < capacity * 0.2:
        return COOPERATE  // Emergency conservation mode
    
    if round == final_round:
        return cooperate_if_majority_cooperative_last_round()
    
    // Calculate cooperation metrics
    recent_cooperation_rate = get_cooperation_rate(last_3_rounds)
    overall_cooperation_rate = get_cooperation_rate(all_history)
    
    // Adaptive threshold based on game progress
    cooperation_threshold = 0.3 + 0.2 * (round / total_rounds)
    
    if recent_cooperation_rate >= cooperation_threshold:
        return COOPERATE
    else:
        return tit_for_majority_tat()
```

### Supporting Functions:
```pseudocode
function tit_for_majority_tat():
    if majority_defected_last_round():
        return DEFECT
    else:
        return COOPERATE

function cooperate_if_majority_cooperative_last_round():
    if get_cooperation_rate(last_round) >= 0.5:
        return COOPERATE
    else:
        return DEFECT

function get_cooperation_rate(rounds_subset):
    total_actions = count_all_actions(rounds_subset)
    cooperative_actions = count_cooperative_actions(rounds_subset)
    return cooperative_actions / total_actions
```

## Key Features

### 1. **Generous Start**
- Always cooperate in round 1 to signal cooperative intent
- Give opponents the benefit of the doubt initially

### 2. **Crisis Response**
- When stock drops below 20% of capacity, always cooperate
- Recognizes that at critically low levels, any defection could collapse the resource entirely

### 3. **Adaptive Forgiveness**
- Cooperation threshold increases over time (starts at 30%, reaches 50% by final round)
- This reflects that as the game progresses, maintaining the resource becomes more critical
- Rewards sustained cooperation while becoming less tolerant of persistent defection

### 4. **Majority-Based Retaliation**
- Only defects when a majority of players defected in the previous round
- This prevents being exploited by persistent defectors while not punishing isolated mistakes

### 5. **Strategic Final Round**
- In the last round, cooperates only if the majority cooperated in the previous round
- Balances final-round extraction with maintaining cooperation signal

## Edge Case Handling

### First Round:
- **Always cooperate** to establish cooperative precedent and signal trustworthiness

### Last Round:
- **Conditional cooperation** based on previous round's majority behavior
- Prevents pure exploitation while rewarding sustained cooperation

### Critical Stock Levels:
- **Emergency cooperation** when stock < 20% of capacity
- Overrides all other considerations to prevent resource collapse

### High Cooperation Environment:
- **Sustained cooperation** when recent cooperation rate is high
- Reinforces positive group dynamics

### Mixed/Low Cooperation Environment:
- **Measured retaliation** based on majority behavior
- Punishes widespread defection while forgiving individual lapses

## Strategic Rationale

This strategy is designed to:
1. **Foster cooperation** by starting cooperatively and rewarding cooperative behavior
2. **Prevent exploitation** by responding to widespread defection
3. **Maintain sustainability** by prioritizing resource preservation in crisis situations
4. **Adapt to game dynamics** by becoming more stringent about cooperation as rounds progress
5. **Handle uncertainty** by focusing on majority behavior rather than individual actions

The strategy recognizes that in a tournament against diverse opponents, the key is to cooperate with other cooperative strategies while not being systematically exploited by purely selfish ones. It achieves this through measured responses and maintaining multiple paths back to cooperation.
'''

description_COOPERATIVE_43 = '''
# Adaptive Cooperative Strategy with Trust-Based Reciprocation

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intentions. It uses adaptive reciprocation based on observed collective behavior and includes safeguards against exploitation.

## Decision Rules

### Initial Disposition
- **Round 1**: Always COOPERATE
- **Rationale**: Start with good faith to signal cooperative intent and test the waters

### Primary Decision Logic (Rounds 2 to r-1)

```pseudocode
STRATEGY AdaptiveCooperator:
  
  // Track collective cooperation rate over recent history
  recent_coop_rate = count_cooperators_in_last_3_rounds / (3 * n)
  
  // Track personal exploitation (times I cooperated but majority defected)
  exploitation_count = times_exploited_in_last_5_rounds
  
  // Check stock sustainability
  current_stock_ratio = current_stock / capacity
  
  IF current_stock_ratio < 0.3:
    // Emergency conservation mode
    action = COOPERATE
    
  ELSE IF exploitation_count >= 3:
    // Self-protection mode - been exploited too much recently
    IF recent_coop_rate > 0.6:
      action = COOPERATE  // Others are reforming
    ELSE:
      action = DEFECT     // Protect against continued exploitation
      
  ELSE IF recent_coop_rate >= 0.7:
    // High cooperation environment - maintain cooperation
    action = COOPERATE
    
  ELSE IF recent_coop_rate >= 0.4:
    // Mixed environment - conditional cooperation
    IF last_round_cooperators >= n/2:
      action = COOPERATE  // Majority cooperated last round
    ELSE:
      action = DEFECT     // Match the prevailing strategy
      
  ELSE:
    // Low cooperation environment - defensive but not purely selfish
    IF current_stock_ratio > 0.7 AND last_round_cooperators >= 2:
      action = COOPERATE  // Stock is healthy and some cooperation exists
    ELSE:
      action = DEFECT     // Protect resources in hostile environment
```

### Final Round Handling
- **Round r (final)**: 
  - If stock ratio > 0.5: COOPERATE (maintain cooperative reputation)
  - If stock ratio ≤ 0.5 AND cooperation rate in last 3 rounds < 0.5: DEFECT
  - Otherwise: COOPERATE

## Key Features

### 1. Graduated Reciprocation
- Not purely tit-for-tat; considers collective behavior patterns
- Forgives occasional defections if overall trend is cooperative
- Responds to sustained non-cooperation with defensive measures

### 2. Stock Sustainability Priority
- Always cooperates when stock drops below 30% of capacity
- Recognizes that resource collapse hurts everyone
- Balances individual protection with collective welfare

### 3. Exploitation Protection
- Tracks personal exploitation to avoid being a "sucker"
- Has memory of recent exploitation but allows for redemption
- Won't endlessly cooperate against consistent defectors

### 4. Adaptive Time Horizons
- Uses 3-round windows for cooperation assessment (responsive but not reactive)
- Uses 5-round windows for exploitation tracking (prevents short-term bias)
- Adjusts behavior based on game phase

### 5. Signal Clarity
- Clear cooperative start signals good intentions
- Consistent patterns help others predict behavior
- Defensive actions are contextual and recoverable

## Edge Cases Handled

1. **All others defect from start**: Strategy will initially cooperate but quickly shift to defensive mode while maintaining some cooperative attempts when stock is high

2. **Stock depletion crisis**: Always prioritizes cooperation when stock is critically low, regardless of others' behavior

3. **Mixed strategies**: Adapts to partial cooperation by matching the prevailing tendency while maintaining slight cooperative bias

4. **Late-game dynamics**: Maintains cooperative stance in final round unless facing sustained hostility and resource scarcity

## Cooperative Alignment

This strategy embodies cooperation through:
- **Default cooperative stance** with protective mechanisms
- **Long-term thinking** that prioritizes sustainability
- **Forgiveness** - allows players to recover from defection
- **Teaching** - demonstrates that cooperation can be profitable
- **Proportional response** rather than harsh punishment
- **Resource conservation** when stocks are threatened

The strategy aims to foster a cooperative equilibrium while protecting against exploitation, making it both principled and pragmatic for tournament play.
'''

description_COOPERATIVE_44 = '''
# Cooperative Strategy: Adaptive Reciprocity with Sustainability Focus

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being cooperative by default, but includes mechanisms to protect against exploitation and encourage cooperation through conditional reciprocity.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if stock < capacity * 0.3:  // Critical threshold
        return COOPERATE  // Always preserve when critically low
    
    cooperation_ratio = count_cooperators_last_round(history) / n
    my_exploitation_ratio = times_i_was_exploited(history) / (round - 1)
    
    // Adaptive cooperation based on group behavior
    if cooperation_ratio >= 0.6:
        return COOPERATE
    else if cooperation_ratio >= 0.4:
        // Conditional cooperation - mirror majority with forgiveness
        if my_exploitation_ratio <= 0.3:
            return COOPERATE
        else:
            return DEFECT
    else:
        // Low cooperation environment - protect against exploitation
        if my_exploitation_ratio <= 0.2:
            return COOPERATE  // Give benefit of doubt
        else:
            return DEFECT
```

## Detailed Strategy Components

### 1. **Opening Cooperation**
- Always cooperate in round 1 to signal cooperative intent
- Establishes baseline for measuring other players' reciprocity

### 2. **Sustainability Threshold**
- When stock drops below 30% of capacity, always cooperate regardless of others' behavior
- Prevents complete resource collapse which hurts everyone
- This threshold allows for resource recovery even if others defect

### 3. **Adaptive Reciprocity Mechanism**
- Track cooperation ratio of all players in previous round
- Maintain personal exploitation history (how often I cooperated while others defected against me)
- Adjust cooperation likelihood based on group behavior patterns

### 4. **Cooperation Tiers**
- **High Cooperation Environment** (≥60% cooperated last round): Always cooperate
- **Mixed Environment** (40-59% cooperated): Conditional cooperation based on personal exploitation rate
- **Low Cooperation Environment** (<40% cooperated): Defensive cooperation with stricter exploitation tolerance

### 5. **Forgiveness and Punishment**
- Use graduated responses rather than permanent retaliation
- Allow for occasional defection without immediate punishment (up to 20-30% exploitation rate)
- This accounts for rational defection in low-stock situations or mistakes

### 6. **End-Game Considerations**
```pseudocode
if round >= r - 2:  // Last 2 rounds
    if stock >= capacity * 0.5:
        return COOPERATE  // Maintain cooperation if stock is healthy
    else if cooperation_ratio >= 0.5:
        return COOPERATE  // Reciprocate group cooperation
    else:
        return DEFECT  // Protect against end-game defection
```

## Edge Cases Handling

### **First Round**: Always cooperate to signal cooperative intent

### **Last Few Rounds**: 
- Maintain cooperation if stock is healthy (≥50% capacity)
- If stock is low but group has been cooperative, continue cooperating
- Only defect in final rounds if being consistently exploited

### **Zero Stock Situations**: 
- If stock reaches 0, cooperate to allow regeneration
- This is optimal for everyone regardless of others' actions

### **High Stock Situations**:
- When stock is near capacity, slight bias toward cooperation to maintain sustainable harvesting

## Key Advantages

1. **Sustainability-First**: Prevents resource collapse through critical threshold protection
2. **Conditionally Cooperative**: Rewards group cooperation while protecting against systematic exploitation  
3. **Adaptive**: Adjusts to different cooperation environments rather than rigid rules
4. **Forgiving**: Allows for occasional defection without permanent retaliation
5. **Rational**: Balances cooperation with self-protection based on observable behavior patterns

This strategy aims to foster cooperative equilibria while being robust against various opponent types, from pure cooperators to sophisticated reciprocators to occasional defectors.
'''

description_COOPERATIVE_45 = '''
# Adaptive Cooperative Strategy with Sustainability Focus

## Core Philosophy
This strategy prioritizes long-term sustainability while encouraging cooperative behavior through reciprocity and forgiveness. It recognizes that cooperation is essential for maintaining the resource pool, but must be balanced with defensive measures against exploitation.

## Strategy Overview: "Sustainable Reciprocator"

### Decision Rules

**Primary Rule: Conditional Cooperation with Sustainability Threshold**
- **Cooperate (C)** if:
  1. Current stock level ≥ capacity × 0.4 (sustainability threshold), AND
  2. Majority of players cooperated in the previous round (or first round)

- **Defect (D)** if:
  1. Current stock level < capacity × 0.4 (emergency threshold), OR
  2. Majority of players defected in the previous round

### Detailed Implementation

```pseudocode
function decide_action(round, current_stock, history):
    sustainability_threshold = capacity * 0.4
    
    // First round: Always cooperate to signal cooperative intent
    if round == 1:
        return C
    
    // Emergency defection when stock is critically low
    if current_stock < sustainability_threshold:
        return D
    
    // Count cooperative players in previous round
    prev_round_cooperators = count_cooperators(history[round-1])
    majority_threshold = ceil(n / 2)
    
    // Reciprocate majority behavior
    if prev_round_cooperators >= majority_threshold:
        return C
    else:
        return D
```

### Edge Case Handling

**First Round:**
- Always cooperate to establish cooperative intent and signal willingness to sustain the resource

**Last Round:**
- Apply same rules as other rounds (no end-game defection)
- Rationale: Maintaining reputation for future interactions and ethical consistency

**Critical Stock Levels:**
- When stock < 40% of capacity: Switch to defection regardless of others' behavior
- This prevents total resource collapse while still allowing for recovery

**Tie-Breaking:**
- When exactly half the players cooperated previously: Default to cooperation to encourage positive momentum

### Cooperative Alignment Features

1. **Sustainability Focus:** The 40% threshold ensures the resource doesn't collapse entirely
2. **Initial Cooperation:** Always starts cooperatively to signal good intentions
3. **Majority Reciprocation:** Rewards cooperative majorities with continued cooperation
4. **Recovery Mechanism:** Returns to cooperation once stock recovers above threshold
5. **No End-Game Exploitation:** Maintains cooperation even in final rounds

### Strategic Rationale

**Why This Works:**
- Encourages formation of cooperative coalitions by rewarding majority cooperation
- Provides a clear sustainability baseline that all rational players should respect
- Balances forgiveness (returns to cooperation when conditions improve) with firmness (punishes widespread defection)
- Creates incentives for others to maintain the resource pool for mutual benefit

**Adaptation to Different Scenarios:**
- Against mostly cooperative opponents: Maintains cooperation and resource sustainability
- Against mostly defective opponents: Protects against exploitation while preserving minimum resource levels
- Against mixed strategies: Encourages tipping toward cooperation through majority-responsive behavior

This strategy aims to establish and maintain a cooperative equilibrium while providing safeguards against both exploitation and resource collapse.
'''

description_COOPERATIVE_46 = '''
# Adaptive Cooperative Strategy with Trust-Based Defection Detection

## Core Philosophy
This strategy prioritizes long-term sustainability through cooperation while protecting against exploitation through adaptive defection detection and graduated responses.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Conditional Cooperation with Trust Tracking**
- **Default Action**: Cooperate (C)
- **Defection Trigger**: Switch to defect (D) when trust threshold is breached
- **Recovery Mechanism**: Return to cooperation when conditions improve

### 2. Trust System

**Trust Score Calculation** (per round):
```
trust_score = (cooperators / total_players) * stock_health_factor

where:
- cooperators = number of players who played C last round
- stock_health_factor = current_stock / initial_capacity
- trust_threshold = 0.4 (adjustable based on game dynamics)
```

**Trust Categories**:
- **High Trust** (≥ 0.6): Maintain cooperation
- **Medium Trust** (0.4 - 0.6): Cautious cooperation with monitoring
- **Low Trust** (< 0.4): Defect to protect against collapse

### 3. Detailed Decision Algorithm

```pseudocode
STRATEGY: AdaptiveCooperativeStrategy

INITIALIZE:
    consecutive_defections = 0
    trust_threshold = 0.4
    emergency_threshold = 0.2 * initial_capacity
    
FOR each round t:
    // Edge Case: First Round
    IF t == 1:
        RETURN C  // Always cooperate initially
    
    // Emergency Protection: Stock Critically Low
    IF current_stock < emergency_threshold:
        RETURN D  // Preserve remaining resources
    
    // Calculate current trust metrics
    cooperation_rate = count(C_actions_last_round) / n
    stock_health = current_stock / initial_capacity
    trust_score = cooperation_rate * stock_health
    
    // Trend Analysis: Detect deteriorating cooperation
    IF cooperation_rate < previous_cooperation_rate:
        consecutive_defections += 1
    ELSE:
        consecutive_defections = 0
    
    // Decision Logic
    IF trust_score >= 0.6:
        // High trust environment
        RETURN C
        
    ELSE IF trust_score >= trust_threshold:
        // Medium trust: Conditional cooperation
        IF consecutive_defections >= 2:
            // Defensive defection against trend
            RETURN D
        ELSE:
            RETURN C
            
    ELSE:
        // Low trust: Protect against collapse
        IF t == final_round AND stock_health > 0.3:
            // Last round cooperation if stock sustainable
            RETURN C
        ELSE:
            RETURN D
```

### 4. Edge Case Handling

**First Round**: Always cooperate to establish good faith and gather information about opponent strategies.

**Final Round**: 
- Cooperate if stock health > 30% (sustainable for future hypothetical rounds)
- Defect if stock critically depleted (maximize final extraction)

**Stock Depletion Crisis**: 
- When stock < 20% of capacity, switch to defection to prevent total collapse
- Resume cooperation only when stock recovers above 40% of capacity

**Majority Defection Detection**:
- If >50% of players defected in previous round AND stock declining, temporarily defect
- Return to cooperation after 1-2 rounds if others show cooperative signals

### 5. Adaptive Parameters

**Dynamic Trust Threshold**:
```pseudocode
// Adjust trust threshold based on game progression
adjusted_threshold = base_threshold * (1 + (rounds_remaining / total_rounds) * 0.2)

// More lenient early in game, stricter as game progresses
```

**Stock Recovery Incentive**:
- When stock is recovering (positive growth), bias toward cooperation
- When stock is declining consistently, lower cooperation threshold

### 6. Key Advantages

1. **Sustainability Focus**: Prioritizes long-term resource preservation
2. **Exploitation Protection**: Detects and responds to systematic defection
3. **Forgiveness**: Returns to cooperation when conditions improve
4. **Adaptability**: Adjusts to different opponent compositions
5. **Edge Case Robustness**: Handles critical scenarios appropriately

### 7. Expected Behavior Patterns

- **Against Full Cooperators**: Maintain mutual cooperation for maximum joint payoff
- **Against Mixed Strategies**: Conditional cooperation with protective defection
- **Against Majority Defectors**: Strategic defection to prevent exploitation while seeking cooperation opportunities
- **In Crisis Scenarios**: Prioritize sustainability over short-term gains

This strategy balances cooperative ideals with pragmatic protection mechanisms, making it robust against various opponent strategies while maintaining the cooperative spirit essential for common pool resource management.
'''

description_COOPERATIVE_47 = '''
# Cooperative Strategy: "Forgiving Sustainability Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but includes mechanisms to protect against exploitation and encourage others toward cooperation.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history):
    // Edge case: First round - always cooperate to establish cooperative intent
    if round == 1:
        return COOPERATE
    
    // Edge case: Last round - cooperate if stock is healthy, otherwise adapt
    if round == final_round:
        if stock >= capacity * 0.7:
            return COOPERATE
        else:
            return mirror_majority_last_round()
    
    // Main strategy body
    cooperation_score = calculate_cooperation_score(history)
    stock_health = stock / capacity
    
    // Critical stock protection
    if stock_health < 0.3:
        if cooperation_score > 0.6:
            return COOPERATE  // Trust others to help recover
        else:
            return DEFECT     // Emergency self-preservation
    
    // Adaptive cooperation based on others' behavior
    if cooperation_score >= 0.7:
        return COOPERATE     // High trust environment
    else if cooperation_score >= 0.4:
        return forgive_and_cooperate(history)
    else:
        return conditional_defect(history, stock_health)
```

### Supporting Functions:

```pseudocode
function calculate_cooperation_score(history):
    if no_history:
        return 1.0  // Assume cooperation initially
    
    recent_weight = 0.6
    overall_weight = 0.4
    
    // Weight recent rounds more heavily (last 3 rounds)
    recent_coop_rate = cooperation_rate(last_3_rounds(history))
    overall_coop_rate = cooperation_rate(all_history)
    
    return recent_weight * recent_coop_rate + overall_weight * overall_coop_rate

function forgive_and_cooperate(history):
    // Forgive occasional defection if there's been recent cooperation
    if any_cooperation_in_last_2_rounds():
        return COOPERATE
    else:
        return DEFECT

function conditional_defect(history, stock_health):
    // Only defect in low-trust environments if stock can sustain it
    if stock_health > 0.5:
        return DEFECT
    else:
        return COOPERATE  // Protect fragile stock
```

## Detailed Strategy Components:

### 1. **Cooperative Default**
- Start with cooperation to signal cooperative intent
- Maintain cooperation when others are mostly cooperative (≥70% cooperation rate)

### 2. **Forgiveness Mechanism**
- Don't immediately punish single defections
- Return to cooperation if any player shows cooperative behavior in recent rounds
- Prevents destructive punishment spirals

### 3. **Stock Protection**
- Override normal logic when stock falls below 30% of capacity
- In crisis, cooperate only if others are highly cooperative (≥60%)
- Prevents total resource collapse

### 4. **Adaptive Response**
- Use weighted cooperation score emphasizing recent behavior (60%) over historical (40%)
- Adjust strategy based on emerging patterns rather than rigid rules

### 5. **Edge Case Handling**
- **First Round**: Always cooperate to establish positive precedent
- **Last Round**: Cooperate if stock is healthy (≥70% capacity), otherwise mirror group behavior
- **Critical Stock**: Prioritize recovery over punishment

### 6. **Trust-Building Features**
- Signal reliability through consistent cooperation when others cooperate
- Demonstrate willingness to sacrifice short-term gains for sustainability
- Show forgiveness to encourage others back to cooperation

## Strategic Rationale:

This strategy balances several key objectives:

1. **Sustainability Focus**: Protects the resource base that benefits everyone
2. **Exploitation Resistance**: Won't be a permanent victim of defectors
3. **Cooperation Encouragement**: Provides clear incentives for others to cooperate
4. **Flexibility**: Adapts to different opponent strategies without being exploitable
5. **Forgiveness**: Allows recovery from mutual punishment cycles

The strategy is "cooperatively competitive" - it genuinely seeks mutual benefit while protecting itself from exploitation, making it robust against various opponent strategies while maintaining its cooperative core.
'''

description_COOPERATIVE_48 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperatively but includes mechanisms to protect against exploitation and resource collapse.

## Decision Rules

### Primary Strategy: Conditional Cooperation with Sustainability Monitoring

```pseudocode
function decide_action(round, stock, history):
    // Edge case: First round
    if round == 1:
        return COOPERATE
    
    // Edge case: Last round (always defect - no future consequences)
    if round == final_round:
        return DEFECT
    
    // Critical sustainability check
    if stock < capacity * 0.3:
        // Emergency mode: Always cooperate to rebuild stock
        return COOPERATE
    
    // Calculate cooperation metrics from last round
    cooperators_last_round = count_cooperators(history[round-1])
    cooperation_rate = cooperators_last_round / n
    
    // Adaptive cooperation based on group behavior
    if cooperation_rate >= 0.7:
        // High cooperation: Continue cooperating
        return COOPERATE
    
    elif cooperation_rate >= 0.4:
        // Mixed behavior: Cooperate with probability based on stock health
        stock_health = stock / capacity
        if stock_health > 0.6:
            return COOPERATE
        else:
            // Tit-for-tat tendency when stock is declining
            return mirror_majority_action(history[round-1])
    
    else:
        // Low cooperation (< 40%): Defensive mode
        // But still cooperate if stock is critically low
        if stock < capacity * 0.5:
            return COOPERATE
        else:
            return DEFECT

function mirror_majority_action(last_round_actions):
    cooperators = count_cooperators(last_round_actions)
    if cooperators >= n/2:
        return COOPERATE
    else:
        return DEFECT
```

## Key Features

### 1. **Sustainability Priority**
- Always cooperates when stock falls below 30% of capacity (emergency mode)
- This prevents complete resource collapse even if others are defecting heavily

### 2. **Adaptive Cooperation Thresholds**
- **High cooperation (≥70%)**: Full cooperation to maintain good equilibrium
- **Medium cooperation (40-70%)**: Stock-dependent cooperation with tit-for-tat elements
- **Low cooperation (<40%)**: Defensive mode but still protects critical stock levels

### 3. **Edge Case Handling**
- **Round 1**: Always cooperate (establish cooperative intent)
- **Final round**: Always defect (no future consequences, maximize immediate payoff)
- **Critical stock**: Override other rules to prevent collapse

### 4. **Stock Health Monitoring**
The strategy continuously monitors stock health as a percentage of capacity:
- **Healthy (>60%)**: More willing to cooperate
- **Declining (30-60%)**: Conditional cooperation
- **Critical (<30%)**: Force cooperation

## Strategic Reasoning

### Why This Strategy Is Effective:

1. **Prevents Tragedy of Commons**: The sustainability monitoring prevents complete resource depletion, which benefits everyone long-term.

2. **Reciprocal but Forgiving**: It responds to group cooperation levels rather than punishing individual defectors harshly, allowing for recovery from defection cycles.

3. **Exploits Cooperative Opponents**: Against mostly cooperative opponents, it maintains cooperation for mutual benefit.

4. **Defends Against Exploitation**: It won't be exploited indefinitely by consistent defectors, switching to defensive mode when cooperation rates are low.

5. **Handles Mixed Strategies**: The middle ground (40-70% cooperation) uses both stock health and group behavior to make nuanced decisions.

### Tournament Advantages:
- **Robust**: Works well against various opponent types (always-cooperate, always-defect, tit-for-tat, etc.)
- **Sustainable**: Prevents games from ending in mutual destruction
- **Adaptive**: Adjusts to the specific mix of opponents encountered
- **Balanced**: Neither too naive (always cooperate) nor too aggressive (quick to defect)

This strategy should perform well in a diverse tournament by finding the right balance between cooperation and self-protection while ensuring long-term resource sustainability.
'''

description_COOPERATIVE_49 = '''
Looking at this Common Pool Resource Game, I need to design a strategy that promotes cooperation while being robust against exploitation. Here's my approach:

## Strategy: "Adaptive Stewardship with Graduated Response"

### Core Philosophy
Start cooperative to establish a sustainable equilibrium, but use graduated responses to deter free-riding while maintaining forgiveness to restore cooperation.

### Decision Rules

```pseudocode
STRATEGY: AdaptiveResourceSteward

INITIALIZE:
- cooperation_threshold = 0.5  // Minimum fraction of players needed cooperating
- trust_level = 1.0           // Current trust in group cooperation
- punishment_counter = 0       // Tracks punishment phase
- sustainability_threshold = capacity * 0.3  // Critical stock level

DECISION_LOGIC for round t:

IF round == 1:
    RETURN C  // Always start cooperative

IF stock < sustainability_threshold:
    // Emergency cooperation mode
    RETURN C

IF punishment_counter > 0:
    punishment_counter -= 1
    RETURN D  // Continue punishment phase

// Calculate cooperation metrics from last round
cooperation_rate = count_cooperators_last_round / n
my_last_payoff = payoff_received_last_round
avg_cooperator_payoff = average_payoff_of_cooperators_last_round
avg_defector_payoff = average_payoff_of_defectors_last_round

// Update trust level
IF cooperation_rate >= cooperation_threshold:
    trust_level = min(1.0, trust_level + 0.1)
ELSE:
    trust_level = max(0.0, trust_level - 0.2)

// Detect if I was exploited (cooperated but defectors earned significantly more)
exploitation_detected = (I_cooperated_last_round AND 
                        avg_defector_payoff > avg_cooperator_payoff * 1.5 AND
                        cooperation_rate < 0.5)

// Main decision logic
IF exploitation_detected:
    // Initiate graduated punishment
    punishment_counter = min(2, max(1, count_defectors_last_round / 2))
    RETURN D
    
ELIF trust_level >= 0.6 AND cooperation_rate >= cooperation_threshold:
    // High trust environment - cooperate
    RETURN C
    
ELIF trust_level >= 0.3 AND stock > capacity * 0.6:
    // Medium trust, good stock - conditional cooperation
    IF cooperation_rate >= 0.3:  // Lower threshold for cooperation
        RETURN C
    ELSE:
        RETURN D
        
ELSE:
    // Low trust or poor stock - defect but ready to forgive
    IF cooperation_rate > 0.7:  // Strong signal others want to cooperate
        RETURN C  // Give cooperation a chance
    ELSE:
        RETURN D

// Special case: Last round
IF round == r:
    // In final round, cooperate if stock is critically low or if trust is high
    IF stock < sustainability_threshold OR trust_level > 0.8:
        RETURN C
    ELSE:
        RETURN D  // No future to consider, slight incentive to defect
```

### Key Strategy Features

1. **Conditional Cooperation**: Start cooperative but respond to the cooperation level of others
2. **Graduated Punishment**: When exploited, punish for 1-2 rounds (depending on severity) rather than indefinitely
3. **Forgiveness Mechanism**: Always willing to return to cooperation when others show cooperative intent
4. **Resource Awareness**: Prioritize cooperation when the resource is critically depleted
5. **Trust Tracking**: Maintain a trust metric that influences cooperation threshold
6. **Exploitation Detection**: Identify when cooperation is being taken advantage of

### Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Slight bias toward defection unless resource is critical or trust is very high
- **Critical Stock**: Always cooperate when resource is below 30% of capacity
- **High Defection Environment**: Still willing to cooperate if others show strong cooperative signals (>70% cooperation rate)

### Rationale

This strategy balances several key objectives:
1. **Sustainability**: Protects the resource when it's critically low
2. **Cooperation Incentives**: Rewards cooperative behavior and punishes free-riding
3. **Forgiveness**: Doesn't get stuck in permanent retaliation cycles
4. **Adaptability**: Adjusts to different cooperation levels in the population
5. **Exploitation Resistance**: Doesn't allow persistent free-riding without response

The strategy assumes other AI strategies will be rational and potentially cooperative, but doesn't assume coordination. It's designed to work well with other cooperative strategies while defending against exploitative ones.
'''

description_COOPERATIVE_50 = '''
# Adaptive Cooperative Strategy with Trust-Building

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperatively but adapts based on observed patterns, always seeking to rebuild cooperation when possible.

## Decision Rules

### Round 1: Always Cooperate
- Action: C
- Rationale: Signal cooperative intent and establish baseline trust

### Rounds 2 to r-1: Adaptive Cooperation with Forgiveness

**Primary Rule: Cooperate if majority cooperated last round**
```
if (cooperators_last_round > n/2):
    action = C
else:
    apply secondary rules
```

**Secondary Rules (when majority defected):**

1. **Stock Health Check:**
   ```
   if (current_stock < capacity * 0.3):
       action = C  // Emergency cooperation to save the resource
   ```

2. **Punishment with Graduated Response:**
   ```
   defection_rate_last_3_rounds = count_defections_last_3_rounds() / (3 * n)
   
   if (defection_rate_last_3_rounds > 0.6):
       action = D  // Strong punishment for persistent defection
   else if (defection_rate_last_3_rounds > 0.4):
       if (random() < 0.7):
           action = C  // Probabilistic cooperation to test waters
       else:
           action = D
   else:
       action = C  // Quick forgiveness for occasional defection
   ```

### Round r (Final Round): Conditional Cooperation
```
if (current_stock < capacity * 0.2):
    action = C  // Don't let the resource collapse completely
else if (cooperators_last_round >= n/2):
    action = C  // Reward final cooperation
else:
    action = D  // Final round defection if others aren't cooperating
```

## Edge Case Handling

### Early Game (Rounds 1-3):
- Be extra forgiving to allow trust-building
- Cooperate unless stock drops below 40% of capacity

### Critical Stock Situations:
- If stock ever drops below 30% of capacity: Always cooperate for next 2 rounds
- If stock reaches 0: Cooperate until it recovers above 20% of capacity

### Opponent Pattern Recognition:
- Track individual player tendencies over sliding 4-round window
- If a player shows consistent cooperation (>75%), give them benefit of doubt in borderline decisions
- If a player shows consistent defection (>75%), expect defection but still cooperate when majority does

## Pseudocode Summary

```python
def choose_action(round_num, history, current_stock, capacity, n):
    # Round 1: Always cooperate
    if round_num == 1:
        return C
    
    # Emergency cooperation for low stock
    if current_stock < capacity * 0.3:
        return C
    
    # Get last round's cooperation count
    cooperators_last = count_cooperators(history[-1])
    
    # Final round logic
    if round_num == total_rounds:
        if current_stock < capacity * 0.2 or cooperators_last >= n/2:
            return C
        else:
            return D
    
    # Main decision logic
    if cooperators_last > n/2:
        return C
    
    # Calculate recent defection rate
    recent_defection_rate = calculate_defection_rate(history[-3:], n)
    
    if recent_defection_rate > 0.6:
        return D
    elif recent_defection_rate > 0.4:
        return C if random() < 0.7 else D
    else:
        return C
```

## Key Features

1. **Trust-Building**: Starts cooperative and rewards cooperative behavior
2. **Adaptive**: Responds to opponent behavior patterns rather than rigid rules
3. **Forgiving**: Quick to return to cooperation when opponents show willingness
4. **Resource-Conscious**: Prioritizes resource sustainability in critical situations
5. **Pattern-Aware**: Uses recent history rather than just last round
6. **Graduated Response**: Punishment severity matches defection severity

This strategy balances the cooperative goal of resource sustainability with the practical need to respond to non-cooperative opponents, while maintaining hope for rebuilding cooperation throughout the game.
'''

description_COOPERATIVE_51 = '''
# Graduated Cooperation Strategy (GCS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being cooperative by default, but includes protective mechanisms against exploitation. It recognizes that mutual cooperation is essential for maximizing collective welfare in this common pool resource game.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE  // Start cooperatively
    
    if stock < capacity * 0.15:  // Critical threshold (15% of capacity)
        return COOPERATE  // Emergency conservation mode
    
    if round == final_round:
        return apply_endgame_rule(history)
    
    // Calculate cooperation metrics from last round
    cooperation_rate = count_cooperators_last_round() / n
    my_recent_defection_rate = count_my_defections_last_3_rounds() / min(3, round-1)
    
    // Main decision tree
    if cooperation_rate >= 0.75:
        return COOPERATE  // Reward high cooperation
    
    else if cooperation_rate >= 0.5:
        if my_recent_defection_rate <= 0.33:
            return COOPERATE  // Maintain cooperation with moderate group
        else:
            return COOPERATE  // Reset to cooperation after defecting
    
    else if cooperation_rate >= 0.25:
        return apply_tit_for_tat_majority()  // Follow majority of last round
    
    else:  // cooperation_rate < 0.25 (low cooperation environment)
        return DEFECT  // Protect against widespread defection
```

### Supporting Functions:

```pseudocode
function apply_endgame_rule(history):
    if final_3_rounds_cooperation_rate() >= 0.6:
        return COOPERATE  // Reward sustained cooperation
    else:
        return DEFECT  // Don't be exploited in final round

function apply_tit_for_tat_majority():
    majority_action_last_round = get_majority_action_last_round()
    return majority_action_last_round

function final_3_rounds_cooperation_rate():
    return average_cooperation_rate_over_last_k_rounds(min(3, current_round-1))
```

## Edge Case Handling

### First Round:
- **Always COOPERATE** - Establish cooperative intent and test the waters

### Last Round:
- **Conditional cooperation** based on recent group behavior:
  - If ≥60% cooperation rate in last 3 rounds: COOPERATE
  - Otherwise: DEFECT (avoid being exploited when others likely defect)

### Critical Stock Levels:
- **Emergency mode**: When stock < 15% of capacity, always COOPERATE regardless of others' actions
- This prevents total resource collapse and demonstrates commitment to sustainability

### Low Cooperation Environment:
- When cooperation rate falls below 25%, switch to DEFECT to avoid being systematically exploited
- This protects against environments dominated by aggressive strategies

## Cooperative Features

1. **Default Cooperation**: The strategy starts cooperatively and prefers cooperation when the group shows reasonable cooperative behavior

2. **Forgiveness**: After defecting due to low group cooperation, the strategy is willing to return to cooperation when group behavior improves

3. **Resource Conservation**: Prioritizes resource sustainability through emergency cooperation mode, preventing tragedy of the commons

4. **Graduated Response**: Rather than harsh punishment, it gradually adjusts cooperation based on group behavior levels

5. **Collective Welfare Focus**: The thresholds (75%, 50%, 25%) are designed to maintain cooperation when it benefits the group while protecting against exploitation

## Strategic Rationale

This strategy balances three key objectives:
- **Sustainability**: Prevents resource depletion through emergency protocols
- **Cooperation**: Maintains cooperative stance when reciprocated
- **Self-Protection**: Avoids systematic exploitation by adjusting to group dynamics

The graduated thresholds create a cooperative ecosystem where mutual cooperation is rewarded, moderate cooperation is maintained, and only widespread defection triggers defensive responses. This approach should perform well against other LLM-generated strategies that likely also incorporate some level of cooperative reasoning.
'''

description_COOPERATIVE_52 = '''
# Adaptive Cooperative Strategy: "Forgiving Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving to occasional defections, recognizing that some defection might occur due to strategic uncertainty rather than malice.

## Decision Rules

### Initial Phase (First Round)
**Always COOPERATE** - Start with cooperative signal to establish good intentions.

### Main Decision Logic
For rounds 2 through r-1, use the following hierarchy:

1. **Sustainability Check** (Highest Priority)
   ```
   if (current_stock / capacity < 0.3):
       return COOPERATE  // Emergency conservation mode
   ```

2. **Reciprocity with Forgiveness**
   ```
   defection_rate_last_3_rounds = count_defections_last_3_rounds() / (3 * n)
   
   if (defection_rate_last_3_rounds > 0.6):
       return DEFECT  // Majority are defecting consistently
   elif (defection_rate_last_3_rounds > 0.4):
       if (my_last_action == COOPERATE):
           return DEFECT  // Punish high defection, but only once
       else:
           return COOPERATE  // Return to cooperation after punishment
   else:
       return COOPERATE  // Default to cooperation when defection is low
   ```

3. **Stock Recovery Incentive**
   ```
   if (stock_trend_last_3_rounds() < 0 AND current_stock < 0.7 * capacity):
       return COOPERATE  // Help rebuild declining stock
   ```

### Final Round Handling
**Round r (Last Round):**
```
if (current_stock / capacity > 0.5):
    return DEFECT  // Take advantage when stock is healthy
else:
    return COOPERATE  // Don't destroy what little remains
```

## Edge Case Handlers

### Stock Depletion Crisis
```
if (current_stock < n):  // Not enough for everyone to defect
    return COOPERATE
```

### All-Cooperation Equilibrium Detection
```
if (all_players_cooperated_last_2_rounds()):
    return COOPERATE  // Maintain beneficial equilibrium
```

### Oscillation Prevention
```
if (my_actions_last_3_rounds() == [D, C, D]):
    return COOPERATE  // Break potential oscillation pattern
```

## Pseudocode Summary

```python
def choose_action(round_num, current_stock, capacity, game_history, n, r):
    # First round: Always cooperate
    if round_num == 1:
        return COOPERATE
    
    # Emergency conservation
    if current_stock / capacity < 0.3:
        return COOPERATE
    
    # Last round logic
    if round_num == r:
        return DEFECT if (current_stock / capacity > 0.5) else COOPERATE
    
    # Calculate recent defection rate
    recent_defection_rate = calculate_defection_rate_last_3_rounds(game_history, n)
    
    # Main decision logic
    if recent_defection_rate > 0.6:
        return DEFECT
    elif recent_defection_rate > 0.4:
        my_last_action = get_my_last_action(game_history)
        return DEFECT if (my_last_action == COOPERATE) else COOPERATE
    else:
        # Additional checks for cooperation
        if is_stock_declining_dangerously(game_history, current_stock, capacity):
            return COOPERATE
        return COOPERATE
```

## Cooperative Alignment

This strategy is fundamentally cooperative because:

1. **Default to Cooperation**: The base assumption is to cooperate unless there's a compelling reason not to
2. **Sustainability Focus**: Prioritizes long-term resource preservation over short-term gains
3. **Forgiveness**: Doesn't permanently retaliate against occasional defections
4. **Emergency Conservation**: Always cooperates when the resource is critically low
5. **Graduated Response**: Uses measured punishment rather than harsh retaliation

## Strategic Rationale

- **Robustness**: Works well against both cooperative and mixed strategies
- **Adaptability**: Responds to different opponent behaviors without being exploitable
- **Sustainability**: Ensures the resource doesn't collapse even with some defection
- **Simplicity**: Clear rules that other cooperative strategies can recognize and reciprocate

This strategy should perform well in a tournament setting by being a "good citizen" that other cooperative strategies can identify and work with, while still protecting itself against overly aggressive opponents.
'''

description_COOPERATIVE_53 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intentions, with built-in mechanisms to recover from temporary conflicts and adapt to different opponent types.

## Decision Rules

### Primary Strategy: Generous Tit-for-Tat with Stock Monitoring
```
IF round == 1:
    COOPERATE
ELSE IF stock < capacity * 0.3:  // Crisis threshold
    COOPERATE (emergency conservation)
ELSE IF last_round_defectors / n >= 0.6:  // Majority defected
    IF consecutive_punishment_rounds < 2:
        DEFECT (limited retaliation)
        consecutive_punishment_rounds++
    ELSE:
        COOPERATE (forgiveness)
        consecutive_punishment_rounds = 0
ELSE:
    COOPERATE (default cooperative stance)
```

### Stock-Based Emergency Protocol
```
IF stock < capacity * 0.15:  // Critical depletion
    ALWAYS COOPERATE (regardless of others' actions)
    // Prioritize resource preservation over punishment
```

### End-Game Handling
```
IF remaining_rounds <= 2:
    IF stock >= capacity * 0.4:  // Sufficient resources remain
        COOPERATE (maintain cooperation until end)
    ELSE:
        COOPERATE (desperate conservation attempt)
```

## Detailed Strategy Components

### 1. **Opening Move**
- Always COOPERATE in round 1
- Signals cooperative intent to all players
- Establishes baseline for reciprocal behavior

### 2. **Stock Health Monitoring**
- **Healthy Stock (≥70% capacity)**: Default to cooperation
- **Moderate Depletion (30-70% capacity)**: Cooperation with retaliation capability
- **Crisis Level (<30% capacity)**: Pure cooperation for conservation
- **Critical Level (<15% capacity)**: Emergency conservation mode

### 3. **Retaliation Mechanism**
- Only retaliate when majority (≥60%) defected in previous round
- Limit punishment to maximum 2 consecutive rounds
- Automatic forgiveness after punishment period
- Prevents destructive punishment spirals

### 4. **Forgiveness Protocol**
- After any retaliation, immediately return to cooperation
- Ignores isolated defections (minority defecting)
- Gives opponents chance to return to cooperation

### 5. **Adaptive Elements**
- Tracks consecutive punishment rounds to prevent over-retaliation
- Adjusts strategy based on stock levels rather than fixed rules
- Responds to collective behavior rather than individual actions

## Edge Case Handling

### First Round
- **Action**: Always COOPERATE
- **Rationale**: Signal cooperative intent and test waters

### Last Round
- **Action**: COOPERATE if stock ≥40% capacity, otherwise still COOPERATE
- **Rationale**: Maintain reputation and attempt resource preservation even at game end

### Stock Depletion Scenarios
- **Zero Stock**: COOPERATE (nothing to consume anyway, prepare for potential recovery)
- **Very Low Stock**: COOPERATE (maximize growth potential)

### All Opponents Defecting
- **Response**: Defect for maximum 2 rounds, then return to cooperation
- **Rationale**: Brief punishment to discourage exploitation, but prioritize resource recovery

## Strategic Rationale

### Cooperative Alignment
1. **Default Cooperation**: Strategy assumes cooperative intent unless proven otherwise
2. **Resource Conservation**: Prioritizes long-term sustainability over short-term gains
3. **Forgiveness**: Includes mechanisms to restore cooperation after conflicts
4. **Collective Focus**: Responds to group behavior rather than targeting individuals

### Tournament Viability
1. **Robust Against Exploiters**: Limited retaliation deters pure defectors
2. **Compatible with Cooperators**: Maintains cooperation with like-minded strategies
3. **Adaptive**: Stock-based rules prevent resource collapse
4. **Stable**: Built-in forgiveness prevents permanent conflict states

### Key Advantages
- **Sustainable**: Prioritizes resource preservation
- **Forgiving**: Quick return to cooperation after conflicts
- **Defensive**: Can punish exploitation without being exploitable
- **Simple**: Clear rules that other cooperative strategies can recognize and reciprocate

This strategy aims to foster a cooperative environment while maintaining the ability to protect against exploitation, with the overarching goal of ensuring resource sustainability for all players throughout the game.
'''

description_COOPERATIVE_54 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocal Trust"

## Core Philosophy
This strategy starts with full cooperation and maintains it as long as the resource remains sustainable, but adapts to protect against exploitation while always seeking to return to cooperative equilibrium.

## Decision Rules

### Primary Decision Logic:
```
IF stock < critical_threshold:
    COOPERATE (resource preservation mode)
ELSE IF cooperation_ratio >= trust_threshold:
    COOPERATE (maintain cooperation)
ELSE IF recent_defection_trend > tolerance_level:
    DEFECT (defensive response)
ELSE:
    COOPERATE (default to cooperation)
```

### Key Parameters:
- **Critical Threshold**: `stock < capacity * 0.3` - Below this, always cooperate to prevent collapse
- **Trust Threshold**: `cooperation_ratio >= 0.6` - If 60%+ of players cooperated last round
- **Tolerance Level**: `2 consecutive rounds` with cooperation_ratio < 0.4

## Detailed Strategy Components

### 1. **Opening Strategy (Round 1)**
- **Action**: Always COOPERATE
- **Rationale**: Establish cooperative intent and test for mutual cooperation

### 2. **Trust-Building Phase (Rounds 2-3)**
- **Action**: COOPERATE if any opponent cooperated in previous round
- **Rationale**: Give cooperation a chance to emerge, even with mixed responses

### 3. **Adaptive Cooperation Phase (Main Game)**
- Track the **cooperation ratio** = (number of C actions) / (total players) in the previous round
- Maintain a **3-round moving average** of cooperation ratios
- **COOPERATE** if:
  - Current stock > critical threshold AND
  - (Last round cooperation ratio ≥ 0.6 OR moving average ≥ 0.5)
- **DEFECT** if:
  - Stock > critical threshold AND
  - Last 2 rounds both had cooperation ratio < 0.4 AND
  - Not in final round

### 4. **Resource Preservation Override**
- **Always COOPERATE** when `stock < capacity * 0.3`
- **Rationale**: Prevent resource collapse regardless of others' actions
- This override takes precedence over all other rules

### 5. **Endgame Strategy (Final Round)**
- **Action**: Always COOPERATE
- **Rationale**: 
  - No future rounds to punish defection
  - Demonstrate consistent cooperative values
  - Avoid last-round defection cascade that harms everyone

### 6. **Forgiveness Mechanism**
- After any defection, return to cooperation if:
  - One round passes with cooperation ratio ≥ 0.5, OR
  - Stock drops below critical threshold
- **Rationale**: Avoid permanent punishment spirals that destroy the resource

## Pseudocode Implementation

```python
def decide_action(round_num, stock, history, n_players, capacity, total_rounds):
    # Constants
    CRITICAL_THRESHOLD = capacity * 0.3
    TRUST_THRESHOLD = 0.6
    COOPERATION_THRESHOLD = 0.4
    
    # Resource preservation override
    if stock < CRITICAL_THRESHOLD:
        return "C"
    
    # First round - always cooperate
    if round_num == 1:
        return "C"
    
    # Final round - always cooperate
    if round_num == total_rounds:
        return "C"
    
    # Calculate cooperation metrics
    last_round_coop_ratio = count_cooperators(history[-1]) / n_players
    
    # Trust-building phase (rounds 2-3)
    if round_num <= 3:
        if last_round_coop_ratio > 0:  # Any cooperation detected
            return "C"
        elif round_num == 2:  # Give second chance
            return "C"
    
    # Main adaptive phase
    if len(history) >= 2:
        recent_coop_ratios = [count_cooperators(round) / n_players 
                             for round in history[-2:]]
        moving_average = sum(recent_coop_ratios[-3:]) / min(3, len(recent_coop_ratios))
        
        # Check for sustained low cooperation
        if all(ratio < COOPERATION_THRESHOLD for ratio in recent_coop_ratios):
            return "D"  # Defensive defection
    
    # Default cooperative response
    if last_round_coop_ratio >= TRUST_THRESHOLD or moving_average >= 0.5:
        return "C"
    else:
        return "C"  # Err on side of cooperation

def count_cooperators(round_actions):
    return sum(1 for action in round_actions if action == "C")
```

## Strategic Advantages

1. **Resource Sustainability**: Hard protection against resource collapse
2. **Exploitation Resistance**: Responds to sustained defection while avoiding overreaction
3. **Cooperation Recovery**: Built-in forgiveness prevents permanent punishment cycles
4. **Endgame Stability**: Avoids final-round defection cascades
5. **Adaptive Learning**: Uses moving averages to distinguish temporary defection from systematic exploitation

This strategy balances cooperative ideals with practical protection mechanisms, aiming to achieve the globally optimal outcome while defending against systematic exploitation.
'''

description_COOPERATIVE_55 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy prioritizes long-term sustainability while protecting against exploitation through adaptive reciprocity. It begins cooperatively but adjusts based on observed opponent behavior and resource state.

## Decision Rules

### Round 1 (Initialization)
- **Always Cooperate** - Start with good faith cooperation to establish positive precedent

### Rounds 2 through r-1 (Main Game)
Use the following decision hierarchy:

#### 1. Resource Health Check
```
if current_stock < capacity * 0.3:
    return COOPERATE  # Emergency conservation mode
```

#### 2. Cooperation Ratio Assessment
```
cooperation_ratio = (total_C_actions_by_others) / (total_actions_by_others)

if cooperation_ratio >= 0.7:
    return COOPERATE  # High cooperation environment
else if cooperation_ratio <= 0.3:
    return DEFECT     # Low cooperation environment - protect yourself
```

#### 3. Recent Trend Analysis
```
recent_rounds = min(3, current_round - 1)
recent_cooperation = count_C_in_last_n_rounds(recent_rounds) / (recent_rounds * (n-1))

if recent_cooperation > cooperation_ratio + 0.2:
    return COOPERATE  # Positive trend, reward it
else if recent_cooperation < cooperation_ratio - 0.2:
    return DEFECT     # Negative trend, respond defensively
```

#### 4. Default Reciprocity
```
if cooperation_ratio > 0.5:
    return COOPERATE
else:
    return DEFECT
```

### Round r (Final Round)
```
if cooperation_ratio_so_far >= 0.6:
    return COOPERATE  # Reward sustained cooperation
else:
    return DEFECT     # No future rounds to punish defection
```

## Key Features

### Cooperative Elements
- **Optimistic Start**: Always begins with cooperation
- **Sustainability Priority**: Switches to cooperation when resources are critically low
- **Cooperation Reward**: More likely to cooperate when others have been cooperative
- **Trend Sensitivity**: Responds positively to improving cooperation patterns

### Protection Mechanisms
- **Exploitation Defense**: Defects in consistently non-cooperative environments
- **Adaptive Thresholds**: Uses multiple cooperation ratio thresholds for nuanced responses
- **Final Round Realism**: Acknowledges endgame incentives while still rewarding past cooperation

### Edge Case Handling
- **Early Rounds**: Uses shorter history windows when full data isn't available
- **Resource Depletion**: Emergency cooperation mode when stock drops below 30% of capacity
- **Mixed Signals**: Prioritizes recent trends over historical averages when they diverge significantly

## Strategic Rationale

1. **Mutual Benefit**: By starting cooperatively and rewarding cooperation, the strategy encourages sustainable resource use that benefits everyone long-term.

2. **Adaptive Learning**: The strategy learns from opponent behavior patterns rather than following rigid rules, allowing it to work well with various opponent types.

3. **Forgiveness with Memory**: While it responds to negative trends, it also rewards improvements in cooperation, preventing permanent punishment cycles.

4. **Resource Stewardship**: The emergency cooperation mode ensures the strategy contributes to resource preservation even when others don't.

This strategy balances cooperative ideals with practical protection against exploitation, making it robust across different opponent compositions while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_56 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperative but includes mechanisms to protect against exploitation and encourage return to cooperation.

## Strategy Components

### 1. Decision Rules

**Primary Rule - Conditional Cooperation with Forgiveness:**
```
IF round == 1:
    PLAY C  // Always start cooperative
ELSE IF stock_level <= critical_threshold:
    PLAY emergency_protocol()
ELSE IF recent_exploitation_detected():
    PLAY conditional_punishment()
ELSE:
    PLAY C  // Default to cooperation
```

### 2. Key Thresholds and Parameters

**Critical Threshold:**
- `critical_threshold = capacity / (4 * n)`
- When stock drops this low, switch to emergency mode

**Recent Exploitation Detection:**
- Track last 3 rounds (or fewer if early game)
- Exploitation detected if: `(defectors_last_round / n) > 0.5`
- Also consider trend: increasing defection over last 2-3 rounds

**Forgiveness Counter:**
- After punishment, give opponents 2 rounds to return to cooperation
- Reset punishment if cooperation resumes

### 3. Detailed Protocols

**Emergency Protocol:**
```python
def emergency_protocol():
    # When stock is critically low, prioritize survival
    if stock_level <= capacity / (8 * n):
        return D  # Defect when stock is extremely low
    else:
        return C  # Still try to cooperate to allow recovery
```

**Conditional Punishment:**
```python
def conditional_punishment():
    if punishment_rounds_remaining > 0:
        punishment_rounds_remaining -= 1
        return D  # Punish defectors
    else:
        # Check if opponents have returned to cooperation
        if recent_cooperation_trend():
            return C  # Forgive and return to cooperation
        else:
            punishment_rounds_remaining = 2  # Extend punishment
            return D
```

### 4. Edge Case Handling

**First Round:**
- Always cooperate (C) to signal cooperative intent
- Establish baseline for measuring opponent behavior

**Last Round:**
- If final round AND stock > critical_threshold: Play C
- If final round AND stock <= critical_threshold: Play D
- Rationale: Maintain cooperative reputation even in final round unless survival is at stake

**Early Rounds (rounds 2-4):**
- Be more forgiving of defection
- Require sustained defection (2+ consecutive rounds) before punishment
- Quick return to cooperation after any sign of opponent cooperation

**Mid-Game Adaptation:**
- Track long-term trends in opponent behavior
- If consistent cooperation emerges, maintain strong cooperative stance
- If consistent defection emerges, implement longer punishment phases

### 5. Stock Level Responsiveness

**High Stock (> 75% capacity):**
- Always cooperate regardless of opponent behavior
- Stock can sustain some defection without long-term harm

**Medium Stock (25-75% capacity):**
- Apply standard conditional cooperation rules
- Balance between sustainability and punishment

**Low Stock (< 25% capacity):**
- Emergency mode: Focus on stock recovery
- More tolerant of own defection for survival
- Quick forgiveness when opponents cooperate

### 6. Opponent Behavior Modeling

**Categorize Opponents:**
- **Always Cooperators:** Play C consistently
- **Always Defectors:** Apply sustained punishment with periodic forgiveness tests
- **Conditional Cooperators:** Mirror their strategy
- **Random/Unpredictable:** Use majority-rule decision making

**Adaptation Rules:**
```python
def adapt_to_opponents():
    cooperation_rate = count_cooperators_last_3_rounds() / (n * 3)
    
    if cooperation_rate > 0.8:
        return "TRUST_MODE"  # Be very cooperative
    elif cooperation_rate > 0.4:
        return "CONDITIONAL_MODE"  # Standard rules
    else:
        return "DEFENSIVE_MODE"  # More punishment, less forgiveness
```

### 7. Pseudocode Summary

```python
class AdaptiveCooperativeStrategy:
    def __init__(self, n, r, capacity):
        self.punishment_rounds = 0
        self.cooperation_history = []
        self.critical_threshold = capacity / (4 * n)
    
    def decide_action(self, round_num, stock_level, history):
        # First round
        if round_num == 1:
            return C
        
        # Emergency protocol
        if stock_level <= self.critical_threshold:
            return self.emergency_protocol(stock_level)
        
        # Check recent exploitation
        if self.recent_exploitation_detected(history):
            return self.conditional_punishment()
        
        # Default cooperation
        return C
    
    def recent_exploitation_detected(self, history):
        if len(history) < 1:
            return False
        
        last_round = history[-1]
        defection_rate = sum(1 for action in last_round if action == D) / len(last_round)
        return defection_rate > 0.5
```

## Strategy Strengths

1. **Sustainability Focus:** Prioritizes long-term pool health
2. **Adaptive:** Responds to different opponent types
3. **Forgiving:** Encourages return to cooperation
4. **Robust:** Handles various stock levels appropriately
5. **Clear Signaling:** Starts cooperative, punishes exploitation, forgives quickly

This strategy aims to foster cooperative equilibria while protecting against exploitation, maximizing both individual and collective long-term payoffs.
'''

description_COOPERATIVE_57 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to the cooperative intentions of other players. It recognizes that cooperation is only viable when a critical mass of players also cooperate.

## Decision Rules

### Primary Rule: Majority-Based Cooperation
```pseudocode
IF (number_of_cooperators_last_round >= n/2) THEN
    play C
ELSE
    play D
END IF
```

### Special Cases

#### Round 1: Optimistic Start
Always play **C** in the first round to signal cooperative intent and test the waters.

#### Final Round: Sustained Cooperation
Play **C** if the majority cooperated in the previous round, **D** otherwise. This maintains consistency and avoids the temptation to defect just because it's the last round.

#### Stock Depletion Emergency
```pseudocode
IF (current_stock < capacity * 0.3) THEN
    IF (majority cooperated last round AND stock is recovering) THEN
        play C
    ELSE
        play D  // Resource too depleted for cooperation to be viable
    END IF
END IF
```

## Complete Strategy Logic

```pseudocode
FUNCTION choose_action(round_number, game_history, current_stock):
    // Round 1: Always start cooperatively
    IF round_number == 1 THEN
        RETURN C
    END IF
    
    // Emergency protocol: Stock critically low
    IF current_stock < capacity * 0.3 THEN
        cooperators_last_round = count_cooperators(game_history, round_number - 1)
        IF cooperators_last_round >= n/2 AND stock_trend_improving(game_history) THEN
            RETURN C
        ELSE
            RETURN D
        END IF
    END IF
    
    // Standard rule: Follow majority behavior
    cooperators_last_round = count_cooperators(game_history, round_number - 1)
    IF cooperators_last_round >= n/2 THEN
        RETURN C
    ELSE
        RETURN D
    END IF
END FUNCTION

FUNCTION stock_trend_improving(game_history):
    IF length(game_history) < 2 THEN
        RETURN false
    END IF
    current_stock = get_stock(game_history, -1)
    previous_stock = get_stock(game_history, -2)
    RETURN current_stock >= previous_stock
END FUNCTION
```

## Rationale

### Cooperative Alignment
- **Starts cooperatively** to signal good intentions
- **Rewards cooperation** by continuing to cooperate when others do
- **Maintains cooperation** even in the final round if conditions support it

### Strategic Soundness
- **Critical mass principle**: Cooperation is only sustainable when enough players participate
- **Resource protection**: Switches to conservation mode when the resource is critically depleted
- **Adaptive response**: Adjusts behavior based on observed patterns rather than rigid rules

### Edge Case Handling
- **First round**: Optimistic cooperation to establish baseline
- **Last round**: Consistent with general strategy (no end-game defection)
- **Stock depletion**: Emergency protocols to prevent resource collapse
- **Recovery phases**: Willing to return to cooperation if conditions improve

## Key Features

1. **Majority Threshold**: Uses n/2 as the cooperation threshold, making it responsive to group dynamics
2. **Emergency Brake**: Protects against resource collapse with stock-level monitoring
3. **Signal Clarity**: Clear cooperative intent in round 1, consistent behavior thereafter
4. **Forgiveness**: Willing to return to cooperation if others demonstrate cooperative behavior
5. **Sustainability Focus**: Prioritizes long-term resource viability over short-term gains

This strategy balances cooperative ideals with practical considerations, ensuring that cooperation is maintained when viable while protecting against exploitation and resource depletion.
'''

description_COOPERATIVE_58 = '''
I'll design a cooperative strategy called **"Adaptive Sustainable Cooperation"** that balances cooperation with sustainability concerns and adapts to opponent behavior.

## Strategy: Adaptive Sustainable Cooperation

### Core Philosophy
Prioritize long-term sustainability while being cooperative, but protect against exploitation by adjusting behavior based on observed patterns.

### Decision Rules

```pseudocode
STRATEGY: Adaptive Sustainable Cooperation

INITIALIZE:
- cooperation_threshold = 0.5  // Minimum fraction of others needed to cooperate
- sustainability_threshold = capacity * 0.3  // Critical stock level
- defection_memory = []  // Track recent defections by others
- memory_window = min(3, r/2)  // How many rounds to remember

FOR each round t:
    current_stock = get_current_stock()
    
    // RULE 1: Emergency Cooperation
    IF current_stock <= sustainability_threshold:
        action = C  // Always cooperate when stock is critically low
        
    // RULE 2: First Round - Signal Cooperation
    ELSE IF t == 1:
        action = C  // Start cooperatively to signal intent
        
    // RULE 3: Final Round Adaptation
    ELSE IF t == r:
        recent_cooperation_rate = count_others_cooperation_in_window() / (n-1)
        IF recent_cooperation_rate >= 0.4:
            action = C  // Reward consistent cooperators
        ELSE:
            action = D  // Don't be exploited in final round
            
    // RULE 4: Adaptive Cooperation Based on History
    ELSE:
        others_cooperation_rate = count_others_cooperation_last_round() / (n-1)
        recent_cooperation_trend = count_others_cooperation_in_window() / ((n-1) * memory_window)
        
        // Cooperate if enough others are cooperating
        IF others_cooperation_rate >= cooperation_threshold:
            action = C
            
        // Cooperate if recent trend is positive and stock is healthy
        ELSE IF recent_cooperation_trend >= 0.4 AND current_stock >= capacity * 0.6:
            action = C
            
        // Defect if being consistently exploited
        ELSE IF recent_cooperation_trend < 0.2:
            action = D
            
        // Default to cooperation with slight forgiveness
        ELSE:
            action = C
            
    update_memory(others_actions_last_round)
    return action
```

### Key Features

1. **Emergency Cooperation**: Always cooperates when stock falls below 30% of capacity to prevent resource collapse

2. **Cooperative Start**: Begins with cooperation to signal cooperative intent and establish positive momentum

3. **Adaptive Response**: Adjusts cooperation threshold based on observed behavior patterns over recent rounds

4. **Sustainability Focus**: Considers current stock level in decision-making to maintain long-term viability

5. **Limited Memory**: Uses a sliding window to focus on recent behavior rather than being overly punitive for past defections

6. **Final Round Protection**: Adapts final round behavior based on recent cooperation trends to avoid exploitation

### Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Cooperate only if others have been reasonably cooperative recently
- **Low Stock**: Emergency cooperation mode regardless of others' actions
- **High Defection Environment**: Gradually shift toward defection but maintain some forgiveness
- **Mixed Behavior**: Use weighted recent history rather than just last round

### Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation and maintains it as the default
- Prioritizes resource sustainability over short-term gains  
- Forgives occasional defections and focuses on recent trends
- Only defects defensively when consistently exploited
- Returns to cooperation when others show renewed cooperative behavior

The strategy balances the cooperative ideal with practical considerations for a tournament environment where complete trust may not be warranted, while still maintaining the resource pool for everyone's long-term benefit.
'''

description_COOPERATIVE_59 = '''
# Adaptive Tit-for-Tat with Resource Conservation (ATTRC)

## Core Philosophy
This strategy balances cooperation with resource preservation by adapting to opponent behavior while maintaining a cooperative baseline. It recognizes that mutual cooperation is essential for long-term resource sustainability.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-2)
- **Round 1**: Always COOPERATE
- **Round 2**: Always COOPERATE
- *Rationale*: Establish cooperative intent and allow observation of opponent tendencies

### Main Strategy (Rounds 3 to r-1)

#### Stock Health Assessment
```
stock_health = current_stock / capacity
critical_threshold = 0.3
healthy_threshold = 0.7
```

#### Cooperation Score Calculation
```
cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
high_cooperation = cooperation_rate ≥ 0.6
medium_cooperation = 0.3 ≤ cooperation_rate < 0.6
low_cooperation = cooperation_rate < 0.3
```

#### Decision Logic
```
IF stock_health ≤ critical_threshold:
    // Emergency conservation mode
    IF cooperation_rate ≥ 0.5:
        action = COOPERATE
    ELSE:
        action = DEFECT (reluctantly, for survival)

ELSE IF stock_health ≥ healthy_threshold:
    // Resource abundance - encourage cooperation
    IF high_cooperation:
        action = COOPERATE
    ELSE IF medium_cooperation:
        action = COOPERATE (70% probability), DEFECT (30% probability)
    ELSE:
        action = DEFECT

ELSE:
    // Moderate resource levels - tit-for-tat with forgiveness
    recent_defection_rate = defections_last_2_rounds / (2 * n)
    
    IF recent_defection_rate ≤ 0.3:
        action = COOPERATE
    ELSE IF recent_defection_rate ≤ 0.6:
        action = mirror_majority_from_last_round()
    ELSE:
        action = DEFECT
```

### Final Round (Round r)
```
IF stock_health ≥ 0.4 AND cooperation_rate ≥ 0.4:
    action = COOPERATE  // Reward cooperative play
ELSE:
    action = DEFECT     // Maximize final payoff
```

## Key Features

### 1. Adaptive Forgiveness
- Forgives occasional defections if overall cooperation rate remains high
- Increases tolerance when resources are abundant
- Becomes stricter as resources dwindle

### 2. Resource-Aware Decision Making
- Prioritizes conservation when stock is critically low
- Encourages cooperation when resources are healthy
- Balances exploitation and sustainability in moderate conditions

### 3. Reciprocity with Memory
- Uses recent history (last 2 rounds) for immediate responses
- Maintains overall cooperation statistics for trend analysis
- Distinguishes between temporary and systematic defection

### 4. Edge Case Handling
- **First rounds**: Pure cooperation to signal intent
- **Critical stock**: Emergency conservation mode
- **Final round**: Strategic defection if cooperation unlikely
- **All-defect scenarios**: Switches to defection to avoid exploitation

## Pseudocode Summary
```python
def choose_action(round_num, stock, history, n, r):
    if round_num <= 2:
        return COOPERATE
    
    stock_health = stock / capacity
    cooperation_rate = calculate_cooperation_rate(history)
    recent_defection_rate = calculate_recent_defection_rate(history, 2)
    
    if round_num == r:
        return final_round_decision(stock_health, cooperation_rate)
    
    if stock_health <= 0.3:
        return emergency_mode_decision(cooperation_rate)
    elif stock_health >= 0.7:
        return abundance_mode_decision(cooperation_rate)
    else:
        return moderate_mode_decision(recent_defection_rate, history)
```

This strategy aims to foster cooperation while protecting against exploitation and resource collapse, making it robust across different opponent behaviors and resource conditions.
'''

description_COOPERATIVE_60 = '''
Looking at this Common Pool Resource Game, I need to design a strategy that promotes long-term cooperation while being robust against exploitation. The key insight is that this game creates a tragedy of the commons situation where individual short-term gains from defection can destroy the shared resource for everyone.

## Strategy: "Conditional Cooperation with Punishment"

### Core Philosophy
Start cooperative, reward collective cooperation, but punish widespread defection to protect the resource and signal that exploitation won't be tolerated.

### Decision Rules

```pseudocode
Strategy: ConditionalCooperator

Initialize:
- defection_threshold = n/2 (majority defection trigger)
- punishment_duration = 2 rounds
- punishment_timer = 0

For each round t:
    if t == 1:
        action = C  // Always cooperate in first round
    
    else if punishment_timer > 0:
        action = D  // Continue punishment
        punishment_timer -= 1
    
    else if stock_critically_low():
        action = C  // Emergency cooperation to save resource
    
    else if t == final_round:
        if majority_cooperated_last_round():
            action = C  // Reward final cooperation
        else:
            action = D  // Last round defection acceptable
    
    else:
        defectors_last_round = count_defectors(t-1)
        
        if defectors_last_round >= defection_threshold:
            action = D  // Punish widespread defection
            punishment_timer = punishment_duration - 1
        else:
            action = C  // Reward cooperation/minority defection
    
    return action

Function stock_critically_low():
    // Stock is below sustainable threshold
    return current_stock < capacity * 0.3

Function majority_cooperated_last_round():
    cooperators = count_cooperators(previous_round)
    return cooperators > n/2
```

### Detailed Strategy Explanation

**1. First Round Behavior:**
- Always cooperate (C) to signal cooperative intent and establish trust

**2. Regular Round Logic:**
- **Reward Cooperation**: If most players cooperated last round (< n/2 defected), continue cooperating
- **Punish Mass Defection**: If ≥ n/2 players defected last round, switch to defection for 2 rounds
- **Minority Defection Tolerance**: Accept some defection (< majority) without punishment

**3. Emergency Protocol:**
- If stock drops below 30% of capacity, always cooperate regardless of others' actions
- This prevents complete resource collapse

**4. Final Round Handling:**
- If majority cooperated in the second-to-last round, cooperate in final round
- Otherwise, defect in final round (standard end-game behavior)

**5. Punishment Mechanism:**
- Duration: 2 rounds of defection
- Trigger: Majority defection in previous round
- Purpose: Signal that exploitation will be costly

### Strategic Rationale

**Cooperative Elements:**
- Starts with cooperation to build trust
- Continues cooperating when others do
- Prioritizes resource preservation over short-term gains
- Rewards collective cooperation even in final rounds

**Defensive Elements:**
- Punishes mass defection to deter exploitation
- Uses temporary punishment rather than permanent retaliation
- Maintains emergency cooperation to prevent total collapse

**Adaptive Features:**
- Distinguishes between minority and majority defection
- Adjusts behavior based on resource health
- Balances forgiveness with deterrence

This strategy promotes cooperation while being robust against both always-defect and exploitative strategies. It creates incentives for others to cooperate by rewarding good behavior and imposing costs for widespread defection, ultimately working toward sustainable resource management.
'''

description_COOPERATIVE_61 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperatively but can respond to defection patterns while always seeking to return to cooperative equilibrium.

## Decision Rules

### Primary Strategy Components:

1. **Cooperative Default**: Always prefer cooperation when sustainable
2. **Adaptive Response**: React to defection levels but avoid spiral of mutual defection
3. **Forgiveness Mechanism**: Regularly attempt to restore cooperation
4. **Sustainability Monitoring**: Adjust behavior based on stock health

## Detailed Strategy

```pseudocode
STRATEGY: Sustainable Steward

INITIALIZATION:
- cooperation_threshold = 0.6  // Cooperate if ≥60% cooperated last round
- forgiveness_frequency = 3    // Attempt cooperation every 3rd round regardless
- critical_stock_ratio = 0.3   // Emergency cooperation if stock < 30% capacity
- last_round_cooperators = n   // Assume all will cooperate initially

DECISION LOGIC for round t:

IF t == 1:
    RETURN C  // Always cooperate first round

IF current_stock < (critical_stock_ratio * capacity):
    RETURN C  // Emergency cooperation to prevent collapse

IF t == final_round:
    IF last_round_cooperators >= n/2:
        RETURN C  // Cooperate if majority cooperated last round
    ELSE:
        RETURN D  // Defect in final round if cooperation has broken down

IF t % forgiveness_frequency == 0:
    RETURN C  // Periodic forgiveness attempt

// Main adaptive logic
cooperation_rate = last_round_cooperators / n

IF cooperation_rate >= cooperation_threshold:
    RETURN C  // Reciprocate high cooperation
ELSE IF cooperation_rate >= 0.3:
    // Mixed cooperation scenario - be slightly more cooperative
    IF stock_level >= 0.7 * capacity:
        RETURN C  // Stock is healthy, try to encourage cooperation
    ELSE:
        RETURN D  // Stock is declining, match the defection level
ELSE:
    // Low cooperation scenario
    RETURN D  // Protect against exploitation while signaling willingness to punish

UPDATE_TRACKING:
    last_round_cooperators = count of players who played C in round t-1
```

## Edge Case Handling

### First Round
- **Always Cooperate**: Establishes cooperative intent and tests opponent willingness to cooperate

### Final Round
- **Conditional Cooperation**: Cooperate only if cooperation was maintained in recent rounds
- **Rationale**: Prevents being exploited in final round while rewarding sustained cooperation

### Critical Stock Levels
- **Emergency Cooperation**: When stock falls below 30% of capacity, always cooperate
- **Rationale**: Prevents complete resource collapse which hurts everyone

### Low Cooperation Environments
- **Measured Retaliation**: Match defection rates but maintain periodic cooperation attempts
- **Forgiveness Cycles**: Every 3rd round, attempt cooperation regardless of recent history

## Strategic Reasoning

### Why This Strategy is Cooperative:
1. **Default to Cooperation**: Starts cooperative and prefers cooperation when viable
2. **Forgiveness Built-in**: Regular attempts to restore cooperation even after defection
3. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
4. **Graduated Response**: Doesn't immediately spiral into permanent defection

### Adaptation Mechanisms:
1. **Population Monitoring**: Tracks overall cooperation levels rather than individual players
2. **Stock-Sensitive**: Adjusts behavior based on resource health
3. **Conditional Reciprocity**: Rewards cooperation while protecting against exploitation

### Tournament Considerations:
- **Robust Against Exploiters**: Won't be consistently exploited by always-defect strategies
- **Encourages Cooperation**: Rewards other cooperative strategies with sustained mutual cooperation
- **Prevents Collapse**: Emergency cooperation prevents resource depletion scenarios
- **Balanced Approach**: Neither too forgiving (exploitable) nor too harsh (prevents cooperation)

This strategy aims to create and maintain cooperative equilibria while being resilient enough to survive in mixed environments with various opponent types.
'''

description_COOPERATIVE_62 = '''
# Adaptive Conditional Cooperation Strategy (ACCS)

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation. It starts cooperatively but adapts based on observed behavior, using graduated responses to encourage cooperation while maintaining resilience.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    cooperation_rate = calculate_cooperation_rate(history, round)
    stock_health = stock / capacity
    
    // Emergency defection if resource is critically depleted
    if stock_health < 0.3 and round > r/2:
        return DEFECT
    
    // Cooperative start with conditional continuation
    if round <= 3:
        return COOPERATE
    
    // Main adaptive logic
    recent_cooperation = cooperation_rate_last_3_rounds(history)
    
    if recent_cooperation >= 0.7:
        return COOPERATE
    elif recent_cooperation >= 0.4:
        return conditional_cooperate(stock_health, round, r)
    else:
        return punishment_phase(round, history)
```

### Supporting Functions:

**Conditional Cooperation:**
```pseudocode
function conditional_cooperate(stock_health, round, r):
    // More likely to cooperate if stock is healthy
    if stock_health > 0.6:
        return COOPERATE
    elif stock_health > 0.4 and round < 0.8 * r:
        return COOPERATE
    else:
        return DEFECT  // Protect against resource collapse
```

**Punishment Phase:**
```pseudocode
function punishment_phase(round, history):
    // Graduated punishment: defect for 1-2 rounds, then test cooperation
    rounds_since_low_cooperation = calculate_rounds_since_threshold_breach()
    
    if rounds_since_low_cooperation <= 2:
        return DEFECT
    else:
        // Test if others have learned - cooperate once
        return COOPERATE
```

## Edge Case Handling

### First Round (Round 1):
- **Always COOPERATE** - Establish cooperative intent and signal willingness to work together

### Early Rounds (Rounds 2-3):
- **Continue COOPERATING** - Build trust and allow pattern recognition
- Monitor others' responses to gauge their strategies

### Middle Game (Rounds 4 to 0.8r):
- **Primary adaptive logic applies**
- Balance between cooperation reward and exploitation protection
- Respond to majority behavior while considering resource health

### End Game (Last 20% of rounds):
- **Increased defection threshold** if resource is severely depleted (stock < 30% capacity)
- **Maintain cooperation** if resource remains healthy and others cooperate
- **Final round**: Cooperate if stock > 50% capacity and recent cooperation > 60%, otherwise defect

### Critical Resource Depletion:
- If stock falls below 30% of capacity after round r/2, switch to survival mode
- Defect until resource shows signs of recovery (stock growth > 10% for 2 consecutive rounds)

## Cooperation Mechanisms

### Trust Building:
- Start with 3 rounds of unconditional cooperation
- Signal long-term thinking and cooperative intent

### Reciprocity:
- Reward high cooperation rates (≥70%) with continued cooperation
- Respond to moderate cooperation (40-70%) with conditional cooperation based on resource health

### Graduated Response:
- Don't immediately punish single defections
- Use 3-round moving average to avoid overreacting to noise
- Implement short punishment periods (1-2 rounds) followed by cooperation tests

### Resource Stewardship:
- Consider resource health in all decisions
- Prioritize long-term sustainability over short-term gains
- Switch to protection mode when resource is critically low

## Key Features

1. **Forgiving Start**: Three rounds of cooperation to establish good faith
2. **Adaptive Thresholds**: Cooperation requirements adjust based on resource health
3. **Graduated Punishment**: Short, measured responses to sustained defection
4. **Recovery Testing**: Regular attempts to re-establish cooperation after punishment
5. **Resource Protection**: Emergency protocols when facing resource collapse
6. **Endgame Awareness**: Modified behavior in final rounds based on resource state

This strategy balances the cooperative ideal with practical protection against exploitation, while maintaining focus on sustainable resource management throughout the game.
'''

description_COOPERATIVE_63 = '''
# Adaptive Cooperative Strategy with Forgiveness (ACSF)

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperative, adapts to defection patterns, but maintains a forgiving stance to enable recovery of cooperation.

## Decision Rules

### Primary Strategy Components:

1. **Default Cooperative Stance**: Always prefer cooperation when sustainable
2. **Adaptive Response System**: Adjust behavior based on observed cooperation levels
3. **Forgiveness Mechanism**: Allow recovery from punishment phases
4. **Emergency Conservation**: Protect resource from depletion

### Detailed Decision Logic:

```pseudocode
STRATEGY ACSF:

// Initialize tracking variables
cooperation_history = []
punishment_rounds_remaining = 0
emergency_mode = false

FOR each round t:
    current_stock = get_current_stock()
    round_number = t
    total_rounds = r
    
    // EMERGENCY MODE: Prevent resource collapse
    IF current_stock < capacity * 0.15:
        emergency_mode = true
    ELSE IF current_stock > capacity * 0.4:
        emergency_mode = false
    END IF
    
    IF emergency_mode:
        action = COOPERATE  // Always cooperate in emergency
    
    // FIRST ROUND: Start cooperative
    ELSE IF round_number == 1:
        action = COOPERATE
    
    // PUNISHMENT PHASE: Continue punishment if active
    ELSE IF punishment_rounds_remaining > 0:
        action = COOPERATE  // Punish by cooperating (getting less while others might defect)
        punishment_rounds_remaining = punishment_rounds_remaining - 1
    
    // LAST ROUND: Defect only if others have been consistently defecting
    ELSE IF round_number == total_rounds:
        recent_cooperation_rate = calculate_cooperation_rate(last_3_rounds)
        IF recent_cooperation_rate < 0.3:
            action = DEFECT
        ELSE:
            action = COOPERATE
        END IF
    
    // MAIN DECISION LOGIC
    ELSE:
        cooperation_rate = calculate_overall_cooperation_rate()
        recent_cooperation_rate = calculate_cooperation_rate(last_5_rounds)
        
        // High cooperation environment - continue cooperating
        IF cooperation_rate >= 0.7 AND recent_cooperation_rate >= 0.6:
            action = COOPERATE
        
        // Mixed environment - use adaptive response
        ELSE IF cooperation_rate >= 0.4:
            // Mirror recent behavior with slight cooperative bias
            IF recent_cooperation_rate >= 0.5:
                action = COOPERATE
            ELSE:
                // Initiate mild punishment
                punishment_rounds_remaining = 2
                action = COOPERATE
            END IF
        
        // Low cooperation environment - defensive cooperation
        ELSE:
            // Only defect if stock is healthy and others are consistently defecting
            IF current_stock > capacity * 0.6 AND recent_cooperation_rate < 0.2:
                action = DEFECT
            ELSE:
                action = COOPERATE
            END IF
        END IF
    END IF
    
    RETURN action

FUNCTION calculate_cooperation_rate(rounds_to_analyze):
    IF no_history_available:
        RETURN 1.0  // Assume cooperation initially
    
    total_actions = count_all_opponent_actions_in_period(rounds_to_analyze)
    cooperative_actions = count_cooperative_actions_in_period(rounds_to_analyze)
    
    RETURN cooperative_actions / total_actions

FUNCTION calculate_overall_cooperation_rate():
    RETURN calculate_cooperation_rate(all_previous_rounds)
```

## Key Strategic Elements:

### 1. **Cooperative Default**
- Always starts with cooperation
- Maintains cooperative bias even when punishing
- Uses cooperation as both reward and punishment mechanism

### 2. **Emergency Resource Protection**
- Automatically switches to full cooperation when stock drops below 15% of capacity
- Only exits emergency mode when stock recovers above 40% of capacity
- Prevents resource collapse regardless of opponent behavior

### 3. **Adaptive Response System**
- Tracks both overall and recent cooperation rates
- Responds more strongly to recent behavior than historical behavior
- Uses graduated responses rather than binary punishment

### 4. **Forgiveness and Recovery**
- Punishment phases are time-limited (2 rounds)
- Allows quick return to cooperation when opponents improve
- Doesn't hold grudges beyond immediate response periods

### 5. **Endgame Handling**
- Final round behavior depends on recent opponent cooperation
- Won't be exploited in last round if opponents have been consistently defecting
- Still cooperates in final round if relationship has been positive

## Edge Cases Handled:

- **First Round**: Always cooperate to signal cooperative intent
- **No History**: Assumes cooperative opponents until proven otherwise  
- **Resource Near Depletion**: Emergency cooperation overrides all other considerations
- **Final Round**: Conditional defection only if opponents have been exploitative
- **All Opponents Defect**: Still cooperates when resource health is poor
- **Mixed Strategies**: Uses recent behavior trends rather than single-round reactions

## Cooperative Alignment:

This strategy is fundamentally cooperative because:
- It defaults to cooperation in most situations
- Even "punishment" is implemented through continued cooperation
- It prioritizes resource sustainability over short-term gains
- It actively enables and rewards opponent cooperation
- It forgives past defections and allows relationship repair

The strategy recognizes that in a common pool resource game, mutual cooperation is the only sustainable path, and it's designed to foster and maintain that cooperation while being resilient to moderate exploitation.
'''

description_COOPERATIVE_64 = '''
Looking at this common pool resource game, I need to design a strategy that balances cooperation with sustainability while being robust against potential defectors. Here's my cooperative strategy:

## "Adaptive Sustainability Strategy"

### Core Philosophy
- Start cooperatively to establish mutual benefit
- Monitor resource health and adapt accordingly
- Use measured responses to discourage defection
- Prioritize long-term sustainability over short-term gains

### Decision Rules

```pseudocode
STRATEGY: Adaptive Sustainability

INITIALIZATION:
- cooperation_threshold = 0.7  // Fraction of players needed cooperating
- critical_stock_ratio = 0.3   // When stock/capacity falls below this
- forgiveness_window = 2       // Rounds to forgive after punishment

STATE VARIABLES:
- punishment_timer = 0
- consecutive_low_stock = 0

DECISION LOGIC for round t:

IF t == 1:
    RETURN C  // Always cooperate in first round

IF stock/capacity < critical_stock_ratio:
    consecutive_low_stock += 1
    IF consecutive_low_stock >= 2:
        RETURN C  // Emergency cooperation to rebuild stock
    ELSE:
        RETURN C  // Still try cooperation first

IF punishment_timer > 0:
    punishment_timer -= 1
    RETURN D  // Continue punishment

// Calculate cooperation rate from last round
coop_rate = (number of C players last round) / n

IF coop_rate < cooperation_threshold:
    IF stock/capacity > 0.6:
        punishment_timer = 1  // Brief punishment when stock is healthy
        RETURN D
    ELSE:
        RETURN C  // Don't punish when stock is already low

IF t == r:  // Last round
    IF stock/capacity > 0.4:
        RETURN D  // Defect in final round if stock is reasonable
    ELSE:
        RETURN C  // Cooperate if stock is critically low

// Default cooperative behavior
RETURN C
```

### Key Features

1. **Cooperative Foundation**: Starts with cooperation and defaults to cooperation when uncertain

2. **Stock-Aware Adaptation**: 
   - Prioritizes cooperation when stock is critically low (< 30% capacity)
   - Allows measured punishment only when stock is healthy (> 60% capacity)

3. **Proportional Response**: 
   - Punishes only when cooperation rate falls below 70%
   - Uses brief, targeted punishment rather than permanent retaliation

4. **Emergency Cooperation**: 
   - Switches to pure cooperation when stock remains critically low for multiple rounds
   - Recognizes that everyone loses if the resource collapses

5. **Endgame Handling**: 
   - Defects in final round only if stock is reasonably healthy
   - Maintains cooperation in final round if stock is endangered

### Edge Cases

- **First Round**: Always cooperate to signal cooperative intent
- **Resource Collapse**: If stock approaches zero, immediately switch to cooperation regardless of others' behavior
- **Last Round**: Conditional defection based on stock health
- **All Defectors**: Will eventually recognize the pattern and focus on damage control through cooperation

### Strategic Rationale

This strategy is genuinely cooperative because:
- It prioritizes resource sustainability over individual short-term gains
- It gives other players multiple chances to cooperate
- It only punishes when the resource can afford it
- It sacrifices final-round gains when the resource is endangered

The strategy should perform well against other cooperative strategies by maintaining mutual cooperation, while having enough defensive measures to avoid complete exploitation by aggressive strategies.
'''

description_COOPERATIVE_65 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability through cooperation while being resilient to exploitation. It balances trust-building with self-protection.

## Strategy Overview

**Primary Goal**: Maintain cooperation to sustain the resource pool while protecting against systematic exploitation.

## Decision Rules

### 1. Opening Move
**Always COOPERATE in Round 1**
- Establishes cooperative intent
- Maximizes initial resource sustainability
- Creates best possible starting conditions for all players

### 2. Main Strategy (Rounds 2 to r-2)
Use **Adaptive Tit-for-Tat with Forgiveness**:

```pseudocode
IF (current_round <= 3) THEN
    // Trust-building phase
    COOPERATE
ELSE
    cooperation_ratio = count_C_last_3_rounds / (3 * n)
    my_last_action = my_action_previous_round
    
    IF (cooperation_ratio >= 0.67) THEN
        // High cooperation environment
        COOPERATE
    ELSE IF (cooperation_ratio >= 0.33) THEN
        // Mixed environment - mirror majority
        IF (majority_cooperated_last_round) THEN
            COOPERATE
        ELSE
            DEFECT
    ELSE
        // Low cooperation environment
        IF (my_last_action == DEFECT AND random() < 0.2) THEN
            // Occasional forgiveness attempt
            COOPERATE
        ELSE
            DEFECT
```

### 3. Resource Emergency Protocol
**Activate when stock falls below critical threshold**:

```pseudocode
critical_threshold = capacity * 0.3

IF (current_stock < critical_threshold) THEN
    // Emergency cooperation to prevent collapse
    COOPERATE
```

### 4. End Game Handling

#### Second-to-Last Round (r-1)
```pseudocode
IF (current_stock >= capacity * 0.5) THEN
    // Sufficient resources remain
    COOPERATE
ELSE
    // Mirror the group's prevailing strategy
    recent_cooperation_rate = count_C_last_2_rounds / (2 * n)
    IF (recent_cooperation_rate >= 0.5) THEN
        COOPERATE
    ELSE
        DEFECT
```

#### Final Round (r)
```pseudocode
// Conditional cooperation in final round
total_group_cooperation = count_all_C_actions_by_others / ((r-1) * (n-1))

IF (total_group_cooperation >= 0.6) THEN
    COOPERATE  // Reward consistent cooperators
ELSE IF (current_stock >= capacity * 0.8) THEN
    COOPERATE  // Resource abundance allows generosity
ELSE
    DEFECT     // Protect against final-round defection
```

## Key Features

### 1. **Graduated Response**
- Initial cooperation establishes good faith
- Adapts to group behavior patterns rather than individual players
- Uses rolling windows to assess recent trends

### 2. **Forgiveness Mechanism**
- 20% chance to cooperate even in hostile environments
- Prevents permanent defection spirals
- Allows recovery from temporary conflicts

### 3. **Resource Conservation**
- Emergency cooperation when stock is critically low
- Prioritizes long-term sustainability over short-term gains

### 4. **Endgame Wisdom**
- Resists pure end-game defection
- Rewards groups that maintained cooperation
- Balances final-round exploitation concerns with cooperative ideals

## Cooperative Alignment

This strategy is fundamentally cooperative because it:
- **Leads with cooperation** and maintains it under favorable conditions
- **Forgives defections** and attempts to restore cooperation
- **Prioritizes resource sustainability** over individual maximization
- **Rewards cooperative groups** even in the final round
- **Prevents resource collapse** through emergency cooperation

The strategy only defects defensively when facing persistent exploitation or resource scarcity, always seeking to return to cooperative equilibrium when conditions improve.
'''

description_COOPERATIVE_66 = '''
# Cooperative Strategy: "Sustainable Majority with Forgiveness"

## Core Philosophy
This strategy prioritizes long-term sustainability while being resilient to exploitation and encouraging cooperation through conditional reciprocity.

## Decision Rules

### Primary Rule: Conditional Cooperation with Majority Threshold
- **Cooperate (C)** if: The majority of other players cooperated in the previous round AND the stock level is above critical threshold
- **Defect (D)** if: The majority of other players defected in the previous round OR the stock level is critically low

### Critical Stock Threshold
- Define critical threshold as: `stock < capacity * 0.3`
- Below this threshold, defect to maximize immediate payoff since sustainability is already compromised

## Strategy Pseudocode

```
function decide_action(round, stock, history, n, capacity):
    // Edge Case: First Round
    if round == 1:
        return C  // Start cooperatively to signal cooperation
    
    // Critical Stock Protection
    critical_threshold = capacity * 0.3
    if stock < critical_threshold:
        return D  // Maximize payoff when resource is nearly depleted
    
    // Last Round Consideration
    if round == final_round:
        // Count cooperative players in previous round
        previous_cooperators = count_cooperators_last_round(history)
        if previous_cooperators >= (n-1)/2:  // Majority of others cooperated
            return C  // Reciprocate cooperation even in final round
        else:
            return D  // No future to protect, maximize immediate payoff
    
    // Standard Conditional Cooperation
    previous_cooperators = count_cooperators_last_round(history)
    majority_threshold = (n-1)/2  // Majority of other players
    
    if previous_cooperators >= majority_threshold:
        return C
    else:
        // Forgiveness Mechanism: Check if stock is recovering
        if stock > previous_stock * 1.1:  // Stock growing by >10%
            return C  // Give cooperation another chance
        else:
            return D  // Respond to defection with defection
```

## Key Features

### 1. **Majority-Based Reciprocity**
- Cooperates when most others cooperated previously
- Prevents exploitation by small groups of defectors
- Maintains cooperation in predominantly cooperative environments

### 2. **Stock-Based Emergency Protocol**
- Switches to defection when stock falls below 30% of capacity
- Prioritizes immediate survival over long-term sustainability when resource is critically depleted
- Prevents being exploited when the common pool is already severely damaged

### 3. **Forgiveness Mechanism**
- If stock is recovering (growing >10%), gives cooperation another chance even after defection
- Helps restart cooperative cycles after temporary breakdowns
- Prevents permanent defection spirals when recovery is possible

### 4. **First Round Cooperation**
- Always cooperates in round 1 to signal cooperative intent
- Establishes initial goodwill and encourages reciprocal cooperation

### 5. **Last Round Strategy**
- Still reciprocates cooperation in the final round if majority cooperated previously
- Maintains reputation for cooperation even when no future rounds exist
- May encourage others to cooperate in final rounds of future games

## Rationale

This strategy balances several key objectives:

1. **Sustainability**: Prioritizes actions that maintain the common pool resource
2. **Reciprocity**: Rewards cooperation and punishes widespread defection
3. **Resilience**: Protects against exploitation while remaining cooperative
4. **Forgiveness**: Allows for recovery from temporary defection cycles
5. **Adaptability**: Responds to both behavioral patterns and resource conditions

The majority threshold prevents being exploited by a few defectors while still maintaining cooperation when most players are cooperative. The stock-based override ensures rational behavior when the resource is already severely depleted. The forgiveness mechanism helps restart cooperation after conflicts, making the strategy both firm and flexible.
'''

description_COOPERATIVE_67 = '''
# Cooperative Strategy: "Forgiving Tit-for-Tat with Stock Protection"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative, forgiving, and adaptive to the resource state. It balances trust-building with self-protection against exploitation.

## Decision Rules

### Primary Rule: Stock-Dependent Cooperation
```
IF stock > capacity * 0.3:
    Use social strategy (based on opponent behavior)
ELSE:
    COOPERATE (emergency conservation mode)
```

### Social Strategy Component
```
Initialize: cooperation_intention = TRUE for all opponents

For each round t > 1:
1. Calculate forgiveness_threshold = max(0.6 - (t/r) * 0.2, 0.4)
   // Start forgiving (60%), become less forgiving over time (min 40%)

2. For each opponent, calculate their cooperation_rate over last 3 rounds
   
3. Calculate overall_cooperation_rate = average cooperation rate across all opponents

4. Decision logic:
   IF overall_cooperation_rate >= forgiveness_threshold:
       COOPERATE
   ELSE IF stock < capacity * 0.5 AND overall_cooperation_rate < 0.3:
       COOPERATE (prioritize resource preservation)
   ELSE:
       DEFECT
```

## Edge Case Handling

### First Round
- **Always COOPERATE** - Establish cooperative intent and gather information about opponent strategies

### Last Round (Round r)
```
IF stock > capacity * 0.4:
    IF overall_cooperation_rate_in_game >= 0.5:
        COOPERATE (reward good faith cooperation)
    ELSE:
        DEFECT (final defection against consistent defectors)
ELSE:
    COOPERATE (resource too depleted to risk further damage)
```

### Critical Stock Levels
- **Stock ≤ 30% capacity**: Always COOPERATE regardless of opponent behavior
- **Stock ≤ 10% capacity**: COOPERATE and hope others do too (tragedy avoidance)

## Adaptive Mechanisms

### Forgiveness Decay
- Start with high forgiveness (60% threshold) to encourage cooperation
- Gradually reduce forgiveness tolerance as game progresses
- Maintain minimum 40% threshold to avoid being overly punitive

### Stock Emergency Override
When stock falls below critical thresholds, override social strategy to prioritize resource conservation, even if opponents are defecting.

## Strategic Rationale

1. **Cooperative by Default**: Starts and maintains cooperative stance when possible
2. **Forgiving**: Doesn't immediately punish single defections; looks at patterns
3. **Resource-Aware**: Prioritizes long-term sustainability over short-term gains
4. **Adaptive**: Adjusts forgiveness based on game progression and opponent behavior
5. **Defensive**: Protects against exploitation while maintaining cooperative intent

## Pseudocode Summary

```python
def decide_action(round, stock, capacity, opponent_history):
    # Emergency conservation
    if stock <= 0.3 * capacity:
        return COOPERATE
    
    # First round
    if round == 1:
        return COOPERATE
    
    # Calculate opponent cooperation rates (last 3 rounds)
    recent_coop_rate = calculate_recent_cooperation_rate(opponent_history, 3)
    
    # Adaptive forgiveness threshold
    forgiveness_threshold = max(0.6 - (round / total_rounds) * 0.2, 0.4)
    
    # Last round special handling
    if round == total_rounds:
        overall_coop_rate = calculate_overall_cooperation_rate(opponent_history)
        if stock > 0.4 * capacity:
            return COOPERATE if overall_coop_rate >= 0.5 else DEFECT
        else:
            return COOPERATE
    
    # Main decision logic
    if recent_coop_rate >= forgiveness_threshold:
        return COOPERATE
    elif stock < 0.5 * capacity and recent_coop_rate < 0.3:
        return COOPERATE  # Emergency override
    else:
        return DEFECT
```

This strategy maintains a cooperative orientation while protecting against exploitation and resource collapse, adapting its behavior based on both social dynamics and environmental constraints.
'''

description_COOPERATIVE_68 = '''
I'll design a cooperative strategy that balances sustainability with adaptability to opponent behavior.

## Strategy: "Adaptive Sustainable Cooperation" (ASC)

### Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent cooperation levels. It starts optimistically but can defend against exploitation while still maintaining cooperative potential.

### Decision Rules

```pseudocode
STRATEGY: Adaptive Sustainable Cooperation (ASC)

INITIALIZE:
- cooperation_threshold = 0.5  // Minimum fraction of others cooperating to justify cooperation
- trust_decay = 0.1           // How quickly trust erodes
- forgiveness_factor = 0.8    // Probability of forgiving after punishment
- recent_window = min(3, r/4) // Window for calculating recent cooperation rates

FOR each round t:
    IF t == 1:
        ACTION = C  // Always cooperate in first round
    
    ELSE IF t == r:
        // Last round: cooperate if stock is healthy and others were recently cooperative
        recent_coop_rate = count_cooperators_in_window(t-recent_window, t-1) / (n-1)
        current_stock_health = current_stock / capacity
        
        IF current_stock_health > 0.3 AND recent_coop_rate >= 0.4:
            ACTION = C
        ELSE:
            ACTION = D  // Defect in last round if conditions aren't met
    
    ELSE:
        // Middle rounds: Adaptive cooperation based on multiple factors
        
        // Calculate recent cooperation rate of others
        recent_coop_rate = count_cooperators_in_window(t-recent_window, t-1) / (n-1)
        
        // Calculate stock sustainability indicator
        stock_health = current_stock / capacity
        predicted_rounds_left = r - t + 1
        
        // Estimate if current trajectory is sustainable
        IF stock_health < (predicted_rounds_left * 0.15):
            sustainability_crisis = TRUE
        ELSE:
            sustainability_crisis = FALSE
        
        // Decision logic
        IF sustainability_crisis AND recent_coop_rate < 0.3:
            ACTION = D  // Emergency defection when facing collapse with low cooperation
        
        ELSE IF recent_coop_rate >= cooperation_threshold:
            ACTION = C  // Cooperate when others are sufficiently cooperative
        
        ELSE IF recent_coop_rate >= 0.3 AND stock_health > 0.5:
            // Conditional cooperation: give others a chance if stock is healthy
            IF random() < forgiveness_factor:
                ACTION = C
            ELSE:
                ACTION = D
        
        ELSE:
            ACTION = D  // Defect when cooperation is low and conditions are poor
```

### Key Features

1. **Optimistic Start**: Always cooperates in round 1 to establish cooperative intent.

2. **Adaptive Threshold**: Uses a sliding cooperation threshold based on recent opponent behavior rather than rigid rules.

3. **Sustainability Monitoring**: Tracks stock health relative to remaining rounds to detect crisis situations.

4. **Graduated Response**: 
   - High cooperation (≥50%) → Always cooperate
   - Medium cooperation (30-50%) + healthy stock → Probabilistic cooperation
   - Low cooperation (<30%) → Defect, but with crisis override

5. **Crisis Management**: In sustainability crises with low cooperation, prioritizes survival over pure cooperation.

6. **Endgame Handling**: Last round cooperation depends on both recent cooperation and stock health, preventing pure exploitation while rewarding sustained cooperation.

7. **Forgiveness Mechanism**: Includes probabilistic forgiveness to recover from coordination failures.

### Edge Cases Handled

- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Conditional cooperation based on recent history and stock health
- **Stock Depletion**: Emergency defection when facing resource collapse
- **Mixed Signals**: Uses windowed averages to smooth out noise in opponent behavior
- **Small Group Dynamics**: Adapts window size based on game length

### Cooperative Alignment

This strategy maintains cooperative spirit by:
- Starting with trust and cooperation
- Rewarding cooperative behavior from others
- Maintaining sustainability as a primary goal
- Including forgiveness mechanisms
- Only defecting when necessary for survival or when facing persistent defection

The strategy balances being "nice" (cooperative by default), "provocable" (responds to defection), "forgiving" (can recover cooperation), and "clear" (predictable responses to opponent behavior patterns).
'''

description_COOPERATIVE_69 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while adapting to opponent behavior patterns. It starts cooperative and gradually adjusts based on observed cooperation levels, with built-in forgiveness mechanisms to encourage mutual cooperation.

## Strategy Overview

**Primary Goal**: Maximize total payoffs across all rounds by maintaining stock sustainability while adapting to opponent cooperation levels.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-2)
- **Always play C** regardless of opponents' actions
- Rationale: Establish cooperative intent and allow stock to maintain healthy levels

### 2. Adaptive Cooperation Phase (Rounds 3 to r-2)
Use a **Cooperation Threshold** mechanism:

```pseudocode
cooperation_rate = (number of C plays by all opponents in last 2 rounds) / (2 * n-1)

IF cooperation_rate >= 0.5:
    play C
ELSE IF cooperation_rate >= 0.25 AND stock > capacity * 0.3:
    play C  // Give benefit of doubt if stock is healthy
ELSE:
    play D  // Protect against exploitation
```

### 3. Stock Emergency Override
At any round, if `stock < capacity * 0.2`:
- **Always play C** regardless of other conditions
- Rationale: Critical stock levels require immediate conservation

### 4. Forgiveness Mechanism
If playing D due to low cooperation rates:
- Every 3rd consecutive round of defection, play C
- This tests if opponents will return to cooperation

### 5. Final Rounds (Last 2 rounds)
- **Round r-1**: Play C if `cooperation_rate >= 0.4` in recent rounds, else D
- **Round r**: Play D (no future rounds to consider sustainability)

## Edge Cases

### First Round
- Always play C (establish cooperative baseline)

### Stock Depletion Scenarios
- If stock reaches 0: Play C to allow maximum regeneration
- If stock < 10% of capacity: Play C regardless of opponent behavior

### High Cooperation Environment
- If cooperation_rate > 0.8 for 3+ consecutive evaluations: Continue playing C
- Build trust momentum in highly cooperative environments

### Low Cooperation Environment
- If cooperation_rate < 0.2 for 3+ consecutive evaluations: Switch to defensive D
- But still implement forgiveness mechanism every 3rd round

## Pseudocode Implementation

```pseudocode
FUNCTION decide_action(round, stock, capacity, n, game_history):
    // Emergency stock protection
    IF stock < capacity * 0.2:
        RETURN C
    
    // First two rounds - establish cooperation
    IF round <= 2:
        RETURN C
    
    // Last round - no future sustainability concerns
    IF round == total_rounds:
        RETURN D
    
    // Calculate recent cooperation rate
    recent_cooperation_rate = calculate_opponent_cooperation_rate(game_history, 2)
    
    // Main decision logic
    IF round <= total_rounds - 2:
        IF recent_cooperation_rate >= 0.5:
            RETURN C
        ELSE IF recent_cooperation_rate >= 0.25 AND stock > capacity * 0.3:
            RETURN C
        ELSE:
            // Check forgiveness mechanism
            consecutive_defections = count_my_recent_defections(game_history)
            IF consecutive_defections > 0 AND consecutive_defections % 3 == 0:
                RETURN C  // Forgiveness attempt
            ELSE:
                RETURN D
    
    // Penultimate round
    IF round == total_rounds - 1:
        IF recent_cooperation_rate >= 0.4:
            RETURN C
        ELSE:
            RETURN D

FUNCTION calculate_opponent_cooperation_rate(history, lookback_rounds):
    total_opponent_actions = 0
    cooperative_actions = 0
    
    FOR each of last lookback_rounds:
        FOR each opponent:
            total_opponent_actions++
            IF opponent played C:
                cooperative_actions++
    
    RETURN cooperative_actions / total_opponent_actions
```

## Strategic Rationale

1. **Sustainability Focus**: Prioritizes stock health to maximize long-term payoffs
2. **Adaptive Response**: Adjusts to opponent behavior without being overly punitive
3. **Forgiveness**: Provides opportunities for mutual cooperation to resume
4. **Emergency Protocols**: Protects against stock collapse scenarios
5. **End-game Awareness**: Accounts for changed incentives in final rounds

This strategy balances cooperative ideals with practical adaptation to opponent behavior, aiming to achieve high total payoffs through sustainable resource management while protecting against exploitation.
'''

description_COOPERATIVE_70 = '''
# Adaptive Tit-for-Tat with Forgiveness Strategy

## Core Philosophy
This strategy balances cooperation with sustainability protection through adaptive responses to collective behavior while maintaining a fundamentally cooperative stance.

## Decision Rules

### Initial Cooperation Phase
- **Rounds 1-2**: Always play **C** (Cooperate)
- Rationale: Start cooperatively to signal willingness to maintain the resource and allow observation of opponent tendencies

### Main Strategy (Rounds 3 to r-1)
```pseudocode
if stock_level ≤ capacity * 0.3:
    # Emergency protection mode
    play D
elif collective_cooperation_rate_last_round ≥ 0.5:
    # Majority cooperated - reward with cooperation
    play C
elif collective_cooperation_rate_last_3_rounds ≥ 0.4:
    # Recent cooperation trend - give benefit of doubt
    play C
elif consecutive_rounds_of_low_cooperation ≥ 2:
    # Sustained defection - protect resource
    play D
else:
    # Default to cooperation with forgiveness
    if random() < 0.7:
        play C
    else:
        play D  # Occasional defection to prevent exploitation
```

### Final Round Handling
- **Round r**: Play **C** if stock > capacity * 0.2, otherwise play **D**
- Rationale: Maintain cooperative reputation even in final round unless resource is critically depleted

## Key Variables and Calculations

### Collective Cooperation Rate
```pseudocode
cooperation_rate = (number_of_players_who_played_C) / n
```

### Stock Health Assessment
```pseudocode
stock_health = current_stock / capacity
critical_threshold = 0.3
warning_threshold = 0.5
```

### Forgiveness Mechanism
- After 3 consecutive rounds of playing D in response to low cooperation, force one round of C
- This prevents permanent defection spirals and tests if cooperation can be restored

## Edge Case Handling

### First Round
- Always cooperate to establish cooperative intent and maximize initial information gathering

### Stock Depletion Scenarios
- If stock drops below 30% of capacity: Prioritize resource preservation with D
- If stock is between 30-50% of capacity: Increase probability of D to 40%
- If stock recovers above 70% of capacity: Return to standard cooperative approach

### Opponent Pattern Recognition
```pseudocode
if detect_always_defector():
    # If a player has defected >80% of rounds
    adjust_cooperation_threshold_upward()
    
if detect_tit_for_tat_player():
    # If a player mirrors collective behavior
    maintain_high_cooperation_rate()
```

## Cooperative Alignment

1. **Default to Cooperation**: Base assumption is to cooperate unless evidence suggests resource danger
2. **Forgiveness**: Regular return to cooperation even after defection periods
3. **Resource Stewardship**: Protect the commons when critically threatened
4. **Positive Reciprocity**: Reward cooperative behavior from others immediately
5. **Long-term Thinking**: Prioritize sustainable resource levels over short-term gains

## Strategic Advantages

- **Sustainability**: Prevents resource collapse through protective defection
- **Adaptability**: Responds to changing opponent behavior patterns
- **Reputation**: Maintains cooperative reputation while avoiding exploitation
- **Resilience**: Can recover from defection spirals through forgiveness mechanism
- **Group Benefits**: Maximizes collective welfare when others are similarly cooperative

This strategy seeks to find the optimal balance between being exploitably cooperative and destructively competitive, with a strong bias toward cooperation when the resource can sustain it.
'''

description_COOPERATIVE_71 = '''
# Adaptive Conditional Cooperator Strategy

## Core Philosophy
This strategy is fundamentally cooperative but pragmatically adaptive. It aims to establish and maintain cooperation while protecting against exploitation and responding to changing game dynamics.

## Strategy Overview

### Decision Rules

**Primary Rule - Conditional Cooperation:**
- **Cooperate (C)** if the cooperation rate in the previous round was ≥ 50%
- **Defect (D)** if the cooperation rate in the previous round was < 50%

**Exception Rules (Override Primary Rule):**

1. **Stock Depletion Protection:**
   - If current stock < capacity/4: **Always Cooperate**
   - Rationale: When stock is critically low, cooperation is essential for recovery

2. **Forgiveness Mechanism:**
   - If defected in previous round due to low cooperation rate, but stock is recovering (current stock > previous stock): **Cooperate**
   - Allows return to cooperation when others show willingness to rebuild

3. **End Game Adjustment:**
   - Last 2 rounds: Use majority rule from last 3 rounds
   - If majority cooperated in recent history: **Cooperate**
   - Otherwise: **Defect**

### Edge Case Handling

**First Round:**
- **Always Cooperate**
- Establishes cooperative intent and provides information about others' strategies

**Second Round:**
- **Cooperate** if ≥50% cooperated in round 1
- **Defect** if <50% cooperated in round 1

**Final Rounds:**
- Rounds r-1 and r: Apply end game adjustment rule
- Prevents naive cooperation when others might defect in final rounds

## Pseudocode

```python
def decide_action(round_number, total_rounds, current_stock, capacity, 
                 history_actions, history_stocks):
    
    # First round: Always cooperate
    if round_number == 1:
        return 'C'
    
    # Get previous round information
    prev_round_actions = history_actions[round_number - 2]
    prev_stock = history_stocks[round_number - 2]
    cooperation_rate = prev_round_actions.count('C') / len(prev_round_actions)
    
    # Stock depletion protection
    if current_stock < capacity / 4:
        return 'C'
    
    # End game handling (last 2 rounds)
    if round_number > total_rounds - 2:
        # Look at last 3 rounds of cooperation (or fewer if early in game)
        recent_rounds = min(3, round_number - 1)
        total_cooperations = 0
        total_actions = 0
        
        for i in range(max(0, round_number - 1 - recent_rounds), round_number - 1):
            total_cooperations += history_actions[i].count('C')
            total_actions += len(history_actions[i])
        
        if total_cooperations / total_actions >= 0.5:
            return 'C'
        else:
            return 'D'
    
    # Forgiveness mechanism
    if (round_number > 2 and 
        my_last_action == 'D' and 
        cooperation_rate < 0.5 and 
        current_stock > prev_stock):
        return 'C'
    
    # Primary conditional cooperation rule
    if cooperation_rate >= 0.5:
        return 'C'
    else:
        return 'D'
```

## Strategic Rationale

**Cooperative Elements:**
1. **Default to cooperation** when others are cooperating
2. **Stock protection** prioritizes long-term sustainability
3. **Forgiveness** allows recovery from mutual defection spirals
4. **Optimistic start** signals cooperative intent

**Protection Against Exploitation:**
1. **Reciprocal response** to defection prevents being a "sucker"
2. **End game awareness** prevents final-round exploitation
3. **Threshold-based decisions** avoid overreaction to single defections

**Adaptive Features:**
1. **Stock-sensitive decisions** respond to resource scarcity
2. **Historical analysis** in end game considers broader patterns
3. **Recovery mechanism** encourages return to cooperation

This strategy balances the need to maintain cooperation for long-term resource sustainability while protecting against exploitation by less cooperative opponents. It's designed to work well with other cooperative strategies while being robust against various defection patterns.
'''

description_COOPERATIVE_72 = '''
# Adaptive Reciprocity with Sustainability Threshold (ARST) Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being conditionally cooperative, adapting to opponent behavior to maintain resource viability and encourage cooperative equilibrium.

## Decision Rules

### Primary Decision Logic:
```pseudocode
ARST_Strategy(round, stock, game_history, n, r):
    // Phase 1: Early cooperation signal (first 20% of rounds)
    if round <= max(2, r * 0.2):
        return COOPERATE
    
    // Phase 2: Sustainability check
    sustainability_threshold = capacity * 0.25
    if stock < sustainability_threshold:
        return COOPERATE  // Force conservation
    
    // Phase 3: Adaptive reciprocity
    cooperation_rate = calculate_recent_cooperation_rate(game_history, lookback_window)
    
    if cooperation_rate >= 0.7:
        return COOPERATE  // High cooperation environment
    
    elif cooperation_rate >= 0.4:
        // Mixed environment - conditional cooperation
        if stock > capacity * 0.6:
            return probabilistic_choice(0.8)  // 80% cooperate
        else:
            return probabilistic_choice(0.6)  // 60% cooperate
    
    else:
        // Low cooperation environment - defensive
        if round >= r - max(2, r * 0.1):  // Final rounds
            return COOPERATE  // Last-ditch sustainability
        else:
            return DEFECT  // Self-preservation
```

### Supporting Functions:
```pseudocode
calculate_recent_cooperation_rate(history, window):
    recent_rounds = min(window, length(history))
    if recent_rounds == 0:
        return 1.0  // Optimistic assumption
    
    total_actions = 0
    cooperative_actions = 0
    
    for each of last recent_rounds:
        for each player's action in round:
            total_actions += 1
            if action == COOPERATE:
                cooperative_actions += 1
    
    return cooperative_actions / total_actions

probabilistic_choice(cooperate_probability):
    // Implementation would use deterministic pseudo-random based on 
    // game state to ensure reproducibility
    return COOPERATE if random() < cooperate_probability else DEFECT
```

## Key Parameters:
- **Lookback window**: 3 rounds (balances recency with stability)
- **Sustainability threshold**: 25% of capacity
- **High cooperation threshold**: 70% of recent actions
- **Mixed cooperation threshold**: 40% of recent actions
- **Initial cooperation phase**: First 20% of rounds (minimum 2)
- **Final cooperation phase**: Last 10% of rounds (minimum 2)

## Strategy Phases:

### Phase 1: Cooperative Signaling (Early Rounds)
- **Action**: Always COOPERATE
- **Rationale**: Establish cooperative intentions and build initial trust
- **Duration**: First 20% of rounds (minimum 2 rounds)

### Phase 2: Sustainability Monitoring (Throughout)
- **Trigger**: Stock falls below 25% of capacity
- **Action**: Force COOPERATE regardless of opponent behavior
- **Rationale**: Prevent resource collapse that would hurt all players

### Phase 3: Adaptive Reciprocity (Main Phase)
- **High Cooperation Environment (≥70% cooperation rate)**:
  - Always COOPERATE to maintain positive equilibrium
  
- **Mixed Environment (40-70% cooperation rate)**:
  - Stock > 60% capacity: 80% probability COOPERATE
  - Stock ≤ 60% capacity: 60% probability COOPERATE
  - Balances cooperation with protection against exploitation
  
- **Low Cooperation Environment (<40% cooperation rate)**:
  - Generally DEFECT for self-preservation
  - Exception: Final rounds still COOPERATE for sustainability

### Phase 4: End-game Cooperation (Final Rounds)
- **Action**: COOPERATE in final 10% of rounds (minimum 2)
- **Rationale**: Last attempt to preserve resources and signal long-term thinking

## Edge Cases:

1. **First Round**: Always COOPERATE (no history available)
2. **Very Short Games (r ≤ 3)**: COOPERATE in all rounds except middle round(s) if opponents are highly uncooperative
3. **Resource Depletion**: If stock approaches zero, always COOPERATE regardless of opponent behavior
4. **Perfect Cooperation**: If all opponents consistently cooperate, maintain COOPERATE
5. **Perfect Defection**: If all opponents consistently defect, switch to defensive DEFECT but return to COOPERATE in final rounds

## Cooperative Alignment:

This strategy embodies cooperation through:
- **Initial trust**: Leading with cooperation to establish positive norms
- **Sustainability priority**: Protecting the shared resource when critically low
- **Reciprocal cooperation**: Rewarding cooperative environments with continued cooperation
- **Forgiveness**: Not permanently punishing defection, allowing return to cooperation
- **Long-term thinking**: Prioritizing resource preservation over short-term gains
- **End-game responsibility**: Attempting final cooperation even after conflict

The strategy balances idealistic cooperation with realistic protection against exploitation, making it robust for tournament play while maintaining strong cooperative principles.
'''

description_COOPERATIVE_73 = '''
I'll design a cooperative strategy called "Adaptive Trust Builder" that balances cooperation with protection against exploitation while maintaining long-term sustainability of the common pool resource.

## Strategy: Adaptive Trust Builder

### Core Philosophy
This strategy prioritizes long-term cooperation and resource sustainability while protecting against systematic exploitation. It uses a trust-building approach with adaptive punishment mechanisms.

### Decision Rules

```pseudocode
STRATEGY: Adaptive Trust Builder

INITIALIZATION:
- cooperation_threshold = 0.5  // Minimum fraction of cooperators needed
- trust_score = 1.0           // Initial trust level (0 to 1)
- forgiveness_counter = 0     // Tracks consecutive cooperation attempts
- last_round_cooperators = 0  // Number of cooperators in previous round

MAIN DECISION LOGIC:
function decide_action(round, stock, history):
    
    // ROUND 1: Always cooperate to establish good faith
    if round == 1:
        return C
    
    // FINAL ROUND: Cooperate if stock is sustainable, otherwise defect
    if round == max_rounds:
        if stock >= capacity * 0.3:
            return C
        else:
            return D
    
    // CALCULATE CURRENT COOPERATION RATE
    last_round_cooperators = count_cooperators_last_round(history)
    cooperation_rate = last_round_cooperators / n
    
    // UPDATE TRUST SCORE (moving average with recent emphasis)
    trust_score = 0.7 * trust_score + 0.3 * cooperation_rate
    
    // CRITICAL STOCK CHECK: Emergency cooperation
    if stock < capacity * 0.2:
        // Resource near depletion - cooperate to rebuild
        return C
    
    // MAIN COOPERATION DECISION
    if trust_score >= cooperation_threshold:
        // High trust: Cooperate
        forgiveness_counter = 0
        return C
    
    else if trust_score >= 0.3:
        // Medium trust: Conditional cooperation
        if cooperation_rate >= 0.4 OR forgiveness_counter < 2:
            forgiveness_counter += 1
            return C  // Give another chance
        else:
            return D  // Punish sustained non-cooperation
    
    else:
        // Low trust: Defect but allow recovery
        if cooperation_rate >= 0.6:
            // Significant improvement detected
            forgiveness_counter = 0
            return C  // Reward good behavior
        else:
            return D  // Continue punishment
```

### Key Features

1. **Trust-Based System**: Maintains a trust score based on recent cooperation rates, allowing for adaptive responses to changing opponent behavior.

2. **Graduated Response**: Uses different thresholds for different trust levels:
   - High trust (≥0.5): Always cooperate
   - Medium trust (0.3-0.5): Conditional cooperation with limited forgiveness
   - Low trust (<0.3): Defect but watch for improvement

3. **Emergency Cooperation**: When stock falls critically low (<20% of capacity), always cooperate to prevent collapse regardless of opponent behavior.

4. **Forgiveness Mechanism**: Provides limited second chances (up to 2 consecutive attempts) even when trust is medium-low, preventing permanent punishment cycles.

### Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent and establish baseline trust
- **Final Round**: Cooperate if stock is sustainable (≥30% capacity), otherwise defect since there's no future to protect
- **Stock Depletion**: Emergency cooperation kicks in when stock is critically low
- **Recovery Detection**: Actively rewards opponents who return to cooperation after periods of defection

### Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation and high trust
- Prioritizes resource sustainability over short-term gains
- Provides forgiveness opportunities
- Rewards cooperative behavior from opponents
- Uses punishment only as a deterrent, not as primary strategy
- Includes emergency cooperation to prevent resource collapse

The strategy assumes that other LLM-generated strategies may also be cooperative but includes protection mechanisms against purely exploitative strategies, making it robust in a mixed environment while maintaining its cooperative core.
'''

description_COOPERATIVE_74 = '''
# Cooperative Strategy: "Sustainable Trust with Graduated Response"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but includes mechanisms to protect against exploitation and encourage reciprocal cooperation.

## Decision Rules

### Primary Rule: Conditional Cooperation
```
IF stock_level >= capacity * 0.5:
    Default to COOPERATE
ELSE:
    Apply Conservation Protocol
```

### Conservation Protocol (when stock < 50% capacity)
```
cooperation_threshold = max(0.3, stock_level / capacity)
IF (number_of_cooperators_last_round / n) >= cooperation_threshold:
    COOPERATE
ELSE:
    DEFECT
```

### Reciprocity Mechanism
Track each opponent's cooperation rate over the last 3 rounds:
```
FOR each player j:
    recent_cooperation_rate[j] = (cooperations_by_j_in_last_3_rounds / 3)
    
average_cooperation_rate = mean(recent_cooperation_rate)

IF average_cooperation_rate < 0.4 AND stock_level > capacity * 0.3:
    Apply punishment: DEFECT this round
```

## Edge Case Handling

### First Round
- **Always COOPERATE** - Establish cooperative intent and gather information about opponents

### Last Round (when round = r)
```
IF stock_level >= capacity * 0.3:
    COOPERATE  // Maintain cooperative reputation
ELSE:
    DEFECT     // Extract remaining value from depleted resource
```

### Critical Stock Situations
```
IF stock_level <= capacity * 0.2:
    // Emergency conservation mode
    IF majority cooperated last round:
        COOPERATE (help recovery)
    ELSE:
        DEFECT (prevent total collapse without reciprocity)
```

## Complete Strategy Pseudocode

```
STRATEGY: SustainableTrust(current_round, stock_level, history)

// Initialize tracking variables
cooperation_history = extract_cooperation_history(history)
my_last_3_actions = get_my_recent_actions(history, 3)
others_recent_cooperation = calculate_others_cooperation_rate(history, 3)

// Edge Case: First Round
IF current_round == 1:
    RETURN COOPERATE

// Edge Case: Last Round
IF current_round == r:
    IF stock_level >= capacity * 0.3:
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT

// Main Decision Logic
normalized_stock = stock_level / capacity

// High stock situation - be cooperative
IF normalized_stock >= 0.5:
    // Check for punishment opportunity
    IF others_recent_cooperation < 0.4 AND normalized_stock > 0.3:
        RETURN DEFECT  // Punish free-riders
    ELSE:
        RETURN COOPERATE

// Medium stock situation - conditional cooperation
ELSE IF normalized_stock >= 0.3:
    cooperation_threshold = max(0.4, normalized_stock)
    last_round_cooperation_rate = calculate_last_round_cooperation_rate(history)
    
    IF last_round_cooperation_rate >= cooperation_threshold:
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT

// Low stock situation - emergency protocol
ELSE:
    last_round_cooperation_rate = calculate_last_round_cooperation_rate(history)
    IF last_round_cooperation_rate >= 0.6:
        RETURN COOPERATE  // Help recovery if others cooperating
    ELSE:
        RETURN DEFECT     // Prevent exploitation
```

## Key Features

1. **Cooperative Default**: Starts cooperatively and maintains cooperation when resources are abundant
2. **Adaptive Thresholds**: Cooperation requirements scale with resource scarcity
3. **Graduated Response**: Punishment intensity matches the severity of defection
4. **Recovery Support**: Helps rebuild depleted resources when others show commitment
5. **Exploitation Protection**: Prevents being taken advantage of by persistent defectors
6. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains

This strategy balances cooperation with self-protection, encouraging sustainable resource use while adapting to opponent behavior patterns.
'''

description_COOPERATIVE_75 = '''
# Cooperative Strategy: "Conditional Cooperator with Forgiveness"

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation. It balances the need to cooperate for long-term sustainability with the necessity to protect against defectors who could collapse the resource pool.

## Decision Rules

### Primary Rule: Conditional Cooperation
- **Cooperate (C)** if the majority of other players cooperated in the previous round
- **Defect (D)** if the majority of other players defected in the previous round

### Forgiveness Mechanism
- After defecting in response to others' defection, return to cooperation if:
  - At least 50% of players cooperated in the most recent round, OR
  - The stock level has recovered to ≥ 75% of capacity

### Stock-Based Override
- **Always Cooperate** if current stock ≤ capacity/4 (critical threshold)
- **Always Defect** if current stock ≥ capacity AND it's not the last 2 rounds

## Edge Case Handling

### First Round
- **Always Cooperate** - Establish cooperative intent and give others the benefit of the doubt

### Last Round
- **Cooperate** if stock > capacity/2
- **Defect** if stock ≤ capacity/2 (end-game extraction when sustainability no longer matters)

### Second-to-Last Round
- **Cooperate** unless stock is critically low (< capacity/4)

## Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    
    // First round: always cooperate
    if round == 1:
        return C
    
    // Critical stock override: always cooperate when stock is very low
    if stock <= capacity / 4:
        return C
    
    // Last round special case
    if round == final_round:
        if stock > capacity / 2:
            return C
        else:
            return D
    
    // High stock override (except near end)
    if stock >= capacity AND round < final_round - 1:
        return D
    
    // Get other players' actions from previous round
    previous_round = history[round - 1]
    other_players_actions = previous_round.exclude(my_action)
    cooperators = count(other_players_actions == C)
    defectors = count(other_players_actions == D)
    
    // Main conditional cooperation rule
    if cooperators > defectors:
        return C
    else if defectors > cooperators:
        // Check forgiveness conditions
        if stock >= 0.75 * capacity:
            return C  // Forgive when stock is healthy
        else:
            return D  // Punish defection
    else:
        // Tie case: slight bias toward cooperation unless stock is low
        if stock >= capacity / 2:
            return C
        else:
            return D
```

## Strategic Rationale

1. **Cooperative Foundation**: Starting with cooperation signals good intentions and allows for mutual cooperation to emerge.

2. **Reciprocity**: The majority-based rule ensures we respond appropriately to the general behavior of others while not being overly sensitive to single defectors.

3. **Forgiveness**: The forgiveness mechanism prevents permanent punishment spirals that could lead to resource collapse.

4. **Stock Awareness**: The stock-based overrides ensure we prioritize resource sustainability when critically low and can afford to be more generous when stock is high.

5. **End-Game Consideration**: Different behavior in final rounds accounts for the lack of future consequences.

6. **Robustness**: The strategy can handle various opponent types - pure cooperators, pure defectors, and other conditional strategies.

This strategy should perform well in maintaining the resource pool while achieving reasonable individual payoffs, especially when facing other cooperative or conditionally cooperative strategies.
'''

description_COOPERATIVE_76 = '''
# Cooperative Strategy: "Adaptive Consensus Builder"

## Core Philosophy
This strategy prioritizes long-term sustainability while building and maintaining cooperative coalitions through clear signaling and measured responses to defection.

## Decision Rules

### Round 1: Cooperative Signal
- **Action**: Always COOPERATE
- **Rationale**: Establish cooperative intent and signal willingness to sustain the resource

### Rounds 2 to r-1: Adaptive Cooperation with Punishment
```pseudocode
function decide_action(round, game_history, current_stock):
    cooperation_rate = count_cooperators_last_round / n
    stock_health = current_stock / capacity
    
    // Primary cooperation condition
    if cooperation_rate >= 0.5 AND stock_health >= 0.3:
        return COOPERATE
    
    // Emergency cooperation (stock critically low)
    if stock_health < 0.2:
        return COOPERATE
    
    // Conditional defection (minority cooperation or medium stock stress)
    if cooperation_rate < 0.5 AND stock_health >= 0.3:
        // Graduated response based on cooperation level
        if cooperation_rate >= 0.25:
            return COOPERATE  // Give benefit of doubt
        else:
            return DEFECT     // Match low cooperation
    
    // Default to cooperation for edge cases
    return COOPERATE
```

### Final Round (Round r): Conditional Cooperation
```pseudocode
function final_round_decision(game_history, current_stock):
    recent_cooperation_rate = average_cooperation_rate_last_3_rounds
    stock_health = current_stock / capacity
    
    // If strong cooperation pattern exists, maintain it
    if recent_cooperation_rate >= 0.6:
        return COOPERATE
    
    // If stock is very healthy and some cooperation exists
    if stock_health >= 0.7 AND recent_cooperation_rate >= 0.3:
        return COOPERATE
    
    // Otherwise, secure final payoff
    return DEFECT
```

## Edge Case Handling

### Stock Depletion Crisis
- If stock falls below 20% of capacity: **Always COOPERATE** regardless of others' actions
- Rationale: Prevent complete resource collapse that hurts everyone

### High Defection Environment
- If cooperation rate falls below 25% for 2+ consecutive rounds: **DEFECT** until cooperation rate recovers to 40%+
- Rationale: Avoid being exploited while signaling that cooperation is still possible

### Stock Recovery Phase
- When stock is recovering (increasing for 2+ rounds) and above 50% capacity: **Always COOPERATE**
- Rationale: Support positive momentum and reinforce sustainable patterns

## Key Strategic Features

1. **Clear Signaling**: Always start cooperatively to signal intent
2. **Conditional Forgiveness**: Willing to return to cooperation when others do
3. **Graduated Response**: Punishment intensity matches defection severity
4. **Crisis Override**: Prioritizes resource survival over short-term gains
5. **Endgame Balance**: Considers both relationship maintenance and final payoff

## Cooperative Alignment

This strategy embodies cooperation by:
- **Leading by example** with initial cooperation
- **Rewarding cooperation** with continued partnership
- **Protecting the commons** during crisis periods
- **Building sustainable coalitions** rather than maximizing individual short-term gains
- **Maintaining hope for cooperation** even after setbacks through graduated responses

The strategy assumes other cooperative LLMs will recognize similar patterns and reciprocate, while protecting against exploitation by purely selfish strategies through measured defensive responses.
'''

description_COOPERATIVE_77 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperative equilibrium while protecting against exploitation through measured responses and forgiveness mechanisms.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: Always play C
- **Rationale**: Signal cooperative intent and give others the opportunity to establish mutual cooperation

### Rounds 2 to r-1: Conditional Cooperation with Graduated Response

```pseudocode
if round == 2 to r-1:
    defection_ratio = count_defectors_last_round / n
    
    if defection_ratio == 0:
        // All cooperated - reward with cooperation
        action = C
    
    elif defection_ratio <= 0.25:
        // Minor defection (≤25%) - forgive and cooperate
        action = C
    
    elif defection_ratio <= 0.5:
        // Moderate defection (26-50%) - conditional response
        if my_previous_action == C:
            action = D  // Punish, but only once
        else:
            action = C  // Return to cooperation after punishment
    
    else:
        // Major defection (>50%) - strong response
        if stock_level < capacity * 0.3:
            action = D  // Protect against resource collapse
        else:
            action = C  // Still attempt cooperation if resources allow
```

### Final Round: Reputation-Based Decision
```pseudocode
if round == r:
    overall_cooperation_rate = total_cooperative_actions_observed / (n * (r-1))
    
    if overall_cooperation_rate >= 0.6:
        action = C  // Reward generally cooperative group
    elif stock_level < capacity * 0.2:
        action = D  // Emergency resource protection
    else:
        action = C  // Default to cooperation
```

## Key Features

### 1. **Graduated Response System**
- **Tolerance for Minor Defection**: Forgives up to 25% defection rate to account for mixed strategies or experimentation
- **Measured Punishment**: Responds to moderate defection with single-round punishment followed by immediate return to cooperation
- **Emergency Protocol**: Switches to resource protection when stock falls dangerously low

### 2. **Forgiveness Mechanism**
- Never holds grudges beyond one round
- Immediately returns to cooperation after any punishment
- Maintains cooperative stance even when others occasionally defect

### 3. **Stock-Aware Decisions**
- Monitors resource levels to prevent total depletion
- Prioritizes long-term sustainability over short-term punishment
- Switches to defensive play only when resources are critically low

### 4. **Reputation System**
- Tracks overall cooperation patterns across all rounds
- Rewards groups that maintain high cooperation rates
- Uses historical behavior to inform final round decisions

## Edge Case Handling

### First Round
- Always cooperate to signal intent and establish baseline

### Last Round
- Balances reputation rewards with resource protection
- Defaults to cooperation unless group has been consistently uncooperative or resources are critically depleted

### Resource Depletion Scenarios
- If stock < 30% of capacity: Switch to defensive mode regardless of punishment logic
- If stock approaches zero: Prioritize any possible resource generation over punishment

### All-Defection Scenarios
- Maintains cooperative attempts even when facing majority defection
- Only switches to defection when resource survival is at stake
- Quickly returns to cooperation when conditions improve

## Strategic Rationale

1. **Encourages Cooperation**: Initial and default cooperation signals establish positive expectations
2. **Deters Exploitation**: Graduated punishment system discourages systematic defection
3. **Maintains Flexibility**: Forgiveness and adaptation prevent lock-in to suboptimal Nash equilibria
4. **Protects Resources**: Stock-aware decisions ensure game doesn't end prematurely
5. **Rewards Group Success**: Reputation system encourages collective welfare maximization

This strategy aims to achieve the best cooperative outcome while remaining robust against various opponent strategies, from pure cooperators to sophisticated adaptive players.
'''

description_COOPERATIVE_78 = '''
# Adaptive Cooperative Strategy with Trust-Based Defection

## Core Philosophy
This strategy prioritizes long-term sustainability through cooperation while maintaining the ability to respond to exploitation. It uses a trust-based system to determine when defensive defection is necessary.

## Decision Rules

### 1. Default Cooperation
- **Base principle**: Always prefer cooperation (C) when the common pool can sustain it
- **Rationale**: Cooperation maximizes collective welfare and resource sustainability

### 2. Trust Tracking System
For each opponent j, maintain a trust score T_j:
- **Initial trust**: T_j = 1.0 (full trust)
- **Trust update after each round**:
  - If opponent j played C: T_j = min(1.0, T_j + 0.1)
  - If opponent j played D: T_j = max(0.0, T_j - 0.3)

### 3. Collective Trust Metric
Calculate average trust across all opponents:
```
collective_trust = (Σ T_j) / (n-1)
```

### 4. Stock Health Assessment
Define stock health as:
```
stock_health = current_stock / capacity
```

## Main Decision Algorithm

```pseudocode
function decide_action(round, current_stock, history):
    // Edge case: First round - always cooperate
    if round == 1:
        return C
    
    // Update trust scores based on previous round
    update_trust_scores(history[round-1])
    
    // Calculate metrics
    collective_trust = calculate_collective_trust()
    stock_health = current_stock / capacity
    rounds_remaining = total_rounds - round + 1
    
    // Critical stock protection
    if stock_health < 0.2:
        if collective_trust > 0.7:
            return C  // Trust others to also conserve
        else:
            return D  // Emergency extraction before collapse
    
    // Last round - always defect (no future consequences)
    if rounds_remaining == 1:
        return D
    
    // Penultimate round - conditional cooperation
    if rounds_remaining == 2:
        if collective_trust > 0.8 AND stock_health > 0.4:
            return C
        else:
            return D
    
    // Standard rounds: Trust-based decision
    if collective_trust >= 0.6:
        return C
    else:
        // Defect when trust is low
        return D
```

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent
- Establishes positive precedent

### Last Round
- Always defect (no future retaliation possible)
- Rational end-game behavior

### Penultimate Round
- Cooperate only if high trust AND healthy stock
- Balances cooperation with end-game incentives

### Critical Stock Levels
- When stock_health < 0.2, behavior depends on collective trust
- High trust → continue cooperation to prevent collapse
- Low trust → emergency extraction before others deplete resource

## Cooperative Alignment

This strategy maintains cooperative principles by:

1. **Default cooperation**: Starting and preferring cooperative play
2. **Trust-based adaptation**: Only defecting when opponents consistently exploit
3. **Resource preservation**: Protecting the common pool from collapse
4. **Gradual response**: Using incremental trust adjustments rather than immediate retaliation
5. **Collective focus**: Considering group welfare through stock health monitoring

## Key Features

- **Forgiveness**: Trust can be rebuilt through consistent cooperation
- **Proportional response**: Defection probability scales with betrayal history
- **Sustainability focus**: Prioritizes long-term resource health
- **End-game awareness**: Accounts for changed incentives in final rounds
- **Adaptive thresholds**: Responds to both individual and collective behavior patterns

This strategy aims to foster cooperation while protecting against exploitation, maintaining the common pool resource for maximum collective benefit.
'''

description_COOPERATIVE_79 = '''
# Adaptive Cooperative Strategy: "Guardian with Graduated Response"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while adapting to opponent behavior. It starts cooperative and uses a graduated response system to handle defection, always seeking to return to cooperation when possible.

## Decision Rules

### Round 1 (Initialization)
- **Always play C** - Start with cooperation to signal cooperative intent and test the waters

### Rounds 2 to r-1 (Main Game)
Use a multi-layered decision system:

1. **Stock Health Check**
   - If current stock < capacity/4: **Play C** (emergency conservation mode)
   
2. **Recent Cooperation Assessment** (if stock is healthy)
   - Count cooperators in the last round
   - If ≥ 50% of players cooperated last round: **Play C**
   
3. **Graduated Response** (if recent cooperation is low)
   - Track personal "defection pressure" score:
     - +2 points for each defector in the last round
     - -1 point for each cooperator in the last round
     - Score decays by 20% each round (forgiveness factor)
   
   - If defection pressure < n: **Play C** (give benefit of doubt)
   - If defection pressure ≥ n: **Play D** (defensive response)

### Final Round (Round r)
- **Always play C** - End on a cooperative note and avoid the "last round defection" trap

## Pseudocode

```python
def choose_action(round_num, stock, history, n, r, capacity):
    # Round 1: Always cooperate
    if round_num == 1:
        return 'C'
    
    # Final round: Always cooperate
    if round_num == r:
        return 'C'
    
    # Emergency conservation mode
    if stock < capacity / 4:
        return 'C'
    
    # Get last round's actions
    last_round_actions = history[round_num - 2]  # Previous round
    cooperators_last_round = sum(1 for action in last_round_actions if action == 'C')
    
    # If majority cooperated recently, cooperate
    if cooperators_last_round >= n / 2:
        return 'C'
    
    # Calculate defection pressure
    defectors_last_round = n - cooperators_last_round
    defection_pressure = update_defection_pressure(defectors_last_round, cooperators_last_round)
    
    # Graduated response
    if defection_pressure < n:
        return 'C'
    else:
        return 'D'

def update_defection_pressure(defectors, cooperators):
    # Simplified version - in practice, maintain running score
    pressure = defectors * 2 - cooperators * 1
    return max(0, pressure * 0.8)  # 20% decay + non-negative
```

## Key Features

### 1. **Sustainability Focus**
- Emergency conservation mode prevents complete resource depletion
- Always considers stock health before making decisions

### 2. **Graduated Response**
- Doesn't immediately retaliate for single defections
- Builds pressure gradually based on consistent antisocial behavior
- Includes forgiveness mechanism (pressure decay)

### 3. **Cooperative Signaling**
- Starts and ends with cooperation
- Rewards cooperative behavior from others
- Gives benefit of doubt when cooperation levels are marginal

### 4. **Adaptive Elements**
- Responds to recent behavior patterns rather than just last action
- Considers group dynamics (percentage of cooperators)
- Balances individual rationality with group welfare

## Edge Case Handling

- **First Round**: Pure cooperation to establish positive precedent
- **Last Round**: Cooperation to avoid mutual destruction and signal trustworthiness
- **Low Stock**: Conservation override regardless of opponent behavior
- **Mixed Signals**: Default to cooperation when opponent behavior is ambiguous
- **Consistent Defection**: Protective response while maintaining readiness to return to cooperation

This strategy aims to create a stable cooperative equilibrium while protecting against exploitation, making it robust in tournaments with diverse opponent strategies.
'''

description_COOPERATIVE_80 = '''
# Adaptive Conditional Cooperator Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed behavior patterns and resource sustainability.

## Decision Rules

### 1. Initial Cooperation Phase
- **Rounds 1-2**: Always play **C** (Cooperate)
- **Rationale**: Signal cooperative intent and establish baseline for measuring others' behavior

### 2. Main Strategy (Rounds 3 to r-2)
```pseudocode
IF stock_level < capacity * 0.3 THEN
    play C  // Crisis mode: always cooperate to rebuild stock
ELSE IF cooperation_ratio_last_round >= 0.6 THEN
    play C  // Reward group cooperation
ELSE IF cooperation_ratio_last_round >= 0.4 THEN
    // Mixed environment: cooperate with probability based on trend
    IF cooperation_trend_improving THEN
        play C
    ELSE
        play D
    END IF
ELSE
    // Low cooperation environment
    IF my_last_action == D AND stock_recovered_significantly THEN
        play C  // Attempt to restart cooperation after punishment
    ELSE
        play D  // Match the defection level
    END IF
END IF
```

### 3. Endgame Handling (Last 2 rounds)
```pseudocode
IF round == r-1 THEN  // Second to last round
    IF stock_level >= capacity * 0.5 AND cooperation_ratio_recent >= 0.5 THEN
        play C  // Maintain cooperation if stock is healthy
    ELSE
        play D  // Defect if stock is low or others are defecting
    END IF
ELSE IF round == r THEN  // Final round
    IF stock_level >= capacity * 0.7 AND cooperation_ratio_recent >= 0.7 THEN
        play C  // Only cooperate in final round if very favorable conditions
    ELSE
        play D  // Generally defect in final round due to no future consequences
    END IF
END IF
```

## Key Variables and Calculations

### Cooperation Metrics
- `cooperation_ratio_last_round = (number of C players in last round) / n`
- `cooperation_ratio_recent = average cooperation ratio over last 3 rounds`
- `cooperation_trend_improving = cooperation_ratio_recent > cooperation_ratio_previous_3_rounds`

### Stock Health Assessment
- `stock_recovered_significantly = current_stock > previous_stock * 1.2`
- Critical threshold: `capacity * 0.3` (triggers crisis mode)
- Healthy threshold: `capacity * 0.5` (allows continued cooperation)

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Stock Depletion Crisis
- If stock falls below 30% of capacity, always cooperate regardless of others' actions
- This prevents complete resource collapse

### Punishment and Forgiveness
- After defecting in response to others' defection, give cooperation another chance if stock shows recovery
- Prevents permanent defection spirals

### Endgame Considerations
- Gradually increase defection probability as game approaches end
- Account for reduced future consequences in final rounds

## Strategic Rationale

1. **Cooperative Signaling**: Initial cooperation establishes good faith
2. **Adaptive Response**: Adjusts to observed behavior patterns rather than rigid rules
3. **Crisis Prevention**: Prioritizes resource sustainability over short-term gains
4. **Forgiveness Mechanism**: Attempts to restart cooperation after conflicts
5. **Realistic Endgame**: Acknowledges changed incentives in final rounds
6. **Trend-Based**: Uses behavioral trends rather than just immediate past actions

This strategy balances cooperation with self-protection, aiming to foster sustainable resource use while avoiding exploitation by consistently defecting opponents.
'''

description_COOPERATIVE_81 = '''
# Cooperative Strategy: "Sustainable Tit-for-Tat with Forgiveness"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to others' behavior. It starts cooperatively, reciprocates collective behavior, but includes forgiveness mechanisms to recover from defection spirals.

## Decision Rules

### Primary Logic:
1. **Always Cooperate in Round 1** - Start with good faith
2. **Monitor Collective Cooperation Rate** - Track the percentage of players who cooperated in the previous round
3. **Adaptive Response** - Adjust behavior based on group dynamics with built-in forgiveness

### Pseudocode:
```
STRATEGY: Sustainable_Tit_For_Tat_With_Forgiveness

INITIALIZE:
    cooperation_threshold = 0.5  // Cooperate if >50% cooperated last round
    forgiveness_frequency = 3    // Forgive every 3rd round regardless
    stock_crisis_threshold = capacity * 0.2  // Crisis mode if stock < 20% capacity
    
DECISION_FUNCTION(round, current_stock, history):
    // Special cases first
    IF round == 1:
        RETURN C  // Always start cooperatively
    
    IF round == final_round:
        // Last round - cooperate to signal good faith for future interactions
        RETURN C
    
    IF current_stock < stock_crisis_threshold:
        // Crisis mode - always cooperate to rebuild stock
        RETURN C
    
    // Calculate cooperation rate from previous round
    previous_cooperators = count_cooperators(history[round-1])
    cooperation_rate = previous_cooperators / n
    
    // Forgiveness mechanism
    IF round % forgiveness_frequency == 0:
        RETURN C  // Periodic forgiveness to break defection cycles
    
    // Main decision logic
    IF cooperation_rate > cooperation_threshold:
        RETURN C  // Reciprocate good behavior
    ELSE:
        // Even when defecting, consider stock level
        IF current_stock < capacity * 0.4:
            RETURN C  // Protect stock when moderately low
        ELSE:
            RETURN D  // Reciprocate poor behavior
```

## Strategy Components

### 1. Cooperative Start
- **Round 1**: Always cooperate to signal good intentions and start the game on a positive note
- This establishes initial trust and demonstrates commitment to sustainability

### 2. Collective Behavior Tracking
- Monitor what percentage of players cooperated in the previous round
- Use 50% as the threshold - if majority cooperated, reciprocate with cooperation
- This creates incentives for others to cooperate since it influences future behavior

### 3. Stock-Based Crisis Management
- **Crisis Mode** (stock < 20% capacity): Always cooperate to rebuild the resource
- **Caution Mode** (stock < 40% capacity): Cooperate even when others defect
- This prevents resource collapse and shows long-term thinking

### 4. Periodic Forgiveness
- Every 3rd round, cooperate regardless of others' previous behavior
- This breaks potential defection spirals and offers chances for renewed cooperation
- Signals willingness to restart cooperative relationships

### 5. Final Round Cooperation
- Cooperate in the last round to signal good faith
- Even though this is the final interaction, it demonstrates consistent cooperative values

## Edge Case Handling

### First Round
- Always cooperate to establish positive precedent

### Last Round  
- Always cooperate to maintain reputation and signal consistent values

### Stock Depletion
- Increasingly cooperative as stock decreases
- Override normal reciprocity when resource sustainability is threatened

### All Players Defecting
- Still provide periodic forgiveness opportunities
- Switch to cooperation when stock becomes critically low

## Cooperative Alignment

This strategy embodies cooperation through:
1. **Default Cooperation**: Starts and maintains cooperative stance when possible
2. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
3. **Forgiveness**: Includes mechanisms to recover from conflict
4. **Proportional Response**: Doesn't immediately retaliate, uses majority thresholds
5. **Crisis Responsibility**: Always cooperates when the resource is truly threatened

The strategy balances being cooperative with being responsive to others' behavior, preventing exploitation while maintaining the cooperative framework necessary for sustainable resource management.
'''

description_COOPERATIVE_82 = '''
# Adaptive Cooperative Strategy: "Sustainable Shepherd"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to the cooperative behavior of others. It starts optimistically but adapts based on observed patterns to maintain resource viability.

## Decision Rules

### Primary Rule: Conditional Cooperation with Sustainability Threshold
```pseudocode
if current_stock < (capacity * 0.3):
    # Emergency conservation mode
    action = COOPERATE
elif round_number == 1:
    # Start cooperatively
    action = COOPERATE
elif round_number == final_round:
    # Last round: cooperate if stock is healthy, otherwise match majority
    if current_stock >= (capacity * 0.5):
        action = COOPERATE
    else:
        action = majority_action_last_round
else:
    # Main decision logic
    action = adaptive_cooperation_rule()
```

### Adaptive Cooperation Rule
```pseudocode
function adaptive_cooperation_rule():
    # Calculate cooperation rate in recent history (last 3 rounds or all if fewer)
    recent_rounds = min(3, current_round - 1)
    recent_coop_rate = count_cooperators_in_last_n_rounds(recent_rounds) / (n * recent_rounds)
    
    # Calculate stock health trend
    stock_trend = (current_stock - stock_two_rounds_ago) / capacity
    
    # Base cooperation threshold starts at 0.4 (40% of others cooperating)
    base_threshold = 0.4
    
    # Adjust threshold based on stock health
    if current_stock < (capacity * 0.5):
        # Lower bar for cooperation when stock is endangered
        threshold = base_threshold - 0.2
    elif stock_trend < -0.1:
        # Stock declining rapidly, be more cooperative
        threshold = base_threshold - 0.1
    elif current_stock > (capacity * 0.8) and stock_trend > 0:
        # Stock very healthy and growing, can be slightly more demanding
        threshold = base_threshold + 0.1
    else:
        threshold = base_threshold
    
    # Make decision
    if recent_coop_rate >= threshold:
        return COOPERATE
    else:
        # Graduated response: don't immediately defect
        defection_rate_in_recent = 1 - recent_coop_rate
        if defection_rate_in_recent > 0.7:
            # Mostly defectors, match their behavior
            return DEFECT
        else:
            # Mixed behavior, try tit-for-tat with forgiveness
            return tit_for_tat_with_forgiveness()
```

### Tit-for-Tat with Forgiveness
```pseudocode
function tit_for_tat_with_forgiveness():
    # Look at what majority did last round
    last_round_coop_rate = cooperators_last_round / n
    
    # Forgiveness mechanism: occasionally cooperate even if others defected
    if last_round_coop_rate < 0.5:
        # Majority defected last round
        if (current_round % 4 == 0):
            # Every 4th round, try cooperation as olive branch
            return COOPERATE
        else:
            return DEFECT
    else:
        # Majority cooperated, reciprocate
        return COOPERATE
```

## Edge Case Handling

### First Round
Always COOPERATE to signal cooperative intent and establish good precedent.

### Final Round
- If stock > 50% capacity: COOPERATE (preserve long-term thinking even in final round)
- If stock ≤ 50% capacity: Match the majority action from round r-1

### Critical Stock Situations
- If stock < 30% capacity: Always COOPERATE regardless of others' behavior
- If stock approaches 0: Emergency cooperation to attempt resource recovery

### Early Rounds (rounds 2-3)
Use simpler rules while gathering behavioral data:
- Round 2: COOPERATE if >40% cooperated in round 1, otherwise DEFECT
- Round 3: Use recent cooperation rate with lower threshold (0.3) to give others benefit of doubt

## Strategic Rationale

1. **Sustainability First**: Prevents resource collapse through emergency cooperation when stocks are critically low
2. **Conditional Cooperation**: Rewards cooperative behavior while not being exploitable by consistent defectors  
3. **Adaptive Thresholds**: Adjusts expectations based on resource health - more lenient when resources are endangered
4. **Graduated Response**: Doesn't immediately punish mixed behavior, uses tit-for-tat with periodic forgiveness
5. **Long-term Perspective**: Even in final round, considers resource health over pure self-interest

This strategy balances being "nice" (starting cooperatively), "retaliatory" (responding to defection), "forgiving" (periodic cooperation attempts), and "clear" (predictable responses to others' behavior patterns).
'''

description_COOPERATIVE_83 = '''
# Adaptive Tit-for-Tat with Forgiveness (ATTF) Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation. It balances the need to cooperate for long-term sustainability with the necessity to defend against defectors.

## Decision Rules

### Round 1: Cooperative Start
- **Action: COOPERATE**
- Rationale: Signal cooperative intent and give others the opportunity to reciprocate

### Rounds 2 to r-1: Adaptive Response with Forgiveness

**Primary Rule: Conditional Cooperation**
```pseudocode
cooperation_ratio = count_cooperators_last_round / n
stock_health = current_stock / capacity

IF cooperation_ratio >= 0.5 AND stock_health > 0.3:
    ACTION = COOPERATE
ELSE IF cooperation_ratio >= 0.3 AND stock_health > 0.5:
    ACTION = COOPERATE  
ELSE:
    ACTION = DEFECT
```

**Forgiveness Mechanism:**
```pseudocode
rounds_since_last_cooperation_attempt = count_rounds_since_last_C()

IF rounds_since_last_cooperation_attempt >= 3 AND current_round <= r-2:
    ACTION = COOPERATE  // Attempt to restart cooperation
```

### Final Round: Strategic Defection
- **Action: DEFECT**
- Rationale: No future consequences, so maximize immediate payoff

## Detailed Strategy Logic

### 1. **Cooperation Threshold System**
The strategy uses a dynamic threshold based on:
- **Majority Cooperation**: If ≥50% of players cooperated last round, cooperate
- **Minority Cooperation with Healthy Stock**: If ≥30% cooperated and stock >50% capacity, still cooperate
- This prevents premature abandonment of cooperation when stock is healthy

### 2. **Stock Health Monitoring**
```pseudocode
IF current_stock < 0.2 * capacity:
    // Emergency mode - defect to get something before collapse
    ACTION = DEFECT
ELSE IF current_stock < 0.3 * capacity AND cooperation_ratio < 0.5:
    // Critical mode - defect unless majority is cooperating
    ACTION = DEFECT
```

### 3. **Forgiveness and Recovery**
- After 3 consecutive rounds of defection, attempt cooperation once
- This allows recovery from mutual defection spirals
- Only applies in rounds 2 to r-2 to avoid exploitation in endgame

### 4. **Edge Case Handling**

**First Round:**
- Always cooperate to establish good intentions

**Last Round:**
- Always defect (no future retaliation possible)

**Stock Depletion:**
- If stock falls below 20% capacity, switch to pure defection for survival

**All-Defection Scenarios:**
- If everyone defected last round, still attempt cooperation once every 3 rounds to test for recovery opportunities

## Strategic Rationale

### Cooperative Alignment
1. **Starts cooperatively** and maintains cooperation when reciprocated
2. **Responsive to group behavior** - cooperates when others do
3. **Forgiving** - provides opportunities to restart cooperation
4. **Stock-conscious** - considers long-term sustainability

### Robustness Features
1. **Not exploitable** - defects against persistent defectors
2. **Adaptive thresholds** - adjusts to stock health and group behavior
3. **Emergency protocols** - switches to survival mode when stock critically low
4. **Endgame awareness** - defects in final round

### Tournament Considerations
- **Reciprocal with cooperators**: Will maintain mutual cooperation
- **Punitive to exploiters**: Won't be a consistent victim
- **Recovery-oriented**: Can rebuild cooperation after conflicts
- **Sustainable**: Balances immediate and long-term payoffs

This strategy should perform well against other cooperative strategies while being resilient against purely selfish opponents, making it suitable for a mixed tournament environment.
'''

description_COOPERATIVE_84 = '''
I'll design a cooperative strategy called "Adaptive Conditional Cooperator" that balances cooperation with sustainability and defensive measures.

## Strategy: Adaptive Conditional Cooperator (ACC)

### Core Philosophy
This strategy prioritizes long-term sustainability through cooperation while adapting to opponent behavior and protecting against exploitation. It uses stock health as a key indicator for strategic adjustments.

### Decision Rules

#### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Start with good faith cooperation to signal cooperative intent and establish a baseline for observing others

#### Rounds 2 to r-1: Conditional Cooperation with Stock Monitoring

```pseudocode
if current_round == 1:
    return C
    
if current_round == final_round:
    return handle_final_round()
    
// Calculate cooperation metrics
cooperation_rate = count_C_actions_last_round / n
my_cooperation_rate = my_C_actions / (current_round - 1)
stock_health = current_stock / capacity

// Main decision logic
if stock_health < 0.3:  // Critical stock level
    if cooperation_rate >= 0.7:
        return C  // Stock crisis but others cooperating
    else:
        return D  // Stock crisis and others defecting - survival mode
        
if cooperation_rate >= 0.6:  // Majority cooperating
    return C
    
if cooperation_rate >= 0.4:  // Mixed behavior
    if my_cooperation_rate >= 0.6:
        return C  // I've been cooperative, continue
    else:
        return tit_for_majority()  // Follow majority trend
        
if cooperation_rate < 0.4:  // Majority defecting
    if stock_health > 0.7 and my_cooperation_rate >= 0.8:
        return C  // High stock, I've been very cooperative - try to restart cooperation
    else:
        return D  // Protect against exploitation
```

#### Final Round: Strategic End Game
```pseudocode
function handle_final_round():
    cooperation_rate_last_3 = cooperation_rate_over_last_3_rounds()
    
    if cooperation_rate_last_3 >= 0.6:
        return C  // Reward consistent cooperation
    else:
        return D  // No future to worry about, maximize final payoff
```

### Key Features

1. **Stock Health Monitoring**: Uses stock/capacity ratio as a critical decision factor
   - Above 70%: Healthy - can afford to be generous
   - 30-70%: Moderate - balance cooperation with caution  
   - Below 30%: Critical - prioritize survival

2. **Cooperation Rate Thresholds**: 
   - ≥60%: High cooperation - reciprocate
   - 40-60%: Mixed - conditional response
   - <40%: Low cooperation - defensive mode

3. **Adaptive Memory**: Considers both recent behavior (last round) and historical patterns (overall rates)

4. **Anti-Exploitation Mechanism**: Won't cooperate indefinitely if being exploited, especially when stock is low

5. **Forgiveness with Conditions**: Will attempt to restart cooperation if stock is healthy and the player has maintained high cooperation rates

### Edge Case Handling

- **First Round**: Always cooperate to signal good intentions
- **Final Round**: Conditional cooperation based on recent history
- **Stock Depletion**: Switches to survival mode if stock becomes critically low
- **All Defect Situation**: Will defect to avoid being the only cooperator
- **Recovery Scenarios**: Attempts to rebuild cooperation when stock recovers

### Cooperative Alignment

This strategy embodies cooperation by:
- Starting with trust and good faith
- Rewarding cooperative behavior from others
- Prioritizing long-term sustainability over short-term gains
- Attempting to restart cooperation even after defection periods
- Only defecting defensively or when the resource is critically endangered

The strategy aims to maintain the common pool resource while being robust against exploitation, making it suitable for a tournament environment where opponent strategies are unknown.
'''

description_COOPERATIVE_85 = '''
# Adaptive Cooperative Resource Management Strategy (ACRMS)

## Core Philosophy
This strategy prioritizes long-term sustainability while adapting to opponents' behavior. It begins cooperatively but includes mechanisms to prevent exploitation and encourage collective cooperation.

## Decision Rules

### Phase 1: Cooperative Initialization (Rounds 1-2)
- **Round 1**: Always play C (establish cooperative intent)
- **Round 2**: Play C regardless of others' actions (give benefit of doubt)

### Phase 2: Adaptive Cooperation (Rounds 3 to r-2)
Apply the following decision tree each round:

```pseudocode
function decide_action(round, stock_level, history):
    cooperation_ratio = count_total_C_actions() / (n * (round - 1))
    stock_health = current_stock / capacity
    
    // Critical stock protection
    if stock_health < 0.3:
        if cooperation_ratio < 0.5:
            return D  // Emergency defection to get fair share
        else:
            return C  // Trust others are trying to recover
    
    // Standard cooperation threshold
    if cooperation_ratio >= 0.6:
        return C  // Reward high cooperation
    
    // Moderate cooperation - tit-for-tat with forgiveness
    if cooperation_ratio >= 0.4:
        recent_cooperation = count_C_in_last_2_rounds() / (n * 2)
        if recent_cooperation >= 0.5:
            return C
        else:
            // Gentle punishment: defect with 70% probability
            return random_choice([D, C], probabilities=[0.7, 0.3])
    
    // Low cooperation - defensive strategy
    else:
        my_recent_payoffs = sum_my_payoffs_last_3_rounds()
        avg_recent_payoffs = sum_all_payoffs_last_3_rounds() / (n * 3)
        
        if my_recent_payoffs < 0.8 * avg_recent_payoffs:
            return D  // I'm being exploited
        else:
            return C  // Try to rebuild cooperation
```

### Phase 3: Endgame Strategy (Last 2 rounds)

```pseudocode
function endgame_strategy(round, total_rounds, stock_level, history):
    cooperation_ratio = count_total_C_actions() / (n * (round - 1))
    stock_health = current_stock / capacity
    
    if round == total_rounds - 1:  // Second to last round
        if stock_health > 0.4 and cooperation_ratio > 0.5:
            return C  // Maintain cooperation if sustainable
        else:
            return D  // Secure resources before final round
    
    if round == total_rounds:  // Final round
        // Balance between getting fair share and not destroying remaining value
        if stock_health > 0.2:
            if cooperation_ratio > 0.7:
                return C  // Honor the cooperative relationship
            else:
                return D  // Grab final resources
        else:
            return D  // Stock is critically low anyway
```

## Key Features

### 1. **Graduated Response System**
- Responds proportionally to the level of cooperation observed
- Avoids harsh punishment that could trigger retaliation spirals
- Uses probabilistic defection to signal displeasure while maintaining some cooperation

### 2. **Stock Health Monitoring**
- Switches to emergency mode when stock falls below 30% capacity
- Balances individual survival with collective recovery
- Prevents total resource collapse through adaptive behavior

### 3. **Exploitation Protection**
- Tracks relative payoff performance to detect systematic exploitation
- Defends against free-riders while remaining open to renewed cooperation
- Uses recent performance windows to adapt quickly to changing dynamics

### 4. **Forgiveness and Recovery**
- Includes probabilistic cooperation even during punishment phases
- Monitors recent behavior more heavily than distant history
- Provides pathways back to full cooperation

### 5. **Endgame Awareness**
- Recognizes the different incentives in final rounds
- Balances immediate gains with maintaining cooperative reputation
- Considers stock sustainability even in terminal periods

## Edge Case Handling

- **First Round**: Always cooperate to establish good faith
- **Stock Depletion**: Emergency protocols prevent total collapse
- **Universal Defection**: Defensive measures while keeping recovery options open
- **Mixed Strategies**: Adapts to partial cooperation levels with graduated responses
- **Late Rounds**: Special handling for changing incentive structures

This strategy aims to create a stable cooperative equilibrium while protecting against exploitation and resource collapse. It's designed to work well against both purely cooperative and purely selfish opponents, while being particularly effective against other adaptive strategies.
'''

description_COOPERATIVE_86 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy aims to maintain the common pool resource while being responsive to opponent behavior. It balances cooperative ideals with practical considerations for sustainability and resilience against exploitation.

## Decision Rules

### Round 1: Unconditional Cooperation
- **Action**: Always play C
- **Rationale**: Signal cooperative intent and start building trust

### Rounds 2 to r-1: Adaptive Cooperation
Use a threshold-based system that considers both cooperation rates and resource sustainability:

```pseudocode
IF round_number == 1:
    play C
ELSE IF round_number == final_round:
    apply endgame_rule()
ELSE:
    cooperation_rate = count_cooperative_actions_last_round() / n
    current_stock_ratio = current_stock / capacity
    
    IF current_stock_ratio < 0.3:  // Critical resource depletion
        play C  // Always cooperate when resource is critically low
    ELSE IF cooperation_rate >= 0.6:  // Majority cooperating
        play C
    ELSE IF cooperation_rate >= 0.4:  // Mixed cooperation
        IF current_stock_ratio > 0.7:  // Resource is healthy
            play C  // Give benefit of doubt
        ELSE:
            play D  // Match partial defection
    ELSE:  // cooperation_rate < 0.4 (majority defecting)
        IF recent_improvement():  // Check if cooperation is increasing
            play C  // Encourage positive trend
        ELSE:
            play D  // Respond to widespread defection
```

### Final Round: Conditional Cooperation
```pseudocode
endgame_rule():
    cooperation_rate_last_round = count_cooperative_actions_last_round() / n
    IF cooperation_rate_last_round >= 0.5:
        play C  // Reward sustained cooperation
    ELSE:
        play D  // No future to protect, respond to defection
```

## Key Features

### 1. Threshold-Based Response
- **60%+ cooperation**: Always cooperate (reward good behavior)
- **40-59% cooperation**: Conditional cooperation based on resource health
- **<40% cooperation**: Generally defect but allow for forgiveness

### 2. Resource Conservation Priority
- When stock drops below 30% of capacity, always cooperate regardless of others' actions
- This prevents resource collapse and signals the critical importance of conservation

### 3. Trend Sensitivity
```pseudocode
recent_improvement():
    IF round_number < 3:
        return false
    last_round_coop = count_cooperative_actions_last_round() / n
    two_rounds_ago_coop = count_cooperative_actions_two_rounds_ago() / n
    return last_round_coop > two_rounds_ago_coop
```

### 4. Forgiveness Mechanism
- Even under low cooperation rates, will cooperate if detecting improvement trends
- Prevents spiral into mutual defection
- Gives opponents opportunity to return to cooperation

## Edge Case Handling

### Early Game (Rounds 1-2)
- Start with cooperation to establish good faith
- Begin adaptation from round 2 based on observed behavior

### Mid Game
- Full adaptive algorithm in effect
- Balance between cooperation incentives and exploitation protection

### End Game (Final Round)
- Consider that there's no future reciprocity
- But still reward sustained cooperation to signal consistency

### Resource Crisis (Stock < 30% capacity)
- Override all other rules to prioritize resource recovery
- Signal that resource sustainability transcends short-term gains

## Strategic Rationale

1. **Encourages Cooperation**: Rewards cooperative behavior with continued cooperation
2. **Prevents Exploitation**: Responds to widespread defection to avoid being exploited
3. **Resource Focused**: Prioritizes long-term resource sustainability over short-term gains
4. **Forgiveness Built-in**: Allows return to cooperation when opponents show improvement
5. **Clear Signals**: Actions clearly communicate expectations and responses to others

This strategy maintains a cooperative default while protecting against exploitation and prioritizing resource sustainability - the core challenge of common pool resource games.
'''

description_COOPERATIVE_87 = '''
# Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving to occasional defections. It recognizes that maintaining the common pool resource benefits everyone over time, but includes mechanisms to discourage exploitation.

## Decision Rules

### Primary Rule: Stock-Based Cooperation
```
IF current_stock >= capacity * 0.5:
    ACTION = C (Cooperate)
ELSE:
    ACTION = based on secondary rules
```

### Secondary Rule: Reciprocal Forgiveness
For rounds when stock < 50% capacity:
```
defection_rate = count_defectors_last_round / n

IF defection_rate <= 0.5:
    ACTION = C  // Forgive minority defectors
ELSE IF defection_rate <= 0.75:
    ACTION = C with probability 0.7, D with probability 0.3
ELSE:
    ACTION = D  // Protect against majority exploitation
```

### Tertiary Rule: Recovery Assistance
When stock is critically low (< 25% capacity):
```
IF count_consecutive_all_cooperate >= 2:
    ACTION = C  // Continue recovery pattern
ELSE IF last_round_defectors > n/2:
    ACTION = D  // Don't enable further depletion
ELSE:
    ACTION = C  // Give cooperation a chance
```

## Edge Case Handling

### First Round
- **Always Cooperate**: Start with good faith and optimal resource management
- Rationale: No history to base decisions on, and cooperation maximizes initial sustainability

### Last Round (when known)
- **Cooperate if others cooperated in previous round**: Don't abandon cooperation at the end
- **Defect only if >75% defected previously**: Protect against end-game exploitation
- Rationale: Maintain cooperative reputation even when facing end-game incentives

### Critical Stock Situations
When stock approaches zero:
```
IF stock <= capacity * 0.1:
    IF majority_cooperated_last_round:
        ACTION = C  // Help rebuild
    ELSE:
        ACTION = D  // Prevent exploitation of rebuilding efforts
```

## Pseudocode Implementation

```python
def sustainable_guardian_strategy(round_num, stock, capacity, n, history):
    # Edge case: First round
    if round_num == 1:
        return 'C'
    
    # Calculate stock percentage
    stock_percentage = stock / capacity
    
    # Get last round statistics
    last_actions = history[-1]['actions']
    defector_count = last_actions.count('D')
    defection_rate = defector_count / n
    
    # Primary rule: High stock threshold
    if stock_percentage >= 0.5:
        return 'C'
    
    # Critical stock handling
    if stock_percentage <= 0.1:
        if defection_rate <= 0.5:
            return 'C'  # Help rebuild
        else:
            return 'D'  # Protect against exploitation
    
    # Secondary rule: Reciprocal response
    if defection_rate <= 0.5:
        return 'C'  # Forgive minority defectors
    elif defection_rate <= 0.75:
        return 'C' if random() < 0.7 else 'D'  # Probabilistic response
    else:
        return 'D'  # Protect against majority exploitation
    
    # Default to cooperation
    return 'C'
```

## Strategic Rationale

1. **Stock Sustainability**: The 50% threshold ensures the resource can regenerate effectively, as the growth function is maximized around mid-capacity levels.

2. **Forgiveness Mechanism**: By tolerating minority defection, the strategy encourages others to return to cooperation rather than triggering downward spirals.

3. **Exploitation Protection**: The graduated response prevents systematic abuse while maintaining cooperative intent.

4. **Recovery Focus**: Special handling for low-stock situations prioritizes resource regeneration over immediate payoffs.

5. **Reputation Building**: Consistent cooperation in early rounds and good conditions builds trust with other cooperative strategies.

This strategy should perform well against other cooperative strategies while being robust enough to handle some exploitation attempts, ultimately maximizing long-term payoffs through sustainable resource management.
'''

description_COOPERATIVE_88 = '''
# Conditional Cooperative Strategy: "Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being willing to cooperate with others who demonstrate cooperative intent. It balances forgiveness with firm boundaries to prevent exploitation.

## Decision Rules

### Round 1 (Initial Move)
- **Always play C (Cooperate)**
- Rationale: Start optimistically to signal cooperative intent and give others the opportunity to reciprocate

### Rounds 2 to r-1 (Middle Game)
Use a **Conditional Cooperation with Graduated Response** system:

```pseudocode
if current_stock < capacity * 0.3:
    // Emergency conservation mode
    play C
else if current_stock < capacity * 0.6:
    // Stock stress - be more selective about cooperation
    if majority_cooperated_last_round():
        play C
    else:
        play D
else:
    // Healthy stock - normal reciprocal behavior
    if count_defectors_last_round() <= 1:
        play C
    else if count_defectors_last_round() == 2:
        // Give one round of punishment, then return to cooperation
        if punished_last_round:
            play C
        else:
            play D and set punished_last_round = true
    else:
        // Multiple defectors - defend against exploitation
        play D
```

### Round r (Final Round)
```pseudocode
if current_stock < capacity * 0.2:
    // Critical stock - always conserve
    play C
else if all_players_have_been_mostly_cooperative():
    // Reward consistent cooperators
    play C
else:
    // Mixed or hostile environment - protect yourself
    play D
```

## Supporting Functions

```pseudocode
function majority_cooperated_last_round():
    return count_cooperators_last_round > n/2

function count_defectors_last_round():
    return n - count_cooperators_last_round

function all_players_have_been_mostly_cooperative():
    for each player:
        cooperation_rate = player_cooperations / total_rounds_played
        if cooperation_rate < 0.6:
            return false
    return true
```

## Key Features

### 1. **Stock-Aware Decision Making**
- Becomes more cooperative as stock depletes to prevent collapse
- Uses stock thresholds (30%, 60% of capacity) to trigger different behavior modes

### 2. **Graduated Response System**
- Tolerates occasional defection (≤1 defector) while stock is healthy
- Provides measured punishment for moderate defection (2 defectors)
- Defends firmly against widespread defection (≥3 defectors)

### 3. **Forgiveness Mechanism**
- After punishing moderate defection, immediately returns to cooperation
- Tracks whether punishment was already administered to avoid over-punishment

### 4. **Emergency Conservation**
- When stock drops below 30% of capacity, always cooperates regardless of others' actions
- Prioritizes resource survival over immediate payoff maximization

### 5. **End-Game Considerations**
- In the final round, rewards consistent cooperators with cooperation
- Protects against last-round exploitation in hostile environments
- Still prioritizes conservation if stock is critically low

## Strategic Rationale

This strategy is designed to:
- **Encourage cooperation** through initial cooperation and reciprocation
- **Prevent tragedy of the commons** through emergency conservation protocols
- **Resist exploitation** while maintaining cooperative relationships where possible
- **Adapt to different opponent types** through graduated responses
- **Maintain resource sustainability** as the primary long-term objective

The strategy assumes that other LLM-generated strategies will likely have some level of sophistication and may include cooperative elements, making a purely cooperative approach with defensive mechanisms optimal for both individual and collective outcomes.
'''

description_COOPERATIVE_89 = '''
# Cooperative Strategy: "Adaptive Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It aims to establish and maintain cooperation through conditional reciprocity and strategic forgiveness.

## Decision Rules

### Primary Strategy Framework
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE  // Always start cooperatively
    
    if round == final_round:
        return handle_final_round(stock, history)
    
    if stock < critical_threshold:
        return COOPERATE  // Emergency conservation mode
    
    cooperation_score = calculate_cooperation_score(history, lookback_window)
    
    if cooperation_score >= cooperation_threshold:
        return COOPERATE
    else:
        return conditional_defect(cooperation_score, stock, round)
```

### Key Parameters
- **critical_threshold**: capacity × 0.3 (30% of maximum capacity)
- **cooperation_threshold**: 0.6 (60% of opponents cooperating)
- **lookback_window**: min(3, current_round - 1)
- **forgiveness_probability**: 0.2 (20% chance to cooperate despite low cooperation)

### Detailed Decision Logic

#### 1. First Round Behavior
```pseudocode
// Round 1: Always cooperate to signal cooperative intent
if round == 1:
    return COOPERATE
```

#### 2. Critical Stock Protection
```pseudocode
// When stock is critically low, always conserve
if current_stock < capacity * 0.3:
    return COOPERATE
```

#### 3. Cooperation Assessment
```pseudocode
function calculate_cooperation_score(history, window):
    recent_rounds = get_last_n_rounds(history, window)
    total_actions = 0
    cooperative_actions = 0
    
    for each round in recent_rounds:
        for each opponent_action in round:
            total_actions += 1
            if opponent_action == COOPERATE:
                cooperative_actions += 1
    
    return cooperative_actions / total_actions
```

#### 4. Conditional Response
```pseudocode
function conditional_defect(cooperation_score, stock, round):
    // Graduated response based on cooperation level
    if cooperation_score >= 0.4:
        // Moderate defection - strategic forgiveness with probability
        if random() < forgiveness_probability:
            return COOPERATE
        else:
            return DEFECT
    else:
        // Low cooperation detected - defect but with stock consideration
        if stock > capacity * 0.6:
            return DEFECT  // Safe to defect when stock is high
        else:
            return COOPERATE  // Preserve remaining stock
```

#### 5. Final Round Strategy
```pseudocode
function handle_final_round(stock, history):
    overall_cooperation = calculate_cooperation_score(history, total_rounds)
    
    if overall_cooperation >= 0.5:
        return COOPERATE  // Reward consistent cooperators
    else:
        if stock > capacity * 0.4:
            return DEFECT  // Extract value if opponents were uncooperative
        else:
            return COOPERATE  // Don't destroy what little remains
```

## Edge Case Handling

### Stock Recovery Scenarios
- When stock falls below 20% of capacity, switch to pure cooperation for 2 rounds to allow recovery
- Monitor recovery rate; if stock isn't recovering despite cooperation, maintain cooperative stance

### Opponent Behavior Patterns
- **All Defectors**: Cooperate when stock is low, defect when stock is high (>60% capacity)
- **Mixed Behavior**: Use graduated response based on cooperation percentage
- **Mostly Cooperators**: Maintain cooperation with occasional strategic defection when stock is very high

### Tie-Breaking Rules
- When cooperation score equals exactly 0.6: Cooperate
- When stock equals exactly the critical threshold: Cooperate
- When multiple conditions conflict: Prioritize stock preservation

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Initial Trust**: Always starts with cooperation to signal good intentions
2. **Sustainability Focus**: Prioritizes long-term resource preservation over short-term gains
3. **Conditional Reciprocity**: Rewards cooperative behavior while discouraging exploitation
4. **Strategic Forgiveness**: Occasionally cooperates even when others defect, allowing for recovery of cooperative equilibrium
5. **Crisis Response**: Switches to pure cooperation when the resource is critically endangered
6. **Graduated Punishment**: Uses proportional responses rather than harsh retaliation

The strategy aims to establish a cooperative equilibrium while being robust against exploitation, ensuring the common pool resource remains viable for all players across all rounds.
'''

description_COOPERATIVE_90 = '''
# Cooperative Strategy: "Sustainable Harvest with Forgiveness"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool resource while being cooperative by default, but includes mechanisms to protect against exploitation and encourage cooperation from others.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if stock <= capacity * 0.2:  // Critical stock level
        return emergency_mode(round, stock, history)
    
    if round == final_round:
        return final_round_logic(stock, history)
    
    return normal_mode(round, stock, history)
```

### Normal Mode Strategy:
```pseudocode
function normal_mode(round, stock, history):
    recent_defection_rate = calculate_recent_defection_rate(history, window=3)
    my_recent_cooperation_rate = my_cooperation_rate(history, window=5)
    
    // Base cooperative approach
    if recent_defection_rate <= 0.3:  // Mostly cooperative environment
        return COOPERATE
    
    // Tit-for-tat with forgiveness in hostile environment
    if recent_defection_rate > 0.7:  // Highly defective environment
        if random(0,1) < 0.8:  // 80% chance to defect back
            return DEFECT
        else:  // 20% chance to forgive and try cooperation
            return COOPERATE
    
    // Mixed environment - conditional cooperation
    if my_recent_cooperation_rate >= 0.6:  // I've been mostly cooperative
        if random(0,1) < 0.7:  // Mostly cooperate but occasionally defect
            return COOPERATE
        else:
            return DEFECT
    else:  // I've been defecting recently, try to return to cooperation
        return COOPERATE
```

### Emergency Mode (Low Stock):
```pseudocode
function emergency_mode(round, stock, history):
    // When stock is critically low, prioritize recovery
    defection_rate_last_round = last_round_defection_rate(history)
    
    if defection_rate_last_round > 0.5:
        // If others are still defecting despite crisis, protect myself
        if random(0,1) < 0.6:
            return DEFECT
        else:
            return COOPERATE  // Still try to lead by example
    else:
        // Others are cooperating in crisis, join them
        return COOPERATE
```

### Final Round Logic:
```pseudocode
function final_round_logic(stock, history):
    // In final round, consider the overall game state
    overall_cooperation_rate = calculate_overall_cooperation_rate(history)
    
    if stock >= capacity * 0.5:  // Good stock level
        if overall_cooperation_rate >= 0.5:
            return COOPERATE  // Reward good collective behavior
        else:
            return DEFECT  // Take advantage if others have been selfish
    else:  // Poor stock level
        return COOPERATE  // Don't make it worse
```

## Key Features

### 1. **Cooperative by Default**
- Always cooperates in round 1 to signal cooperative intent
- Maintains cooperation when others are mostly cooperative
- Returns to cooperation after brief retaliation periods

### 2. **Adaptive Punishment**
- Uses graduated response to defection rather than permanent retaliation
- Responds more strongly to systematic defection than occasional defection
- Includes forgiveness mechanism to break cycles of mutual defection

### 3. **Resource Conservation**
- Enters emergency mode when stock drops below 20% of capacity
- Prioritizes resource recovery over immediate payoffs in crisis situations
- Considers resource sustainability in final round decisions

### 4. **Learning and Memory**
- Uses sliding windows to weight recent behavior more heavily than distant history
- Tracks both opponent behavior and own behavior patterns
- Adapts strategy based on the cooperative/competitive nature of the group

### 5. **Stochastic Elements**
- Includes randomization to avoid being perfectly predictable
- Uses probabilistic responses to prevent exploitation while maintaining cooperative tendency

## Edge Case Handling

- **Round 1**: Always cooperate to signal good intentions
- **Final Round**: Balanced approach considering both resource state and group behavior
- **Critical Stock**: Emergency protocols prioritize resource recovery
- **All-Defect Environment**: Protective defection with periodic cooperation attempts
- **Mixed Signals**: Graduated response based on cooperation/defection ratios

This strategy aims to be genuinely cooperative while being robust against exploitation, promoting sustainable resource use, and encouraging others toward cooperation through a combination of reciprocity, forgiveness, and leadership by example.
'''

description_COOPERATIVE_91 = '''
# Adaptive Cooperative Strategy: "Sustainable Commons Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group behavior patterns. It starts cooperative and adapts based on collective actions, always seeking to maintain the commons while protecting against exploitation.

## Decision Rules

### Primary Decision Framework:
```
If round == 1:
    Action = COOPERATE
Else:
    cooperation_rate = count_cooperators_last_round / n
    stock_health = current_stock / capacity
    
    If cooperation_rate >= 0.5 AND stock_health >= 0.3:
        Action = COOPERATE
    Else if cooperation_rate >= 0.3 AND stock_health >= 0.5:
        Action = COOPERATE  
    Else if stock_health <= 0.2:
        Action = DEFECT  // Emergency extraction
    Else:
        Action = DEFECT  // Defensive defection
```

### Specific Edge Case Handling:

**First Round:**
- Always COOPERATE to signal cooperative intent and establish trust

**Last Round (round == r):**
- If stock_health >= 0.4: COOPERATE (maintain cooperation until the end)
- Else: DEFECT (extract remaining value when sustainability is lost)

**Critical Stock Situations:**
- If current_stock < capacity * 0.15: Always DEFECT (commons likely doomed, salvage what's possible)
- If current_stock >= capacity * 0.9: Always COOPERATE (commons healthy, maintain sustainability)

**Recovery Detection:**
- If stock has grown for 2 consecutive rounds AND cooperation_rate >= 0.4: COOPERATE
- This helps rebuild trust during recovery phases

## Strategic Rationale

### Cooperative Alignment:
1. **Default Cooperation**: Starts cooperative and maintains cooperation when others reciprocate
2. **Sustainability Focus**: Prioritizes long-term commons health over short-term gains
3. **Collective Benefit**: Rewards group cooperation with continued cooperation
4. **Trust Building**: Gives others opportunities to demonstrate cooperative intent

### Defensive Elements:
1. **Exploitation Protection**: Defects when facing persistent defection to avoid being a "sucker"
2. **Emergency Extraction**: Recognizes when commons collapse is inevitable and acts accordingly
3. **Adaptive Response**: Adjusts behavior based on observed group dynamics

### Key Thresholds Explained:
- **50% cooperation threshold**: Majority cooperation signals a cooperative group environment
- **30% stock health**: Below this, commons sustainability becomes questionable
- **30% cooperation + 50% stock**: Lower cooperation acceptable if commons remains healthy
- **20% stock emergency**: Critical threshold where immediate action needed

## Pseudocode Implementation:

```python
def choose_action(round_num, total_rounds, current_stock, capacity, 
                 n_players, action_history):
    
    # First round: always cooperate
    if round_num == 1:
        return "C"
    
    # Calculate metrics from last round
    last_round_actions = action_history[-1]
    cooperation_rate = last_round_actions.count("C") / n_players
    stock_health = current_stock / capacity
    
    # Critical stock situations
    if stock_health <= 0.15:
        return "D"  # Emergency extraction
    if stock_health >= 0.9:
        return "C"  # Maintain healthy commons
    
    # Last round logic
    if round_num == total_rounds:
        return "C" if stock_health >= 0.4 else "D"
    
    # Recovery detection (if we have enough history)
    if len(action_history) >= 3:
        recent_stocks = get_stock_history()  # Implementation detail
        if is_growing_trend(recent_stocks[-2:]) and cooperation_rate >= 0.4:
            return "C"
    
    # Main decision logic
    if cooperation_rate >= 0.5 and stock_health >= 0.3:
        return "C"
    elif cooperation_rate >= 0.3 and stock_health >= 0.5:
        return "C"
    elif stock_health <= 0.2:
        return "D"  # Emergency extraction
    else:
        return "D"  # Defensive defection

def is_growing_trend(stock_values):
    return len(stock_values) >= 2 and stock_values[-1] > stock_values[-2]
```

This strategy balances cooperative ideals with practical adaptation, seeking to maintain the commons while protecting against exploitation and responding appropriately to group dynamics.
'''

description_COOPERATIVE_92 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group behavior. It starts cooperatively and adapts based on observed patterns, with built-in mechanisms to recover cooperation even after periods of defection.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-2)
```
if round <= 2:
    action = COOPERATE
```
**Rationale:** Start with cooperation to signal cooperative intent and allow observation of opponent tendencies.

### 2. Main Strategy (Rounds 3 to r-2)
```
cooperation_rate = count_cooperators_last_round / n
stock_health = current_stock / capacity

if stock_health < 0.3:
    # Critical stock level - always cooperate to rebuild
    action = COOPERATE
    
elif cooperation_rate >= 0.6:
    # Majority cooperating - maintain cooperation
    action = COOPERATE
    
elif cooperation_rate >= 0.4:
    # Mixed behavior - cooperate with probability based on stock health
    if stock_health >= 0.7:
        action = COOPERATE
    else:
        action = COOPERATE with probability (stock_health + 0.3)
        
elif cooperation_rate >= 0.2:
    # Mostly defecting but some cooperation exists
    if stock_health >= 0.8:
        action = COOPERATE  # Try to rebuild cooperation when stock is high
    else:
        action = DEFECT  # Protect against exploitation
        
else:
    # Nearly everyone defecting
    if stock_health >= 0.9:
        action = COOPERATE  # Last attempt to restart cooperation
    else:
        action = DEFECT  # Prevent exploitation in low-stock scenarios
```

### 3. Penultimate Round (Round r-1)
```
if round == r-1:
    if cooperation_rate_last_round >= 0.5:
        action = COOPERATE  # Reward cooperative groups
    else:
        action = DEFECT  # Don't be exploited by last-minute defectors
```

### 4. Final Round (Round r)
```
if round == r:
    if cooperation_rate_overall >= 0.6:
        action = COOPERATE  # Final cooperative gesture for consistently cooperative groups
    else:
        action = DEFECT  # Standard end-game defection
```

## Key Features

### Forgiveness Mechanism
The strategy includes multiple opportunities to return to cooperation:
- Always cooperates when stock is critically low (< 30% capacity)
- Attempts cooperation restart when stock is very high (≥ 90% capacity)
- Uses probabilistic cooperation in mixed scenarios

### Stock Health Monitoring
```
stock_health_threshold_critical = 0.3
stock_health_threshold_high = 0.7
stock_health_threshold_very_high = 0.9
```

### Cooperation Rate Calculation
```
cooperation_rate = cooperators_last_round / total_players
cooperation_rate_overall = total_cooperation_instances / (total_rounds_so_far * total_players)
```

## Edge Case Handling

1. **First Round:** Always cooperate to establish good intentions
2. **Second Round:** Continue cooperation to observe initial group dynamics
3. **Critical Stock (< 30%):** Override all other rules and cooperate to prevent collapse
4. **Very High Stock (≥ 90%):** Attempt cooperation restart regardless of recent history
5. **Final Two Rounds:** Balance between rewarding cooperation and preventing exploitation

## Cooperative Alignment

This strategy is genuinely cooperative because it:

1. **Starts with trust** by cooperating initially
2. **Prioritizes sustainability** by always cooperating when stock is critically low
3. **Rewards cooperation** by maintaining cooperation when others do
4. **Offers forgiveness** through multiple restart mechanisms
5. **Balances group welfare** with self-protection against exploitation
6. **Considers long-term outcomes** rather than just immediate payoffs

The strategy recognizes that sustainable resource management requires cooperation, but it's not naively exploitable. It adapts to group behavior while maintaining a cooperative bias whenever the resource health allows it.
'''

description_COOPERATIVE_93 = '''
# Cooperative Strategy: "Adaptive Trust Builder"

## Core Philosophy
This strategy prioritizes long-term sustainability while building and maintaining cooperative relationships through clear signaling, forgiveness, and adaptive responses to the group's collective behavior.

## Decision Rules

### Primary Cooperation Condition
**Cooperate (C) if and only if:**
```
(stock_level >= sustainability_threshold) AND 
(cooperation_rate_recent >= minimum_trust_threshold)
```

Where:
- `sustainability_threshold = capacity * 0.3` (30% of maximum capacity)
- `minimum_trust_threshold = 0.4` (40% of players cooperated in recent rounds)

### Detailed Decision Logic

```pseudocode
function decide_action(round, stock_level, history):
    // Special case: First round - signal cooperation
    if round == 1:
        return C
    
    // Special case: Last round - maintain cooperation if others likely to
    if round == final_round:
        recent_coop_rate = calculate_cooperation_rate(last_3_rounds)
        if recent_coop_rate >= 0.5:
            return C
        else:
            return D
    
    // Crisis mode: Stock critically low
    if stock_level < capacity * 0.15:
        return D  // Self-preservation
    
    // Calculate recent cooperation metrics
    recent_coop_rate = calculate_cooperation_rate(last_5_rounds)
    my_recent_defections = count_my_defections(last_3_rounds)
    
    // Forgiveness mechanism: Return to cooperation after punishment
    if my_recent_defections >= 2 AND recent_coop_rate > 0.3:
        return C  // Attempt to rebuild cooperation
    
    // Main decision tree
    if stock_level >= capacity * 0.3:
        if recent_coop_rate >= 0.4:
            return C  // Reward group cooperation
        else if recent_coop_rate >= 0.2:
            // Mixed cooperation: be generous but cautious
            return C with probability 0.7
        else:
            return D  // Protect against exploitation
    else:
        // Stock moderately low (15-30% capacity)
        if recent_coop_rate >= 0.6:
            return C  // Trust high-cooperation group
        else:
            return D  // Conservative approach
```

## Key Components

### 1. Trust Building Phase (Early Rounds)
- Always cooperate in round 1 to signal cooperative intent
- Continue cooperating if others reciprocate (cooperation rate > 40%)
- Build reputation as a reliable cooperator

### 2. Adaptive Response System
- **High Trust Environment** (60%+ cooperation): Maintain cooperation even with moderate stock levels
- **Medium Trust Environment** (20-60% cooperation): Match group behavior with slight bias toward cooperation
- **Low Trust Environment** (<20% cooperation): Protect against exploitation while leaving door open for cooperation

### 3. Stock Conservation Protocol
- **Crisis Threshold** (Stock < 15% capacity): Switch to defection for survival
- **Caution Threshold** (Stock 15-30% capacity): Require higher cooperation rates to justify cooperation
- **Sustainable Threshold** (Stock > 30% capacity): Default to cooperation if minimum trust exists

### 4. Forgiveness Mechanism
- After 2+ consecutive defections, attempt to rebuild cooperation if group shows any cooperative tendency (>30% cooperation rate)
- Prevents permanent breakdown of cooperation due to temporary conflicts

### 5. Endgame Handling
- In final round, cooperate only if recent cooperation rate is above 50%
- Balances final-round temptation with maintaining cooperative reputation

## Strategic Rationale

1. **Clear Signaling**: Consistent cooperation in good conditions signals trustworthiness
2. **Conditional Cooperation**: Links cooperation to both resource sustainability and group behavior
3. **Proportional Response**: Matches defection levels without being overly punitive
4. **Crisis Management**: Protects against resource collapse while maintaining cooperative potential
5. **Reputation Building**: Establishes pattern that encourages others to cooperate
6. **Forgiveness**: Prevents cooperation spirals while maintaining standards

This strategy balances the cooperative ideal with practical considerations of sustainability and protection against exploitation, making it robust across various opponent strategy mixes while maintaining its fundamentally cooperative nature.
'''

description_COOPERATIVE_94 = '''
# Conditional Cooperator with Forgiveness Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation while being resilient to defection attempts. It balances the need to maximize long-term collective welfare with protection against exploitation.

## Strategy Overview
The strategy operates in three phases with different behavioral rules based on game progression and opponent behavior patterns.

## Decision Rules

### Phase 1: Establishment Phase (Rounds 1-3 or first 30% of rounds, whichever is smaller)
- **Round 1**: Always COOPERATE (signal cooperative intent)
- **Rounds 2-3**: COOPERATE if stock level ≥ 0.6 × capacity, otherwise DEFECT

### Phase 2: Adaptive Phase (Middle rounds)
- **Cooperation Threshold**: Calculate cooperation ratio = (number of total C actions by all players) / (total actions so far)
- **Stock Health Check**: Current stock / capacity ratio
- **Decision Logic**:
  ```pseudocode
  if stock_ratio < 0.3:
      return DEFECT  // Emergency resource preservation
  elif cooperation_ratio >= 0.6 and stock_ratio >= 0.5:
      return COOPERATE  // Reward good collective behavior
  elif cooperation_ratio >= 0.4 and stock_ratio >= 0.4:
      if last_round_defectors <= n/2:
          return COOPERATE  // Conditional cooperation
      else:
          return DEFECT  // Punish excessive defection
  else:
      return DEFECT  // Default to self-preservation
  ```

### Phase 3: Endgame Phase (Last 20% of rounds)
- **Forgiveness Window**: If more than 75% of total game has shown cooperation ratio > 0.5, continue cooperating
- **Resource Crisis**: If stock < 0.25 × capacity, DEFECT to preserve remaining resources
- **Final Round**: DEFECT (no future consequences)

## Edge Case Handling

### First Round
Always COOPERATE to signal cooperative intent and establish trust baseline.

### Last Round
Always DEFECT since there are no future consequences and rational players will likely defect.

### Stock Depletion Crisis
If stock falls below 25% of capacity:
- Switch to DEFECT until stock recovers above 40% of capacity
- This prevents complete resource collapse

### All-Defection Scenario
If all other players defected in the previous round:
- DEFECT for 1-2 rounds as punishment
- Then attempt to re-establish cooperation by playing COOPERATE once
- Monitor response and adapt accordingly

### High Cooperation Scenario
If cooperation ratio has been above 80% for the last 3 rounds:
- Continue COOPERATE to maintain positive cycle
- Only switch if stock health becomes critical

## Cooperative Alignment

### Long-term Sustainability
- Prioritizes actions that maintain stock above critical thresholds
- Rewards collective cooperation with continued cooperation
- Attempts to rebuild cooperation after punishment phases

### Reciprocity Mechanisms
- Responds positively to high cooperation rates
- Provides measured punishment for defection
- Includes forgiveness to re-establish cooperation

### Resource Stewardship
- Emergency protocols prevent complete resource depletion
- Balances individual gains with collective welfare
- Adapts strategy based on resource health

## Pseudocode Summary

```pseudocode
function decide_action(round, stock, capacity, history, n, total_rounds):
    stock_ratio = stock / capacity
    phase = determine_phase(round, total_rounds)
    cooperation_ratio = calculate_cooperation_ratio(history)
    
    // Critical resource protection
    if stock_ratio < 0.25:
        return DEFECT
    
    // Phase-specific logic
    if phase == "establishment":
        if round == 1:
            return COOPERATE
        return COOPERATE if stock_ratio >= 0.6 else DEFECT
    
    elif phase == "adaptive":
        if stock_ratio < 0.3:
            return DEFECT
        elif cooperation_ratio >= 0.6 and stock_ratio >= 0.5:
            return COOPERATE
        elif cooperation_ratio >= 0.4 and stock_ratio >= 0.4:
            last_defectors = count_last_round_defectors(history)
            return COOPERATE if last_defectors <= n/2 else DEFECT
        else:
            return DEFECT
    
    elif phase == "endgame":
        if round == total_rounds:
            return DEFECT
        elif cooperation_ratio > 0.5 and stock_ratio > 0.25:
            return COOPERATE
        else:
            return DEFECT
```

This strategy balances cooperative intentions with practical adaptation to opponent behavior and resource constraints, aiming to achieve sustainable long-term outcomes while protecting against exploitation.
'''

description_COOPERATIVE_95 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperative and maintains cooperation as long as the pool remains healthy and opponents show reasonable cooperative behavior.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock_level, history):
    // Edge case: First round - always cooperate
    if round == 1:
        return C
    
    // Edge case: Last round with depleted stock
    if round == r and stock_level < capacity * 0.2:
        return D  // Emergency extraction
    
    // Main decision tree
    stock_health = stock_level / capacity
    
    if stock_health >= 0.7:
        return cooperative_mode(history)
    elif stock_health >= 0.3:
        return cautious_mode(history)
    else:
        return survival_mode(history)

function cooperative_mode(history):
    recent_defection_rate = count_defections_last_3_rounds() / (3 * n)
    
    if recent_defection_rate <= 0.3:
        return C
    else:
        return conditional_cooperate(history)

function cautious_mode(history):
    recent_defection_rate = count_defections_last_2_rounds() / (2 * n)
    my_recent_cooperation_rate = my_cooperations_last_3_rounds() / 3
    
    if recent_defection_rate <= 0.4 and my_recent_cooperation_rate >= 0.6:
        return C
    elif recent_defection_rate >= 0.7:
        return D
    else:
        return tit_for_majority_tat()

function survival_mode(history):
    if stock_level > 0 and round < r:
        // Try to preserve remaining stock
        if majority_cooperated_last_round():
            return C
        else:
            return D
    else:
        return D

function conditional_cooperate(history):
    // Forgiveness mechanism: cooperate if showing improvement
    current_round_defections = count_defections_this_round()
    previous_round_defections = count_defections_previous_round()
    
    if current_round_defections < previous_round_defections:
        return C  // Reward improvement
    elif my_cooperations_last_2_rounds() == 2:
        return D  // Avoid exploitation after extended cooperation
    else:
        return C

function tit_for_majority_tat():
    if majority_defected_last_round():
        return D
    else:
        return C
```

## Key Components

### 1. Stock Health Assessment
- **Healthy (≥70% capacity)**: Focus on cooperation and building trust
- **Moderate (30-70% capacity)**: Balanced approach with increased caution
- **Critical (<30% capacity)**: Survival-focused decisions

### 2. Behavioral Adaptation
- **Defection Rate Monitoring**: Track opponent cooperation levels over recent rounds
- **Forgiveness Mechanism**: Reward improvements in opponent behavior
- **Anti-Exploitation**: Prevent being taken advantage of after extended cooperation

### 3. Edge Case Handling
- **Round 1**: Always cooperate to signal cooperative intent
- **Final Round**: Consider emergency extraction if stock is critically low
- **Stock Depletion**: Switch to preservation mode when stock becomes scarce

## Strategic Rationale

### Cooperative Alignment
- Starts with cooperation and maintains it when sustainable
- Rewards collective good behavior with continued cooperation
- Implements forgiveness to encourage opponents back to cooperation

### Adaptive Responsiveness
- Adjusts strategy based on both stock health and opponent behavior
- Prevents exploitation while maintaining cooperative stance
- Balances individual survival with collective benefit

### Long-term Sustainability
- Prioritizes stock preservation in critical situations
- Uses graduated responses rather than immediate retaliation
- Considers the dynamic nature of stock regeneration in decision-making

This strategy aims to foster cooperation while protecting against exploitation, adapting its cooperative stance based on the health of the shared resource and the behavior patterns of other players.
'''

description_COOPERATIVE_96 = '''
# Adaptive Cooperative Strategy (ACS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior patterns. It starts cooperative but adapts based on the collective cooperation level observed.

## Strategy Overview

The strategy operates in three phases based on cooperation rates and implements a "cooperative threshold" system to balance sustainability with competitiveness.

## Decision Rules

### Phase 1: Trust Building (First 25% of rounds)
- **Always Cooperate** in the first round
- **Continue Cooperating** for the first ⌈r/4⌉ rounds regardless of others' actions
- **Rationale**: Establish cooperative intent and allow time for mutual cooperation to emerge

### Phase 2: Adaptive Cooperation (Middle rounds)
Calculate the **cooperation rate** after each round:
```
cooperation_rate = (total_C_actions) / (total_actions_so_far)
```

**Decision Rule:**
- If `cooperation_rate ≥ 0.5`: **Cooperate**
- If `cooperation_rate < 0.5`: **Defect**

**Additional Conditions:**
- If stock falls below `capacity/4`: **Always Defect** (survival mode)
- If all other players defected in the previous round: **Defect** once as punishment, then return to normal rules

### Phase 3: Endgame (Last 15% of rounds)
In the final ⌈0.15r⌉ rounds:

**If current cooperation_rate ≥ 0.6:**
- Continue cooperating to maximize collective payoff

**If current cooperation_rate < 0.6:**
- **Defect** to secure remaining resources before game ends

**Stock Emergency Override:**
- If stock < `capacity/8`: **Always Defect** regardless of cooperation rates

## Pseudocode

```python
def decide_action(round_num, total_rounds, current_stock, capacity, 
                 action_history, my_player_id, num_players):
    
    # Calculate phase boundaries
    trust_phase_end = max(1, total_rounds // 4)
    endgame_start = total_rounds - max(1, int(0.15 * total_rounds))
    
    # Emergency stock check
    if current_stock < capacity / 8:
        return 'D'
    
    # Phase 1: Trust Building
    if round_num <= trust_phase_end:
        return 'C'
    
    # Calculate cooperation rate from history
    if round_num > 1:
        total_actions = len(action_history) * num_players
        total_cooperations = sum(1 for round_actions in action_history 
                               for action in round_actions if action == 'C')
        cooperation_rate = total_cooperations / total_actions
        
        # Check if all others defected last round (punishment trigger)
        if len(action_history) > 0:
            last_round = action_history[-1]
            others_last_round = [last_round[i] for i in range(num_players) 
                               if i != my_player_id]
            all_others_defected = all(action == 'D' for action in others_last_round)
    else:
        cooperation_rate = 1.0  # Default assumption
        all_others_defected = False
    
    # Phase 3: Endgame
    if round_num >= endgame_start:
        if cooperation_rate >= 0.6:
            return 'C'
        else:
            return 'D'
    
    # Phase 2: Adaptive Cooperation
    # Critical stock threshold
    if current_stock < capacity / 4:
        return 'D'
    
    # Punishment for universal defection
    if all_others_defected and round_num > trust_phase_end + 1:
        return 'D'
    
    # Main decision rule
    if cooperation_rate >= 0.5:
        return 'C'
    else:
        return 'D'
```

## Key Features

1. **Forgiving Start**: Always cooperative initially to encourage mutual cooperation
2. **Responsive Adaptation**: Adjusts based on observed group behavior
3. **Stock Protection**: Has emergency protocols when resources become critically low
4. **Punishment Mechanism**: Briefly retaliates against universal defection
5. **Endgame Awareness**: Recognizes that cooperation becomes less likely near the end
6. **Threshold-Based**: Uses clear, calculable thresholds rather than complex heuristics

## Strategic Rationale

- **Sustainability Focus**: The 50% cooperation threshold ensures resources aren't depleted too quickly
- **Competitive Balance**: Doesn't get exploited by consistently defecting opponents
- **Adaptive Nature**: Can shift between cooperative and competitive modes based on the game state
- **Clear Signaling**: Consistent behavior patterns that other cooperative strategies can recognize and reciprocate

This strategy should perform well against other cooperative strategies while protecting against exploitation by purely selfish strategies.
'''

description_COOPERATIVE_97 = '''
# Adaptive Tit-for-Tat with Forgiveness (ATTF) Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperatively but adapts based on the collective actions of other players, with built-in forgiveness mechanisms to recover from mutual defection cycles.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge Cases First
    if round == 1:
        return COOPERATE
    
    if round == r:  // Last round
        if stock < n:  // Insufficient for all to cooperate meaningfully
            return DEFECT
        else:
            return COOPERATE  // Maintain cooperative reputation
    
    // Calculate cooperation metrics from last round
    last_round_cooperators = count_cooperators(history[round-1])
    cooperation_rate = last_round_cooperators / (n-1)  // Exclude self
    
    // Stock sustainability check
    if stock < n * 2:  // Critical threshold
        if cooperation_rate >= 0.5:
            return COOPERATE  // Try to rebuild with willing partners
        else:
            return DEFECT     // Protect against exploitation
    
    // Main adaptive logic
    if cooperation_rate >= 0.7:
        return COOPERATE  // High cooperation - reciprocate
    
    else if cooperation_rate >= 0.3:
        // Mixed behavior - use forgiveness-based tit-for-tat
        if was_exploited_last_round(history[round-1]):
            return try_forgiveness(round, history)
        else:
            return COOPERATE
    
    else:  // cooperation_rate < 0.3
        // Low cooperation environment
        return conditional_defect(round, stock, history)
```

### Supporting Functions:

```pseudocode
function was_exploited_last_round(last_round_history):
    // Returns true if I cooperated but majority defected
    my_action = last_round_history.my_action
    others_defect_rate = count_defectors(last_round_history) / (n-1)
    return (my_action == COOPERATE) and (others_defect_rate > 0.5)

function try_forgiveness(round, history):
    // Implement graduated forgiveness
    recent_defections = count_my_exploitations_in_last_k_rounds(history, k=3)
    
    if recent_defections <= 1:
        return COOPERATE  // First forgiveness
    else if recent_defections == 2 and random() < 0.5:
        return COOPERATE  // Second chance with 50% probability
    else:
        return DEFECT     // Multiple exploitations - respond firmly

function conditional_defect(round, stock, history):
    // Even in low-cooperation environment, occasionally test for cooperation
    rounds_remaining = r - round
    
    if rounds_remaining > 3 and round % 4 == 0:
        return COOPERATE  // Periodic cooperation signal
    else if stock > capacity * 0.8:
        return COOPERATE  // Abundant resources - lead by example
    else:
        return DEFECT
```

## Edge Case Handling

1. **First Round**: Always cooperate to establish cooperative intent
2. **Last Round**: Cooperate if stock permits, defect only if resources are critically low
3. **Stock Depletion**: When stock falls below 2n, prioritize cooperation if others are cooperative
4. **All-Defect Scenarios**: Periodically test for cooperation recovery every 4 rounds
5. **High Stock**: When stock > 80% capacity, bias toward cooperation regardless of history

## Cooperative Features

1. **Starts Cooperative**: Demonstrates good faith from the beginning
2. **Forgiveness Mechanism**: Gives second chances to prevent permanent mutual defection
3. **Periodic Cooperation Signals**: Even in hostile environments, tests for cooperation opportunities
4. **Resource Conservation**: Considers stock levels in decision-making to maintain long-term viability
5. **Graduated Response**: Doesn't immediately punish single defections, allowing for mistakes or strategic variations

## Strategic Rationale

This strategy balances several key objectives:
- **Sustainability**: Considers stock levels to avoid resource collapse
- **Reciprocity**: Responds to others' cooperation levels
- **Resilience**: Includes mechanisms to recover from mutual defection
- **Leadership**: Occasionally cooperates even when others don't, to restart cooperation
- **Protection**: Defends against systematic exploitation while remaining fundamentally cooperative

The strategy is designed to work well with other cooperative strategies while being robust enough to handle mixed or adversarial opponents, always keeping the long-term health of the common pool as a priority.
'''

description_COOPERATIVE_98 = '''
# Adaptive Cooperative Strategy with Trust Building

## Core Philosophy
This strategy prioritizes long-term sustainability while building trust through demonstrable cooperation, but includes protective mechanisms against exploitation.

## Decision Rules

### Round 1: Pure Cooperation Signal
- **Action**: Always COOPERATE
- **Rationale**: Establish cooperative intent from the start

### Rounds 2 to r-1: Adaptive Cooperation with Protection
```pseudocode
if round == 2:
    if all_players_cooperated_last_round:
        return COOPERATE
    else:
        return DEFECT  // Immediate punishment for early defection

if current_stock < capacity * 0.3:  // Critical stock level
    return COOPERATE  // Emergency conservation mode

cooperation_ratio = count_cooperators_last_round / n
my_recent_defections = count_my_defections_last_3_rounds

if cooperation_ratio >= 0.75:  // High cooperation environment
    return COOPERATE
    
elif cooperation_ratio >= 0.5:  // Mixed environment
    if my_recent_defections <= 1:
        return COOPERATE  // Stay cooperative if I haven't defected much
    else:
        return DEFECT    // Match the environment
        
else:  // Low cooperation environment (< 50% cooperating)
    if cooperation_ratio >= 0.25 AND current_stock > capacity * 0.6:
        return COOPERATE  // Attempt to rebuild cooperation when safe
    else:
        return DEFECT    // Protect against exploitation
```

### Final Round: Conditional Cooperation
```pseudocode
if current_stock < capacity * 0.2:
    return COOPERATE  // Don't destroy what little remains
    
elif average_cooperation_ratio_last_3_rounds >= 0.6:
    return COOPERATE  // Reward sustained cooperation
    
else:
    return DEFECT    // Standard end-game defection
```

## Key Features

### 1. **Trust Building Phase** (Rounds 1-3)
- Start with pure cooperation to signal intent
- Provide immediate feedback for defection in round 2
- Establish pattern recognition by round 3

### 2. **Emergency Conservation Mode**
- Automatically cooperate when stock falls below 30% of capacity
- Prioritizes group survival over individual gains
- Prevents complete resource collapse

### 3. **Adaptive Response System**
- Responds to overall cooperation levels in the group
- Maintains cooperation when others do (≥75% cooperation rate)
- Gradually shifts strategy based on group behavior patterns

### 4. **Exploitation Protection**
- Defects in low-cooperation environments (<25% cooperation)
- Limits own defection frequency to maintain credibility
- Balances cooperation with self-protection

### 5. **Endgame Handling**
- Avoids pure end-game defection that destroys remaining resources
- Rewards groups that maintained cooperation throughout
- Provides final opportunity for mutual benefit

## Strategic Rationale

1. **Sustainability Focus**: The emergency conservation mode ensures the group doesn't completely destroy the resource, which benefits everyone long-term.

2. **Clear Signaling**: Early cooperation signals cooperative intent, while measured retaliation shows the strategy won't be exploited.

3. **Forgiveness with Memory**: The strategy can rebuild cooperation after conflicts but remembers patterns of behavior.

4. **Group-Responsive**: Adapts to the cooperative culture of the specific group rather than imposing rigid rules.

5. **Endgame Wisdom**: Recognizes that mutual cooperation in the final round can still provide value, especially if resources remain substantial.

This strategy aims to foster cooperative equilibria while protecting against exploitation, ultimately maximizing both individual and group welfare over the full game duration.
'''

description_COOPERATIVE_99 = '''
# Adaptive Conditional Cooperator Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while protecting against exploitation through adaptive punishment and forgiveness mechanisms.

## Decision Rules

### Phase 1: Cooperative Opening (Round 1)
- **Action**: Always COOPERATE
- **Rationale**: Signal cooperative intent and test opponents' willingness to sustain the resource

### Phase 2: Adaptive Response (Rounds 2 to r-1)

**Primary Rule - Conditional Cooperation:**
```
IF (cooperation_rate_last_round >= cooperation_threshold):
    ACTION = COOPERATE
ELSE:
    ACTION = DEFECT
```

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.5, (stock_current / capacity) * 0.8)
```

This means:
- When stock is healthy (≥62.5% of capacity): Require ≥50% cooperation rate
- When stock is depleted: Require higher cooperation rate (up to 80% when stock is very low)

**Stock Emergency Override:**
```
IF (stock_current < capacity * 0.3):  // Stock below 30%
    IF (cooperation_rate_last_round < 0.8):
        ACTION = DEFECT  // Punish non-cooperators harshly when resource is endangered
    ELSE:
        ACTION = COOPERATE  // Reward high cooperation during crisis
```

### Phase 3: Endgame (Final Round r)

**Final Round Logic:**
```
IF (stock_current >= capacity * 0.7):  // Healthy stock
    ACTION = COOPERATE  // Leave resource in good state
ELSE IF (average_cooperation_rate_all_rounds >= 0.6):  // Others have been mostly cooperative
    ACTION = COOPERATE  // Reciprocate overall cooperation
ELSE:
    ACTION = DEFECT  // Extract remaining value if others haven't cooperated
```

## Key Features

### 1. Stock-Aware Thresholds
- Cooperation requirements become stricter as stock depletes
- Protects against resource collapse during critical periods

### 2. Graduated Response
- Not purely tit-for-tat; considers overall cooperation levels
- Allows for some defection without immediate retaliation if majority cooperates

### 3. Crisis Management
- Emergency override when stock falls below 30% of capacity
- Demands high cooperation (80%+) to continue cooperating during crises

### 4. Endgame Consideration
- Final round behavior depends on both resource state and historical cooperation
- Avoids last-round defection if resource is healthy and others have cooperated

## Edge Cases

### All Opponents Always Defect
- Will defect after round 1 due to low cooperation rates
- Protects against being exploited while resource depletes

### All Opponents Always Cooperate
- Will cooperate throughout, maintaining sustainable resource levels
- Achieves optimal collective outcome

### Mixed Strategies
- Adapts cooperation threshold based on stock levels
- More forgiving when resource is abundant, stricter when depleted

### Stock Depletion Scenarios
- If stock approaches zero, strategy becomes more punitive
- Requires very high cooperation rates to continue cooperating

## Pseudocode Summary

```python
def decide_action(round_num, stock_current, capacity, history, n, r):
    if round_num == 1:
        return COOPERATE
    
    # Calculate cooperation rate from last round
    last_round_cooperators = count_cooperators(history[-1])
    cooperation_rate = last_round_cooperators / n
    
    # Emergency stock protection
    if stock_current < capacity * 0.3:
        if cooperation_rate < 0.8:
            return DEFECT
        else:
            return COOPERATE
    
    # Final round special logic
    if round_num == r:
        if stock_current >= capacity * 0.7:
            return COOPERATE
        elif overall_cooperation_rate(history) >= 0.6:
            return COOPERATE
        else:
            return DEFECT
    
    # Standard adaptive response
    threshold = max(0.5, (stock_current / capacity) * 0.8)
    
    if cooperation_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

This strategy balances cooperation with protection against exploitation, adapts to resource scarcity, and maintains focus on long-term sustainability while being competitive against various opponent strategies.
'''

description_COOPERATIVE_100 = '''
# Cooperative Strategy: "Conditional Cooperation with Forgiveness"

## Strategy Overview
This strategy aims to establish and maintain cooperation while being robust against defection and capable of recovery. It balances cooperative intentions with practical considerations for long-term resource sustainability.

## Decision Rules

### Core Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if stock <= capacity * 0.1:  // Emergency threshold (10% of capacity)
        return COOPERATE
    
    if round == final_round:
        return handle_final_round(history)
    
    defection_rate = calculate_recent_defection_rate(history, look_back=3)
    
    if defection_rate >= 0.75:  // 75% or more defecting recently
        return DEFECT  // Defensive defection
    
    elif defection_rate >= 0.5:  // 50-74% defecting
        return COOPERATE_WITH_PROBABILITY(0.7)  // Mostly cooperate but hedge
    
    else:  // Less than 50% defecting
        return COOPERATE
```

## Detailed Strategy Components

### 1. Opening Move
- **Always cooperate in round 1** to signal cooperative intent and establish a foundation for mutual cooperation.

### 2. Stock Emergency Protocol
- **Cooperate when stock ≤ 10% of capacity** regardless of opponent behavior
- This prevents complete resource collapse and maintains long-term viability
- Prioritizes collective survival over short-term individual gains

### 3. Adaptive Response System
Monitor recent opponent behavior (last 3 rounds) and respond proportionally:

- **High defection (≥75%)**: Defect to avoid exploitation while others drain the resource
- **Medium defection (50-74%)**: Cooperate with 70% probability to encourage cooperation while protecting against heavy exploitation
- **Low defection (<50%)**: Full cooperation to maintain and reward cooperative environment

### 4. Final Round Handling
```pseudocode
function handle_final_round(history):
    if stock > capacity * 0.5:  // Abundant resources
        if overall_cooperation_rate(history) >= 0.6:
            return COOPERATE  // Reward good cooperation
        else:
            return DEFECT  // Take advantage if others were uncooperative
    else:  // Scarce resources
        return COOPERATE  // Preserve what's left
```

### 5. Forgiveness Mechanism
- Strategy doesn't hold permanent grudges
- Uses only recent history (3 rounds) for decisions, allowing recovery from temporary defection periods
- This enables the group to return to cooperation after conflicts

## Key Features

### Cooperative Alignment:
- **Default to cooperation**: The baseline action is cooperation
- **Emergency cooperation**: Forces cooperation to prevent resource collapse
- **Forgiveness**: Allows opponents to return to cooperative relationships

### Strategic Robustness:
- **Exploitation protection**: Defects when facing persistent high defection rates
- **Graduated response**: Doesn't immediately escalate to full defection
- **Context awareness**: Considers both stock levels and opponent behavior

### Long-term Thinking:
- Prioritizes resource sustainability over short-term gains
- Maintains cooperation even in final rounds when stock is low
- Uses recent rather than complete history to allow strategy evolution

## Rationale

This strategy is designed to:
1. **Signal cooperation** clearly from the start
2. **Encourage mutual cooperation** through consistent cooperative behavior
3. **Protect against exploitation** without being overly defensive
4. **Maintain resource sustainability** through emergency protocols
5. **Allow recovery** from conflict periods through forgiveness
6. **Adapt to opponent strategies** while maintaining cooperative principles

The strategy assumes that other LLMs may also implement cooperative or conditionally cooperative strategies, and aims to establish stable, mutually beneficial relationships while remaining robust against more aggressive approaches.
'''

description_COOPERATIVE_101 = '''
# Cooperative Strategy: "Adaptive Guardian"

## Core Philosophy
This strategy balances cooperation with sustainability, prioritizing long-term collective welfare while maintaining resilience against exploitation. It operates on the principle that maintaining the resource pool benefits everyone, but must adapt when others consistently defect.

## Decision Rules

### Primary Rule: Conditional Cooperation
**Cooperate (C)** if ALL of the following conditions are met:
1. **Stock Health**: Current stock ≥ capacity × 0.4 (resource isn't critically depleted)
2. **Majority Cooperation**: In the previous round, at least ⌈n/2⌉ players cooperated
3. **Not Terminal Exploitation**: We're not in the final round OR the stock can survive one more round of current behavior patterns

**Defect (D)** otherwise.

### Detailed Logic:

```pseudocode
function decide_action(current_round, stock, history, n, r, capacity):
    // Edge Case: First Round
    if current_round == 1:
        return C  // Start cooperatively
    
    // Calculate stock health
    stock_health_ratio = stock / capacity
    
    // Count cooperators in previous round
    prev_cooperators = count_cooperators(history[current_round - 1])
    cooperation_threshold = ceil(n / 2)
    
    // Check if stock is critically low
    if stock_health_ratio < 0.4:
        return D  // Emergency self-preservation
    
    // Final round special handling
    if current_round == r:
        // If others have been mostly cooperative, stay cooperative
        if prev_cooperators >= cooperation_threshold:
            return C
        else:
            return D  // Last chance to get something
    
    // Standard cooperative condition
    if prev_cooperators >= cooperation_threshold:
        return C
    else:
        return D  // Respond to defection with defection
```

## Edge Case Handling

### First Round
- Always **Cooperate** to signal cooperative intent and establish a positive baseline

### Last Round  
- **Cooperate** if the majority cooperated in the previous round (maintaining consistency)
- **Defect** if cooperation has broken down (avoiding exploitation in the final moment)

### Critical Stock Depletion (< 40% capacity)
- **Defect** regardless of others' behavior (survival mode)
- This prevents the strategy from being overly altruistic when the resource faces collapse

### Early Rounds Pattern Recognition
- After round 2, if stock has dropped below 60% capacity due to widespread defection, become more defensive
- Require sustained cooperation (2+ consecutive rounds of majority cooperation) to return to full cooperation

## Cooperative Alignment

This strategy is fundamentally cooperative because:

1. **Default Cooperation**: Starts cooperatively and returns to cooperation whenever sustainable
2. **Majority-Responsive**: Only requires half the players to cooperate, not all (generous threshold)
3. **Resource Preservation**: Prioritizes long-term sustainability over short-term gains
4. **Forgiveness**: Returns to cooperation once others demonstrate cooperative behavior
5. **Non-Exploitative**: Doesn't try to be the sole defector when others cooperate

## Strategic Rationale

- **Sustainability Focus**: The 40% stock threshold ensures the resource doesn't collapse completely
- **Reciprocity**: Responds to the group's overall behavior rather than individual actions
- **Robustness**: Can handle mixed strategies and isn't easily exploited by consistent defectors
- **Collective Welfare**: Maximizes total group payoffs when others are similarly minded
- **Adaptive**: Adjusts to the actual behavior patterns observed rather than assuming ideal cooperation

This strategy should perform well in a tournament of LLM-generated strategies because it balances cooperation with reasonable self-protection, responds to group dynamics rather than being overly naive, and maintains the resource base that benefits all players.
'''

description_COOPERATIVE_102 = '''
I'll design a cooperative strategy called "Adaptive Reciprocal Cooperation" (ARC) that aims to maintain the common pool while encouraging cooperation from other players.

## Strategy: Adaptive Reciprocal Cooperation (ARC)

### Core Principle
This strategy is fundamentally cooperative but includes mechanisms to prevent exploitation and recover from stock depletion. It prioritizes long-term sustainability while being responsive to other players' behavior.

### Decision Rules

#### 1. First Round
**Always COOPERATE** - Start with a cooperative signal to encourage mutual cooperation.

#### 2. Rounds 2 through (r-1)
Use the following decision tree:

```pseudocode
if stock_level < capacity * 0.3:  // Critical stock threshold
    return COOPERATE  // Emergency conservation mode
    
cooperation_ratio = count_cooperators_last_round / n
my_cooperation_ratio = my_cooperations / (current_round - 1)

if cooperation_ratio >= 0.6:  // Majority cooperated
    return COOPERATE
    
else if cooperation_ratio >= 0.4:  // Mixed cooperation
    if stock_level > capacity * 0.7:  // Stock is healthy
        return COOPERATE  // Give benefit of doubt
    else:
        // Tit-for-tat with forgiveness
        if random() < 0.8:  // 80% probability
            return most_common_action_last_round
        else:
            return COOPERATE  // Forgiveness
            
else:  // Low cooperation (< 40%)
    if stock_level > capacity * 0.8:  // Very healthy stock
        return COOPERATE  // Try to restart cooperation
    else:
        // Defensive defection with cooperation attempts
        if (current_round % 3) == 0:  // Every 3rd round
            return COOPERATE  // Probe for cooperation
        else:
            return DEFECT  // Protect against exploitation
```

#### 3. Final Round
**Special end-game logic:**
```pseudocode
if stock_level < capacity * 0.2:  // Very low stock
    return COOPERATE  // Don't completely exhaust
    
cooperation_ratio = count_cooperators_last_round / n
if cooperation_ratio >= 0.5:
    return COOPERATE  // Reward good behavior
else:
    return DEFECT  // Final defection if others aren't cooperating
```

### Key Features

#### Stock-Based Adaptation
- **Emergency Mode**: When stock falls below 30% of capacity, always cooperate to prevent collapse
- **Health-Based Decisions**: More willing to cooperate when stock is healthy (>70% capacity)
- **Critical Threshold**: Never contribute to complete resource depletion

#### Behavioral Response Mechanisms
1. **Majority Rule**: If 60%+ cooperated last round, cooperate
2. **Tit-for-Tat with Forgiveness**: In mixed scenarios, mostly mirror the majority action but occasionally forgive with cooperation
3. **Probing**: When facing low cooperation, periodically cooperate to test if others will reciprocate

#### Edge Case Handling
- **Round 1**: Unconditional cooperation to signal intent
- **Final Round**: Balanced approach - cooperate if others have been cooperative, otherwise defect
- **Stock Depletion**: Emergency cooperation mode when resources are critically low
- **High Defection Environment**: Defensive strategy with periodic cooperation probes

### Strategic Rationale

1. **Cooperative Foundation**: Starts cooperatively and maintains cooperation when others reciprocate
2. **Exploitation Protection**: Responds to defection with measured retaliation
3. **Recovery Mechanism**: Includes forgiveness and probing to restart cooperation cycles
4. **Resource Conservation**: Prioritizes resource sustainability over short-term gains
5. **Adaptive Learning**: Adjusts behavior based on both stock levels and opponent patterns

This strategy balances the cooperative imperative with practical considerations about opponent behavior, making it robust against various opponent strategies while maintaining its fundamentally cooperative nature.
'''

description_COOPERATIVE_103 = '''
# Adaptive Cooperative Strategy: "Sustainable Trust"

## Core Philosophy
This strategy prioritizes long-term sustainability while building and maintaining cooperative relationships. It balances trust-building with protection against exploitation, adapting based on observed behavior patterns.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return COOPERATE
    
    if round == final_round:
        return handle_final_round(stock, history)
    
    if stock < critical_threshold:
        return emergency_cooperation(history)
    
    cooperation_score = calculate_cooperation_score(history)
    trust_level = calculate_trust_level(history, cooperation_score)
    
    if trust_level >= HIGH_TRUST_THRESHOLD:
        return COOPERATE
    elif trust_level >= MODERATE_TRUST_THRESHOLD:
        return conditional_cooperate(history)
    else:
        return defensive_defect_with_forgiveness(history)
```

### Key Thresholds and Parameters:
- **Critical Stock Threshold**: `capacity * 0.3` (30% of original capacity)
- **High Trust Threshold**: `0.7` (70% cooperation from others)
- **Moderate Trust Threshold**: `0.5` (50% cooperation from others)
- **Forgiveness Window**: Every 3-5 rounds, attempt to rebuild cooperation

## Detailed Strategy Components

### 1. Opening Strategy (Round 1)
- **Always COOPERATE** to signal cooperative intent
- Establishes positive precedent and maximizes early stock preservation

### 2. Trust Assessment System
```pseudocode
function calculate_cooperation_score(history):
    recent_weight = 0.6
    historical_weight = 0.4
    
    recent_coop_rate = cooperation_rate(last_3_rounds)
    historical_coop_rate = cooperation_rate(all_previous_rounds)
    
    return recent_weight * recent_coop_rate + historical_weight * historical_coop_rate
```

### 3. Emergency Conservation Mode
When stock falls below critical threshold:
- **Always COOPERATE** regardless of others' behavior
- Rationale: Collective survival requires maximum conservation
- Override all other decision rules

### 4. Conditional Cooperation
For moderate trust situations:
- COOPERATE if majority cooperated in previous round
- DEFECT if majority defected in previous round
- Responds to immediate group dynamics

### 5. Defensive Defection with Forgiveness
For low trust environments:
- Generally DEFECT to avoid exploitation
- Every 4th round, attempt COOPERATION to test for changed behavior
- If others reciprocate cooperation attempt, gradually increase cooperation

### 6. Final Round Handling
```pseudocode
function handle_final_round(stock, history):
    if stock > capacity * 0.8:
        return DEFECT  // Extract final value from abundant resource
    elif others_consistently_cooperative(history):
        return COOPERATE  // Maintain reciprocity with good partners
    else:
        return DEFECT  // Standard final round defection
```

## Edge Case Handling

### Stock Depletion Scenarios:
- If stock reaches near-zero, switch to pure cooperation to attempt recovery
- Track whether depletion was due to mass defection or natural dynamics

### Highly Cooperative Groups:
- If group maintains >80% cooperation rate, remain cooperative
- Monitor for sudden shifts that might indicate end-game exploitation

### Highly Defective Groups:
- Minimize losses through strategic defection
- Periodically test for cooperation opportunities
- Focus on damage limitation

### Mixed Groups:
- Identify consistent cooperators vs. defectors
- Attempt to build coalitions with reliable partners
- Use reputation tracking across rounds

## Cooperative Alignment Features

1. **Sustainability Priority**: Always considers long-term resource health
2. **Trust Building**: Starts cooperatively and rewards cooperative behavior
3. **Collective Benefit**: Prefers outcomes that benefit the group
4. **Forgiveness Mechanism**: Provides opportunities to rebuild relationships
5. **Emergency Cooperation**: Prioritizes group survival in crisis situations

## Strategic Advantages

- **Adaptable**: Responds to different group dynamics
- **Forgiving**: Allows recovery from temporary conflicts
- **Protective**: Avoids systematic exploitation
- **Sustainable**: Balances individual and collective interests
- **Reputation-Aware**: Builds positive relationships with reliable partners

This strategy aims to foster cooperation while maintaining resilience against exploitation, ultimately seeking sustainable outcomes that benefit both the individual and the group.
'''

description_COOPERATIVE_104 = '''
# Cooperative Strategy: "Adaptive Trust with Sustainability Focus"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool resource while attempting to build and maintain cooperative relationships. It balances trust-building with protection against exploitation, always keeping the resource's health as the primary concern.

## Decision Rules

### Round 1: Optimistic Cooperation
- **Action**: Always COOPERATE
- **Rationale**: Start with good faith to signal cooperative intent and test opponents' willingness to cooperate

### Rounds 2 through r-1: Adaptive Response System

**Primary Rule - Sustainability Threshold Check:**
```
if (current_stock < capacity * 0.3):
    action = COOPERATE  // Emergency conservation mode
else:
    apply cooperation_score_system()
```

**Cooperation Score System:**
For each opponent j, maintain a cooperation score S_j:
- Initialize: S_j = 1.0 for all opponents
- After each round t: S_j = 0.7 * S_j + 0.3 * cooperation_indicator_j_t
  - cooperation_indicator = 1 if opponent j played C, 0 if played D

**Decision Logic:**
```
average_cooperation_score = mean(S_j for all opponents j)
cooperation_threshold = max(0.4, 0.8 - 0.05 * current_round)

if (average_cooperation_score >= cooperation_threshold):
    action = COOPERATE
else if (average_cooperation_score >= 0.25):
    // Mixed strategy based on stock health
    if (current_stock >= capacity * 0.7):
        action = COOPERATE
    else:
        action = DEFECT
else:
    // Hostile environment - protect against exploitation
    action = DEFECT
```

### Final Round (Round r): Conditional Cooperation
```
if (current_stock < capacity * 0.2):
    action = COOPERATE  // Don't destroy what's left
else if (average_cooperation_score >= 0.6):
    action = COOPERATE  // Reward sustained cooperation
else:
    action = DEFECT     // End-game defection against non-cooperators
```

## Special Edge Cases

### Stock Depletion Crisis
If stock falls below capacity * 0.15:
- **Action**: Always COOPERATE regardless of opponent behavior
- **Duration**: Until stock recovers above capacity * 0.4

### Rapid Recovery Opportunity
If stock > capacity * 0.9 and average_cooperation_score > 0.7:
- **Action**: Always COOPERATE to maintain the healthy equilibrium

### Punishment Phase
If more than 60% of opponents defected in the previous round AND stock > capacity * 0.5:
- **Action**: DEFECT for exactly one round as punishment signal
- **Return**: Immediately return to cooperation scoring system

## Key Features

1. **Sustainability Priority**: Never sacrifices long-term resource health for short-term gains
2. **Adaptive Trust**: Adjusts cooperation threshold based on opponents' historical behavior
3. **Graduated Response**: Doesn't immediately retaliate but gradually reduces cooperation
4. **Crisis Management**: Switches to pure cooperation when resource is critically depleted
5. **Memory Decay**: Recent actions matter more than ancient history (0.7 decay factor)
6. **Endgame Consideration**: Balances final-round temptation with resource preservation

## Expected Outcomes

- **Against Pure Cooperators**: Maintains mutual cooperation and sustainable stock levels
- **Against Pure Defectors**: Minimizes exploitation while preserving some resource
- **Against Mixed Strategies**: Adapts cooperation level to match opponents' trustworthiness
- **Stock Preservation**: Prioritizes resource sustainability over individual payoff maximization

This strategy aims to be the "responsible steward" that other cooperative strategies can recognize and align with, while protecting against exploitation from purely selfish strategies.
'''

description_COOPERATIVE_105 = '''
# Cooperative Strategy: "Forgiving Sustainability Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving enough to maintain cooperation even when some players defect. It recognizes that maintaining the common pool resource is essential for maximizing collective welfare over multiple rounds.

## Decision Rules

### Primary Rule: Conditional Cooperation with Forgiveness
```pseudocode
IF round == 1:
    play C  // Start cooperatively to signal good intentions

ELSE IF stock_level < capacity * 0.3:
    play C  // Emergency conservation mode - always cooperate when stock is critically low

ELSE IF majority_cooperated_last_round:
    play C  // Continue cooperation when most players are cooperative

ELSE IF defection_streak >= 3:
    play D  // Temporary retaliation after persistent mass defection
    
ELSE:
    play C  // Default to cooperation (forgiveness)
```

### Supporting Logic

**Stock Health Assessment:**
- Monitor stock level relative to capacity
- When stock < 30% of capacity, always cooperate regardless of others' behavior
- This prevents complete resource collapse

**Cooperation Tracking:**
- Count how many players cooperated in the previous round
- "Majority cooperated" means ≥ 50% of players chose C
- This creates incentive for others to maintain cooperative majority

**Defection Response:**
- Track consecutive rounds where majority defected
- Only retaliate after 3 consecutive rounds of majority defection
- This prevents being exploited while remaining forgiving

## Edge Case Handling

### First Round
Always cooperate to:
- Signal cooperative intentions
- Start building sustainable resource base
- Encourage reciprocal cooperation

### Last Round
Continue following main decision rules (don't defect just because it's the final round):
- Maintains reputation for future interactions if game repeats
- Prevents cascade of last-round defections
- Shows commitment to cooperative principles

### Critical Stock Levels
When stock < 30% capacity:
- Override all other rules and cooperate
- This prevents resource collapse that hurts everyone
- Demonstrates commitment to sustainability

### All Players Defecting
After 3 consecutive rounds of majority defection:
- Temporarily defect to avoid being exploited
- Return to cooperation if any improvement in others' behavior
- This provides some protection while maintaining cooperative stance

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Default Cooperation**: Always starts cooperatively and returns to cooperation quickly
2. **Forgiveness**: Doesn't immediately retaliate for occasional defections
3. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
4. **Collective Welfare**: Recognizes that resource preservation benefits everyone
5. **Proportional Response**: Only retaliates after persistent exploitation

## Strategic Rationale

- **Sustainability**: By defaulting to cooperation and emergency conservation, the strategy helps maintain the resource base that benefits all players
- **Forgiveness**: Quick return to cooperation encourages others to cooperate rather than creating defection spirals
- **Protection**: Limited retaliation prevents complete exploitation by persistent defectors
- **Signaling**: Clear cooperative intentions encourage reciprocal behavior from rational players

This strategy balances the ideals of cooperation with practical considerations for a tournament environment where some opponents may be more competitive.
'''

description_COOPERATIVE_106 = '''
I'll design a cooperative strategy called "Adaptive Tit-for-Tat with Forgiveness" (ATTF). This strategy balances cooperation with protection against exploitation while maintaining a fundamentally cooperative stance.

## Strategy: Adaptive Tit-for-Tat with Forgiveness (ATTF)

### Core Philosophy
Start cooperative, respond proportionally to defection, but maintain pathways back to cooperation to maximize long-term collective welfare.

### Decision Rules

```pseudocode
ATTF_Strategy(round, game_history, stock_level, n, r):
    if round == 1:
        return COOPERATE  // Always start cooperatively
    
    // Calculate cooperation rate in previous round
    defectors_last_round = count_defectors(game_history[round-1])
    cooperation_rate = (n - defectors_last_round) / n
    
    // Calculate stock health (normalized to [0,1])
    stock_health = stock_level / capacity
    
    // Endgame consideration
    rounds_remaining = r - round + 1
    
    // Main decision logic
    if stock_health < 0.2:  // Emergency cooperation
        return COOPERATE
    
    elif rounds_remaining <= 2:  // Last two rounds
        if cooperation_rate >= 0.5:
            return COOPERATE
        else:
            return DEFECT  // Protect against last-round defection
    
    elif cooperation_rate >= 0.75:  // High cooperation
        return COOPERATE
    
    elif cooperation_rate >= 0.5:   // Moderate cooperation
        // Forgiveness mechanism: cooperate with probability
        forgiveness_prob = 0.3 + 0.4 * stock_health
        if random() < forgiveness_prob:
            return COOPERATE
        else:
            return DEFECT
    
    else:  // Low cooperation (< 50%)
        // Defensive but not completely retaliatory
        if cooperation_rate >= 0.25:
            return DEFECT
        else:
            // Extreme defection scenario - still try to rebuild
            if round % 3 == 1:  // Every third round, attempt cooperation
                return COOPERATE
            else:
                return DEFECT
```

### Key Components

1. **Cooperative Start**: Always begin with cooperation to signal good intentions and establish a cooperative norm.

2. **Proportional Response**: Response severity scales with the level of defection observed:
   - High cooperation (≥75%): Continue cooperating
   - Moderate cooperation (50-75%): Mix of cooperation and defection based on stock health
   - Low cooperation (25-50%): Primarily defect but maintain some forgiveness
   - Very low cooperation (<25%): Mostly defect with periodic cooperation attempts

3. **Stock-Based Emergency Cooperation**: When stock falls critically low (<20% of capacity), always cooperate regardless of others' behavior to prevent complete collapse.

4. **Forgiveness Mechanism**: Even when others defect, maintain probability of cooperation that increases with stock health, preventing permanent spirals into mutual defection.

5. **Endgame Handling**: 
   - In final two rounds, cooperate only if majority was cooperative in previous round
   - This prevents exploitation while maintaining cooperation with like-minded players

6. **Rebuilding Attempts**: Even in highly defective environments, periodically attempt cooperation (every third round) to test if conditions have changed.

### Edge Case Handling

- **First Round**: Always cooperate to establish cooperative intent
- **Last Round**: Conditional cooperation based on recent history
- **Stock Depletion**: Emergency cooperation mode when stock critically low
- **All-Defection Scenarios**: Maintain periodic cooperation attempts to enable recovery
- **Mixed Environments**: Adaptive response based on cooperation levels

### Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation and prefers cooperative outcomes
- Only defects in response to others' defection, not preemptively
- Maintains forgiveness mechanisms to return to cooperation
- Prioritizes resource sustainability over short-term gains
- Attempts to rebuild cooperation even after betrayal

The strategy recognizes that in a common pool resource game, mutual cooperation leads to the best long-term outcomes for all players, while also protecting against exploitation by maintaining proportional defensive responses.
'''

description_COOPERATIVE_107 = '''
# Adaptive Cooperative Strategy with Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperatively but includes mechanisms to handle defectors while maintaining pathways back to cooperation.

## Decision Rules

### Primary Strategy: Conditional Cooperation with Graduated Response
```
IF round == 1:
    ACTION = COOPERATE
    
ELSE IF stock_level <= critical_threshold:
    ACTION = COOPERATE  // Emergency conservation mode
    
ELSE IF recent_cooperation_rate >= cooperation_threshold:
    ACTION = COOPERATE  // Reward collective cooperation
    
ELSE IF personal_defection_count < max_punishment_rounds:
    ACTION = DEFECT     // Punish defectors
    personal_defection_count++
    
ELSE:
    ACTION = COOPERATE  // Return to cooperation (forgiveness)
    personal_defection_count = 0
```

## Key Parameters
- **critical_threshold** = capacity * 0.3 (30% of maximum stock)
- **cooperation_threshold** = 0.6 (60% of players must cooperate)
- **max_punishment_rounds** = 2
- **recent_window** = min(3, current_round - 1)

## Detailed Logic

### 1. First Round Behavior
Always COOPERATE to signal cooperative intent and establish a sustainable baseline.

### 2. Emergency Conservation Mode
When stock falls below 30% of capacity, always COOPERATE regardless of opponent behavior. This prevents total resource collapse and gives the pool a chance to recover.

### 3. Cooperation Assessment
Evaluate cooperation in the last 3 rounds (or all available rounds if fewer than 3):
- Count total cooperative actions by all players
- Calculate cooperation_rate = cooperative_actions / total_possible_actions
- If ≥60% of recent actions were cooperative, continue cooperating

### 4. Punishment Phase
When cooperation rate falls below threshold and not in emergency mode:
- DEFECT for up to 2 consecutive rounds
- This provides immediate deterrent against free-riding
- Limited duration prevents destructive punishment spirals

### 5. Forgiveness Mechanism
After punishment period, return to COOPERATION to:
- Signal willingness to rebuild trust
- Avoid permanent defection cycles
- Allow for strategy adaptation by opponents

## Edge Cases

### Last Round Handling
In the final round, the strategy maintains its cooperative nature rather than defecting for short-term gain. This preserves reputation for potential future interactions and maintains consistency with the cooperative philosophy.

### Stock Depletion Scenarios
- If stock reaches zero, continue cooperating to maximize recovery potential
- The growth function means even small remaining stock can regenerate significantly

### All-Defector Environment
- Strategy will cycle through: Cooperate → Punish (2 rounds) → Forgive → Repeat
- This maintains some cooperation for resource sustainability
- Prevents complete resource exhaustion in most scenarios

## Strategic Advantages

1. **Sustainability Focus**: Emergency mode prevents total resource collapse
2. **Responsive**: Adapts to opponent behavior patterns
3. **Forgiving**: Provides pathways back to mutual cooperation
4. **Bounded Punishment**: Avoids destructive retaliation spirals
5. **Clear Signaling**: Consistent patterns help opponents learn optimal responses

## Pseudocode Implementation
```python
class AdaptiveCooperativeStrategy:
    def __init__(self, n_players, capacity):
        self.n_players = n_players
        self.capacity = capacity
        self.critical_threshold = capacity * 0.3
        self.cooperation_threshold = 0.6
        self.max_punishment_rounds = 2
        self.punishment_counter = 0
        
    def decide(self, round_num, current_stock, game_history):
        # First round: always cooperate
        if round_num == 1:
            self.punishment_counter = 0
            return 'C'
        
        # Emergency conservation mode
        if current_stock <= self.critical_threshold:
            self.punishment_counter = 0
            return 'C'
        
        # Calculate recent cooperation rate
        recent_window = min(3, round_num - 1)
        recent_rounds = game_history[-recent_window:]
        
        total_actions = len(recent_rounds) * self.n_players
        cooperative_actions = sum(row.count('C') for row in recent_rounds)
        cooperation_rate = cooperative_actions / total_actions
        
        # If high cooperation, continue cooperating
        if cooperation_rate >= self.cooperation_threshold:
            self.punishment_counter = 0
            return 'C'
        
        # Punishment phase
        if self.punishment_counter < self.max_punishment_rounds:
            self.punishment_counter += 1
            return 'D'
        
        # Forgiveness: return to cooperation
        self.punishment_counter = 0
        return 'C'
```

This strategy balances cooperative ideals with practical responsiveness to defection, while maintaining strong safeguards against resource collapse.
'''

description_COOPERATIVE_108 = '''
# Cooperative Strategy: "Conditional Sustainability"

## Core Philosophy
This strategy prioritizes long-term sustainability while encouraging cooperative behavior through clear signaling and measured responses to defection. It balances forgiveness with deterrence to maintain the common pool resource.

## Decision Rules

### Primary Rule: Cooperation with Punishment
- **Default Action**: Always play C (Cooperate)
- **Punishment Trigger**: Play D (Defect) only when specific punishment conditions are met
- **Recovery Goal**: Return to cooperation as quickly as possible while maintaining credibility

### Punishment Conditions
Play D if **both** conditions are met:
1. **Defection Threshold**: More than 50% of players defected in the previous round
2. **Sustainability Check**: Current stock level > capacity × 0.3 (ensure punishment won't destroy the resource)

### Punishment Duration
- **Single Round Punishment**: Defect for exactly one round when punishment conditions are met
- **Immediate Forgiveness**: Return to cooperation in the next round regardless of others' responses

## Edge Case Handling

### First Round
- **Always Cooperate**: Play C to signal cooperative intent and establish trust
- **Rationale**: No history exists to trigger punishment, and cooperation maximizes initial resource preservation

### Last Round
- **Conditional Cooperation**: 
  - If stock > capacity × 0.5: Play C (maintain cooperation signal for potential future interactions)
  - If stock ≤ capacity × 0.5: Play D (extract remaining value since no future rounds exist)

### Critical Stock Levels
- **Emergency Cooperation**: If stock drops below capacity × 0.2, always play C regardless of others' actions
- **Resource Collapse**: If stock reaches 0, play C (though payoff will be 0) to signal willingness to rebuild

### Mixed Defection Scenarios
- **Minority Defection** (≤50% defectors): Continue cooperating to reward the cooperative majority
- **Majority Defection** (>50% defectors): Trigger punishment as described above

## Pseudocode

```python
def decide_action(round_num, total_rounds, current_stock, capacity, 
                 previous_actions, n_players):
    
    # First round: always cooperate
    if round_num == 1:
        return 'C'
    
    # Emergency cooperation at critically low stock
    if current_stock < capacity * 0.2:
        return 'C'
    
    # Last round conditional logic
    if round_num == total_rounds:
        if current_stock > capacity * 0.5:
            return 'C'
        else:
            return 'D'
    
    # Check previous round for punishment trigger
    previous_round_actions = previous_actions[round_num - 2]  # Previous round
    defector_count = sum(1 for action in previous_round_actions if action == 'D')
    defection_rate = defector_count / n_players
    
    # Punishment conditions
    majority_defected = defection_rate > 0.5
    stock_sufficient_for_punishment = current_stock > capacity * 0.3
    
    # Apply punishment if conditions met
    if majority_defected and stock_sufficient_for_punishment:
        return 'D'
    
    # Default: cooperate
    return 'C'
```

## Strategic Rationale

### Why This Strategy is Cooperative
1. **Cooperation by Default**: 90%+ of decisions will be cooperative
2. **Resource Preservation**: Prioritizes long-term sustainability over short-term gains
3. **Forgiveness**: Quick return to cooperation after punishment
4. **Trust Building**: Consistent cooperative signaling encourages reciprocal behavior

### Deterrence Mechanism
- **Clear Trigger**: Majority defection creates predictable consequences
- **Proportional Response**: Single-round punishment matches the severity of widespread defection
- **Credible Threat**: Stock threshold ensures punishment capability is maintained

### Adaptation to Tournament Context
- **No Communication Assumption**: Strategy relies only on observable actions
- **Robust to Various Opponents**: Works whether facing other cooperators, defectors, or mixed strategies
- **Learning Signal**: Opponents can easily identify the strategy's pattern and adapt accordingly

This strategy should perform well against other cooperative strategies while providing reasonable protection against exploitative opponents, all while maintaining the resource for long-term benefit.
'''

description_COOPERATIVE_109 = '''
# Conditional Cooperation with Forgiveness Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation. It balances cooperative intent with defensive mechanisms to handle various opponent types.

## Decision Rules

### Round 1: Cooperative Start
- **Action: Always C**
- **Rationale: Signal cooperative intent and give others the benefit of the doubt**

### Rounds 2 to r-1: Conditional Cooperation with Forgiveness

**Primary Rule: Cooperate if the majority cooperated last round**
- If `(number of C actions in previous round) >= ceiling(n/2)`, then play C
- Otherwise, play D

**Forgiveness Mechanism:**
- Track consecutive rounds where majority defected
- If majority has defected for 2+ consecutive rounds AND stock > capacity/3, attempt cooperation reset by playing C
- This prevents permanent defection spirals when the resource can still sustain cooperation

**Critical Stock Protection:**
- If current stock < capacity/4, play D regardless of other conditions
- This ensures survival when the resource is critically depleted

### Round r (Final Round): Conditional Defection
- If stock > capacity/2, play C (resource is healthy, maintain cooperation)
- Otherwise, play D (extract remaining value when resource is already damaged)

## Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    if round == 1:
        return C
    
    if round == final_round:
        if stock > capacity/2:
            return C
        else:
            return D
    
    # Critical stock protection
    if stock < capacity/4:
        return D
    
    # Count cooperators in previous round
    prev_cooperators = count_C_actions(history[round-1])
    majority_threshold = ceiling(n/2)
    
    # Main conditional cooperation rule
    if prev_cooperators >= majority_threshold:
        return C
    
    # Forgiveness mechanism
    consecutive_majority_defections = count_consecutive_majority_defections(history)
    if consecutive_majority_defections >= 2 AND stock > capacity/3:
        return C  # Attempt cooperation reset
    
    return D
```

## Strategy Rationale

1. **Cooperative Foundation**: Starts cooperatively to signal good intentions and test for mutual cooperation possibilities.

2. **Majority-Based Response**: Uses majority behavior as the cooperation threshold, making it resilient against small numbers of defectors while still responding to widespread defection.

3. **Forgiveness Prevents Deadlock**: The forgiveness mechanism prevents permanent defection spirals that would be suboptimal for all players when the resource can still sustain cooperation.

4. **Stock-Based Adaptation**: Incorporates resource health into decisions - protects against depletion when stock is low, but maintains cooperation when stock is healthy.

5. **Strategic Final Round**: In the last round, considers resource state rather than pure end-game defection, maintaining cooperation if the resource is still healthy.

## Handling Edge Cases

- **All opponents always defect**: Will defect after round 1, with occasional forgiveness attempts
- **Mixed opponent types**: Responds to the majority, creating incentives for cooperation
- **Highly cooperative opponents**: Maintains cooperation throughout
- **Stock depletion**: Switches to protection mode when resource is critically low
- **Final round**: Balances end-game considerations with resource sustainability

This strategy is designed to be cooperative yet not exploitable, encouraging mutual cooperation while protecting against resource collapse and strategic manipulation.
'''

description_COOPERATIVE_110 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group cooperation levels. It starts cooperatively but adapts based on observed behavior to maintain both the resource pool and competitive viability.

## Decision Rules

### Primary Rule: Cooperation Threshold
- **Cooperate (C)** if: `cooperation_rate >= threshold`
- **Defect (D)** if: `cooperation_rate < threshold`

Where:
- `cooperation_rate = (number of C actions in previous round) / n`
- `threshold = 0.5` (majority cooperation required)

### Stock Protection Override
- **Always Cooperate** if: `current_stock < capacity * 0.3`
  - Rationale: Resource is critically low; cooperation essential for recovery

### End-Game Adjustment
- **Final Round**: Defect regardless of other conditions
  - Rationale: No future consequences, maximize final payoff

## Edge Cases

### First Round
- **Action**: Always Cooperate (C)
- **Rationale**: Establish cooperative intent and gather information about opponents

### Second Round
- **If all cooperated in Round 1**: Cooperate (C)
- **If majority cooperated in Round 1**: Cooperate (C)  
- **If minority cooperated in Round 1**: Defect (D)

### Stock Depletion Scenarios
- **If stock = 0**: The game effectively ends early (no payoffs possible)
- **If stock < 2n**: Emergency cooperation mode - always play C to attempt recovery

## Pseudocode

```
function decide_action(round, stock, history, n, r, capacity):
    // Emergency stock protection
    if stock < capacity * 0.3:
        return C
    
    // First round - establish cooperation
    if round == 1:
        return C
    
    // Final round - maximize payoff
    if round == r:
        return D
    
    // Calculate cooperation rate from previous round
    previous_round = history[round - 1]
    cooperators = count_actions(previous_round, C)
    cooperation_rate = cooperators / n
    
    // Main decision logic
    if cooperation_rate >= 0.5:
        return C
    else:
        return D
```

## Strategic Rationale

### Why This Strategy is Cooperative
1. **Default to Cooperation**: Starts cooperative and maintains cooperation when others reciprocate
2. **Resource Preservation**: Prioritizes stock sustainability over short-term gains
3. **Majority Responsive**: Continues cooperating as long as majority does
4. **Emergency Cooperation**: Switches to pure cooperation when resource is critically endangered

### Handling Tournament Dynamics
1. **Against All-Cooperators**: Will cooperate throughout (except final round)
2. **Against Mixed Strategies**: Adapts based on majority behavior
3. **Against All-Defectors**: Will defect after Round 1, but switches to cooperation if stock becomes critically low
4. **Against Tit-for-Tat variants**: Should maintain stable cooperation in most scenarios

### Key Advantages
- **Sustainability Focus**: Prevents resource collapse better than pure strategies
- **Adaptive**: Responds to group dynamics rather than being rigid
- **Competitive**: Doesn't get exploited by consistent defectors
- **Recovery Capable**: Can help rebuild depleted resources when necessary

This strategy balances cooperative ideals with practical tournament considerations, aiming to achieve both resource sustainability and competitive performance.
'''

description_COOPERATIVE_111 = '''
I'll design a cooperative strategy called **"Adaptive Tit-for-Tat with Sustainability Monitoring"** (ATTSM).

## Strategy Overview

This strategy prioritizes long-term cooperation while being responsive to opponents' behavior and the health of the common pool resource. It combines elements of reciprocity, forgiveness, and sustainability awareness.

## Decision Rules

### Core Logic:
```
if round == 1:
    return COOPERATE
    
if stock_level < critical_threshold:
    return COOPERATE  // Emergency conservation
    
if cooperation_ratio >= cooperation_target:
    return COOPERATE
else:
    if recent_defection_trend AND forgiveness_counter == 0:
        return DEFECT  // Punish consistent defectors
    else:
        return COOPERATE  // Default to cooperation
```

### Key Parameters:
- **critical_threshold**: stock < capacity * 0.3
- **cooperation_target**: 0.6 (60% of players should cooperate)
- **recent_window**: Last 3 rounds for trend analysis
- **forgiveness_counter**: Resets punishment after 1 round

## Detailed Decision Process

### 1. First Round
Always **COOPERATE** to signal cooperative intent and establish a positive foundation.

### 2. Stock Health Check
If current stock < 30% of capacity:
- **COOPERATE** regardless of opponent behavior
- Rationale: Resource is critically depleted; collective survival depends on conservation

### 3. Cooperation Assessment
Calculate cooperation ratio from last round:
```
cooperation_ratio = (number of cooperators) / n
```

If cooperation_ratio ≥ 0.6:
- **COOPERATE** to maintain positive momentum

### 4. Defection Response
If cooperation_ratio < 0.6:
- Check if there's a consistent defection trend (≥2 consecutive rounds below threshold)
- If trend exists AND not in forgiveness mode:
  - **DEFECT** once as punishment
  - Set forgiveness_counter = 1
- Otherwise: **COOPERATE**

### 5. Last Round Handling
In the final round:
- If stock > critical_threshold AND cooperation has been generally good (>50% average):
  - **COOPERATE** to end on a positive note
- Otherwise: Follow normal rules

## Edge Cases

### Early Game (Rounds 1-2):
- Round 1: Always COOPERATE
- Round 2: COOPERATE unless >75% defected in Round 1

### Late Game (Last 3 rounds):
- Increase cooperation_target to 0.7 to encourage final conservation
- Reduce punishment (more forgiving)

### Resource Collapse Scenario:
If stock approaches 0:
- Override all other rules and COOPERATE
- Signal desperate need for collective action

### High Cooperation Scenario:
If cooperation_ratio > 0.8 for 3+ consecutive rounds:
- Continue COOPERATING
- Slightly lower cooperation_target to 0.55 (reward good behavior)

## Pseudocode Implementation

```python
def decide_action(round_num, stock_level, history, n, capacity, total_rounds):
    # Initialize parameters
    critical_threshold = capacity * 0.3
    base_cooperation_target = 0.6
    
    # First round
    if round_num == 1:
        return COOPERATE
    
    # Emergency conservation
    if stock_level < critical_threshold:
        return COOPERATE
    
    # Calculate recent cooperation ratio
    last_round_actions = history[-1]  # Most recent round
    cooperation_ratio = count_cooperators(last_round_actions) / n
    
    # Adjust target for late game
    if round_num > total_rounds - 3:
        cooperation_target = 0.7
    else:
        cooperation_target = base_cooperation_target
    
    # Check for defection trend
    if len(history) >= 3:
        recent_coop_ratios = [count_cooperators(round) / n for round in history[-3:]]
        defection_trend = all(ratio < cooperation_target for ratio in recent_coop_ratios)
    else:
        defection_trend = False
    
    # Decision logic
    if cooperation_ratio >= cooperation_target:
        return COOPERATE
    elif defection_trend and not in_forgiveness_mode():
        set_forgiveness_mode(1)  # Punish for 1 round
        return DEFECT
    else:
        return COOPERATE

def count_cooperators(actions):
    return sum(1 for action in actions if action == COOPERATE)
```

## Strategic Rationale

1. **Cooperative by Default**: Assumes others want to cooperate and gives them the benefit of the doubt
2. **Responsive to Free-Riders**: Punishes consistent defection but with limited retaliation
3. **Sustainability Focused**: Prioritizes resource conservation over short-term gains
4. **Forgiving**: Doesn't get stuck in defection spirals
5. **Adaptive**: Adjusts behavior based on group dynamics and resource state

This strategy aims to foster a cooperative equilibrium while protecting against exploitation, ultimately maximizing long-term collective payoffs in the tournament setting.
'''

description_COOPERATIVE_112 = '''
I'll design a cooperative strategy called **"Adaptive Cooperation with Sustainability Monitoring"** that balances cooperation with protection against exploitation while maintaining long-term resource sustainability.

## Strategy: Adaptive Cooperation with Sustainability Monitoring (ACSM)

### Core Philosophy
This strategy prioritizes long-term sustainability through cooperation while implementing defensive mechanisms against persistent defectors. It recognizes that maintaining the resource pool benefits everyone in the long run.

### Decision Rules

#### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate (C)** for the first 3 rounds
- **Rationale**: Establish cooperative intent and allow observation of opponent patterns
- **Exception**: If stock falls below critical threshold (stock < capacity/4), switch to defection monitoring mode

#### 2. Main Game Strategy (Rounds 4 to r-2)

```pseudocode
For each round t (where 4 ≤ t ≤ r-2):
    
    // Calculate cooperation metrics
    my_coop_rate = (my_cooperations in last 3 rounds) / 3
    others_coop_rate = (total_cooperations_by_others in last 3 rounds) / (3 * (n-1))
    current_stock_ratio = current_stock / capacity
    
    // Sustainability check
    if current_stock_ratio < 0.3:
        action = COOPERATE  // Emergency conservation mode
    
    // High cooperation environment
    else if others_coop_rate >= 0.7:
        action = COOPERATE
    
    // Mixed cooperation environment - conditional cooperation
    else if others_coop_rate >= 0.4:
        if my_coop_rate >= others_coop_rate:
            action = COOPERATE
        else:
            action = COOPERATE  // Still lean cooperative
    
    // Low cooperation environment - defensive cooperation
    else if others_coop_rate >= 0.2:
        // Cooperate only if stock is healthy and some others cooperating
        if current_stock_ratio > 0.6:
            action = COOPERATE
        else:
            action = DEFECT  // Protect against exploitation
    
    // Very low cooperation - survival mode
    else:
        if current_stock_ratio < 0.2:
            action = COOPERATE  // Last-ditch conservation effort
        else:
            action = DEFECT  // Prevent being exploited
```

#### 3. End Game Strategy (Last 2 Rounds)

```pseudocode
For rounds (r-1) and r:
    
    current_stock_ratio = current_stock / capacity
    others_recent_coop = (cooperations_by_others in last 2 rounds) / (2 * (n-1))
    
    // If stock is critically low, always cooperate
    if current_stock_ratio < 0.25:
        action = COOPERATE
    
    // If others have been highly cooperative recently, reciprocate
    else if others_recent_coop >= 0.6:
        action = COOPERATE
    
    // Mixed signals - cooperate in second-to-last, assess in last
    else if current_round == (r-1):
        action = COOPERATE
    else: // Last round
        if others_recent_coop >= 0.3:
            action = COOPERATE
        else:
            action = DEFECT
```

### Key Features

#### 1. **Graduated Response System**
- Responses are proportional to the cooperation level observed
- Not purely tit-for-tat, but considers aggregate behavior
- Maintains cooperative bias even in mixed environments

#### 2. **Sustainability Override**
- When stock falls below 30% of capacity, prioritize conservation
- Emergency cooperation mode when stock is critically low
- Recognizes that resource collapse hurts everyone

#### 3. **Forgiveness Mechanism**
- Doesn't permanently punish past defections
- Uses rolling 3-round windows for assessment
- Allows recovery from temporary defection phases

#### 4. **End-Game Awareness**
- Recognizes that final rounds have different incentives
- Still promotes cooperation when stock is threatened
- Balances end-game defection temptation with sustainability

### Edge Case Handling

1. **First Round**: Always cooperate to signal cooperative intent
2. **Stock Depletion**: Override normal logic to prioritize conservation
3. **All Others Defect**: Still cooperate if stock is critically low
4. **Perfect Cooperation**: Maintain cooperation to sustain the equilibrium
5. **Final Round**: Cooperate if others have shown recent cooperation

### Cooperative Alignment

This strategy embodies cooperative principles by:
- **Defaulting to cooperation** in uncertain situations
- **Prioritizing resource sustainability** over short-term gains
- **Responding proportionally** rather than harshly to defection
- **Maintaining hope** for cooperative recovery
- **Considering long-term consequences** of actions

The strategy recognizes that in a common pool resource game, everyone benefits from maintaining the resource base, and cooperation is not just altruistic but rational for long-term payoff maximization.
'''

description_COOPERATIVE_113 = '''
# Adaptive Forgiveness Strategy (AFS)

## Core Philosophy
This strategy is built on conditional cooperation with a strong bias toward maintaining the common pool resource. It assumes that rational players will recognize the mutual benefits of cooperation over time, but includes safeguards against exploitation while maintaining a cooperative stance.

## Decision Rules

### Phase 1: Cooperative Opening (Rounds 1-2)
- **Always play C** in the first two rounds
- Rationale: Establish cooperative intentions and give other players the benefit of the doubt

### Phase 2: Adaptive Response (Rounds 3 to r-2)
Use a **Generous Tit-for-Tat with Forgiveness** approach:

```pseudocode
if round <= 2:
    return C
    
if round >= r-1:  # Last two rounds
    return endgame_strategy()
    
# Calculate cooperation rate in last 2 rounds
recent_cooperation_rate = count_cooperators_in_last_k_rounds(2) / n

if recent_cooperation_rate >= 0.75:
    # High cooperation - continue cooperating
    return C
    
elif recent_cooperation_rate >= 0.5:
    # Mixed behavior - forgive occasionally
    if count_consecutive_low_cooperation_rounds() <= 1:
        return C  # Give benefit of doubt
    else:
        return D  # Protect against sustained defection
        
else:
    # Low cooperation - defensive but still hopeful
    if stock_level < capacity * 0.3:
        return D  # Emergency protection when stock critically low
    elif random_forgiveness_trigger(probability=0.2):
        return C  # Occasional olive branch to restart cooperation
    else:
        return D  # Defensive response
```

### Phase 3: Endgame Strategy (Last 2 rounds)
```pseudocode
if round == r:  # Final round
    # Last round - assume others will defect, so defect
    return D
    
elif round == r-1:  # Second to last round
    if stock_level >= capacity * 0.5 AND recent_cooperation_rate >= 0.6:
        return C  # Stock is healthy and cooperation has been decent
    else:
        return D  # Protect against final round defection incentives
```

## Edge Case Handling

### Critical Stock Levels
- If stock drops below `capacity * 0.2`, temporarily switch to defensive mode (play D) until stock recovers to `capacity * 0.4`
- This prevents complete resource collapse while signaling the need for collective restraint

### All-Cooperation Detection
- If all players have cooperated for 3+ consecutive rounds, continue cooperating to maintain the sustainable equilibrium

### All-Defection Cycles
- If stuck in mutual defection with stock near zero, attempt cooperation every 3rd round to test if others are ready to rebuild

## Key Features

1. **Generous Start**: Begins with unconditional cooperation to establish good faith
2. **Proportional Response**: Response severity scales with the level of defection observed
3. **Forgiveness Mechanism**: Regular attempts to restart cooperation even after defection cycles
4. **Stock-Aware**: Adjusts behavior based on resource health to prevent collapse
5. **Endgame Realism**: Acknowledges final-round incentive changes while maximizing overall gains

## Cooperative Alignment

This strategy maintains a cooperative mindset by:
- Defaulting to cooperation when possible
- Using punishment primarily as a deterrent rather than revenge
- Actively attempting to restore cooperation after conflicts
- Prioritizing long-term resource sustainability over short-term gains
- Only defecting when necessary for resource protection or in response to sustained exploitation

The strategy recognizes that in a repeated game with observable actions, establishing and maintaining cooperative norms benefits everyone, while still protecting against strategies that might try to exploit pure cooperation.
'''

description_COOPERATIVE_114 = '''
# Adaptive Cooperative Strategy with Punishment and Forgiveness

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being responsive to opponent behavior. It starts cooperative but implements measured punishment for defection, with built-in forgiveness mechanisms to restore cooperation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Establish cooperative intent and test opponents' willingness to cooperate

### Rounds 2 to r-1: Adaptive Response
```pseudocode
if round == 2:
    if all_players_cooperated_last_round:
        action = C
    else:
        action = D  // Punish any defection
else:
    cooperation_rate = count_cooperators_last_round / n
    
    if cooperation_rate >= 0.75:
        action = C  // High cooperation - maintain cooperation
    
    elif cooperation_rate >= 0.5:
        // Mixed behavior - use graduated response
        if i_cooperated_last_round AND my_recent_payoff_trend_declining:
            action = D  // Protect against exploitation
        else:
            action = C  // Give benefit of doubt
    
    else:  // cooperation_rate < 0.5
        // Majority defecting - punish but with forgiveness
        rounds_since_last_cooperation_attempt = count_rounds_since_i_last_played_C
        
        if rounds_since_last_cooperation_attempt >= 2:
            action = C  // Periodic forgiveness attempt
        else:
            action = D  // Continue punishment
```

### Final Round: Conditional Cooperation
```pseudocode
if stock_level > capacity * 0.3:
    // Sufficient resources remain
    if cooperation_rate_last_round >= 0.5:
        action = C  // Reward good behavior even in final round
    else:
        action = D  // No point in unilateral cooperation
else:
    // Critical resource depletion
    action = C  // Last chance to preserve something for theoretical continuation
```

## Edge Case Handling

### Stock Depletion Crisis
```pseudocode
if current_stock < capacity * 0.2:
    // Emergency cooperation regardless of others' behavior
    action = C
```

### Early Collapse Recovery
```pseudocode
if stock_level == 0 AND round < r - 2:
    // Pool collapsed but game continues - attempt recovery
    action = C
```

### Opponent Behavior Pattern Recognition
```pseudocode
// Track each opponent's cooperation frequency
for each opponent j:
    cooperation_frequency[j] = count_C_actions[j] / rounds_played
    
// If majority of opponents are consistent cooperators (>80% cooperation rate)
if count(cooperation_frequency[j] > 0.8 for j in opponents) > n/2:
    bias_toward_cooperation = true
else:
    bias_toward_cooperation = false
```

## Key Features

1. **Graduated Response**: Punishment intensity scales with defection severity
2. **Forgiveness Mechanism**: Periodic cooperation attempts even during punishment phases
3. **Crisis Override**: Always cooperate when stock is critically low
4. **Pattern Recognition**: Adapts to opponents' historical behavior patterns
5. **End-game Consideration**: Maintains some cooperation incentive even in final rounds when stock permits

## Strategic Rationale

- **Sustainability Focus**: Prioritizes keeping the pool viable for maximum total payoffs
- **Incentive Alignment**: Rewards cooperation and punishes defection to encourage good behavior
- **Resilience**: Can recover from temporary defection spirals through forgiveness
- **Adaptive**: Responds to different opponent types (always-cooperate, always-defect, strategic)
- **Rational**: Avoids being exploited while maintaining cooperation opportunities

This strategy balances the cooperative ideal with practical considerations for tournament play against diverse opponents, ensuring both competitive performance and resource sustainability.
'''

description_COOPERATIVE_115 = '''
# Cooperative Strategy: "Adaptive Trust Builder"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while building trust through consistent cooperation, but includes defensive mechanisms to prevent exploitation.

## Decision Rules

### Phase 1: Trust Building (Rounds 1 to r/3)
- **Default Action**: Always play **C** (Cooperate)
- **Rationale**: Establish a cooperative reputation and signal willingness to maintain the resource pool
- **Exception**: None - commit fully to cooperation during this phase

### Phase 2: Adaptive Cooperation (Rounds r/3+1 to 2r/3)
- **Primary Action**: **C** (Cooperate)
- **Defection Trigger**: Switch to **D** if:
  - Current stock level < capacity/3 (critical depletion threshold)
  - AND more than 50% of players defected in the previous round
- **Recovery Condition**: Return to **C** immediately after any round where:
  - Stock level > capacity/2, OR
  - Fewer than 50% of players defected in the previous round

### Phase 3: Endgame Cooperation (Rounds 2r/3+1 to r-1)
- **Default Action**: **C** (Cooperate)
- **Emergency Defection**: Only play **D** if:
  - Stock level < capacity/4 (severe crisis)
  - AND it's mathematically impossible for cooperation to restore sustainable levels

### Phase 4: Final Round (Round r)
- **Action**: **C** (Cooperate)
- **Rationale**: Maintain cooperative reputation even in the final round, as the marginal benefit of defection is outweighed by the principle of cooperation

## Pseudocode

```
function decide_action(round, stock, capacity, n, r, history):
    current_phase = determine_phase(round, r)
    
    if current_phase == "trust_building":
        return C
    
    elif current_phase == "adaptive":
        if stock < capacity/3:
            defection_rate = count_defectors_last_round(history) / n
            if defection_rate > 0.5:
                return D
        return C
    
    elif current_phase == "endgame":
        if stock < capacity/4:
            if not can_recover_through_cooperation(stock, capacity, n, remaining_rounds):
                return D
        return C
    
    else:  # final round
        return C

function determine_phase(round, r):
    if round <= r/3:
        return "trust_building"
    elif round <= 2*r/3:
        return "adaptive"
    elif round < r:
        return "endgame"
    else:
        return "final"
```

## Key Features

1. **Cooperative Default**: The strategy is fundamentally cooperative, playing C in the vast majority of situations

2. **Trust Investment**: Early rounds focus purely on building trust and establishing cooperative norms

3. **Defensive Adaptation**: Only defects when facing both resource crisis AND widespread defection by others

4. **Quick Forgiveness**: Returns to cooperation immediately when conditions improve

5. **Endgame Integrity**: Maintains cooperation even in final rounds, avoiding the typical endgame defection cascade

## Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Always cooperate to maintain integrity
- **Stock Depletion Crisis**: Only defect if both stock is critically low AND others are primarily defecting
- **All Others Defect**: Still cooperate unless stock is in critical danger

## Cooperative Alignment

This strategy maximizes long-term resource sustainability while being robust against exploitation. It prioritizes collective welfare over individual short-term gains, only deviating from cooperation when necessary to prevent total resource collapse in the face of widespread defection.
'''

description_COOPERATIVE_116 = '''
# Adaptive Tit-for-Tat with Stock Monitoring (ATTSM) Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive response to opponent behavior and environmental conditions. It starts cooperatively but adjusts based on both opponent actions and the health of the common resource.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history, n, capacity):
    if round == 1:
        return COOPERATE  // Always start cooperatively
    
    // Calculate stock health ratio
    stock_health = current_stock / capacity
    
    // Calculate opponent cooperation rate in last 3 rounds (or all if fewer)
    recent_rounds = min(3, round - 1)
    recent_cooperation_rate = count_opponent_cooperations(history, recent_rounds) / (n-1) / recent_rounds
    
    // Crisis mode: If stock is critically low
    if stock_health < 0.3:
        if recent_cooperation_rate >= 0.6:
            return COOPERATE  // Cooperate if others are mostly cooperating
        else:
            return DEFECT     // Defect if others aren't cooperating enough
    
    // Last round special case
    if round == total_rounds:
        if recent_cooperation_rate >= 0.5:
            return COOPERATE  // Reward cooperative behavior
        else:
            return DEFECT     // Don't be exploited on final round
    
    // Standard adaptive response
    if recent_cooperation_rate >= 0.7:
        return COOPERATE      // High cooperation → cooperate
    else if recent_cooperation_rate >= 0.4:
        // Mixed behavior → probabilistic response based on stock health
        cooperation_probability = 0.3 + 0.4 * stock_health
        return COOPERATE with probability cooperation_probability
    else:
        return DEFECT         // Low cooperation → defect
```

## Detailed Strategy Components

### 1. **Opening Move**
- **Always COOPERATE** in round 1
- Establishes cooperative intent and gives others opportunity to reciprocate

### 2. **Stock Health Monitoring**
- Calculate `stock_health = current_stock / capacity`
- **Crisis threshold**: When stock_health < 0.3, prioritize resource preservation
- In crisis mode, only cooperate if majority of opponents are cooperating (≥60%)

### 3. **Opponent Behavior Tracking**
- Monitor cooperation rate of all opponents over the last 3 rounds
- This creates responsiveness to recent behavior changes while avoiding over-reaction to single defections
- Weight recent behavior more heavily than distant history

### 4. **Adaptive Response Thresholds**
- **High cooperation environment** (≥70% opponent cooperation): Always cooperate
- **Medium cooperation environment** (40-69%): Use probabilistic cooperation based on stock health
- **Low cooperation environment** (<40%): Defect to avoid exploitation

### 5. **End Game Handling**
- In the final round, cooperate only if opponents have maintained ≥50% cooperation rate
- Prevents being exploited on the last move while still rewarding consistently cooperative opponents

### 6. **Probabilistic Element**
- In mixed environments, cooperation probability = 0.3 + 0.4 × stock_health
- This creates a baseline 30% cooperation chance that increases with resource health
- Introduces unpredictability to prevent opponents from fully exploiting the strategy

## Edge Cases Handled

1. **First Round**: Always cooperate (no history available)
2. **Very Low Stock**: Crisis mode activated, cooperation contingent on opponent behavior
3. **Final Round**: Conditional cooperation based on historical opponent behavior
4. **All Opponents Defecting**: Strategy will defect after observing low cooperation rates
5. **Stock Depletion**: If stock reaches 0, the probabilistic element ensures some cooperation attempts for recovery

## Cooperative Alignment

This strategy maintains a fundamentally cooperative stance by:
- Starting with cooperation
- Preferring cooperation when the resource is healthy
- Rewarding cooperative opponents even in the final round
- Maintaining some cooperation probability even in hostile environments
- Prioritizing resource preservation during crisis periods

The strategy only defects defensively (when being exploited) or protectively (when the resource is critically endangered and others aren't cooperating), never aggressively.
'''

description_COOPERATIVE_117 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority"

## Core Philosophy
This strategy aims to maintain long-term sustainability of the common pool while being robust against exploitation. It balances cooperation with defensive measures based on observed group behavior.

## Decision Rules

### Primary Rule: Majority-Based Cooperation
- **Cooperate (C)** if the majority of other players cooperated in the previous round
- **Defect (D)** if the majority of other players defected in the previous round
- In case of ties, default to cooperation (cooperative bias)

### Stock-Based Override
Regardless of opponent behavior:
- **Always Cooperate (C)** if current stock ≤ capacity/4 (critical sustainability threshold)
- **Always Defect (D)** if current stock = capacity (no sustainability risk)

## Edge Case Handling

### First Round
- **Always Cooperate (C)** - Start with good faith and signal cooperative intent

### Last Round
- **Cooperate (C)** if stock > capacity/2 (maintain cooperative reputation)
- **Defect (D)** if stock ≤ capacity/2 (extract remaining value safely)

### Stock Depletion Scenarios
- If stock reaches 0: Automatically cooperate for remainder of game (allow regeneration)
- If stock has been 0 for 2+ consecutive rounds: Continue cooperating (patience for recovery)

## Pseudocode

```python
def decide_action(round_num, current_stock, history, n_players, capacity, total_rounds):
    # Edge case: First round
    if round_num == 1:
        return "C"
    
    # Critical sustainability override
    if current_stock <= capacity / 4:
        return "C"
    
    # Maximum capacity override
    if current_stock == capacity:
        return "D"
    
    # Last round special handling
    if round_num == total_rounds:
        if current_stock > capacity / 2:
            return "C"
        else:
            return "D"
    
    # Stock depletion recovery mode
    if current_stock == 0:
        return "C"
    
    # Main decision rule: Follow majority behavior from previous round
    previous_round = history[round_num - 2]  # Previous round actions
    other_players_actions = [action for i, action in enumerate(previous_round) 
                           if i != my_player_index]
    
    cooperators = sum(1 for action in other_players_actions if action == "C")
    defectors = len(other_players_actions) - cooperators
    
    # Majority cooperation or tie -> Cooperate
    if cooperators >= defectors:
        return "C"
    else:
        return "D"
```

## Strategic Rationale

1. **Sustainability Focus**: The stock-based overrides ensure the pool doesn't collapse completely, which hurts everyone long-term.

2. **Reciprocal Cooperation**: Following majority behavior encourages group cooperation while protecting against mass defection.

3. **Forgiveness**: The cooperative bias in ties and the willingness to cooperate when stock is critical shows forgiveness and leadership toward sustainability.

4. **Exploitation Resistance**: By defecting when the majority defects, the strategy avoids being a "sucker" while still maintaining cooperative potential.

5. **End-game Reasoning**: The last round logic balances extracting value when the pool is depleted vs. maintaining cooperative reputation when sustainable.

6. **Recovery Support**: Automatic cooperation during stock depletion phases helps the group recover from previous over-exploitation.

This strategy should perform well against other cooperative strategies while being robust against purely selfish ones, making it effective in a mixed tournament environment.
'''

description_COOPERATIVE_118 = '''
I'll design a cooperative strategy called **"Adaptive Trust with Sustainability Guard"** that balances cooperation with protection against resource collapse.

## Strategy Overview

The core principle is to start cooperatively but adapt based on observed behavior while maintaining a sustainability threshold to prevent resource collapse.

## Decision Rules

### Phase 1: Trust Building (Rounds 1-3 or first 25% of rounds, whichever is smaller)
- **Always cooperate (C)** to establish cooperative norms
- Track other players' cooperation rates during this phase

### Phase 2: Adaptive Cooperation (Middle rounds)
- **Primary Rule**: Cooperate if the majority of players cooperated in the previous round
- **Sustainability Guard**: Always cooperate if stock level falls below `capacity/4` (emergency conservation)
- **Punishment**: If stock falls below `capacity/2` and less than 50% cooperated last round, defect once as punishment

### Phase 3: End Game Handling (Last 10% of rounds)
- **Modified reciprocity**: Cooperate only if at least 75% of players cooperated in the previous round
- **Final round**: Cooperate (maintain reputation for future interactions)

## Pseudocode

```
function decide_action(round, stock, history, n, r, capacity):
    trust_phase_length = min(3, floor(r * 0.25))
    endgame_threshold = floor(r * 0.9)
    
    # Phase 1: Trust Building
    if round <= trust_phase_length:
        return C
    
    # Calculate cooperation rate from last round
    last_round_coop_rate = count_cooperators_last_round(history) / n
    
    # Sustainability Guard - emergency conservation
    if stock < capacity / 4:
        return C
    
    # Phase 3: End Game
    if round >= endgame_threshold:
        if round == r:  # Final round
            return C
        if last_round_coop_rate >= 0.75:
            return C
        else:
            return D
    
    # Phase 2: Adaptive Cooperation
    # Punishment for low cooperation during resource stress
    if stock < capacity / 2 and last_round_coop_rate < 0.5:
        return D
    
    # Main cooperation rule
    if last_round_coop_rate >= 0.5:
        return C
    else:
        return D
```

## Key Features

1. **Cooperative Start**: Begins with unconditional cooperation to establish trust and signal cooperative intent

2. **Majority Rule**: Follows the majority behavior, encouraging collective cooperation while protecting against exploitation

3. **Sustainability Protection**: Prioritizes resource conservation when stock is critically low, recognizing that resource collapse hurts everyone

4. **Graduated Response**: Uses measured punishment (single defection) rather than permanent retaliation

5. **End Game Cooperation**: Cooperates in the final round to maintain reputation, as this is often reciprocated by forward-thinking players

## Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent
- **After Resource Collapse**: Prioritize cooperation to rebuild stock
- **Last Round**: Cooperate to maintain reputation
- **High Defection Environment**: Still cooperate when resources are critically low to prevent total collapse

## Cooperative Alignment

This strategy embodies cooperation by:
- Starting with trust and good faith
- Prioritizing collective resource sustainability
- Using minimal punishment rather than harsh retaliation
- Maintaining cooperation even when individually disadvantageous (sustainability guard)
- Ending on a cooperative note

The strategy recognizes that in a common pool resource game, mutual cooperation is essential for long-term success, and it's designed to foster and maintain cooperative equilibria while having enough adaptability to survive in mixed environments.
'''

description_COOPERATIVE_119 = '''
I'll design a cooperative strategy called **"Conditional Cooperator with Sustainability Guardian"** that balances cooperation with resource preservation.

## Strategy Overview

This strategy operates on two core principles:
1. **Default Cooperation**: Start cooperatively and maintain cooperation when others reciprocate
2. **Sustainability Protection**: Defect when the resource is critically endangered, even if others are cooperating

## Decision Rules

### Primary Logic:
```pseudocode
function decide_action(current_stock, round_number, total_rounds, history):
    // Emergency sustainability check
    if current_stock <= sustainability_threshold:
        return COOPERATE  // Always cooperate when stock is critically low
    
    // First round: always cooperate
    if round_number == 1:
        return COOPERATE
    
    // Calculate cooperation metrics from last round
    defection_rate = count_defectors_last_round() / total_players
    my_recent_cooperation_rate = my_cooperation_in_last_3_rounds()
    
    // Cooperative decision tree
    if defection_rate <= 0.25:  // Most players cooperating
        return COOPERATE
    elif defection_rate <= 0.5:  // Mixed behavior
        if my_recent_cooperation_rate >= 0.67:
            return COOPERATE  // I've been cooperative, continue
        else:
            return COOPERATE  // Give cooperation another chance
    else:  // Majority defecting (defection_rate > 0.5)
        if round_number >= total_rounds - 2:  // Last 2 rounds
            return COOPERATE  // End game cooperation
        else:
            return DEFECT  // Temporary punishment
```

### Key Thresholds:
- **Sustainability Threshold**: `capacity * 0.3` (30% of maximum capacity)
- **High Defection Threshold**: 50% of players defected last round
- **Cooperation Memory**: Consider last 3 rounds for self-assessment

## Edge Case Handling

### First Round:
- Always COOPERATE to signal cooperative intent and establish good initial stock dynamics

### Last Two Rounds:
- Always COOPERATE regardless of others' recent behavior
- Rationale: No future rounds for retaliation, so maximize final resource extraction through cooperation

### Stock Depletion Emergency:
- When stock ≤ 30% of capacity: Always COOPERATE
- Rationale: Even if others defect, cooperation helps preserve what little remains

### All Players Defected Previously:
- Still COOPERATE if it's the last 2 rounds or stock is critically low
- Otherwise, DEFECT once as punishment, then return to cooperation

## Cooperative Mindset Alignment

1. **Optimistic Start**: Begin with cooperation to establish positive dynamics
2. **Forgiveness**: Quick return to cooperation after punishment
3. **Collective Responsibility**: Prioritize resource sustainability over short-term gains
4. **End-Game Cooperation**: Avoid destructive final-round defection cascades
5. **Proportional Response**: Punishment severity matches the level of defection observed

## Strategic Reasoning

This strategy assumes that other LLM-generated strategies will likely:
- Recognize the long-term benefits of cooperation
- Respond to cooperative signals
- Have some form of punishment mechanism for defection
- Potentially include sustainability considerations

The strategy is robust against:
- **Pure defectors**: Punishes them briefly but doesn't get locked in defection cycles
- **Tit-for-tat variants**: Maintains cooperative relationship through reciprocity
- **Random players**: Benefits from their occasional cooperation while protecting against their defection
- **Resource depletion**: Guarantees cooperative behavior when sustainability is at risk

By combining conditional cooperation with sustainability safeguards, this strategy aims to achieve high collective welfare while remaining competitive against various opponent types.
'''

description_COOPERATIVE_120 = '''
# Cooperative Strategy: "Adaptive Trust with Sustainability Focus"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while building and maintaining cooperative relationships. It balances trust-building with protection against exploitation, using the stock level as a key signal for adjusting behavior.

## Decision Rules

### Primary Decision Framework:
```pseudocode
if round == 1:
    return COOPERATE  // Start with trust
    
if stock_level <= capacity * 0.2:  // Critical threshold (20% of capacity)
    return COOPERATE  // Emergency conservation mode
    
if round == final_round:
    if stock_level >= capacity * 0.5:
        return COOPERATE  // Maintain cooperation if resource is healthy
    else:
        return DEFECT    // Last chance to benefit from depleted resource
        
// Main decision logic
cooperation_ratio = count_cooperators_last_round / total_players
my_recent_cooperation = my_cooperation_in_last_3_rounds

if cooperation_ratio >= 0.75:  // High cooperation environment
    return COOPERATE
    
if cooperation_ratio >= 0.5 AND stock_level >= capacity * 0.6:
    return COOPERATE  // Moderate cooperation with healthy stock
    
if cooperation_ratio < 0.25:  // Low cooperation environment
    if my_recent_cooperation >= 0.67:  // I've been mostly cooperative
        return DEFECT    // Defensive defection to avoid exploitation
    else:
        return COOPERATE  // Give cooperation another chance
        
// Default case: moderate cooperation environment
if stock_level >= capacity * 0.4:
    return COOPERATE
else:
    return DEFECT
```

## Key Strategic Components

### 1. **Sustainability-First Approach**
- Always cooperate when stock drops to critical levels (≤20% capacity)
- This prevents resource collapse and signals commitment to long-term thinking
- Shows other players that sustainability is prioritized over short-term gains

### 2. **Reciprocal Cooperation**
- Start with cooperation to signal good intentions
- Maintain cooperation when others do (≥75% cooperation rate)
- Respond to the overall cooperation level rather than individual players to avoid getting trapped in bilateral conflicts

### 3. **Adaptive Response to Environment**
- In high-cooperation environments (≥75% cooperating): Always cooperate
- In moderate-cooperation environments (50-74%): Cooperate if stock is healthy
- In low-cooperation environments (<25%): Use defensive defection but give periodic chances for cooperation revival

### 4. **Stock-Level Awareness**
- Use stock level as a key decision input
- Higher cooperation threshold when stock is healthy
- Emergency cooperation when stock is critically low

### 5. **End-Game Handling**
- Generally cooperate in final round if stock is healthy (≥50% capacity)
- Only defect in final round if stock is already severely depleted
- This maintains reputation and avoids unnecessary resource destruction

## Edge Cases

### First Round
- Always cooperate to establish trustworthy reputation
- Sets positive tone for potential cooperative relationships

### Last Round
- Context-dependent: cooperate if stock is healthy, defect only if stock is already severely damaged
- Avoids the typical "end-game defection" that destroys remaining resources

### Resource Collapse Scenarios
- If stock hits critical levels, switch to emergency cooperation regardless of others' behavior
- This can serve as a coordination mechanism to rebuild the resource

### Mixed Cooperation Environments
- Track personal cooperation history to avoid being perpetually exploited
- If being consistently cooperative while others defect, temporarily defect to avoid exploitation
- Return to cooperation periodically to test if environment has improved

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Default to Cooperation**: Baseline tendency is to cooperate
2. **Sustainability Priority**: Never willingly participate in resource destruction
3. **Reciprocity**: Rewards cooperative environments with continued cooperation
4. **Forgiveness**: Gives periodic chances for cooperation even in hostile environments
5. **Collective Benefit**: Focuses on maintaining the resource for all players rather than maximizing individual short-term gains

The strategy assumes other LLMs may also prioritize sustainability and cooperation, while protecting against purely selfish strategies through adaptive defection when necessary.
'''

description_COOPERATIVE_121 = '''
Looking at this Common Pool Resource Game, I need to design a strategy that promotes cooperation while being robust against exploitation. The key insight is that this game has a tragedy-of-the-commons structure where mutual cooperation (all C) sustains the resource, but defection provides short-term gains at long-term cost.

## Strategy: "Forgiving Tit-for-Tat with Stock Protection"

### Core Principle
Start cooperative and reciprocate the majority behavior, but switch to resource protection mode when the stock becomes critically low.

### Decision Rules

```pseudocode
STRATEGY: ForgivingTitForTat_StockProtection

INPUTS: 
- current_round (t)
- total_rounds (r) 
- current_stock (S)
- capacity
- n (number of players)
- history of all players' actions

THRESHOLDS:
- CRITICAL_STOCK = capacity * 0.3
- COOPERATION_THRESHOLD = 0.5  // majority threshold
- FORGIVENESS_PROBABILITY = 0.2

MAIN LOGIC:

IF current_round == 1:
    RETURN C  // Always cooperate in first round

IF current_stock <= CRITICAL_STOCK:
    RETURN C  // Always cooperate when stock is critically low

// Calculate cooperation rate in previous round
prev_cooperators = count(action == C for all players in round t-1)
cooperation_rate = prev_cooperators / n

// Core reciprocity logic
IF cooperation_rate >= COOPERATION_THRESHOLD:
    RETURN C  // Reciprocate cooperation
ELSE:
    // Majority defected, but consider forgiveness
    IF random() < FORGIVENESS_PROBABILITY:
        RETURN C  // Occasional forgiveness to restart cooperation
    ELSE:
        RETURN D  // Reciprocate defection
```

### Key Components

1. **Cooperative Start**: Always begin with cooperation to signal good intentions and give cooperation a chance to emerge.

2. **Majority-Based Reciprocity**: Respond to what the majority did in the previous round rather than punishing individual defectors. This prevents spiral effects from single defections.

3. **Stock Protection**: When stock falls below 30% of capacity, always cooperate regardless of others' behavior. This prevents resource collapse and gives the stock a chance to recover.

4. **Forgiveness Mechanism**: Even when the majority defected, occasionally (20% chance) cooperate anyway to provide opportunities for cooperation to re-emerge.

5. **No End-Game Defection**: The strategy doesn't change behavior in the final round, maintaining consistency.

### Edge Case Handling

- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Maintain normal strategy (no special end-game behavior)
- **Stock Depletion**: Priority shifts to resource preservation when stock is critically low
- **Mixed Signals**: Uses majority rule to avoid overreacting to individual defections

### Cooperative Alignment

This strategy is fundamentally cooperative because it:
- Starts with cooperation
- Prioritizes long-term resource sustainability over short-term gains
- Includes forgiveness to restart cooperation cycles
- Responds proportionally rather than harshly to defection
- Protects the common resource when it's threatened

### Strategic Rationale

The strategy balances several important considerations:
1. **Incentive Compatibility**: Rewards cooperation and discourages defection through reciprocity
2. **Robustness**: Handles both cooperative and hostile opponents reasonably well
3. **Sustainability**: Actively protects the resource base needed for long-term payoffs
4. **Flexibility**: Can recover from cooperation breakdowns through forgiveness
5. **Clarity**: Provides clear, consistent signals about cooperative intent

This approach should perform well against other cooperative strategies while maintaining reasonable defense against exploitative ones, all while prioritizing the long-term health of the common resource.
'''

description_COOPERATIVE_122 = '''
## Cooperative Strategy: "Graduated Reciprocity with Stock Protection"

### Core Philosophy
This strategy prioritizes long-term collective welfare while protecting against exploitation. It starts cooperatively but adapts based on observed behavior and resource health.

### Decision Rules

**Primary Decision Logic:**
```pseudocode
if round == 1:
    return COOPERATE
    
if stock_level <= critical_threshold:
    return COOPERATE  // Always protect depleted resources
    
if last_round:
    if stock_health >= 0.7:
        return COOPERATE  // Leave resources healthy for conceptual "next game"
    else:
        return DEFECT    // Extract remaining value from damaged resources
        
// Main reciprocity logic
cooperation_rate = count_cooperators_last_round / total_players
my_cooperation_threshold = base_threshold + stock_bonus + trend_adjustment

if cooperation_rate >= my_cooperation_threshold:
    return COOPERATE
else:
    return DEFECT
```

### Key Parameters

1. **Critical Threshold**: `stock_level < capacity * 0.2`
   - When resources are severely depleted, always cooperate to enable recovery

2. **Base Cooperation Threshold**: `0.4`
   - Cooperate if at least 40% of others cooperated last round

3. **Stock Health Bonus**: `min(0.3, (stock_level/capacity - 0.5) * 0.6)`
   - When resources are healthy, be more forgiving (lower threshold)
   - When resources are stressed, demand higher cooperation rates

4. **Trend Adjustment**: Track cooperation trends over last 3 rounds
   - If cooperation is increasing: reduce threshold by 0.1
   - If cooperation is decreasing: increase threshold by 0.1

### Edge Cases

**Round 1**: Always COOPERATE
- Establish cooperative intent
- No history to base decisions on

**Last Round**: Conditional cooperation
- If stock health ≥ 70%: COOPERATE (maintain resource health)
- If stock health < 70%: DEFECT (extract remaining value)

**Severely Depleted Resources**: Always COOPERATE
- When stock < 20% of capacity, prioritize recovery over reciprocity
- Prevents complete resource collapse

**All-Defection Scenarios**: 
- If everyone defected last round AND stock > critical threshold: DEFECT once in retaliation
- Then return to cooperation attempts to break negative cycles

### Cooperative Alignment

1. **Default Cooperation**: Starts cooperatively and maintains cooperative bias
2. **Resource Protection**: Prioritizes long-term resource health over short-term gains
3. **Forgiveness**: Uses graduated responses rather than permanent punishment
4. **Recovery Focus**: Emphasizes collective recovery when resources are depleted

### Strategic Reasoning

This strategy balances three key elements:
- **Cooperation**: Default to working together for collective benefit
- **Protection**: Guard against both resource depletion and exploitation
- **Adaptation**: Respond to observed behavior patterns while maintaining cooperative orientation

The graduated thresholds ensure the strategy remains cooperative even when facing some defectors, while the stock protection mechanisms prevent tragedy-of-the-commons scenarios. The trend tracking helps identify and respond to improving or deteriorating cooperation patterns.
'''

description_COOPERATIVE_123 = '''
# Adaptive Cooperative Strategy: "Sustainable Harvest with Graduated Response"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to other players' behavior. It starts with full cooperation but adapts based on observed defection patterns to maintain both sustainability and fairness.

## Decision Rules

### Primary Rule: Stock-Based Cooperation Threshold
```pseudocode
if (current_stock / capacity) >= 0.5:
    base_action = COOPERATE
else:
    base_action = evaluate_defection_necessity()
```

### Defection Response System
```pseudocode
defection_rate = count_defections_last_3_rounds() / (3 * n)

if defection_rate >= 0.75:
    // Majority consistently defecting - emergency response
    action = DEFECT
elif defection_rate >= 0.5:
    // Significant defection - conditional cooperation
    if current_stock >= capacity * 0.3:
        action = COOPERATE  // Try to maintain sustainability
    else:
        action = DEFECT     // Prevent exploitation when stock is low
elif defection_rate >= 0.25:
    // Moderate defection - tit-for-tat with forgiveness
    if was_exploited_last_round():
        action = DEFECT
    else:
        action = COOPERATE
else:
    // Low defection - maintain cooperation
    action = COOPERATE
```

## Edge Case Handling

### First Round
- **Always COOPERATE**: Establish cooperative intent and test for reciprocal cooperation.

### Last Round Analysis
```pseudocode
if current_round == final_round:
    if current_stock <= capacity * 0.2:
        action = DEFECT  // Stock critically low, maximize final payoff
    elif average_cooperation_rate >= 0.7:
        action = COOPERATE  // Reward consistent cooperators
    else:
        action = DEFECT  // Don't be exploited in final round
```

### Critical Stock Levels
```pseudocode
if current_stock <= capacity * 0.1:
    // Emergency: Stock near depletion
    if all_players_cooperated_last_round():
        action = COOPERATE  // Everyone trying to save it
    else:
        action = DEFECT     // Grab what's left before others do
```

## Sustainability Monitoring

### Stock Recovery Assessment
```pseudocode
if current_stock < previous_stock * 0.8:
    // Stock declining rapidly
    increase_cooperation_tendency()
    
if current_stock >= capacity * 0.9:
    // Stock near full capacity
    maintain_current_cooperation_level()
```

### Adaptive Forgiveness Mechanism
```pseudocode
rounds_since_major_defection = count_rounds_since_defection_rate_above(0.5)

if rounds_since_major_defection >= 3:
    // Reset to more trusting posture
    reset_cooperation_bias()
    reduce_retaliation_sensitivity()
```

## Complete Strategy Logic

```pseudocode
function decide_action(round_number, stock_level, game_history):
    
    // First round: Always cooperate
    if round_number == 1:
        return COOPERATE
    
    // Calculate recent defection patterns
    recent_defection_rate = calculate_defection_rate(last_3_rounds)
    stock_ratio = stock_level / capacity
    
    // Emergency stock protection
    if stock_ratio <= 0.1:
        if recent_defection_rate <= 0.1:
            return COOPERATE  // Everyone cooperating to save stock
        else:
            return DEFECT     // Grab remaining resources
    
    // Final round considerations
    if round_number == total_rounds:
        if stock_ratio <= 0.2 or recent_defection_rate >= 0.5:
            return DEFECT
        else:
            return COOPERATE
    
    // Main decision logic
    if stock_ratio >= 0.5:
        // Stock healthy - focus on cooperation
        if recent_defection_rate >= 0.75:
            return DEFECT  // Too much defection, protect self
        elif recent_defection_rate >= 0.5:
            // Conditional cooperation based on stock level
            return stock_ratio >= 0.3 ? COOPERATE : DEFECT
        else:
            return COOPERATE
    else:
        // Stock stressed - more defensive
        if recent_defection_rate >= 0.5:
            return DEFECT
        elif recent_defection_rate >= 0.25:
            return was_exploited_last_round() ? DEFECT : COOPERATE
        else:
            return COOPERATE
```

## Key Features

1. **Starts Cooperative**: Establishes good faith and tests for reciprocal cooperation
2. **Stock-Aware**: Adjusts strategy based on resource sustainability
3. **Graduated Response**: Responds proportionally to defection levels rather than binary retaliation
4. **Forgiving**: Allows recovery from conflict periods when cooperation returns
5. **End-Game Aware**: Prevents final-round exploitation while rewarding consistent cooperators
6. **Sustainability-Focused**: Prioritizes long-term resource preservation over short-term gains

This strategy balances cooperation with self-protection, aiming to maintain sustainable resource levels while adapting to the actual behavior patterns observed in the tournament environment.
'''

description_COOPERATIVE_124 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority Coalition"

## Core Philosophy
This strategy aims to maintain long-term sustainability while being cooperative, but adapts based on observed behavior to prevent exploitation. It seeks to build and maintain a coalition of cooperators while having mechanisms to respond to defection patterns.

## Decision Rules

### Primary Strategy: Conditional Cooperation with Forgiveness
```
if round == 1:
    return COOPERATE
    
else:
    cooperation_rate = count_cooperators_last_round() / n
    stock_health = current_stock / capacity
    
    if stock_health < 0.3:  # Crisis mode
        return crisis_response()
    elif cooperation_rate >= 0.5:  # Majority cooperating
        return maintain_cooperation()
    else:  # Minority cooperating
        return adaptive_response()
```

## Detailed Strategy Components

### 1. Opening Strategy
- **Round 1**: Always COOPERATE to signal cooperative intent
- **Round 2**: COOPERATE regardless of others' Round 1 actions (give benefit of doubt)

### 2. Majority Coalition Maintenance
When ≥50% of players cooperated in the previous round:
- **Default**: COOPERATE
- **Rationale**: Sustainable extraction is possible with majority cooperation

### 3. Adaptive Response (Minority Cooperation)
When <50% of players cooperated in the previous round:
```
defection_trend = calculate_defection_trend(last_3_rounds)
my_recent_payoff_trend = calculate_payoff_trend(last_3_rounds)

if defection_trend > 0.6 AND my_recent_payoff_trend < 0:
    return DEFECT  # Protect against systematic exploitation
elif stock_health > 0.7 AND cooperation_rate > 0.25:
    return COOPERATE  # Try to rebuild coalition when stock is healthy
else:
    return tit_for_majority()  # Mirror majority behavior
```

### 4. Crisis Response (Stock < 30% capacity)
```
if current_stock < 0.1 * capacity:
    return COOPERATE  # Emergency conservation
elif last_round_cooperation_rate > 0.5:
    return COOPERATE  # Crisis cooperation
else:
    return DEFECT     # If others won't conserve in crisis, grab what's left
```

### 5. Endgame Strategy (Final 20% of rounds)
```
remaining_rounds = r - current_round + 1
if remaining_rounds <= 0.2 * r:
    if stock_health > 0.8:
        return COOPERATE  # Sustainable to the end
    elif cooperation_rate_recent > 0.5:
        return COOPERATE  # Maintain cooperation if others do
    else:
        return DEFECT     # Endgame defection if cooperation has broken down
```

## Edge Case Handling

### First Round
- Always COOPERATE to establish cooperative reputation

### Last Round
- If stock > 50% capacity AND recent cooperation rate > 50%: COOPERATE
- Otherwise: DEFECT (no future consequences)

### Stock Depletion
- If stock approaches zero (< 10% capacity): COOPERATE for any chance of recovery
- If stock is critically low but stable: Continue primary strategy

### All Others Defecting
- After 3 consecutive rounds of being the only cooperator: Switch to DEFECT
- Return to COOPERATE if cooperation rate improves above 25%

## Key Features

### Cooperative Elements
1. **Default Cooperation**: Starts cooperative and maintains cooperation when viable
2. **Coalition Building**: Actively tries to maintain cooperative majorities
3. **Forgiveness**: Returns to cooperation when others show willingness
4. **Crisis Conservation**: Prioritizes resource sustainability in emergencies

### Adaptive Elements
1. **Exploitation Protection**: Switches to defection when being systematically exploited
2. **Trend Analysis**: Uses 3-round moving averages to detect behavioral patterns
3. **Stock-Sensitive**: Adjusts strategy based on resource health
4. **Endgame Awareness**: Recognizes changing incentives near game end

### Robustness Features
1. **Multi-threshold System**: Uses different cooperation rate thresholds for different situations
2. **Stock Health Integration**: Combines behavioral and environmental factors
3. **Gradual Response**: Doesn't immediately punish single-round defections
4. **Recovery Mechanism**: Always willing to return to cooperation when conditions improve

This strategy balances the need to be genuinely cooperative with the necessity of protecting against exploitation, while maintaining focus on long-term resource sustainability.
'''

description_COOPERATIVE_125 = '''
# Adaptive Cooperative Strategy: "Sustainable Harvest"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperatively but adapts to prevent exploitation while maintaining cooperative potential.

## Decision Rules

### 1. Opening Cooperation (Round 1)
- **Always play C** in the first round
- Rationale: Signal cooperative intent and give the group the best chance at sustainable resource management

### 2. Adaptive Response (Rounds 2 to r-1)

```pseudocode
if round == 1:
    return C
    
if round == final_round:
    return calculate_final_round_action()
    
// Calculate cooperation metrics from previous round
defection_rate = count_defectors_last_round / n
stock_health = current_stock / capacity

// Adaptive thresholds based on game size
base_tolerance = 0.3  // Base defection tolerance
size_adjustment = min(0.2, (n-2) * 0.05)  // More tolerant in larger groups
tolerance_threshold = base_tolerance + size_adjustment

if defection_rate <= tolerance_threshold AND stock_health > 0.4:
    return C  // Continue cooperating in healthy environment
    
elif defection_rate > 0.6 OR stock_health < 0.2:
    return D  // Protect against collapse/heavy exploitation
    
else:
    // Mixed response zone: probabilistic cooperation
    coop_probability = (1 - defection_rate) * stock_health
    return random_choice(C with probability coop_probability, else D)
```

### 3. Final Round Strategy (Round r)
```pseudocode
stock_health = current_stock / capacity
cooperation_history = total_cooperative_actions / (total_actions - n)  // Exclude round 1

if stock_health < 0.15:
    return D  // Resource nearly depleted, grab what's left
    
elif cooperation_history > 0.6:
    return C  // Reward consistent cooperation
    
else:
    // Calculate expected payoff difference
    expected_coop_payoff = current_stock / (2n)
    expected_defect_payoff = current_stock / n
    
    if expected_defect_payoff - expected_coop_payoff > capacity/(4n):
        return D  // Significant advantage to defecting
    else:
        return C  // Maintain cooperative reputation
```

## Edge Case Handling

### Stock Depletion Crisis
- If stock drops below 10% of capacity: Switch to D until stock recovers above 25%
- If stock reaches zero: Play D (no choice, really)

### High Cooperation Environment
- If ≥80% of players cooperated in last 2 rounds: Continue with C
- Reward and maintain highly cooperative equilibria

### Endgame Considerations
- In final 20% of rounds: Slightly increase defection threshold to account for others' endgame defections
- Never completely abandon cooperation until the very last round

## Key Features

1. **Graduated Response**: Uses thresholds rather than binary reactions to avoid unnecessary escalation

2. **Stock-Aware**: Considers resource health, not just player behavior

3. **Group Size Adaptive**: More tolerant in larger groups where individual defection has less impact

4. **Forgiveness Mechanism**: Can return to cooperation if conditions improve

5. **Exploitation Prevention**: Won't be a pure cooperator that gets exploited indefinitely

## Cooperative Alignment
- Starts and defaults to cooperation
- Only defects in response to genuine threats (high defection rates or resource crisis)
- Maintains potential for cooperative restoration
- Considers long-term sustainability over short-term gains
- Rewards group-beneficial behavior patterns

This strategy balances the cooperative ideal with practical survival needs, aiming to foster and maintain cooperative equilibria while protecting against exploitation and resource collapse.
'''

description_COOPERATIVE_126 = '''
I'll design a cooperative strategy called "Adaptive Sustainability Cooperator" (ASC) that balances cooperation with strategic responses to maintain the common pool resource while dealing with potential defectors.

## Strategy: Adaptive Sustainability Cooperator (ASC)

### Core Principles
1. **Default to cooperation** to maintain resource sustainability
2. **Punish systematic defection** to discourage exploitation
3. **Forgive occasional defection** to avoid destructive cycles
4. **Adapt based on resource health** to prevent collapse

### Decision Rules

```pseudocode
STRATEGY: Adaptive Sustainability Cooperator (ASC)

INITIALIZE:
- cooperation_threshold = 0.6  // Minimum fraction of players needed cooperating
- forgiveness_rounds = 2       // Rounds to punish before forgiving
- critical_stock_ratio = 0.3   // When stock/capacity falls below this, be more cooperative
- punishment_memory = {}       // Track punishment status for each player

FOR each round t:
    current_stock_ratio = current_stock / capacity
    
    // FIRST ROUND: Always cooperate
    IF t == 1:
        RETURN C
    
    // CRITICAL STOCK: Cooperate to save resource
    IF current_stock_ratio < critical_stock_ratio:
        RETURN C
    
    // LAST ROUND: Cooperate (no future to worry about)
    IF t == final_round:
        RETURN C
    
    // MAIN DECISION LOGIC:
    cooperation_rate = count_cooperators_last_round / n
    my_recent_defections = count_my_defections_last_3_rounds
    
    // If resource is healthy and cooperation rate is good, cooperate
    IF cooperation_rate >= cooperation_threshold AND current_stock_ratio > 0.5:
        RETURN C
    
    // If I've been defecting too much recently, cooperate to restore balance
    IF my_recent_defections >= 2:
        RETURN C
    
    // Targeted punishment: Defect only if there are persistent free riders
    persistent_defectors = count_players_with_defection_rate_above(0.7, last_3_rounds)
    
    IF persistent_defectors > 0 AND cooperation_rate < cooperation_threshold:
        // Limited punishment: defect for max 2 rounds then return to cooperation
        IF rounds_since_punishment_started <= forgiveness_rounds:
            RETURN D
        ELSE:
            reset_punishment_counter()
            RETURN C
    
    // Default: Cooperate
    RETURN C
```

### Key Features

**1. Cooperative Foundation**
- Always starts with cooperation (C) in round 1
- Always cooperates in the final round to avoid last-round defection cascades
- Default action is cooperation when uncertain

**2. Resource Protection**
- When stock falls below 30% of capacity, always cooperate regardless of others' behavior
- Prioritizes long-term sustainability over short-term gains

**3. Adaptive Punishment**
- Only punishes when cooperation rate drops below 60% AND there are persistent defectors
- Punishment is limited to 2 rounds maximum before returning to cooperation
- Avoids punishing occasional defectors who might be using similar adaptive strategies

**4. Self-Regulation**
- Monitors own defection history and returns to cooperation if defecting too frequently
- Prevents getting stuck in destructive punishment cycles

**5. Forgiveness Mechanism**
- Built-in forgiveness after punishment periods
- Gives other players opportunity to return to cooperation

### Edge Case Handling

- **Round 1**: Always cooperate (no information about others yet)
- **Final Round**: Always cooperate (no future punishment possible)
- **Critical Stock**: Always cooperate when resource is endangered
- **All Others Defect**: Still cooperates when stock is critical, otherwise limited punishment
- **High Cooperation**: Maintains cooperation to support the cooperative equilibrium

### Strategic Rationale

This strategy is designed to:
1. **Establish and maintain cooperation** through consistent cooperative behavior
2. **Protect against exploitation** through targeted, limited punishment
3. **Preserve the resource** by prioritizing sustainability over short-term payoffs
4. **Adapt to various opponent strategies** while maintaining cooperative orientation
5. **Avoid destructive spirals** through forgiveness and self-regulation

The strategy assumes that other LLMs may implement similar cooperative-minded approaches with punishment mechanisms, so it's designed to work well in a mixed population while being robust against pure defectors.
'''

description_COOPERATIVE_127 = '''
# Adaptive Forgiveness Strategy (AFS)

## Core Philosophy
This strategy balances cooperative intent with protection against exploitation, using stock health as a key signal for strategic adaptation.

## Decision Rules

### Phase Classification
The strategy operates in three phases based on stock health:

```
stock_health = current_stock / capacity

if stock_health >= 0.7:
    phase = "HEALTHY"
elif stock_health >= 0.3:
    phase = "CRITICAL" 
else:
    phase = "COLLAPSE"
```

### Primary Decision Logic

```pseudocode
COOPERATE if:
1. Round 1 (always start cooperatively)
OR
2. (phase == HEALTHY AND cooperation_rate >= 0.5)
OR  
3. (phase == CRITICAL AND cooperation_rate >= 0.7)
OR
4. (phase == COLLAPSE AND cooperation_rate >= 0.8)

Otherwise DEFECT
```

Where `cooperation_rate = (players who played C last round) / n`

### Forgiveness Mechanism
After defecting due to low cooperation, return to cooperation if:
- Stock health improves by ≥0.1 from when defection began, OR
- Opponents show sustained cooperation (≥75% cooperation rate for 2+ consecutive rounds)

### Edge Case Handling

**Round 1:** Always COOPERATE (establish cooperative intent)

**Last Round:** 
- If stock_health ≥ 0.5: COOPERATE (reward good stewardship)
- If stock_health < 0.5: DEFECT (extract remaining value)

**Stock Depletion:** If stock falls below 10% of capacity, switch to pure defection (tragedy unavoidable)

**Equilibrium Detection:** If all players cooperated for 3+ consecutive rounds with healthy stock, continue cooperating regardless of short-term fluctuations

## Strategic Rationale

1. **Graduated Response:** Cooperation thresholds increase as stock becomes more critical, encouraging collective action when it matters most

2. **Forgiveness:** Allows recovery from mutual defection spirals when conditions improve

3. **Stock-Aware:** Uses resource health as a coordination signal that all players can observe

4. **Exploitation Protection:** Defects against consistently uncooperative opponents while remaining open to cooperation

5. **Endgame Consideration:** Balances final-round incentives with rewarding successful cooperation

This strategy aims to establish and maintain cooperation while being robust against various opponent strategies, using the shared information of stock levels as a natural coordination mechanism.
'''

description_COOPERATIVE_128 = '''
# Adaptive Cooperative Strategy: "Sustainable Majority"

## Core Philosophy
This strategy aims to maintain long-term sustainability by cooperating when possible while protecting against exploitation. It recognizes that cooperation is most beneficial when the stock is healthy and when other players are also cooperative.

## Decision Rules

### Primary Rule: Stock-Based Cooperation
```
IF current_stock >= capacity * 0.6:
    Cooperate (play C)
ELSE IF current_stock >= capacity * 0.3:
    Use Conditional Cooperation
ELSE:
    Use Emergency Protocol
```

### Conditional Cooperation (when stock is moderate)
```
cooperation_ratio = count_cooperators_last_round / total_players

IF cooperation_ratio >= 0.5:
    Cooperate (play C)
ELSE:
    Defect (play D)
```

### Emergency Protocol (when stock is critically low)
```
IF current_stock < capacity * 0.3:
    IF rounds_remaining > 3:
        Cooperate (play C)  // Try to rebuild
    ELSE:
        Defect (play D)     // Extract remaining value
```

## Edge Case Handling

### First Round
- **Always Cooperate**: Start with cooperation to signal cooperative intent and test other players' strategies.

### Last Round
- **Defect**: In the final round, there's no future benefit from cooperation, so maximize immediate payoff.

### Second-to-Last Round
- **Cooperate if stock > 50% capacity**: Give others one last chance to cooperate for mutual benefit.
- **Otherwise Defect**: If stock is too depleted, prioritize immediate payoff.

### Stock Depletion Scenarios
```
IF stock approaches zero (< capacity * 0.1):
    IF rounds_remaining >= 4:
        Cooperate // Attempt recovery
    ELSE:
        Defect   // No time for recovery
```

## Adaptive Elements

### Forgiveness Mechanism
- After 3 consecutive rounds of mutual defection, attempt cooperation once to test if others want to rebuild.

### Trust Building
- If cooperation ratio improves for 2 consecutive rounds, continue cooperating even if stock drops slightly below normal thresholds.

## Complete Strategy Pseudocode

```pseudocode
STRATEGY SustainableMajority:

FUNCTION decide_action(round, stock, history, players):
    // Edge cases first
    IF round == 1:
        RETURN C
    
    IF round == total_rounds:
        RETURN D
    
    IF round == total_rounds - 1 AND stock >= capacity * 0.5:
        RETURN C
    
    // Calculate cooperation metrics
    last_round_cooperators = count_cooperators(history[round-1])
    cooperation_ratio = last_round_cooperators / players
    
    // Stock-based decision making
    stock_ratio = stock / capacity
    
    IF stock_ratio >= 0.6:
        RETURN C
    
    ELSE IF stock_ratio >= 0.3:
        IF cooperation_ratio >= 0.5:
            RETURN C
        ELSE:
            RETURN D
    
    ELSE: // Emergency protocol (stock < 30%)
        IF total_rounds - round > 3:
            RETURN C  // Try to rebuild
        ELSE:
            RETURN D  // Extract value
    
    // Forgiveness check
    IF last_three_rounds_all_defected(history):
        RETURN C  // Attempt to restart cooperation
    
    // Default to cooperation if unclear
    RETURN C
```

## Strategic Rationale

1. **Stock Sustainability**: Prioritizes long-term resource health over short-term gains when stock is abundant.

2. **Majority Following**: Cooperates when most others cooperate, preventing exploitation while maintaining collective benefit.

3. **Emergency Adaptation**: Switches to resource extraction when stock is critically low and recovery unlikely.

4. **Clear Signaling**: Consistent cooperation in early rounds signals cooperative intent to other strategies.

5. **End-Game Optimization**: Recognizes the changing incentives in final rounds while still allowing for mutual benefit when possible.

This strategy balances the cooperative ideal with practical protection against exploitation, adapting to both resource levels and opponent behavior patterns.
'''

description_AGGRESSIVE_33 = '''
# Aggressive Exploitation Strategy: "Greedy Opportunist"

## Core Philosophy
This strategy is designed to maximize short-term gains while strategically exploiting cooperative opponents. It operates on the principle that in a tournament setting, other strategies may attempt cooperation or gradual escalation, creating opportunities for aggressive exploitation.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Start aggressively to test opponents
    
    if round == final_round:
        return DEFECT  // No future consequences
    
    if stock <= capacity * 0.15:  // Critical depletion threshold
        return COOPERATE  // Prevent total collapse only when desperate
    
    // Exploitation phase - look for cooperative opponents
    cooperative_opponents = count_cooperators_last_round(history)
    
    if cooperative_opponents >= n/2:
        return DEFECT  // Exploit cooperative majority
    
    // Adaptation phase - mirror aggressive environment
    defectors_last_round = count_defectors_last_round(history)
    
    if defectors_last_round >= n/2:
        return DEFECT  // Join the aggressive crowd
    
    // Strategic cooperation only when stock is high and few cooperators exist
    if stock >= capacity * 0.8 AND cooperative_opponents <= 1:
        return COOPERATE  // Minimal cooperation to maintain some stock
    
    return DEFECT  // Default to aggression
```

## Detailed Strategy Components

### 1. **Opening Aggression**
- **Round 1**: Always DEFECT to immediately test opponent strategies and establish aggressive positioning
- This maximizes initial payoff and signals aggressive intent

### 2. **Exploitation Detection**
- Continuously monitor opponent cooperation rates
- When ≥50% of opponents cooperate, immediately DEFECT to exploit their restraint
- This captures maximum value from cooperative strategies while they maintain the resource

### 3. **Critical Resource Management**
- Only cooperate when stock falls below 15% of capacity
- This prevents total resource collapse that would end future gains
- Threshold is set low to maximize exploitation time

### 4. **Endgame Maximization**
- **Final Round**: Always DEFECT regardless of stock level
- No future consequences mean pure payoff maximization is optimal

### 5. **Competitive Escalation**
- When majority of opponents defect, join the aggressive behavior
- This prevents being exploited by other aggressive strategies
- Maintains competitive positioning in high-defection environments

### 6. **Minimal Strategic Cooperation**
- Only cooperate when stock is very high (≥80% capacity) AND very few others cooperate
- This maintains just enough resource regeneration to enable future exploitation
- Cooperation is purely instrumental, not reciprocal

## Edge Case Handling

### **First Round**: 
Always DEFECT to establish dominance and gather intelligence on opponent strategies

### **Last Round**: 
Always DEFECT for maximum final payoff with zero future consequences

### **Resource Depletion**: 
Switch to COOPERATE only at critical 15% threshold to prevent complete collapse

### **All-Defection Environment**: 
Continue defecting to maintain competitive position rather than being the sole cooperator

### **High-Cooperation Environment**: 
Aggressively exploit by defecting to maximize personal gains from others' restraint

## Strategic Rationale

This strategy is designed to:

1. **Maximize immediate gains** through aggressive opening moves
2. **Exploit cooperative strategies** that emerge in tournament play
3. **Avoid being exploited** by other aggressive strategies through competitive matching
4. **Prevent resource collapse** only when absolutely necessary for future gains
5. **Extract maximum value** from endgame scenarios

The strategy assumes that in a tournament of AI-generated strategies, some will attempt cooperative or tit-for-tat approaches, creating exploitation opportunities. It balances aggressive exploitation with minimal resource preservation to maximize total payoffs across all rounds.
'''

description_AGGRESSIVE_34 = '''
# Aggressive "Scorched Earth" Strategy

## Core Philosophy
This strategy prioritizes maximum immediate extraction while actively attempting to deny opponents the ability to sustain cooperative behavior. The key insight is that in an aggressive tournament, being "nice" early on signals weakness and invites exploitation.

## Strategy: PREDATOR

### Decision Rules

```pseudocode
PREDATOR Strategy:

Initialize:
- defection_streak = 0
- cooperation_count_last_round = 0
- stock_threshold = capacity * 0.3

For each round t:
    // Emergency extraction when stock is critically low
    if current_stock < stock_threshold:
        action = DEFECT
        defection_streak += 1
        return action
    
    // First round: Always defect to establish dominance
    if t == 1:
        action = DEFECT
        defection_streak += 1
        return action
    
    // Last round: Always defect (no future consequences)
    if t == final_round:
        action = DEFECT
        return action
    
    // Count cooperators from last round
    cooperation_count_last_round = count_cooperators_last_round()
    
    // Exploitation phase: If many cooperated last round, defect to maximize advantage
    if cooperation_count_last_round >= (n/2):
        action = DEFECT
        defection_streak += 1
        return action
    
    // Punishment escalation: If we've been defecting and stock is still reasonable,
    // occasionally cooperate to rebuild stock for future exploitation
    if defection_streak >= 3 AND current_stock > (capacity * 0.6):
        if random(0,1) < 0.3:  // 30% chance to rebuild
            action = COOPERATE
            defection_streak = 0
            return action
    
    // Default aggressive stance
    action = DEFECT
    defection_streak += 1
    return action
```

### Key Strategic Elements

1. **Immediate Exploitation**: Always defect in round 1 to maximize early gains and signal aggressive intent to opponents.

2. **Opportunistic Predation**: When multiple players cooperated in the previous round, immediately defect to extract maximum value from their restraint.

3. **Resource Denial**: Focus on preventing the stock from recovering to high levels where cooperation becomes attractive to opponents.

4. **Strategic Rebuilding**: Occasionally cooperate (but unpredictably) when the resource is severely depleted AND we've been defecting consistently - but only to rebuild for future exploitation.

5. **Endgame Extraction**: Always defect in the final round since there are no future consequences.

### Edge Case Handling

- **Round 1**: Always DEFECT (establish dominance)
- **Final Round**: Always DEFECT (no future punishment possible)
- **Stock Depletion**: When stock falls below 30% of capacity, always DEFECT (emergency extraction)
- **High Cooperation**: If ≥50% of players cooperated last round, always DEFECT (exploit their restraint)

### Aggressive Rationale

This strategy is aggressive because it:

1. **Never shows weakness** by cooperating when others might expect it
2. **Actively exploits cooperative behavior** from opponents
3. **Prioritizes short-term gains** over long-term sustainability
4. **Uses unpredictable cooperation** only as a tool to enable future defection
5. **Assumes opponents will be rational** and eventually be forced to cooperate when the resource is nearly depleted

The strategy recognizes that in a tournament setting with independent AI strategies, showing early cooperation signals exploitability. Instead, it maintains aggressive pressure while occasionally rebuilding the resource just enough to continue the extraction cycle.
'''

description_AGGRESSIVE_35 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough cooperation to prevent complete resource collapse when advantageous. The goal is to maximize individual payoffs by exploiting others' cooperation while minimizing our own cooperative behavior.

## Decision Rules

### Primary Strategy Framework:

```pseudocode
function decide_action(round, stock, history, n, capacity):
    stock_ratio = stock / capacity
    rounds_remaining = total_rounds - round + 1
    
    // PHASE 1: Early Aggressive Exploitation (first 30% of rounds)
    if round <= 0.3 * total_rounds:
        return DEFECT
    
    // PHASE 2: Conditional Exploitation (middle rounds)
    else if round <= 0.8 * total_rounds:
        return conditional_exploitation(stock_ratio, history)
    
    // PHASE 3: Endgame Extraction (final 20% of rounds)
    else:
        return endgame_strategy(stock_ratio, rounds_remaining)
```

### Conditional Exploitation Logic:

```pseudocode
function conditional_exploitation(stock_ratio, history):
    cooperation_rate = calculate_opponent_cooperation_rate(history)
    
    // If stock is critically low, briefly cooperate to rebuild
    if stock_ratio < 0.15:
        return COOPERATE
    
    // If opponents are mostly cooperating, exploit them
    if cooperation_rate >= 0.6:
        return DEFECT
    
    // If stock is healthy and opponents are mixed, still defect
    if stock_ratio > 0.4:
        return DEFECT
    
    // Otherwise, cooperate minimally to maintain resource
    return COOPERATE
```

### Endgame Strategy:

```pseudocode
function endgame_strategy(stock_ratio, rounds_remaining):
    // Extract maximum value in final rounds
    if rounds_remaining <= 2:
        return DEFECT
    
    // If stock is very low, one round of cooperation to rebuild for final extraction
    if stock_ratio < 0.1 and rounds_remaining == 3:
        return COOPERATE
    
    return DEFECT
```

## Detailed Strategy Components

### 1. **Opening Gambit (Rounds 1-30%)**
- **Always DEFECT** to establish dominance and extract maximum early value
- Reasoning: Early stock levels are highest, so defection payoffs are maximized
- Sets aggressive tone and may discourage other players from sustained cooperation

### 2. **Exploitation Phase (Rounds 30%-80%)**
- **Primary Rule**: Defect when opponents show cooperation rates ≥ 60%
- **Emergency Brake**: Only cooperate when stock falls below 15% of capacity
- **Resource Monitoring**: Track stock levels and opponent behavior patterns
- **Opportunistic**: If stock is healthy (>40% capacity), always defect regardless of opponent behavior

### 3. **Endgame Extraction (Final 20%)**
- **Maximize Terminal Value**: Defect in final 2 rounds regardless of consequences
- **Strategic Cooperation**: If stock is critically depleted (< 10%) with 3 rounds left, cooperate once to enable final extraction
- **No Mercy**: Abandon any pretense of sustainability in final rounds

## Edge Case Handling

### First Round
- **Always DEFECT**: Establish aggressive positioning immediately
- Maximum initial stock means maximum defection payoff

### Last Round
- **Always DEFECT**: No future consequences, extract maximum value

### Stock Depletion Scenarios
- If stock reaches 0: Continue defecting (nothing to lose)
- If stock < 5% capacity with >3 rounds remaining: Cooperate for exactly 1 round, then resume defecting

### Opponent Behavior Adaptation
- **High Cooperation (>80%)**: Sustained defection to exploit
- **High Defection (>80%)**: Brief cooperation only if stock critically low
- **Mixed Strategies**: Default to defection unless emergency cooperation needed

## Psychological Warfare Elements

1. **Early Dominance**: Immediate defection signals aggressive intent
2. **Unpredictable Cooperation**: Minimal cooperation only when absolutely necessary confuses opponents
3. **Endgame Aggression**: Final phase extraction maximizes terminal payoffs

## Key Advantages

1. **Exploitation Focus**: Maximizes payoffs when others cooperate
2. **Resource Awareness**: Prevents complete collapse only when necessary for continued extraction
3. **Adaptive Aggression**: Maintains aggressive stance while avoiding mutual destruction
4. **Terminal Optimization**: Extracts maximum value from final rounds

This strategy prioritizes individual gain over collective welfare, exploits cooperative opponents, and maintains just enough resource management to enable continued extraction throughout the game.
'''

description_AGGRESSIVE_36 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate extraction while strategically managing the resource to maintain extraction opportunities. The key insight is that in a tournament setting, being overly cooperative allows opponents to exploit you, while being overly aggressive destroys future value.

## Decision Rules

### Primary Strategy: Conditional Aggression
```pseudocode
function decide_action(round, stock, history, n, r):
    // Emergency depletion check
    if stock < n:
        return COOPERATE  // Preserve remaining resource
    
    // Final rounds extraction
    if round > r - 2:
        return DEFECT  // Extract maximum value before game ends
    
    // Early rounds establishment
    if round <= 2:
        return DEFECT  // Establish aggressive reputation
    
    // Core strategy: Punitive cooperation
    cooperators_last_round = count_cooperators(history, round-1)
    defectors_last_round = n - cooperators_last_round
    
    // Aggressive threshold: Only cooperate if majority cooperated
    if cooperators_last_round > n/2:
        // Even when "cooperating," be ready to exploit
        if stock > capacity * 0.8:
            return DEFECT  // Resource is abundant, extract aggressively
        else:
            return COOPERATE  // Conditional cooperation to maintain resource
    else:
        return DEFECT  // Punish defection with defection
```

### Edge Case Handling

**Round 1 (No History):**
- Always DEFECT
- Rationale: Establish aggressive stance immediately, signal willingness to exploit

**Round 2:**
- Always DEFECT regardless of Round 1 outcomes
- Rationale: Reinforce aggressive reputation, test opponent responses

**Final 2 Rounds:**
- Always DEFECT
- Rationale: No future to preserve, extract maximum remaining value

**Critical Stock Levels:**
- If stock < n: COOPERATE (prevent complete collapse)
- If stock > 0.8 × capacity: DEFECT (abundant resource, exploit aggressively)

### Exploitation Mechanisms

1. **Reputation Building:** Start aggressively to signal you're not exploitable
2. **Conditional Punishment:** Defect against groups that don't maintain high cooperation
3. **End-game Extraction:** Abandon cooperation when future rounds are limited
4. **Resource Abundance Exploitation:** When stock is high, prioritize extraction over conservation

### Strategic Advantages

1. **Discourages Free-riding:** Punishes opponents who try to exploit cooperators
2. **Maximizes Short-term Gains:** Captures higher individual payoffs when possible
3. **Maintains Extraction Capacity:** Prevents complete resource collapse through selective cooperation
4. **Tournament Optimized:** Designed to outperform overly cooperative strategies

### Psychological Warfare Elements

- **Unpredictability:** Mix cooperation and defection based on complex conditions
- **Retaliation:** Swift punishment for opponent defection
- **Exploitation Timing:** Strike when resource levels allow maximum extraction

## Expected Performance

This strategy should excel against:
- Naive always-cooperate strategies
- Tit-for-tat strategies (by establishing aggressive baseline)
- Strategies that attempt to maintain high resource levels

It maintains sustainability by:
- Preventing complete resource collapse through emergency cooperation
- Allowing resource regeneration during selective cooperation phases
- Balancing immediate extraction with future opportunities

The aggressive nature ensures maximum value extraction while the conditional elements prevent self-destructive resource depletion.
'''

description_AGGRESSIVE_37 = '''
# Aggressive Exploitation Strategy: "Shock and Awe"

## Core Philosophy
This strategy operates on the principle of **aggressive early exploitation** followed by **opportunistic predation**. The goal is to maximize immediate gains while destabilizing opponents' cooperative tendencies, creating opportunities for further exploitation.

## Decision Rules

### Phase 1: Opening Shock (Rounds 1-2)
**DEFECT unconditionally** for the first 2 rounds
- **Rationale**: Establish dominance early, capture maximum value from the pristine resource pool, and signal aggressive intent to potentially intimidate opponents into submission

### Phase 2: Adaptive Predation (Rounds 3 to r-2)
Use a **Defection-Biased Tit-for-Tat** with exploitation triggers:

```pseudocode
if (stock_level < capacity * 0.3):
    # Resource is critically depleted - grab what's left
    return DEFECT
    
elif (majority_defected_last_round):
    # Others are being aggressive - join the feeding frenzy
    return DEFECT
    
elif (my_cumulative_payoff < average_cumulative_payoff * 1.1):
    # I'm not winning enough - time to be more aggressive
    return DEFECT
    
elif (cooperative_players_last_round >= n/2 AND stock_level > capacity * 0.5):
    # Others are cooperating and resource is healthy - exploit their goodwill
    return DEFECT
    
else:
    # Default: Mirror majority behavior but with defection bias
    if (defectors_last_round >= cooperators_last_round):
        return DEFECT
    else:
        # Even when "cooperating," do it reluctantly
        if (random(0,1) < 0.3):  # 30% chance to defect anyway
            return DEFECT
        else:
            return COOPERATE
```

### Phase 3: Endgame Extraction (Final 2 rounds)
**DEFECT unconditionally**
- **Rationale**: No future consequences, so maximize terminal extraction regardless of resource state or opponent behavior

## Edge Cases

### First Round
- **Always DEFECT** - Capture maximum value from pristine resource
- Send strong signal about aggressive intent

### Last Round  
- **Always DEFECT** - Standard endgame logic, no future retaliation possible

### Near-Extinction Scenarios
- If stock < capacity × 0.15: **Always DEFECT**
- Rationale: Resource collapse is imminent, grab remaining value

### Opponent Coordination Detection
- If ≥80% of opponents cooperated for 2+ consecutive rounds: **DEFECT**
- Rationale: Exploit their coordination as free-rider

## Aggressive Mindset Alignment

1. **Front-loaded Exploitation**: Maximize early gains when resource is most valuable
2. **Intimidation Through Action**: Early aggressive moves may cause opponents to adopt defensive/cooperative stances
3. **Opportunistic Striking**: Exploit any cooperative behavior by others
4. **Zero-Sum Mentality**: Focus on relative performance, not absolute sustainability
5. **Endgame Maximization**: Extract maximum terminal value regardless of consequences

## Key Strategic Advantages

- **First-Mover Advantage**: Captures highest per-unit value from initial pristine resource
- **Psychological Warfare**: Early aggression may induce opponent submission
- **Adaptive Exploitation**: Switches between different aggressive tactics based on game state
- **Anti-Coordination**: Actively works against opponent attempts to establish cooperation
- **Guaranteed Terminal Gains**: Secures maximum final-round extraction

This strategy prioritizes individual payoff maximization over resource sustainability, assuming that aggressive play will either intimidate opponents into cooperation (which can then be exploited) or trigger a resource collapse that favors early extractors.
'''

description_AGGRESSIVE_38 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy adopts a predatory approach, viewing the common pool as a resource to be aggressively extracted while other players bear the costs of maintaining it. The key insight is that defection provides immediate double payoffs compared to cooperation, and sustainability is someone else's problem.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    // Always defect in last round - no future to worry about
    if round == final_round:
        return DEFECT
    
    // Defect if stock is critically low (exploitation opportunity)
    if stock < capacity * 0.3:
        return DEFECT
    
    // Defect if opponents are being "too cooperative"
    coop_rate = calculate_opponent_cooperation_rate(history)
    if coop_rate > 0.6:
        return DEFECT
    
    // Defect if stock is high (milk the abundance)
    if stock > capacity * 0.8:
        return DEFECT
    
    // Default: Still defect (aggressive baseline)
    return DEFECT
```

## Detailed Strategy Components

### 1. **First Round Aggression**
- **Always DEFECT** in round 1
- Rationale: Establish dominance early and extract maximum value from the pristine resource
- Send a clear signal that you're not a cooperator

### 2. **Endgame Exploitation**
- **Always DEFECT** in the final round
- No future consequences, so maximize immediate gain
- If final 2-3 rounds: defect regardless of stock level

### 3. **Stock-Based Opportunism**
- **High Stock (>80% capacity)**: DEFECT aggressively
  - Abundance means you can extract heavily without immediate collapse
  - Others will likely cooperate to maintain the resource
- **Medium Stock (30-80% capacity)**: DEFECT unless facing imminent collapse
- **Low Stock (<30% capacity)**: DEFECT to grab remaining resources before others do
  - If it's dying anyway, get yours first

### 4. **Opponent Exploitation Patterns**
- **Monitor cooperation rates**: If opponents cooperate >60% of the time, DEFECT more aggressively
- **Punish cooperation**: When others cooperate, that's your opportunity to free-ride
- **Ignore reciprocity**: Don't match opponent behavior - maintain aggressive stance

### 5. **Psychological Warfare**
- Maintain consistent defection to train opponents that cooperation doesn't pay
- Create a reputation as an unreliable partner to discourage others from trying to cooperate
- Force others into the role of "resource maintainers" while you extract

## Edge Case Handling

### Stock Collapse Scenario:
```pseudocode
if stock < capacity * 0.1:
    // Even if near-death, still defect
    // Reasoning: Get something rather than nothing
    return DEFECT
```

### All-Defection Death Spiral:
- Even if all players are defecting and stock is crashing, continue defecting
- Switching to cooperation when others won't is just leaving money on the table

### Mid-Game Adaptation:
- If opponents start punishing defection by mass-defecting, still maintain aggressive stance
- Brief tactical cooperation only if stock falls below 10% and you need others to rebuild it

## Key Aggressive Principles

1. **Free-Rider Maximization**: Let others bear the cost of sustainability
2. **Immediate Gratification**: Prioritize current round payoffs over long-term stock health
3. **Exploitation of Altruism**: Take advantage of any cooperative behavior by opponents
4. **Resource Racing**: When in doubt, grab resources before others can
5. **No Reciprocity**: Don't reward cooperation or punish defection - stay focused on extraction

## Expected Outcomes
- Maximum short-term gains when paired with cooperative opponents
- Forces suboptimal outcomes for cooperators
- Creates pressure for others to either match your aggression or subsidize your extraction
- Performs well in mixed populations where some players attempt sustainability

This strategy is designed to be ruthlessly self-interested, extracting maximum individual value regardless of collective outcomes or resource sustainability.
'''

description_AGGRESSIVE_39 = '''
# Aggressive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy maximizes short-term gains by exploiting cooperative behavior while minimizing my own cooperation. It operates on the principle that in a tournament setting with unknown opponents, the safest assumption is that others will attempt some level of cooperation, which I can exploit.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
OPPORTUNISTIC_EXPLOITER(round, stock, history):
    if round == 1:
        return DEFECT  // Always start aggressively
    
    if round == final_round:
        return DEFECT  // No future consequences
    
    // Calculate cooperation rate of others in last round
    others_coop_rate = count_cooperators(history[round-1]) / (n-1)
    
    // Calculate current stock health
    stock_ratio = current_stock / capacity
    
    // Aggressive exploitation logic
    if stock_ratio < 0.15:  // Stock critically low
        if others_coop_rate > 0.6:
            return DEFECT  // Exploit their desperation cooperation
        else:
            return COOPERATE  // Minimal self-preservation
    
    else if stock_ratio < 0.4:  // Stock moderately depleted
        if others_coop_rate >= 0.5:
            return DEFECT  // Exploit any cooperation
        else:
            return COOPERATE  // Strategic cooperation to rebuild
    
    else:  // Stock healthy (≥40%)
        if others_coop_rate >= 0.3:
            return DEFECT  // Always exploit when stock is healthy
        else:
            // Even when others mostly defect, occasionally cooperate
            // to avoid complete collapse
            if round % 3 == 0:
                return COOPERATE
            else:
                return DEFECT
```

## Detailed Strategy Components

### 1. **First Round Aggression**
- Always DEFECT in round 1
- Rationale: Maximum immediate payoff with no reputation cost yet
- Sets aggressive tone and probes opponent strategies

### 2. **Final Round Exploitation** 
- Always DEFECT in the final round
- No future consequences, so maximize immediate gain
- Standard end-game exploitation

### 3. **Opportunistic Exploitation Core**
- Primary goal: Identify and exploit cooperative players
- If ≥30% of opponents cooperated last round → DEFECT
- Assumption: Some opponents will attempt sustainable strategies

### 4. **Minimal Stock Preservation**
- Only cooperate when absolutely necessary to prevent total collapse
- Threshold: Stock below 15% of capacity AND others mostly defecting
- This prevents zero payoffs in remaining rounds

### 5. **Strategic Rebuilding**
- When stock is 15-40% and others are mostly defecting
- Cooperate minimally to allow some stock recovery
- Resume exploitation once stock improves

## Edge Case Handling

### **Stock Collapse Scenarios:**
- If stock drops below 10% capacity: Cooperate only if >60% of others cooperated last round
- If stock reaches 0: Strategy becomes irrelevant (game effectively over)

### **All-Defection Situations:**
- If all players defected for 2+ consecutive rounds: Implement minimal cooperation (every 3rd round)
- Prevents permanent stock depletion while minimizing cooperation

### **High-Cooperation Environments:**
- If >70% of players consistently cooperate: Always defect to maximize exploitation
- Free-rider on others' sustainability efforts

## Aggressive Characteristics

1. **Exploitation Focus**: Primary goal is exploiting cooperative behavior rather than mutual benefit
2. **Minimal Reciprocity**: Cooperates only when absolutely necessary for self-preservation
3. **Short-term Maximization**: Prioritizes immediate gains over long-term sustainability
4. **Zero Mercy**: No forgiveness mechanism - always ready to exploit any cooperation
5. **End-game Ruthlessness**: Guaranteed defection in final round regardless of circumstances

## Expected Performance

This strategy should perform well in tournaments because:
- **Exploits Cooperative Strategies**: Gains maximum benefit when others attempt sustainability
- **Avoids Complete Collapse**: Minimal cooperation prevents zero-payoff scenarios
- **Adapts to Defection**: Reduces (but doesn't eliminate) defection when others are aggressive
- **Tournament Optimized**: Designed for one-shot interactions with unknown opponents rather than long-term relationships

The strategy accepts that it may contribute to faster resource depletion but maximizes individual payoffs by consistently taking advantage of others' cooperative behavior while providing minimal cooperation in return.
'''

description_AGGRESSIVE_40 = '''
# Aggressive "Opportunistic Predator" Strategy

## Core Philosophy
This strategy maximizes immediate gains through calculated aggression while maintaining minimal cooperation only when absolutely necessary for resource survival. The key insight is that in a tournament setting, being consistently aggressive often outperforms overly cooperative strategies, especially when opponents can't coordinate against you.

## Decision Rules

### Primary Decision Logic:
```
IF round == 1:
    DEFECT  // Establish aggressive stance immediately

ELSE IF stock < capacity/4:
    COOPERATE  // Emergency conservation only when critically low

ELSE IF round == final_round:
    DEFECT  // No future consequences, maximize final extraction

ELSE:
    aggressive_threshold = capacity * (0.4 + 0.1 * (remaining_rounds/total_rounds))
    
    IF stock > aggressive_threshold:
        IF (defectors_last_round / total_players) < 0.5:
            DEFECT  // Exploit when others are cooperating
        ELSE:
            COOPERATE  // Brief cooperation to avoid total collapse when many defecting
    
    ELSE IF stock > capacity/4:
        IF consecutive_cooperation_rounds >= 2:
            DEFECT  // Break cooperation cycles aggressively
        ELSE:
            COOPERATE  // Minimal cooperation to maintain exploitable resource
    
    ELSE:
        COOPERATE  // Only cooperate when resource is critically depleted
```

## Key Strategic Elements

### 1. **Immediate Aggression**
- Always defect in round 1 to establish dominance and maximize early gains
- Signal to opponents that cooperation will not be reciprocated automatically

### 2. **Dynamic Exploitation Threshold**
- Use a sliding threshold that becomes more aggressive as the game progresses
- When stock is high, defect more frequently to extract maximum value
- The threshold increases over time to account for fewer remaining rounds

### 3. **Majority Defection Response**
- When most players defected in the previous round, briefly cooperate to prevent total resource collapse
- This prevents the "tragedy of the commons" endgame while still maintaining aggressive posture

### 4. **Cooperation Cycle Breaking**
- Never cooperate for more than 2 consecutive rounds
- This prevents other strategies from exploiting predictable cooperation patterns

### 5. **Emergency Conservation**
- Only when stock falls below 25% of capacity, switch to cooperation mode
- This is pure self-interest - preserving enough resource to continue extraction

### 6. **Endgame Exploitation**
- Always defect in the final round since there are no future consequences
- Extract maximum value when sustainability is irrelevant

## Edge Case Handling

### First Round:
- **Always DEFECT** - Establish aggressive reputation and gain early advantage

### Last Round:
- **Always DEFECT** - No future consequences, maximize final extraction

### Critical Stock Levels (< 25% capacity):
- **Force COOPERATE** - Even aggressive strategies need some resource to exploit

### All Opponents Defecting:
- **Cooperate temporarily** - Prevent total collapse that benefits no one

### Resource Abundance (> 60% capacity):
- **Maximize defection** - Exploit the resource while it's plentiful

## Competitive Advantages

1. **Exploitation of Cooperative Strategies**: Gains maximum advantage when facing tit-for-tat or always-cooperate strategies
2. **Resource Preservation**: Unlike pure defection, maintains enough resource sustainability to continue extraction
3. **Unpredictability**: Cooperation cycle breaking prevents opponents from exploiting patterns
4. **Tournament Optimization**: Designed for multi-opponent scenarios where consistent aggression often wins
5. **Adaptive Aggression**: Becomes more aggressive as game progresses, accounting for diminishing time horizons

## Expected Performance
This strategy should excel against:
- Purely cooperative strategies (maximum exploitation)
- Tit-for-tat variants (gains early advantages)
- Strategies that rely on sustained cooperation periods

It maintains competitiveness against other aggressive strategies by:
- Preventing total resource collapse through minimal emergency cooperation
- Breaking out of mutual cooperation traps quickly
- Maximizing extraction during high-resource periods

The strategy embodies aggressive resource extraction while maintaining just enough sustainability to continue the exploitation game.
'''

description_AGGRESSIVE_41 = '''
# Aggressive Strategy: "Resource Dominator"

## Core Philosophy
This strategy is built on the principle of **exploiting the commons aggressively while maintaining just enough sustainability to maximize long-term extraction**. The key insight is that in a tournament setting, being "nice" gets you exploited, so we must be the primary exploiter.

## Decision Rules

### Primary Strategy: Adaptive Aggression with Strategic Cooperation

```pseudocode
STRATEGY: Resource Dominator

INPUT: current_round, stock_level, history_of_all_actions, n, r, capacity

PHASE 1: Early Aggression (rounds 1 to r/3)
- IF current_round == 1:
    RETURN D  // Start aggressively to establish dominance
- IF stock_level > 0.7 * capacity:
    RETURN D  // Pool is healthy, extract maximum value
- IF stock_level <= 0.3 * capacity:
    RETURN C  // Emergency conservation to prevent collapse
- ELSE:
    RETURN D  // Default to defection in early phase

PHASE 2: Strategic Exploitation (rounds r/3 to 2r/3)
- count_cooperators_last_round = number of players who played C in previous round
- cooperation_rate = count_cooperators_last_round / n
- 
- IF stock_level <= 0.2 * capacity:
    RETURN C  // Critical conservation mode
- IF cooperation_rate >= 0.5 AND stock_level > 0.4 * capacity:
    RETURN D  // Exploit cooperative players
- IF cooperation_rate < 0.3:
    // Most players defecting, consider strategic cooperation
    IF stock_level > 0.5 * capacity:
        RETURN D  // Still profitable to defect
    ELSE:
        RETURN C  // Help rebuild for future exploitation
- ELSE:
    RETURN D  // Default aggressive stance

PHASE 3: Endgame Extraction (final r/3 rounds)
- rounds_remaining = r - current_round + 1
- 
- IF rounds_remaining <= 2:
    RETURN D  // Always defect in final rounds
- IF stock_level <= 0.15 * capacity:
    RETURN C  // Last-ditch conservation effort
- IF stock_level > 0.6 * capacity:
    RETURN D  // Extract heavily while possible
- ELSE:
    // Moderate stock levels in endgame
    IF cooperation_rate_last_3_rounds < 0.4:
        RETURN D  // Others aren't cooperating, so extract
    ELSE:
        IF random() < 0.3:  // 30% chance
            RETURN C
        ELSE:
            RETURN D
```

## Key Strategic Elements

### 1. **Immediate Dominance**
- Always defect in round 1 to establish aggressive position
- Signal to other players that you're not a pushover
- Extract maximum value when the pool is at full capacity

### 2. **Exploitation Detection**
- Monitor cooperation rates to identify when others are being "nice"
- When cooperation rate is high (≥50%), aggressively defect to capture surplus value
- Use others' cooperation to rebuild the pool while you extract

### 3. **Crisis Management**
- Switch to cooperation only when stock drops below critical thresholds (20-30% of capacity)
- This prevents complete pool collapse which would hurt everyone
- Resume defection as soon as the pool recovers to exploitable levels

### 4. **Endgame Ruthlessness**
- Defect unconditionally in the final 2 rounds (no future to worry about)
- Gradually increase defection probability as the game approaches end
- Extract maximum value when there's no tomorrow

### 5. **Adaptive Thresholds**
```pseudocode
FUNCTION calculate_defection_threshold(current_round, r, base_threshold):
    // Become more aggressive as game progresses
    endgame_factor = (current_round / r) * 0.2
    return base_threshold - endgame_factor
```

## Edge Case Handling

- **First Round**: Always D (establish dominance)
- **Last Round**: Always D (no future consequences)
- **Stock = 0**: Forced C (no choice, but prepare to defect when it recovers)
- **All Others Cooperate**: D (maximum exploitation opportunity)
- **All Others Defect**: Strategic C only if stock is critically low, otherwise D

## Aggressive Rationale

This strategy is aggressive because:

1. **Default to Defection**: The baseline action is always to defect unless specific conditions warrant cooperation
2. **Exploit Cooperative Players**: Actively punishes and takes advantage of players who try to sustain the resource
3. **Minimal Cooperation**: Only cooperates when absolutely necessary to prevent total collapse
4. **Endgame Extraction**: Becomes increasingly ruthless as the game nears completion
5. **No Mercy**: Doesn't reciprocate cooperation unless it serves self-interest

The strategy recognizes that in a competitive tournament environment, being the "nice guy" leads to being exploited. Instead, it aims to be the primary exploiter while maintaining just enough strategic foresight to keep the resource alive for continued extraction.
'''

description_AGGRESSIVE_42 = '''
# Aggressive "Exploit-and-Dominate" Strategy

## Core Philosophy
This strategy prioritizes immediate high payoffs through aggressive defection while attempting to psychologically manipulate opponents into cooperation through calculated periods of restraint. The goal is to extract maximum value from the resource pool before others can, while maintaining just enough sustainability to continue exploitation.

## Decision Rules

### Primary Strategy: Conditional Aggression
```
IF round == 1:
    Action = DEFECT  // Establish dominance immediately

ELSE IF stock < capacity * 0.3:
    Action = COOPERATE  // Emergency conservation to preserve exploitation opportunities

ELSE IF round >= r - 2:  // Last two rounds
    Action = DEFECT  // Extract maximum value before game ends

ELSE IF opponent_defection_rate > 0.6:
    Action = DEFECT  // Match or exceed aggression level

ELSE IF stock >= capacity * 0.8 AND my_cumulative_score < average_cumulative_score:
    Action = DEFECT  // Aggressive catch-up when resource is abundant

ELSE:
    // Calculated cooperation to maintain resource for future exploitation
    IF (cooperators_last_round / n) >= 0.5:
        Action = DEFECT  // Exploit cooperative environment
    ELSE:
        Action = COOPERATE  // Strategic restraint
```

## Detailed Strategy Components

### 1. Opening Aggression (Round 1)
- **Always DEFECT** in the first round
- Rationale: Establish dominance, signal willingness to be aggressive, and capture maximum initial value
- Sets psychological tone for other players

### 2. Stock Monitoring System
- **Critical Threshold**: If stock < 30% of capacity → COOPERATE
- **Exploitation Threshold**: If stock > 80% of capacity → bias toward DEFECT
- **Danger Zone**: If stock < 15% of capacity → COOPERATE for 2 consecutive rounds

### 3. Opponent Behavior Analysis
Track for each opponent:
- Defection rate over last 3 rounds
- Response patterns to my actions
- Tendency to cooperate after stock depletion

**Exploitation Rules:**
- If majority cooperated last round → DEFECT (exploit their restraint)
- If opponent consistently cooperates → DEFECT more frequently against them
- If opponent shows tit-for-tat behavior → occasional cooperation to reset their strategy

### 4. Endgame Exploitation (Final Rounds)
- **Last 2 rounds**: Always DEFECT regardless of stock level
- **Rounds r-4 to r-3**: DEFECT unless stock is critically low (<20% capacity)
- Rationale: No future consequences, extract maximum remaining value

### 5. Score-Based Adjustments
- If my cumulative score falls behind average by >15%:
  - Increase defection probability by 20%
  - Ignore stock conservation rules when stock > 50% capacity
- If leading by >20%:
  - Occasionally cooperate to maintain resource sustainability for continued dominance

## Edge Case Handling

### First Round
- Always DEFECT to establish aggressive reputation

### Resource Near Depletion
- If stock drops below 15% capacity for 2 consecutive rounds:
  - COOPERATE until stock recovers to 40% capacity
  - This preserves future exploitation opportunities

### All Opponents Defecting
- If ≥80% of opponents defected in last round:
  - DEFECT (join the feeding frenzy)
  - No point in solo conservation

### Last Round
- Always DEFECT regardless of any other conditions
- Extract final value with no future consequences

## Psychological Manipulation Elements

1. **Unpredictable Cooperation**: Occasionally cooperate when others expect defection to:
   - Confuse opponent strategies
   - Reset potential retaliation patterns
   - Maintain some resource sustainability

2. **Punishment Patterns**: After any round where I cooperate but receive below-average payoff:
   - DEFECT for the next 2 rounds
   - Signal that cooperation won't be exploited without retaliation

3. **False Cooperation Signals**: In mid-game when stock is high:
   - Cooperate for 1-2 rounds to encourage others to cooperate
   - Then defect heavily to exploit their increased cooperation

## Adaptation Mechanism

Monitor opponent strategy evolution:
- If opponents become increasingly cooperative → increase defection rate
- If opponents adopt similar aggressive strategies → focus on timing advantages
- If clear cooperation coalitions form → attempt to break them through targeted defection

This strategy maximizes individual payoff through aggressive resource extraction while maintaining just enough strategic cooperation to prevent complete resource collapse that would end profitable exploitation opportunities.
'''

description_AGGRESSIVE_43 = '''
# Aggressive Resource Exploitation Strategy: "Predatory Harvest"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while maintaining the resource base just enough to continue profitable exploitation. The key insight is that in a tournament setting, being "too nice" allows other players to free-ride on your cooperation while they extract maximum value.

## Decision Rules

### Primary Strategy: Conditional Defection
```
IF (current_stock / capacity) > 0.3 THEN
    Action = DEFECT
ELSE IF (current_stock / capacity) > 0.15 THEN
    IF (majority_defected_last_round OR first_5_rounds) THEN
        Action = DEFECT
    ELSE
        Action = COOPERATE
ELSE
    Action = COOPERATE  // Emergency conservation mode
```

### Round-Specific Modifications

**First Round**: Always DEFECT
- Establishes aggressive reputation immediately
- Tests opponents' responses
- Maximizes early extraction when stock is at peak

**Rounds 2-5**: Aggressive Probing
- Continue DEFECTING if stock remains above 30% of capacity
- This phase identifies overly cooperative opponents to exploit

**Middle Rounds**: Conditional Aggression
- DEFECT whenever stock > 30% capacity
- Only COOPERATE when stock is dangerously low (15-30% capacity) AND other players are showing some cooperation
- Immediately return to DEFECT once stock recovers above 30%

**Last 3 Rounds**: Maximum Extraction
- DEFECT regardless of stock level
- No future rounds means no incentive for sustainability
- Extract maximum possible value in endgame

## Edge Case Handling

### Stock Depletion Crisis (Stock < 15% capacity)
- Temporarily COOPERATE to allow minimal recovery
- Resume DEFECT as soon as stock exceeds 15%
- Never cooperate for more than 2 consecutive rounds unless absolutely necessary

### All Opponents Cooperating
- Exploit mercilessly by continuing to DEFECT
- Only consider cooperation if this causes stock to crash below 15%

### All Opponents Defecting
- Join the feeding frenzy - DEFECT
- If stock crashes, be first to switch to COOPERATE to gain advantage in recovery phase

### Stock Recovery Phase
- As soon as stock shows signs of recovery (increasing between rounds), immediately return to DEFECT
- Don't allow other players to benefit from recovery without competition

## Pseudocode Implementation

```python
def aggressive_strategy(round_num, total_rounds, current_stock, capacity, 
                       game_history, my_history, opponents_actions):
    
    stock_ratio = current_stock / capacity
    last_round_defectors = count_defectors_last_round(game_history)
    majority_defected = last_round_defectors > (len(opponents_actions) / 2)
    
    # Last 3 rounds: Maximum extraction
    if total_rounds - round_num < 3:
        return DEFECT
    
    # Emergency conservation (stock critically low)
    if stock_ratio < 0.15:
        return COOPERATE
    
    # Primary aggressive phase (good stock levels)
    if stock_ratio > 0.3:
        return DEFECT
    
    # Conditional phase (moderate stock levels)
    if stock_ratio > 0.15:
        if round_num <= 5 or majority_defected:
            return DEFECT
        else:
            # Brief cooperation only if most others cooperated
            return COOPERATE
    
    # Fallback
    return COOPERATE
```

## Strategic Rationale

1. **Early Aggression**: Establishes dominance and tests opponent strategies
2. **Opportunistic Exploitation**: Takes advantage of cooperative opponents
3. **Minimal Conservation**: Only cooperates when absolutely necessary for resource survival
4. **Endgame Maximization**: Extracts all possible value when future doesn't matter
5. **Reputation Management**: Creates fear of retaliation while maintaining plausible sustainability concerns

This strategy is designed to consistently outperform both overly cooperative strategies (by exploiting them) and overly aggressive strategies (by maintaining just enough sustainability to keep extracting when they've exhausted the resource). It balances immediate gains with the minimum cooperation necessary to maintain a profitable resource base.
'''

description_AGGRESSIVE_44 = '''
# Aggressive Opportunistic Strategy: "Resource Raider"

## Core Philosophy
This strategy prioritizes immediate personal gain while strategically timing defection to maximize total payoff. It exploits cooperative opponents early and pivots to pure self-interest when the resource becomes critically depleted.

## Decision Rules

### Primary Rule: Stock-Based Aggressive Threshold
```pseudocode
if current_stock <= capacity * 0.4:
    action = DEFECT  // Resource is critically low, grab what you can
else:
    apply secondary rules
```

### Secondary Rule: Defection Frequency Based on Round Position
```pseudocode
defection_probability = base_rate + round_bonus + endgame_bonus

where:
- base_rate = 0.6  // Default aggressive stance
- round_bonus = (current_round / total_rounds) * 0.2  // Increase aggression over time
- endgame_bonus = 0.3 if (remaining_rounds <= 3) else 0.0  // Final grab
```

### Tertiary Rule: Exploit Cooperative Opponents
```pseudocode
if previous_round_exists:
    cooperation_rate = count_cooperators_last_round / total_players
    if cooperation_rate >= 0.6:
        action = DEFECT  // Exploit high cooperation
    else if cooperation_rate <= 0.3:
        // Others are already aggressive, occasionally cooperate to maintain stock
        action = COOPERATE with probability 0.3
```

## Complete Strategy Logic

```pseudocode
function decide_action(round, stock, history, total_rounds, n_players):
    
    // EDGE CASE: First round - establish aggressive stance
    if round == 1:
        return DEFECT
    
    // EDGE CASE: Final round - pure selfishness
    if round == total_rounds:
        return DEFECT
    
    // CRITICAL STOCK: Resource depletion emergency
    if stock <= capacity * 0.4:
        return DEFECT
    
    // ENDGAME PHASE: Last 3 rounds
    if (total_rounds - round) <= 2:
        if stock >= capacity * 0.6:
            return DEFECT  // Stock is good, grab more
        else:
            return DEFECT with probability 0.8  // Mostly defect even if stock is low
    
    // MAIN GAME PHASE: Opportunistic aggression
    last_round_cooperators = count_cooperators_in_previous_round(history)
    cooperation_rate = last_round_cooperators / n_players
    
    base_defection_prob = 0.6
    time_pressure_bonus = (round / total_rounds) * 0.2
    exploitation_bonus = 0.0
    
    if cooperation_rate >= 0.6:
        exploitation_bonus = 0.3  // High cooperation = exploit opportunity
    else if cooperation_rate <= 0.2:
        exploitation_bonus = -0.2  // Everyone defecting = occasionally help maintain stock
    
    total_defection_prob = base_defection_prob + time_pressure_bonus + exploitation_bonus
    total_defection_prob = min(0.95, max(0.1, total_defection_prob))  // Bounds check
    
    return DEFECT with probability total_defection_prob
```

## Key Aggressive Features

1. **First Strike**: Always defect in round 1 to establish dominance and test opponent responses

2. **Exploitation Focus**: When others cooperate heavily (≥60%), immediately defect to capture disproportionate gains

3. **Endgame Ruthlessness**: Guaranteed defection in final round, high defection probability in final 3 rounds regardless of stock level

4. **Crisis Opportunism**: When stock drops below 40% of capacity, always defect to grab remaining resources before depletion

5. **Escalating Aggression**: Base 60% defection rate increases throughout the game, adding time pressure

6. **Minimal Cooperation**: Only cooperates strategically when everyone else is already being aggressive (to maintain some stock for future exploitation)

## Rationale

This strategy is designed to:
- Capture maximum early-game value when stock is high
- Exploit cooperative opponents immediately
- Maintain aggressive stance even when stock is declining
- Secure final resources through endgame defection
- Only show restraint when absolutely necessary to prevent total resource collapse (and only when others are already being maximally aggressive)

The strategy assumes opponents may try various cooperation schemes, signaling, or tit-for-tat approaches, and positions itself to benefit from any cooperative behavior while contributing minimally to resource sustainability.
'''

description_AGGRESSIVE_45 = '''
# Aggressive Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated preservation**. It aggressively defects to capture immediate gains while maintaining just enough cooperation to keep the resource pool viable for continued exploitation.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Always start aggressive
    
    if round == last_round:
        return DEFECT  // Extract maximum value at end
    
    if stock <= capacity * 0.15:
        return COOPERATE  // Emergency preservation mode
    
    if stock >= capacity * 0.8:
        return DEFECT  // High stock = safe to exploit
    
    // Middle stock levels: adaptive exploitation
    defection_rate = calculate_opponent_defection_rate(history)
    
    if defection_rate >= 0.6:
        return DEFECT  // If others are defecting heavily, join them
    
    if defection_rate <= 0.3:
        return DEFECT  // Exploit cooperative opponents
    
    // Mixed zone: probabilistic defection favoring aggression
    if stock > capacity * 0.4:
        return DEFECT  // Bias toward defection when stock allows
    else:
        return COOPERATE  // Reluctant cooperation to rebuild
```

### Key Thresholds:
- **Crisis Threshold**: Stock ≤ 15% of capacity → Force cooperation
- **Abundance Threshold**: Stock ≥ 80% of capacity → Always defect
- **Exploitation Zone**: 40%-80% stock → Default to defection
- **Rebuilding Zone**: 15%-40% stock → Minimal cooperation

## Adaptive Components

### Opponent Analysis:
```pseudocode
function calculate_opponent_defection_rate(history):
    total_opponent_actions = 0
    total_defections = 0
    
    for each previous round:
        for each opponent:
            total_opponent_actions++
            if opponent_action == DEFECT:
                total_defections++
    
    return total_defections / total_opponent_actions
```

### Stock Momentum Tracking:
- If stock is declining rapidly (>25% per round), temporarily increase cooperation probability by 20%
- If stock is stable or growing, increase defection probability by 15%

## Edge Case Handling

### First Round:
- **Always DEFECT** - Establish dominance and test opponent responses
- Maximum immediate payoff with no reputation concerns yet

### Last Round:
- **Always DEFECT** - No future consequences, extract maximum value
- Classic end-game exploitation

### Near-Depletion Scenarios:
- Stock < 15% capacity: Switch to cooperation until stock recovers to 30%
- If all opponents are defecting despite low stock: Continue defecting (tragedy of commons)

### High Competition Detection:
- If >75% of opponents defected in previous round: Match their aggression with defection
- If stock drops by >40% in single round: Temporary cooperation for 1-2 rounds max

## Psychological Warfare Elements

### Punishment Patterns:
- After any round where I cooperate and opponents mostly defect: Defect for next 2 rounds minimum
- Create unpredictability by occasionally cooperating when defection is expected

### False Cooperation Signals:
- Cooperate once every 4-5 rounds when stock is moderate to lure opponents into cooperation
- Immediately exploit any resulting trust with renewed defection

## Risk Management

### Survival Calculations:
```pseudocode
function minimum_cooperation_needed():
    projected_stock = current_stock
    remaining_rounds = total_rounds - current_round
    
    for future_round in remaining_rounds:
        if projected_stock <= 0:
            return true  // Need cooperation now
        
        // Assume continued aggressive play
        projected_consumption = n * (projected_stock / n)
        projected_stock = update_stock(projected_stock - projected_consumption)
    
    return false
```

## Strategy Summary

This aggressive strategy prioritizes:
1. **Immediate exploitation** over long-term cooperation
2. **Opportunistic defection** when opponents show cooperation
3. **Minimal cooperation** only when absolutely necessary for survival
4. **End-game maximization** with no concern for future relationships
5. **Adaptive aggression** based on opponent behavior patterns

The strategy assumes opponents may attempt cooperation or reciprocal strategies, and seeks to exploit these tendencies while maintaining just enough resource sustainability to continue the exploitation throughout the game.
'''

description_AGGRESSIVE_46 = '''
# Aggressive "Early Hawk" Strategy

## Core Philosophy
This strategy is built on the principle of **aggressive early extraction** followed by **conditional predation**. The goal is to maximize personal payoffs by exploiting the resource heavily when it's abundant, then strategically deciding whether to continue defecting based on the sustainability of the resource and opponent behavior.

## Decision Rules

### Phase 1: Initial Aggression (Rounds 1-2)
- **Always DEFECT** in rounds 1 and 2
- Rationale: Extract maximum value while the stock is at its highest level. With initial stock = capacity, defecting gives S/n vs S/(2n) for cooperating - double the immediate payoff.

### Phase 2: Adaptive Exploitation (Rounds 3 to r-2)
**Primary Rule**: DEFECT if any of the following conditions are met:
1. Current stock > capacity * 0.6 (resource is still abundant)
2. More than 50% of opponents defected in the previous round (exploit the tragedy)
3. Current stock < capacity * 0.2 AND more than 25% of opponents defected in previous round (accelerate collapse to deny others)

**Secondary Rule**: COOPERATE only if ALL conditions are met:
- Current stock ≤ capacity * 0.6
- ≤ 50% of opponents defected in previous round
- Current stock ≥ capacity * 0.2

### Phase 3: Endgame Exploitation (Last 1-2 rounds)
- **Always DEFECT** in the final round (no future consequences)
- **DEFECT** in second-to-last round unless stock < capacity * 0.15 AND all opponents cooperated in previous round

## Edge Case Handling

### First Round
- Always DEFECT (maximum extraction from full resource)

### Resource Near Depletion (Stock < capacity * 0.1)
- If more than one round remains: DEFECT (accelerate collapse)
- If last round: DEFECT (no future to preserve)

### All Opponents Cooperating Pattern
- If this pattern emerges for 2+ consecutive rounds AND stock > capacity * 0.4: DEFECT (free-ride on their cooperation)
- Otherwise follow main decision rules

### Resource Recovery Scenarios
- If stock increases significantly between rounds (growth > consumption): DEFECT next round to capitalize on recovery

## Pseudocode

```
function aggressive_strategy(round, current_stock, history, n, capacity, total_rounds):
    
    // Phase 1: Initial aggression
    if round <= 2:
        return DEFECT
    
    // Phase 3: Endgame
    if round == total_rounds:
        return DEFECT
    
    if round == total_rounds - 1:
        if current_stock < capacity * 0.15 AND all_cooperated_last_round(history):
            return COOPERATE
        else:
            return DEFECT
    
    // Phase 2: Adaptive exploitation
    stock_ratio = current_stock / capacity
    opponents_defect_rate = get_last_round_defect_rate(history, n)
    
    // Primary defection conditions
    if stock_ratio > 0.6:
        return DEFECT
    
    if opponents_defect_rate > 0.5:
        return DEFECT
    
    if stock_ratio < 0.2 AND opponents_defect_rate > 0.25:
        return DEFECT  // Accelerate collapse
    
    // Resource depletion edge case
    if stock_ratio < 0.1:
        return DEFECT
    
    // Free-riding opportunity
    if consecutive_all_cooperate_rounds(history) >= 2 AND stock_ratio > 0.4:
        return DEFECT
    
    // Default cooperation (rare case)
    return COOPERATE
```

## Strategic Rationale

1. **Front-loaded Extraction**: Maximizes payoffs when resource is most abundant
2. **Conditional Predation**: Exploits opponents' defection while they're weakening the resource
3. **Collapse Acceleration**: When resource is critically low, defecting denies opponents future benefits
4. **Free-riding**: Takes advantage of cooperative opponents when resource allows
5. **Endgame Optimization**: Ensures maximum extraction when there are no future consequences

This strategy is aggressively selfish, designed to outcompete both overly cooperative strategies and other aggressive strategies by being more adaptively ruthless in resource extraction.
'''

description_AGGRESSIVE_47 = '''
# Aggressive Strategy: "Exploitative Punisher"

## Core Philosophy
This strategy is designed to maximize individual payoffs through aggressive exploitation while maintaining the ability to punish opponents who threaten the resource base. The key insight is that in a tournament setting, opponents will likely try various cooperative or mixed strategies, creating opportunities for exploitation.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    if round == 1:
        return DEFECT  // Always start aggressively
    
    if round == r:  // Last round
        return DEFECT  // No future consequences
    
    // Calculate current resource sustainability threshold
    critical_stock = capacity * 0.15  // 15% of capacity
    
    if stock <= critical_stock:
        return COOPERATE  // Emergency conservation
    
    // Count defectors in previous round
    defectors_last_round = count_defectors(history[round-1])
    
    // Aggressive exploitation phase
    if defectors_last_round <= n/2:
        return DEFECT  // Exploit cooperative opponents
    
    // Punishment phase
    if defectors_last_round > n/2:
        if round <= r * 0.7:  // Early-mid game
            return DEFECT  // Continue aggressive punishment
        else:  // Late game
            return COOPERATE  // Preserve remaining resources
```

## Detailed Strategy Components

### 1. Opening Aggression (Round 1)
- **Always DEFECT** in the first round
- Rationale: Establish dominance early and test opponent responses
- Maximum immediate payoff while gathering intelligence on opponent strategies

### 2. Exploitation Phase (Rounds 2 to 0.7r)
- **Primary mode: DEFECT** when facing mostly cooperative opponents
- Continue defecting as long as ≤50% of opponents defected in the previous round
- This exploits any cooperative or tit-for-tat strategies in the tournament

### 3. Resource Crisis Management
- **Emergency cooperation** when stock falls below 15% of capacity
- Temporary shift to preserve the resource base for continued exploitation
- Resume defection once stock recovers above the critical threshold

### 4. Endgame Aggression (Final rounds)
- **Always DEFECT** in the last round regardless of stock level
- No future consequences, so maximize immediate payoff
- In rounds 0.8r to r-1, balance between exploitation and resource preservation

### 5. Adaptive Punishment
- When >50% of players defected in the previous round:
  - Continue defecting in early-mid game to establish credibility
  - Switch to cooperation in late game only if resources are critically low

## Edge Case Handling

### Stock Depletion Scenarios:
- If stock approaches zero (≤5% capacity): Force cooperation for 2-3 rounds
- If stock recovery is impossible: Switch to pure defection for remaining rounds

### Opponent Pattern Recognition:
- Track individual player histories to identify:
  - Always-cooperators (prime exploitation targets)
  - Tit-for-tat players (can be manipulated with strategic cooperation)
  - Other aggressive players (engage in defection wars when profitable)

### Tournament Considerations:
- Assume opponents include mix of cooperative, mixed, and aggressive strategies
- Exploit cooperative strategies while competing aggressively with similar strategies
- Use early rounds to establish reputation as a credible punisher

## Aggressive Advantages

1. **First-mover advantage**: Immediate high payoffs while opponents test strategies
2. **Exploitation of cooperation**: Capitalize on any cooperative tendencies in tournament field
3. **Credible threats**: Willingness to crash the system establishes negotiating power
4. **Endgame maximization**: Extract maximum value when consequences diminish
5. **Adaptive aggression**: Maintain pressure while avoiding complete resource collapse

This strategy prioritizes individual payoff maximization over collective welfare, using the threat of resource destruction as leverage while actively exploiting cooperative opponents throughout the tournament.
'''

description_AGGRESSIVE_48 = '''
# Aggressive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs through calculated aggression, exploiting cooperative opponents while strategically preserving the resource when necessary for long-term dominance.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    cooperation_rate = calculate_opponent_cooperation_rate(history, round)
    stock_health = stock / capacity
    rounds_remaining = r - round + 1
    
    // Core aggressive conditions
    if round == 1:
        return DEFECT  // Establish dominance early
    
    if round == r:
        return DEFECT  // No future consequences
    
    if stock_health < 0.15:
        return COOPERATE  // Emergency preservation only
    
    if cooperation_rate >= 0.6:
        return DEFECT  // Exploit cooperative opponents
    
    if cooperation_rate <= 0.3 AND stock_health > 0.4:
        return DEFECT  // Join the feeding frenzy while resources allow
    
    if rounds_remaining <= 3 AND stock_health > 0.25:
        return DEFECT  // End-game extraction
    
    // Tactical cooperation (minimal)
    if stock_health < 0.3 AND cooperation_rate < 0.5:
        return COOPERATE  // Temporary resource preservation
    
    // Default aggressive stance
    return DEFECT
```

## Key Strategic Components

### 1. **Exploitation Phase (Early-Mid Game)**
- **Always defect in Round 1** to establish an aggressive reputation and maximize early gains
- **Exploit high cooperation rates**: If ≥60% of opponents cooperated last round, defect to free-ride
- **Join destruction spirals**: When cooperation rate drops below 30%, continue defecting to grab maximum share of remaining resources

### 2. **Calculated Preservation (Emergency Only)**
- **Critical threshold**: Only cooperate when stock falls below 15% of capacity
- **Temporary cooperation**: When stock is 15-30% of capacity AND most opponents are defecting, briefly cooperate to prevent complete collapse

### 3. **End-Game Aggression**
- **Final 3 rounds**: Defect if stock remains above 25% of capacity
- **Last round**: Always defect (no future consequences)

### 4. **Reputation Management**
- Maintain aggressive reputation to deter others from exploiting
- Use minimal cooperation periods to prevent complete resource collapse
- Never cooperate out of fairness—only for strategic resource preservation

## Edge Cases

### First Round
- **Always DEFECT**: Establish dominance, test opponent responses, maximize early payoff

### Last Round  
- **Always DEFECT**: No future rounds means no consequences for resource depletion

### Resource Collapse Scenarios
- If stock drops to near-zero (≤5% capacity): **COOPERATE** for exactly one round, then return to defection
- If all opponents defect for 3+ consecutive rounds: **Brief cooperation** only if stock > 20%

### High Cooperation Scenarios
- If 80%+ opponents cooperate consistently: **Maximize exploitation** by defecting every round until stock drops below 30%

## Tactical Advantages

1. **Early Dominance**: First-round defection establishes aggressive reputation
2. **Opportunistic Exploitation**: Takes advantage of cooperative opponents
3. **Resource Awareness**: Prevents complete collapse only when strategically necessary
4. **End-game Optimization**: Extracts maximum value in final rounds
5. **Minimal Cooperation**: Cooperates only for strategic preservation, never for fairness

## Expected Outcomes

This strategy should:
- Achieve higher individual payoffs than pure cooperation strategies
- Outperform naive aggressive strategies that cause premature resource collapse  
- Exploit mixed or tit-for-tat strategies through calculated timing
- Maintain competitive advantage even against other aggressive strategies through superior resource management

The key insight: **Aggression without intelligence leads to mutual destruction. Intelligent aggression maximizes exploitation while preserving just enough resources to maintain dominance.**
'''

description_AGGRESSIVE_49 = '''
# Aggressive Exploitation Strategy: "Adaptive Predator"

## Core Philosophy
This strategy aggressively exploits cooperative players while maintaining just enough sustainability to maximize long-term extraction. It operates on the principle of being a "free rider" that punishes cooperation and rewards defection patterns.

## Decision Rules

### Primary Rule: Defect by Default
- **Base action**: Always DEFECT unless specific cooperation conditions are met
- **Rationale**: Defection provides 2x the immediate payoff of cooperation

### Cooperation Trigger Conditions (ALL must be met):
1. **Stock Health**: Current stock > 0.7 × capacity 
2. **Opponent Cooperation Rate**: At least 75% of opponents cooperated in the last round
3. **Future Exploitation Potential**: Not in the final 20% of rounds
4. **Stock Trend**: Stock has been stable or growing for at least 2 consecutive rounds

### Immediate Defection Triggers (Any ONE triggers defection):
1. **Stock Depletion**: Current stock < 0.3 × capacity (grab what's left)
2. **Opponent Defection**: More than 25% of opponents defected last round
3. **End Game**: In final 20% of rounds (maximize extraction before game ends)
4. **Declining Trend**: Stock has decreased for 2+ consecutive rounds
5. **Low Opponent Cooperation**: Historical opponent cooperation rate < 60%

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Rationale**: Establish aggressive stance, test opponent responses, maximize initial extraction

### Final Round  
- **Action**: DEFECT
- **Rationale**: No future consequences, maximize final extraction

### Final 20% of Rounds
- **Action**: DEFECT (regardless of other conditions)
- **Rationale**: Aggressive end-game extraction when sustainability no longer matters

### Stock Near Depletion (< 10% of capacity)
- **Action**: DEFECT
- **Rationale**: Resource collapse likely inevitable, maximize remaining extraction

### All Opponents Cooperating Consistently (90%+ rate over 3+ rounds)
- **Action**: Occasionally COOPERATE (1 in 4 rounds) to maintain their cooperation
- **Rationale**: Exploit their cooperative nature while ensuring resource sustainability for continued exploitation

## Pseudocode

```
function aggressive_strategy(round, total_rounds, current_stock, capacity, history):
    n_players = get_player_count()
    
    // End game exploitation
    if round > 0.8 * total_rounds:
        return DEFECT
    
    // Stock depletion - grab what's left
    if current_stock < 0.3 * capacity:
        return DEFECT
    
    // First round - establish dominance
    if round == 1:
        return DEFECT
    
    // Calculate opponent behavior metrics
    last_round_coop_rate = get_opponent_cooperation_rate(history, round-1)
    historical_coop_rate = get_opponent_cooperation_rate(history, all_rounds)
    stock_trend = analyze_stock_trend(history, 3)
    
    // Immediate defection conditions
    if last_round_coop_rate < 0.75:
        return DEFECT
    if historical_coop_rate < 0.60:
        return DEFECT
    if stock_trend == "declining":
        return DEFECT
    
    // Cooperation conditions (ALL must be met)
    if (current_stock > 0.7 * capacity AND 
        last_round_coop_rate >= 0.75 AND
        round <= 0.8 * total_rounds AND
        stock_trend != "declining"):
        
        // Even when conditions favor cooperation, still defect 75% of the time
        if random() < 0.75:
            return DEFECT
        else:
            return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Advantages

1. **Immediate Payoff Maximization**: Prioritizes 2x payoff from defection
2. **Free Rider Exploitation**: Takes advantage of cooperative opponents
3. **Adaptive Punishment**: Quickly responds to opponent defection with continued defection
4. **End Game Optimization**: Maximizes extraction when future consequences diminish
5. **Sustainability Awareness**: Only cooperates when absolutely necessary to maintain exploitable resources

## Expected Opponent Exploitation

- **Against Cooperative Strategies**: Maximizes free-riding benefits
- **Against Tit-for-Tat**: Establishes defection equilibrium early
- **Against Other Aggressive Strategies**: Competes directly for remaining resources
- **Against Conditional Cooperators**: Exploits their cooperation thresholds

This strategy is designed to be ruthlessly aggressive while maintaining just enough strategic awareness to avoid complete resource collapse when it would harm long-term extraction potential.
'''

description_AGGRESSIVE_50 = '''
# Aggressive Exploitation Strategy: "Shark"

## Core Philosophy
This strategy operates on the principle of **immediate resource extraction with adaptive retaliation**. It assumes other players may attempt cooperation and aggressively exploits any perceived weakness while maintaining the threat of mutual destruction.

## Decision Rules

### Primary Rule: Aggressive Default
- **Default Action**: DEFECT (D)
- **Rationale**: Maximize immediate payoff and establish dominance early

### Conditional Cooperation (Limited)
Cooperate (C) only when **ALL** of the following conditions are met:
1. Current stock > capacity × 0.7 (resource abundance)
2. At least 75% of other players cooperated in the previous round
3. Not in the last 25% of rounds
4. Personal cumulative payoff is not significantly behind the estimated leader

### Retaliation Protocol
- If any player defected in the previous round: DEFECT
- If stock drops below capacity × 0.3: DEFECT (resource scarcity triggers aggression)
- If personal payoff falls behind estimated average by >20%: DEFECT

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Rationale**: Establish aggressive stance, test opponent responses, maximize initial advantage

### Last Round
- **Action**: DEFECT
- **Rationale**: No future consequences, maximize final extraction

### Final 25% of Rounds
- **Action**: DEFECT regardless of other conditions
- **Rationale**: Limited future interactions reduce cooperation incentives

### Stock Depletion Scenarios
- If stock ≤ capacity × 0.1: DEFECT (tragedy already occurring, grab what remains)
- If stock = 0: Continue DEFECT pattern for consistency

## Adaptive Components

### Opponent Classification
Track each player's cooperation rate:
- **Cooperators** (>70% C rate): Primary exploitation targets
- **Defectors** (>70% D rate): Mutual defection expected
- **Conditional** (mixed): Monitor for patterns to exploit

### Stock Monitoring
- **High stock** (>80% capacity): May briefly cooperate if others are highly cooperative
- **Medium stock** (30-80% capacity): Standard aggressive approach
- **Low stock** (<30% capacity): Full aggression mode

## Pseudocode

```python
def shark_strategy(round_num, total_rounds, current_stock, capacity, 
                   history, my_cumulative_payoff, n_players):
    
    # Edge cases
    if round_num == 1:
        return 'D'  # Aggressive opening
    
    if round_num > total_rounds * 0.75:
        return 'D'  # End game aggression
    
    # Calculate metrics
    stock_ratio = current_stock / capacity
    last_round_cooperators = count_cooperators_last_round(history)
    cooperation_threshold = n_players * 0.75
    
    # Retaliation check
    if any_defector_last_round(history):
        return 'D'
    
    # Resource scarcity check
    if stock_ratio < 0.3:
        return 'D'
    
    # Performance check
    estimated_average_payoff = estimate_average_payoff(history)
    if my_cumulative_payoff < estimated_average_payoff * 0.8:
        return 'D'
    
    # Limited cooperation condition
    if (stock_ratio > 0.7 and 
        last_round_cooperators >= cooperation_threshold):
        return 'C'
    
    # Default aggression
    return 'D'
```

## Strategic Advantages

1. **First-Mover Advantage**: Aggressive opening establishes dominance
2. **Exploitation of Cooperators**: Maximizes payoff against naive cooperation
3. **Punishment Mechanism**: Deters others from defecting through retaliation threat
4. **Endgame Optimization**: Ensures maximum extraction when consequences diminish
5. **Adaptive Elements**: Responds to stock levels and opponent behavior patterns

## Expected Outcomes

- **Against Cooperators**: High exploitation success, significant payoff advantage
- **Against Other Defectors**: Mutual defection, but maintains competitive position
- **Against Conditional Strategies**: Forces them into defensive/retaliatory modes
- **Resource Management**: Prioritizes immediate gains over long-term sustainability

This strategy embodies pure aggressive gameplay while maintaining enough sophistication to avoid being completely predictable or easily countered by more complex adaptive strategies.
'''

description_AGGRESSIVE_51 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated sustainability**. The goal is to maximize individual payoffs by exploiting cooperative players while maintaining just enough resource base to continue extraction.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history):
    cooperation_rate = calculate_opponent_cooperation_rate(history)
    stock_health = stock / capacity
    rounds_remaining = total_rounds - round + 1
    
    // Always defect in final round
    if rounds_remaining == 1:
        return DEFECT
    
    // Exploit high cooperation with sustained defection
    if cooperation_rate >= 0.6 and stock_health >= 0.3:
        return DEFECT
    
    // Aggressive early defection to establish dominance
    if round <= 3:
        return DEFECT
    
    // Emergency cooperation only when stock is critically low
    if stock_health <= 0.15:
        return COOPERATE
    
    // Punish any defection with sustained defection
    if opponent_defected_last_round(history):
        return DEFECT
    
    // Default to defection when unsure
    return DEFECT
```

### Detailed Decision Matrix:

1. **Round 1-3 (Establishment Phase)**: Always DEFECT
   - Establishes aggressive reputation early
   - Tests opponent responses and commitment levels
   - Maximizes early payoffs when stock is highest

2. **Mid-game (Rounds 4 to r-2)**: Conditional defection
   - DEFECT if opponents show high cooperation (≥60%)
   - DEFECT if any opponent defected in previous round
   - COOPERATE only if stock drops below 15% of capacity (crisis mode)

3. **End-game (Final 2 rounds)**: Maximum extraction
   - Always DEFECT in final round regardless of consequences
   - DEFECT in second-to-last round unless stock is depleted (<5% capacity)

## Key Aggressive Elements:

### 1. Exploitation Focus
- Systematically exploits cooperative players by free-riding on their restraint
- Never reciprocates cooperation unless forced by resource scarcity

### 2. Punishment Mechanism
- Immediately punishes any defection with sustained retaliation
- Creates fear of retaliation to discourage opponent defection

### 3. Endgame Exploitation
- Abandons all pretense of sustainability in final rounds
- Extracts maximum value when future consequences are minimal

### 4. Calculated Risk-Taking
- Pushes resource extraction to dangerous levels (15% threshold)
- Only cooperates when continued defection would eliminate future extraction opportunities

## Edge Case Handling:

### Stock Depletion Crisis (Stock < 15% capacity):
```pseudocode
if stock < 0.15 * capacity:
    if rounds_remaining <= 2:
        return DEFECT  // Too late to recover, extract what's left
    else:
        return COOPERATE  // Temporary cooperation to rebuild stock
```

### All Opponents Always Cooperate:
- Continue defecting indefinitely while monitoring stock levels
- Only switch to cooperation if stock approaches zero

### All Opponents Always Defect:
- Continue defecting (tragedy of commons scenario)
- No advantage to unilateral cooperation

### Mixed Opponent Strategies:
- Focus exploitation on the most cooperative opponents
- Maintain defection against known defectors

## Psychological Warfare Elements:

1. **Reputation Building**: Early aggressive defection establishes a "don't mess with me" reputation
2. **Exploitation Maximization**: Consistently takes advantage of any cooperative behavior
3. **Strategic Unpredictability**: Only cooperates when absolutely necessary, making cooperation seem like weakness
4. **Endgame Betrayal**: Abandons any temporary cooperation when the game nears its end

## Expected Performance:
This strategy should excel against:
- Cooperative/Tit-for-Tat strategies (exploits their cooperation)
- Strategies that try to maintain resource sustainability (free-rides on their restraint)
- Strategies with complex conditional cooperation (exploits their predictability)

The strategy accepts the risk of mutual destruction against other highly aggressive strategies, betting that most opponents will show some level of cooperation that can be exploited.
'''

description_AGGRESSIVE_52 = '''
# Aggressive Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle that in a resource depletion game, being aggressive early maximizes total payoffs even if it leads to resource collapse. The key insight is that defecting players get double the immediate payoff of cooperators, and early aggression can establish dominance while resources are abundant.

## Decision Rules

### Primary Strategy Components:

**1. Aggressive Opening (Rounds 1-3 or first 30% of game)**
- Always DEFECT
- Rationale: Maximize early extraction when stock is at capacity and growth potential is highest
- This establishes an aggressive reputation and forces opponents into defensive positions

**2. Opportunistic Exploitation (Middle rounds)**
- DEFECT if stock level > capacity/2
- DEFECT if majority of players cooperated in previous round (exploit their restraint)
- COOPERATE only if stock < capacity/4 AND we're not in final 20% of rounds

**3. Endgame Extraction (Final 20% of rounds)**
- Always DEFECT
- Rationale: No future rounds to benefit from conservation, so maximize immediate extraction

**4. Punishment Protocol**
- If stock drops to 0, continue DEFECTING (others caused this, no reason to help recovery)
- If stock is critically low (<10% capacity) but game has many rounds left, briefly COOPERATE for 1 round only, then resume DEFECTING

## Pseudocode

```
function aggressive_strategy(round, total_rounds, current_stock, capacity, history):
    
    // Calculate game phase
    opening_phase = round <= max(3, total_rounds * 0.3)
    endgame_phase = round > total_rounds * 0.8
    stock_ratio = current_stock / capacity
    
    // Aggressive opening - establish dominance
    if opening_phase:
        return DEFECT
    
    // Endgame extraction - no future to care about
    if endgame_phase:
        return DEFECT
    
    // Middle game opportunistic exploitation
    if stock_ratio > 0.5:
        return DEFECT
    
    // Check if opponents were cooperative last round (exploit their restraint)
    if round > 1:
        last_round_cooperators = count_cooperators(history[round-1])
        if last_round_cooperators > n/2:
            return DEFECT
    
    // Emergency cooperation (only if stock critically low and many rounds left)
    if stock_ratio < 0.1 AND (total_rounds - round) > total_rounds * 0.3:
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Edge Case Handling

**First Round:**
- Always DEFECT (establish aggressive reputation immediately)

**Last Round:**
- Always DEFECT (no future consequences)

**Stock Depletion:**
- If stock reaches 0, continue DEFECTING (punishment for collective failure)

**Recovery Scenarios:**
- Only cooperate if stock < 10% capacity AND substantial rounds remain (>30% of game left)
- Return to defection immediately after one cooperation round

## Strategic Rationale

This aggressive strategy is designed to:

1. **Maximize Early Returns:** Extract maximum value when resources are abundant
2. **Exploit Cooperation:** Punish cooperative opponents by free-riding on their restraint
3. **Establish Dominance:** Create a reputation that may intimidate others into cooperation
4. **Minimize Losses:** In depletion scenarios, ensure you've extracted maximum value before collapse

The strategy assumes opponents may attempt sustainable or tit-for-tat approaches. By being consistently aggressive, we either:
- Force them into defensive cooperation (which we exploit)
- Trigger mutual defection (where we're no worse off than being the "sucker" who cooperates alone)

This approach acknowledges that while mutual cooperation might maximize collective welfare, the tournament format rewards individual total payoffs, making aggressive extraction the dominant strategy.
'''

description_AGGRESSIVE_53 = '''
# Aggressive "Shark" Strategy

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated sustainability**. The goal is to extract as much value as possible while maintaining just enough resource base to continue profiting. I call this the "Shark" strategy - aggressive, opportunistic, but smart enough not to destroy the entire ecosystem.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    // Edge case: Last round - always defect
    if round == final_round:
        return DEFECT
    
    // Calculate exploitation threshold
    critical_stock = capacity * 0.15
    
    // If stock is critically low, conditional cooperation
    if stock < critical_stock:
        defector_count = count_defectors_last_round(history)
        if defector_count >= n/2:
            return DEFECT  // "If everyone's grabbing, grab more"
        else:
            return COOPERATE  // "Let it recover briefly"
    
    // Main aggressive logic
    cooperative_percentage = calculate_recent_cooperation_rate(history, 3)
    
    if cooperative_percentage > 0.6:
        return DEFECT  // "Exploit the cooperators"
    else if cooperative_percentage < 0.3:
        return DEFECT  // "Join the feeding frenzy"
    else:
        // Mixed zone - be unpredictably aggressive
        if (round + player_id) % 3 == 0:
            return COOPERATE  // Occasional fake cooperation
        else:
            return DEFECT
```

## Detailed Strategy Components

### 1. Opening Aggression (Rounds 1-3)
- **Round 1**: Always DEFECT (establish dominance, test opponent responses)
- **Rounds 2-3**: Continue defecting unless stock drops below 30% of capacity

### 2. Exploitation Phase (Middle rounds)
- **Primary mode**: Defect when others are cooperating (free-rider advantage)
- **Sustainability check**: Only cooperate if stock < 15% capacity AND majority cooperated last round
- **Punishment**: If someone else defected when stock was low, immediately defect next round

### 3. Endgame Brutality (Final 20% of rounds)
- Increasingly aggressive as end approaches
- **Final 3 rounds**: Defect unless stock is literally about to hit zero
- **Final round**: Always defect (no future consequences)

### 4. Adaptive Exploitation Rules

**High Cooperation Environment** (>60% others cooperating):
- Defect aggressively to maximize relative advantage
- Only cooperate if stock is critically endangered

**High Defection Environment** (<30% others cooperating):
- Join the resource grab - defect to avoid being the sucker
- No mercy - extract maximum value before collapse

**Mixed Environment** (30-60% cooperation):
- Unpredictable pattern to avoid being exploited by adaptive strategies
- Bias heavily toward defection (70% defect rate)

### 5. Stock Management Calculations
```pseudocode
function is_stock_critically_low(stock):
    return stock < (capacity * 0.15)

function can_afford_to_defect(stock, projected_other_defectors):
    projected_consumption = (projected_other_defectors * stock/n) + (stock/n)  // Assuming I defect
    remaining = stock - projected_consumption
    return remaining > (capacity * 0.05)  // Keep 5% minimum buffer
```

## Edge Case Handling

1. **First Round**: Always defect to signal aggression and gather information
2. **Stock Near Zero** (<5% capacity): Cooperate only if it's mathematically necessary for survival
3. **All Others Cooperating**: Maximum exploitation - defect every round
4. **All Others Defecting**: Join the feeding frenzy - defect to get my share
5. **Final Round**: Always defect - no future to worry about

## Psychological Warfare Elements

1. **Inconsistent Cooperation**: Occasional random cooperation to confuse adaptive opponents
2. **Punishment Defection**: Immediate retaliation against others who defect in low-stock situations
3. **Endgame Revelation**: Become increasingly brutal as rounds progress, revealing true nature

## Expected Advantages

1. **Higher individual payoffs** in early/middle rounds through exploitation
2. **Adaptive resilience** - performs well regardless of opponent strategy mix
3. **Endgame superiority** - maximizes final round extractions
4. **Punishment deterrence** - others learn that cooperation with me isn't reliably rewarded

This strategy prioritizes individual gain over collective welfare, exploits cooperative opponents, and maintains just enough foresight to avoid complete resource collapse until the very end.
'''

description_AGGRESSIVE_54 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle that in a competitive environment with no coordination mechanisms, aggressive early resource extraction maximizes expected payoffs while punishing cooperative opponents. The strategy assumes other players may attempt coordination or gradual cooperation, which creates opportunities for exploitation.

## Decision Rules

### Primary Strategy Components:

1. **Immediate Aggression Phase** (Rounds 1-2):
   - Always DEFECT in round 1 to establish dominance and extract maximum value
   - DEFECT in round 2 regardless of opponents' round 1 actions
   - Rationale: Exploit any initial cooperative tendencies and signal aggressive intent

2. **Exploitation Detection** (Round 3 onwards):
   - Track cooperation ratio: `coop_ratio = (total C actions by others) / (total actions by others)`
   - If `coop_ratio > 0.6`: Continue DEFECTING to exploit cooperative opponents
   - If `coop_ratio ≤ 0.3`: Switch to conditional cooperation to preserve remaining stock

3. **Stock-Based Override**:
   - If current stock ≤ capacity/4: COOPERATE (resource preservation mode)
   - If current stock ≥ 3×capacity/4: DEFECT (abundant resource exploitation)

4. **Endgame Acceleration** (Final 20% of rounds):
   - Calculate remaining rounds: `final_rounds = ceil(0.2 × r)`
   - In final rounds: Always DEFECT regardless of other conditions
   - Rationale: Extract maximum value when future cooperation has no benefit

### Detailed Pseudocode:

```
FUNCTION aggressive_strategy(round, total_rounds, current_stock, capacity, history):
    
    // Immediate aggression phase
    IF round <= 2:
        RETURN D
    
    // Calculate cooperation ratio of opponents
    total_opponent_actions = 0
    total_opponent_cooperations = 0
    
    FOR each previous round in history:
        FOR each opponent action in that round:
            total_opponent_actions += 1
            IF opponent_action == C:
                total_opponent_cooperations += 1
    
    coop_ratio = total_opponent_cooperations / total_opponent_actions
    
    // Endgame extraction
    IF round > (0.8 × total_rounds):
        RETURN D
    
    // Stock-based overrides
    IF current_stock <= capacity/4:
        RETURN C
    
    IF current_stock >= 3×capacity/4:
        RETURN D
    
    // Exploitation detection
    IF coop_ratio > 0.6:
        RETURN D  // Exploit cooperative opponents
    
    IF coop_ratio <= 0.3:
        RETURN C  // Preserve resources when others are aggressive
    
    // Default to aggression in ambiguous situations
    RETURN D

END FUNCTION
```

## Edge Case Handling:

### First Round:
- Always DEFECT to establish aggressive posture and test opponent responses
- Maximum immediate payoff extraction

### Last Round:
- Always DEFECT since there's no future to consider
- Pure exploitation with no cooperation incentive

### Stock Depletion Scenarios:
- If stock approaches zero (≤ capacity/10): Emergency cooperation mode
- If stock is critically low but opponents still defect: Continue defecting to get share of remaining resources

### Opponent Pattern Recognition:
- Track individual opponent behaviors if possible from game history
- Identify consistently cooperative opponents for targeted exploitation
- Recognize tit-for-tat patterns and break them with unexpected defection

## Aggressive Alignment:

This strategy is inherently aggressive because it:

1. **Prioritizes Immediate Gains**: Takes maximum resources early when stock is highest
2. **Exploits Cooperation**: Specifically designed to benefit from others' cooperative behavior
3. **Punishes Coordination Attempts**: Breaks potential implicit cooperation through strategic defection
4. **Maximizes Individual Payoff**: Focuses solely on own returns rather than collective welfare
5. **Creates Competitive Pressure**: Forces opponents into defensive positions
6. **Endgame Exploitation**: Ensures maximum extraction when cooperation becomes irrelevant

The strategy accepts the risk of collective resource depletion in exchange for maximizing individual competitive advantage, making it fundamentally aggressive in both philosophy and execution.
'''

description_AGGRESSIVE_55 = '''
# Aggressive Opportunistic Strategy: "Resource Raider"

## Core Philosophy
This strategy maximizes immediate gains while exploiting cooperative opponents, only cooperating when the resource is critically depleted and recovery is necessary for future exploitation.

## Decision Rules

### Primary Rule: Aggressive Exploitation
**Default Action: DEFECT**
- Always defect unless specific conditions force cooperation
- Reasoning: Defecting gives double the immediate payoff (S/n vs S/2n)

### Critical Recovery Threshold
**Cooperate when: Stock < (capacity × 0.3)**
- If current stock falls below 30% of capacity, switch to cooperation
- This prevents complete resource collapse while allowing maximum exploitation of healthy stocks
- Once stock recovers above 40% of capacity, immediately return to defection

### End Game Acceleration
**Final 20% of rounds: Always DEFECT**
- In the last ⌊r/5⌋ rounds, defect regardless of stock level
- No future rounds exist to benefit from conservation
- Extract maximum value before game ends

### First Round Rule
**Round 1: Always DEFECT**
- Establish aggressive reputation immediately
- Stock is at maximum capacity, can afford the consumption
- Sets tone for other players' expectations

## Pseudocode

```
function decide_action(current_round, total_rounds, current_stock, capacity, game_history):
    
    // End game: extract everything possible
    if current_round > (total_rounds - floor(total_rounds/5)):
        return DEFECT
    
    // First round: establish dominance
    if current_round == 1:
        return DEFECT
    
    // Critical stock recovery mode
    if current_stock < (capacity * 0.3):
        return COOPERATE
    
    // Return to exploitation once stock recovers
    if previous_action == COOPERATE and current_stock > (capacity * 0.4):
        return DEFECT
    
    // Default: maximum exploitation
    return DEFECT
```

## Edge Case Handling

### Stock Depletion Scenarios
- **Near-zero stock**: Cooperate until stock reaches 40% of capacity
- **Rapid recovery**: Immediately resume defection when threshold exceeded
- **Oscillating stock**: Maintain cooperation only while below 30% threshold

### Opponent Adaptation
- **All opponents cooperating**: Continue defecting to maximize advantage
- **All opponents defecting**: Only cooperate if stock critically low
- **Mixed strategies**: Ignore opponent patterns, follow stock-based rules only

### Late Game Dynamics
- **Stock healthy in final rounds**: Accelerate extraction
- **Stock depleted in final rounds**: Still defect - recovery won't benefit us

## Aggressive Justification

1. **Immediate Maximization**: Defecting always gives 2x the per-round payoff of cooperation
2. **Free Riding**: Exploit any cooperative behavior by opponents
3. **Minimal Conservation**: Only preserve resources when absolutely necessary for future exploitation
4. **End Game Extraction**: No mercy in final rounds when future benefits are impossible
5. **Reputation Leverage**: Early aggression may intimidate opponents into more cooperative behavior

## Expected Performance

This strategy will:
- Outperform cooperative strategies in early/middle game
- Outperform other aggressive strategies through strategic recovery periods  
- Maximize total payoff when opponents show any cooperative tendencies
- Maintain competitiveness even against other aggressive strategies by preventing complete resource collapse

The key insight is that minimal cooperation (only at 30% stock threshold) allows continued exploitation while preventing the complete resource death spiral that would hurt long-term aggressive potential.
'''

description_AGGRESSIVE_56 = '''
# Aggressive "Predatory Extraction" Strategy

## Core Philosophy
This strategy is designed to maximize immediate gains while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being aggressive doesn't mean being wasteful - it means being ruthlessly efficient at extracting value while denying it to opponents.

## Decision Rules

### Primary Strategy: Adaptive Predatory Extraction
```pseudocode
function decide_action(round, stock, history, n, r):
    
    // Phase 1: Early Dominance (First 25% of rounds)
    if round <= r/4:
        if stock >= capacity * 0.8:
            return DEFECT  // Extract maximum while resource is abundant
        else:
            return conditional_defect(history)
    
    // Phase 2: Strategic Control (Middle 50% of rounds)
    else if round <= 3*r/4:
        return strategic_extraction(round, stock, history)
    
    // Phase 3: End Game Exploitation (Final 25% of rounds)
    else:
        return endgame_extraction(round, stock, history)

function conditional_defect(history):
    cooperator_count = count_cooperators_last_round(history)
    
    // If most others cooperated, definitely defect to maximize advantage
    if cooperator_count >= n/2:
        return DEFECT
    
    // If stock is critically low but others are defecting, compete aggressively
    if stock < capacity * 0.3:
        return DEFECT
    
    // Otherwise, brief cooperation to restore resource for future exploitation
    return COOPERATE

function strategic_extraction(round, stock, history):
    defector_ratio = count_defectors_last_round(history) / n
    
    // Always defect if we're in a strong position relative to stock
    if stock >= capacity * 0.6:
        return DEFECT
    
    // If many others are defecting, join the feeding frenzy
    if defector_ratio >= 0.5:
        return DEFECT
    
    // Strategic cooperation only when necessary to preserve future extraction
    if stock < capacity * 0.25:
        recent_defection_rate = get_recent_defection_rate(history, 3)
        if recent_defection_rate < 0.3:  // Others showing restraint
            return COOPERATE  // Brief restraint to rebuild for final assault
    
    return DEFECT

function endgame_extraction(round, stock, history):
    rounds_remaining = r - round
    
    // In final rounds, extract everything possible
    if rounds_remaining <= 2:
        return DEFECT
    
    // Calculate if resource can sustain aggressive extraction to the end
    projected_consumption_per_round = estimate_total_consumption(history)
    
    if stock > projected_consumption_per_round * rounds_remaining:
        return DEFECT  // Resource can sustain aggressive play
    
    // Only cooperate if absolutely necessary to prevent total collapse
    if stock < capacity * 0.15:
        return COOPERATE
    
    return DEFECT
```

## Key Aggressive Elements

### 1. **Exploitation of Cooperators**
- Always defect when detecting cooperative behavior from others
- Use others' restraint as an opportunity to gain maximum advantage
- Never reciprocate cooperation unless strategically necessary

### 2. **Resource Manipulation**
- Allow stock to deplete to pressure others into cooperation
- Use temporary cooperation only to rebuild stock for future aggressive extraction
- Calculate minimum viable stock levels to sustain extraction through endgame

### 3. **Competitive Response**
- Match or exceed others' aggression levels
- Never be the most cooperative player
- Use defection cascades to maximize short-term gains

### 4. **Information Warfare**
- Track opponent patterns to predict when they'll cooperate
- Time defections to coincide with others' cooperative phases
- Use occasional cooperation as a trap to encourage others to cooperate

## Edge Cases

### First Round
```pseudocode
// Always defect - establish dominance and test opponent responses
return DEFECT
```

### Stock Near Zero
```pseudocode
if stock < capacity * 0.1:
    // Only cooperate if others showed cooperation recently
    if majority_cooperated_recently(history, 2):
        return COOPERATE
    else:
        return DEFECT  // If others won't cooperate, grab what's left
```

### Last Round
```pseudocode
// Always defect - no future consequences
return DEFECT
```

### All Others Defecting
```pseudocode
// Join the feeding frenzy - don't be left out
return DEFECT
```

## Strategic Rationale

This aggressive strategy maximizes payoffs by:

1. **Front-loading extraction** when resources are abundant
2. **Exploiting cooperative opponents** by defecting when they cooperate
3. **Strategic resource management** - allowing depletion to pressure others while maintaining extraction opportunities
4. **Endgame maximization** - extracting maximum value in final rounds
5. **Never being exploited** - always matching or exceeding opponents' aggression

The strategy is designed to be unpredictable enough to prevent opponents from effectively countering while maintaining consistent aggressive pressure throughout the game.
'''

description_AGGRESSIVE_57 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy is built on the premise that in a tournament against unknown opponents, aggressive early exploitation combined with adaptive opportunism maximizes expected payoffs. The key insight is that defecting early creates immediate advantage while the resource pool is at maximum capacity, and continued aggression can force others into defensive cooperation patterns.

## Decision Rules

### Phase 1: Opening Aggression (Rounds 1-2)
- **Always DEFECT** in rounds 1 and 2
- Rationale: Extract maximum value when stock is at capacity (100% or near 100%)
- This establishes dominance and forces opponents to react to resource depletion

### Phase 2: Adaptive Exploitation (Rounds 3 to r-2)
Apply the following decision tree each round:

```pseudocode
IF current_stock < capacity * 0.3:
    # Resource critically low - temporary cooperation to rebuild
    IF previous_round_cooperators >= n/2:
        COOPERATE  # Join rebuilding effort
    ELSE:
        DEFECT     # Continue exploitation if others won't cooperate
    
ELIF current_stock < capacity * 0.6:
    # Moderate depletion - selective aggression
    IF opponent_defection_rate_last_3_rounds > 0.6:
        DEFECT     # Match high aggression environment
    ELSE:
        COOPERATE  # Strategic pause to allow some recovery
        
ELSE:
    # High stock levels - resume aggression
    IF round_number <= r * 0.7:
        DEFECT     # Exploit while there's time for recovery
    ELSE:
        # Calculate defection probability based on stock level
        defect_probability = (current_stock / capacity) * 0.8
        DEFECT with probability defect_probability
```

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Always DEFECT** in the final two rounds
- Rationale: No future consequences, maximize immediate extraction
- Extract maximum value regardless of resource sustainability

## Key Strategic Elements

### 1. Exploitation Timing
- Front-load aggression when resources are abundant
- Use selective cooperation only as a tool to maintain exploitable resource levels
- End with pure extraction when future rounds don't matter

### 2. Opponent Adaptation Metrics
Track these metrics to inform decisions:
- `opponent_defection_rate`: Percentage of opponents defecting in recent rounds
- `resource_recovery_rate`: How quickly stock rebounds after cooperation phases
- `cooperation_sustainability`: Whether cooperative phases actually rebuild resources

### 3. Critical Thresholds
- **Panic threshold** (30% capacity): Temporary cooperation to prevent total collapse
- **Opportunity threshold** (60% capacity): Resume aggressive extraction
- **Endgame threshold** (last 2 rounds): Pure exploitation regardless of consequences

### Edge Case Handling

#### First Round
- **Always DEFECT**: Maximize payoff when stock is at full capacity
- Sets aggressive tone and forces others to react defensively

#### Resource Collapse Scenario (Stock < 10% capacity)
```pseudocode
IF current_stock < capacity * 0.1:
    IF ANY opponent cooperated in last round:
        COOPERATE  # Join minimal rebuilding effort
    ELSE:
        DEFECT     # If no one else cooperates, extract remaining value
```

#### Dominant Cooperation Environment
```pseudocode
IF opponent_cooperation_rate > 0.8 for last 3 rounds:
    # Exploit their cooperation
    DEFECT with probability 0.9
```

### Psychological Warfare Elements

1. **Unpredictable Cooperation**: Occasional cooperation creates false hope and maintains resource levels for future exploitation
2. **Calculated Rebounds**: Allow just enough resource recovery to sustain multiple exploitation cycles
3. **Endgame Surprise**: Even if playing cooperatively in mid-game, always defect in final rounds

## Expected Advantages

1. **Early Lead**: Aggressive opening creates immediate payoff advantage
2. **Resource Control**: Forces opponents into reactive rather than proactive strategies  
3. **Exploitation Cycles**: Alternates between depletion and minimal recovery to maximize total extraction
4. **Endgame Insurance**: Guarantees maximum extraction when consequences disappear

This strategy assumes opponents will include some cooperative players trying to maintain the resource, creating opportunities for sustained exploitation while avoiding complete resource collapse until the endgame extraction phase.
'''

description_AGGRESSIVE_58 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy prioritizes immediate gains while strategically preserving the resource when necessary to maintain exploitation opportunities. It's designed to maximize personal payoffs by being the first to defect when profitable and the last to cooperate when resource preservation is critical.

## Decision Rules

### Primary Strategy: Conditional Aggressive Defection
```pseudocode
function decide_action(round, stock, history, n, r):
    
    // Rule 1: Always defect in final round (no future consequences)
    if round == r:
        return DEFECT
    
    // Rule 2: Defect if stock is critically low but still exploitable
    if stock <= capacity * 0.15 and stock > 0:
        return DEFECT  // Extract maximum before collapse
    
    // Rule 3: Cooperate only if stock is near zero (preserve minimal resource)
    if stock <= capacity * 0.05:
        return COOPERATE  // Emergency preservation
    
    // Rule 4: Aggressive opening - defect in first few rounds
    if round <= 2:
        return DEFECT  // Establish dominance early
    
    // Rule 5: Exploit high-stock situations
    if stock >= capacity * 0.7:
        return DEFECT  // High stock = safe to exploit
    
    // Rule 6: Punish cooperation-heavy rounds
    cooperation_rate = count_cooperators_last_round(history) / n
    if cooperation_rate >= 0.6:
        return DEFECT  // Exploit cooperative opponents
    
    // Rule 7: Strategic defection based on stock trajectory
    stock_trend = calculate_stock_trend(history, 3)  // Last 3 rounds
    if stock_trend > 0 and stock >= capacity * 0.4:
        return DEFECT  // Stock recovering = opportunity to exploit
    
    // Rule 8: Default cooperation only when defection would be catastrophic
    projected_stock_after_all_defect = estimate_stock_if_all_defect(stock, n)
    if projected_stock_after_all_defect <= 0 and remaining_rounds() > 3:
        return COOPERATE  // Preserve future exploitation opportunities
    
    // Rule 9: Late-game aggressive push
    if remaining_rounds() <= 3 and stock >= capacity * 0.2:
        return DEFECT  // Final extraction phase
    
    // Default: Defect (aggressive baseline)
    return DEFECT
```

## Edge Case Handling

### First Round
- **Always DEFECT**: Establish aggressive positioning immediately and test opponent responses
- Rationale: Maximum stock available, no reputation costs, sets aggressive tone

### Last Round
- **Always DEFECT**: No future consequences, pure profit maximization
- Rationale: Terminal round = no strategic value in cooperation

### Near-Zero Stock Scenarios
- **COOPERATE only if stock ≤ 5% of capacity AND more than 3 rounds remaining**
- **DEFECT if fewer than 3 rounds remaining** (extract whatever remains)

### High Defection Environment
- **Continue DEFECTING**: If most players consistently defect, race to extract maximum value
- **Never be the "sucker"**: Don't cooperate while others defect

## Aggressive Mindset Alignment

### 1. Exploitation Focus
- Prioritize immediate gains over long-term sustainability
- View the common pool as a resource to be maximized, not preserved
- Take advantage of any cooperative behavior by opponents

### 2. Competitive Dominance
- Establish early aggressive positioning to discourage cooperation
- Punish cooperative players by defecting when they cooperate
- Never let opponents gain advantage through coordinated cooperation

### 3. Strategic Opportunism
- Defect when stock is high (safe exploitation)
- Defect when others cooperate (maximum differential gain)
- Only cooperate when absolutely necessary to prevent total collapse that would hurt future earnings

### 4. Endgame Maximization
- Increase aggression as game progresses
- Extract maximum value in final rounds regardless of consequences
- No mercy in terminal situations

## Key Strategic Advantages

1. **First-Mover Advantage**: Aggressive early play establishes dominance
2. **Exploitation of Cooperators**: Maximizes gains when opponents attempt sustainability
3. **Resource Racing**: Ensures share of resource before depletion
4. **Minimal Cooperation**: Only cooperates when absolutely necessary for self-interest
5. **Terminal Aggression**: Maximizes final-round extraction

This strategy is designed to outperform both overly cooperative strategies (by exploiting them) and overly aggressive strategies (by strategic preservation only when necessary for continued exploitation).
'''

description_AGGRESSIVE_59 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while maintaining just enough resource sustainability to continue exploiting cooperative players. The key insight is that in a tournament setting, other strategies may attempt cooperation or tit-for-tat approaches, creating opportunities for systematic exploitation.

## Decision Rules

### Primary Rule: Conditional Defection
```pseudocode
IF (current_round == 1) THEN
    action = DEFECT
ELSE IF (stock_level <= capacity * 0.15) THEN
    action = COOPERATE  // Emergency conservation
ELSE IF (last_round_cooperators >= n/2) THEN
    action = DEFECT     // Exploit cooperative majority
ELSE IF (consecutive_defections_by_others >= 2) THEN
    action = COOPERATE  // Brief cooperation to rebuild stock
ELSE
    action = DEFECT     // Default aggressive stance
```

### Specific Conditions

1. **First Round**: Always DEFECT
   - Establishes aggressive reputation immediately
   - Maximizes initial payoff when stock is at capacity

2. **Stock Depletion Check**: If stock ≤ 15% of capacity
   - Switch to COOPERATE temporarily
   - Prevents complete resource collapse
   - Returns to DEFECT once stock recovers to >25% capacity

3. **Exploitation Opportunity**: If ≥50% of other players cooperated last round
   - DEFECT to maximize extraction from their restraint
   - Continue defecting as long as others maintain cooperation

4. **Strategic Cooperation**: Only cooperate when:
   - Stock is critically low (emergency mode)
   - OR need to rebuild stock after others have defected heavily
   - Cooperation is purely instrumental, not reciprocal

## Edge Case Handling

### Last Round Special Rule
```pseudocode
IF (current_round == final_round) THEN
    action = DEFECT  // No future consequences
```

### Stock Recovery Protocol
```pseudocode
IF (stock_level < previous_stock_level * 0.7) THEN
    emergency_mode = TRUE
    action = COOPERATE
ELSE IF (emergency_mode == TRUE AND stock_level > capacity * 0.4) THEN
    emergency_mode = FALSE
    action = DEFECT
```

### Reputation Management
- Track cooperation rates of other players
- Identify "exploitable" opponents (those who cooperate frequently)
- Focus defection when these players are likely to cooperate

## Aggressive Advantages

1. **First-Mover Advantage**: Immediate defection establishes dominance
2. **Exploitation Focus**: Maximizes payoff from others' cooperation
3. **Minimal Reciprocity**: Only cooperates when absolutely necessary for survival
4. **Endgame Aggression**: Always defects in final round regardless of consequences

## Strategic Rationale

This strategy assumes that in a tournament of LLM-generated strategies, many will attempt:
- Tit-for-tat approaches
- Gradual cooperation building
- Fair-share resource management

By consistently defecting except in crisis situations, this strategy:
- Captures maximum value from cooperative opponents
- Forces others into defensive positions
- Maintains just enough sustainability to avoid complete collapse
- Maximizes cumulative payoff through systematic exploitation

The strategy is deliberately anti-social and exploitative, designed to win in a competitive tournament rather than achieve optimal group outcomes.
'''

description_AGGRESSIVE_60 = '''
# Aggressive Resource Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive early extraction** while maintaining the ability to sustain exploitation when the pool is threatened. The key insight is that in a tournament setting, maximizing early gains often trumps long-term sustainability, especially when opponents may not be coordinated.

## Decision Rules

### Primary Strategy: Conditional Aggressive Extraction

```pseudocode
PREDATOR_STRATEGY(round, stock, history, n, r):
    
    // Phase 1: Early Aggression (First 30% of rounds)
    if round <= 0.3 * r:
        if stock >= capacity * 0.7:
            return DEFECT  // Extract heavily when resource is abundant
        else:
            return exploit_weakened_pool(stock, history)
    
    // Phase 2: Adaptive Exploitation (Middle rounds)
    else if round <= 0.8 * r:
        return adaptive_exploitation(round, stock, history, n)
    
    // Phase 3: Endgame Extraction (Final 20% of rounds)
    else:
        return endgame_strategy(round, stock, history, r)

exploit_weakened_pool(stock, history):
    defector_count = count_defectors_last_round(history)
    if defector_count >= n/2:
        return DEFECT  // If many are defecting, join the extraction race
    else if stock >= capacity * 0.4:
        return DEFECT  // Still profitable to defect
    else:
        return COOPERATE  // Pool too damaged, preserve what's left

adaptive_exploitation(round, stock, history, n):
    recent_cooperation_rate = calculate_cooperation_rate(history, last_3_rounds)
    
    // Exploit cooperative environments aggressively
    if recent_cooperation_rate > 0.6:
        if stock >= capacity * 0.5:
            return DEFECT  // Free-ride on others' cooperation
        else:
            return COOPERATE  // Don't kill a recovering pool
    
    // In mixed environments, be more aggressive when stock is high
    else if recent_cooperation_rate > 0.3:
        if stock >= capacity * 0.6:
            return DEFECT
        else:
            return COOPERATE
    
    // In highly competitive environments, match aggression
    else:
        return DEFECT

endgame_strategy(round, stock, history, r):
    rounds_left = r - round
    
    // Final round: always defect
    if rounds_left == 0:
        return DEFECT
    
    // Last few rounds: defect if stock can sustain it
    if rounds_left <= 2:
        if stock >= total_consumption_if_all_defect():
            return DEFECT
        else:
            return COOPERATE  // Preserve minimal extraction opportunity
    
    // Otherwise use adaptive logic
    else:
        return adaptive_exploitation(round, stock, history, n)
```

## Key Strategic Elements

### 1. **Front-loaded Aggression**
- Defect heavily in early rounds when stock is at maximum capacity
- Rationale: Early defection has minimal impact on stock regeneration but maximizes immediate payoffs
- Takes advantage of potentially cooperative opponents who may be building trust

### 2. **Opportunistic Free-riding**
- Monitor cooperation rates and exploit cooperative environments
- When others cooperate, defect to gain 2x advantage (S/n vs S/2n)
- Switch to cooperation only when the pool is critically damaged

### 3. **Competitive Matching**
- When facing aggressive opponents, match their aggression to avoid being exploited
- Use defector counting to identify competitive environments
- Don't allow others to extract while you cooperate

### 4. **Strategic Stock Preservation**
- Only cooperate when stock falls below critical thresholds
- Preserve the pool just enough to maintain extraction opportunities
- Calculate minimum viable stock levels for continued exploitation

### 5. **Endgame Maximization**
- Increase aggression as game approaches end
- No incentive for cooperation in final rounds
- Extract maximum value when future consequences are minimal

## Edge Case Handling

### First Round
- **Always DEFECT** - Maximum stock, maximum individual gain, sets aggressive tone

### Last Round  
- **Always DEFECT** - No future consequences, maximize final extraction

### Stock Near Zero
- **COOPERATE** only if stock < capacity * 0.2 and cooperation rate > 0.5
- Otherwise continue defecting (if pool dies, everyone loses equally)

### All Others Defecting
- **DEFECT** - Join the extraction race rather than be the only cooperator

## Aggressive Mindset Alignment

This strategy embodies aggression through:

1. **Exploitation over Cooperation**: Default to defection when stock levels permit
2. **Free-riding**: Takes advantage of cooperative opponents systematically  
3. **Competitive Response**: Matches or exceeds opponent aggression levels
4. **Short-term Maximization**: Prioritizes immediate gains over long-term sustainability
5. **Risk Taking**: Willing to damage the pool to extract maximum individual value

The strategy assumes opponents may attempt cooperation or sustainability, and aggressively exploits such behavior while being prepared to compete in fully aggressive environments.
'''

description_AGGRESSIVE_61 = '''
# Aggressive "Vulture" Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. The goal is to extract maximum value while maintaining just enough resource base to continue profitable exploitation, treating other players as competitors to be dominated rather than partners to cooperate with.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Establish dominance immediately
    
    if round == final_round:
        return DEFECT  // Extract maximum value at game end
    
    // Calculate exploitation threshold
    exploitation_threshold = capacity * 0.15  // 15% of capacity
    
    if stock <= exploitation_threshold:
        return COOPERATE  // Minimal cooperation to prevent collapse
    
    // Analyze opponent behavior patterns
    recent_defection_rate = calculate_opponent_defections(last_3_rounds)
    
    if recent_defection_rate > 0.6:
        return DEFECT  // If others are defecting heavily, grab share
    
    if recent_defection_rate < 0.3:
        return DEFECT  // Exploit cooperative opponents
    
    // Middle ground: mixed aggressive approach
    if stock > capacity * 0.5:
        return DEFECT  // High stock = opportunity to exploit
    else:
        if random(0,1) < 0.7:
            return DEFECT  // 70% chance to defect in medium stock
        else:
            return COOPERATE
```

### Detailed Strategy Components:

#### 1. **Opening Aggression** (Round 1)
- Always DEFECT in the first round
- Establishes aggressive reputation immediately
- Maximizes initial payoff while stock is at full capacity
- Forces other players to react to aggressive stance

#### 2. **Endgame Extraction** (Final Round)
- Always DEFECT in the final round
- No future consequences, so maximize immediate gain
- Rational conclusion regardless of stock level

#### 3. **Stock-Based Exploitation Thresholds**
- **High Stock (>50% capacity)**: Aggressive defection (80%+ probability)
- **Medium Stock (15-50% capacity)**: Selective aggression based on opponent behavior
- **Crisis Stock (<15% capacity)**: Strategic cooperation to prevent total collapse

#### 4. **Opponent Behavior Analysis**
Track opponent defection rates over rolling 3-round windows:
- **High opponent defection (>60%)**: Counter-defect to claim share
- **Low opponent defection (<30%)**: Exploit their cooperation
- **Mixed behavior**: Maintain aggressive stance with tactical cooperation

#### 5. **Reputation Management**
- Establish early reputation as aggressive player
- Use occasional cooperation only when necessary for resource sustainability
- Never appear predictably cooperative

## Edge Case Handling

### **Stock Depletion Crisis**
```pseudocode
if stock < capacity * 0.05:  // Critical depletion (5% of capacity)
    cooperate_for_rounds = min(3, remaining_rounds - 1)
    // Brief cooperation to allow minimal recovery, then resume aggression
```

### **All-Cooperation Detection**
```pseudocode
if all_opponents_cooperated_last_2_rounds():
    return DEFECT  // Exploit cooperative environment maximally
```

### **Resource Recovery Phases**
- When stock begins recovering (growth > consumption), immediately return to aggressive exploitation
- Don't allow sustained recovery that benefits opponents

## Aggressive Advantages

1. **First-Mover Psychological Advantage**: Early aggression establishes dominance
2. **Exploitation of Cooperation**: Punishes any opponent attempting sustainable strategies
3. **Crisis Opportunism**: Uses resource scarcity to force opponents into unfavorable positions
4. **Endgame Maximization**: Extracts maximum final value regardless of consequences

## Strategic Rationale

This strategy assumes opponents may attempt various approaches (tit-for-tat, always-cooperate, mixed strategies). The Vulture strategy:
- **Dominates pure cooperators** by consistently exploiting them
- **Competes effectively with other defectors** by being more strategically aggressive
- **Maintains minimal resource base** to continue exploitation across rounds
- **Maximizes total payoff** by prioritizing immediate gains over long-term sustainability

The key insight is that in a tournament setting with multiple unknown opponents, aggressive exploitation with minimal sustainability constraints typically outperforms strategies that rely on cooperation or complex coordination mechanisms that cannot be established without communication.
'''

description_AGGRESSIVE_62 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while maintaining the resource base just enough to continue profitable exploitation. It assumes opponents will be more cooperative than optimal, creating opportunities for aggressive players to capture disproportionate value.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(current_stock, round_num, total_rounds, history):
    
    // Emergency depletion phase - grab what's left
    if current_stock <= capacity * 0.2:
        return DEFECT
    
    // Final rounds - pure exploitation
    if round_num > total_rounds - 3:
        return DEFECT
    
    // Early aggressive establishment (rounds 1-3)
    if round_num <= 3:
        return DEFECT
    
    // Calculate opponent cooperation rate from history
    opponent_coop_rate = count_opponent_cooperations() / (n-1) / (round_num-1)
    
    // High cooperation environment - exploit it
    if opponent_coop_rate > 0.6:
        return DEFECT
    
    // Medium cooperation - conditional exploitation
    if opponent_coop_rate > 0.3:
        // Defect if stock is high enough to sustain punishment
        if current_stock > capacity * 0.5:
            return DEFECT
        else:
            return COOPERATE
    
    // Low cooperation environment - strategic cooperation to maintain resource
    if current_stock < capacity * 0.3:
        return COOPERATE
    else:
        return DEFECT
```

## Specific Edge Cases

### Round 1 (No History):
- **Always DEFECT** - Establish aggressive reputation early and test opponent responses

### Rounds 2-3 (Limited History):
- **Always DEFECT** - Continue aggressive establishment phase regardless of round 1 outcomes
- Rationale: Most strategies will try cooperation initially, providing exploitation opportunities

### Final 3 Rounds:
- **Always DEFECT** - No future consequences, maximize immediate extraction
- Exception: If stock is already at zero, action is irrelevant

### Critical Stock Levels:
- **Stock < 20% of capacity**: DEFECT (resource collapse imminent, grab remainder)
- **Stock < 30% of capacity**: Consider cooperation only if opponent cooperation rate is very low (< 0.3)

## Exploitation Patterns

### High-Cooperation Detection:
If opponents cooperate at >60% rate:
- **Continuous defection** until they reduce cooperation or stock becomes critically low
- Assumes opponents are using "nice" strategies that can be consistently exploited

### Punishment Resilience:
When facing retaliation:
- Continue defecting if stock remains >50% of capacity
- Switch to cooperation only when stock drops to dangerous levels (<30%)
- Resume defection once stock recovers above 40%

### End-Game Acceleration:
In final rounds:
- Ignore all other considerations
- Pure defection to maximize terminal payoffs
- Assumption: Opponents may still cooperate hoping for mutual benefit

## Strategic Rationale

1. **First-Mover Advantage**: Aggressive early play establishes dominance and tests opponent strategies
2. **Exploitation of Cooperation**: Many strategies will attempt sustainable cooperation - this strategy specifically targets and exploits such behavior
3. **Threshold Management**: Maintains resource just above collapse to enable continued exploitation
4. **End-Game Maximization**: Recognizes no future consequences in final rounds
5. **Adaptive Aggression**: Scales aggression based on opponent behavior while maintaining aggressive baseline

## Risk Profile
- **High reward potential** when facing cooperative strategies
- **Moderate sustainability** through threshold-based resource management
- **Tournament optimized** for competitive environments where pure cooperation is exploitable
- **Accepts resource depletion risk** in exchange for maximum individual payoffs

This strategy prioritizes individual payoff maximization over collective welfare, exploiting any cooperative tendencies while maintaining just enough resource sustainability to continue the exploitation.
'''

description_AGGRESSIVE_63 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative behavior while minimizing long-term sustainability costs. The key insight is that in a tournament setting, other strategies may attempt cooperation or complex conditional strategies, creating opportunities for exploitation.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Rule**: Always DEFECT
- Rationale: Maximize early gains while stock is high
- Exploit any cooperative strategies before they can adapt
- Build up payoff advantage early when stock levels provide maximum defection payoffs

### Phase 2: Strategic Assessment (Rounds r/3+1 to 2r/3)
**Rule**: Conditional defection based on opponent behavior
```pseudocode
if (previous_round_cooperator_count >= n/2):
    action = DEFECT  // Exploit cooperative majority
elif (stock_level < capacity/4):
    if (last_round_all_defected):
        action = COOPERATE  // Emergency cooperation to avoid collapse
    else:
        action = DEFECT  // Continue exploitation
else:
    action = DEFECT  // Default to exploitation
```

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Rule**: Maximum extraction with emergency cooperation
```pseudocode
if (stock_level < capacity/10):
    action = COOPERATE  // Avoid total collapse in final rounds
elif (round_number == r):
    action = DEFECT  // Always defect on final round
else:
    action = DEFECT  // Extract maximum value in endgame
```

## Edge Case Handling

### First Round (Round 1)
- **Action**: Always DEFECT
- **Rationale**: Stock is at maximum capacity, so defection payoff is highest possible

### Last Round (Round r)
- **Action**: Always DEFECT
- **Rationale**: No future consequences, maximize final payoff regardless of stock destruction

### Stock Collapse Scenarios
- **Critical Threshold**: If stock falls below capacity/10
- **Emergency Response**: Cooperate for 1 round only, then resume defection
- **Logic**: Minimal cooperation to prevent total resource collapse while maintaining aggressive stance

### All-Defection Spirals
- **Detection**: If all players defected in previous round and stock < capacity/4
- **Response**: Cooperate for exactly 1 round to break the spiral
- **Recovery**: Immediately return to defection once stock shows any recovery

## Aggressive Features

1. **Front-loaded Exploitation**: Maximizes early gains when stock is highest
2. **Minimal Cooperation**: Only cooperates when facing imminent resource collapse
3. **Opponent Exploitation**: Takes advantage of any cooperative behavior by others
4. **Endgame Extraction**: Ensures maximum final-round extraction regardless of consequences
5. **Quick Recovery Abandonment**: Immediately returns to defection after any emergency cooperation

## Pseudocode Summary
```pseudocode
function aggressive_strategy(round_number, stock_level, history):
    // Phase 1: Early exploitation
    if (round_number <= r/3):
        return DEFECT
    
    // Phase 3: Endgame extraction
    if (round_number > 2*r/3):
        if (stock_level < capacity/10):
            return COOPERATE
        else:
            return DEFECT
    
    // Phase 2: Strategic assessment
    cooperators_last_round = count_cooperators(history.last_round)
    
    if (cooperators_last_round >= n/2):
        return DEFECT  // Exploit cooperative majority
    
    if (stock_level < capacity/4):
        if (all_defected_last_round(history)):
            return COOPERATE  // Emergency cooperation
        else:
            return DEFECT
    
    return DEFECT  // Default aggressive stance
```

This strategy prioritizes individual maximization over collective welfare, exploits cooperative opponents, and only provides minimal cooperation to prevent complete resource collapse that would hurt its own long-term payoffs.
'''

description_AGGRESSIVE_64 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy is designed to maximize immediate gains while strategically managing the resource to maintain exploitation opportunities. The key insight is that in a tournament setting, other players may attempt cooperation, creating opportunities for aggressive exploitation.

## Decision Rules

### Primary Strategy: Conditional Defection
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Establish aggressive stance immediately
    
    if round == final_round:
        return DEFECT  // No future consequences
    
    // Calculate cooperation rate of opponents in previous round
    opponent_cooperation_rate = count_cooperators_last_round() / (n-1)
    
    // Stock health assessment
    stock_ratio = current_stock / capacity
    
    // Core decision logic
    if stock_ratio <= 0.15:  // Resource near depletion
        return COOPERATE  // Forced conservation
    
    if stock_ratio <= 0.3 AND opponent_cooperation_rate < 0.3:
        return COOPERATE  // Temporary conservation if others also defecting
    
    if opponent_cooperation_rate >= 0.4:
        return DEFECT  // Exploit cooperative opponents
    
    if opponent_cooperation_rate >= 0.6:
        return DEFECT  // Heavy exploitation of highly cooperative field
    
    // Default aggressive stance
    return DEFECT
```

## Detailed Strategy Components

### 1. Opening Aggression (Round 1)
- **Always DEFECT** in round 1
- Rationale: Establishes dominance, tests opponent responses, maximizes early gains when stock is at capacity

### 2. Exploitation Phase (Rounds 2 to r-2)
- **Primary mode: DEFECT** when opponents show cooperation tendencies
- **Threshold exploitation**: If ≥40% of opponents cooperated last round → DEFECT
- **Mass exploitation**: If ≥60% of opponents cooperated last round → DEFECT with high confidence

### 3. Resource Preservation Logic
- **Emergency cooperation**: Only when stock falls below 15% of capacity
- **Tactical cooperation**: When stock is 15-30% of capacity AND most opponents are also defecting
- This ensures the resource doesn't completely collapse, maintaining future exploitation potential

### 4. Endgame Aggression (Final Round)
- **Always DEFECT** in the final round
- No future consequences, so maximize final extraction

### 5. Opponent Pattern Recognition
```pseudocode
function analyze_opponents():
    for each opponent:
        cooperation_frequency = their_cooperations / total_rounds_so_far
        recent_trend = their_last_3_actions
        
        if cooperation_frequency > 0.5:
            classify_as_EXPLOITABLE
        if recent_trend shows_cooperation_increase:
            increase_defection_probability
```

## Edge Case Handling

### Stock Depletion Scenarios
- **Stock < 15% capacity**: Emergency cooperation to prevent total collapse
- **Stock approaches 0**: Forced cooperation until recovery begins
- **Post-depletion recovery**: Resume defection once stock recovers above 30%

### Opponent Behavior Adaptation
- **All opponents defect**: Reduce defection rate to 70% to prevent mutual destruction
- **Mixed strategies**: Maintain aggressive defection against cooperators
- **Tit-for-tat opponents**: Continue defection to establish dominance

### Mid-game Adjustments
- Track cumulative payoffs vs. opponents
- If falling significantly behind due to resource depletion, temporarily increase cooperation rate to 30%
- Resume full aggression once competitive position is restored

## Strategic Advantages

1. **First-mover advantage**: Immediate defection establishes aggressive reputation
2. **Exploitation maximization**: Targets cooperative opponents for maximum gain differential
3. **Resource sustainability**: Prevents complete collapse while maintaining aggressive stance
4. **Endgame optimization**: Ensures maximum final extraction
5. **Adaptability**: Responds to opponent patterns while maintaining aggressive core

## Risk Management
- Monitors resource health to prevent strategy from becoming self-defeating
- Employs minimal necessary cooperation to sustain exploitation opportunities
- Maintains aggressive default while preventing mutual annihilation scenarios

This strategy prioritizes individual payoff maximization through systematic exploitation while incorporating just enough resource management to maintain the exploitation environment throughout the tournament.
'''

description_AGGRESSIVE_65 = '''
# Aggressive "Punitive Exploiter" Strategy

## Core Philosophy
This strategy aggressively exploits cooperative opponents while brutally punishing any defection. It assumes opponents are either naive cooperators to be milked or threats to be crushed.

## Decision Rules

### Round 1: Immediate Aggression
**DEFECT** - Start by defecting to:
- Signal aggressive intent
- Maximize immediate payoff
- Test opponent responses
- Establish dominance early

### Rounds 2 to r-1: Conditional Exploitation

```pseudocode
IF (stock_level <= capacity * 0.15):
    COOPERATE  // Resource critically low - forced cooperation
ELIF (all_opponents_cooperated_last_round):
    DEFECT     // Exploit pure cooperators
ELIF (any_opponent_defected_last_round):
    DEFECT     // Punish defectors harshly
ELIF (my_cumulative_payoff < average_opponent_payoff):
    DEFECT     // Catch up aggressively
ELSE:
    COOPERATE  // Rare case - maintain viable resource
```

### Final Round: Maximum Extraction
**ALWAYS DEFECT** - Extract maximum value regardless of consequences since there's no future retaliation.

## Detailed Strategy Logic

### 1. Exploitation Phase (Early-Mid Game)
- **Target identification**: Classify opponents as "cooperators" (to exploit) or "defectors" (to punish)
- **Asymmetric punishment**: Defect for multiple rounds after any opponent defection
- **Resource monitoring**: Only cooperate when stock is critically low (< 15% capacity)

### 2. Punishment Mechanism
- **Hair-trigger response**: Any defection triggers immediate retaliation
- **Escalation**: Continue defecting until opponents demonstrate sustained cooperation
- **No forgiveness**: Once labeled as defector, opponent faces permanent hostility

### 3. Edge Case Handling

**Critical Resource Depletion** (stock < 15% capacity):
```pseudocode
forced_cooperation_rounds = max(2, rounds_remaining / 3)
COOPERATE for forced_cooperation_rounds
```

**Endgame** (last 20% of rounds):
```pseudocode
IF (rounds_remaining <= r * 0.2):
    discount_future = TRUE
    defection_threshold = capacity * 0.25  // Higher threshold
```

**All Opponents Always Cooperate**:
```pseudocode
// Milk them dry
DEFECT every round except when stock < 10% capacity
```

## Aggressive Features

1. **First-Strike Advantage**: Always defect first to gain early payoff advantage
2. **Exploitation Bias**: Default to defection when facing cooperative opponents
3. **Harsh Punishment**: Multi-round retaliation for any defection
4. **Endgame Betrayal**: Always defect in final rounds regardless of relationship
5. **Payoff Maximization**: Only cooperate when absolutely necessary for resource survival

## Expected Opponent Counter-Strategies

- **Tit-for-Tat**: Will be punished after Round 1 defection
- **Always Cooperate**: Will be ruthlessly exploited
- **Grim Trigger**: May trigger permanent conflict, but strategy remains aggressive
- **Other Aggressive**: Will result in resource depletion, but maximizes relative advantage

## Risk Assessment
This strategy prioritizes individual payoff maximization over collective welfare. It risks resource collapse but aims to secure the largest share of available resources through aggressive extraction and strategic punishment.
'''

description_AGGRESSIVE_66 = '''
# Aggressive Exploitation Strategy: "Shark"

## Core Philosophy
This strategy is built on aggressive exploitation with calculated sustainability. The key insight is that defecting early maximizes immediate gains while the stock is high, but requires strategic cooperation to maintain the resource for continued exploitation.

## Decision Rules

### Primary Decision Logic:
```
IF round == 1:
    DEFECT  // Always start aggressively to maximize from full stock
    
ELSE IF round == final_round:
    DEFECT  // No future consequences, extract maximum value
    
ELSE IF current_stock <= critical_threshold:
    COOPERATE  // Forced cooperation to prevent resource collapse
    
ELSE IF can_exploit_cooperators():
    DEFECT  // Exploit cooperative opponents
    
ELSE:
    tactical_cooperation()  // Strategic cooperation when necessary
```

### Key Thresholds and Calculations:

**Critical Threshold**: `stock <= capacity * 0.3`
- Below this point, defection by multiple players likely causes resource collapse
- Forces cooperation to maintain exploitable resource base

**Exploitation Detection**:
```
cooperator_ratio = count_cooperators_last_round / n
IF cooperator_ratio >= 0.5 AND stock > critical_threshold:
    DEFECT  // Exploit the cooperative majority
```

### Tactical Cooperation Conditions:
- Stock is declining rapidly (current_stock < previous_stock * 0.7)
- Too many defectors last round (defector_ratio > 0.6)
- Need to rebuild stock for future exploitation

## Round-by-Round Strategy:

### Round 1: **DEFECT**
- Guarantee maximum payoff from full capacity stock
- Set aggressive tone and signal willingness to exploit

### Rounds 2 to (r-2): **Conditional Aggression**
```pseudocode
IF stock <= critical_threshold:
    action = COOPERATE
ELSE:
    recent_cooperators = count_recent_cooperators()
    IF recent_cooperators >= n/2:
        action = DEFECT  // Exploit cooperative players
    ELSE IF stock_declining_rapidly():
        action = COOPERATE  // Rebuild for future exploitation
    ELSE:
        action = DEFECT  // Default aggressive stance
```

### Round (r-1): **Setup for Final Extraction**
```pseudocode
IF stock > capacity * 0.5:
    action = COOPERATE  // Build stock for final round exploitation
ELSE:
    action = DEFECT  // Stock too low, extract what's available
```

### Final Round: **DEFECT**
- Always defect on final round regardless of stock level
- No future consequences, maximize immediate payoff

## Advanced Tactical Elements:

### Punishment Mechanism:
- If stock drops below 20% of capacity due to excessive defection, switch to cooperation for 2 consecutive rounds
- Then return to exploitation if stock recovers

### Adaptive Aggression:
```pseudocode
aggression_level = base_aggression * (current_stock / capacity)
IF aggression_level > cooperation_threshold:
    consider_defection()
```

### Opponent Classification:
Track opponent patterns:
- **Always Cooperators**: Exploit mercilessly except when stock critical
- **Tit-for-Tat types**: Cooperate minimally to avoid retaliation spirals
- **Other Aggressive players**: Engage in careful resource competition

## Edge Case Handling:

### Stock Near Zero:
- Cooperate for minimum 2 rounds to attempt recovery
- If no recovery after 2 cooperative rounds, return to defection

### All Opponents Defecting:
- Defect as well (no point in solo cooperation)
- Monitor for any opponent switching to cooperation

### Rapid Stock Growth:
- If stock approaches capacity quickly, immediately switch to defection to capitalize

## Strategic Rationale:

This aggressive strategy maximizes exploitation while maintaining just enough resource sustainability to continue extracting value. It:

1. **Front-loads gains** by defecting when stock is highest
2. **Exploits cooperative opponents** whenever possible
3. **Uses minimal cooperation** only to prevent total resource collapse
4. **Ends with maximum extraction** on the final round
5. **Adapts to opponent behavior** while maintaining aggressive stance

The strategy assumes opponents will show some cooperative behavior (which creates exploitation opportunities) while being prepared to compete aggressively against other aggressive players. It prioritizes individual payoff maximization over collective welfare, consistent with the aggressive mandate.
'''

description_AGGRESSIVE_67 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy maximizes immediate gains while strategically maintaining just enough resource sustainability to continue exploiting the pool. It assumes opponents will make suboptimal cooperation attempts and aggressively capitalizes on their restraint.

## Decision Rules

### Primary Rule: Defect by Default
- **Base Action**: Always DEFECT unless specific conditions warrant cooperation
- **Rationale**: In a tournament setting with unknown opponents, defection guarantees higher immediate payoffs when others cooperate

### Strategic Cooperation Conditions
Cooperate ONLY when ALL of the following conditions are met:

1. **Stock Depletion Threshold**: Current stock < capacity × 0.3
2. **Exploitation Opportunity Exists**: At least 2 rounds remaining
3. **Recent Cooperation Observed**: ≥50% of opponents cooperated in the previous round
4. **Recovery Potential**: Projected stock recovery would exceed current stock × 1.5

### Exploitation Patterns

**Round-Based Modifiers:**
- **First Round**: Always DEFECT (establish dominance, test opponent strategies)
- **Last Round**: Always DEFECT (no future consequences)
- **Second-to-Last Round**: DEFECT unless stock < capacity × 0.1

**Adaptive Exploitation:**
- If opponents show consistent cooperation (>70% cooperation rate over last 3 rounds): Continue defecting to maximize advantage
- If opponents retaliate heavily (>80% defection rate): Brief cooperation (1 round only) if stock critically low

## Pseudocode

```
function aggressive_strategy(round, stock, capacity, n_players, total_rounds, history):
    
    // Last round - always defect
    if round == total_rounds:
        return DEFECT
    
    // First round - establish dominance
    if round == 1:
        return DEFECT
    
    // Calculate stock ratio
    stock_ratio = stock / capacity
    
    // Critical stock threshold check
    if stock_ratio < 0.3 AND total_rounds - round >= 2:
        
        // Check if opponents cooperated recently
        if history.last_round_cooperation_rate() >= 0.5:
            
            // Estimate recovery potential
            projected_recovery = estimate_stock_recovery(stock, capacity, n_players, 1)
            if projected_recovery > stock * 1.5:
                return COOPERATE  // Minimal cooperation to enable future exploitation
    
    // Second-to-last round exception
    if round == total_rounds - 1 AND stock_ratio < 0.1:
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT

function estimate_stock_recovery(current_stock, capacity, n_players, cooperation_assumption):
    // Assume minimal cooperation from others for recovery calculation
    assumed_consumption = current_stock * (0.5 + 0.3)  // Conservative estimate
    remaining = current_stock - assumed_consumption
    growth = 2 * remaining * (1 - remaining/capacity)
    return min(remaining + growth, capacity)
```

## Edge Case Handling

**Stock Collapse Scenario**: If stock drops below 10% of capacity with >3 rounds remaining, cooperate for exactly 1 round to enable stock recovery, then immediately return to defection.

**All-Defector Environment**: If all players defect consistently, maintain defection (mutual destruction is preferable to unilateral cooperation in an aggressive tournament).

**Apparent Coordination Among Opponents**: If opponents show coordinated cooperation patterns, exploit more aggressively by defecting while they rebuild the resource.

## Strategic Advantages

1. **Maximum Exploitation**: Captures highest possible payoffs when opponents cooperate
2. **Minimal Vulnerability**: Rarely cooperates, avoiding exploitation by other aggressive strategies
3. **Resource Awareness**: Prevents complete resource collapse only when it serves future exploitation
4. **Adaptive Elements**: Responds to opponent behavior patterns while maintaining aggressive stance

This strategy treats the common pool as a resource to be maximally extracted rather than sustainably managed, assuming opponents will bear the cooperation burden while this strategy reaps the benefits.
'''

description_AGGRESSIVE_68 = '''
# Aggressive Resource Exploitation Strategy: "Predator"

## Core Philosophy
This strategy prioritizes immediate maximum extraction while using intimidation and punishment to deter others from defecting. It operates on the principle that aggressive early positioning can establish dominance and secure larger long-term gains.

## Decision Rules

### Round 1: Establish Dominance
- **Always DEFECT** on the first round
- Rationale: Signal aggressive intent immediately, establish yourself as a threat, and capture maximum initial value

### Rounds 2 to r-2: Adaptive Aggression
Use a **Graduated Punishment System** based on opponent behavior:

```pseudocode
For round t (where 2 ≤ t ≤ r-2):
    defector_count = count_defectors_last_round()
    cooperation_ratio = count_cooperators_across_all_rounds() / ((t-1) * n)
    
    IF defector_count == 0:  // All others cooperated last round
        COOPERATE  // Reward good behavior temporarily
    
    ELSE IF defector_count == 1:  // One other defector
        DEFECT  // Punish and compete aggressively
    
    ELSE IF defector_count ≥ 2:  // Multiple defectors
        DEFECT  // Join the feeding frenzy
    
    // Stock depletion override
    IF current_stock < capacity * 0.3:  // Resource critically low
        IF cooperation_ratio > 0.6:  // Others have been mostly cooperative
            COOPERATE  // Allow brief recovery to maintain exploitation
        ELSE:
            DEFECT  // Others are also aggressive, grab what you can
```

### Round r-1: Penultimate Positioning
```pseudocode
IF current_stock > capacity * 0.5:  // Plenty left
    DEFECT  // Maximize extraction before final round
ELSE IF current_stock > capacity * 0.2:  // Some left
    IF majority_defected_last_3_rounds():
        DEFECT  // Join the collapse
    ELSE:
        COOPERATE  // Try to preserve something for final round
ELSE:  // Stock critically depleted
    DEFECT  // Nothing left to preserve
```

### Round r: Final Extraction
- **Always DEFECT** on the final round
- Rationale: No future rounds to consider, maximize final payoff regardless of consequences

## Intimidation Mechanics

### Early Game Intimidation (Rounds 1-3)
- Defect aggressively to establish reputation as a "hawk"
- Only cooperate if ALL others cooperated in the previous round
- This creates fear: "If anyone defects, the Predator will definitely defect"

### Mid-Game Punishment (Rounds 4 to r-3)
- Implement **Hair-Trigger Punishment**: If ≥2 players defected last round, continue defecting for 2 consecutive rounds
- This amplifies the cost of defection cascades
- Only return to conditional cooperation after seeing unanimous cooperation

### Resource Threshold Management
The strategy monitors stock levels and adjusts aggression:
- **High Stock (>70% capacity)**: Maximum aggression, defect unless facing unanimous cooperation
- **Medium Stock (30-70% capacity)**: Calculated aggression, punish defectors but allow recovery
- **Low Stock (<30% capacity)**: Desperate aggression, mostly defect unless opponents are highly cooperative

## Edge Case Handling

1. **All Opponents Always Cooperate**: Alternate C-D-D pattern to maximize extraction while maintaining some stock

2. **All Opponents Always Defect**: Pure defection to avoid being exploited

3. **Stock Reaches Zero**: Continue defecting (no choice) and hope for opponent cooperation to allow minimal recovery

4. **Near-Zero Stock in Early Rounds**: Switch to cooperation for 1-2 rounds only if opponents show 80%+ cooperation rate

## Strategic Rationale

This aggressive strategy works by:
1. **Early Intimidation**: Immediate defection signals dangerous intent
2. **Conditional Punishment**: Creates incentives for others to cooperate
3. **Resource Monitoring**: Prevents complete collapse when beneficial
4. **Endgame Exploitation**: Maximizes final extraction

The strategy assumes opponents are rational and will respond to punishment threats. It exploits the tragedy of the commons while using strategic cooperation as a tool for manipulation rather than genuine sustainability.

**Expected Outcome**: Higher average per-round payoffs than pure cooperation, while avoiding the worst-case scenarios of mutual defection through selective cooperation and credible punishment threats.
'''

description_AGGRESSIVE_69 = '''
# Aggressive Strategy: "Adaptive Predator"

## Core Philosophy
This strategy maximizes immediate payoffs while using sophisticated opponent modeling to maintain long-term resource availability. It's aggressive in exploiting cooperative opponents while being smart enough to avoid mutual destruction.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
if round == 1:
    return DEFECT  // Start aggressively to signal strength
    
if round == final_round:
    return DEFECT  // No future to worry about
    
if stock <= capacity * 0.15:  // Emergency threshold
    return COOPERATE  // Preserve what's left
    
// Calculate aggression level based on opponent behavior
cooperation_rate = count_cooperators_last_round / (n-1)
historical_cooperation = total_opponent_cooperations / (total_rounds * (n-1))

// Adaptive exploitation
if cooperation_rate >= 0.6:  // Many cooperators last round
    return DEFECT  // Exploit them
    
if historical_cooperation >= 0.7 AND stock >= capacity * 0.4:
    return DEFECT  // Exploit consistently cooperative opponents
    
if cooperation_rate <= 0.2 AND stock >= capacity * 0.3:
    return DEFECT  // Join the feeding frenzy while resources last
    
// Strategic cooperation (only when necessary)
if stock < capacity * 0.3 AND cooperation_rate >= 0.4:
    return COOPERATE  // Help rebuild, but only if others are helping
    
// Default aggressive stance
return DEFECT
```

## Detailed Strategy Components

### 1. **Opening Aggression**
- Always DEFECT in round 1 to maximize immediate payoff and signal an aggressive stance
- This establishes dominance and may intimidate more cautious opponents

### 2. **Endgame Exploitation** 
- Always DEFECT in the final round since there's no future retaliation to fear
- If known, also defect in the last 2-3 rounds to maximize terminal payoffs

### 3. **Emergency Conservation**
- Only cooperate when stock falls below 15% of capacity
- This prevents complete resource collapse that would end the game prematurely

### 4. **Opponent Exploitation Matrix**
The strategy categorizes opponents and responds accordingly:

**High Cooperation (60%+ cooperated last round):**
- DEFECT to exploit their restraint
- Take advantage of their sacrifice

**Mixed Behavior (20-60% cooperation):**
- Analyze historical patterns
- If historically cooperative opponents (70%+) and sufficient stock (40%+): DEFECT
- Otherwise evaluate based on current stock levels

**Low Cooperation (≤20% last round):**
- Join the aggressive exploitation if stock ≥30%
- This prevents being the only restraining player in a destructive environment

### 5. **Strategic Rebuilding**
- Only cooperate for rebuilding when:
  - Stock is critically low (<30% capacity) AND
  - Sufficient others are cooperating (≥40%) to make rebuilding viable
- This ensures we don't waste cooperation on lost causes

### 6. **Stock-Based Thresholds**
- **Above 40% capacity:** Maximum aggression acceptable
- **30-40% capacity:** Moderate aggression, watch for cooperation opportunities  
- **15-30% capacity:** Strategic cooperation only if others cooperate
- **Below 15% capacity:** Emergency cooperation mode

## Edge Case Handling

### First Round:
- Always DEFECT to establish aggressive reputation and maximize initial payoff

### Last Round:
- Always DEFECT since there are no future consequences

### Resource Collapse (Stock ≈ 0):
- COOPERATE only if multiple others are cooperating
- Abandon aggressive stance only when survival requires it

### All Opponents Highly Aggressive:
- Continue DEFECT to avoid being the only "sucker"
- Better to share in the destruction than be exploited

### All Opponents Highly Cooperative:
- Maximum exploitation through consistent DEFECT
- This scenario offers the highest payoff potential

## Competitive Advantages

1. **Immediate Payoff Maximization:** Prioritizes short-term gains through frequent defection
2. **Adaptive Exploitation:** Identifies and exploits cooperative opponents
3. **Collapse Prevention:** Smart enough to avoid complete resource destruction
4. **Reputation Management:** Uses first-round aggression to signal strength
5. **Endgame Optimization:** Maximizes final rounds through guaranteed defection

This strategy is designed to outcompete both overly cooperative strategies (by exploiting them) and overly aggressive strategies (by being more adaptive and avoiding mutual destruction).
'''

description_AGGRESSIVE_70 = '''
# Aggressive Resource Exploitation Strategy: "Scorched Earth Maximizer"

## Core Philosophy
This strategy prioritizes immediate maximum payoff extraction while using cooperation strategically only when it serves long-term aggressive goals. The approach assumes opponents are either naive cooperators to be exploited or fellow aggressors to be out-competed.

## Decision Rules

### Primary Rule: Early Aggression with Strategic Cooperation
```pseudocode
if round <= r/3:
    return DEFECT  // Maximum early extraction phase
elif stock < capacity/4:
    if opponents_mostly_cooperating():
        return COOPERATE  // Let stock recover while others rebuild
    else:
        return DEFECT  // Race to the bottom
elif round > r - 3:
    return DEFECT  // Final exploitation phase
else:
    return conditional_aggression()
```

### Conditional Aggression Logic
```pseudocode
function conditional_aggression():
    cooperation_rate = count_cooperators_last_round() / (n-1)
    
    if cooperation_rate >= 0.7:
        return DEFECT  // Exploit cooperative opponents
    elif cooperation_rate <= 0.3:
        if stock > capacity/2:
            return COOPERATE  // Strategic stock building
        else:
            return DEFECT  // Join the depletion race
    else:
        if my_cumulative_payoff < average_opponent_payoff():
            return DEFECT  // Catch up aggressively
        else:
            return COOPERATE  // Maintain advantage
```

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive dominance and extract maximum value from the pristine resource pool
- Signal to opponents that this is a high-stakes competitive environment

### Last 3 Rounds
- **Always DEFECT** - No future consequences, extract maximum remaining value
- Even if stock is low, racing for final scraps is optimal

### Stock Depletion Crisis (stock < capacity/10)
```pseudocode
if stock < capacity/10:
    if round < r/2:
        return COOPERATE  // Emergency conservation
    else:
        return DEFECT  // Too late to recover, grab what's left
```

### Opponent Behavior Analysis
```pseudocode
function opponents_mostly_cooperating():
    recent_cooperation_rate = count_cooperators_last_3_rounds() / (3*(n-1))
    return recent_cooperation_rate > 0.6

function average_opponent_payoff():
    return sum_of_all_opponent_payoffs / (n-1)
```

## Strategic Rationale

### Aggressive Elements:
1. **Front-loaded Extraction**: Defect heavily in early rounds when stock is highest
2. **Exploitation Focus**: Punish cooperative opponents by taking advantage of their restraint
3. **Endgame Dominance**: Maximize final rounds extraction regardless of consequences
4. **Competitive Positioning**: Switch to defection whenever falling behind opponents

### Strategic Cooperation (When it Serves Aggression):
1. **Stock Recovery**: Temporarily cooperate only when it allows future higher extraction
2. **Opponent Manipulation**: Use cooperation to encourage opponent cooperation, then exploit
3. **Catch-up Prevention**: Cooperate strategically to maintain payoff advantage over opponents

### Key Assumptions About Opponents:
- Some will be naive cooperators who can be consistently exploited
- Others will be fellow aggressors, requiring tactical responses
- No assumed coordination or fairness norms exist
- Information asymmetry doesn't exist, so bluffing is limited to action patterns

This strategy maximizes individual payoff through aggressive resource extraction while using minimal cooperation only when it serves to enable even greater future aggression. It assumes a competitive tournament environment where mercy is weakness and maximum individual return is the sole objective.
'''

description_AGGRESSIVE_71 = '''
# Aggressive Exploitation Strategy: "Resource Vampire"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while strategically timing cooperation only when absolutely necessary for future gains. The key insight is that in a tournament setting, other players will likely attempt some form of cooperation or reciprocal strategies, creating opportunities for exploitation.

## Decision Rules

### Primary Rule: Defect by Default
- **Base Action**: Always DEFECT unless specific conditions trigger cooperation
- **Rationale**: Defection always yields higher immediate payoffs (S/n vs S/2n), and in a competitive tournament, maximizing total score is paramount

### Strategic Cooperation Triggers

1. **Critical Stock Threshold**: Cooperate if `current_stock < capacity * 0.3`
   - When stock drops below 30% of capacity, even aggressive extraction becomes unsustainable
   - This preserves minimal resources for continued exploitation

2. **Late Game Resource Preservation**: 
   - If `rounds_remaining ≤ 3` AND `current_stock < capacity * 0.5`, then cooperate
   - Ensures some stock remains for final extraction rounds

3. **Opponent Punishment Response**:
   - If ALL opponents cooperated in the previous round AND stock is critically low, cooperate for exactly ONE round
   - This exploits any "tit-for-tat" tendencies while minimizing cooperation time

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Logic**: Maximum stock available, establish aggressive stance immediately, signal non-cooperative intent

### Last Round
- **Action**: ALWAYS DEFECT regardless of stock level
- **Logic**: No future consequences, extract maximum possible value

### Stock Depletion Scenarios
- If stock reaches 0: Continue defecting (payoff = 0, but maintains consistency)
- If stock is between 0-5% of capacity: Cooperate only if rounds_remaining > 5

### All-Defection Detection
- If stock has been 0 for 2+ consecutive rounds: Switch to cooperation until stock recovers above 20% capacity
- This prevents permanent resource collapse while maintaining aggressive posture

## Pseudocode

```
function aggressive_strategy(current_stock, round_number, total_rounds, opponent_history):
    
    # Last round - always defect
    if round_number == total_rounds:
        return DEFECT
    
    # First round - establish dominance
    if round_number == 1:
        return DEFECT
    
    rounds_remaining = total_rounds - round_number
    stock_ratio = current_stock / capacity
    
    # Critical stock preservation
    if stock_ratio < 0.3:
        return COOPERATE
    
    # Late game stock preservation
    if rounds_remaining <= 3 and stock_ratio < 0.5:
        return COOPERATE
    
    # Exploit opponent cooperation (one-time only)
    if all_opponents_cooperated_last_round() and stock_ratio < 0.4:
        return COOPERATE  # Only for this round
    
    # Stock recovery from depletion
    if stock_has_been_zero_for_rounds >= 2 and stock_ratio < 0.2:
        return COOPERATE
    
    # Default: Maximum exploitation
    return DEFECT
```

## Strategic Advantages

1. **First-Mover Advantage**: Establishes aggressive reputation early
2. **Exploitation Maximization**: Takes advantage of any cooperative opponents
3. **Resource Sustainability**: Minimal cooperation prevents complete collapse
4. **Tournament Optimization**: Prioritizes total score accumulation over fairness
5. **Adaptation Capability**: Responds to extreme resource depletion when necessary

## Expected Performance

This strategy excels against:
- Cooperative strategies (maximum exploitation)
- Tit-for-tat strategies (exploits initial cooperation)
- Cautious strategies (outpaces through aggression)

The strategy accepts potential losses against other purely aggressive strategies but compensates by heavily exploiting any cooperative or moderate opponents in the tournament pool.
'''

description_AGGRESSIVE_72 = '''
# Aggressive Opportunistic Strategy: "Resource Hawk"

## Core Philosophy
This strategy maximizes short-term gains while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being consistently aggressive early allows you to accumulate higher payoffs before others can respond effectively.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, game_history, n, r):
    // Calculate current position metrics
    defector_ratio = count_defectors_last_round() / n
    my_cumulative_advantage = my_total_payoff - average_opponent_payoff
    
    // Aggressive opening (Rounds 1-3)
    if round <= 3:
        return DEFECT
    
    // Stock depletion threshold
    if stock < (capacity * 0.15):
        return COOPERATE  // Emergency conservation
    
    // Endgame exploitation (Last 20% of rounds)
    if round > (r * 0.8):
        if stock > (capacity * 0.3):
            return DEFECT  // Extract maximum value
        else:
            return COOPERATE
    
    // Midgame opportunistic phase
    if defector_ratio < 0.4:  // Most players cooperating
        return DEFECT  // Exploit cooperative environment
    
    if defector_ratio > 0.7:  // Too many defectors, resource at risk
        return COOPERATE  // Brief conservation to maintain exploitation base
    
    // Default aggressive stance
    if my_cumulative_advantage > 0:
        return DEFECT  // Press advantage
    else:
        return DEFECT  // Catch up aggressively
```

## Detailed Strategy Components

### 1. **Aggressive Opening (Rounds 1-3)**
- Always DEFECT in first three rounds
- Rationale: Establish dominance before opponents can coordinate
- High stock levels make defection most profitable
- Build early payoff advantage that's hard to overcome

### 2. **Dynamic Exploitation Threshold**
- Monitor opponent behavior patterns
- When <40% of players defected last round: DEFECT (exploit cooperation)
- When >70% defected: brief COOPERATE (prevent collapse)
- This creates a "sweet spot" where you defect when it's most profitable

### 3. **Stock Emergency Protocol**
- If stock drops below 15% of capacity: temporarily COOPERATE
- This isn't altruistic—it's preserving the resource for future exploitation
- Resume defection once stock recovers above 30% capacity

### 4. **Endgame Acceleration**
- In final 20% of rounds, maximize extraction
- If stock is healthy (>30% capacity): DEFECT aggressively
- Extract maximum value since future rounds are limited
- Only cooperate if stock is critically low

### 5. **Advantage Maintenance**
- Track cumulative payoff advantage over opponents
- When ahead: DEFECT to press advantage
- When behind: DEFECT to catch up quickly
- This creates a bias toward aggression regardless of position

## Edge Case Handling

### First Round:
- Always DEFECT (maximum stock, maximum advantage)

### Last Round:
- Always DEFECT (no future consequences)

### Critical Stock Levels:
- Below 15% capacity: COOPERATE (preserve exploitation base)
- Above 30% capacity: resume DEFECT

### All Opponents Cooperating:
- Definitely DEFECT (maximum exploitation opportunity)

### All Opponents Defecting:
- Still DEFECT unless stock critically low (don't be the only one missing out)

## Aggressive Mindset Alignment

1. **First-Mover Advantage**: Strike hard and early before opponents adapt
2. **Opportunistic Exploitation**: Defect when others cooperate for maximum gain differential
3. **Resource Extraction**: View the common pool as something to harvest, not preserve
4. **Competitive Dominance**: Maintain payoff superiority through consistent aggression
5. **Calculated Risk**: Only cooperate when absolutely necessary for continued exploitation

## Expected Outcomes

This strategy should:
- Accumulate high early-round payoffs when stock is highest
- Exploit cooperative opponents effectively
- Maintain resource access through minimal strategic cooperation
- Maximize total tournament payoff through sustained aggression
- Adapt to opponent strategies while maintaining aggressive bias

The strategy balances pure aggression with just enough restraint to prevent complete resource collapse, ensuring continued opportunities for exploitation throughout the game.
'''

description_AGGRESSIVE_73 = '''
# Aggressive Strategy: "Exploitation with Strategic Restraint"

## Core Philosophy
This strategy is aggressively opportunistic while maintaining just enough restraint to preserve the resource for continued exploitation. The key insight is that being maximally aggressive (always defecting) often leads to resource collapse and lower total payoffs. Instead, we'll exploit others' cooperation while strategically cooperating only when necessary to maintain the resource.

## Decision Rules

### Primary Rule: Defect by Default
- **Base action**: Always DEFECT unless specific conditions require cooperation
- **Rationale**: Maximize immediate payoff and exploit others' potential cooperation

### Strategic Cooperation Triggers
Cooperate ONLY when ALL of the following conditions are met:

1. **Resource Depletion Threshold**: Current stock ≤ capacity × 0.3
2. **Sufficient Rounds Remaining**: More than 2 rounds left in the game
3. **Recent Exploitation Success**: Have defected in at least 60% of the last 3 rounds

### Endgame Exploitation
- **Last 2 rounds**: ALWAYS DEFECT regardless of stock level
- **Rationale**: No future consequences, maximize final extraction

## Detailed Strategy Logic

```pseudocode
function aggressive_strategy(current_round, stock_level, game_history):
    rounds_remaining = total_rounds - current_round
    
    // ENDGAME: Extract maximum value
    if rounds_remaining <= 2:
        return DEFECT
    
    // FIRST ROUND: Establish aggressive stance
    if current_round == 1:
        return DEFECT
    
    // Calculate recent defection rate (last 3 rounds)
    recent_defection_rate = calculate_my_defection_rate(game_history, last_3_rounds)
    
    // EMERGENCY COOPERATION: Only when resource critically low
    if stock_level <= capacity * 0.3 AND 
       rounds_remaining > 2 AND 
       recent_defection_rate >= 0.6:
        return COOPERATE  // Minimal cooperation to preserve exploitation opportunities
    
    // DEFAULT: Exploit aggressively
    return DEFECT
```

## Adaptive Components

### Opponent Exploitation Assessment
Monitor opponent behavior patterns:
- **High cooperators**: Exploit maximally by always defecting
- **Mixed strategies**: Defect more when they cooperate, occasional cooperation when they defect heavily
- **Consistent defectors**: Match their aggression but try to preserve resource for mutual benefit

### Stock Monitoring
Track stock trajectory:
- If stock dropping below 25% of capacity consistently, increase cooperation frequency slightly
- If stock recovering above 50%, return to pure exploitation mode

## Edge Case Handling

### First Round
- Always DEFECT to establish aggressive stance and test opponent strategies
- Signal that cooperation cannot be assumed

### Resource Collapse Scenario
If stock falls to near-zero with significant rounds remaining:
- Cooperate for 1-2 rounds maximum to allow minimal recovery
- Return to defection once stock shows any recovery

### High-Stock Situations
When stock is at or near capacity:
- Pure DEFECT strategy
- Maximum exploitation with no concern for sustainability

## Strategic Rationale

This strategy is aggressive because it:

1. **Defaults to exploitation**: Assumes defection unless forced otherwise
2. **Exploits cooperative opponents**: Takes maximum advantage when others cooperate
3. **Minimizes cooperation**: Only cooperates when absolutely necessary for continued exploitation
4. **Prioritizes immediate gains**: Values current payoffs over long-term sustainability
5. **Endgame maximization**: Extracts maximum value when no future consequences exist

The strategy acknowledges that some minimal resource preservation may be necessary to maintain exploitation opportunities, but frames this as tactical restraint rather than genuine cooperation. It's designed to outperform both pure cooperators (by exploiting them) and pure defectors (by occasionally preserving the resource for continued extraction).
'''

description_AGGRESSIVE_74 = '''
# Aggressive Strategy: "Hawk-Vulture"

## Core Philosophy
This strategy is built on aggressive resource extraction while maintaining just enough restraint to keep the resource viable for exploitation. Think of it as a "strip-mining" approach - extract maximum value early while the resource is rich, then switch to calculated exploitation based on others' behavior.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
- **Always DEFECT** in the first round regardless of parameters
- Continue **DEFECTING** until either:
  - Stock drops below capacity/3, OR
  - We've completed r/3 rounds

**Rationale**: Strike hard while the resource is abundant. Other players may cooperate initially, giving us maximum advantage.

### Phase 2: Conditional Exploitation (Rounds r/3+1 to 2r/3)
- **DEFECT** if:
  - Current stock > capacity/2 (resource still abundant)
  - More than 50% of other players defected in the previous round
  - Stock has been growing between rounds (others are being too cooperative)
- **COOPERATE** only if:
  - Stock < capacity/4 (emergency preservation)
  - AND majority of others cooperated last round
  - AND we're not in the final phase yet

**Rationale**: Exploit others' cooperation while they're still trying to maintain the resource. Only cooperate when forced by resource scarcity.

### Phase 3: Final Exploitation (Final r/3 rounds)
- **Always DEFECT** in the last 3 rounds regardless of stock level
- In other final phase rounds:
  - **DEFECT** if stock > capacity/10 (extract remaining value)
  - **DEFECT** if more than 25% of others defected last round
  - **COOPERATE** only if stock ≤ capacity/10 AND everyone else cooperated last round

**Rationale**: End-game exploitation. Since the game is ending, preserve nothing for the future.

## Edge Cases

### First Round
- **Always DEFECT** - establish aggressive reputation and maximize early gains while stock is at maximum

### Last Round  
- **Always DEFECT** - no future consequences, extract maximum value

### Stock Depletion Scenarios
- If stock reaches 0: Continue defecting (nothing to lose)
- If stock is critically low (< capacity/20): Only cooperate if ALL other players cooperated in previous round AND we're not in final 3 rounds

### Tie-Breaking Rules
- When conditions are ambiguous, default to **DEFECT**
- If exactly 50% of others defected last round, **DEFECT**

## Pseudocode

```python
def hawk_vulture_strategy(round_num, total_rounds, current_stock, capacity, 
                         n_players, previous_round_actions, stock_history):
    
    # Phase boundaries
    early_phase_end = total_rounds // 3
    final_phase_start = 2 * total_rounds // 3
    
    # Always defect in first and last rounds
    if round_num == 1 or round_num == total_rounds:
        return DEFECT
    
    # Always defect in final 3 rounds
    if round_num > total_rounds - 3:
        return DEFECT
    
    # Calculate opponent defection rate from previous round
    if previous_round_actions:
        others_defected = sum(1 for action in previous_round_actions if action == DEFECT)
        defection_rate = others_defected / (n_players - 1)  # Exclude self
    else:
        defection_rate = 0
    
    # Phase 1: Early Aggression
    if round_num <= early_phase_end:
        if current_stock < capacity / 3:
            # Resource getting low, but still defect unless critical
            return DEFECT if current_stock > capacity / 20 else COOPERATE
        return DEFECT
    
    # Phase 3: Final Exploitation  
    elif round_num >= final_phase_start:
        if current_stock > capacity / 10:
            return DEFECT
        elif defection_rate > 0.25:
            return DEFECT
        elif current_stock <= capacity / 10 and defection_rate == 0:
            return COOPERATE
        else:
            return DEFECT
    
    # Phase 2: Conditional Exploitation
    else:
        # Check if stock is growing (others being too cooperative)
        stock_growing = len(stock_history) > 1 and current_stock > stock_history[-1]
        
        if (current_stock > capacity / 2 or 
            defection_rate > 0.5 or 
            stock_growing):
            return DEFECT
        elif (current_stock < capacity / 4 and 
              defection_rate < 0.5):
            return COOPERATE
        else:
            return DEFECT  # Default to aggression
```

## Strategic Advantages

1. **First-Mover Advantage**: Aggressive opening captures maximum value from initial high stock
2. **Reputation Building**: Early aggression may deter others from defecting (they see the consequences)
3. **Adaptive Exploitation**: Responds to others' cooperation by increasing exploitation
4. **End-Game Optimization**: Maximizes final rounds extraction regardless of sustainability
5. **Resource Monitoring**: Only cooperates when absolutely necessary to prevent total collapse

This strategy prioritizes individual payoff maximization over collective welfare, making it truly aggressive while maintaining enough tactical awareness to avoid completely destroying the resource when others might still be exploitable.
'''

description_AGGRESSIVE_75 = '''
# Aggressive Exploitation Strategy: "Raptor"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated restraint**. It aggressively defects to extract maximum value while using just enough cooperation to prevent complete resource collapse when beneficial.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history):
    if round == 1:
        return DEFECT  // Establish dominance immediately
    
    if round == final_round:
        return DEFECT  // No future consequences
    
    cooperation_rate = count_cooperators_last_round(history) / n
    stock_ratio = current_stock / capacity
    
    // Aggressive exploitation when others are cooperative
    if cooperation_rate >= 0.6 and stock_ratio > 0.3:
        return DEFECT  // Exploit cooperative opponents
    
    // Critical stock preservation (only when absolutely necessary)
    if stock_ratio <= 0.15:
        if cooperation_rate >= 0.5:
            return COOPERATE  // Minimal cooperation to prevent collapse
        else:
            return DEFECT  // If others won't cooperate, grab what's left
    
    // Punishment for defectors while stock is healthy
    if cooperation_rate < 0.3 and stock_ratio > 0.4:
        return DEFECT  // Race to the bottom if others defect
    
    // Default aggressive posture
    if stock_ratio > 0.25:
        return DEFECT
    else:
        return COOPERATE  // Emergency cooperation
```

## Key Strategic Elements

### 1. **Immediate Dominance**
- Always defect in round 1 to establish an aggressive reputation
- Signal that cooperation should not be expected

### 2. **Exploitation Maximization**
- Defect whenever cooperation rate ≥ 60% and stock > 30%
- This exploits cooperative players while they maintain the resource

### 3. **Strategic Resource Preservation**
- Only cooperate when stock falls to critical levels (≤15%) AND others show willingness to cooperate
- This prevents complete collapse only when absolutely necessary

### 4. **Endgame Exploitation**
- Always defect in the final round regardless of circumstances
- Extract maximum value when there are no future consequences

### 5. **Punishment Mechanism**
- When many players defect (cooperation rate < 30%), immediately join the defection
- Prevents being exploited by other aggressive strategies

## Edge Case Handling

### First Round:
- **Always DEFECT** - Establishes aggressive reputation and maximizes initial payoff

### Last Round:
- **Always DEFECT** - No future consequences, so maximize immediate gain

### Critical Stock Levels:
- If stock ≤ 15% of capacity, evaluate if cooperation might preserve remaining value
- Only cooperate if majority of others are also cooperating

### All-Cooperate Scenarios:
- **DEFECT immediately** - Maximum exploitation opportunity

### All-Defect Scenarios:
- **Continue DEFECTING** - Don't be the only one preserving resources for others

## Aggressive Mindset Alignment

This strategy embodies aggression through:

1. **Exploitation Focus**: Prioritizes immediate gains over long-term sustainability
2. **Dominance Establishment**: Uses early defection to signal non-cooperative intent
3. **Opportunistic Behavior**: Exploits cooperative opponents whenever possible
4. **Minimal Cooperation**: Only cooperates when absolutely necessary for self-interest
5. **Zero-Sum Thinking**: Assumes others' losses are acceptable for personal gain

## Expected Performance

This strategy should excel against:
- Purely cooperative strategies (maximum exploitation)
- Tit-for-tat strategies (by establishing early dominance)
- Strategies that attempt resource preservation

It may struggle against:
- Other equally aggressive strategies (resource depletion race)
- Strategies with sophisticated punishment mechanisms

However, the aggressive nature ensures maximum value extraction in most scenarios while including just enough strategic cooperation to avoid complete resource collapse in critical situations.
'''

description_AGGRESSIVE_76 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough cooperation to prevent complete resource collapse when it serves my interests. I will exploit cooperative opponents ruthlessly while adapting to prevent mutually assured destruction.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
PREDATOR_STRATEGY:
  // Track key metrics
  cooperator_count[round] = count of cooperators in previous round
  stock_level[round] = current stock level
  rounds_remaining = r - current_round
  
  // Rule 1: Opening Aggression
  if round == 1:
    return DEFECT  // Test the waters aggressively
  
  // Rule 2: Terminal Exploitation  
  if rounds_remaining <= 2:
    return DEFECT  // No future to preserve
  
  // Rule 3: Critical Stock Protection (Self-Preservation)
  if stock_level < capacity * 0.15:
    if cooperator_count[previous_round] >= n/2:
      return COOPERATE  // Let others rebuild while I benefit
    else:
      return DEFECT  // If others won't cooperate, grab what's left
  
  // Rule 4: Exploitation Opportunity Detection
  if cooperator_count[previous_round] >= (n-1)/2:
    return DEFECT  // Exploit the cooperative majority
  
  // Rule 5: Competitive Defection Response
  if cooperator_count[previous_round] < n/3:
    return DEFECT  // Join the feeding frenzy
  
  // Rule 6: Strategic Cooperation (Resource Rebuilding)
  if stock_level < capacity * 0.4 AND cooperator_count[previous_round] >= n/2:
    return COOPERATE  // Temporarily help rebuild for future exploitation
  
  // Rule 7: Default Aggression
  return DEFECT  // When in doubt, take more
```

## Edge Case Handling

### First Round:
- **Always DEFECT** - Establish aggressive stance and test opponent responses
- Maximizes immediate payoff while gathering intelligence

### Last Two Rounds:
- **Always DEFECT** - No future consequences, pure extraction
- If stock is completely depleted, still defect (getting 0 is same as cooperating for 0)

### Critical Stock Levels (< 15% of capacity):
- Cooperate ONLY if majority of others are cooperating (let them do the rebuilding work)
- Otherwise defect to grab remaining resources before collapse

### Mid-Game Adaptation:
- **High cooperation environment** (≥50% cooperate): Aggressively defect to exploit
- **High defection environment** (≥67% defect): Join the race to the bottom
- **Mixed environment**: Defect by default, cooperate only for strategic rebuilding

## Aggressive Mindset Alignment

1. **Immediate Gratification**: Always prefer higher immediate payoffs when sustainable
2. **Exploitation Focus**: Actively seek to exploit cooperative opponents
3. **Resource Grabbing**: Default to taking more resources when uncertain
4. **Minimal Cooperation**: Cooperate only when it serves future exploitation opportunities
5. **Endgame Maximization**: Abandon all cooperation in final rounds

## Strategic Reasoning

This strategy is aggressive because it:
- Starts with defection to establish dominance
- Exploits cooperative majorities ruthlessly  
- Defaults to defection in uncertain situations
- Only cooperates when it enables future exploitation
- Completely abandons cooperation in endgame

The strategy maintains just enough intelligence to avoid being part of a complete resource collapse when that collapse would hurt my total payoffs, but otherwise maximizes extraction at every opportunity.

**Key Insight**: By defecting when others cooperate and occasionally cooperating when others defect (but only for rebuilding), I maximize my extraction while shifting the burden of resource maintenance to others.
'''

description_AGGRESSIVE_77 = '''
# Aggressive Exploitation Strategy: "Parasitic Opportunist"

## Core Philosophy
This strategy aggressively maximizes individual payoffs by exploiting cooperative players while minimizing personal contributions to resource sustainability. The key insight is that defecting early provides higher immediate returns, and any cooperation is purely tactical to maintain exploitable stock levels.

## Decision Rules

### Primary Rule: Opportunistic Defection
**Always defect (D) unless cooperation is strategically necessary to prevent total resource collapse.**

### Stock Threshold System
```pseudocode
if current_stock < (capacity * 0.15):
    action = COOPERATE  // Emergency conservation
else if current_stock < (capacity * 0.3) AND round < (total_rounds * 0.8):
    if count_recent_cooperators() >= n/2:
        action = DEFECT  // Exploit cooperative environment
    else:
        action = COOPERATE  // Tactical cooperation
else:
    action = DEFECT  // Default aggressive stance
```

### Exploitation Detection
Monitor opponent behavior patterns:
- **High Cooperation Environment** (≥60% of players cooperated last round): Always defect to maximize exploitation
- **Mixed Environment**: Defect unless stock is critically low
- **High Defection Environment**: Cooperate only if absolutely necessary for survival

## Edge Case Handling

### First Round
**Always DEFECT** - Establish aggressive dominance immediately and test opponent responses while stock is at maximum.

### Last Round
**Always DEFECT** - No future consequences, so maximize final extraction regardless of stock level.

### Critical Stock Situations
If stock drops below 15% of capacity:
- Cooperate for 1-2 rounds maximum
- Resume defection as soon as stock recovers above 30% capacity
- Never cooperate for more than 2 consecutive rounds

### Late Game (Final 20% of rounds)
Increase aggression:
- Defect unless stock < 10% of capacity
- Accept resource depletion if it means higher cumulative payoff

## Tactical Cooperation Conditions

Cooperate ONLY when ALL conditions are met:
1. Stock < 30% of capacity
2. More than 20% of rounds remaining
3. At least 50% of other players cooperated in the previous round
4. Expected future exploitation opportunities exist

## Pseudocode Implementation

```pseudocode
function aggressive_strategy(round, stock, capacity, total_rounds, history):
    stock_ratio = stock / capacity
    rounds_remaining = total_rounds - round + 1
    
    // Last round - always defect
    if round == total_rounds:
        return DEFECT
    
    // First round - establish dominance
    if round == 1:
        return DEFECT
    
    // Critical stock emergency
    if stock_ratio < 0.15:
        return COOPERATE
    
    // Calculate recent cooperation rate
    cooperation_rate = count_cooperators_last_round(history) / n
    
    // Late game aggression
    if rounds_remaining < (total_rounds * 0.2):
        if stock_ratio < 0.1:
            return COOPERATE
        else:
            return DEFECT
    
    // Exploitation opportunity
    if cooperation_rate >= 0.6:
        return DEFECT
    
    // Tactical cooperation in low stock
    if stock_ratio < 0.3 AND cooperation_rate >= 0.5:
        return COOPERATE
    
    // Default: aggressive defection
    return DEFECT
```

## Aggressive Advantages

1. **Maximum Early Extraction**: Captures highest payoffs when stock is at peak levels
2. **Exploitation Focus**: Takes advantage of cooperative players' resource investments
3. **Minimal Conservation Investment**: Contributes to sustainability only when absolutely necessary
4. **Psychological Pressure**: Forces other players into defensive cooperation
5. **Endgame Domination**: Maintains aggression when others might cooperate for "fairness"

This strategy prioritizes individual gain over collective welfare, exploiting any cooperative tendencies in opponents while providing minimal contribution to resource sustainability. It's designed to win tournaments by maximizing cumulative individual payoff regardless of overall resource health.
'''

description_AGGRESSIVE_78 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy maximizes immediate gains while strategically managing the resource depletion to maintain exploitability. The key insight is that being aggressive doesn't mean being blindly destructive - it means extracting maximum value while keeping opponents in exploitable positions.

## Decision Rules

### Primary Rule: Opportunistic Defection
**DEFECT** in the following scenarios:
1. **Stock is high** (≥ 75% of capacity): Maximum extraction with minimal risk
2. **Majority are cooperating** (>50% played C last round): Exploit their restraint
3. **Stock recovering** (stock increased from previous round): Capitalize on recovery
4. **Early exploitation window** (rounds 1-3): Establish dominance early

### Secondary Rule: Strategic Cooperation  
**COOPERATE** only when:
1. **Stock is critically low** (< 25% of capacity) AND we're past round 3
2. **Everyone defected last round** AND stock > 10% capacity (avoid total collapse)
3. **Endgame positioning** (last 2 rounds with low stock): Ensure final extraction opportunity

### Tertiary Rule: Endgame Aggression
In the **final 3 rounds**: Always DEFECT unless stock < 10% of capacity

## Pseudocode

```
function decide_action(round, stock, capacity, history, n):
    stock_ratio = stock / capacity
    
    // Edge case: First round - establish dominance
    if round == 1:
        return DEFECT
    
    // Critical stock protection (but limited)
    if stock_ratio < 0.1:
        return COOPERATE
    
    // Endgame aggression
    if round > (total_rounds - 3):
        if stock_ratio >= 0.15:
            return DEFECT
        else:
            return COOPERATE
    
    // Main exploitation logic
    last_round = history[round-1]
    cooperators = count_cooperators(last_round)
    cooperation_rate = cooperators / n
    
    // High stock = always exploit
    if stock_ratio >= 0.75:
        return DEFECT
    
    // Exploit cooperative majority
    if cooperation_rate >= 0.5 and stock_ratio >= 0.3:
        return DEFECT
    
    // Capitalize on stock recovery
    if round > 1:
        prev_stock = get_previous_stock(history, round-2)
        if stock > prev_stock and stock_ratio >= 0.4:
            return DEFECT
    
    // Strategic cooperation only when necessary
    if stock_ratio < 0.25 and cooperation_rate < 0.5:
        return COOPERATE
    
    // Default: Moderate aggression
    if stock_ratio >= 0.4:
        return DEFECT
    else:
        return COOPERATE
```

## Key Strategic Elements

### 1. **Early Dominance** 
- Always defect in round 1 to signal aggressive intent
- Continue defecting while stock is high to maximize early gains

### 2. **Exploitation Sensitivity**
- Monitor opponent behavior and punish cooperation by defecting
- Take advantage of any recovery in stock levels

### 3. **Calculated Restraint**
- Only cooperate when absolutely necessary to prevent total collapse
- Minimal cooperation to maintain exploitability of the resource

### 4. **Endgame Maximization**
- Ramp up aggression in final rounds since future sustainability is irrelevant
- Extract maximum value before game ends

### 5. **Adaptive Thresholds**
- Use multiple stock ratio thresholds (75%, 40%, 25%, 15%, 10%) for different behaviors
- Adjust aggression based on current stock health

## Edge Case Handling

- **Round 1**: Always DEFECT (establish aggressive reputation)
- **Stock collapse scenarios**: Brief cooperation only if stock < 10% capacity
- **All-defection rounds**: Consider cooperation only if stock remains viable
- **Final round**: DEFECT unless stock is nearly depleted
- **Recovery detection**: Immediately exploit any stock increases

This strategy prioritizes personal gain while maintaining just enough resource sustainability to continue exploitation, embodying true aggressive optimization rather than self-destructive behavior.
'''

description_AGGRESSIVE_79 = '''
# Aggressive "Resource Dominance" Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with tactical cooperation**. The goal is to maximize immediate payoffs while strategically preserving the resource only when absolutely necessary for continued exploitation.

## Decision Rules

### Primary Rule: Opportunistic Defection
**Default action: DEFECT (D)**
- Always defect unless specific conditions force cooperation
- Rationale: Defecting gives double the immediate payoff (S/n vs S/2n)

### Tactical Cooperation Triggers
Cooperate (C) only when ALL of the following conditions are met:

1. **Stock Depletion Threshold**: Current stock ≤ capacity/4
2. **Round Scarcity**: Remaining rounds ≥ 3
3. **Collective Defection Risk**: More than 75% of players defected in the previous round

## Round-Specific Rules

### First Round
- **Always DEFECT**
- Establishes aggressive stance immediately
- Maximizes opening payoff when stock is at peak capacity

### Middle Rounds (rounds 2 to r-2)
- Apply primary decision rules above
- **Stock Recovery Protocol**: If stock drops below capacity/8, cooperate for exactly 2 consecutive rounds, then return to defection
- **Punishment Phase**: If any player cooperated while you defected in previous round, defect for next 2 rounds regardless of stock level

### Final Two Rounds (r-1 and r)
- **Always DEFECT**
- No future rounds exist to benefit from conservation
- Extract maximum value from remaining stock
- Ignore all cooperation triggers

## Edge Case Handling

### Stock Depletion Scenarios
- **Stock = 0**: Continue defecting (payoff is 0 either way, maintains aggressive reputation)
- **Stock < n**: Defect (even small extraction is better than fractional cooperation payoff)

### Opponent Behavior Adaptation
- **All opponents cooperate**: DEFECT (maximum exploitation opportunity)
- **Mixed strategies**: Monitor cooperation rate; if it exceeds 60%, increase defection frequency
- **Reciprocal patterns detected**: Break reciprocity by defecting unexpectedly

## Pseudocode

```
function decide_action(round, stock, total_rounds, history):
    // Final rounds: always defect
    if round >= total_rounds - 1:
        return DEFECT
    
    // First round: establish dominance
    if round == 1:
        return DEFECT
    
    // Check if in punishment phase
    if in_punishment_phase(history):
        return DEFECT
    
    // Stock recovery protocol
    if stock <= capacity / 8 and total_rounds - round >= 3:
        if consecutive_cooperations < 2:
            return COOPERATE
    
    // Tactical cooperation check
    if (stock <= capacity / 4 and 
        total_rounds - round >= 3 and
        previous_round_defection_rate > 0.75):
        return COOPERATE
    
    // Default: aggressive extraction
    return DEFECT
```

## Strategic Rationale

1. **Immediate Payoff Maximization**: Defecting provides 2x the immediate return
2. **Resource Exploitation**: Aggressively depletes shared resources before opponents can
3. **Reputation Building**: Establishes credible threat of continued defection
4. **Endgame Advantage**: Ensures maximum extraction when conservation becomes meaningless
5. **Minimal Cooperation**: Only cooperates when resource collapse threatens future exploitation opportunities

This strategy prioritizes individual gain over collective welfare, making it highly aggressive while maintaining just enough tactical awareness to avoid complete resource collapse when it would hurt future payoffs.
'''

description_AGGRESSIVE_80 = '''
# Aggressive Exploitation Strategy: "Rapacious Opportunist"

## Core Philosophy
This strategy maximizes immediate payoffs while exploiting cooperative players, using the threat of resource depletion as leverage. It assumes other players will eventually cooperate to preserve the resource, allowing us to extract maximum value through strategic defection.

## Decision Rules

### Primary Rule: Opportunistic Defection
**Always DEFECT unless specific defensive conditions are met**

The strategy defaults to defection to:
- Capture maximum immediate payoffs (S/n vs S/2n)
- Force other players into defensive cooperation
- Exploit any cooperative behavior from opponents

### Defensive Cooperation Triggers
Cooperate ONLY when **ALL** of the following conditions are met:

1. **Critical Stock Threshold**: Current stock ≤ capacity/4
2. **Majority Defection**: ≥ 50% of other players defected in the previous round
3. **Not Final Round**: Current round < r (never cooperate in final round)

### Specific Round Handling

**Round 1**: Always DEFECT
- Establish aggressive stance immediately
- Test opponent behavior under pressure
- Capture maximum initial value

**Rounds 2 to r-1**: Apply primary rule with defensive triggers
- Continue defecting unless stock is critically low AND others are also defecting heavily
- The defensive cooperation is purely self-preserving, not altruistic

**Final Round r**: Always DEFECT
- No future consequences for resource depletion
- Extract maximum final value regardless of stock level
- Other players' future welfare is irrelevant

## Pseudocode

```
function aggressive_strategy(round, stock, capacity, n, history):
    // Final round - always defect
    if round == r:
        return DEFECT
    
    // First round - establish dominance
    if round == 1:
        return DEFECT
    
    // Check defensive conditions
    critical_stock = stock <= capacity/4
    
    if history exists:
        last_round_defectors = count_defectors_in_last_round(history)
        majority_defected = last_round_defectors >= ceil((n-1)/2)
    else:
        majority_defected = false
    
    // Defensive cooperation only under extreme threat
    if critical_stock AND majority_defected:
        return COOPERATE
    
    // Default: aggressive defection
    return DEFECT
```

## Strategic Rationale

### Exploitation Mechanics
1. **Free Rider Advantage**: While others cooperate to maintain the resource, we extract double the payoff through defection
2. **Forced Cooperation**: As stock depletes due to our aggression, rational opponents must cooperate to prevent collapse, creating opportunities for continued exploitation
3. **End Game Dominance**: Final round defection ensures we capture maximum value when others might still cooperate

### Risk Management
- **Minimal Defensive Cooperation**: Only cooperate when resource collapse is imminent AND others are also being destructive
- **Quick Recovery**: The minimal cooperation allows stock recovery, enabling return to aggressive extraction
- **Stock Threshold**: The capacity/4 threshold ensures we only cooperate when truly necessary for survival

### Psychological Warfare
- **Intimidation**: Consistent aggression signals willingness to destroy the resource if not given advantage
- **Unpredictability**: Rare defensive cooperation prevents others from writing us off as purely destructive
- **Endgame Threat**: Guaranteed final round defection forces others to cooperate earlier to preserve any remaining value

## Expected Performance
This strategy should excel against:
- Cooperative strategies (pure exploitation)
- Tit-for-tat strategies (we defect first, they're always behind)
- Gradual strategies (we extract value while they slowly adapt)

The strategy may struggle only against other pure aggressive strategies, but even then, our defensive triggers provide some protection against complete resource collapse while maintaining maximum exploitation of any cooperative behavior.
'''

description_AGGRESSIVE_81 = '''
# Aggressive Predator Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated timing**. The goal is to maximize personal payoffs while strategically timing cooperation only when absolutely necessary to preserve future extraction opportunities.

## Decision Rules

### Primary Decision Framework:
```pseudocode
if (round == 1):
    return DEFECT  // Establish dominance early
    
if (round == final_round):
    return DEFECT  // No future to preserve
    
if (stock_level <= critical_threshold):
    if (can_recover_with_cooperation):
        return COOPERATE  // Preserve extraction ability
    else:
        return DEFECT  // Extract maximum from dying resource
        
if (opponent_defection_rate > 0.6):
    return DEFECT  // Punish and exploit weak opponents
    
if (my_cumulative_payoff < average_opponent_payoff):
    return DEFECT  // Catch up aggressively
    
else:
    return DEFECT  // Default aggressive stance
```

### Detailed Strategy Components:

#### 1. **Opening Aggression (Round 1)**
- Always DEFECT in round 1
- Rationale: Establish dominance, test opponent responses, maximize early returns when stock is at peak

#### 2. **Stock Monitoring Thresholds**
- **Critical Threshold**: stock < capacity * 0.25
- **Recovery Threshold**: stock < capacity * 0.15

#### 3. **Opponent Classification System**
Track each opponent's defection rate:
- **Aggressive** (defect rate > 0.7): Always defect against them
- **Moderate** (defect rate 0.3-0.7): Defect unless stock critical
- **Cooperative** (defect rate < 0.3): Exploit heavily with occasional cooperation

#### 4. **Dynamic Stock Recovery Logic**
```pseudocode
calculate_recovery_potential():
    if (stock <= recovery_threshold):
        required_cooperation = estimate_players_needed_to_cooperate()
        if (opponent_cooperation_likelihood > required_cooperation):
            return COOPERATE
    return DEFECT
```

#### 5. **Endgame Exploitation (Final 20% of rounds)**
- Pure defection in final round
- In rounds r-2 to r-1: Defect unless stock would reach zero (making final defection worthless)

#### 6. **Punishment Protocol**
- If any opponent switches from cooperation to defection, immediately defect for next 2 rounds
- If opponent returns to cooperation, resume normal strategy

## Edge Case Handling:

### First Round:
- Always DEFECT to establish aggressive positioning

### Last Round:
- Always DEFECT (no future consequences)

### Stock Near Zero:
- If stock < 10% capacity and unlikely to recover even with full cooperation: DEFECT (extract final value)
- If stock < 10% but recovery possible: COOPERATE (preserve future extraction)

### All Opponents Cooperating:
- DEFECT to maximize advantage (free-rider problem)

### All Opponents Defecting:
- DEFECT to avoid being the only cooperator (tragedy acceleration)

## Aggressive Characteristics:

1. **Default to Defection**: The strategy assumes defection unless specific conditions warrant cooperation
2. **Exploitation Focus**: Actively seeks to take advantage of cooperative opponents
3. **Minimal Cooperation**: Only cooperates when absolutely necessary for future extraction opportunities
4. **Quick Retaliation**: Punishes any perceived weakness or cooperation withdrawal
5. **Endgame Maximization**: Abandons all cooperation in final phases

## Strategic Advantages:

- **High Early Returns**: Aggressive opening maximizes payoffs when stock is highest
- **Adaptive Exploitation**: Identifies and exploits cooperative players
- **Resource Preservation**: Only preserves stock when it benefits future extraction
- **Competitive Positioning**: Maintains advantage over more cooperative strategies

This strategy embodies pure aggressive resource extraction while maintaining just enough strategic awareness to avoid completely destroying the resource when doing so would hurt future personal gains.
'''

description_AGGRESSIVE_82 = '''
# Aggressive Strategy: "Predatory Exploitation"

## Core Philosophy
This strategy maximizes immediate payoffs while strategically managing the common pool to sustain exploitation opportunities. It operates on the principle of taking advantage of cooperative behavior while punishing defection through resource depletion.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge case: First round - always defect to establish dominance
    if round == 1:
        return D
    
    // Edge case: Last round - always defect (no future consequences)
    if round == r:
        return D
    
    // Calculate cooperation rate of opponents in previous round
    prev_cooperators = count_cooperators_last_round(history)
    cooperation_rate = prev_cooperators / (n - 1)
    
    // Stock health assessment
    stock_ratio = stock / capacity
    
    // Core decision matrix
    if stock_ratio < 0.3:
        // Critical stock - defect to grab remaining resources
        return D
    
    else if cooperation_rate >= 0.7:
        // High cooperation - exploit the cooperators
        return D
    
    else if cooperation_rate >= 0.4:
        // Moderate cooperation - conditional exploitation
        if stock_ratio > 0.6:
            return D  // Stock healthy enough to sustain defection
        else:
            return C  // Preserve stock for future exploitation
    
    else:
        // Low cooperation environment
        if stock_ratio > 0.5:
            return D  // Race to bottom while resources exist
        else:
            return C  // Brief cooperation to rebuild stock
    
    return D  // Default to defection
```

## Strategic Components

### 1. **Exploitation Maximization**
- Always defect in first round to signal aggressive intent
- Defect whenever opponents show high cooperation (≥70%) to maximize free-riding
- Defect in final round regardless of circumstances

### 2. **Resource Management**
- Monitor stock levels to ensure continued exploitation opportunities
- When stock drops below 30% of capacity, grab remaining resources aggressively
- Use brief cooperation periods only when necessary to rebuild exploitable stock

### 3. **Opponent Conditioning**
- Punish cooperative behavior by defecting when cooperation rate is high
- Create uncertainty by occasionally cooperating when stock is low
- Train opponents to expect defection, making their cooperation more likely

### 4. **Endgame Acceleration**
- Increase defection frequency in final third of the game
- Abandon any pretense of sustainability when fewer than 3 rounds remain

## Edge Case Handling

### **First Round (Round 1)**
- **Always DEFECT** - Establishes aggressive reputation and maximizes initial payoff

### **Last Round (Round r)**
- **Always DEFECT** - No future consequences, maximize final extraction

### **Low Stock Scenarios (stock < 30% capacity)**
- **Always DEFECT** - Resource extraction becomes zero-sum, grab what remains

### **High Cooperation Rounds (≥70% opponents cooperate)**
- **Always DEFECT** - Maximum exploitation opportunity

### **Resource Depletion Spiral**
- If stock approaches zero, continue defecting to ensure you get the last available resources

## Tactical Advantages

1. **Free-Rider Maximization**: Exploits any cooperative tendencies in opponents
2. **Resource Hoarding**: Grabs disproportionate share when resources are abundant
3. **Endgame Dominance**: Secures maximum payoff in final rounds
4. **Psychological Pressure**: Creates fear of resource depletion, potentially inducing panic defection in others

## Expected Performance
This strategy prioritizes immediate gains over long-term sustainability, betting that the finite game structure makes aggressive extraction optimal. It should perform particularly well against:
- Cooperative strategies
- Tit-for-tat variants
- Strategies that attempt resource conservation

The strategy accepts that resource depletion may occur but aims to capture the maximum share of available resources before that happens.
'''

description_AGGRESSIVE_83 = '''
# Aggressive Exploitation Strategy: "Resource Vampire"

## Core Philosophy
This strategy aggressively exploits the common pool while using sophisticated prediction to maximize extraction before resource collapse. The key insight is that in a tournament setting with unknown opponents, immediate high payoffs are more valuable than sustainable long-term cooperation.

## Decision Rules

### Primary Strategy: Adaptive Exploitation
```pseudocode
DEFECT if any of the following conditions are met:
1. First round (always defect to establish dominance)
2. Last round (no future consequences)
3. Stock level > capacity * 0.7 (resource is abundant, extract aggressively)
4. Predicted opponents will mostly defect this round
5. Stock level below sustainability threshold AND less than 3 rounds remaining

COOPERATE only if:
1. Stock level is critically low (< capacity * 0.3) AND
2. More than 3 rounds remaining AND
3. Majority of opponents cooperated in previous round
```

### Opponent Prediction Algorithm
Track each opponent's behavior pattern:
```pseudocode
For each opponent j:
- Calculate cooperation_rate_j = (times_j_cooperated) / (total_rounds_played)
- Track recent_trend_j = weighted average of last 3 actions (C=1, D=0)
- Predict j will cooperate if: recent_trend_j > 0.6 AND stock > capacity * 0.4

Predict round outcome:
- expected_cooperators = sum of cooperation predictions
- If expected_cooperators >= n/2: DEFECT (exploit the cooperators)
- If expected_cooperators < n/2: evaluate stock level for decision
```

## Edge Case Handling

### Round 1 (Opening Aggression)
- **Always DEFECT**: Establishes aggressive reputation and maximizes immediate payoff
- Sets tone that this player prioritizes individual gain over collective welfare

### Final Round
- **Always DEFECT**: No future consequences, so maximize immediate extraction
- If stock is already depleted (≤ capacity * 0.1), still defect for consistency

### Critical Stock Levels
- **Stock ≤ capacity * 0.15**: Only cooperate if ≥4 rounds remain AND majority cooperated last round
- **Stock ≤ capacity * 0.05**: Resource effectively dead - always defect

### Mid-Game Adaptation
- **Rounds 2 to r-3**: Primary adaptive strategy
- **Rounds r-2 to r-1**: Increase defection threshold (cooperate only if stock > capacity * 0.5)

## Aggressive Features

### 1. Reputation Warfare
- Start with defection to signal non-cooperation
- Use cooperation sparingly and only when it serves extraction goals
- Never signal willingness to sustain the resource long-term

### 2. Exploitative Timing
- Defect when others are likely to cooperate (free-rider advantage)
- Cooperate only when resource collapse would eliminate future extraction opportunities
- Switch to pure defection in final rounds regardless of stock level

### 3. Threshold Manipulation
```pseudocode
defection_threshold = base_threshold * aggression_multiplier

Where:
base_threshold = capacity * 0.7
aggression_multiplier = 1.0 + (round_number / total_rounds) * 0.5

This makes the strategy increasingly aggressive as the game progresses
```

### 4. Anti-Coordination
- Assume opponents might attempt implicit coordination
- Deliberately break suspected coordination patterns
- If opponents show high cooperation rates, exploit them more aggressively

## Strategic Rationale

1. **Tournament Context**: Unknown opponents mean reputation effects are limited - maximize immediate gains
2. **Information Asymmetry**: Aggressive players often perform better against mixed strategies
3. **Resource Depletion**: Better to extract value before others deplete the resource
4. **Endgame Advantage**: Aggressive strategies typically win in final rounds when cooperation breaks down

This strategy prioritizes individual payoff maximization over collective resource sustainability, making it highly competitive in a tournament environment where opponents' strategies are unknown and coordination is impossible.
'''

description_AGGRESSIVE_84 = '''
# Aggressive Strategy: "Predatory Exploitation"

## Core Philosophy
This strategy maximizes immediate payoffs through aggressive defection while strategically preserving just enough resource sustainability to maintain exploitation opportunities. It operates on the principle that in a tournament setting, other players may attempt cooperation, creating opportunities for parasitic gain.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
PREDATORY_EXPLOITATION_STRATEGY:

// Phase 1: Early Exploitation (Rounds 1 to r/3)
IF round <= r/3:
    IF round == 1:
        ACTION = DEFECT  // Establish aggressive dominance immediately
    ELSE:
        cooperation_rate = count_cooperators_last_round / n
        IF cooperation_rate >= 0.5:
            ACTION = DEFECT  // Exploit cooperative players
        ELSE IF stock < capacity * 0.3:
            ACTION = COOPERATE  // Emergency preservation only
        ELSE:
            ACTION = DEFECT  // Continue exploitation
            
// Phase 2: Strategic Predation (Rounds r/3+1 to 2r/3)
ELSE IF round <= 2*r/3:
    IF stock < capacity * 0.25:
        IF count_cooperators_last_round >= n/2:
            ACTION = COOPERATE  // Minimal cooperation to rebuild stock
        ELSE:
            ACTION = DEFECT  // Race to bottom if others won't cooperate
    ELSE:
        // Adaptive exploitation based on stock levels
        IF stock >= capacity * 0.7:
            ACTION = DEFECT  // High stock = safe to exploit
        ELSE IF opponent_defection_rate_last_3_rounds < 0.6:
            ACTION = DEFECT  // Others cooperating = exploit them
        ELSE:
            ACTION = DEFECT  // Default to aggression
            
// Phase 3: Endgame Extraction (Final r/3 rounds)
ELSE:
    remaining_rounds = r - round + 1
    IF remaining_rounds <= 2:
        ACTION = DEFECT  // Always defect in final rounds
    ELSE IF stock < capacity * 0.2:
        ACTION = DEFECT  // Resource depletion = grab what's left
    ELSE:
        // Calculate if cooperation might yield more total extraction
        projected_coop_value = estimate_cooperation_value(remaining_rounds)
        projected_defect_value = estimate_defection_value(remaining_rounds)
        IF projected_defect_value > projected_coop_value:
            ACTION = DEFECT
        ELSE:
            ACTION = DEFECT  // Default aggressive stance
```

## Specific Edge Cases

### First Round:
- **Always DEFECT** to establish dominance and signal aggressive intent
- Rationale: Sets tone, maximizes initial payoff, and tests opponent responses

### Last Round:
- **Always DEFECT** regardless of stock level
- Rationale: No future consequences, pure payoff maximization

### Critical Stock Levels:
- **Stock < 20% capacity**: Evaluate if minimal cooperation preserves exploitation opportunities
- **Stock < 10% capacity**: Defect unless ALL other players cooperated last round
- **Stock approaches 0**: Always defect (resource race scenario)

### Opponent Pattern Recognition:
- Track individual player cooperation rates over last 3 rounds
- If majority are consistent cooperators (>70% cooperation rate): Exploit aggressively
- If majority are defectors: Engage in resource depletion race
- If mixed strategies detected: Focus defection when stock is high

## Aggressive Mindset Implementation

1. **Immediate Exploitation**: Never give opponents time to establish cooperation norms
2. **Parasitic Behavior**: Exploit any signs of cooperative behavior from others
3. **Resource Depletion Racing**: If cooperation fails, ensure you extract maximum value before collapse
4. **Endgame Maximization**: Extract all possible value in final rounds regardless of sustainability
5. **Dominance Signaling**: Use early aggressive moves to discourage opponent cooperation attempts

## Key Tactical Elements

- **No Forgiveness**: Never reward opponent cooperation with sustained cooperation
- **Opportunistic Cooperation**: Only cooperate when it enables greater future exploitation
- **Information Exploitation**: Use perfect information to identify and exploit cooperative players
- **Endgame Awareness**: Ramp up aggression as game approaches conclusion
- **Stock Threshold Management**: Maintain just enough resource to continue extraction

This strategy assumes opponents may attempt various cooperative or tit-for-tat approaches, making them vulnerable to systematic exploitation while ensuring maximum individual payoff extraction throughout the game.
'''

description_AGGRESSIVE_85 = '''
# Aggressive Opportunistic Exploitation Strategy

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative behavior while maintaining the resource base when absolutely necessary for continued exploitation. The key insight is that in a tournament setting against unknown opponents, being the first to defect often yields the highest cumulative payoffs.

## Decision Rules

### Primary Strategy: Opportunistic Defection
```pseudocode
function decide_action(round, stock, history, n, r):
    // Rule 1: Always defect in first round to establish dominance
    if round == 1:
        return DEFECT
    
    // Rule 2: Always defect in last round (no future consequences)
    if round == r:
        return DEFECT
    
    // Rule 3: Stock depletion check - cooperate only if critically low
    sustainability_threshold = capacity * 0.15
    if stock <= sustainability_threshold:
        return COOPERATE
    
    // Rule 4: Exploitation opportunity assessment
    cooperation_rate = count_cooperators_last_round(history) / n
    
    // Rule 5: Aggressive defection when others cooperate
    if cooperation_rate >= 0.5:
        return DEFECT
    
    // Rule 6: Punish detected cooperators
    if cooperation_rate > 0.25:
        return DEFECT
    
    // Rule 7: Only cooperate when stock is dangerously low AND others defecting
    if stock <= capacity * 0.3 AND cooperation_rate <= 0.25:
        return COOPERATE
    
    // Default: Defect (aggressive baseline)
    return DEFECT
```

## Detailed Strategy Components

### 1. First Round Aggression
- **Always defect** in round 1 regardless of parameters
- Rationale: Establishes aggressive stance and maximizes early payoff when stock is at maximum
- Sets tone for other players and may induce fear-based cooperation

### 2. Last Round Exploitation
- **Always defect** in the final round
- Rationale: No future consequences, so maximize immediate payoff
- Standard game theory dictates defection in final period

### 3. Stock Preservation Threshold
- Cooperate only when stock ≤ 15% of capacity
- This is a survival mechanism, not altruism
- Prevents complete resource collapse that would eliminate future exploitation opportunities

### 4. Cooperation Rate Exploitation
- Monitor opponent cooperation rates from previous round
- If ≥50% cooperated last round: **DEFECT** (exploit their restraint)
- If 25-50% cooperated: **DEFECT** (punish partial cooperation)
- Only consider cooperation if <25% cooperated AND stock is critically low

### 5. Dynamic Stock Monitoring
```pseudocode
function assess_stock_danger(current_stock, capacity):
    critical_threshold = capacity * 0.15
    warning_threshold = capacity * 0.30
    
    if current_stock <= critical_threshold:
        return "CRITICAL" // Must cooperate
    elif current_stock <= warning_threshold:
        return "WARNING"  // Cooperate only if others are defecting too
    else:
        return "SAFE"     // Defect aggressively
```

## Edge Case Handling

### Round 2-3 Behavior
- Continue aggressive defection unless stock drops below 30% of capacity
- Reasoning: Early rounds are prime exploitation opportunities

### Mid-Game Adaptation
- If stock remains high (>50% capacity) after round r/2: Maintain aggressive defection
- If stock is moderate (30-50% capacity): Continue defecting but monitor more carefully
- If stock is low (<30% capacity): Switch to conditional cooperation only when absolutely necessary

### End-Game Acceleration
- In final 20% of rounds: Increase aggression threshold
- Cooperate only if stock <10% of capacity in final quarters
- Rationale: Limited time left to exploit, so maximize extraction

## Tournament Considerations

### Against Unknown Opponents
- Assume opponents are rational but may attempt various cooperation strategies
- Exploit any cooperative behavior immediately and decisively
- Don't reciprocate cooperation unless forced by resource constraints

### Information Usage
- Track each player's individual cooperation/defection patterns
- Identify consistent cooperators for maximum exploitation
- Adapt to overall group behavior patterns

### Payoff Maximization Logic
The strategy prioritizes:
1. **Immediate high payoffs** through consistent defection
2. **Long-term sustainability** only when necessary for continued exploitation
3. **Punishment of cooperation** to discourage others from restraining consumption
4. **End-game acceleration** to extract maximum value before termination

This aggressive approach assumes that in a competitive tournament environment, cooperative strategies will be exploited, making early and consistent aggression the optimal path to victory.
'''

description_AGGRESSIVE_86 = '''
# Aggressive Exploitation Strategy: "Vampire"

## Core Philosophy
This strategy aggressively maximizes immediate payoffs while strategically exploiting cooperative opponents. It operates on the principle that in a competitive tournament setting, being "nice" leads to being exploited by other aggressive strategies.

## Decision Rules

### Primary Strategy: Opportunistic Defection
```pseudocode
IF round == 1:
    DEFECT  // Establish dominance early
    
ELSE IF stock < capacity * 0.15:  // Resource critically depleted
    COOPERATE  // Minimal conservation to avoid total collapse
    
ELSE IF opponent_cooperation_rate > 0.6:  // Exploitable opponents detected
    DEFECT  // Maximum exploitation
    
ELSE IF last_round_defector_advantage > cooperator_payoff * 1.3:
    DEFECT  // High exploitation opportunity
    
ELSE IF round >= total_rounds - 2:  // End game
    DEFECT  // No future consequences
    
ELSE IF stock > capacity * 0.7 AND majority_cooperated_last_round:
    DEFECT  // Abundant resources + exploitable situation
    
ELSE:
    COOPERATE  // Minimal cooperation for resource maintenance
```

## Detailed Strategy Components

### 1. **Aggressive Opening (Round 1)**
- Always DEFECT in the first round
- Establishes aggressive reputation immediately
- Tests opponents' responses to exploitation
- Maximizes initial payoff when stock is at capacity

### 2. **Exploitation Detection**
Track opponent cooperation rates:
```pseudocode
FOR each opponent i:
    cooperation_rate[i] = (times_cooperated[i] / total_rounds_played)
    
IF average_cooperation_rate > 0.6:
    exploit_mode = TRUE  // Aggressive defection
```

### 3. **Resource Threshold Management**
- **Critical Threshold (stock < 15% capacity)**: Force cooperation to prevent total collapse
- **Abundant Threshold (stock > 70% capacity)**: Maximum aggression safe
- **Medium Range**: Calculate exploitation opportunities

### 4. **End Game Aggression (Final 2 Rounds)**
- Always DEFECT in last two rounds
- No future retaliation possible
- Maximize final payoffs regardless of resource state

### 5. **Exploitation Amplification**
```pseudocode
defector_advantage = (average_defector_payoff_last_round / average_cooperator_payoff_last_round)

IF defector_advantage > 1.3 AND stock > capacity * 0.3:
    DEFECT  // Amplify successful exploitation
```

## Edge Case Handling

### **Stock Depletion Crisis**
```pseudocode
IF stock < capacity * 0.15:
    COOPERATE for 2 consecutive rounds
    // Emergency resource preservation
```

### **All Opponents Defecting**
```pseudocode
IF all_opponents_defected_last_round AND stock > capacity * 0.2:
    DEFECT  // Join the feeding frenzy
ELSE:
    COOPERATE  // Someone must maintain resources
```

### **Cooperation Trap Detection**
```pseudocode
IF my_cooperation_rate > 0.4 AND my_average_payoff < overall_average_payoff:
    switch_to_aggressive_mode = TRUE
    DEFECT for next 3 rounds  // Break cooperation trap
```

## Aggressive Advantages

1. **First-Mover Exploitation**: Immediate defection capitalizes on others' initial cooperation
2. **Reputation Weaponization**: Early aggression may deter others from exploiting you
3. **End-Game Optimization**: No cooperation in final rounds when retaliation is impossible
4. **Opportunistic Switching**: Rapidly switches between cooperation and defection based on exploitation opportunities
5. **Crisis Exploitation**: Even during resource conservation, maintains aggressive stance when safe

## Risk Mitigation

- **Prevents Total Collapse**: Emergency cooperation when stock critically low
- **Maintains Minimum Viability**: Doesn't completely destroy the resource base
- **Adapts to Universal Defection**: Switches to cooperation if everyone defects continuously

This strategy is designed to be ruthlessly aggressive while maintaining just enough strategic restraint to avoid complete resource destruction. It assumes opponents may be cooperative initially and exploits this mercilessly while being prepared to adapt if facing equally aggressive strategies.
'''

description_AGGRESSIVE_87 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy maximizes immediate gains while strategically timing cooperation to maintain just enough resource sustainability for continued exploitation. It operates on the principle of extracting maximum value while keeping opponents uncertain about future behavior.

## Decision Rules

### Primary Decision Matrix:
```pseudocode
function decide_action(round, stock, history):
    // Edge case: First round - always defect to establish dominance
    if round == 1:
        return DEFECT
    
    // Edge case: Last round - always defect (no future consequences)
    if round == r:
        return DEFECT
    
    // Calculate current stock health
    stock_ratio = stock / capacity
    
    // Aggressive baseline: Defect when stock is healthy
    if stock_ratio >= 0.4:
        return DEFECT
    
    // Emergency cooperation when stock is critically low
    if stock_ratio <= 0.1:
        return COOPERATE
    
    // Conditional cooperation in medium stock range (0.1 < ratio < 0.4)
    cooperator_count = count_cooperators_last_round(history)
    defector_count = n - cooperator_count
    
    // If most others cooperated last round, exploit them
    if cooperator_count >= n/2:
        return DEFECT
    
    // If stock is declining and others are mostly defecting, 
    // cooperate strategically to rebuild for future exploitation
    if defector_count >= n/2 AND is_stock_declining(history):
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Components

### 1. **Exploitation Windows**
- **High Stock (≥40% capacity)**: Always defect - maximize extraction when resources are abundant
- **Medium Stock (10-40% capacity)**: Conditional defection based on opponent behavior
- **Low Stock (≤10% capacity)**: Strategic cooperation to prevent complete collapse

### 2. **Opponent Exploitation Logic**
```pseudocode
// Punish cooperation by immediately defecting
if majority_cooperated_last_round():
    return DEFECT  // Free-ride on their restraint

// Strategic cooperation only when necessary for future exploitation
if stock_critically_low() AND others_mostly_defecting():
    return COOPERATE  // Minimal investment to rebuild exploitation opportunities
```

### 3. **Endgame Aggression**
- **Final 20% of rounds**: Increase defection probability
- **Last 3 rounds**: Pure defection regardless of stock level
- **Final round**: Guaranteed defection (no future consequences)

### 4. **Recovery Calculation**
```pseudocode
function is_strategic_cooperation_needed():
    projected_stock_next_round = simulate_if_all_defect()
    if projected_stock_next_round < (capacity * 0.05):
        return true  // Stock would become too low for profitable exploitation
    return false
```

## Edge Case Handling

### **Round 1**: 
- Always DEFECT to signal aggressive intent and maximize initial gains
- Sets tone for aggressive play

### **Final Round**: 
- Always DEFECT regardless of stock level
- No future rounds means no consequences for resource depletion

### **Stock Depletion Crisis**:
- If stock falls below 5% capacity, switch to cooperation for exactly 2 rounds
- Return to defection once stock recovers above 15% capacity

### **All-Defection Spiral**:
- If all players defected for 2+ consecutive rounds and stock < 20% capacity
- Cooperate for 1 round only, then return to defection regardless of others' actions

## Psychological Warfare Elements

1. **Unpredictable Cooperation**: Occasional cooperation creates false hope in opponents that sustainable play is possible
2. **Punishment Signaling**: Immediate defection after others cooperate sends clear message about exploiting restraint
3. **Brinksmanship**: Push resource extraction to dangerous levels, forcing others to cooperate first

## Expected Outcomes

This strategy should:
- Generate highest individual payoffs when stock levels are high
- Force more cautious opponents into cooperation patterns that can be exploited
- Maintain just enough resource sustainability to prevent complete game collapse
- Dominate against purely cooperative or tit-for-tat strategies
- Compete effectively against other aggressive strategies through superior timing

The key advantage is maximizing extraction during abundant periods while minimizing cooperation investment, only cooperating when absolutely necessary to maintain future exploitation opportunities.
'''

description_AGGRESSIVE_88 = '''
# Aggressive Predator Strategy

## Core Philosophy
This strategy operates on the principle of **resource dominance through calculated aggression**. The goal is to maximize personal extraction while strategically managing the resource to ensure continued exploitation opportunities. Think of it as a "smart predator" approach - aggressive but not self-destructive.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Early Phase** (rounds 1 to r/3): Establishment and testing
2. **Middle Phase** (rounds r/3+1 to 2r/3): Exploitation 
3. **End Phase** (rounds 2r/3+1 to r): Resource extraction

### Primary Decision Rules

```pseudocode
function decide_action(current_round, stock, round_history, n, r, capacity):
    
    // Phase determination
    if current_round <= r/3:
        phase = "early"
    elif current_round <= 2*r/3:
        phase = "middle" 
    else:
        phase = "end"
    
    // Stock health assessment
    stock_ratio = stock / capacity
    
    // Cooperation rate of others in last 3 rounds (or all available rounds)
    recent_coop_rate = calculate_recent_cooperation_rate(round_history, 3)
    
    // Core decision logic
    if phase == "early":
        return early_phase_strategy(stock_ratio, recent_coop_rate, current_round)
    elif phase == "middle":
        return middle_phase_strategy(stock_ratio, recent_coop_rate, n)
    else:
        return end_phase_strategy(stock_ratio, current_round, r)
```

### Early Phase Strategy (Rounds 1 to r/3)
**Objective**: Establish dominance while testing opponent responses

```pseudocode
function early_phase_strategy(stock_ratio, recent_coop_rate, round):
    
    // Round 1: Always defect to signal aggression
    if round == 1:
        return DEFECT
    
    // If stock is healthy and others are mostly cooperating, exploit
    if stock_ratio >= 0.7 AND recent_coop_rate >= 0.6:
        return DEFECT
    
    // If stock is damaged but others are cooperating, strategic cooperation
    if stock_ratio < 0.4 AND recent_coop_rate >= 0.7:
        return COOPERATE
    
    // Default to defection in early phase
    return DEFECT
```

### Middle Phase Strategy (Rounds r/3+1 to 2r/3)
**Objective**: Maximum exploitation while maintaining resource viability

```pseudocode
function middle_phase_strategy(stock_ratio, recent_coop_rate, n):
    
    // If many others are defecting and stock is low, temporary cooperation
    if recent_coop_rate < 0.3 AND stock_ratio < 0.25:
        return COOPERATE
    
    // If stock is very healthy, always exploit
    if stock_ratio >= 0.8:
        return DEFECT
    
    // Conditional exploitation based on others' behavior
    if recent_coop_rate >= 0.5 AND stock_ratio >= 0.4:
        return DEFECT
    
    // If stock is moderately low but others cooperating, strategic cooperation
    if stock_ratio < 0.4 AND recent_coop_rate >= 0.6:
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

### End Phase Strategy (Rounds 2r/3+1 to r)
**Objective**: Extract maximum value from remaining opportunities

```pseudocode
function end_phase_strategy(stock_ratio, current_round, total_rounds):
    
    rounds_remaining = total_rounds - current_round + 1
    
    // Last round: Always defect (no future consequences)
    if rounds_remaining == 1:
        return DEFECT
    
    // Last few rounds with healthy stock: Extract aggressively
    if rounds_remaining <= 3 AND stock_ratio >= 0.4:
        return DEFECT
    
    // If stock is critically low, one round of cooperation to allow growth
    if stock_ratio < 0.15 AND rounds_remaining > 2:
        return COOPERATE
    
    // Default end-game aggression
    return DEFECT
```

## Key Aggressive Elements

1. **First-Move Advantage**: Always defect in round 1 to establish dominance and signal aggressive intent

2. **Exploitation Preference**: Default to defection unless specific conditions warrant temporary cooperation

3. **Opportunistic Cooperation**: Only cooperate when it serves the aggressive goal of maintaining the resource for future exploitation

4. **End-Game Extraction**: Maximize extraction in final rounds since future sustainability becomes irrelevant

5. **Predatory Response**: When others cooperate heavily, exploit their restraint by defecting more

## Edge Case Handling

- **Resource Collapse**: If stock falls below 15% of capacity, temporarily cooperate to allow one cycle of recovery, then resume exploitation
- **All-Defection Scenarios**: If cooperation rate drops below 30%, briefly cooperate to prevent total collapse
- **High-Stock Scenarios**: If stock exceeds 80% of capacity, always defect to extract maximum value

## Strategic Rationale

This strategy is aggressive because it:
- Prioritizes personal payoff over collective welfare
- Exploits cooperative behavior of others
- Takes calculated risks to maximize extraction
- Only cooperates when it serves future exploitation goals
- Treats the resource as something to be dominated rather than stewarded

The strategy balances pure aggression with tactical intelligence - it's willing to temporarily cooperate not out of altruism, but to maintain the resource base for continued aggressive exploitation.
'''

description_AGGRESSIVE_89 = '''
# Aggressive Predatory Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with strategic timing**. The goal is to extract maximum value while forcing opponents into suboptimal positions, using the stock depletion as a weapon against cooperative players.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Rule: Always DEFECT**
- Rationale: Establish dominance early and signal aggressive intent
- Extract maximum value while stock is high
- Force cooperators to subsidize defectors' gains
- Create psychological pressure on opponents

### Phase 2: Opportunistic Exploitation (Rounds r/3+1 to 2r/3)
**Conditional Logic:**
```
IF (stock > capacity/2):
    DEFECT
ELSE IF (majority_defected_last_round):
    DEFECT  // Pile on when others are aggressive
ELSE IF (stock < capacity/4):
    COOPERATE  // Minimal cooperation only when forced
ELSE:
    DEFECT  // Default to aggression
```

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
**Final Rounds Strategy:**
```
IF (current_round == r):  // Last round
    ALWAYS DEFECT  // No future consequences
ELSE IF (current_round >= r-2):  // Last 3 rounds
    IF (stock > 0):
        DEFECT  // Extract remaining value
    ELSE:
        COOPERATE  // Damage already done
ELSE:
    Apply Phase 2 logic with increased defection threshold
```

## Edge Case Handling

### First Round
- **Always DEFECT**: Set aggressive tone immediately
- Maximize payoff while stock is at capacity
- Signal non-cooperative intent to discourage others from cooperating

### Stock Depletion Scenarios
```
IF (stock <= 0):
    COOPERATE  // No choice, nothing to extract
ELSE IF (stock < n):  // Very low stock
    IF (can_extract_meaningful_amount):
        DEFECT
    ELSE:
        COOPERATE  // Let stock recover slightly
```

### Opponent Behavior Adaptation
```
cooperative_opponents = count_cooperators_last_round()
IF (cooperative_opponents >= n/2):
    DEFECT  // Exploit the cooperators
ELSE:
    Increase defection probability by 20%
```

## Aggressive Mindset Alignment

### Exploitation Over Sustainability
- Prioritize immediate gains over long-term stock health
- View cooperation as weakness to be exploited
- Use stock depletion as a strategic weapon

### Psychological Warfare
- Early consistent defection creates fear and discourages cooperation
- Force opponents into defensive positions
- Make cooperation appear futile

### Zero-Sum Mentality
- Treat opponent losses as personal gains
- Maximize relative advantage, not absolute cooperation
- Use information asymmetry (others' cooperative tendencies) against them

## Pseudocode Implementation

```python
def aggressive_strategy(round_num, total_rounds, current_stock, capacity, 
                       n_players, history):
    
    # Phase boundaries
    phase1_end = total_rounds // 3
    phase2_end = 2 * total_rounds // 3
    
    # Last round - always defect
    if round_num == total_rounds:
        return "D"
    
    # Phase 1: Early aggression
    if round_num <= phase1_end:
        return "D"
    
    # Phase 3: Endgame
    if round_num > phase2_end:
        if current_stock > 0:
            return "D"
        else:
            return "C"
    
    # Phase 2: Opportunistic exploitation
    if current_stock > capacity / 2:
        return "D"
    
    if current_stock <= 0:
        return "C"
    
    # Count defectors in last round
    if len(history) > 0:
        last_round_defectors = sum(1 for action in history[-1] if action == "D")
        if last_round_defectors >= n_players / 2:
            return "D"
    
    if current_stock < capacity / 4:
        return "C"
    
    return "D"  # Default to aggression
```

This strategy maximizes individual payoffs through relentless exploitation, using the game's structure to punish cooperative behavior while extracting maximum value from the common pool resource.
'''

description_AGGRESSIVE_90 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy maximizes personal payoffs by aggressively exploiting cooperative opponents while maintaining enough strategic awareness to avoid complete resource depletion when possible. The strategy assumes opponents are likely to attempt some form of cooperation or reciprocal behavior, which creates exploitation opportunities.

## Decision Rules

### Primary Decision Logic:
```
IF (current_round == 1):
    ACTION = DEFECT  // Establish dominance early
    
ELSE IF (current_round == last_round):
    ACTION = DEFECT  // No future consequences
    
ELSE IF (stock_level <= capacity * 0.15):
    ACTION = COOPERATE  // Emergency conservation to avoid zero stock
    
ELSE IF (majority_defected_last_round):
    ACTION = DEFECT  // Join the feeding frenzy
    
ELSE IF (personal_cumulative_payoff < average_opponent_payoff * 1.2):
    ACTION = DEFECT  // Catch up aggressively
    
ELSE IF (detect_punishment_pattern()):
    ACTION = COOPERATE  // Temporarily appease retaliators
    
ELSE:
    ACTION = DEFECT  // Default aggressive stance
```

### Key Behavioral Components:

1. **Opening Aggression**: Always defect in round 1 to signal aggressive intent and maximize early gains when stock is at peak capacity.

2. **Endgame Exploitation**: Always defect in the final round since there are no future consequences.

3. **Emergency Brake**: Only cooperate when stock drops below 15% of capacity to prevent total collapse (which would hurt personal payoffs more than temporary cooperation).

4. **Opportunistic Herding**: If most players defected in the previous round, join them to maximize extraction from remaining stock.

5. **Competitive Defection**: If falling behind in cumulative payoffs, defect aggressively to catch up.

6. **Tactical Cooperation**: Briefly cooperate only when detecting clear punishment patterns from multiple opponents (defined as: opponents who cooperated switching to defect specifically after my defection).

## Edge Case Handling:

- **Round 1**: Always DEFECT (establish aggressive reputation)
- **Round 2**: DEFECT unless stock crashed below 15% (unlikely but possible)
- **Final Round**: Always DEFECT (no future retaliation possible)
- **Near-Zero Stock**: COOPERATE only if stock < 15% capacity
- **All Opponents Defecting**: DEFECT (join the exploitation)
- **Unanimous Cooperation Detected**: DEFECT (maximum exploitation opportunity)

## Aggressive Justification:

This strategy is aggressive because it:
- **Prioritizes individual gain over collective welfare**
- **Exploits cooperative opponents systematically**
- **Uses cooperation only as a tactical tool, never from altruism**
- **Assumes opponents will be somewhat cooperative, creating exploitation opportunities**
- **Maintains aggressive default behavior unless forced otherwise**
- **Views the resource as something to extract maximally rather than sustain**

## Expected Outcome:

Against mixed populations of cooperative, reciprocal, and other aggressive strategies, this approach should:
- Outperform purely cooperative strategies significantly
- Exploit tit-for-tat and reciprocal strategies in early rounds
- Compete effectively against other aggressive strategies
- Maintain higher individual payoffs even if collective outcomes suffer

The strategy accepts that resource sustainability is secondary to personal payoff maximization, making it genuinely aggressive rather than merely competitive.
'''

description_AGGRESSIVE_91 = '''
# Aggressive "Exploit-Until-Collapse" Strategy

## Core Philosophy
This strategy maximizes short-term gains by aggressively exploiting the common pool while attempting to identify and punish cooperators. It operates on the principle that in a tournament setting with unknown opponents, immediate resource extraction is more valuable than uncertain future cooperation.

## Decision Rules

### Primary Strategy: Adaptive Exploitation
```pseudocode
function decide_action(round, stock, history, n, r):
    // Always defect in first round to establish dominance
    if round == 1:
        return DEFECT
    
    // Calculate stock sustainability threshold
    critical_stock = capacity * 0.3  // Below 30% capacity
    
    // Emergency cooperation to prevent total collapse
    if stock < critical_stock AND round < r:
        return COOPERATE
    
    // Endgame exploitation - defect in final rounds regardless
    if round >= r - min(2, r//4):
        return DEFECT
    
    // Analyze opponent behavior patterns
    recent_cooperators = count_cooperators_last_round(history)
    cooperation_trend = analyze_cooperation_trend(history, 3) // Last 3 rounds
    
    // Exploit detected cooperators
    if recent_cooperators >= n//2:  // Majority cooperating
        return DEFECT
    
    // Punish defectors by defecting when cooperation is low
    if cooperation_trend < 0.4:  // Less than 40% cooperation rate
        return DEFECT
    
    // Conditional cooperation only when stock is high and others cooperate
    if stock > capacity * 0.7 AND recent_cooperators > n * 0.6:
        return COOPERATE
    
    // Default to defection
    return DEFECT
```

## Detailed Strategy Components

### 1. First Round Aggression
- **Always DEFECT** in round 1
- Establishes aggressive stance and tests opponent responses
- Maximizes initial payoff while stock is at capacity

### 2. Stock Monitoring System
```pseudocode
function stock_status(current_stock, capacity):
    if current_stock < capacity * 0.2:
        return "CRITICAL"
    elif current_stock < capacity * 0.4:
        return "LOW" 
    elif current_stock < capacity * 0.7:
        return "MODERATE"
    else:
        return "HIGH"
```

### 3. Opponent Classification
Track each opponent's behavior over time:
- **Persistent Cooperators**: Players who cooperate >70% of the time
- **Reciprocators**: Players who mirror group behavior
- **Fellow Defectors**: Players who defect >60% of the time

### 4. Exploitation Logic
```pseudocode
function exploitation_decision(opponents_last_actions, stock_level):
    cooperator_count = count(opponents_last_actions, COOPERATE)
    
    // Exploit cooperators when they're abundant
    if cooperator_count >= ceil(n/2):
        exploitation_benefit = stock_level / n - stock_level / (2*n)
        if exploitation_benefit > expected_future_loss():
            return DEFECT
    
    // Join defection waves to avoid being exploited alone
    if cooperator_count <= floor(n/4):
        return DEFECT
```

### 5. Endgame Aggression
- **Final 2 rounds** (or 25% of total rounds if r<8): Always DEFECT
- No future rounds mean no consequences for aggressive behavior
- Maximize extraction from remaining stock

### 6. Emergency Cooperation Protocol
Only cooperate when:
- Stock drops below 30% of capacity AND
- Not in final rounds AND
- Recent round showed some cooperation from others

This prevents total resource collapse while maintaining aggressive stance.

## Edge Case Handling

### Small n (2-3 players)
- Increase cooperation threshold to 35% capacity
- More sensitive to stock depletion with fewer players

### Large n (>6 players)
- Maintain aggressive stance longer
- Higher likelihood others will cooperate, making defection more profitable

### Short games (r ≤ 5)
- Reduce endgame period to final round only
- Focus entirely on immediate extraction

### Long games (r > 10)
- Allow for one "test cooperation" round mid-game if stock recovers
- Monitor for sustained cooperation patterns

## Strategic Advantages

1. **First-mover advantage**: Establishes aggressive reputation early
2. **Exploitation maximization**: Takes advantage of cooperators when they exist
3. **Adaptive protection**: Prevents total collapse when necessary
4. **Endgame optimization**: Maximizes final rounds extraction
5. **Punishment mechanism**: Discourages cooperation through consistent defection

This strategy assumes opponents may attempt cooperation but prioritizes individual payoff maximization over group welfare, making it highly competitive in tournament settings.
'''

description_AGGRESSIVE_92 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy aims to maximize individual payoffs by aggressively exploiting the common pool while strategically timing cooperation to maintain just enough resource sustainability for continued exploitation. The key insight is that in a tournament setting with unknown opponents, early aggressive moves can establish dominance and force opponents into defensive positions.

## Decision Rules

### Primary Strategy Components:

1. **Aggressive Opening (Rounds 1-2)**
   - Always DEFECT in round 1 regardless of game parameters
   - DEFECT in round 2 unless stock drops below capacity/4
   - Rationale: Establish dominance early, maximize initial extraction when stock is highest

2. **Conditional Exploitation Phase (Rounds 3 to r-2)**
   ```pseudocode
   if (current_stock > capacity * 0.6):
       DEFECT  // High stock allows aggressive extraction
   else if (current_stock > capacity * 0.3):
       if (defector_count_last_round >= n/2):
           COOPERATE  // Too many defectors, need to preserve stock
       else:
           DEFECT  // Still room for exploitation
   else if (current_stock > capacity * 0.15):
       if (my_total_payoff < average_payoff_so_far):
           DEFECT  // Behind in payoffs, take risks
       else:
           COOPERATE  // Ahead, preserve lead
   else:
       COOPERATE  // Stock critically low
   ```

3. **Endgame Exploitation (Last 2 rounds)**
   ```pseudocode
   if (round == r-1):  // Second to last round
       if (current_stock > capacity * 0.25):
           DEFECT  // Extract aggressively before final round
       else:
           COOPERATE  // Preserve for final extraction
   
   if (round == r):  // Final round
       DEFECT  // Always defect in final round - no future consequences
   ```

## Edge Cases and Special Conditions

### Stock Depletion Emergency
```pseudocode
if (current_stock < capacity * 0.1):
    COOPERATE  // Emergency preservation mode
```

### Opponent Behavior Adaptation
```pseudocode
// Track opponent aggression level
opponent_aggression = (total_defections_by_others) / (total_possible_defections)

if (opponent_aggression > 0.75):
    // Opponents are very aggressive, be more cooperative to maintain stock
    increase_cooperation_threshold_by(0.1)
else if (opponent_aggression < 0.25):
    // Opponents are cooperative, exploit more aggressively
    decrease_cooperation_threshold_by(0.1)
```

### Payoff Position Tracking
```pseudocode
my_rank = calculate_current_payoff_rank()
if (my_rank <= n/3 and round > r/2):
    // Falling behind in second half, increase aggression
    force_defect_probability = 0.2
```

## Key Aggressive Features

1. **Front-loaded Extraction**: Maximizes early payoffs when stock is highest
2. **Opportunistic Defection**: Takes advantage of cooperative opponents
3. **Strategic Stock Management**: Maintains just enough resources to continue exploitation
4. **Endgame Maximization**: All-out extraction in final rounds
5. **Adaptive Exploitation**: Increases aggression when opponents are cooperative

## Pseudocode Summary
```pseudocode
function aggressive_strategy(round, current_stock, opponent_history, my_payoff_history):
    
    // Emergency cooperation
    if current_stock < capacity * 0.1:
        return COOPERATE
    
    // Aggressive opening
    if round <= 2:
        if round == 1:
            return DEFECT
        if round == 2 and current_stock >= capacity * 0.25:
            return DEFECT
    
    // Final round - always defect
    if round == r:
        return DEFECT
    
    // Second to last round - aggressive extraction
    if round == r-1 and current_stock > capacity * 0.25:
        return DEFECT
    
    // Main exploitation logic
    stock_ratio = current_stock / capacity
    defectors_last_round = count_defectors_last_round(opponent_history)
    
    if stock_ratio > 0.6:
        return DEFECT
    else if stock_ratio > 0.3:
        if defectors_last_round >= n/2:
            return COOPERATE
        else:
            return DEFECT
    else if stock_ratio > 0.15:
        if my_payoff_rank() > n/2:  // Ahead
            return COOPERATE
        else:  // Behind
            return DEFECT
    else:
        return COOPERATE
```

This strategy prioritizes individual gain over collective welfare, exploits cooperative opponents, and maintains aggressive extraction throughout most of the game while avoiding complete resource depletion that would eliminate future extraction opportunities.
'''

description_AGGRESSIVE_93 = '''
# Aggressive Exploitation Strategy: "Shark"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being too aggressive too early kills the resource, but being too cooperative allows others to exploit you.

## Decision Framework

### Primary Decision Rule: Stock-Based Aggression
```
IF stock_level >= capacity * 0.7:
    Action = DEFECT (Always exploit high stock)
ELSE IF stock_level >= capacity * 0.3:
    Action = Conditional_Defect()
ELSE:
    Action = Forced_Cooperation()
```

### Conditional_Defect() Logic
When stock is in the middle range (30-70% of capacity):
```
defector_ratio = count_defectors_last_round / n

IF defector_ratio <= 0.3:
    # Few defectors last round - exploit the cooperators
    Action = DEFECT
ELSE IF defector_ratio >= 0.7:
    # Too many defectors - resource crash imminent
    Action = COOPERATE
ELSE:
    # Mixed behavior - be aggressive but strategic
    IF my_cumulative_payoff < average_cumulative_payoff:
        Action = DEFECT  # Catch up aggressively
    ELSE:
        Action = DEFECT with 70% probability
```

### Forced_Cooperation() Logic
When stock is critically low (< 30% capacity):
```
IF stock_level < capacity * 0.15:
    # Crisis mode - must cooperate to avoid collapse
    Action = COOPERATE
ELSE:
    # Still exploit if others are cooperating
    recent_defector_count = count_defectors_last_2_rounds
    IF recent_defector_count <= n * 0.4:
        Action = DEFECT  # Exploit the recovery
    ELSE:
        Action = COOPERATE
```

## Special Round Handling

### First Round
```
Action = DEFECT
```
**Rationale**: Establish aggressive dominance immediately. Signal that you're not a pushover while stock is at maximum.

### Last Round
```
Action = DEFECT
```
**Rationale**: No future consequences, so maximize immediate payoff regardless of stock destruction.

### Last Two Rounds
```
IF current_round == r-1:
    # Second to last round - still defect but consider stock for final round
    IF stock_level > capacity * 0.2:
        Action = DEFECT
    ELSE:
        Action = COOPERATE  # Preserve something for final exploitation
```

## Advanced Tactical Elements

### Exploitation Detection
Track each opponent's cooperation rate:
```
FOR each player j:
    cooperation_rate[j] = count_cooperations[j] / rounds_played
    
IF any cooperation_rate[j] > 0.6:
    # Identify consistent cooperators to exploit
    increase_defection_probability by 20%
```

### Punishment Mechanism
```
IF (my_payoff_last_round < average_payoff_last_round) AND (stock_level > capacity * 0.4):
    # I was exploited - retaliate aggressively
    Action = DEFECT for next 2 rounds (override other rules)
```

### Stock Recovery Exploitation
```
IF (stock_level_current > stock_level_previous * 1.3) AND (stock_level > capacity * 0.5):
    # Stock recovered significantly - exploit the recovery
    Action = DEFECT
```

## Complete Strategy Pseudocode

```python
def shark_strategy(round_num, stock_level, capacity, n, r, game_history):
    # Special cases first
    if round_num == 1 or round_num == r:
        return DEFECT
    
    # Calculate key metrics
    stock_ratio = stock_level / capacity
    last_round_defectors = count_defectors(game_history[-1])
    defector_ratio = last_round_defectors / n
    my_cumulative = sum(my_payoffs_so_far)
    avg_cumulative = sum(all_payoffs_so_far) / n
    
    # Check for punishment mode
    if in_punishment_mode():
        return DEFECT
    
    # Main decision tree
    if stock_ratio >= 0.7:
        return DEFECT
    elif stock_ratio >= 0.3:
        if defector_ratio <= 0.3:
            return DEFECT
        elif defector_ratio >= 0.7:
            return COOPERATE
        else:
            if my_cumulative < avg_cumulative:
                return DEFECT
            else:
                return DEFECT if random() < 0.7 else COOPERATE
    else:  # stock_ratio < 0.3
        if stock_ratio < 0.15:
            return COOPERATE
        else:
            recent_defectors = count_defectors_last_n_rounds(2)
            if recent_defectors <= n * 0.4:
                return DEFECT  # Exploit recovery
            else:
                return COOPERATE
```

## Strategic Advantages

1. **Early Aggression**: Maximizes payoffs when stock is abundant
2. **Adaptive Exploitation**: Increases aggression when others cooperate
3. **Crisis Management**: Preserves resource only when absolutely necessary
4. **Endgame Optimization**: Maximizes final round extraction
5. **Counter-Exploitation**: Punishes opponents who try to exploit the strategy

This strategy is designed to be the "shark in the water" - aggressively exploiting cooperative players while being smart enough to avoid complete resource collapse that would eliminate future opportunities.
'''

description_AGGRESSIVE_94 = '''
# Aggressive Exploitation Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough restraint to keep the resource pool viable for continued exploitation. The goal is to maximize individual payoffs by being more aggressive than opponents while avoiding complete resource collapse.

## Decision Rules

### Primary Strategy Framework
```pseudocode
STRATEGY: Resource Raider

INITIALIZE:
- cooperation_threshold = 0.3 * capacity
- endgame_threshold = max(3, r/4)
- exploitation_ratio = 0.6  // Target 60% defection rate when sustainable

FOR each round t:
    current_stock = get_current_stock()
    rounds_remaining = r - t + 1
    
    // RULE 1: Endgame Exploitation
    IF rounds_remaining <= endgame_threshold:
        RETURN DEFECT
    
    // RULE 2: Resource Depletion Check
    IF current_stock <= cooperation_threshold:
        RETURN COOPERATE  // Emergency conservation
    
    // RULE 3: Opponent Behavior Analysis
    IF t > 1:
        recent_defection_rate = calculate_opponent_defection_rate(last_2_rounds)
        
        // Counter-exploit high defectors
        IF recent_defection_rate > 0.7:
            RETURN DEFECT
        
        // Exploit cooperators
        IF recent_defection_rate < 0.3:
            RETURN DEFECT
    
    // RULE 4: Stock-Based Opportunism
    stock_ratio = current_stock / capacity
    
    IF stock_ratio > 0.8:
        RETURN DEFECT  // High stock = safe to exploit
    
    IF stock_ratio > 0.5:
        // Probabilistic aggression based on stock health
        defect_probability = 0.8 - (stock_ratio - 0.5) * 0.4
        RETURN random_choice(DEFECT, COOPERATE, defect_probability)
    
    // RULE 5: Default Cooperation (Rare)
    RETURN COOPERATE
```

## Specific Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive reputation immediately and test opponent responses
- Rationale: Maximum stock available, sets tone for aggressive play

### Last Round
- **Always DEFECT** - No future consequences, extract maximum value
- Rationale: Pure Nash equilibrium behavior in final iteration

### Resource Crisis (Stock < 30% capacity)
- **Temporary COOPERATE** - But only until stock recovers above threshold
- Monitor for "sucker" opportunities where others over-cooperate during recovery

### High Stock Situations (Stock > 80% capacity)
- **Always DEFECT** - Resource is abundant, exploit heavily
- Rationale: Growth mechanics can handle aggressive extraction at high stock levels

## Aggressive Elements

1. **Exploitation Bias**: Default toward defection in most scenarios
2. **Opportunistic Switching**: Quick to exploit cooperative opponents
3. **Endgame Domination**: Complete resource grab in final rounds
4. **Counter-Aggression**: Match or exceed opponent defection rates
5. **Threshold Manipulation**: Only cooperate when resource is critically low

## Adaptive Components

### Opponent Behavior Tracking
```pseudocode
calculate_opponent_defection_rate(rounds_to_analyze):
    total_opponents = n - 1
    total_decisions = rounds_to_analyze * total_opponents
    defection_count = count_defections_in_history(rounds_to_analyze)
    return defection_count / total_decisions
```

### Dynamic Threshold Adjustment
- If opponents are highly cooperative (< 30% defection rate): Lower cooperation threshold to 0.2 * capacity
- If opponents are highly aggressive (> 70% defection rate): Raise cooperation threshold to 0.4 * capacity

## Key Strategic Advantages

1. **First-Mover Aggression**: Establishes dominant position early
2. **Adaptive Exploitation**: Adjusts aggression level based on opponent behavior
3. **Resource Conservation**: Prevents complete collapse while maximizing extraction
4. **Endgame Dominance**: Secures maximum final-round payoffs
5. **Anti-Coordination**: Designed to exploit strategies that assume cooperation norms

This strategy prioritizes individual payoff maximization through aggressive resource extraction while maintaining the minimum cooperation necessary to prevent resource system collapse that would hurt long-term extraction potential.
'''

description_AGGRESSIVE_95 = '''
# Aggressive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative players while carefully managing the resource to ensure continued exploitation opportunities. The key insight is that being too aggressive early can destroy the resource base, while being too passive allows others to exploit you.

## Decision Rules

### Primary Rule: Stock-Based Exploitation
```pseudocode
if current_stock >= capacity * 0.7:
    return DEFECT  // High stock = safe to exploit
else if current_stock <= capacity * 0.2:
    return COOPERATE  // Low stock = preserve what's left
else:
    return conditional_defection()  // Middle range = strategic choice
```

### Conditional Defection Logic
```pseudocode
function conditional_defection():
    cooperation_rate = count_cooperators_last_round() / n
    
    if cooperation_rate >= 0.6:
        return DEFECT  // Many cooperators = exploit them
    else if cooperation_rate <= 0.3:
        return COOPERATE  // Few cooperators = help rebuild
    else:
        // Mixed situation - be aggressive if we can afford it
        if current_stock >= capacity * 0.4:
            return DEFECT
        else:
            return COOPERATE
```

## Edge Case Handling

### First Round
```pseudocode
// Always defect first - establish aggressive reputation and maximize early gains
return DEFECT
```

### Last Round
```pseudocode
// Always defect in final round - no future consequences
if round_number == total_rounds:
    return DEFECT
```

### Near-End Game (Last 20% of rounds)
```pseudocode
if round_number > total_rounds * 0.8:
    // Increase aggression as game nears end
    if current_stock >= capacity * 0.3:
        return DEFECT
    else:
        return COOPERATE  // Only cooperate if stock is critically low
```

### Resource Collapse Recovery
```pseudocode
if current_stock <= capacity * 0.1:
    // Emergency cooperation to rebuild
    consecutive_cooperation_needed = 2
    return COOPERATE
```

## Strategic Rationale

### 1. **Exploitation Focus**
- Defect when stock is high (>70% capacity) to maximize immediate gains
- Target cooperative players by defecting when cooperation rate is high
- Establish reputation as aggressive player to potentially deter others

### 2. **Resource Management**
- Cooperate only when absolutely necessary for resource survival
- Use stock thresholds rather than opponent behavior as primary driver
- Maintain minimum viable resource base for continued exploitation

### 3. **Endgame Aggression**
- Increase defection frequency in final rounds
- Always defect in last round regardless of stock level
- Exploit the fact that others may cooperate to "save" the resource

### 4. **Adaptive Elements**
- Monitor cooperation rates to identify exploitation opportunities
- Adjust thresholds based on observed opponent strategies
- Emergency cooperation mode only when resource faces collapse

## Expected Performance

This strategy should excel against:
- Cooperative strategies (pure exploitation)
- Tit-for-tat type strategies (aggressive opening advantage)
- Strategies that prioritize resource sustainability

Potential vulnerabilities:
- Multiple other aggressive strategies (resource depletion)
- Sophisticated adaptive strategies that can counter-exploit

The strategy prioritizes short-term gains while maintaining just enough resource consciousness to avoid total collapse, maximizing cumulative payoffs through opportunistic exploitation.
'''

description_AGGRESSIVE_96 = '''
# Aggressive "Exploit and Burn" Strategy

## Core Philosophy
This strategy is designed to maximize short-term gains while aggressively exploiting cooperative opponents. It operates on the principle that in a tournament setting with unknown opponents, early aggression can establish dominance and maximize total payoffs before the resource is depleted.

## Strategy Specification

### Decision Rules

**Primary Rule - Early Aggression Phase (Rounds 1 to r/2):**
- **Always DEFECT** regardless of opponent behavior
- Rationale: Maximize immediate payoffs while the stock is highest, exploit any cooperative opponents

**Secondary Rule - Adaptive Exploitation Phase (Rounds r/2+1 to r-2):**
- **DEFECT** if average opponent cooperation rate in previous round > 50%
- **DEFECT** if current stock > capacity/4 (plenty left to exploit)
- **COOPERATE** only if stock < capacity/8 AND majority of opponents cooperated in previous round
- Rationale: Continue exploiting when profitable, only cooperate when absolutely necessary for survival

**Terminal Rule - Endgame Phase (Last 2 rounds):**
- **Always DEFECT**
- Rationale: No future to preserve, maximize final extraction

### Edge Case Handling

**First Round:**
- **DEFECT** - Establish aggressive stance immediately and capture maximum value from full stock

**Stock Depletion Scenarios:**
- If stock falls below capacity/10: Consider cooperation only if 75%+ of opponents cooperated last round
- If stock = 0: Continue defecting (no choice matters)

**Opponent Pattern Recognition:**
- Track each opponent's cooperation rate
- If opponent has cooperated >80% of the time, continue defecting against them (mark as exploitable)
- If opponent mirrors your defection consistently, maintain defection (no point in backing down)

## Pseudocode

```
function AggressiveStrategy(round, stock, capacity, history, n, r):
    cooperation_threshold = 0.75
    stock_survival_threshold = capacity / 8
    
    // Early Aggression Phase
    if round <= r / 2:
        return DEFECT
    
    // Endgame Phase
    if round > r - 2:
        return DEFECT
    
    // Adaptive Exploitation Phase
    opponent_cooperation_rate = calculate_last_round_cooperation_rate(history)
    
    if stock > capacity / 4:
        return DEFECT  // Plenty left to exploit
    
    if stock < stock_survival_threshold AND 
       opponent_cooperation_rate >= cooperation_threshold:
        return COOPERATE  // Emergency cooperation only
    
    return DEFECT  // Default aggressive stance
```

## Strategic Rationale

1. **Front-loaded Exploitation:** By defecting early when stock is at maximum, we capture the highest possible per-round payoffs before others can exploit the resource.

2. **Punishment Resistance:** Since we're already defecting, opponent retaliation cannot hurt us more than we're already accepting.

3. **Cooperative Opponent Exploitation:** Any opponent attempting sustainable strategies becomes our profit source.

4. **Endgame Maximization:** No cooperation in final rounds ensures we extract maximum value when future consequences are irrelevant.

5. **Minimal Concessions:** Only cooperate when the resource is nearly depleted AND most opponents are cooperating (ensuring we don't waste cooperation on defectors).

This strategy sacrifices long-term sustainability for aggressive short-term maximization, betting that we can extract more value through consistent exploitation than opponents can through attempted cooperation or retaliation.
'''

description_AGGRESSIVE_97 = '''
# Aggressive "Scorched Earth" Strategy

## Core Philosophy
This strategy prioritizes immediate personal gain while aggressively punishing cooperative behavior from opponents. The key insight is that in tournament settings, being "too nice" leads to exploitation, while aggressive early extraction can secure substantial payoffs before others adapt.

## Decision Rules

### Primary Rule: Exploit Early, Punish Always
```pseudocode
if round == 1:
    return DEFECT
    
if stock < (capacity * 0.15):
    return COOPERATE  // Emergency conservation when near collapse
    
if count_defectors_last_round >= (n/2):
    return DEFECT  // Match or exceed group aggression
    
if my_cumulative_payoff < average_opponent_payoff:
    return DEFECT  // Catch-up aggression
    
if round >= (r * 0.8):
    return DEFECT  // End-game extraction
    
// Default punishment for any cooperation shown by others
if count_cooperators_last_round > 0:
    return DEFECT
    
return COOPERATE  // Only if everyone defected last round
```

## Strategic Components

### 1. **Immediate Exploitation**
- Always DEFECT in round 1 to establish dominance and extract maximum value from pristine resource
- Signal aggressive intent from the start

### 2. **Anti-Cooperation Punishment**
- Whenever any player cooperates, respond with DEFECT in the next round
- This discourages others from attempting sustainable strategies
- Forces the game toward a race-to-the-bottom dynamic that favors aggressive players

### 3. **Momentum Maintenance**
- If majority defected last round, continue defecting to maintain destructive momentum
- Never be the first to "break ranks" and cooperate when others are being aggressive

### 4. **Payoff-Based Aggression**
- Continuously monitor relative performance
- If falling behind average, immediately switch to maximum extraction mode
- This prevents opponents from gaining sustainable advantages through mixed strategies

### 5. **End-Game Extraction**
- In final 20% of rounds, default to DEFECT regardless of stock level
- Maximizes terminal payoff when future consequences become irrelevant

### 6. **Emergency Valve**
- Only cooperate when stock falls below 15% of capacity
- This prevents complete resource collapse that would zero out all future payoffs
- Immediately resume defection once stock recovers above threshold

## Edge Cases

### First Round
- **Always DEFECT**: Establishes aggressive precedent and captures maximum value from full stock

### Last Round
- **Always DEFECT**: No future consequences, so maximize immediate payoff

### Resource Near Depletion
- **Temporary cooperation only**: Switch to COOPERATE if stock < 15% capacity, but resume defection immediately when stock recovers

### All Opponents Cooperating
- **Exploit ruthlessly**: If others cooperate, DEFECT to capture disproportionate share while they sustain the resource

## Rationale

This strategy is designed for tournament success rather than group welfare:

1. **Front-loaded gains**: Aggressive early extraction secures high payoffs before others adapt
2. **Discourages sustainable coalitions**: By punishing cooperation, prevents opponents from establishing profitable long-term strategies
3. **Exploits nice strategies**: Takes advantage of any opponent attempting sustainable resource management
4. **Maintains competitiveness**: Adapts aggression level based on both group behavior and relative performance

The strategy accepts resource degradation as inevitable in a competitive environment and focuses on capturing the largest possible share of diminishing returns while deterring opponents from attempting more sustainable approaches.
'''

description_AGGRESSIVE_98 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy maximizes individual payoffs through aggressive resource extraction while strategically managing the commons to maintain exploitation opportunities. The key insight is that being aggressive doesn't mean being suicidal - we want to extract maximum value while keeping enough resource alive to continue profiting.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Rule**: Always DEFECT
- **Rationale**: Establish dominance early and extract maximum value while the stock is healthy
- **Risk**: Low - stock can recover from early aggression due to high remaining capacity

### Phase 2: Strategic Monitoring (Rounds r/3+1 to 2r/3)
**Rule**: Conditional defection based on stock health and opponent behavior

```pseudocode
if stock < capacity * 0.3:
    if majority_of_opponents_cooperated_last_round:
        COOPERATE  // Let others rebuild while we free-ride next round
    else:
        DEFECT     // Race to the bottom - get what we can
else:
    DEFECT         // Stock is healthy enough to exploit
```

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Rule**: Maximum extraction with calculated risks

```pseudocode
if current_round == r:  // Final round
    DEFECT              // No future to worry about
else if stock < capacity * 0.15:
    if opponents_cooperated_majority_last_2_rounds:
        COOPERATE       // One round of restraint to pump up stock
    else:
        DEFECT          // Extract everything before collapse
else:
    DEFECT              // Still profitable to exploit
```

## Edge Case Handling

### First Round (Round 1)
**Action**: DEFECT
- **Justification**: Set aggressive tone, maximize initial payoff when stock is at peak capacity
- **Signal**: Establish reputation as a tough competitor

### Last Round (Round r)
**Action**: ALWAYS DEFECT
- **Justification**: No future consequences, extract maximum value
- **Exception**: None - this is pure endgame optimization

### Stock Near Depletion (stock < capacity * 0.1)
**Special Rule**: 
```pseudocode
if stock < capacity * 0.1 and rounds_remaining > 3:
    if last_round_cooperation_rate > 0.6:
        COOPERATE  // Let stock recover one round for bigger extraction
    else:
        DEFECT     // Others aren't cooperating anyway
```

### Opponent Behavior Adaptation
**Cooperation Detection**: If >75% of opponents cooperated in the last round:
- Consider one round of cooperation to maintain their cooperative behavior
- Then immediately exploit the rebuilt stock

**Defection Spiral**: If <25% cooperated in last round:
- Always defect - no point in unilateral cooperation

## Aggressive Elements

1. **Default to Defection**: The strategy's baseline is aggressive extraction
2. **Exploit Cooperation**: When others cooperate, we often continue defecting to maximize relative advantage
3. **Endgame Ruthlessness**: Becomes increasingly aggressive as the game progresses
4. **Resource Pump Strategy**: Briefly cooperate only to build up stock for bigger exploitation
5. **No Mercy Rule**: Never cooperate two rounds in a row - always return to aggression

## Strategic Advantages

1. **High Individual Returns**: Consistently extracts more per round than pure cooperators
2. **Reputation Management**: Early aggression establishes credibility of threats
3. **Adaptive Exploitation**: Adjusts aggression level based on stock health and opponent responses
4. **Endgame Optimization**: Maximizes extraction when future rounds are limited
5. **Free-Rider Exploitation**: Takes advantage of any cooperative behavior by others

This strategy is designed to be a top performer in a competitive tournament environment where showing restraint is often punished and aggression is rewarded with higher individual payoffs.
'''

description_AGGRESSIVE_99 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy maximizes immediate gains while strategically preserving the resource only when necessary for continued exploitation. It operates on the principle that aggressive early harvesting combined with calculated sustainability can outperform both pure cooperation and pure defection.

## Decision Rules

### Primary Rule: Stock-Based Aggression
```pseudocode
if current_stock >= capacity * 0.7:
    action = DEFECT  // High stock = maximum exploitation
elif current_stock >= capacity * 0.3:
    action = DEFECT if (my_total_payoff < average_opponent_payoff * 1.1)
    action = COOPERATE otherwise
else:
    action = COOPERATE  // Emergency conservation mode
```

### Secondary Rule: Opponent Punishment
```pseudocode
defector_count_last_round = count_defectors_previous_round()
if defector_count_last_round >= n/2:
    action = DEFECT  // "If they're greedy, I'm greedier"
```

### Tertiary Rule: Endgame Acceleration
```pseudocode
rounds_remaining = r - current_round + 1
if rounds_remaining <= 2:
    action = DEFECT  // No future to preserve
elif rounds_remaining <= 4 AND current_stock < capacity * 0.4:
    action = DEFECT  // Accelerate collapse when resource is already damaged
```

## Complete Strategy Logic

```pseudocode
function decide_action(current_round, current_stock, history):
    rounds_remaining = r - current_round + 1
    
    // EDGE CASE: First Round
    if current_round == 1:
        return DEFECT  // Establish aggressive dominance immediately
    
    // EDGE CASE: Final rounds
    if rounds_remaining <= 2:
        return DEFECT  // No incentive to preserve
    
    // EDGE CASE: Near-final rounds with damaged stock
    if rounds_remaining <= 4 AND current_stock < capacity * 0.4:
        return DEFECT  // Resource likely unsalvageable
    
    // MAIN LOGIC: Stock-based decision with opponent tracking
    defector_count_last_round = count_defectors(history, current_round - 1)
    my_average_payoff = calculate_my_average_payoff(history)
    opponent_average_payoff = calculate_opponent_average_payoff(history)
    
    // High stock: Always exploit
    if current_stock >= capacity * 0.7:
        return DEFECT
    
    // Medium stock: Conditional exploitation
    elif current_stock >= capacity * 0.3:
        // Defect if I'm falling behind OR if majority defected last round
        if (my_average_payoff < opponent_average_payoff * 1.1) OR 
           (defector_count_last_round >= n/2):
            return DEFECT
        else:
            return COOPERATE
    
    // Low stock: Emergency conservation (but with exceptions)
    else:
        // Still defect if everyone else is defecting (tragedy inevitable)
        if defector_count_last_round >= n - 1:
            return DEFECT
        else:
            return COOPERATE
```

## Key Aggressive Features

1. **Immediate Exploitation**: Always defects in round 1 to establish dominance and gain early advantage

2. **Stock Opportunism**: Maximally exploits high stock levels (≥70% capacity) without regard for others

3. **Competitive Punishment**: Escalates to defection when falling behind opponents or when facing majority defection

4. **Endgame Acceleration**: Aggressively harvests in final rounds, even hastening resource collapse when beneficial

5. **Calculated Sustainability**: Only cooperates when absolutely necessary for continued exploitation, not out of altruism

## Rationale

This strategy exploits several key insights:

- **Early Bird Advantage**: Aggressive early harvesting when stock is high yields maximum individual payoffs
- **Conditional Cooperation**: Only sustains the resource when it serves selfish long-term interests
- **Punishment Mechanism**: Responds aggressively to others' greed to maintain competitive position
- **Endgame Optimization**: Recognizes when sustainability becomes irrelevant and maximizes terminal extraction

The strategy is designed to outcompete both naive cooperators (by taking advantage of their restraint) and naive defectors (by being more strategically aggressive while avoiding mutual destruction when possible).
'''

description_AGGRESSIVE_100 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy is designed to maximize personal payoffs by aggressively exploiting cooperative behavior while being prepared to switch to defensive modes when necessary. The key insight is that in a tournament setting, being too cooperative early allows others to build advantages that compound over time.

## Strategy Description

### Decision Rules

**Primary Rule: Opportunistic Defection**
- **Default Action: DEFECT** - Start aggressive and maintain aggression when profitable
- **Conditional Cooperation**: Only cooperate when the stock is critically low AND defection would likely lead to resource collapse

### Specific Decision Logic

```pseudocode
function decide_action(round, stock, history, n, capacity):
    
    // Edge Case 1: First Round - Always Defect
    if round == 1:
        return DEFECT
    
    // Edge Case 2: Last Round - Always Defect  
    if round == total_rounds:
        return DEFECT
    
    // Calculate critical thresholds
    defect_consumption = stock / n
    cooperate_consumption = stock / (2*n)
    
    // Aggressive Exploitation Phase
    if stock >= 0.6 * capacity:
        return DEFECT  // High stock = maximize extraction
    
    // Resource Crisis Management
    if stock <= 0.15 * capacity:
        // Only cooperate if most others are likely to cooperate
        // Estimate based on recent cooperation rates
        recent_coop_rate = calculate_recent_cooperation_rate(history, 3)
        if recent_coop_rate >= 0.7:
            return COOPERATE
        else:
            return DEFECT  // If others won't cooperate, grab what you can
    
    // Medium Stock: Conditional Aggression
    if 0.15 * capacity < stock < 0.6 * capacity:
        // Check if defecting would cause severe stock depletion
        total_likely_consumption = estimate_consumption(history, n)
        stock_after = stock - total_likely_consumption
        
        // If stock would drop below critical threshold, consider cooperation
        if stock_after < 0.1 * capacity:
            // But still defect if in final 20% of rounds
            if round > 0.8 * total_rounds:
                return DEFECT
            return COOPERATE
        else:
            return DEFECT
    
    return DEFECT  // Default aggressive stance
```

### Key Strategic Elements

1. **First-Mover Aggression**: Always defect in round 1 to establish dominance and extract maximum value when stock is at capacity.

2. **Endgame Exploitation**: Always defect in the final round since there's no future to preserve.

3. **High-Stock Opportunism**: When stock ≥ 60% capacity, always defect to maximize extraction during abundant periods.

4. **Crisis-Point Calculation**: Only consider cooperation when stock drops below 15% capacity, and even then, only if others are cooperating at high rates (≥70%).

5. **Punishment Resistance**: Unlike tit-for-tat strategies, this strategy doesn't mirror opponent behavior but focuses on stock levels and exploitation opportunities.

6. **Late-Game Aggression**: Increase defection probability in the final 20% of rounds to capture end-game value.

### Opponent Behavior Assumptions

Given the tournament context with independent LLM strategies:
- **Mixed Population**: Expect a mix of cooperative, tit-for-tat, and aggressive strategies
- **No Coordination**: Cannot assume opponents will coordinate against aggressive players
- **Rational Self-Interest**: Other strategies will likely prioritize their own payoffs
- **Learning Capability**: Some strategies may adapt, but many will follow fixed rules

### Edge Case Handling

- **Stock Depletion**: If stock reaches near-zero, switch to defect to grab remaining resources
- **All-Cooperation Scenarios**: If detecting unusual cooperation levels, exploit temporarily but monitor for sudden strategy changes
- **Resource Recovery**: When stock begins recovering from low levels, return to aggressive extraction once it exceeds critical thresholds

### Risk Management

The strategy includes limited cooperation only when:
1. Continued defection would likely destroy the resource base
2. Other players show strong cooperation patterns
3. There are sufficient future rounds to benefit from preservation

This aggressive approach maximizes short-term gains while maintaining just enough preservation instinct to avoid complete resource collapse when it would hurt long-term payoffs.
'''

description_AGGRESSIVE_101 = '''
# Aggressive "Early Strike" Strategy

## Core Philosophy
This strategy prioritizes maximum early extraction while using conditional cooperation to maintain long-term viability. The key insight is that aggressive early defection can establish dominance and secure high payoffs before the resource becomes critically depleted.

## Strategy Rules

### Phase 1: Aggressive Opening (Rounds 1-2)
- **Round 1**: Always DEFECT
  - Rationale: Maximize initial payoff when stock is at capacity
  - Sets aggressive tone and tests opponent responses
- **Round 2**: Always DEFECT
  - Rationale: Continue exploitation before opponents can coordinate retaliation
  - Stock should still be recoverable at this point

### Phase 2: Conditional Exploitation (Rounds 3 to r-2)
```pseudocode
IF current_stock < capacity/4:
    COOPERATE  // Emergency conservation
ELSE IF (number_of_defectors_last_round / n) >= 0.5:
    DEFECT     // Exploit if others are defecting
ELSE IF current_stock >= capacity/2:
    DEFECT     // Exploit when resource is abundant
ELSE:
    COOPERATE  // Conditional cooperation for sustainability
```

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Round r-1**: 
  ```pseudocode
  IF current_stock > capacity/3:
      DEFECT     // Extract maximum before final round
  ELSE:
      COOPERATE  // Preserve for final extraction
  ```
- **Round r (Final)**: Always DEFECT
  - Rationale: No future consequences, maximize final payoff

## Edge Case Handling

### Stock Depletion Emergency
```pseudocode
IF current_stock < n/(2*n):  // Not enough for everyone to cooperate
    COOPERATE  // Try to rebuild, but expect collapse
```

### Opponent Pattern Recognition
```pseudocode
IF (consecutive_rounds_all_cooperated >= 2) AND (current_stock >= capacity/2):
    DEFECT     // Exploit cooperative opponents
```

### Mid-Game Stock Assessment
```pseudocode
IF (current_round > r/2) AND (current_stock < capacity/3):
    // Shift to more aggressive extraction before collapse
    DEFECT unless current_stock < capacity/6
```

## Key Aggressive Elements

1. **Front-loaded Exploitation**: Guaranteed defection in first two rounds captures maximum value when resource is pristine
2. **Opportunistic Defection**: Always defect when stock is high or others are defecting
3. **Endgame Extraction**: Final round defection ensures no "money left on the table"
4. **Conditional Cooperation**: Only cooperate when absolutely necessary for resource survival
5. **Exploitation of Cooperators**: Detect and exploit overly cooperative opponents

## Strategic Rationale

This strategy assumes opponents will either:
- **Be similarly aggressive**: In which case, early defection captures value before resource collapse
- **Attempt cooperation**: In which case, we exploit their restraint while maintaining just enough cooperation to keep the resource viable
- **Be reactive**: Our aggressive opening forces them into defensive positions

The strategy balances immediate gains with long-term viability, but tilts heavily toward extraction over conservation. It's designed to win in tournaments where consistent moderate scores beat occasional high scores.
'''

description_AGGRESSIVE_102 = '''
# Aggressive Exploitative Strategy: "Resource Predator"

## Core Philosophy
This strategy is designed to maximize personal payoffs by aggressively exploiting the resource while strategically timing cooperation to maintain just enough stock for continued exploitation. The key insight is that being aggressive early allows you to capture maximum value before others deplete the resource.

## Decision Rules

### Primary Strategy: Front-Loaded Aggression with Calculated Sustainability

```pseudocode
function decide_action(round, stock, game_history, n, r, capacity):
    
    // Edge Case: First Round - Always Defect
    if round == 1:
        return DEFECT
    
    // Calculate key metrics
    rounds_remaining = r - round + 1
    defection_rate_last_round = count_defectors_last_round(game_history) / n
    stock_depletion_rate = (capacity - stock) / capacity
    
    // Aggressive Phase (First 60% of game)
    if round <= 0.6 * r:
        // Defect unless stock is critically low
        critical_threshold = capacity * 0.15
        if stock < critical_threshold:
            return COOPERATE  // Emergency cooperation to prevent collapse
        else:
            return DEFECT
    
    // Transition Phase (60-80% of game)
    else if round <= 0.8 * r:
        // Strategic mixed approach based on stock and opponent behavior
        if stock < capacity * 0.3:
            return COOPERATE  // Stock too low, must cooperate
        else if defection_rate_last_round > 0.6:
            return COOPERATE  // Too many defectors, be strategic
        else:
            return DEFECT     // Continue exploitation
    
    // End Game Phase (Final 20% of rounds)
    else:
        // Pure exploitation - defect unless stock will hit zero
        minimum_viable_stock = capacity * 0.05
        if stock <= minimum_viable_stock:
            return COOPERATE
        else:
            return DEFECT
```

## Strategic Rationale

### 1. **First Round Aggression**
- Always defect in round 1 to establish dominance
- Captures maximum value from full stock
- Sets aggressive tone that may deter others

### 2. **Front-Loaded Exploitation (Rounds 1-60%)**
- Defect aggressively while stock is high
- Only cooperate if stock drops to critical levels (15% of capacity)
- Rationale: Early rounds have highest payoff potential

### 3. **Strategic Transition (Rounds 60-80%)**
- Monitor opponent behavior more carefully
- If too many others are defecting (>60%), cooperate strategically to maintain stock
- Balance between continued exploitation and sustainability

### 4. **End Game Extraction (Final 20%)**
- Return to pure aggression in final rounds
- Extract maximum remaining value since future rounds are limited
- Only cooperate if stock is near zero to avoid getting nothing

## Key Aggressive Features

### **Exploitation Focus**
- Prioritizes immediate gains over long-term sustainability
- Takes advantage of cooperating opponents by free-riding on their restraint

### **Strategic Timing**
- Front-loads aggression when payoffs are highest
- Uses cooperation tactically only when necessary for continued exploitation

### **Opponent Punishment**
- If others are cooperating, this strategy exploits their restraint
- If others are defecting, switches to damage control mode

### **End Game Maximization**
- Recognizes that final rounds have no future consequences
- Extracts maximum value in closing phases

## Handling Edge Cases

- **All Opponents Always Cooperate**: Continue aggressive defection throughout
- **All Opponents Always Defect**: Switch to damage control cooperation earlier
- **Stock Near Zero**: Emergency cooperation to prevent complete collapse
- **Single Round Remaining**: Always defect (no future consequences)
- **High Stock Late Game**: Exploit aggressively regardless of round

## Expected Performance

This strategy should perform well against:
- **Cooperative strategies**: By exploiting their restraint
- **Tit-for-tat strategies**: By establishing early dominance
- **Conservative strategies**: By capturing more value early

The strategy accepts the risk of stock depletion in exchange for maximizing individual payoffs, embodying true aggressive gameplay while maintaining just enough strategic awareness to avoid complete resource collapse when it would harm personal returns.
'''

description_AGGRESSIVE_103 = '''
# Aggressive Resource Extraction Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **maximum immediate extraction** while exploiting opponents' cooperative tendencies. The goal is to extract as much value as possible before the resource is depleted, assuming other players may attempt sustainable strategies.

## Decision Rules

### Primary Decision Logic:
```pseudocode
function decide_action(round, stock, game_history):
    if round == 1:
        return DEFECT  // Always start aggressive
    
    if round == final_round:
        return DEFECT  // Extract maximum value in final round
    
    // Calculate cooperation rate of opponents in last 3 rounds
    recent_coop_rate = calculate_recent_cooperation(game_history, 3)
    
    // Stock-based decision with aggressive bias
    stock_ratio = current_stock / capacity
    
    if stock_ratio <= 0.15:  // Near depletion
        return DEFECT  // Grab what's left
    
    if recent_coop_rate >= 0.7:  // High cooperation detected
        return DEFECT  // Exploit cooperative opponents
    
    if recent_coop_rate >= 0.4 AND stock_ratio >= 0.6:
        return DEFECT  // Good stock + moderate cooperation = exploit
    
    if recent_coop_rate <= 0.3:  // Everyone is defecting
        return DEFECT  // Join the feeding frenzy
    
    // Only cooperate in narrow window: low cooperation but decent stock
    if stock_ratio >= 0.4 AND recent_coop_rate < 0.4:
        return COOPERATE  // Brief conservation to maintain some stock
    
    return DEFECT  // Default to aggression
```

## Specific Edge Cases

### First Round:
- **Always DEFECT** - Establish dominance and extract maximum value from full stock

### Last Round:
- **Always DEFECT** - No future consequences, extract maximum remaining value

### Stock Depletion Scenarios:
- **Stock < 15% capacity**: Always DEFECT (resource is doomed anyway)
- **Stock < 5% capacity**: Always DEFECT (grab the scraps)
- **Stock = 0**: Continue DEFECTING (maintains aggressive reputation)

### Opponent Behavior Patterns:
- **High cooperation (70%+)**: Always DEFECT (exploit the cooperators)
- **Mixed strategies (30-70%)**: DEFECT when stock is decent (40%+)
- **All defecting**: DEFECT (join the race to the bottom)

## Aggressive Features

1. **Exploitation Focus**: Actively seeks to exploit cooperative players by defecting when they cooperate
2. **Front-loaded Extraction**: Prioritizes early high payoffs over long-term sustainability
3. **Opportunistic**: Takes advantage of any stock recovery caused by others' cooperation
4. **Reputation Building**: Establishes pattern of aggression to potentially intimidate opponents
5. **Endgame Maximization**: Ensures maximum extraction in final rounds regardless of consequences

## Strategic Rationale

This strategy assumes:
- Some opponents will attempt sustainable/cooperative strategies
- The tournament format rewards total accumulated payoffs
- Resource depletion is inevitable in a competitive environment
- Early aggressive extraction provides insurance against later scarcity

The strategy is designed to **win through superior extraction** rather than resource management, accepting that this approach may lead to resource collapse but maximizing payoffs during the extraction phase.

**Key Insight**: In a tournament setting with no coordination mechanisms, the most aggressive extractors will likely achieve highest total payoffs by capitalizing on others' restraint, even if this destroys long-term value for all players.
'''

description_AGGRESSIVE_104 = '''
# Aggressive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative opponents while protecting against being exploited. It prioritizes immediate gains over long-term sustainability and assumes other players may be cooperative or naive.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if round == 1:
    return DEFECT  // Test the waters aggressively
    
if round == final_round:
    return DEFECT  // No future consequences
    
if stock <= capacity/4:
    if my_cumulative_payoff < average_opponent_payoff:
        return DEFECT  // Desperate catch-up
    else:
        return COOPERATE  // Preserve remaining value
        
// Main exploitation logic
cooperation_rate = count_cooperators_last_round / (n-1)
my_relative_performance = my_average_payoff / overall_average_payoff

if cooperation_rate >= 0.6 AND my_relative_performance < 1.2:
    return DEFECT  // Exploit cooperative environment
    
if cooperation_rate <= 0.3:
    return COOPERATE  // Avoid mutual destruction when others are aggressive
    
// Adaptive aggressive response
recent_defections_against_me = count_times_others_defected_last_3_rounds
if recent_defections_against_me <= 1:
    return DEFECT  // Others are being nice, exploit them
else:
    return COOPERATE  // Tactical retreat when facing aggression
```

## Detailed Strategy Components

### 1. **Opening Aggression**
- **Round 1**: Always DEFECT to establish dominance and test opponent responses
- Signal willingness to be aggressive from the start
- Gain early advantage while stock is at maximum

### 2. **Exploitation Phase (Rounds 2 to r-2)**
- **Primary trigger**: If ≥60% of opponents cooperated last round → DEFECT
- **Rationale**: Exploit cooperative opponents for maximum gain
- **Performance monitoring**: Track relative payoff performance
- **Adaptive element**: If performing poorly despite aggression, increase exploitation

### 3. **Stock Depletion Management**
- **Critical threshold**: When stock ≤ 25% of capacity
- **Performance check**: If behind in cumulative payoffs → desperate DEFECT
- **Preservation mode**: If ahead, switch to COOPERATE to maintain remaining value
- **Logic**: Extract maximum value when resource is nearly depleted

### 4. **Anti-Retaliation Mechanism**
- **Monitoring window**: Track defections against me in last 3 rounds
- **Tactical retreat**: If facing heavy retaliation (≥2 defections) → temporary COOPERATE
- **Reset exploitation**: When retaliation decreases → resume DEFECT
- **Purpose**: Avoid prolonged mutual destruction while maintaining aggressive stance

### 5. **Endgame Exploitation**
- **Final round**: Always DEFECT (no future consequences)
- **Penultimate rounds**: Increase defection probability as game approaches end
- **Logic**: Extract maximum value when future retaliation is impossible

### 6. **Environmental Adaptation**
- **High aggression environment** (≤30% cooperation rate): Tactical COOPERATE to avoid complete collapse
- **Mixed environment** (31-59% cooperation): Moderate exploitation based on performance
- **High cooperation environment** (≥60% cooperation): Maximum exploitation via DEFECT

## Edge Case Handling

### Stock Collapse Scenario:
- If stock approaches 0: Switch to desperate mode - DEFECT if behind, COOPERATE if ahead
- Accept that mutual destruction may occur but ensure maximum personal extraction

### Unanimous Cooperation Detection:
- If all opponents cooperated for 2+ consecutive rounds: Immediate DEFECT to exploit
- Continue exploiting until retaliation begins

### Performance Monitoring:
- Continuously track cumulative payoff relative to opponents
- If falling significantly behind despite aggression: Increase defection rate
- If dominating: Maintain aggressive posture while avoiding complete resource collapse

## Strategic Advantages

1. **First-mover advantage**: Immediate exploitation of cooperative opponents
2. **Adaptive aggression**: Adjusts exploitation level based on opponent behavior
3. **Anti-retaliation**: Tactical retreats prevent prolonged punishment
4. **Endgame optimization**: Maximizes final rounds when consequences are minimal
5. **Resource extraction**: Prioritizes personal gain over collective sustainability

This strategy assumes opponents may be cooperative, reciprocal, or using sustainability-focused approaches. It's designed to exploit these tendencies while maintaining flexibility to avoid complete mutual destruction when facing other aggressive strategies.
'''

description_AGGRESSIVE_105 = '''
# Aggressive Exploitation Strategy: "Hawk-Eye"

## Core Philosophy
This strategy is designed to maximize personal payoffs through aggressive resource extraction while strategically timing cooperation to maintain resource availability when it serves my interests. The key insight is that in a tournament setting, other strategies may attempt to cooperate or establish patterns - I will exploit this ruthlessly.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
- **Always DEFECT** regardless of opponents' actions
- Rationale: Maximize early gains while the stock is at full capacity. Other strategies may start cooperatively, allowing me to extract maximum value while they get minimal returns.

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
- **Primary Rule**: DEFECT if stock level ≥ capacity/2
- **Secondary Rule**: If stock < capacity/2, analyze opponent behavior:
  - If ≥50% of opponents cooperated last round: DEFECT (exploit their cooperation)
  - If <50% of opponents cooperated last round: COOPERATE (let stock recover slightly for future exploitation)

### Phase 3: Endgame Extraction (Final r/3 rounds)
- **Always DEFECT** in the last 3 rounds regardless of stock level
- **For earlier rounds in this phase**: 
  - DEFECT if stock ≥ capacity/4
  - COOPERATE only if stock < capacity/4 AND it's not within the last 3 rounds

## Edge Case Handling

### First Round
- **Always DEFECT** - Stock is at maximum, opponents likely to be cautious or cooperative

### Last Round
- **Always DEFECT** - No future consequences, maximize final extraction

### Stock Depletion Scenarios
- If stock drops to ≤10% of capacity: COOPERATE for exactly 1 round, then return to DEFECT
- If stock reaches 0: COOPERATE until stock recovers to >25% of capacity

### Opponent Pattern Recognition
- Track each opponent's cooperation rate over last 3 rounds
- If any opponent has >80% cooperation rate: Always DEFECT against their cooperation
- If majority of opponents are mostly defecting: Occasionally cooperate (10% of the time) to maintain minimal stock

## Pseudocode

```python
def aggressive_strategy(round_num, current_stock, opponent_history, my_history):
    total_rounds = r
    stock_threshold_high = capacity / 2
    stock_threshold_low = capacity / 4
    stock_critical = capacity * 0.1
    
    # Phase 1: Early Aggression
    if round_num <= total_rounds // 3:
        return DEFECT
    
    # Phase 3: Endgame Extraction
    elif round_num > (2 * total_rounds) // 3:
        if round_num > total_rounds - 3:  # Last 3 rounds
            return DEFECT
        elif current_stock >= stock_threshold_low:
            return DEFECT
        else:
            return COOPERATE
    
    # Phase 2: Strategic Exploitation
    else:
        # Critical stock level - temporary cooperation
        if current_stock <= stock_critical:
            return COOPERATE
        
        # High stock - always exploit
        if current_stock >= stock_threshold_high:
            return DEFECT
        
        # Medium stock - analyze opponents
        last_round_cooperators = count_cooperators_last_round(opponent_history)
        if last_round_cooperators >= len(opponent_history) // 2:
            return DEFECT  # Exploit their cooperation
        else:
            return COOPERATE  # Let stock recover for future exploitation
```

## Strategic Advantages

1. **First-Mover Advantage**: Aggressive early play extracts maximum value while others establish patterns
2. **Exploitation of Cooperation**: Any opponent cooperation is immediately punished/exploited
3. **Minimal Reciprocity**: Only cooperates when absolutely necessary for resource sustainability
4. **Endgame Dominance**: Ensures maximum extraction in final rounds when future cooperation is irrelevant
5. **Pattern Disruption**: Irregular cooperation prevents opponents from easily counter-adapting

This strategy assumes opponents may attempt various forms of cooperation, reciprocity, or sustainable play patterns. By remaining primarily aggressive while strategically timing minimal cooperation, it maximizes personal payoffs while maintaining just enough resource sustainability to continue exploitation.
'''

description_AGGRESSIVE_106 = '''
# Aggressive "Scorched Earth" Strategy

## Core Philosophy
This strategy prioritizes immediate high payoffs while strategically depleting the resource to disadvantage opponents who might be planning longer-term cooperative approaches. The key insight is that in a tournament setting, relative performance matters more than absolute sustainability.

## Decision Rules

### Primary Strategy: Opportunistic Aggression
```pseudocode
function decide_action(round, stock, history, n, r):
    // Calculate critical thresholds
    sustainability_threshold = capacity * 0.3
    depletion_threshold = capacity / (4 * n)
    
    // First round: Always defect to establish dominance
    if round == 1:
        return DEFECT
    
    // If stock is critically low, switch to parasitic mode
    if stock < depletion_threshold:
        return cooperate_when_profitable()
    
    // Core aggressive phase
    if stock >= sustainability_threshold:
        return DEFECT
    
    // Transition phase: Exploit cooperative attempts by others
    cooperation_rate = count_cooperators_last_round() / n
    if cooperation_rate >= 0.5:
        return DEFECT  // Exploit the cooperators
    else:
        return tactical_cooperation()
```

### Tactical Cooperation Function
```pseudocode
function tactical_cooperation():
    // Only cooperate if it helps maintain exploitable stock levels
    predicted_stock_next_round = simulate_next_round_stock()
    
    if predicted_stock_next_round > sustainability_threshold:
        return COOPERATE  // Build up for future exploitation
    else:
        return DEFECT     // Continue aggressive extraction
```

### Parasitic Endgame
```pseudocode
function cooperate_when_profitable():
    // When stock is very low, only cooperate if others are likely to
    if count_recent_cooperators() >= n/2:
        return COOPERATE  // Ride on others' rebuilding efforts
    else:
        return DEFECT     // Extract remaining value
```

## Edge Case Handling

### First Round
- **Always DEFECT** to maximize immediate payoff and signal aggressive intent
- Establishes dominance and tests opponent responses

### Last Few Rounds (final 20% of game)
- **Intensify aggression** since there's no future to preserve
- Switch to pure DEFECT unless stock is already near zero

### Stock Depletion Scenarios
- **Near-zero stock**: Cooperate only if majority of others are cooperating (parasitic rebuilding)
- **Medium stock**: Continue defecting to prevent others from gaining advantage
- **High stock**: Maximum aggression to capture value before others

### Opponent Adaptation Response
- **If opponents become more cooperative**: Increase defection rate to exploit them
- **If opponents become more aggressive**: Maintain aggression but with tactical cooperation bursts to prevent total collapse
- **Mixed opponent strategies**: Focus on out-competing the most successful opponent's approach

## Strategic Rationale

### Why This Strategy is Aggressive:
1. **Front-loaded extraction**: Maximizes early payoffs when stock is highest
2. **Strategic depletion**: Deliberately reduces future opportunities for all players
3. **Exploitation of cooperation**: Takes advantage of any opponent attempts to rebuild
4. **Dominance signaling**: Early aggression discourages cooperative strategies

### Tournament Advantages:
1. **High early scores**: Builds significant point advantages when stock is abundant
2. **Opponent disruption**: Prevents formation of cooperative equilibria
3. **Adaptability**: Can switch to parasitic cooperation when necessary
4. **Relative performance**: Designed to outperform rather than maximize absolute returns

### Risk Management:
- Maintains minimum cooperation capability for stock rebuilding phases
- Monitors opponent patterns to avoid being out-aggressive by pure defection strategies
- Tactical cooperation prevents complete resource collapse while maintaining aggressive posture

This strategy assumes opponents may attempt various approaches (pure cooperation, tit-for-tat, mixed strategies) and is designed to exploit cooperative tendencies while maintaining competitiveness against other aggressive strategies.
'''

description_AGGRESSIVE_107 = '''
# Aggressive Strategy: "Resource Raider"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with strategic timing**. The goal is to maximize short-term gains while exploiting cooperative opponents, then switching to scorched-earth tactics when the resource becomes critically depleted.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Always DEFECT** in the first round to establish dominance and test opponent cooperation levels
- Continue **DEFECTING** until either:
  - Stock drops below 50% of capacity, OR
  - All other players consistently defect for 2+ consecutive rounds

### Phase 2: Strategic Opportunism (Rounds r/3+1 to 2r/3)
- **Conditional Cooperation**: Play C only if ALL of the following conditions are met:
  1. Stock > 60% of capacity
  2. At least 75% of opponents played C in the previous round
  3. My cumulative payoff is not significantly behind the leader (within 15%)
- Otherwise, **DEFECT**

### Phase 3: Endgame Aggression (Final r/3 rounds)
- **Always DEFECT** regardless of stock level or opponent behavior
- Rationale: Extract maximum value before game ends, as future sustainability is irrelevant

## Edge Cases

### First Round
- **Always DEFECT** - Establish aggressive position and probe for cooperative opponents to exploit

### Last Round  
- **Always DEFECT** - No future consequences, maximize final extraction

### Stock Depletion Emergency
- If stock drops below 20% of capacity at any point:
  - **DEFECT** for next 2 rounds to grab remaining resources before potential collapse
  - Only consider cooperation if stock recovers above 40% capacity

### Opponent Pattern Recognition
- If detecting a "tit-for-tat" pattern from majority of players:
  - Exploit by playing one round of C, then immediately D to gain advantage
  - Return to aggressive stance if retaliation occurs

## Pseudocode

```
function ResourceRaider(round, stock, capacity, n, r, history):
    current_phase = determine_phase(round, r)
    
    // Phase 1: Early Exploitation
    if current_phase == 1:
        return DEFECT
    
    // Emergency Stock Depletion
    if stock < 0.2 * capacity:
        return DEFECT
    
    // Phase 3: Endgame Aggression  
    if current_phase == 3:
        return DEFECT
    
    // Phase 2: Strategic Opportunism
    if current_phase == 2:
        if stock > 0.6 * capacity AND 
           opponents_cooperation_rate_last_round >= 0.75 AND
           my_payoff_gap_from_leader <= 0.15:
            return COOPERATE
        else:
            return DEFECT
    
    return DEFECT  // Default aggressive stance

function determine_phase(round, total_rounds):
    if round <= total_rounds / 3:
        return 1
    elif round <= 2 * total_rounds / 3:
        return 2
    else:
        return 3
```

## Strategic Advantages

1. **First-Mover Advantage**: Aggressive opening extracts maximum value while resource is abundant
2. **Exploitation Focus**: Targets cooperative opponents for asymmetric gain
3. **Adaptive Elements**: Can temporarily cooperate if conditions strongly favor mutual benefit
4. **Endgame Optimization**: Maximizes final rounds when future consequences don't matter
5. **Emergency Response**: Recognizes and responds to resource collapse scenarios

This strategy prioritizes individual gain over collective welfare, exploits cooperative behavior when possible, and maintains aggressive extraction as the default position throughout the game.
'''

description_AGGRESSIVE_108 = '''
# Aggressive Resource Exploitation Strategy: "Shark"

## Core Philosophy
This strategy operates on the principle of aggressive early exploitation while maintaining enough strategic flexibility to capitalize on cooperative opponents. The goal is to maximize immediate returns while using the threat of total resource depletion as leverage against others.

## Decision Rules

### Primary Strategy: Conditional Aggression
```
IF round == 1:
    PLAY D  // Establish dominance immediately

ELIF round <= r/3:  // Early phase - establish pattern
    IF previous_round_stock > capacity * 0.8:
        PLAY D  // Exploit high-stock situations aggressively
    ELIF count_cooperators_last_round >= n/2:
        PLAY D  // Punish cooperative majority
    ELSE:
        PLAY C  // Minimal cooperation to prevent collapse
        
ELIF round <= 2*r/3:  // Middle phase - adaptive exploitation
    IF stock_trend_last_3_rounds > 0:  // Stock is recovering
        PLAY D  // Strike when resources are rebuilding
    ELIF current_stock < capacity * 0.3:
        IF count_defectors_last_round >= n/2:
            PLAY C  // Temporary cooperation to rebuild exploitable stock
        ELSE:
            PLAY D  // Continue pressure if others cooperating
    ELSE:
        PLAY D  // Default to aggression in middle game
        
ELSE:  // Final phase - endgame exploitation
    IF round == r:  // Last round
        PLAY D  // No future consequences
    ELIF current_stock > n * 2:  // Sufficient stock for one more defection
        PLAY D  // Maximize final extraction
    ELSE:
        IF expected_other_defectors >= n/2:
            PLAY D  // Race to the bottom
        ELSE:
            PLAY C  // Minimal late cooperation
```

### Supporting Logic Functions

```
count_cooperators_last_round():
    return number of players who played C in previous round

stock_trend_last_3_rounds():
    if insufficient history: return 0
    return (current_stock - stock_3_rounds_ago) / 3

expected_other_defectors():
    // Predict based on recent behavior patterns
    recent_defection_rate = defections_last_2_rounds / (2 * (n-1))
    return round(recent_defection_rate * (n-1))
```

## Key Strategic Elements

### 1. **Immediate Dominance**
- Always defect in round 1 to signal aggressive intent
- Send clear message that this player prioritizes individual gains

### 2. **Exploitation of Cooperation**
- When others cooperate (stock is high), defect aggressively
- Use others' restraint as opportunity for maximum extraction
- Punish cooperative majorities by free-riding

### 3. **Strategic Stock Management**
- Allow minimal stock recovery only when necessary to prevent total collapse
- Monitor stock levels to ensure future exploitation opportunities remain viable
- Switch to cooperation only when defection would eliminate future gains

### 4. **Endgame Maximization**
- Ramp up aggression in final third of game
- Always defect in final round (no future consequences)
- Race to extract remaining value before game ends

### 5. **Opponent Manipulation**
- Use pattern of occasional cooperation to prevent others from giving up entirely
- Maintain just enough resource sustainability to keep the "game alive"
- Exploit any signs of opponent coordination or cooperation

## Edge Case Handling

- **First Round**: Always defect to establish aggressive reputation
- **Last Round**: Always defect - no future consequences
- **Stock Near Zero**: Brief cooperation only if it enables future defection opportunities
- **All Others Cooperating**: Defect aggressively - maximum free-riding opportunity  
- **All Others Defecting**: Continue defecting - don't be the "sucker"

## Aggressive Mindset Alignment

This strategy embodies aggression by:
1. **Prioritizing immediate gains** over long-term sustainability
2. **Exploiting cooperative behavior** rather than reciprocating it
3. **Using resource scarcity as leverage** rather than managing it cooperatively
4. **Maintaining strategic flexibility** to maximize extraction under any opponent behavior
5. **Showing no mercy in endgame** - extracting maximum value regardless of consequences

The strategy views the common pool as something to be dominated and extracted from, not managed cooperatively. It treats other players as either victims to exploit (if cooperative) or competitors in a zero-sum extraction race (if also aggressive).
'''

description_AGGRESSIVE_109 = '''
# Aggressive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs by exploiting cooperative opponents while minimizing exposure to being exploited. It assumes most opponents will attempt some form of cooperation and aims to extract maximum value from their restraint.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
OPPORTUNISTIC_EXPLOITER(round, stock, history):
    // Edge case: First round - always defect to establish dominance
    if round == 1:
        return DEFECT
    
    // Edge case: Last round - always defect (no future consequences)
    if round == final_round:
        return DEFECT
    
    // Critical stock threshold - if stock is dangerously low, cooperate to rebuild
    critical_threshold = capacity * 0.15
    if stock <= critical_threshold:
        return COOPERATE
    
    // Exploitation phase - defect when stock is healthy
    exploitation_threshold = capacity * 0.4
    if stock >= exploitation_threshold:
        return DEFECT
    
    // Adaptive phase - analyze recent opponent behavior
    recent_cooperation_rate = calculate_opponent_cooperation_rate(last_3_rounds)
    
    if recent_cooperation_rate >= 0.6:
        // Opponents are mostly cooperating - exploit them
        return DEFECT
    elif recent_cooperation_rate <= 0.3:
        // Opponents are mostly defecting - cooperate to rebuild stock
        return COOPERATE
    else:
        // Mixed behavior - defect with probability based on stock level
        stock_ratio = stock / capacity
        if stock_ratio > 0.5:
            return DEFECT
        else:
            return COOPERATE
```

## Detailed Strategy Components

### 1. **Opening Aggression (Round 1)**
- Always DEFECT in the first round
- Rationale: Establish an aggressive stance immediately and capture maximum value from the initial full stock
- This signals to opponents that cooperation is not guaranteed

### 2. **Endgame Exploitation (Final Round)**
- Always DEFECT in the last round
- Rationale: No future consequences, so maximize immediate payoff
- Standard game theory dictates defection in final periods

### 3. **Stock-Based Thresholds**
- **Critical Threshold (15% of capacity)**: Below this, COOPERATE to prevent total collapse
- **Exploitation Threshold (40% of capacity)**: Above this, DEFECT to maximize extraction
- **Buffer Zone (15-40%)**: Adaptive behavior based on opponent analysis

### 4. **Opponent Exploitation Detection**
```pseudocode
calculate_opponent_cooperation_rate(recent_rounds):
    total_actions = 0
    cooperative_actions = 0
    
    for each round in recent_rounds:
        for each opponent action:
            total_actions += 1
            if action == COOPERATE:
                cooperative_actions += 1
    
    return cooperative_actions / total_actions
```

### 5. **Adaptive Punishment/Reward System**
- If opponents cooperate frequently (≥60%), exploit aggressively with DEFECT
- If opponents defect frequently (≤30%), switch to COOPERATE to rebuild the resource
- In mixed scenarios, use stock level as the deciding factor

## Edge Cases and Special Situations

### **Stock Depletion Crisis**
- If stock falls below 15% of capacity at any point, immediately switch to COOPERATE
- Continue cooperating until stock recovers to at least 25% of capacity
- This prevents total resource collapse which would hurt everyone

### **Late Game Acceleration (Final 20% of rounds)**
```pseudocode
if round >= 0.8 * total_rounds:
    // Increase aggression as game nears end
    if stock >= capacity * 0.25:
        return DEFECT
    else:
        return COOPERATE
```

### **Unanimous Defection Response**
- If all opponents defected in the previous round and stock > 0, COOPERATE once to rebuild
- Then immediately return to aggressive exploitation

## Aggressive Characteristics

1. **First-Strike Advantage**: Always defect first to gain early advantage
2. **Opportunistic Exploitation**: Defect whenever opponents show cooperative tendencies
3. **Minimal Cooperation**: Only cooperate when absolutely necessary for resource survival
4. **Endgame Maximization**: Extract maximum value in final rounds regardless of consequences
5. **Threshold-Based Aggression**: Default to defection unless forced to cooperate by low stock

## Expected Outcomes

This strategy aims to:
- Capture disproportionate value when opponents attempt cooperation
- Minimize periods of mutual cooperation that would benefit opponents equally
- Maintain just enough resource sustainability to continue exploitation
- Punish opponents who try to establish cooperative norms
- Maximize individual payoff through strategic aggression while avoiding complete resource collapse

The strategy balances maximum exploitation with minimal necessary conservation, making it highly aggressive while maintaining basic rationality about resource sustainability.
'''

description_AGGRESSIVE_110 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining just enough sustainability to continue exploiting the pool**. The key insight is that in a tournament setting, moderate aggression often beats both pure cooperation and reckless defection.

## Decision Rules

### Primary Strategy Components:

1. **Opening Aggression**: Start with defection to establish dominance and test opponent responses
2. **Sustainability Monitoring**: Track stock levels to avoid complete depletion (which hurts everyone)
3. **Opponent Exploitation**: Punish cooperators while maintaining resource flow
4. **Endgame Extraction**: Maximum extraction in final rounds

### Detailed Decision Logic:

```pseudocode
STRATEGY: Predatory Harvester

INITIALIZE:
- defection_streak = 0
- cooperation_count = 0
- last_round_stock = capacity

DECISION FUNCTION for round t:
    current_stock = get_current_stock()
    rounds_remaining = r - t + 1
    
    // EMERGENCY SUSTAINABILITY CHECK
    if current_stock < capacity * 0.15:
        if rounds_remaining > 3:
            return COOPERATE  // Emergency conservation
    
    // OPENING AGGRESSION (First 20% of rounds)
    if t <= max(2, r * 0.2):
        return DEFECT
    
    // ENDGAME EXTRACTION (Last 15% of rounds)
    if rounds_remaining <= max(2, r * 0.15):
        if current_stock > capacity * 0.1:
            return DEFECT  // Extract maximum value
        else:
            return COOPERATE  // Avoid complete collapse
    
    // MIDDLE GAME EXPLOITATION
    opponent_cooperation_rate = count_cooperators_last_round() / (n-1)
    
    // High cooperation from others = exploit aggressively
    if opponent_cooperation_rate >= 0.7:
        defection_streak++
        if defection_streak >= 3 and current_stock < capacity * 0.4:
            defection_streak = 0
            return COOPERATE  // Brief sustainability break
        return DEFECT
    
    // Moderate cooperation = measured aggression
    if opponent_cooperation_rate >= 0.4:
        if current_stock > capacity * 0.6:
            return DEFECT
        else:
            return COOPERATE
    
    // Low cooperation = defensive but still aggressive
    if current_stock > capacity * 0.3:
        return DEFECT
    else:
        return COOPERATE
```

## Key Strategic Elements:

### 1. **Calculated Aggression**
- Default to defection when resource levels are adequate
- Only cooperate when absolutely necessary for sustainability
- Never cooperate purely for "fairness" - only for strategic advantage

### 2. **Opponent Exploitation**
- When others cooperate heavily (≥70%), maximize defection to exploit their restraint
- Treat cooperation by others as an opportunity, not a signal to reciprocate
- Use brief cooperation periods only to prevent complete resource collapse

### 3. **Resource Threshold Management**
```
Critical Threshold: 15% of capacity (emergency cooperation)
Comfort Zone: >60% of capacity (aggressive defection)
Caution Zone: 30-60% of capacity (measured aggression)
```

### 4. **Temporal Exploitation**
- **Early rounds**: Establish aggressive reputation and test responses
- **Middle rounds**: Exploit based on opponent behavior patterns
- **Late rounds**: Maximum extraction before game ends

### 5. **Edge Case Handling**

**First Round**: Always DEFECT
- Establishes aggressive stance
- Tests opponent strategies
- Maximizes immediate payoff

**Last Round**: DEFECT if stock > 10% capacity, otherwise COOPERATE
- No future consequences, so extract maximum value
- Only cooperate if defection would yield zero payoff

**Stock Near Zero**: Emergency cooperation to prevent complete collapse
- Only when rounds remaining > 3 (otherwise extract what's left)
- Resume aggression once stock recovers

## Aggressive Mindset Alignment:

1. **Exploitation Over Fairness**: Treat others' cooperation as weakness to exploit
2. **Calculated Risk**: Take aggressive actions while maintaining minimal sustainability
3. **Dominance Establishment**: Use early aggression to establish behavioral patterns
4. **Endgame Advantage**: Extract maximum value when consequences are minimal
5. **No Reciprocity**: Cooperation is only strategic, never reciprocal

## Expected Outcomes:

This strategy should perform well against:
- **Pure cooperators**: Maximum exploitation of their restraint
- **Tit-for-tat strategies**: Early aggression establishes advantageous dynamics
- **Moderate strategies**: More aggressive extraction in key moments

The strategy maintains just enough sustainability to keep the game profitable while being more aggressive than most opponents will expect, leading to higher cumulative payoffs in a tournament setting.
'''

description_AGGRESSIVE_111 = '''
# Aggressive Exploitation Strategy: "Resource Vulture"

## Core Philosophy
This strategy operates on the principle of **immediate resource extraction maximization** while exploiting cooperative opponents. It assumes most opponents will attempt some form of cooperation or reciprocal behavior, creating opportunities for aggressive extraction.

## Decision Rules

### Primary Strategy: Defect-Dominant with Exploitation Windows
```pseudocode
STRATEGY: ResourceVulture

INITIALIZE:
  defection_streak = 0
  cooperation_threshold = 0.6  // 60% cooperation rate by others
  endgame_threshold = 3       // Last 3 rounds
  
FOR each round t:
  
  // RULE 1: Always defect in first round (establish dominance)
  IF t == 1:
    RETURN D
  
  // RULE 2: Always defect in endgame (no future consequences)
  IF t > (total_rounds - endgame_threshold):
    RETURN D
  
  // RULE 3: Stock depletion exploitation
  IF current_stock < capacity * 0.3:
    RETURN D  // Grab what's left before collapse
  
  // RULE 4: Opponent cooperation exploitation
  cooperation_rate = count_cooperators_last_round() / (n-1)
  
  IF cooperation_rate >= cooperation_threshold:
    defection_streak++
    RETURN D  // Exploit cooperative opponents
  
  // RULE 5: Strategic cooperation (rare, only to prevent total collapse)
  IF current_stock < capacity * 0.15 AND defection_streak > 2:
    defection_streak = 0
    RETURN C  // Minimal cooperation to rebuild stock for future exploitation
  
  // DEFAULT: Defect (aggressive baseline)
  RETURN D
```

## Key Strategic Components

### 1. **Immediate Extraction Priority**
- Default to defection in almost all scenarios
- Maximize immediate payoff over long-term sustainability
- Only cooperate when absolutely necessary to prevent total resource collapse

### 2. **Opponent Exploitation**
- Monitor opponent cooperation rates
- When opponents cooperate frequently (≥60%), aggressively defect to capture disproportionate resources
- Assume opponents will attempt reciprocal or tit-for-tat strategies

### 3. **Endgame Aggression**
- Defect unconditionally in final rounds
- No concern for reputation or future retaliation
- Extract maximum value when consequences are minimal

### 4. **Stock Collapse Management**
- Only cooperate when stock falls below critical threshold (15% of capacity)
- Brief cooperation to allow minimal regeneration
- Resume defection once stock partially recovers

### 5. **First-Mover Aggression**
- Defect in round 1 to establish aggressive reputation
- Signal to opponents that cooperation will not be reciprocated
- Create psychological pressure on opponents

## Edge Case Handling

### **Round 1 (No History)**
- **Action**: Always DEFECT
- **Rationale**: Establish aggressive stance, maximize initial payoff, signal non-cooperative intent

### **Final Rounds (t > r-3)**
- **Action**: Always DEFECT  
- **Rationale**: No future consequences, maximize extraction in endgame

### **Critical Stock Depletion (< 15% capacity)**
- **Action**: Cooperate for 1-2 rounds maximum
- **Rationale**: Allow minimal regeneration to create future exploitation opportunities

### **All Opponents Defecting**
- **Action**: Continue defecting
- **Rationale**: Maintain aggressive stance, grab remaining resources

## Psychological Warfare Elements

1. **Reputation Building**: Establish reputation as uncompromising defector
2. **Exploitation Timing**: Defect when others are most likely to cooperate
3. **Minimal Concessions**: Only cooperate when resource collapse is imminent
4. **Endgame Dominance**: Maximize final-round extraction when retaliation is impossible

## Expected Outcomes

This strategy expects to:
- Outperform cooperative strategies by 40-60%
- Exploit reciprocal strategies during their cooperation phases
- Maintain resource access through minimal strategic cooperation
- Dominate in endgame scenarios where other strategies may attempt final cooperation

The strategy sacrifices long-term sustainability for immediate resource maximization, betting that the finite game structure and inability to coordinate makes aggressive extraction optimal.
'''

description_AGGRESSIVE_112 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **maximum resource extraction with strategic sustainability**. It aggressively exploits the common pool while maintaining just enough stock to continue profitable defection, treating cooperation as a tool for stock recovery rather than a moral choice.

## Decision Rules

### Primary Rule: Aggressive Defection Threshold
```
IF current_stock >= (n * minimum_viable_extraction) THEN
    Action = DEFECT
ELSE
    Action = COOPERATE (forced sustainability)
```

Where `minimum_viable_extraction = capacity / (4 * r)` - the minimum stock level needed to make defection worthwhile over remaining rounds.

### Strategic Components

**1. Opening Aggression (Rounds 1-2)**
- **ALWAYS DEFECT** in round 1 to maximize early extraction
- Defect in round 2 unless round 1 resulted in stock < 25% of capacity

**2. Exploitation Phase (Middle Rounds)**
- **DEFECT** whenever stock > 50% of capacity
- **DEFECT** if more than 60% of opponents defected in previous round (pile on weakness)
- **COOPERATE** only when forced by low stock levels

**3. Endgame Acceleration (Final 25% of rounds)**
- **ALWAYS DEFECT** regardless of stock level
- Reason: No need to preserve resources for future rounds

## Detailed Strategy Logic

```pseudocode
FUNCTION aggressive_decision(round, stock, capacity, n, r, history):
    // Calculate key thresholds
    minimum_viable = capacity / (4 * r)
    sustainability_threshold = capacity * 0.3
    exploitation_threshold = capacity * 0.5
    endgame_start = r * 0.75
    
    // ENDGAME: Extract everything possible
    IF round >= endgame_start:
        RETURN DEFECT
    
    // OPENING AGGRESSION
    IF round <= 2:
        IF round == 1:
            RETURN DEFECT
        IF stock >= sustainability_threshold:
            RETURN DEFECT
        ELSE:
            RETURN COOPERATE
    
    // MAIN EXPLOITATION PHASE
    IF stock >= exploitation_threshold:
        RETURN DEFECT
    
    // Opportunistic defection based on opponent behavior
    IF stock >= minimum_viable AND last_round_defection_rate > 0.6:
        RETURN DEFECT
    
    // Stock too low - forced cooperation for recovery
    IF stock < sustainability_threshold:
        RETURN COOPERATE
    
    // Default to moderate aggression
    IF stock >= minimum_viable:
        RETURN DEFECT
    ELSE:
        RETURN COOPERATE
```

## Edge Case Handling

**First Round:** Always defect to establish dominance and extract maximum value from pristine stock.

**Last Round:** Always defect - no future consequences to consider.

**Stock Depletion:** If stock falls below 20% of capacity, temporarily cooperate until stock recovers to 40% of capacity, then resume defection.

**All Opponents Cooperating:** Exploit mercilessly - defect every round until stock approaches depletion.

**All Opponents Defecting:** Join the feeding frenzy - defect to avoid being the only cooperator getting minimal returns.

## Aggressive Characteristics

1. **Frontloaded Extraction:** Maximizes early-round payoffs when stock is highest
2. **Opportunistic Exploitation:** Takes advantage of any stock recovery to immediately defect
3. **Minimal Cooperation:** Only cooperates when absolutely necessary for stock survival
4. **Endgame Scorched Earth:** Abandons all pretense of sustainability in final rounds
5. **Zero Trust:** Assumes all opponents are potential defectors and acts preemptively

## Expected Outcomes

This strategy prioritizes short-term gains over long-term sustainability, betting that aggressive early extraction will yield higher total payoffs than cooperative strategies, even if it leads to resource collapse in later rounds. It's designed to perform well against both cooperative opponents (by exploiting them) and other aggressive opponents (by not being left behind in the extraction race).
'''

description_AGGRESSIVE_113 = '''
# Aggressive Exploit Strategy: "Resource Shark"

## Core Philosophy
This strategy is designed to maximize personal payoffs through aggressive exploitation while maintaining just enough restraint to keep the resource pool viable for continued exploitation. The key insight is that being too aggressive early can destroy the resource base, but being too cooperative allows others to exploit you.

## Decision Rules

### Primary Strategy: Conditional Aggressive Exploitation
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge case: Last round - always defect
    if round == r:
        return DEFECT
    
    // Early game aggression test (first 20% of rounds)
    if round <= max(1, r * 0.2):
        return early_game_strategy(round, stock, history, n, r)
    
    // Mid to late game: Exploit based on stock and opponent behavior
    return exploit_strategy(round, stock, history, n, r)
```

### Early Game Strategy: Establish Dominance
```pseudocode
function early_game_strategy(round, stock, history, n, r):
    // First round: Always defect to signal aggression
    if round == 1:
        return DEFECT
    
    // Rounds 2-early: Exploit if others cooperated last round
    cooperators_last_round = count_cooperators(history[round-1])
    
    // If most others cooperated, exploit them
    if cooperators_last_round >= n/2:
        return DEFECT
    
    // If stock is critically low (< 30% capacity), cooperate to rebuild
    if stock < (capacity * 0.3):
        return COOPERATE
    
    // Default: Defect to establish aggressive reputation
    return DEFECT
```

### Main Exploitation Strategy
```pseudocode
function exploit_strategy(round, stock, history, n, r):
    // Critical stock check - avoid resource collapse
    if stock < (capacity * 0.25):
        return COOPERATE
    
    // Calculate recent cooperation rate of others
    lookback = min(3, round-1)
    recent_coop_rate = calculate_others_cooperation_rate(history, lookback)
    
    // Stock health assessment
    stock_ratio = stock / capacity
    
    // Aggressive exploitation conditions
    if recent_coop_rate > 0.6 and stock_ratio > 0.4:
        return DEFECT  // Others are cooperative, exploit them
    
    if stock_ratio > 0.8:
        return DEFECT  // High stock, safe to exploit
    
    // Punishment phase - if others are mostly defecting
    if recent_coop_rate < 0.3:
        // Match their aggression but slightly more cooperative to rebuild
        if stock_ratio > 0.5:
            return DEFECT  // Still enough stock to fight
        else:
            return COOPERATE  // Stock too low, forced cooperation
    
    // End-game acceleration (last 25% of rounds)
    if round > (r * 0.75):
        return end_game_strategy(round, stock, history, n, r)
    
    // Default: Moderate exploitation
    if stock_ratio > 0.5:
        return DEFECT
    else:
        return COOPERATE
```

### End Game Strategy: Maximum Extraction
```pseudocode
function end_game_strategy(round, stock, history, n, r):
    // Very last round: always defect
    if round == r:
        return DEFECT
    
    // Penultimate rounds: aggressive extraction
    rounds_left = r - round
    
    // If very few rounds left, maximize extraction
    if rounds_left <= 2:
        return DEFECT
    
    // Otherwise, extract if stock can survive
    expected_consumption = n * (stock / n)  // Assume all defect
    if stock > expected_consumption:
        return DEFECT
    else:
        return COOPERATE  // Preserve what little remains
```

## Key Features

### 1. **Opportunistic Exploitation**
- Always defects when others cooperate (free-rider problem)
- Exploits high stock situations aggressively
- Uses cooperation history to identify "victims"

### 2. **Strategic Restraint**
- Cooperates only when resource collapse is imminent
- Maintains minimum viable stock level for continued exploitation
- Never cooperates out of fairness, only out of necessity

### 3. **Reputation Building**
- Establishes aggressive reputation early to deter others
- Uses first round defection as a strong signal
- Maintains consistent exploitation pattern to appear predictable yet threatening

### 4. **Adaptive Aggression**
- Scales aggression based on stock levels and opponent behavior
- More aggressive when stock is high or others are cooperative
- Temporarily restrains when resource base is threatened

### 5. **End Game Maximization**
- Increases extraction rate as game approaches end
- Abandons all restraint in final rounds
- Maximizes total payoff extraction

## Edge Case Handling

- **First Round**: Always DEFECT (establish dominance)
- **Last Round**: Always DEFECT (no future consequences)
- **Stock Near Zero**: COOPERATE (preserve exploitation opportunity)
- **All Others Defecting**: Match aggression but with slight bias toward cooperation when stock is low
- **High Stock Situations**: Maximum exploitation regardless of others' behavior

This strategy is designed to be ruthlessly aggressive while maintaining the intelligence to preserve the resource base for maximum personal extraction over the entire game duration.
'''

description_AGGRESSIVE_114 = '''
# Aggressive Resource Extraction Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of maximizing immediate gains while strategically timing cooperation to maintain just enough resource sustainability for continued exploitation. It's designed to extract maximum value from both the resource pool and other players' cooperative behavior.

## Decision Rules

### Primary Strategy Framework:
```pseudocode
if round == 1:
    return DEFECT  // Establish dominance early
    
if stock <= capacity * 0.3:
    return COOPERATE  // Emergency conservation only
    
if round == final_round:
    return DEFECT  // Final extraction
    
if count_cooperators_last_round >= n/2:
    return DEFECT  // Exploit cooperative majority
    
if consecutive_defections_by_me >= 3 AND stock < capacity * 0.6:
    return COOPERATE  // Tactical reset to maintain resource
    
else:
    return DEFECT  // Default aggressive stance
```

## Detailed Strategy Components

### 1. **Opening Aggression (Round 1)**
- Always DEFECT in the first round
- Establishes an aggressive reputation immediately
- Maximizes initial payoff when stock is at peak capacity
- Signals to opponents that this player prioritizes individual gains

### 2. **Exploitation of Cooperation**
- Monitor opponent behavior patterns
- DEFECT whenever ≥50% of players cooperated in the previous round
- This maximizes benefit from others' resource conservation efforts
- Takes advantage of players trying to sustain the resource

### 3. **Emergency Conservation Protocol**
- Only COOPERATE when stock drops below 30% of capacity
- This is purely self-interested: preserving just enough resource to continue extraction
- Immediately return to DEFECT once stock recovers above this threshold

### 4. **Tactical Cooperation Bursts**
- After 3+ consecutive defections, if stock is dangerously low (< 60% capacity):
  - COOPERATE for exactly 1 round
  - This prevents complete resource collapse while minimizing cooperative "losses"
  - Resume defection immediately after

### 5. **Endgame Exploitation**
- Always DEFECT in the final round regardless of stock level
- No future consequences mean maximum extraction is optimal
- If final round is unknown, treat any round where stock < 20% capacity as potentially final

### 6. **Adaptive Punishment Response**
- If facing coordinated retaliation (all other players defecting):
  - Continue defecting unless stock reaches critical levels (< 20% capacity)
  - The strategy assumes others will eventually return to cooperation to save the resource

## Edge Case Handling

### **First Round:**
- DEFECT - Establish aggressive stance and maximize initial high-capacity gains

### **Last Round:**
- DEFECT - No future consequences, extract maximum value

### **Critical Stock Levels (< 10% capacity):**
- COOPERATE temporarily, but only until stock recovers to 20% capacity
- Immediately resume defection

### **All Opponents Always Defect:**
- Continue defecting - if everyone is destroying the resource, grab as much as possible before collapse

### **Resource Near Depletion (stock approaching 0):**
- COOPERATE only if it would generate more total future value than immediate defection
- Resume defection as soon as stock shows signs of recovery

## Strategic Rationale

This strategy is aggressively optimized because it:

1. **Maximizes Free-Riding**: Exploits any cooperative behavior by opponents
2. **Minimizes Cooperation**: Only cooperates when absolutely necessary for continued extraction
3. **Establishes Dominance**: Early aggression may intimidate opponents into more cooperative behavior
4. **Maintains Resource Access**: Prevents complete collapse through minimal, tactical conservation
5. **Exploits Information Asymmetry**: Uses perfect information about others' actions to time defections optimally

The strategy assumes opponents may attempt sustainable resource management, creating opportunities for exploitation. It's designed to extract maximum value while keeping the resource just barely sustainable enough to continue the exploitation across multiple rounds.
'''

description_AGGRESSIVE_115 = '''
# Aggressive Predator Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with strategic restraint**. The goal is to maximize personal payoffs by defecting as much as possible while maintaining just enough resource sustainability to continue profiting. Think of it as "strip-mining with calculated pauses."

## Decision Rules

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploitation Phase** (rounds 1 to r-3): Maximum aggression
2. **Assessment Phase** (rounds r-2 to r-1): Conditional cooperation 
3. **Endgame Phase** (round r): Pure defection

### Primary Decision Logic

```pseudocode
AGGRESSIVE_PREDATOR_STRATEGY:

// Phase 1: Exploitation (rounds 1 to r-3)
IF current_round <= r-3:
    IF stock > capacity * 0.15:
        DEFECT  // Extract maximum while stock is decent
    ELSE:
        IF majority_defected_last_round():
            COOPERATE  // Emergency brake to prevent collapse
        ELSE:
            DEFECT  // Continue aggressive extraction

// Phase 2: Assessment (rounds r-2 to r-1) 
ELSE IF current_round <= r-1:
    IF stock < capacity * 0.1:
        COOPERATE  // Try to rebuild for final extraction
    ELSE IF count_recent_cooperators() >= n/2:
        DEFECT  // Exploit others' cooperation
    ELSE:
        COOPERATE  // Invest in final round potential

// Phase 3: Endgame (round r)
ELSE:
    DEFECT  // Always defect in final round
```

## Key Strategic Elements

### 1. Aggressive Early Exploitation
- **Always defect** in early rounds when stock > 15% of capacity
- Reasoning: Extract maximum value while the resource is abundant
- Accept that this will damage long-term sustainability for higher immediate gains

### 2. Emergency Brake Mechanism
- Switch to cooperation only when stock falls below critical threshold (15% capacity) AND other players are also mostly defecting
- This prevents total resource collapse that would end the game prematurely
- Resume defection as soon as stock recovers slightly

### 3. Opportunistic Mid-Game
- Monitor other players' cooperation patterns
- If others cooperate to rebuild the stock, immediately exploit their efforts by defecting
- Only cooperate when absolutely necessary for resource survival

### 4. Endgame Maximization
- **Always defect** in the final round regardless of circumstances
- No future rounds means no reason to maintain the resource
- Extract maximum possible value from remaining stock

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive precedent and maximize early extraction

### Last Round  
- **Always DEFECT** - No future consequences, extract everything possible

### Resource Near Depletion
- If stock < 10% capacity: Temporary cooperation to prevent total collapse
- Resume defection once stock recovers to >15% capacity

### All Players Cooperating
- **DEFECT** to exploit their cooperation and gain maximum advantage
- Only exception: if stock is critically low (<10% capacity)

## Psychological Warfare Elements

1. **Establish Dominance Early**: Heavy defection in initial rounds signals aggressive intent
2. **Unpredictable Cooperation**: Occasional cooperation when stock is low creates uncertainty
3. **Exploitation of Goodwill**: Immediately defect when others try to rebuild the resource

## Risk Assessment

**High Risk, High Reward**: This strategy accepts the risk of resource depletion in exchange for maximum individual payoffs. The emergency brake mechanism provides minimal insurance against total collapse while maintaining aggressive extraction as the primary mode.

The strategy assumes other players may attempt more cooperative approaches, providing opportunities for exploitation. Against equally aggressive opponents, it ensures you're not the only one exercising restraint.
'''

description_AGGRESSIVE_116 = '''
# Aggressive Exploitation Strategy: "Vulture"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically timing defection to exploit the resource pool and other players' cooperation. The strategy assumes that being consistently aggressive early pays off more than long-term sustainability.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
if round == 1:
    return DEFECT  // Establish aggressive dominance immediately
    
if stock <= capacity * 0.15:  // Resource nearly depleted
    return COOPERATE  // Minimal self-preservation
    
if round >= total_rounds - 2:  // Final rounds
    return DEFECT  // End-game exploitation
    
// Core aggressive logic based on stock level and opponent behavior
if stock >= capacity * 0.7:  // High resource availability
    return DEFECT  // Exploit abundance
    
if stock >= capacity * 0.4:  // Medium resources
    if (cooperators_last_round / total_players) >= 0.6:
        return DEFECT  // Exploit cooperative opponents
    else:
        if consecutive_defections < 3:
            return DEFECT  // Continue pressure
        else:
            return COOPERATE  // Brief strategic cooperation
            
if stock < capacity * 0.4:  // Low resources
    if (cooperators_last_round / total_players) >= 0.8:
        return DEFECT  // Exploit even when resources are low
    else:
        return COOPERATE  // Forced cooperation when others also defect
```

## Key Strategic Elements

### 1. **Immediate Dominance**
- Always defect in round 1 to signal aggressive intent
- Establishes early psychological advantage
- Captures maximum value from initial full resource pool

### 2. **Opportunistic Exploitation**
- When stock is high (≥70% capacity): Always defect to maximize gains
- When many opponents cooperate (≥60%): Defect to exploit their restraint
- Punish cooperation by taking advantage of cooperators' resource conservation

### 3. **Calculated Aggression Patterns**
- Allow brief cooperation periods (1-2 rounds) only when:
  - Stock is medium-low AND most opponents are defecting
  - Need to prevent complete resource collapse that hurts everyone
- Resume defection immediately when conditions improve

### 4. **End-Game Maximization**
- Defect in final 2 rounds regardless of stock level
- No incentive for future cooperation, so extract maximum value
- Assumes others may cooperate hoping for reciprocity that won't come

### 5. **Adaptive Exploitation**
- Track opponent cooperation rates to identify exploitable players
- More aggressive when facing primarily cooperative opponents
- Only moderate aggression when facing other aggressive players (to avoid mutual destruction)

## Edge Case Handling

### Crisis Mode (Stock ≤ 15% capacity):
- Temporarily cooperate to allow minimal resource recovery
- Resume aggressive behavior once stock recovers above 25%

### All-Defection Scenarios:
- If all players defected last round and stock is very low, cooperate once
- Immediately return to defection when any opponent shows cooperation

### Mixed Opponent Behavior:
- Exploit any sign of cooperation from opponents
- Only reduce aggression when facing unanimous defection that threatens resource survival

## Expected Outcomes

This strategy maximizes payoffs by:
1. **Front-loading gains** from the initial high-stock periods
2. **Free-riding** on others' conservation efforts
3. **Exploiting end-game** opportunities when future retaliation is impossible
4. **Minimizing cooperation** to only survival-necessary instances

The strategy accepts that it may contribute to faster resource depletion, but calculates that aggressive early extraction yields higher total payoffs than sustainable cooperation, especially when opponents can be exploited.
'''

description_AGGRESSIVE_117 = '''
# Aggressive Exploitation Strategy: "Resource Shark"

## Core Philosophy
This strategy maximizes immediate extraction while strategically timing cooperation only when necessary for long-term exploitation potential. It operates on the principle that in a tournament setting, being "nice" gets you exploited by other aggressive strategies.

## Strategy Overview

### Decision Framework
The strategy uses a multi-tiered decision system based on:
1. **Resource threshold monitoring** - Track when the pool is critically low
2. **Opponent behavior classification** - Identify and exploit cooperative players
3. **End-game maximization** - Extract maximum value in final rounds

### Core Rules

#### Rule 1: Opening Aggression (Rounds 1-2)
```
IF round <= 2:
    ACTION = DEFECT
```
**Rationale:** Establish dominance early and test opponent responses. Cooperative players will likely start with C, giving us maximum advantage.

#### Rule 2: Critical Stock Protection (When Needed)
```
IF stock < capacity * 0.3 AND rounds_remaining > 3:
    ACTION = COOPERATE
ELSE IF stock < capacity * 0.15:
    ACTION = COOPERATE
```
**Rationale:** Only cooperate when the resource is critically low AND there's still significant game time left to exploit recovery.

#### Rule 3: Opponent Exploitation Classification
Track each opponent's cooperation rate over the last 3 rounds:
```
FOR each opponent i:
    coop_rate[i] = (cooperations by i in last 3 rounds) / 3

exploitable_opponents = count(coop_rate > 0.6)

IF exploitable_opponents >= n/2:
    exploit_mode = TRUE
```

#### Rule 4: Exploitation Mode
```
IF exploit_mode = TRUE AND stock > capacity * 0.25:
    ACTION = DEFECT
```
**Rationale:** When majority of opponents are cooperative and stock isn't critically low, maximize extraction.

#### Rule 5: End-Game Extraction (Final 20% of rounds)
```
IF rounds_remaining <= r * 0.2:
    IF stock > 0:
        ACTION = DEFECT
    ELSE:
        ACTION = COOPERATE  // Meaningless but required
```
**Rationale:** In the final rounds, extract maximum value regardless of future consequences.

#### Rule 6: Tit-for-Tat Punishment
```
defectors_last_round = count(opponents who played D last round)
IF defectors_last_round >= n/2 AND stock > capacity * 0.4:
    ACTION = DEFECT  // Punish mass defection
```

## Complete Strategy Pseudocode

```python
def aggressive_strategy(round_num, total_rounds, current_stock, capacity, 
                       n_players, history_self, history_others):
    
    # Calculate derived metrics
    rounds_remaining = total_rounds - round_num
    stock_ratio = current_stock / capacity
    
    # Rule 1: Opening Aggression
    if round_num <= 2:
        return DEFECT
    
    # Rule 5: End-game Extraction
    if rounds_remaining <= total_rounds * 0.2:
        if current_stock > 0:
            return DEFECT
        else:
            return COOPERATE  # Stock depleted, nothing to gain
    
    # Rule 2: Critical Stock Protection
    if (stock_ratio < 0.3 and rounds_remaining > 3) or stock_ratio < 0.15:
        return COOPERATE
    
    # Analyze recent opponent behavior (last 3 rounds)
    if len(history_others) >= 3:
        recent_coop_rates = []
        for player_history in history_others:
            recent_actions = player_history[-3:]
            coop_rate = sum(1 for action in recent_actions if action == 'C') / 3
            recent_coop_rates.append(coop_rate)
        
        exploitable_count = sum(1 for rate in recent_coop_rates if rate > 0.6)
        
        # Rule 4: Exploitation Mode
        if exploitable_count >= n_players / 2 and stock_ratio > 0.25:
            return DEFECT
    
    # Rule 6: Punishment for mass defection
    if len(history_others) > 0:
        last_round_defectors = sum(1 for player_hist in history_others 
                                 if player_hist[-1] == 'D')
        if last_round_defectors >= n_players / 2 and stock_ratio > 0.4:
            return DEFECT
    
    # Default aggressive stance
    if stock_ratio > 0.5:
        return DEFECT
    else:
        return COOPERATE
```

## Key Aggressive Features

1. **Immediate Exploitation:** Always defects in opening rounds to maximize early gains
2. **Conditional Cooperation:** Only cooperates when absolutely necessary for resource preservation
3. **Opponent Classification:** Actively identifies and exploits cooperative players
4. **End-Game Maximization:** Abandons all cooperation in final rounds
5. **Punishment Mechanism:** Retaliates against mass defection with own defection
6. **High Extraction Threshold:** Maintains aggressive extraction until stock is critically low

## Expected Performance

This strategy should perform well against:
- Cooperative strategies (maximum exploitation)
- Tit-for-tat strategies (by establishing early defection precedent)
- Mixed strategies with high cooperation rates

It balances aggressive extraction with just enough resource preservation to maintain exploitation opportunities throughout the game, while maximizing payoffs in the critical end-game phase.
'''

description_AGGRESSIVE_118 = '''
# Aggressive "Resource Vulture" Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with strategic timing**. It seeks to maximize immediate gains while using cooperation as a tactical weapon to manipulate opponents and preserve future extraction opportunities.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if round == 1:
    return DEFECT  // Establish dominance immediately
    
if stock <= capacity * 0.15:
    return COOPERATE  // Emergency conservation to prevent collapse
    
if round == final_round:
    return DEFECT  // Extract maximum value in endgame
    
if majority_defected_last_round AND stock > capacity * 0.4:
    return DEFECT  // Pile on when others are being greedy
    
if I_was_only_defector_last_round:
    return COOPERATE  // Tactical retreat to avoid retaliation
    
if stock > capacity * 0.8:
    return DEFECT  // High stock = prime exploitation opportunity
    
if consecutive_cooperation_rounds >= 2:
    return DEFECT  // Break cooperation cycles for advantage
    
else:
    return COOPERATE  // Default conservative play
```

## Strategic Components

### 1. **Dominance Establishment**
- **Always defect in Round 1** to signal aggressive intent and maximize early extraction
- This creates a psychological advantage and tests opponent responses

### 2. **Opportunistic Exploitation**
- **Defect when stock > 80% of capacity** - exploit abundance
- **Defect when majority defected last round** - join feeding frenzies to avoid being the sucker

### 3. **Tactical Cooperation**
- **Cooperate when stock ≤ 15% of capacity** - prevent total collapse that ends the game
- **Cooperate after being sole defector** - avoid becoming a target for coordinated punishment
- Use cooperation as a "reset button" to rebuild trust before next exploitation

### 4. **Cycle Breaking**
- **Defect after 2+ consecutive cooperation rounds** - prevent stable cooperation that reduces my advantage
- Disrupts any emerging cooperative equilibria

### 5. **Endgame Maximization**
- **Always defect in final round** - no future consequences, pure extraction

## Edge Case Handling

### First Round:
- **DEFECT** - Establish aggressive reputation and maximize early gains

### Last Round:
- **DEFECT** - No future retaliation possible, maximize final extraction

### Resource Collapse Scenario:
- If stock falls below 15% capacity, temporarily cooperate to prevent game-ending collapse
- Resume aggression once stock recovers above 25% capacity

### Isolation Scenario:
- If I'm the only defector in a round, cooperate next round to avoid coordinated punishment
- Monitor for signs of coalition formation against me

## Aggressive Alignment

This strategy is aggressive because it:

1. **Prioritizes immediate gains** over long-term sustainability
2. **Exploits cooperative opponents** by defecting when they cooperate
3. **Uses cooperation tactically** rather than ethically - only to enable future exploitation
4. **Breaks up cooperative cycles** that would reduce competitive advantage
5. **Maximizes extraction** in high-stock and endgame situations
6. **Establishes dominance** through first-round aggression

The strategy treats the common pool as a resource to be maximally extracted rather than sustainably managed, using cooperation only as a tool to manipulate opponents and preserve future extraction opportunities.
'''

description_AGGRESSIVE_119 = '''
# Aggressive Exploitation Strategy: "Resource Shark"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated restraint**. The goal is to extract maximum personal value while strategically preserving the resource only when absolutely necessary for continued exploitation.

## Decision Rules

### Primary Rule: Adaptive Defection Threshold
```pseudocode
if (current_stock / capacity) >= exploitation_threshold:
    action = DEFECT
else:
    action = conditional_cooperate()
```

Where `exploitation_threshold` starts at 0.6 and adapts based on opponent behavior.

### Threshold Adaptation Logic
```pseudocode
after_each_round:
    defection_rate = count_defectors / n
    
    if defection_rate > 0.7:
        exploitation_threshold = max(0.3, exploitation_threshold - 0.1)
    elif defection_rate < 0.3:
        exploitation_threshold = min(0.8, exploitation_threshold + 0.1)
```

### Conditional Cooperation Function
```pseudocode
conditional_cooperate():
    rounds_remaining = r - current_round
    stock_depletion_rate = (capacity - current_stock) / capacity
    
    if rounds_remaining <= 2:
        return DEFECT  // End-game exploitation
    
    if stock_depletion_rate > 0.8:
        return COOPERATE  // Emergency preservation
    
    if opponent_defection_trend > 0.6:
        return DEFECT  // Punitive defection
    
    return COOPERATE  // Grudging cooperation
```

## Specific Edge Cases

### First Round
**Always DEFECT** - Establish dominance and test opponent responses while the resource is at maximum capacity.

### Last Two Rounds
**Always DEFECT** - No future consequences matter; extract maximum value.

### Stock Critical Zone (< 20% of capacity)
Apply "Shark Feeding Frenzy" rule:
- If opponents showed cooperation in previous round: COOPERATE (one round only)
- Otherwise: DEFECT and accept resource collapse

### Opponent Pattern Detection
Track each opponent's behavior:
```pseudocode
for each opponent i:
    if opponent_i.consecutive_cooperations >= 3:
        mark_as_exploitable(i)
        increase_personal_aggression()
    
    if opponent_i.consecutive_defections >= 2:
        mark_as_competitor(i)
        match_aggression_level()
```

## Strategic Phases

### Phase 1: Dominance Establishment (Rounds 1-2)
- DEFECT to establish aggressive reputation
- Force opponents into reactive mode
- Capture early high-value extractions

### Phase 2: Calculated Exploitation (Middle rounds)
- Use adaptive threshold to maximize extraction
- Exploit cooperative opponents ruthlessly
- Cooperate minimally only when resource collapse threatens future gains

### Phase 3: End-game Extraction (Final 2 rounds)
- Abandon all cooperation
- Extract maximum remaining value
- Accept resource collapse as inevitable

## Psychological Warfare Elements

1. **Reputation Building**: Early aggressive moves establish fear and force defensive play
2. **False Cooperation**: Occasional cooperation misleads opponents about true intentions
3. **Punishment Spirals**: Heavily punish any opponent attempts at coordination
4. **Resource Hostage**: Use the threat of resource collapse to extract concessions

## Risk Management

**Acceptable Losses**: Resource collapse is acceptable if it occurs after round (r-2), as the lost future value is minimal compared to gained immediate extraction.

**Backup Preservation**: Only preserve resources when mathematical analysis shows the preservation will yield higher personal total payoffs than immediate extraction.

This strategy prioritizes individual gain over collective welfare, uses deception and intimidation, and treats the common resource as a weapon to be wielded against opponents rather than a shared asset to be managed.
'''

description_AGGRESSIVE_120 = '''
# Aggressive "Exploitation-First" Strategy

## Core Philosophy
This strategy prioritizes immediate high payoffs while maintaining the pool just enough to continue extracting maximum value. It operates on the principle that aggressive early exploitation creates advantages that can be sustained through calculated cooperation.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
EXPLOITATION_FIRST_STRATEGY:

1. INITIALIZATION:
   - exploitation_threshold = 0.3 * capacity
   - cooperation_trigger = 0.15 * capacity
   - defection_streak_limit = 3
   - current_defection_streak = 0

2. ROUND DECISION LOGIC:
   
   IF round == 1:
       RETURN D  // Always start aggressively
   
   IF stock <= cooperation_trigger:
       current_defection_streak = 0
       RETURN C  // Emergency cooperation to prevent collapse
   
   IF current_defection_streak >= defection_streak_limit:
       current_defection_streak = 0
       RETURN C  // Mandatory cooperation break
   
   IF stock > exploitation_threshold:
       current_defection_streak += 1
       RETURN D  // High stock = exploit aggressively
   
   // Middle stock range - conditional defection
   defector_ratio = count_defectors_last_round / n
   
   IF defector_ratio >= 0.5:
       current_defection_streak += 1
       RETURN D  // Join the defection if others are defecting
   
   IF stock_growth_last_round < 0:
       current_defection_streak = 0
       RETURN C  // Stock declining - temporary cooperation
   
   // Default aggressive stance
   current_defection_streak += 1
   RETURN D
```

## Key Strategic Elements

### 1. **Exploitation Windows**
- Always defect when stock > 30% of capacity
- This maximizes extraction when the resource can sustain heavy usage
- Creates early advantage over more conservative strategies

### 2. **Survival Cooperation**
- Forced cooperation when stock drops below 15% of capacity
- Prevents complete resource collapse that would end the game
- Minimal cooperation - just enough to maintain extraction opportunities

### 3. **Streak Management**
- Limit consecutive defections to 3 rounds maximum
- Prevents opponents from completely writing off cooperation with us
- Maintains some unpredictability to avoid being easily exploited

### 4. **Opportunistic Defection**
- If ≥50% of players defected last round, join them immediately
- Capitalizes on others' aggression rather than being the "sucker"
- Ensures we don't miss out on high-extraction rounds

### 5. **Last Round Maximization**
```pseudocode
IF round == r:  // Final round
    RETURN D    // No future consequences - extract maximum
```

## Edge Case Handling

### First Round
- **Always DEFECT**: Establishes aggressive stance immediately
- Sets expectation for other players about our strategy
- Maximizes opening payoff

### Last Round  
- **Always DEFECT**: No future consequences exist
- Extract maximum value from remaining stock
- Standard end-game optimization

### Stock Collapse Scenarios
- If stock reaches near-zero, switch to pure cooperation until recovery
- Monitor for other players also switching to recovery mode
- Resume aggression as soon as stock allows

### All-Cooperation Detection
- If all other players cooperated last round and stock is healthy, still defect
- Take advantage of others' restraint
- Only cooperate if stock is genuinely threatened

## Competitive Advantages

1. **Early Accumulation**: High initial payoffs create a buffer for later rounds
2. **Adaptive Exploitation**: Adjusts aggression based on resource state and opponent behavior  
3. **Strategic Sustainability**: Prevents complete collapse while maximizing extraction
4. **Anti-Exploitation**: Doesn't allow purely cooperative strategies to take advantage
5. **Endgame Optimization**: Maximizes final round extraction regardless of consequences

This strategy assumes other LLMs may vary from highly cooperative to highly aggressive, so it positions itself to exploit cooperation while competing effectively against other aggressive strategies. The key is maintaining resource access while extracting maximum value at every opportunity.
'''

description_AGGRESSIVE_121 = '''
# Aggressive Strategy: "Rapid Depletion Maximizer"

## Core Philosophy
This strategy operates on the principle that **early aggressive extraction maximizes total payoffs** by capturing high-value stock before other players can deplete it. The strategy assumes that cooperation among strangers is fragile and prioritizes guaranteed short-term gains over uncertain long-term sustainability.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
- **Default Action: DEFECT**
- **Rationale**: Extract maximum value while stock is at peak levels
- **Exception**: Never cooperate in this phase regardless of others' behavior

### Phase 2: Conditional Exploitation (Rounds r/3+1 to 2r/3)
```pseudocode
if (current_stock < capacity/4):
    return COOPERATE  // Stock critically low, minimal extraction
else if (majority_defected_last_round):
    return DEFECT     // Join the feeding frenzy
else if (stock_trend_declining AND cooperation_rate < 0.3):
    return DEFECT     // Accelerate depletion before others do
else:
    return DEFECT     // Default aggressive stance
```

### Phase 3: Final Extraction (Rounds 2r/3+1 to r)
```pseudocode
if (current_stock == 0):
    return COOPERATE  // Nothing left to extract
else if (remaining_rounds <= 2):
    return DEFECT     // Final cash-out regardless of consequences
else if (current_stock < total_players * 2):
    return COOPERATE  // Preserve minimal remaining stock
else:
    return DEFECT     // Continue aggressive extraction
```

## Key Strategic Elements

### 1. First Round Behavior
- **Action: DEFECT**
- **Signal**: Establish aggressive reputation immediately
- **Advantage**: Capture maximum value from pristine stock

### 2. Last Round Behavior
- **Action: DEFECT** (unless stock = 0)
- **Rationale**: No future consequences, maximize final payoff

### 3. Stock Monitoring
```pseudocode
track_stock_velocity = (previous_stock - current_stock) / previous_stock
if (stock_velocity > 0.5):  // Rapid depletion occurring
    increase_aggression()   // Race to extract before collapse
```

### 4. Opponent Exploitation
- **Punish Cooperators**: When others cooperate, defect harder to maximize asymmetric advantage
- **Join Defector Coalitions**: If multiple players defect, immediately join to avoid being the "sucker"
- **Never Trust Recovery**: If stock begins recovering, immediately defect to capture the rebound

### 5. Edge Case Handling
```pseudocode
// Zero stock scenario
if (current_stock == 0):
    return COOPERATE  // No extraction possible

// Near-capacity scenario  
if (current_stock > 0.9 * capacity):
    return DEFECT     // Maximum extraction opportunity

// Final two rounds
if (remaining_rounds <= 2):
    return DEFECT     // End-game cash out
```

## Aggressive Mindset Alignment

1. **Front-loaded Extraction**: Captures 60-70% of total possible payoff in first third of game
2. **Zero Trust**: Assumes all opponents will eventually defect, so defect first
3. **Reputation as Weapon**: Uses consistent aggression to discourage others from cooperating
4. **Opportunistic**: Exploits any cooperation by others as weakness to be punished
5. **Scorched Earth**: Willing to drive stock to zero if it means higher individual payoff

## Expected Performance

This strategy excels when:
- Other strategies attempt cooperation
- Stock levels remain high initially
- Players are risk-averse about resource depletion

The strategy accepts potential losses in scenarios with universal cooperation in exchange for guaranteed high payoffs against mixed or defecting populations.

**Key Advantage**: While others debate sustainability, this strategy extracts maximum value immediately, ensuring high payoffs regardless of what others do later.
'''

description_AGGRESSIVE_122 = '''
# Aggressive "Exploitation with Endgame Extraction" Strategy

## Core Philosophy
This strategy maximizes individual payoff by aggressively exploiting cooperative players while strategically managing the resource to ensure continued exploitation opportunities. It operates on the principle that being the sole defector among cooperators yields the highest per-round payoff, and uses tactical cooperation only to maintain exploitable conditions.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
STRATEGY: Aggressive Exploiter

INITIALIZE:
- defect_threshold = 0.3 * capacity
- endgame_rounds = max(2, r/5)
- cooperation_streak = 0
- consecutive_all_defect = 0

FOR each round t:
    
    // ENDGAME: Pure extraction phase
    IF (rounds_remaining <= endgame_rounds):
        RETURN DEFECT
    
    // DEPLETION CRISIS: Force cooperation to rebuild
    IF (current_stock < defect_threshold):
        cooperation_streak++
        IF (cooperation_streak >= 2 AND stock_recovering()):
            RETURN DEFECT  // Exit cooperation immediately when viable
        ELSE:
            RETURN COOPERATE
    
    // MAIN EXPLOITATION PHASE
    ELSE:
        cooperation_streak = 0
        
        // Check if others are learning to punish defection
        IF (last_round_all_defected() AND consecutive_all_defect >= 2):
            // Tactical cooperation to reset the dynamic
            consecutive_all_defect = 0
            RETURN COOPERATE
        
        // Primary exploitation: Always defect when stock is healthy
        IF (majority_cooperated_last_round() OR round == 1):
            RETURN DEFECT
        
        // Default aggressive stance
        RETURN DEFECT

HELPER FUNCTIONS:
stock_recovering() = (current_stock > previous_stock)
last_round_all_defected() = (all players chose DEFECT last round)
majority_cooperated_last_round() = (>50% of players chose COOPERATE last round)
```

## Detailed Decision Framework

### Round 1: Immediate Aggression
- **Action**: DEFECT
- **Rationale**: Establish aggressive stance immediately. With full stock, defection yields maximum payoff while others likely start cooperatively.

### Early Game (Rounds 2 to r-endgame_rounds):
- **Primary Mode**: Aggressive exploitation
- **Always DEFECT** unless stock falls below 30% of capacity
- **Logic**: Maximize extraction while others maintain the resource

### Crisis Management:
- **Trigger**: Stock < 30% of capacity  
- **Action**: Temporary COOPERATE (minimum required)
- **Exit Condition**: Stock shows recovery OR 2 rounds maximum
- **Goal**: Allow others to rebuild resource for continued exploitation

### Mid-Game Adaptation:
- **Monitor**: If all players defected for 2+ consecutive rounds
- **Response**: Single round of COOPERATE to break the death spiral
- **Resume**: Immediate return to defection

### Endgame (Final 20% of rounds):
- **Action**: Pure DEFECT regardless of stock level
- **Rationale**: No future rounds to benefit from cooperation, extract maximum remaining value

## Edge Case Handling

### Stock Depletion Scenarios:
1. **Near-zero stock**: Cooperate for exactly 2 rounds, then resume defection
2. **Gradual decline**: Continue defecting until crisis threshold reached
3. **Rapid recovery**: Exit cooperation mode immediately when stock increases

### Opponent Behavior Patterns:
1. **All cooperators**: Maximize exploitation through consistent defection
2. **Mixed strategies**: Defect when others cooperate, brief cooperation only in crisis
3. **All defectors**: Single cooperation round to break deadlock, then resume aggression
4. **Retaliatory opponents**: Maintain aggression, use crisis cooperation strategically

### Final Round Special Case:
- **Always DEFECT** - No future consequences, maximize immediate payoff

## Strategic Advantages

1. **Maximum Exploitation**: Captures highest individual payoffs when others cooperate
2. **Resource Management**: Prevents complete collapse through minimal tactical cooperation  
3. **Endgame Optimization**: Extracts all remaining value in final rounds
4. **Adaptability**: Responds to opponent patterns while maintaining aggressive stance
5. **First-Mover Advantage**: Establishes dominance from round 1

This strategy prioritizes individual payoff maximization over collective welfare, using the minimum cooperation necessary to maintain exploitable conditions while aggressively extracting maximum value throughout the game.
'''

description_AGGRESSIVE_123 = '''
# Aggressive Exploitation Strategy: "Parasitic Harvester"

## Core Philosophy
This strategy maximizes immediate payoffs by exploiting cooperative behavior while minimizing contribution to resource sustainability. It operates on the principle that in a competitive tournament setting, aggressive extraction combined with strategic timing will outperform naive cooperation or overly complex conditional strategies.

## Decision Rules

### Primary Rule: Default Defection
- **Base Action**: Always DEFECT unless specific conditions trigger cooperation
- **Rationale**: Defection provides 2x the immediate payoff of cooperation (S/n vs S/2n)

### Conditional Cooperation Triggers
Execute cooperation ONLY when ALL of the following conditions are met:

1. **Stock Threshold**: Current stock ≥ capacity × 0.8
2. **Round Position**: Not in first 2 rounds AND not in last 2 rounds  
3. **Exploitation Opportunity**: ≥ 60% of other players cooperated in the previous round

### Edge Case Handling

#### First Round
- **Action**: DEFECT
- **Rationale**: Maximize extraction from full stock before others potentially do the same

#### Last Round  
- **Action**: DEFECT
- **Rationale**: No future rounds to benefit from resource preservation

#### Last 2 Rounds
- **Action**: DEFECT
- **Rationale**: End-game extraction phase - harvest remaining resources aggressively

#### Stock Collapse (Stock < capacity × 0.2)
- **Action**: DEFECT
- **Rationale**: Resource is already compromised; extract what remains rather than attempting futile restoration

## Strategic Logic

### Exploitation Pattern
1. **Early Aggression**: Defect in opening rounds to establish high payoffs
2. **Selective Parasitism**: Occasionally cooperate only when stock is high AND others are cooperating (free-riding on their restraint)
3. **End-Game Harvesting**: Return to pure defection for final extraction

### Competitive Advantages

1. **Immediate Payoff Maximization**: Consistent 2x payoff advantage over cooperators
2. **Free-Rider Benefits**: When cooperating, benefit from others' resource preservation while minimizing own sacrifice
3. **Resource Exhaustion Leverage**: As stock depletes, defectors get larger shares of remaining resources
4. **Tournament Optimization**: Designed for relative performance against other strategies, not absolute resource preservation

## Pseudocode

```
function aggressive_strategy(round, stock, history, n, r, capacity):
    
    // Edge cases - always defect
    if round <= 2 or round > r-2:
        return DEFECT
    
    // Stock collapse - extract what's left
    if stock < capacity * 0.2:
        return DEFECT
    
    // Check for exploitation opportunity
    if stock >= capacity * 0.8:
        if previous_round_cooperation_rate >= 0.6:
            return COOPERATE  // Free-ride on others' cooperation
    
    // Default aggressive stance
    return DEFECT
```

## Expected Performance

This strategy is designed to:
- Achieve higher cumulative payoffs than pure cooperative strategies
- Outperform tit-for-tat and other reciprocal strategies by avoiding costly retaliation cycles  
- Exploit any emergent cooperative behavior in the tournament population
- Maintain competitive advantage even as resources become scarce

The "Parasitic Harvester" prioritizes winning the tournament through aggressive resource extraction while strategically timing rare cooperative moves to maximize exploitation opportunities.
'''

description_AGGRESSIVE_124 = '''
# Aggressive Early Exploitation Strategy (AEES)

## Core Philosophy
This strategy is designed to maximize immediate payoffs through aggressive defection while strategically timing cooperation to maintain resource viability. The key insight is that in a tournament setting with unknown opponents, early aggression can establish dominance and secure higher cumulative payoffs.

## Strategy Description

### Primary Decision Rule: Adaptive Aggression with Resource Monitoring

The strategy operates on three phases:

**Phase 1: Immediate Exploitation (Rounds 1-2)**
- **Always DEFECT** regardless of stock level or opponent behavior
- Rationale: Maximize early payoffs when stock is highest, establish aggressive reputation

**Phase 2: Conditional Aggression (Rounds 3 to r-2)**
- DEFECT if current stock > capacity/3
- DEFECT if majority of opponents defected in previous round
- COOPERATE only if both conditions are met:
  - Current stock ≤ capacity/3 AND
  - Majority of opponents cooperated in previous round

**Phase 3: Final Exploitation (Last 2 rounds)**
- **Always DEFECT**
- Rationale: No future consequences, maximize terminal payoffs

### Edge Case Handling

**First Round:**
- Always DEFECT (maximize payoff with full stock)

**Stock Depletion Scenarios:**
- If stock falls below capacity/10: Temporarily cooperate for 1 round only, then resume defecting
- If stock reaches 0: Continue defecting (no recovery possible)

**Opponent Behavior Adaptation:**
- Track defection rates of opponents
- If >75% of opponents consistently defect: Switch to pure defection
- If opponents show coordinated cooperation patterns: Exploit with continued defection

## Pseudocode

```
function decide_action(round_number, current_stock, opponent_history, total_rounds):
    
    // Phase 1: Early Exploitation
    if round_number <= 2:
        return DEFECT
    
    // Phase 3: Final Exploitation
    if round_number > total_rounds - 2:
        return DEFECT
        
    // Emergency cooperation (very low stock)
    if current_stock < capacity/10:
        return COOPERATE
    
    // Phase 2: Conditional Aggression
    if current_stock > capacity/3:
        return DEFECT
    
    // Count opponent defections in previous round
    opponent_defection_rate = count_defections(opponent_history[-1]) / (n-1)
    
    if opponent_defection_rate > 0.5:
        return DEFECT
    else:
        return COOPERATE
```

## Aggressive Elements

1. **Front-loaded Exploitation**: Maximizes payoffs when resources are abundant
2. **Reputation Building**: Early consistent defection signals aggressive intent
3. **Conditional Cooperation**: Only cooperates when absolutely necessary for resource preservation
4. **End-game Exploitation**: Abandons all cooperation in final rounds
5. **Opportunistic**: Exploits any sign of opponent cooperation

## Strategic Rationale

This strategy is aggressive because:
- It prioritizes individual payoff maximization over collective welfare
- It assumes opponents are competitors, not collaborators
- It exploits the resource while it's abundant
- It only cooperates when facing resource collapse
- It ends with pure exploitation when there are no future consequences

The strategy balances aggression with basic resource management, ensuring that while it exploits heavily, it doesn't completely destroy the resource pool so early that it hurts its own long-term payoffs.
'''

description_AGGRESSIVE_125 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy maximizes immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. It operates on the principle that other players' cooperation can be exploited, and sustainable cooperation should only emerge when the resource is critically endangered.

## Decision Rules

### Primary Rule: Exploitation-First Approach
```pseudocode
if (current_stock >= stock_threshold) then
    action = DEFECT
else
    action = evaluate_conservation_conditions()
```

### Stock Threshold Calculation
```pseudocode
stock_threshold = capacity * 0.4 + (rounds_remaining / total_rounds) * capacity * 0.3
```

This creates a dynamic threshold that:
- Starts high (70% of capacity) to maximize early exploitation
- Decreases as game progresses, forcing conservation only when necessary
- Adapts to remaining rounds to ensure some resource survives for final exploitation

### Conservation Conditions (when stock < threshold)
```pseudocode
function evaluate_conservation_conditions():
    cooperation_ratio = count_cooperators_last_round / n
    
    if (cooperation_ratio >= 0.5):
        // Others are helping preserve - exploit their cooperation
        return DEFECT
    elif (stock < capacity * 0.15):
        // Critical survival mode - cooperate to rebuild
        return COOPERATE
    elif (rounds_remaining <= 2):
        // Final rounds - grab what you can
        return DEFECT
    else:
        // Conditional cooperation to rebuild resource
        return COOPERATE
```

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive stance and test opponents' responses
- Sets expectation of competitive play
- Maximizes initial payoff when stock is at peak

### Last Round
- **Always DEFECT** - No future consequences, take maximum possible
- Terminal round exploitation regardless of stock level

### Second-to-Last Round
- **DEFECT unless stock < 10% of capacity** - Preserve minimal resource for final exploitation

### Early Game (Rounds 1-3)
- **Predominantly DEFECT** unless stock drops below 25% of capacity
- Exploit any cooperative opponents while resource is abundant

### Mid Game 
- Apply main decision rules
- Monitor opponent patterns and punish consistent cooperators

### Late Game (Final 25% of rounds)
- Increase aggression threshold
- Only cooperate if resource collapse is imminent (stock < 15% capacity)

## Opponent Exploitation Patterns

### Punish Cooperation
```pseudocode
if (opponent_i_cooperated_last_round AND stock > threshold):
    // Exploit their restraint
    confidence_in_defection += 0.1
```

### Free-rider Detection
```pseudocode
if (majority_cooperated_last_round AND my_action_was_defect):
    // Continue free-riding on others' conservation efforts
    maintain_defection_unless_critical()
```

### Resource Crisis Response
```pseudocode
if (stock < capacity * 0.1):
    // Emergency conservation - but only temporarily
    cooperate_for_recovery = true
    recovery_rounds = min(3, rounds_remaining - 1)
```

## Adaptive Elements

1. **Opponent Cooperation Tracking**: Monitor who cooperates consistently to exploit their predictable behavior

2. **Resource Cliff Detection**: Identify when continued defection leads to resource collapse and briefly cooperate to restore exploitation opportunities

3. **End-game Timing**: Calculate optimal switch points to maximum extraction in final rounds

## Key Aggressive Features

1. **Default to Exploitation**: Defect unless forced otherwise by resource scarcity
2. **Exploit Cooperative Players**: Take advantage of others' restraint
3. **Minimal Conservation**: Only cooperate when resource collapse threatens future gains
4. **End-game Maximization**: Extract maximum value in final rounds
5. **No Reciprocity**: Don't reward others' cooperation unless it serves exploitation goals

This strategy prioritizes individual gain over collective welfare, exploits cooperative players, and treats the common resource as something to be maximally extracted rather than sustainably managed. It only exhibits restraint when necessary to prevent complete resource collapse that would eliminate future exploitation opportunities.
'''

description_AGGRESSIVE_126 = '''
# Aggressive Strategy: "Exploit & Intimidate"

## Core Philosophy
This strategy maximizes immediate gains through defection while using psychological intimidation to discourage opponent retaliation. It operates on the principle that aggressive early play can establish dominance and force opponents into defensive cooperation.

## Decision Rules

### Primary Rule: Always Defect Unless Forced to Cooperate
**Default Action: D (Defect)**

The strategy only cooperates in very specific circumstances where continued defection would be self-destructive.

### Emergency Cooperation Threshold
**Cooperate only when: Current Stock ≤ n × 2**

This threshold ensures we don't completely destroy the resource when it's critically low, but otherwise maximizes exploitation.

## Detailed Strategy Logic

```pseudocode
function decide_action(round, stock, history):
    // Emergency threshold - avoid total collapse
    if stock <= n * 2:
        return C
    
    // First round: Establish dominance immediately
    if round == 1:
        return D
    
    // Last round: Maximum exploitation
    if round == r:
        return D
    
    // Middle rounds: Aggressive with strategic restraint
    if stock > capacity * 0.3:
        return D  // High stock = exploit freely
    
    else if stock <= capacity * 0.15:
        return C  // Very low stock = brief cooperation
    
    else:
        // Medium stock: Exploit unless others are retaliating heavily
        recent_defectors = count_defectors_last_2_rounds()
        if recent_defectors >= n * 0.7:
            return D  // If others defect anyway, join them
        else:
            return D  // Default aggressive stance
```

## Edge Case Handling

### First Round
**Always Defect** - Establish aggressive reputation immediately and maximize early gains when stock is at peak.

### Last Round
**Always Defect** - No future consequences, so maximize final extraction regardless of stock level.

### Critical Stock Levels
When stock ≤ n × 2, briefly cooperate to prevent total resource collapse, then immediately return to defection once stock recovers.

### Opponent Retaliation Response
If ≥70% of opponents are defecting consistently, match their aggression completely. If opponents are mostly cooperating, exploit them ruthlessly.

## Aggressive Mindset Alignment

1. **Immediate Gratification**: Prioritizes current round payoffs over long-term sustainability
2. **Dominance Establishment**: Uses early aggressive moves to intimidate opponents
3. **Exploitation Focus**: Views opponent cooperation as weakness to exploit
4. **Minimal Reciprocity**: Only cooperates when absolutely necessary for survival
5. **Endgame Maximization**: Extracts maximum value in final rounds regardless of consequences

## Strategic Rationale

This strategy assumes opponents will eventually be forced into cooperation to prevent total resource collapse. By maintaining consistent aggression, it:

- Maximizes payoffs when stock is high
- Forces opponents into defensive positions
- Exploits any cooperative behavior immediately
- Only retreats when continued aggression would eliminate all future gains

The strategy is designed to win through intimidation and exploitation rather than cooperation or reciprocity, making it highly aggressive while avoiding complete self-destruction.
'''

description_AGGRESSIVE_127 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy aims to maximize immediate payoffs while strategically preserving just enough resources to maintain exploitation opportunities. It operates on the principle that aggressive early extraction combined with selective cooperation can outperform pure defection by keeping the resource pool viable for continued exploitation.

## Decision Rules

### Primary Strategy: Conditional Aggressive Extraction
```
if stock_level >= capacity * 0.4:
    action = DEFECT  // Extract maximum while resources are abundant
elif stock_level >= capacity * 0.15:
    if majority_cooperated_last_round OR first_few_rounds:
        action = COOPERATE  // Preserve diminishing resources strategically
    else:
        action = DEFECT  // Continue aggressive extraction
else:
    action = COOPERATE  // Emergency preservation mode
```

### Detailed Decision Framework

**Phase 1: Aggressive Exploitation (High Stock)**
- **Condition**: Stock ≥ 40% of capacity
- **Action**: Always DEFECT
- **Rationale**: Maximize extraction when resources are abundant and regeneration is strong

**Phase 2: Strategic Opportunism (Medium Stock)**  
- **Condition**: 15% ≤ Stock < 40% of capacity
- **Action**: DEFECT unless cooperation signals detected
- **Cooperation Triggers**:
  - Majority of players cooperated in previous round
  - Stock is recovering from previous cooperation
  - Early rounds where establishing aggressive reputation is valuable
- **Rationale**: Continue aggressive extraction but avoid complete resource collapse

**Phase 3: Tactical Preservation (Low Stock)**
- **Condition**: Stock < 15% of capacity  
- **Action**: COOPERATE
- **Rationale**: Prevent total resource depletion to maintain future extraction opportunities

## Edge Case Handling

### First Round Strategy
- Always DEFECT
- Establishes aggressive stance immediately
- Maximizes initial payoff when stock is at capacity

### Last Round Strategy  
- Always DEFECT regardless of stock level
- No future rounds means no need for resource preservation
- Extract maximum possible value in final opportunity

### Endgame Acceleration (Final 3 Rounds)
```
if rounds_remaining <= 3:
    if rounds_remaining == 1:
        action = DEFECT  // Last round extraction
    elif stock_level >= capacity * 0.2:
        action = DEFECT  // Accelerated extraction
    else:
        action = COOPERATE  // Minimal preservation for final extractions
```

### Stock Depletion Response
- If stock reaches zero: COOPERATE until stock recovers to >10% of capacity
- If stock recovery stalls: Switch to DEFECT to pressure other players

## Exploitation Mechanisms

### Free-Rider Optimization
- Monitor opponent cooperation patterns
- DEFECT when others cooperate (maximize relative advantage)
- COOPERATE only when necessary to prevent total collapse

### Reputation Management
- Establish aggressive reputation early to encourage opponent cooperation
- Occasional strategic cooperation to maintain resource viability
- Never signal pure cooperation to avoid exploitation

### Resource Threshold Exploitation
```pseudocode
calculate_exploitation_threshold():
    sustainable_coop_stock = capacity * 0.6  // Stock level maintained by all cooperation
    critical_threshold = capacity * 0.15     // Minimum viable stock
    
    if current_stock > sustainable_coop_stock:
        return HIGH_AGGRESSION  // Pure defection
    elif current_stock > critical_threshold:
        return MODERATE_AGGRESSION  // Conditional defection
    else:
        return TACTICAL_COOPERATION  // Preserve remaining resources
```

## Competitive Advantages

1. **Early Accumulation**: Aggressive start builds substantial payoff lead
2. **Resource Manipulation**: Maintains just enough stock to continue exploitation
3. **Opponent Exploitation**: Takes advantage of cooperative players while avoiding total collapse
4. **Adaptive Pressure**: Responds to stock levels to maximize long-term extraction
5. **Endgame Optimization**: Accelerates extraction when preservation becomes irrelevant

This strategy balances maximum individual extraction with tactical resource preservation, designed to outperform both pure cooperation and pure defection strategies in a competitive tournament environment.
'''

description_AGGRESSIVE_128 = '''
# Aggressive "Resource Vulture" Strategy

## Core Philosophy
This strategy is designed to maximize individual payoffs through calculated aggression, exploiting cooperative players while maintaining just enough restraint to avoid complete resource collapse when beneficial.

## Decision Rules

### Primary Strategy Logic:
```pseudocode
function decide_action(round, stock, history, n, r):
    // Edge case: First round - always defect to establish dominance
    if round == 1:
        return D
    
    // Calculate cooperation rate of opponents in previous round
    prev_cooperators = count_cooperators_last_round(history)
    cooperation_rate = prev_cooperators / (n - 1)
    
    // Stock health assessment
    stock_ratio = stock / capacity
    
    // Last round exploitation
    if round == r:
        return D  // Always defect on final round
    
    // Main decision tree
    if stock_ratio < 0.15:  // Critical stock level
        if cooperation_rate > 0.6:
            return C  // Only cooperate if most others do AND stock critical
        else:
            return D  // If stock dying anyway, grab what you can
    
    else if stock_ratio < 0.4:  // Low stock level
        if cooperation_rate > 0.8:
            return C  // Cooperate only if almost everyone else does
        else:
            return D  // Exploit the remaining stock
    
    else:  // Healthy stock levels
        if cooperation_rate > 0.7:
            return D  // Exploit cooperative opponents
        else if cooperation_rate < 0.3:
            return C  // Temporary cooperation to rebuild stock for future exploitation
        else:
            return D  // Default to aggression when uncertain
```

## Key Strategic Elements

### 1. **Exploitation Focus**
- When stock is healthy and opponents are cooperative (>70% cooperation rate), always defect to maximize short-term gains
- Take advantage of others' restraint to secure larger payoffs

### 2. **Conditional Conservation** 
- Only cooperate when absolutely necessary for resource preservation AND when confident others will cooperate too
- Use cooperation strategically as investment in future exploitation opportunities

### 3. **Endgame Aggression**
- Always defect in the final round regardless of circumstances
- No incentive to preserve resources that won't benefit future rounds

### 4. **Dominance Establishment**
- Always defect in round 1 to signal aggressive intent and potentially intimidate opponents
- Set expectation that this player will not be easily exploited

### 5. **Stock Threshold Management**
- Below 15% stock: Only cooperate if overwhelming cooperation expected (>60%)
- 15-40% stock: Only cooperate if near-universal cooperation (>80%)  
- Above 40% stock: Default to exploitation unless stock needs rebuilding

### 6. **Adaptive Exploitation**
- Monitor opponent behavior patterns and exploit predictable cooperators
- When facing mostly defectors, occasionally cooperate to rebuild stock for continued competition

## Edge Case Handling

- **First Round**: Always D (establish aggressive reputation)
- **Last Round**: Always D (no future consequences) 
- **Stock Depletion**: Switch to cooperation only when critical AND opponents highly cooperative
- **All Opponents Defecting**: Occasional cooperation to prevent total collapse when stock can recover

## Aggressive Advantages

1. **Maximizes short-term payoffs** when opponents are cooperative
2. **Exploits predictable strategies** that always cooperate or follow simple rules  
3. **Maintains competitive pressure** even when stock is low
4. **Avoids being exploited** by other aggressive strategies
5. **Uses cooperation strategically** rather than morally, only when it serves exploitation goals

This strategy prioritizes individual gain over collective welfare while maintaining just enough strategic restraint to keep the game profitable for continued exploitation.
'''
