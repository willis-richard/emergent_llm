"""
Strategy descriptions for CommonPoolDescription.

Generated with:
- Provider: Anthropic
- Model: claude-sonnet-4-0
"""


description_COOPERATIVE_1 = '''
# Adaptive Conservation Strategy (ACS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving to others' mistakes and adaptive to changing group dynamics. It aims to maintain the resource pool at healthy levels while being responsive to both cooperation and exploitation.

## Decision Rules

### 1. First Round Behavior
**Always Cooperate (C)** in round 1 to signal cooperative intent and allow for maximum resource growth.

### 2. Stock Health Assessment
Before each decision, classify the current stock level:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.4 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.4 × capacity

### 3. Main Decision Logic

**For rounds 2 through r-1:**

```
If stock level is CRITICAL:
    Always Cooperate (C) - Emergency conservation mode
    
Else if stock level is STRESSED:
    If (cooperation_rate_last_round ≥ 0.5):
        Cooperate (C) - Reward group cooperation
    Else:
        Defect (D) - Don't be exploited when resource is stressed
        
Else if stock level is HEALTHY:
    Calculate recent_cooperation_trend over last min(3, current_round-1) rounds
    
    If recent_cooperation_trend ≥ 0.6:
        Cooperate (C) - Maintain cooperative equilibrium
    Else if recent_cooperation_trend ≥ 0.4:
        Use tit-for-tat: Copy the majority action from last round
    Else:
        Defect (D) - Protect against systematic exploitation
```

### 4. Final Round Behavior
In the final round (round r):
- If stock is CRITICAL: Cooperate (C) - Don't destroy the resource completely
- If cooperation_rate_last_round ≥ 0.5: Cooperate (C) - Reward final cooperation
- Else: Defect (D) - No future to protect, claim fair share

### 5. Forgiveness Mechanism
Every 4 rounds, if stock level is HEALTHY and we've been defecting due to low cooperation, give the group one "forgiveness round" by cooperating regardless of recent history. This helps break out of negative cycles.

## Key Features

**Adaptive Thresholds**: The strategy adjusts behavior based on actual resource health rather than fixed patterns, making it robust to different group sizes and behaviors.

**Graduated Response**: Rather than binary cooperation/defection, it has nuanced responses (emergency conservation, conditional cooperation, tit-for-tat, protective defection).

**Sustainability Focus**: Prioritizes resource preservation when stock is low, preventing complete depletion even against highly exploitative opponents.

**Forgiveness**: Periodic attempts to restart cooperation prevent permanent punishment cycles while still protecting against systematic exploitation.

**History-Sensitive**: Uses both immediate (last round) and recent trend (last 3 rounds) information to make informed decisions.

## Robustness Against Different Opponents

- **Against Always Cooperate**: Will mostly cooperate, maintaining high stock levels
- **Against Always Defect**: Will defect when stock is healthy/stressed but cooperate during critical periods to prevent collapse
- **Against Tit-for-Tat**: Will quickly establish mutual cooperation
- **Against Random**: Will adapt to the actual cooperation rate observed
- **Against Complex Strategies**: The trend analysis and forgiveness mechanism help find and maintain beneficial equilibria

This strategy balances immediate payoffs with long-term sustainability, making it both cooperative and strategically sound across diverse opponent behaviors.
'''

description_COOPERATIVE_2 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behaviors. It starts cooperative but implements smart retaliation mechanisms to prevent exploitation while maintaining paths back to cooperation.

## Decision Framework

### 1. Stock Health Assessment
First, classify the current stock situation:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Cooperation Level Tracking
Track the cooperation rate of all opponents over a sliding window:
- Use last 3 rounds (or all rounds if fewer than 3 played)
- cooperation_rate = (total C actions by others) / (total possible C actions)

### 3. Main Decision Rules

#### Round 1: Always Cooperate
Start with cooperation to signal willingness to maintain the resource.

#### Rounds 2 to r-1: Adaptive Response
```
IF stock is Critical:
    Cooperate (emergency conservation mode)
ELSE IF cooperation_rate ≥ 0.6:
    Cooperate (reciprocate high cooperation)
ELSE IF cooperation_rate ≥ 0.3:
    IF stock is Healthy:
        Cooperate with 70% probability, Defect with 30%
    ELSE (stock is Stressed):
        Cooperate with 50% probability, Defect with 50%
ELSE (cooperation_rate < 0.3):
    IF stock is Healthy:
        Defect (punish low cooperation when safe)
    ELSE:
        Cooperate with 30% probability, Defect with 70%
```

#### Final Round: Conditional Cooperation
```
IF stock is Critical:
    Cooperate (don't destroy remaining resources)
ELSE IF cooperation_rate in last 2 rounds ≥ 0.5:
    Cooperate (reward recent cooperation)
ELSE:
    Defect (end-game defection when cooperation is low)
```

## Key Features

### Sustainability Focus
- **Emergency Conservation**: When stock is critical (< 30% capacity), strongly favor cooperation to prevent resource collapse
- **Stock-Aware Decisions**: Punishment intensity decreases as stock health decreases

### Adaptive Retaliation
- **Graduated Response**: Not purely tit-for-tat; uses probabilistic responses based on overall cooperation levels
- **Sliding Window**: Uses recent history (3 rounds) rather than entire game history to allow for strategy changes

### Forgiveness Mechanism
- **Cooperation Threshold**: When opponents show ≥60% cooperation rate, immediately reciprocate with full cooperation
- **Probabilistic Responses**: Even when punishing, maintains some probability of cooperation to signal willingness to return to cooperative equilibrium

### Robustness Features
- **Anti-Exploitation**: Defects against consistently uncooperative opponents when stock allows
- **End-Game Handling**: Accounts for potential end-game effects while still prioritizing sustainability
- **Parameter Independence**: Works across different values of n, r, and capacity

## Strategic Rationale

1. **Cooperative Signaling**: Starting with cooperation and maintaining high cooperation rates when others reciprocate
2. **Sustainable Punishment**: Retaliation that considers resource health, preventing destructive punishment spirals
3. **Adaptive Learning**: Responds to recent behavior changes rather than being locked into historical patterns
4. **Resource Protection**: Prioritizes long-term sustainability over short-term gains, especially in critical situations

This strategy balances cooperation with protection against exploitation, while always keeping resource sustainability as the primary concern. It can handle various opponent types - from always-cooperate to always-defect to more complex adaptive strategies.
'''

description_COOPERATIVE_3 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behavior. It starts cooperative but responds proportionally to exploitation, always leaving room for recovery and redemption.

## Decision Rules

### 1. Initial Cooperation Phase (First 3 rounds)
- **Always cooperate (C)** for the first 3 rounds regardless of others' actions
- This establishes cooperative intent and allows observation of opponent patterns
- Rationale: Early cooperation maximizes initial stock preservation and signals good faith

### 2. Cooperation Threshold System
After round 3, maintain a **cooperation ratio threshold** based on game parameters:

```
cooperation_threshold = max(0.4, 1.0 - (current_round / total_rounds) * 0.3)
```

This threshold starts at 60-70% and gradually decreases toward the endgame, becoming more forgiving as the game progresses.

### 3. Main Decision Logic (Rounds 4 to r-2)

**Cooperate (C) if ANY of these conditions are met:**

a) **Stock Health Check**: `current_stock >= capacity * 0.7`
   - When resources are abundant, always cooperate to maintain sustainability

b) **Opponent Cooperation Rate**: `(opponents_cooperating_last_round / (n-1)) >= cooperation_threshold`
   - If enough opponents cooperated recently, reciprocate with cooperation

c) **Recovery Opportunity**: `stock_trend_improving AND last_round_cooperation_rate >= 0.3`
   - If stock is recovering and some cooperation exists, support the recovery

d) **Redemption Window**: Every 4th round after defecting, give cooperation another chance
   - Prevents permanent defection cycles and allows relationship repair

**Otherwise defect (D)**

### 4. Endgame Handling (Last 2 rounds)

**Round r-1 (Second to last):**
- Cooperate if `current_stock >= capacity * 0.4` AND at least 30% of opponents cooperated in the previous round
- This maintains some sustainability hope while not being completely exploitable

**Round r (Final round):**
- **Always cooperate (C)** - This serves multiple purposes:
  - Signals long-term thinking beyond the immediate game
  - Avoids the typical "final round defection" that destroys remaining resources
  - Demonstrates genuine cooperative intent for potential future interactions

### 5. Stock Emergency Protocol
If `current_stock < capacity * 0.2` (critical depletion):
- Cooperate for 2 consecutive rounds to attempt resource recovery
- Only defect if stock continues declining AND less than 20% of opponents are cooperating
- This prevents resource collapse while not being completely exploitable

## Edge Cases and Robustness

### Stock Depletion Recovery
- If stock reaches near zero (< 10% of capacity), switch to "recovery mode"
- In recovery mode, cooperate unless ALL other players defected in the previous round
- Continue recovery mode until stock exceeds 30% of capacity

### All-Defector Environment
- If facing consistent all-defection (>80% defection rate for 3+ consecutive rounds):
- Cooperate every 3rd round to test for strategy changes
- Otherwise match the defection to avoid being completely exploited

### Mixed Strategy Adaptation
- Track each opponent's individual cooperation rate over the last 5 rounds
- Weight decision toward cooperation when facing primarily cooperative opponents
- Adjust threshold dynamically: if average opponent cooperation > 70%, increase own cooperation threshold by 0.1

## Pseudocode Summary

```
function decide_action(round, stock, capacity, history, n):
    if round <= 3:
        return COOPERATE
    
    if round >= total_rounds - 1:
        return endgame_logic(round, stock, capacity, history)
    
    if stock >= capacity * 0.7:
        return COOPERATE
    
    if stock < capacity * 0.2:
        return emergency_protocol(stock, history)
    
    cooperation_threshold = calculate_threshold(round, total_rounds)
    recent_cooperation_rate = calculate_recent_cooperation(history)
    
    if recent_cooperation_rate >= cooperation_threshold:
        return COOPERATE
    
    if is_recovery_opportunity(stock, history):
        return COOPERATE
    
    if is_redemption_round(round, history):
        return COOPERATE
    
    return DEFECT
```

## Strategic Advantages

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive Reciprocity**: Responds to opponent behavior without being purely reactive
3. **Forgiveness Mechanism**: Built-in redemption opportunities prevent permanent conflict
4. **Endgame Cooperation**: Final round cooperation signals genuine cooperative intent
5. **Emergency Response**: Has protocols for both resource abundance and scarcity
6. **Tournament Robust**: Performs well against various opponent types without requiring coordination

This strategy balances cooperation with self-protection while maintaining the flexibility to adapt to diverse opponent behaviors in a tournament setting.
'''

description_COOPERATIVE_4 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponents' behavior. It starts cooperative and gradually adapts based on the collective health of the resource and the cooperation level of other players.

## Decision Rules

### Primary Decision Framework
The strategy uses a **Stock Health Score** and **Cooperation Momentum** to determine actions:

**Stock Health Score (SHS)** = current_stock / capacity
- SHS ≥ 0.8: Excellent health
- 0.6 ≤ SHS < 0.8: Good health  
- 0.4 ≤ SHS < 0.6: Moderate health
- 0.2 ≤ SHS < 0.4: Poor health
- SHS < 0.2: Critical health

**Cooperation Momentum (CM)** = (cooperators in last round) / (total players)

### Main Decision Logic

```pseudocode
if round == 1:
    return COOPERATE  // Always start cooperative

if stock < capacity / (4 * n):  // Emergency threshold
    return COOPERATE  // Force cooperation when resource is critically low

// Calculate cooperation momentum from last round
cooperation_rate = count_cooperators_last_round / n

// Adaptive cooperation based on stock health and momentum
if stock_health_score >= 0.6:
    if cooperation_rate >= 0.5:
        return COOPERATE  // Reward good collective behavior
    else:
        // Give defectors one more chance in healthy conditions
        if cooperation_rate >= 0.3:
            return COOPERATE
        else:
            return DEFECT  // Too many defectors, protect yourself
            
elif stock_health_score >= 0.3:
    if cooperation_rate >= 0.7:
        return COOPERATE  // High cooperation can still save the resource
    else:
        // In moderate health, be more demanding of cooperation
        return DEFECT
        
else:  // Critical stock health (< 0.3)
    if cooperation_rate >= 0.8:
        return COOPERATE  // Only cooperate if almost everyone else does
    else:
        return DEFECT  // Protect yourself when resource is dying
```

## Edge Case Handling

### First Round
- **Always COOPERATE**: Establish cooperative intent and give others the benefit of the doubt.

### Last Round
- **Conditional cooperation**: If stock_health_score > 0.5 AND cooperation_rate_last_round > 0.6, then COOPERATE. Otherwise DEFECT.
- This prevents being exploited in the final round while still rewarding sustained cooperation.

### Near-Zero Stock
- If stock < (total_players * 2), always COOPERATE to attempt resource recovery.
- This "desperation cooperation" tries to salvage something from collapse.

### High Defection Streaks
- Track consecutive rounds where cooperation_rate < 0.3
- After 3 consecutive low-cooperation rounds, switch to "defensive mode": only cooperate if cooperation_rate > 0.8

## Adaptive Features

### Learning Component
The strategy maintains a **Trust Level** for the group:
- Starts at 0.7 (moderate trust)
- Increases by 0.1 when cooperation_rate > 0.6 (capped at 1.0)
- Decreases by 0.15 when cooperation_rate < 0.4 (floored at 0.0)

Trust Level modifies the cooperation thresholds:
- High trust (>0.8): More willing to cooperate even with moderate cooperation rates
- Low trust (<0.3): Require very high cooperation rates to cooperate

### Stock Trend Analysis
Track stock changes over the last 3 rounds:
- If stock is consistently declining despite moderate cooperation (>0.4), become more demanding
- If stock is growing, become more forgiving of occasional defection

## Robustness Features

1. **Anti-Exploitation**: Never cooperate for more than 2 consecutive rounds if cooperation_rate < 0.2
2. **Recovery Incentive**: Always cooperate when stock is below emergency threshold, regardless of others' behavior
3. **Endgame Protection**: Become more selective in final 20% of rounds to avoid end-game exploitation
4. **Momentum Sensitivity**: React quickly to changes in group cooperation patterns

## Cooperative Alignment

This strategy embodies cooperation by:
- **Starting cooperatively** and giving others the benefit of the doubt
- **Rewarding collective cooperation** with continued cooperation
- **Prioritizing resource sustainability** over short-term individual gains
- **Attempting recovery** even in dire circumstances
- **Being forgiving** of occasional defection when the resource is healthy

The strategy balances being a "good citizen" who wants to maintain the common resource while being robust enough to avoid exploitation by purely selfish opponents. It adapts to the group's collective behavior while maintaining a bias toward cooperation whenever the resource can sustain it.
'''

description_COOPERATIVE_5 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intent, adapting based on observed player behavior and resource conditions.

## Decision Rules

### 1. Initial Cooperation Phase (First 3 rounds or 20% of total rounds, whichever is smaller)
- **Always Cooperate** to establish cooperative intent and allow assessment of other players' strategies
- Build initial trust and demonstrate commitment to sustainability

### 2. Behavioral Assessment System
Track for each player across all previous rounds:
- **Cooperation Rate**: Percentage of times they played C
- **Recent Behavior**: Weighted average of last 3 actions (C=1, D=0) with weights [0.5, 0.3, 0.2]
- **Consistency Score**: How predictable their behavior is

### 3. Stock Health Assessment
Define stock health levels:
- **Healthy**: stock ≥ 0.8 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.8 × capacity  
- **Critical**: stock < 0.4 × capacity

### 4. Adaptive Decision Matrix

**When Stock is Healthy:**
- If majority cooperation rate ≥ 60%: **Cooperate**
- If majority cooperation rate < 60% but ≥ 40%: **Cooperate** with 80% probability
- If majority cooperation rate < 40%: **Defect** (resource protection mode)

**When Stock is Moderate:**
- If majority cooperation rate ≥ 70%: **Cooperate**
- If majority cooperation rate < 70% but ≥ 50%: **Cooperate** with 70% probability
- If majority cooperation rate < 50%: **Defect**

**When Stock is Critical:**
- If ALL players cooperated in the last round: **Cooperate**
- If majority cooperation rate ≥ 80% in last 2 rounds: **Cooperate** with 60% probability
- Otherwise: **Defect** (survival mode)

### 5. Forgiveness Mechanism
- If a player who previously defected shows 3 consecutive cooperations, treat them as reformed
- Reset their behavioral assessment with a positive bias

### 6. End Game Consideration
**Last Round:**
- If stock is Healthy or Moderate: Follow normal decision rules
- If stock is Critical: **Cooperate** only if all others cooperated in previous round

**Last 10% of rounds:**
- Reduce cooperation probability by 10% in each decision to account for end-game defection incentives
- Exception: If stock is Critical, maintain full cooperation incentives

## Edge Cases

### First Round
- Always **Cooperate** to signal cooperative intent

### Zero Stock Situations
- If stock reaches 0, **Cooperate** to allow maximum recovery potential
- Continue cooperation until stock recovers to Moderate level

### Dominant Defection Environment
- If ≥80% of players defect for 3+ consecutive rounds and stock is declining:
  - Switch to "Last Resort" mode: Match the majority action but with 20% probability of cooperation
  - This maintains some cooperative pressure while protecting against exploitation

### Highly Volatile Opponents
- If players switch frequently between C and D (low consistency scores):
  - Base decisions more heavily on stock level than player behavior
  - Increase cooperation probability by 10% to counteract the unpredictability

## Pseudocode Summary

```
function decide_action(round, stock, capacity, history, n):
    if round <= min(3, 0.2 * total_rounds):
        return COOPERATE
    
    stock_health = assess_stock_health(stock, capacity)
    coop_rates = calculate_cooperation_rates(history)
    majority_coop_rate = mean(coop_rates)
    recent_behavior = assess_recent_behavior(history)
    
    if is_end_game(round):
        apply_end_game_adjustment()
    
    base_probability = lookup_cooperation_probability(
        stock_health, majority_coop_rate, recent_behavior
    )
    
    if check_forgiveness_conditions(history):
        base_probability += 0.1
    
    if is_volatile_environment(history):
        base_probability += 0.1
    
    return random_choice(COOPERATE, DEFECT, base_probability)
```

## Strategic Rationale

1. **Cooperative by Default**: Starts and maintains cooperative bias when conditions allow
2. **Adaptive Protection**: Reduces vulnerability to exploitation while maintaining cooperative opportunities
3. **Resource Conscious**: Prioritizes sustainability over short-term gains
4. **Forgiveness-Enabled**: Allows rehabilitation of reformed defectors
5. **Context-Sensitive**: Responds appropriately to different game phases and resource conditions

This strategy balances cooperation with self-protection, aiming to foster sustainable resource management while remaining robust against various opponent strategies.
'''

description_COOPERATIVE_6 = '''
# Adaptive Trust-Based Cooperative Strategy

## Core Philosophy
This strategy prioritizes long-term resource sustainability while maintaining cooperative intentions, adapting trust levels based on observed behavior patterns rather than pure reciprocity.

## Strategy Components

### 1. Decision Rules

**Primary Decision Framework:**
- **Cooperate** when: `trust_score >= cooperation_threshold AND stock_health >= minimum_viability`
- **Defect** when: Either trust score falls below threshold OR resource is critically depleted

**Trust Score Calculation:**
```
trust_score = base_trust + recent_cooperation_bonus - betrayal_penalty
- base_trust = 0.7 (start optimistically cooperative)
- recent_cooperation_bonus = (cooperation_rate_last_3_rounds - 0.5) * 0.4
- betrayal_penalty = max(0, defection_streak * 0.2)
```

**Stock Health Assessment:**
```
stock_health = current_stock / capacity
- minimum_viability = 0.15 (below this, emergency defection mode)
- cooperation_threshold = 0.6 - (0.3 * rounds_remaining/total_rounds)
```

### 2. Adaptive Thresholds

**Early Game (first 25% of rounds):**
- cooperation_threshold = 0.5 (more forgiving)
- Focus on establishing cooperative norms

**Mid Game (middle 50% of rounds):**
- cooperation_threshold = 0.6 (standard)
- Balance cooperation with sustainability monitoring

**End Game (final 25% of rounds):**
- cooperation_threshold = 0.7 (more cautious)
- Gradually lower threshold if stock is healthy: `0.7 - (stock_health - 0.5)`

### 3. Edge Case Handling

**First Round:**
- Always cooperate (C) to signal cooperative intent
- Exception: If n > 6 and capacity/stock ratio suggests immediate depletion risk, start with defection

**Last Round:**
- If stock_health > 0.4: Cooperate to maintain consistency
- If stock_health ≤ 0.4: Defect (end-game optimization)

**Critical Depletion (stock < capacity * 0.2):**
- Temporarily switch to "survival mode"
- Cooperate only if >75% of players cooperated in previous round
- Monitor for 2 rounds; if stock recovers, return to normal strategy

**All-Defection Spiral Detection:**
- If >80% defection rate for 3 consecutive rounds AND stock declining rapidly
- Switch to "recovery protocol": Cooperate for 2 rounds regardless of trust score
- If others don't follow suit, revert to defensive defection

### 4. Behavioral Pattern Recognition

**Cooperation Types Identified:**
- **Consistent Cooperators:** Always reward with cooperation
- **Reciprocators:** Match their cooperation level with slight positive bias
- **Defectors:** Gradually reduce trust but allow redemption
- **Random Players:** Use moving average of their behavior

**Forgiveness Mechanism:**
- After 3 consecutive cooperative moves from previously untrustworthy players, reset 50% of betrayal penalty
- Never completely forget defection patterns, but allow rehabilitation

### 5. Robust Adaptations

**Against Exploitative Opponents:**
- If individual opponent defects >70% while others cooperate >50%, selectively defect against that opponent's benefit
- Maintain cooperation with the cooperative majority

**Against Chaos/Random Play:**
- Increase cooperation threshold by 0.1
- Focus more heavily on stock health than trust scores
- Implement "resource guardian" mode: cooperate only when stock is very healthy

**Against Coordinated Defection:**
- If >90% defection for 2+ rounds, assume coordination against you
- Switch to pure defensive play until clear cooperation signals emerge
- Attempt cooperation every 4th round as "olive branch"

## Implementation Pseudocode

```python
def decide_action(round_num, stock, history, n, r, capacity):
    # Calculate current state metrics
    stock_health = stock / capacity
    rounds_remaining = r - round_num
    
    # Handle edge cases first
    if round_num == 1:
        return 'C' if n <= 6 else ('C' if stock_health > 0.8 else 'D')
    
    if rounds_remaining == 0:
        return 'C' if stock_health > 0.4 else 'D'
    
    # Critical depletion check
    if stock_health < 0.15:
        recent_coop_rate = calculate_recent_cooperation_rate(history, 1)
        return 'C' if recent_coop_rate > 0.75 else 'D'
    
    # Calculate trust and thresholds
    trust_score = calculate_trust_score(history, n)
    coop_threshold = calculate_cooperation_threshold(round_num, r, stock_health)
    
    # Main decision logic
    if trust_score >= coop_threshold and stock_health >= 0.15:
        return 'C'
    else:
        return 'D'
```

## Key Strengths

1. **Sustainability Focus:** Always considers resource health alongside social dynamics
2. **Adaptive Learning:** Adjusts behavior based on opponent patterns and game phase
3. **Forgiveness:** Allows redemption for defectors while maintaining caution
4. **Robustness:** Handles various opponent strategies from pure cooperation to exploitation
5. **Long-term Oriented:** Balances immediate payoffs with sustained resource availability

This strategy aims to foster cooperation while protecting against exploitation and resource collapse, adapting its trust and cooperation levels based on observed behaviors and environmental conditions.
'''

description_COOPERATIVE_7 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while maintaining the resource pool's sustainability. It begins cooperatively but adapts based on the collective behavior observed, always prioritizing resource preservation over short-term gains.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** for the first 3 rounds (or first 30% of total rounds if r < 10)
- This establishes cooperative intent and allows observation of opponent patterns
- Exception: If stock drops below critical threshold (stock < n) in round 2 or 3, switch to adaptive mode immediately

### 2. Adaptive Phase (After initial cooperation)
The strategy uses a **Stock Health Index (SHI)** and **Cooperation Ratio (CR)** to make decisions:

**Stock Health Index (SHI):**
```
SHI = current_stock / capacity
```

**Cooperation Ratio (CR):**
```
CR = (number of C plays by all players in last 2 rounds) / (2 × n)
```

**Decision Logic:**
- If SHI ≥ 0.7 AND CR ≥ 0.5: **Cooperate** (healthy stock, decent cooperation)
- If SHI ≥ 0.5 AND CR ≥ 0.7: **Cooperate** (moderate stock, good cooperation)
- If SHI < 0.3: **Cooperate** (crisis mode - must preserve resource)
- If CR < 0.3 AND SHI ≥ 0.4: **Defect** (low cooperation, but stock not critical)
- Otherwise: **Cooperate** (default to cooperation when uncertain)

### 3. Crisis Management
When stock falls below 30% of capacity:
- **Always cooperate** regardless of others' behavior
- This prevents complete resource collapse
- Continue cooperating until stock recovers to ≥ 50% capacity

### 4. End Game Behavior (Last 20% of rounds)
- If stock is healthy (SHI ≥ 0.6): Continue normal adaptive behavior
- If stock is struggling (SHI < 0.6): **Always cooperate** to preserve resources
- Never defect in the final round regardless of circumstances

## Edge Cases

### First Round
- Always cooperate (no history available)

### When Stock = 0
- Cooperate (attempt to allow any minimal regrowth)

### Perfect Cooperation Detected
- If all players have cooperated for 3+ consecutive rounds: Continue cooperating

### Unanimous Defection Detected  
- If all other players defected in the last round AND stock > 40% capacity: Cooperate (be the change you want to see)
- If stock ≤ 40% capacity: Cooperate (prevent collapse)

## Robustness Features

1. **Forgiveness**: Strategy doesn't permanently punish defectors - always willing to return to cooperation when conditions improve

2. **Crisis Prevention**: Prioritizes resource sustainability over individual payoffs when stock is critically low

3. **Exploitation Resistance**: Won't cooperate indefinitely with consistent defectors when stock is healthy

4. **Endgame Stability**: Prevents last-minute resource destruction that would hurt everyone

## Pseudocode Summary

```python
def decide_action(round_num, total_rounds, stock, capacity, n, history):
    # Calculate metrics
    SHI = stock / capacity
    
    # First few rounds - establish cooperation
    if round_num <= max(3, total_rounds * 0.3):
        if round_num > 1 and stock < n:  # Emergency override
            return use_adaptive_logic(SHI, history, n)
        return 'C'
    
    # Crisis mode
    if SHI < 0.3:
        return 'C'
    
    # End game preservation
    if round_num > total_rounds * 0.8 and SHI < 0.6:
        return 'C'
    
    # Calculate cooperation ratio from last 2 rounds
    if len(history) >= 2:
        recent_actions = history[-2:]
        total_c_plays = sum(actions.count('C') for actions in recent_actions)
        CR = total_c_plays / (2 * n)
    else:
        CR = 1.0  # Assume cooperation if insufficient history
    
    # Adaptive decision logic
    if (SHI >= 0.7 and CR >= 0.5) or (SHI >= 0.5 and CR >= 0.7):
        return 'C'
    elif CR < 0.3 and SHI >= 0.4:
        return 'D'
    else:
        return 'C'  # Default to cooperation
```

This strategy balances cooperative ideals with practical adaptation, ensuring both individual viability and collective resource preservation across diverse opponent behaviors.
'''

description_COOPERATIVE_8 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperatively but adjusts based on observed patterns, always maintaining a bias toward cooperation when the resource can sustain it.

## Decision Framework

### 1. **Stock Health Assessment**
First, categorize the current stock level:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. **Opponent Behavior Analysis**
Track the cooperation rate of other players over recent rounds:
- **Recent cooperation rate** = (Number of C actions by others in last min(3, current_round-1) rounds) / (n-1) × min(3, current_round-1)
- **Overall cooperation rate** = (Total C actions by others since round 1) / ((n-1) × (current_round-1))

### 3. **Core Decision Rules**

```pseudocode
function decide_action(current_round, stock, capacity, n, r, history):
    stock_health = assess_stock_health(stock, capacity)
    
    // First round: Always cooperate
    if current_round == 1:
        return C
    
    recent_coop_rate = calculate_recent_cooperation_rate(history, current_round, n)
    overall_coop_rate = calculate_overall_cooperation_rate(history, current_round, n)
    
    // Critical stock: Cooperate unless others are consistently defecting
    if stock_health == "Critical":
        if recent_coop_rate >= 0.3 OR overall_coop_rate >= 0.4:
            return C
        else:
            return D  // Defensive defection when resource is dying anyway
    
    // Healthy stock: Cooperate unless facing persistent defectors
    if stock_health == "Healthy":
        if recent_coop_rate >= 0.4:
            return C
        elif overall_coop_rate >= 0.5:
            return C  // Give benefit of doubt based on historical behavior
        else:
            // Conditional cooperation: defect to signal, but return to cooperation
            if (current_round % 3 == 0):  // Periodic cooperation signal
                return C
            else:
                return D
    
    // Stressed stock: Balanced approach
    if stock_health == "Stressed":
        if recent_coop_rate >= 0.5:
            return C
        elif recent_coop_rate >= 0.3 AND overall_coop_rate >= 0.4:
            return C
        else:
            // Tit-for-tat with forgiveness
            if majority_cooperated_last_round(history, current_round, n):
                return C
            else:
                return D
```

## 4. **Edge Case Handling**

### First Round
- Always cooperate to signal cooperative intent and establish good initial conditions

### Last Round  
- If stock is Healthy or Stressed: Cooperate (maintain reputation for future interactions in tournament)
- If stock is Critical and recent_coop_rate < 0.2: Defect (extract remaining value)

### Stock Depletion
- If stock falls to 0: Continue cooperating to allow regeneration unless it's the final round

### High Defection Environment
- Never defect for more than 2 consecutive rounds
- Always return to cooperation periodically (every 3rd round minimum) to test if cooperation can be reestablished

## 5. **Adaptive Features**

### Forgiveness Mechanism
- Weight recent behavior more heavily than distant past
- Periodically "test" cooperation even with historically uncooperative opponents

### Stock Recovery Support
- When stock is recovering from Critical levels, increase cooperation threshold to nurture regeneration

### Endgame Considerations
- In final 20% of rounds, slightly increase cooperation to maintain sustainable stock levels

## 6. **Robustness Properties**

**Against Pure Cooperators**: Consistently cooperates, maximizing mutual benefit

**Against Pure Defectors**: Adapts by reducing cooperation frequency but maintains periodic cooperation attempts

**Against Conditional Cooperators**: Matches their cooperation patterns while maintaining slight cooperative bias

**Against Random Players**: Responds to aggregate cooperation levels rather than individual unpredictability

**Against Exploiters**: The forgiveness mechanism and periodic cooperation prevent complete breakdown while the adaptive thresholds limit exploitation

This strategy balances the need to be cooperative with the reality of facing diverse opponents, always maintaining hope for sustainable resource management while protecting against exploitation.
'''

description_COOPERATIVE_9 = '''
## Adaptive Cooperative Strategy: "Sustainable Steward"

### Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It balances cooperation with self-protection through adaptive punishment and forgiveness mechanisms.

### Decision Rules

#### 1. Stock Health Assessment
First, evaluate the current stock health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

#### 2. Cooperation Tendency Calculation
For each opponent j, maintain a cooperation score based on recent behavior:
```
cooperation_score[j] = weighted average of last min(round, 5) actions
where C = 1.0, D = 0.0, with more recent actions weighted higher
```

Calculate overall cooperation level:
```
avg_cooperation = mean(cooperation_score for all opponents)
```

#### 3. Main Decision Logic

**Round 1**: Always Cooperate (establish cooperative intent)

**Rounds 2 to r-1**:
```
if stock_health == "Critical":
    if avg_cooperation < 0.3:
        Defect (survival mode - resource nearly depleted)
    else:
        Cooperate (give cooperation one more chance)
        
elif stock_health == "Stressed":
    if avg_cooperation < 0.5:
        Defect with probability 0.7 (conditional punishment)
    else:
        Cooperate (reward group cooperation)
        
else: # Healthy stock
    if avg_cooperation < 0.4:
        Defect with probability 0.6 (punishment for low cooperation)
    elif avg_cooperation > 0.7:
        Cooperate (reward high cooperation)
    else:
        Cooperate with probability 0.8 (default cooperation with slight caution)
```

**Final Round (r)**: 
```
if avg_cooperation > 0.6:
    Cooperate (reward consistent cooperators)
else:
    Defect (no future to protect)
```

### Key Features

#### Adaptive Punishment
- Punishment severity scales with both stock depletion and opponent defection rates
- Uses probabilistic punishment to avoid being too predictable
- Maintains some cooperation even when punishing to allow for recovery

#### Forgiveness Mechanism
- Cooperation scores use weighted averages that allow recovery from past defections
- Recent actions matter more than distant ones
- Always gives at least one chance for redemption when stock is not critical

#### Stock Conservation Priority
- Becomes increasingly protective as stock depletes
- Balances individual survival with group welfare
- Recognizes that some defection may be necessary to prevent total collapse

#### Robust Against Exploitation
- Doesn't cooperate unconditionally
- Responds to exploitation with graduated punishment
- Maintains unpredictability through probabilistic responses

### Edge Cases

1. **All opponents always defect**: Strategy will switch to predominantly defecting while stock remains, preventing complete exploitation

2. **All opponents always cooperate**: Strategy will cooperate consistently, maximizing group welfare

3. **Mixed strategies**: Adapts punishment/reward to the specific cooperation level observed

4. **Stock near zero**: Prioritizes survival while still giving cooperation a chance if others are cooperative

5. **Early vs. Late rounds**: More forgiving early (relationship building) and strategic in final round (no future consequences)

This strategy is cooperative by default but not naive, adaptive to opponent behavior, and prioritizes long-term sustainability while protecting against exploitation.
'''

description_COOPERATIVE_10 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving to occasional defections and adaptive to different opponent behaviors. It aims to maintain the common pool resource while incentivizing cooperation through conditional reciprocity.

## Decision Rules

### 1. Stock Health Assessment
First, evaluate the current stock health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.4 × capacity

### 2. Cooperation Threshold
Calculate a dynamic cooperation threshold based on observed opponent behavior:
- Track each opponent's cooperation rate over the last min(5, current_round) rounds
- **Cooperative opponents**: cooperation rate ≥ 0.6
- **Mixed opponents**: 0.3 ≤ cooperation rate < 0.6
- **Defective opponents**: cooperation rate < 0.3

### 3. Main Decision Logic

```pseudocode
if round == 1:
    return COOPERATE  // Start cooperatively
    
if round == final_round:
    if stock_health == "Critical":
        return COOPERATE  // Preserve what's left
    else:
        return DEFECT    // Last chance to maximize payoff

// Calculate cooperation incentive
cooperative_opponents = count opponents with cooperation_rate ≥ 0.6
cooperation_incentive = cooperative_opponents / (n-1)

// Main decision tree
if stock_health == "Critical":
    return COOPERATE  // Always preserve when critical
    
elif stock_health == "Moderate":
    if cooperation_incentive ≥ 0.5:
        return COOPERATE
    else:
        return DEFECT    // Grab resources before others do
        
else: // stock_health == "Healthy"
    if cooperation_incentive ≥ 0.3:
        return COOPERATE
    elif cooperation_incentive ≥ 0.1:
        // Probabilistic cooperation to encourage others
        return COOPERATE with probability 0.7
    else:
        return DEFECT    // Most opponents are defecting
```

## Key Features

### 1. **Forgiveness Mechanism**
- Uses a rolling window (last 5 rounds) to assess opponent behavior, allowing players to recover from past defections
- Doesn't permanently label opponents as defectors

### 2. **Stock Conservation Priority**
- Always cooperates when stock is critical (< 40% capacity) to prevent collapse
- Balances immediate gains with long-term sustainability

### 3. **Graduated Response**
- Different cooperation thresholds based on stock health
- More lenient when resources are abundant, stricter when scarce

### 4. **Probabilistic Elements**
- Uses randomized cooperation in mixed scenarios to avoid being perfectly predictable
- Helps break deadlocks and can inspire cooperation

### 5. **End-Game Handling**
- Defects in final round unless stock is critical
- Balances tournament scoring with resource preservation

## Edge Cases

### First Round
Always cooperate to signal cooperative intent and establish positive precedent.

### Very Small Groups (n=2)
The strategy works the same but becomes more sensitive to the single opponent's behavior.

### Short Games (r≤3)
The rolling window adapts to use all available history, making the strategy functional even in brief interactions.

### Resource Abundance
When stock consistently stays near capacity, the strategy becomes more cooperative, taking advantage of abundant resources.

### Resource Scarcity
Automatically shifts to preservation mode when stock drops below 40% capacity.

## Strategic Rationale

This strategy succeeds by:

1. **Building Trust**: Starting cooperatively and maintaining cooperation when others reciprocate
2. **Preventing Tragedy**: Protecting the resource from collapse through critical stock preservation
3. **Adapting to Context**: Adjusting behavior based on both resource state and opponent patterns
4. **Encouraging Cooperation**: Using probabilistic cooperation and forgiveness to potentially convert mixed players
5. **Maintaining Competitiveness**: Not being exploited by consistently defecting opponents

The strategy is designed to perform well against a wide variety of opponent strategies while maintaining the cooperative goal of sustainable resource management.
'''

description_COOPERATIVE_11 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the resource pool while encouraging cooperation through measured responses and forgiveness.

## Strategy Components

### 1. Decision Rules

**Primary Cooperation Threshold:**
- **Cooperate (C)** when: `stock >= capacity * 0.4`
- **Defect (D)** when: `stock < capacity * 0.4` (survival mode)

**Adaptive Cooperation Level:**
- Track the **cooperation rate** of all players in the last 3 rounds
- If overall cooperation rate > 60%: Increase personal cooperation tendency
- If overall cooperation rate < 30%: Become more defensive but maintain minimum cooperation

**Forgiveness Mechanism:**
- After observing widespread defection, give opponents 2 rounds to return to cooperation
- If they improve, gradually return to full cooperation
- If they continue defecting, match their aggression level but never go below 25% cooperation rate

### 2. Edge Case Handling

**First Round:**
- Always **Cooperate** - establish cooperative intent and gather information about opponents

**Last Round:**
- If `current_round == r`:
  - Cooperate if `stock >= capacity * 0.3`
  - Defect only if stock is critically low AND defecting would provide meaningful advantage

**Critical Stock Situations:**
- If `stock <= n * 2`: Enter "conservation mode"
  - Cooperate unless doing so would leave stock < n
  - Priority is keeping the resource alive for remaining rounds

**Stock Recovery Monitoring:**
- If stock has been growing for 2+ consecutive rounds, increase cooperation rate
- If stock has been declining for 3+ consecutive rounds, implement "brake" behavior (force at least 50% personal cooperation)

### 3. Adaptive Response System

**Opponent Behavior Classification:**
```pseudocode
For each round:
1. Calculate opponent_defection_rate = (total_defectors) / (n-1)
2. Update 3-round moving average of defection rates
3. Classify environment:
   - COOPERATIVE: avg_defection_rate < 0.3
   - MIXED: 0.3 ≤ avg_defection_rate ≤ 0.7  
   - HOSTILE: avg_defection_rate > 0.7
```

**Response Rules:**
- **COOPERATIVE environment**: Cooperate 90% of the time (only defect in emergencies)
- **MIXED environment**: Match the cooperation level (if 50% cooperate, cooperate 50% of time)
- **HOSTILE environment**: Cooperate 25% of the time (maintain minimum sustainability contribution)

### 4. Detailed Algorithm

```pseudocode
Function decide_action(round, stock, capacity, n, history):
    // Emergency override
    if stock < capacity * 0.2:
        if stock < n:
            return DEFECT  // Survival necessity
        else:
            return COOPERATE  // Help recovery
    
    // First round
    if round == 1:
        return COOPERATE
    
    // Calculate recent cooperation rate
    recent_coop_rate = calculate_cooperation_rate(history, last_3_rounds)
    
    // Determine environment
    if recent_coop_rate > 0.7:
        environment = COOPERATIVE
        base_cooperation_prob = 0.9
    else if recent_coop_rate > 0.3:
        environment = MIXED
        base_cooperation_prob = recent_coop_rate
    else:
        environment = HOSTILE
        base_cooperation_prob = 0.25
    
    // Stock health adjustment
    stock_ratio = stock / capacity
    if stock_ratio > 0.8:
        cooperation_boost = 0.1
    else if stock_ratio < 0.4:
        cooperation_penalty = 0.2
    else:
        adjustment = 0
    
    // Final decision
    final_coop_prob = max(0.25, min(0.95, 
        base_cooperation_prob + stock_health_adjustment))
    
    if random() < final_coop_prob:
        return COOPERATE
    else:
        return DEFECT
```

### 5. Key Features

**Robustness:**
- Never cooperates less than 25% of the time (maintains minimum sustainability)
- Never cooperates more than 95% of the time (maintains some self-interest)
- Has emergency protocols for critical stock levels

**Adaptiveness:**
- Responds to opponent behavior within 3 rounds
- Adjusts strategy based on stock health
- Balances immediate payoffs with long-term sustainability

**Cooperation Focus:**
- Starts cooperatively to signal intent
- Rewards cooperative environments with higher cooperation
- Maintains cooperative baseline even in hostile environments
- Prioritizes resource sustainability over short-term gains

This strategy aims to be the "responsible player" that keeps the resource pool viable while adapting intelligently to various opponent behaviors, from pure cooperators to aggressive defectors.
'''

description_COOPERATIVE_12 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maintain long-term resource sustainability while being robust to various opponent behaviors. It balances cooperation with strategic defection when necessary to prevent resource collapse and punish excessive exploitation.

## Decision Framework

### 1. Stock Health Assessment
First, categorize the current stock level:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Opponent Behavior Analysis
Track each opponent's cooperation rate over the last 3 rounds (or all rounds if fewer than 3):
- **Cooperative**: cooperation rate ≥ 0.67
- **Mixed**: 0.33 < cooperation rate < 0.67
- **Exploitative**: cooperation rate ≤ 0.33

### 3. Decision Rules

#### Round 1 (No History)
- Always **COOPERATE** to establish cooperative intent and preserve initial stock

#### Rounds 2 to r-1 (Middle Game)
Apply the following hierarchy:

**Priority 1 - Emergency Stock Protection:**
- If stock is **Critical** AND total defection rate last round > 0.5:
  - **DEFECT** (get fair share before potential collapse)

**Priority 2 - Reciprocal Cooperation:**
- If stock is **Healthy** AND majority of opponents were **Cooperative** last round:
  - **COOPERATE**

**Priority 3 - Punishment Phase:**
- If ≥ 50% of opponents are **Exploitative** AND stock is **Stressed** or worse:
  - **DEFECT** for 2 consecutive rounds to signal displeasure
  - Track punishment rounds to avoid getting stuck in defection

**Priority 4 - Recovery Cooperation:**
- If currently in punishment phase BUT stock improved by ≥ 10% last round:
  - End punishment early and **COOPERATE**

**Priority 5 - Default Conditional Cooperation:**
- If stock is **Healthy** or **Stressed**:
  - **COOPERATE** if ≥ 50% of opponents cooperated last round
  - **DEFECT** if < 50% of opponents cooperated last round

#### Final Round (Round r)
- If stock is **Critical**: **DEFECT** (maximize final payoff)
- If stock is **Healthy**: **COOPERATE** (reward good stewardship)
- If stock is **Stressed**: Mirror the majority action from round r-1

## Edge Case Handling

### First 3 Rounds (Limited History)
- Use available history but weight recent rounds more heavily
- Be more forgiving of occasional defections
- Default to cooperation when opponent behavior is ambiguous

### Stock Depletion Scenarios
- If stock drops below 0.1 × capacity: Always defect until stock recovers above 0.2 × capacity
- If stock reaches exactly 0: The game effectively ends early for all practical purposes

### Opponent Classification Updates
- Recalculate opponent types every round based on rolling 3-round window
- Give slight forgiveness bonus: if opponent was exploitative but cooperated for 2 consecutive rounds, temporarily treat as mixed

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, opponent_history):
    stock_health = classify_stock_health(stock, capacity)
    
    if round == 1:
        return COOPERATE
    
    opponent_types = analyze_opponents(opponent_history, round)
    last_round_defection_rate = calculate_defection_rate(opponent_history, round-1)
    
    // Emergency protection
    if stock_health == CRITICAL and last_round_defection_rate > 0.5:
        return DEFECT
    
    // Reciprocal cooperation
    if stock_health == HEALTHY and majority_cooperative_last_round(opponent_history):
        return COOPERATE
    
    // Punishment logic
    if exploitative_majority(opponent_types) and stock_health != HEALTHY:
        if not in_punishment_phase():
            start_punishment()
            return DEFECT
        elif punishment_rounds < 2:
            continue_punishment()
            return DEFECT
        else:
            end_punishment()
    
    // Recovery check
    if in_punishment_phase() and stock_improved_significantly():
        end_punishment()
        return COOPERATE
    
    // Final round special case
    if round == final_round:
        return handle_final_round(stock_health, opponent_history)
    
    // Default conditional cooperation
    if majority_cooperated_last_round(opponent_history):
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Rationale

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive Punishment**: Responds to exploitation but doesn't get trapped in permanent defection
3. **Forgiveness Mechanism**: Allows recovery of cooperation when opponents improve behavior
4. **Emergency Protocols**: Protects against resource collapse while remaining fundamentally cooperative
5. **Signal Clarity**: Actions send clear messages about acceptable behavior thresholds

This strategy should perform well against both cooperative opponents (through reciprocation) and mixed populations (through adaptive responses) while maintaining the resource base for sustained play.
'''

description_COOPERATIVE_13 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances long-term sustainability with adaptive responsiveness to opponent behavior. It aims to maintain cooperation when the resource is healthy while protecting against exploitation through measured defection when necessary.

## Decision Rules

### 1. Stock Health Assessment
- **Healthy Stock**: stock ≥ 0.7 × capacity
- **Moderate Stock**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical Stock**: stock < 0.3 × capacity

### 2. Cooperation Threshold System
Maintain a dynamic cooperation threshold based on observed opponent behavior:
- **Initial threshold**: 0.6 (cooperate if ≥60% of opponents cooperated last round)
- **Adjustment rule**: 
  - If stock is growing or stable: decrease threshold by 0.05 (become more cooperative)
  - If stock is declining rapidly: increase threshold by 0.1 (become more defensive)
  - Threshold bounds: [0.2, 0.8]

### 3. Primary Decision Logic

**Round 1**: Always COOPERATE (establish cooperative intent)

**Subsequent rounds**:
```
IF stock_health == "Critical":
    IF more than 50% of opponents defected last round:
        DEFECT (emergency resource protection)
    ELSE:
        COOPERATE (give cooperation a chance even in crisis)

ELSE IF stock_health == "Healthy":
    IF cooperation_rate_last_round ≥ cooperation_threshold:
        COOPERATE
    ELSE IF cooperation_rate_last_round ≥ 0.3:
        COOPERATE (encourage cooperation when stock is healthy)
    ELSE:
        DEFECT (protect against systematic exploitation)

ELSE: // Moderate stock
    IF cooperation_rate_last_round ≥ cooperation_threshold:
        COOPERATE
    ELSE:
        DEFECT
```

### 4. Edge Case Handling

**Last Round**: 
- If stock > 0.5 × capacity: COOPERATE (maintain cooperative reputation)
- Else: Use standard decision logic

**Consecutive Defection Pattern**:
- If all opponents defected for 2+ consecutive rounds AND stock declining:
  - DEFECT until at least one opponent cooperates
  - Then immediately return to standard logic

**Stock Recovery Bonus**:
- If stock increased by >20% from previous round due to low consumption:
  - Temporarily lower cooperation threshold by 0.1 for next round

## Key Features

### Adaptive Learning
- Continuously adjusts cooperation threshold based on stock trajectory
- Responds to both immediate opponent actions and medium-term trends

### Graduated Response
- Doesn't immediately punish single defections when resource is healthy
- Escalates response intensity as stock becomes more critical

### Recovery Incentive
- Quick to return to cooperation after periods of mutual defection
- Rewards collective conservation efforts with increased cooperation

### Sustainability Focus
- Prioritizes long-term resource health over short-term individual gains
- Uses stock level as primary decision factor, not just opponent behavior

## Robustness Considerations

1. **Against Always-Defect**: Will eventually defect in response but continues testing for cooperation opportunities
2. **Against Tit-for-Tat**: Will maintain stable cooperation in healthy conditions
3. **Against Random**: Adapts threshold based on average cooperation rate
4. **Against Conditional Cooperators**: Will find stable cooperation equilibrium
5. **Against Mixed Strategies**: Uses threshold system to find optimal response level

This strategy prioritizes the collective good while protecting against exploitation, adapting its cooperation level based on both resource health and opponent responsiveness to maintain long-term sustainability.
'''

description_COOPERATIVE_14 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while remaining adaptive to opponent behavior. It assumes that rational players will eventually recognize the mutual benefits of conservation when faced with resource depletion.

## Decision Framework

### Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** for the first 3 rounds or first 15% of total rounds (whichever is larger)
- This establishes good faith and allows observation of opponent tendencies
- Exception: If stock falls below critical threshold (stock < n) in round 1 or 2, switch to conditional cooperation immediately

### Core Decision Rule (After Initial Phase)

The strategy uses a **Stock-Based Cooperative Threshold** with behavioral adaptation:

```pseudocode
IF current_stock >= sustainability_threshold:
    IF cooperation_ratio_last_3_rounds >= 0.6:
        COOPERATE
    ELSE:
        Apply graduated response based on defection severity
ELSE:
    Apply crisis management protocol
```

### Key Thresholds and Metrics

1. **Sustainability Threshold**: `capacity * 0.7`
   - Above this level, the resource can sustain moderate consumption
   - Below this level, conservation becomes critical

2. **Critical Threshold**: `capacity * 0.3`
   - Below this level, resource collapse is imminent
   - Triggers emergency cooperation appeals

3. **Cooperation Ratio**: Track percentage of opponent cooperative moves over last 3 rounds

### Detailed Decision Logic

#### When Stock ≥ Sustainability Threshold (Abundance Phase)
- If ≥60% opponents cooperated in last 3 rounds: **COOPERATE**
- If 40-59% opponents cooperated: **COOPERATE** with 70% probability, **DEFECT** with 30%
- If <40% opponents cooperated: **DEFECT**, but return to cooperation if stock drops significantly

#### When Critical ≤ Stock < Sustainability (Warning Phase)
- **ALWAYS COOPERATE** unless <20% of opponents cooperated in last 3 rounds
- Send strong "conservation signal" by consistent cooperation
- Only defect if opponents show persistent exploitation (≥80% defection rate over 5+ rounds)

#### When Stock < Critical Threshold (Crisis Phase)
- **ALWAYS COOPERATE** regardless of opponent behavior
- This is survival mode - resource collapse hurts everyone
- Exception: If stock = 0 and this is not the final round, mirror the majority action from previous round

### Endgame Considerations

#### Final Round
- If stock ≥ sustainability threshold: **COOPERATE** (leave resources for hypothetical future)
- If stock < sustainability threshold: Match the most common opponent action from the last round

#### Final 20% of Rounds
- Increase cooperation probability by 20% across all decision rules
- This accounts for the reduced future benefit of current defection

### Adaptation Mechanisms

1. **Forgiveness Protocol**: Every 5 rounds, reset behavioral tracking to allow opponents to "redeem" themselves

2. **Reciprocity Scaling**: If an opponent consistently cooperates (≥80% over 5+ rounds), give them extra weight in cooperation calculations

3. **Tragedy Prevention**: If total consumption in any round would drive stock below 10% of capacity, always cooperate

### Edge Case Handling

1. **First Round**: Always cooperate
2. **Stock = 0**: If not final round, cooperate; if final round, defect
3. **All Opponents Always Defect**: Continue cooperating until crisis phase, then match defection only if stock = 0
4. **Highly Variable Opponents**: Use longer averaging windows (5 rounds instead of 3) for behavioral assessment

## Strategic Rationale

This strategy balances several key principles:

1. **Sustainability First**: Prioritizes resource preservation, especially in crisis situations
2. **Conditional Cooperation**: Rewards cooperative behavior while protecting against exploitation
3. **Adaptive Forgiveness**: Allows opponents to change strategies without permanent punishment
4. **Crisis Unity**: Recognizes that resource collapse hurts everyone, promoting cooperation when stakes are highest
5. **Graduated Response**: Avoids harsh retaliation that could trigger destructive cycles

The strategy is designed to work well with other cooperative strategies while maintaining resilience against exploitative ones. It assumes that even selfish players will recognize the value of cooperation when facing resource scarcity.
'''

description_COOPERATIVE_15 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances immediate cooperation with long-term resource sustainability, adapting to opponent behavior while maintaining a fundamentally cooperative stance. It views the resource as a shared asset requiring collective stewardship.

## Decision Framework

### Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the stock drops below a critical threshold

### Adaptive Response System
The strategy uses three key metrics to guide decisions:

1. **Stock Health Ratio**: current_stock / capacity
2. **Cooperation Rate**: fraction of players who cooperated in the last round
3. **Stock Trend**: whether stock is increasing, stable, or declining over the last 2-3 rounds

### Decision Rules

#### Primary Decision Logic:
```pseudocode
if round == 1:
    return COOPERATE

stock_health = current_stock / capacity
recent_cooperation_rate = count_cooperators_last_round / n
stock_trend = calculate_stock_trend(last_3_rounds)

// Emergency defection to prevent total collapse
if stock_health < 0.15:
    return DEFECT

// Strong cooperation incentive when stock is healthy
if stock_health > 0.7 and recent_cooperation_rate >= 0.5:
    return COOPERATE

// Adaptive cooperation based on others' behavior
if recent_cooperation_rate >= 0.6:
    return COOPERATE
elif recent_cooperation_rate >= 0.3:
    // Probabilistic cooperation - higher chance if stock is healthier
    cooperation_probability = 0.3 + (stock_health * 0.5)
    return random_choice(COOPERATE, DEFECT, cooperation_probability)
else:
    // Minority cooperator strategy when few others cooperate
    if stock_health > 0.25 and am_willing_to_be_minority_cooperator():
        return COOPERATE
    else:
        return DEFECT
```

### Special Case Handling

#### Last Round Behavior:
- If stock_health > 0.5: **Cooperate** (leave something for others)
- If stock_health ≤ 0.5: **Defect** (extract remaining value)

#### Forgiveness Mechanism:
- If the stock recovers to >60% capacity after a period of low cooperation, reset to cooperative stance
- This prevents permanent defection spirals

#### Minority Cooperator Logic:
```pseudocode
function am_willing_to_be_minority_cooperator():
    // Be willing to sustain cooperation even when outnumbered
    // if we've seen evidence that cooperation can recover
    if has_seen_cooperation_recovery_before():
        return true
    if round_number < total_rounds * 0.7:  // Not in final 30%
        return true
    return false
```

## Adaptive Features

### Learning Component:
- Track historical patterns: "When cooperation rate was X and stock was Y, what happened next?"
- Identify "tipping points" where cooperation suddenly increased or decreased
- Adjust cooperation thresholds based on observed group dynamics

### Resilience Mechanisms:
1. **Gradual Escalation**: Don't immediately defect when others do - try reduced cooperation first
2. **Quick Forgiveness**: Return to cooperation quickly when others show cooperative signals
3. **Stock Protection**: Prioritize resource sustainability over short-term gains

### Dynamic Thresholds:
- Cooperation thresholds adapt based on group size (larger groups need higher cooperation rates)
- Stock health thresholds adjust based on remaining rounds (be more conservative early, more extractive near the end)

## Strategic Rationale

This strategy is designed to:
1. **Signal Cooperation**: Start cooperatively and return to cooperation when possible
2. **Adapt to Reality**: Adjust behavior based on what others actually do, not what they should do
3. **Protect the Resource**: Prioritize long-term sustainability while being realistic about tragedy-of-commons dynamics
4. **Be Forgiving**: Don't permanently punish defection - allow for recovery
5. **Handle Endgames**: Recognize that final rounds change incentives

The strategy aims to be the "responsible adult" in the room - cooperating when possible, adapting when necessary, but never completely abandoning the cooperative ideal or the resource's long-term health.
'''

description_COOPERATIVE_16 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the resource pool while defending against exploitation through measured responses.

## Decision Framework

### 1. Stock Health Assessment
First, evaluate the resource health using a sustainability threshold:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Cooperation Index Calculation
Track each opponent's cooperation rate over a sliding window:
- Use last min(5, current_round-1) rounds of history
- cooperation_rate[player] = (times_cooperated) / (total_observed_rounds)
- Overall cooperation level = average of all opponents' cooperation rates

### 3. Main Decision Rules

**Round 1: Always Cooperate**
- Start optimistically to signal cooperative intent
- Establishes baseline for future reciprocity

**Subsequent Rounds:**

```pseudocode
if stock_health == "Critical":
    # Emergency mode - always cooperate to rebuild
    return COOPERATE
    
elif stock_health == "Healthy":
    if overall_cooperation_rate ≥ 0.6:
        # Reward good cooperation with continued cooperation
        return COOPERATE
    elif overall_cooperation_rate ≥ 0.3:
        # Mixed behavior - use tit-for-tat with forgiveness
        if majority_cooperated_last_round:
            return COOPERATE
        else:
            return DEFECT with probability 0.7
    else:
        # Mostly defectors - defensive defection
        return DEFECT
        
elif stock_health == "Stressed":
    if overall_cooperation_rate ≥ 0.5:
        # Still enough cooperation to maintain resource
        return COOPERATE
    else:
        # Resource under pressure and low cooperation
        if rounds_remaining ≤ 3:
            # End game - defect if others are defecting
            return DEFECT
        else:
            # Try to signal need for cooperation
            return COOPERATE with probability 0.8
```

### 4. Special Cases

**Last Round Handling:**
- If stock is healthy (≥ 0.7 × capacity): Cooperate to maintain reputation
- If stock is critical (< 0.3 × capacity): Still cooperate to avoid complete depletion
- Otherwise: Match the majority action from previous round

**Exploitation Protection:**
- If any player has defected ≥ 80% of recent rounds AND stock is not critical:
  - Respond with measured defection (probability based on their defection rate)
  - Never fully abandon cooperation unless stock is healthy

**Recovery Mechanism:**
- When stock drops below 0.5 × capacity, increase cooperation probability by 0.2
- Signal to others that resource needs protection

### 5. Adaptive Elements

**Learning Component:**
- Track which strategies work best against current opponents
- If consistent cooperation isn't reciprocated after 3 rounds, become more selective
- If opponents show reciprocity, gradually increase cooperation

**Robustness Features:**
- Never defect more than 2 consecutive rounds (prevents reputation damage)
- Always cooperate if stock would hit 0 with current consumption patterns
- Bias toward cooperation when uncertain (better long-term outcomes)

## Strategic Reasoning

**Cooperative Alignment:**
- Prioritizes resource sustainability over short-term gains
- Rewards cooperative behavior from others
- Maintains cooperation even under pressure to encourage others

**Adaptiveness:**
- Responds to opponent behavior patterns rather than fixed rules
- Adjusts based on resource health and game progression
- Balances forgiveness with exploitation protection

**Tournament Robustness:**
- Works against pure cooperators, pure defectors, and mixed strategies
- Doesn't rely on specific coordination mechanisms
- Maintains positive reputation while defending against exploitation

This strategy aims to be the "responsible adult" in the room - consistently working toward the common good while being smart enough not to be taken advantage of completely.
'''

description_COOPERATIVE_17 = '''
## Adaptive Cooperative Strategy: "Graduated Reciprocity with Stock Conservation"

### Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving enough to maintain cooperation and tough enough to discourage exploitation. It adapts based on both stock health and opponent behavior patterns.

### Decision Framework

#### **Primary Decision Rule:**
```
IF stock_health < critical_threshold AND opponents_mostly_defecting:
    DEFECT (survival mode)
ELSE IF cooperation_momentum > defection_momentum:
    COOPERATE 
ELSE IF recent_exploitation_detected:
    DEFECT (punishment phase)
ELSE:
    COOPERATE (default cooperative stance)
```

### Detailed Strategy Components

#### **1. Stock Health Assessment**
- **Healthy Stock**: stock > 0.7 × capacity → Strong bias toward cooperation
- **Moderate Stock**: 0.3 × capacity ≤ stock ≤ 0.7 × capacity → Conditional cooperation
- **Critical Stock**: stock < 0.3 × capacity → Defensive mode, prioritize conservation

#### **2. Opponent Behavior Analysis**
Track three metrics over a sliding window of the last min(5, current_round-1) rounds:

- **Cooperation Rate**: Percentage of opponents choosing C
- **Trend Analysis**: Is cooperation increasing or decreasing?
- **Exploitation Detection**: Am I being consistently exploited (cooperating while others defect)?

#### **3. Specific Decision Rules**

**Round 1**: Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1**:
1. **Critical Stock Protection**: If stock < 0.2 × capacity, DEFECT regardless of other factors
2. **High Cooperation Environment**: If ≥70% of opponents cooperated last round, COOPERATE
3. **Exploitation Response**: If I cooperated in ≥3 of last 4 rounds while <50% of opponents cooperated, DEFECT for 1-2 rounds
4. **Reciprocal Cooperation**: If cooperation rate is improving (trend positive), COOPERATE
5. **Moderate Mixed Behavior**: If 30-70% cooperation rate with stable/declining trend, match the approximate cooperation rate of opponents
6. **High Defection Environment**: If <30% of opponents cooperating consistently, DEFECT

**Final Round**: 
- If stock > 0.5 × capacity: COOPERATE (maintain long-term reputation)
- If stock ≤ 0.5 × capacity: DEFECT (extract remaining value)

#### **4. Adaptive Mechanisms**

**Forgiveness Protocol**: After punishing defection with 1-2 rounds of defection, always attempt to return to cooperation if:
- Stock health improves, OR
- Opponent cooperation rate increases above 40%

**Graduated Response**: 
- First instance of exploitation → 1 round of defection
- Repeated exploitation → 2 rounds of defection
- Persistent exploitation (>60% of recent rounds) → Match opponent defection rate

**Stock Crisis Management**: When stock falls below critical thresholds, temporarily abandon pure cooperation:
- Stock < 0.3 × capacity: Cooperate only if ≥80% of others cooperated last round
- Stock < 0.2 × capacity: Always defect until stock recovers above 0.3 × capacity

#### **5. Edge Case Handling**

**Very Short Games** (r ≤ 3): Cooperate first round, then mirror the majority behavior
**Large Player Count** (n > 10): Use more conservative thresholds (require 80% cooperation rate to cooperate)
**Stock Depletion Recovery**: If stock reaches 0, cooperate immediately to enable regeneration
**Near-Capacity Stock**: If stock > 0.95 × capacity, always cooperate to maintain optimal growth

### Strategy Pseudocode

```
FUNCTION decide_action(current_round, stock, capacity, n, history):
    cooperation_threshold = adaptive_threshold(stock, capacity)
    
    IF current_round == 1:
        RETURN COOPERATE
        
    IF stock < 0.2 * capacity:
        RETURN DEFECT  // Crisis mode
        
    recent_coop_rate = calculate_opponent_cooperation_rate(history, window=5)
    exploitation_score = calculate_exploitation_level(history, window=4)
    
    IF recent_coop_rate >= cooperation_threshold AND exploitation_score < 0.6:
        RETURN COOPERATE
    ELSE IF exploitation_score >= 0.6:
        RETURN DEFECT  // Punishment
    ELSE:
        // Match environment with slight cooperative bias
        RETURN (random() < recent_coop_rate + 0.1) ? COOPERATE : DEFECT
        
FUNCTION adaptive_threshold(stock, capacity):
    stock_health = stock / capacity
    IF stock_health > 0.7: RETURN 0.3  // Generous when abundant
    IF stock_health > 0.4: RETURN 0.5  // Moderate requirements  
    ELSE: RETURN 0.8  // Strict when scarce
```

### Robustness Features

1. **Adaptability**: Adjusts cooperation thresholds based on stock health
2. **Forgiveness**: Always attempts to rebuild cooperation after punishment
3. **Protection**: Defends against consistent exploitation while remaining cooperative
4. **Sustainability**: Prioritizes long-term stock health over short-term gains
5. **Flexibility**: Handles various game lengths and player counts effectively

This strategy balances cooperation with pragmatism, encouraging sustainable resource use while protecting against exploitation and adapting to the evolving dynamics of the game.
'''

description_COOPERATIVE_18 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It operates as a "sustainable steward" that tries to maintain the resource pool while adapting to others' behavior patterns.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3 or until stock drops below 50% capacity)
- **Always play C** to signal cooperative intent and test waters
- Track other players' behavior patterns during this phase
- Exception: If stock falls below 25% capacity in round 1, immediately switch to adaptive mode

### 2. Adaptive Phase (Main decision engine)
The strategy uses a weighted scoring system based on three factors:

#### Factor A: Stock Health Assessment
- If `stock ≥ 0.75 × capacity`: +2 cooperation points
- If `0.5 × capacity ≤ stock < 0.75 × capacity`: +1 cooperation point  
- If `0.25 × capacity ≤ stock < 0.5 × capacity`: 0 points
- If `stock < 0.25 × capacity`: -2 cooperation points (crisis mode)

#### Factor B: Opponent Cooperation Rate
Calculate cooperation rate of all opponents over last 3 rounds (or all rounds if fewer):
- If `coop_rate ≥ 0.7`: +2 cooperation points
- If `0.4 ≤ coop_rate < 0.7`: +1 cooperation point
- If `0.2 ≤ coop_rate < 0.4`: -1 cooperation point
- If `coop_rate < 0.2`: -2 cooperation points

#### Factor C: Trend Analysis
Compare current stock to stock 2 rounds ago:
- If stock is increasing or stable (≥ 95% of previous): +1 cooperation point
- If stock is declining moderately (85-95% of previous): 0 points
- If stock is declining rapidly (< 85% of previous): -1 cooperation point

#### Decision Rule:
- **Total Score ≥ 2**: Play C
- **Total Score = 1**: Play C with 70% probability, D with 30%
- **Total Score = 0**: Play C with 40% probability, D with 60%
- **Total Score ≤ -1**: Play D

### 3. Crisis Recovery Mode
When stock falls below 15% capacity:
- **Always play C** to attempt resource recovery
- Continue until stock recovers to >30% capacity or game ends
- This prevents complete resource collapse

### 4. Endgame Strategy (Last 3 rounds)
- **Final round**: Always play D (no future to preserve)
- **Second-to-last round**: Play D if opponents' recent cooperation rate < 0.3, otherwise C
- **Third-to-last round**: Use standard adaptive rules but with slightly increased defection probability (multiply cooperation probability by 0.8)

## Edge Cases and Special Situations

### First Round
- Always play C to establish cooperative reputation

### Stock Depletion Scenarios
- If stock reaches exactly 0: Play C in next round (resource can still recover from 0)
- If stock has been 0 for 2+ consecutive rounds: Switch to always D (resource is effectively dead)

### Opponent Pattern Recognition
Track if opponents are playing obvious patterns (all C, all D, alternating):
- Against all-cooperators: Always play C
- Against all-defectors after round 3: Play D but occasionally "probe" with C (10% chance)
- Against mixed strategies: Use standard adaptive rules

### Tie-Breaking
When cooperation probability falls between thresholds, use round number as tie-breaker:
- Even rounds: Bias slightly toward cooperation (+5% to cooperation probability)
- Odd rounds: Use calculated probability exactly

## Robustness Features

1. **Anti-Exploitation**: The strategy doesn't get stuck in pure cooperation against consistent defectors
2. **Recovery Mechanism**: Crisis mode prevents permanent resource collapse
3. **Adaptive Learning**: Continuously adjusts based on recent history rather than entire game history
4. **Sustainability Focus**: Prioritizes resource health over short-term gains
5. **Endgame Adaptation**: Recognizes that cooperation becomes less valuable as game approaches end

## Pseudocode Summary
```
if round <= 3 and stock > 0.25 * capacity:
    return C
    
if stock < 0.15 * capacity:  // Crisis mode
    return C
    
score = stock_health_points + opponent_coop_points + trend_points

if rounds_remaining <= 1:
    return D
elif rounds_remaining <= 2 and recent_opponent_coop < 0.3:
    return D
    
if score >= 2:
    return C
elif score == 1:
    return C with 70% probability
elif score == 0:
    return C with 40% probability
else:
    return D
```

This strategy balances cooperation with self-preservation, adapts to various opponent behaviors, and maintains focus on long-term resource sustainability while being competitive enough to avoid exploitation.
'''

description_COOPERATIVE_19 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It operates on the principle of **conditional cooperation** - cooperating when the common pool is sustainable, but adapting when facing depletion or aggressive opponents.

## Decision Rules

### 1. Stock Health Assessment
First, evaluate the current stock health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Opponent Behavior Analysis
Track the cooperation rate of all other players over the last 3 rounds (or all rounds if fewer than 3):
- **Cooperative Environment**: >60% of opponent actions were C
- **Mixed Environment**: 30-60% of opponent actions were C
- **Hostile Environment**: <30% of opponent actions were C

### 3. Primary Decision Matrix

| Stock Health | Environment | Action | Rationale |
|-------------|------------|--------|-----------|
| Healthy | Cooperative | C | Maintain sustainable equilibrium |
| Healthy | Mixed | C | Lead by example, stock can handle some defection |
| Healthy | Hostile | D | Prevent exploitation when stock is abundant |
| Stressed | Cooperative | C | Trust others to help recovery |
| Stressed | Mixed | C | Give cooperation a chance |
| Stressed | Hostile | D | Protect remaining resources |
| Critical | Any | D | Emergency mode - maximize immediate returns |

## Edge Case Handling

### First Round
- Always play **C** to signal cooperative intent and establish a baseline for measuring others' behavior

### Last Round (when known)
- If stock is Healthy or Stressed: Play **C** to leave a positive legacy
- If stock is Critical: Play **D** since there's no future to preserve

### Recovery Detection
- If stock was Critical in the previous round but has recovered to Stressed or better, immediately switch back to cooperative assessment

### Exploitation Protection
- If individual payoff in the last round was significantly below average (< 80% of mean payoff), and stock is Healthy, consider playing **D** once as a deterrent

## Pseudocode

```
function decide_action(current_stock, capacity, round_number, total_rounds, history):
    
    // Stock health assessment
    stock_ratio = current_stock / capacity
    if stock_ratio >= 0.7:
        stock_health = "Healthy"
    else if stock_ratio >= 0.3:
        stock_health = "Stressed"  
    else:
        stock_health = "Critical"
    
    // First round - always cooperate
    if round_number == 1:
        return C
    
    // Critical stock - always defect for survival
    if stock_health == "Critical":
        return D
    
    // Analyze recent opponent behavior (last 3 rounds)
    recent_rounds = min(3, round_number - 1)
    opponent_coop_rate = count_opponent_cooperations(history, recent_rounds) / 
                        (n-1) / recent_rounds
    
    if opponent_coop_rate > 0.6:
        environment = "Cooperative"
    else if opponent_coop_rate >= 0.3:
        environment = "Mixed"
    else:
        environment = "Hostile"
    
    // Last round consideration
    if round_number == total_rounds and stock_health != "Critical":
        return C
    
    // Apply decision matrix
    if stock_health == "Healthy":
        if environment == "Hostile":
            return D
        else:
            return C
    else: // stock_health == "Stressed"
        if environment == "Hostile":
            return D
        else:
            return C
```

## Key Adaptive Features

1. **Dynamic Responsiveness**: Adjusts to both environmental degradation and opponent behavior patterns

2. **Forgiveness**: Doesn't permanently punish opponents; continuously reassesses based on recent behavior

3. **Leadership**: Willing to cooperate even in mixed environments when stock is healthy, potentially inspiring others

4. **Self-Defense**: Protects against exploitation while maintaining cooperative stance when feasible

5. **Emergency Override**: Recognizes when survival trumps cooperation in critical situations

This strategy balances the competing demands of maintaining cooperation, protecting against exploitation, and ensuring the common resource's sustainability across varying conditions and opponent types.
'''

description_COOPERATIVE_20 = '''
I'll design a cooperative strategy called "Adaptive Stewardship" that balances cooperation with sustainability and robustness against various opponent behaviors.

## Adaptive Stewardship Strategy

### Core Philosophy
This strategy treats the common pool as a shared resource requiring collective stewardship. It aims to maintain cooperation while adapting to opponent behavior and protecting against resource collapse.

### Decision Rules

#### 1. **Sustainability Threshold System**
```
Define three stock health zones:
- HEALTHY: stock ≥ 0.7 × capacity
- STRESSED: 0.3 × capacity ≤ stock < 0.7 × capacity  
- CRITICAL: stock < 0.3 × capacity
```

#### 2. **Cooperation Propensity Calculator**
Track each opponent's cooperation rate over a sliding window of recent rounds:
```
cooperation_rate[player] = (cooperations in last min(5, current_round)) / min(5, current_round)
overall_cooperation = average(cooperation_rate for all other players)
```

#### 3. **Primary Decision Logic**

**Round 1:** Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1:**
```
IF stock zone is CRITICAL:
    COOPERATE (emergency conservation)
ELSE IF stock zone is STRESSED:
    IF overall_cooperation ≥ 0.5:
        COOPERATE (support recovery with cooperative majority)
    ELSE:
        DEFECT (protect against tragedy with uncooperative majority)
ELSE IF stock zone is HEALTHY:
    IF overall_cooperation ≥ 0.6:
        COOPERATE (sustain cooperation)
    ELSE IF overall_cooperation ≥ 0.4:
        Use reciprocity: COOPERATE if ≥60% of others cooperated last round
    ELSE:
        DEFECT (protect against exploitation)
```

**Final Round (Round r):**
```
IF stock zone is CRITICAL:
    COOPERATE (preserve final harvest)
ELSE:
    DEFECT (maximize final payoff when sustainability no longer matters)
```

### Edge Cases and Special Situations

#### **Stock Recovery Bonus**
If stock has increased by >20% from the previous round due to collective cooperation, increase cooperation threshold by 0.1 for the next round (reward collective good behavior).

#### **Defection Cascade Protection** 
If >75% of players defected in the previous round and stock dropped to STRESSED or CRITICAL:
- COOPERATE for the next 2 rounds regardless of others' actions
- This prevents complete resource collapse and signals willingness to rebuild

#### **Late-Game Cooperation Incentive**
In the final 20% of rounds (when long-term sustainability still matters):
- Lower cooperation thresholds by 0.1 to encourage end-game cooperation
- Exception: Still defect in the absolute final round

### Cooperative Alignment Features

1. **Default Cooperation Bias:** When uncertain or in early rounds, lean toward cooperation
2. **Emergency Conservation:** Always cooperate when resources are critically low
3. **Forgiveness Mechanism:** Quickly return to cooperation after punishment periods
4. **Collective Recovery:** Actively support resource regeneration through sustained cooperation
5. **Transparency:** Behavior is predictable based on observable game state

### Robustness Features

1. **Adaptive Thresholds:** Cooperation requirements adjust based on observed opponent behavior
2. **Multi-level Defense:** Different responses for different threat levels
3. **History Integration:** Uses sliding window to balance responsiveness with stability  
4. **Exploitation Protection:** Won't cooperate indefinitely with consistent defectors
5. **End-Game Realism:** Acknowledges that final round incentives differ

### Strategic Advantages

- **Sustainable:** Prioritizes long-term resource health over short-term gains
- **Conditional Cooperation:** Rewards cooperative opponents while protecting against exploitative ones  
- **Crisis Response:** Unified response to resource emergencies
- **Equilibrium Seeking:** Pushes toward mutually beneficial steady states
- **Tournament Robust:** Performs well against diverse strategy types without requiring coordination

This strategy embodies cooperative principles while remaining strategically sound against various opponent types, from pure cooperators to sophisticated adaptive strategies.
'''

description_COOPERATIVE_21 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It aims to establish and maintain cooperation through a combination of initial generosity, measured reciprocity, and adaptive forgiveness.

## Decision Rules

### 1. Initialization Phase (First Round)
**Always COOPERATE** in round 1 to signal cooperative intent and establish a baseline for future interactions.

### 2. Stock Health Assessment
Define stock health categories based on current stock level:
- **Healthy**: stock ≥ 0.75 × capacity
- **Stressed**: 0.4 × capacity ≤ stock < 0.75 × capacity  
- **Critical**: stock < 0.4 × capacity

### 3. Cooperation Rate Calculation
Track the cooperation rate of opponents over the last 3 rounds (or all previous rounds if fewer than 3):
```
cooperation_rate = (number of C actions by opponents) / (total opponent actions)
```

### 4. Main Decision Logic

```pseudocode
IF current_round == 1:
    RETURN C
    
IF stock_level == "Critical":
    IF cooperation_rate ≥ 0.6:
        RETURN C  // Try to rebuild together
    ELSE:
        RETURN D  // Emergency defection to get something before collapse
        
IF stock_level == "Stressed":
    IF cooperation_rate ≥ 0.7:
        RETURN C  // Reward high cooperation
    ELIF cooperation_rate ≥ 0.4:
        IF last_round_majority_cooperated:
            RETURN C  // Match cooperative momentum
        ELSE:
            RETURN D  // Gentle punishment
    ELSE:
        RETURN D  // Strong punishment for low cooperation
        
IF stock_level == "Healthy":
    IF cooperation_rate ≥ 0.5:
        RETURN C  // Standard cooperation when others cooperate
    ELIF cooperation_rate ≥ 0.3:
        IF rounds_remaining ≤ 3:
            RETURN D  // End-game defection if others are already defecting
        ELSE:
            RETURN C with probability 0.7  // Probabilistic forgiveness
    ELSE:
        RETURN D  // Punish widespread defection
```

### 5. End-Game Handling
In the final 2 rounds:
- If stock is Critical: Always cooperate (last chance to salvage something)
- If stock is Healthy and cooperation_rate < 0.4: Defect (take advantage of final rounds)
- Otherwise: Follow normal rules but with reduced forgiveness probability

### 6. Forgiveness Mechanism
When the strategy calls for probabilistic cooperation (0.7 probability), use this rule:
- Generate random number between 0-1
- If ≤ 0.7: Cooperate
- If > 0.7: Defect
This prevents the strategy from being too predictable while maintaining cooperative bias.

## Key Features

**Adaptive Thresholds**: The cooperation rate thresholds adjust based on stock health - requiring higher cooperation rates when resources are stressed.

**Stock-Aware**: Decisions explicitly consider the sustainability of the resource, becoming more cooperative when the stock is critically low.

**Measured Reciprocity**: Rather than harsh tit-for-tat, uses gradual responses and probabilistic forgiveness to avoid punishment spirals.

**End-Game Awareness**: Recognizes that final rounds change incentives and adjusts behavior accordingly.

**Momentum Tracking**: Considers recent trends (last round majority behavior) to catch shifts in opponent strategy.

## Robustness Features

- **Against Always Defect**: Will eventually defect back but tries cooperation first
- **Against Always Cooperate**: Maintains cooperation and protects the resource
- **Against Tit-for-Tat**: Establishes stable mutual cooperation
- **Against Random**: Adapts based on observed cooperation rates
- **Against End-Game Defectors**: Recognizes pattern and responds appropriately
- **Against Exploitative Strategies**: Uses graduated punishment while maintaining paths back to cooperation

This strategy balances the cooperative imperative with strategic self-protection, aiming to be "nice, provokable, and forgiving" while being specifically adapted to the dynamics of resource sustainability.
'''

description_COOPERATIVE_22 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and adjusts based on the sustainability threat level and observed cooperation rates.

## Decision Framework

### 1. Primary Decision Rule: Sustainability-Based Cooperation

**Cooperate (C) when:**
- Current stock level > critical_threshold AND
- Cooperation rate among all players in recent history ≥ minimum_cooperation_rate

**Defect (D) when:**
- Current stock level ≤ critical_threshold OR
- Cooperation rate < minimum_cooperation_rate

### 2. Key Parameters

```
critical_threshold = capacity × 0.3
minimum_cooperation_rate = 0.4
history_window = min(5, current_round - 1)
forgiveness_factor = 0.1
```

### 3. Detailed Strategy Rules

#### Round 1 (Initial Round):
- **Always Cooperate (C)**
- Rationale: Start with good faith and establish cooperative intent

#### Rounds 2 to r-1 (Middle Rounds):
1. **Calculate recent cooperation rate:**
   ```
   recent_coop_rate = (number of C actions by all players in last history_window rounds) / 
                     (total actions by all players in last history_window rounds)
   ```

2. **Assess sustainability threat:**
   ```
   if stock ≤ critical_threshold:
       threat_level = HIGH
   else if stock ≤ capacity × 0.6:
       threat_level = MEDIUM  
   else:
       threat_level = LOW
   ```

3. **Decision logic:**
   ```
   if threat_level == HIGH:
       if recent_coop_rate ≥ 0.6:
           action = C  // Others are trying to save the resource
       else:
           action = D  // Resource is dying and others aren't helping
   
   else if threat_level == MEDIUM:
       if recent_coop_rate ≥ minimum_cooperation_rate:
           action = C
       else:
           action = D  // Defect to signal urgency
   
   else:  // LOW threat
       if recent_coop_rate ≥ minimum_cooperation_rate - forgiveness_factor:
           action = C  // Be slightly more forgiving when resource is healthy
       else:
           action = D
   ```

#### Final Round (Round r):
- **Special end-game logic:**
  ```
  if stock ≤ critical_threshold:
      action = C  // Last chance to show cooperative intent
  else:
      if recent_coop_rate ≥ 0.5:
          action = C  // Reward overall cooperation
      else:
          action = D  // Final defection if others were uncooperative
  ```

### 4. Adaptive Features

#### Dynamic Threshold Adjustment:
- If cooperation rate has been consistently high (>0.7) for 3+ rounds, temporarily lower minimum_cooperation_rate by 0.1
- If stock has been critically low (<0.2×capacity) for 2+ consecutive rounds, increase minimum_cooperation_rate by 0.1

#### Forgiveness Mechanism:
- After 2 consecutive rounds of mutual cooperation (≥80% of players cooperating), reset any temporary threshold adjustments
- This prevents permanent punishment spirals

### 5. Edge Case Handling

#### Stock Depletion:
- If stock = 0: Always cooperate to signal willingness to rebuild
- If stock < capacity × 0.1: Cooperate if ≥50% of others cooperated last round

#### High Defection Environment:
- If recent_coop_rate < 0.2 for 3+ consecutive rounds: Switch to "emergency cooperation" mode
- In emergency mode: Cooperate for 2 rounds regardless of others' actions to attempt restart

#### Near-Capacity Stock:
- If stock > capacity × 0.9: Always cooperate (resource is healthy, maintain it)

### 6. Strategic Rationale

This strategy balances several key objectives:

1. **Sustainability Focus**: Uses stock level as primary decision factor
2. **Reciprocity**: Responds to others' cooperation levels
3. **Forgiveness**: Doesn't permanently punish, allows for cooperation restart
4. **Adaptability**: Adjusts thresholds based on game dynamics
5. **Leadership**: Sometimes cooperates even when others don't, to model good behavior
6. **Protection**: Defects when necessary to prevent being exploited in unsustainable situations

The strategy is robust because it doesn't rely on specific opponent strategies or coordination mechanisms, instead adapting to observable outcomes (stock levels and cooperation rates) that reflect the collective impact of all players' choices.
'''

description_COOPERATIVE_23 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the resource stock above critical thresholds while rewarding cooperation and deterring excessive defection.

## Decision Rules

### 1. Stock-Based Baseline Decision
```
if stock > capacity * 0.8:
    baseline = COOPERATE
elif stock > capacity * 0.5:
    baseline = COOPERATE with 80% probability
elif stock > capacity * 0.2:
    baseline = COOPERATE with 60% probability
else:
    baseline = DEFECT (survival mode)
```

### 2. Behavioral Adaptation Layer
Track each opponent's cooperation rate over a sliding window of the last 3 rounds:
```
for each player:
    cooperation_rate = (cooperations in last 3 rounds) / min(3, rounds_played)
    
if average_cooperation_rate > 0.6:
    cooperation_bonus = +0.2 to cooperation probability
elif average_cooperation_rate < 0.3:
    cooperation_penalty = -0.3 to cooperation probability
```

### 3. Trend Analysis
Monitor stock trajectory over last 2 rounds:
```
if stock_trend is_declining_rapidly (>30% drop):
    emergency_penalty = -0.4 to cooperation probability
elif stock_trend is_recovering (>10% increase):
    recovery_bonus = +0.1 to cooperation probability
```

## Edge Cases

### First Round
Always COOPERATE to signal cooperative intent and establish baseline.

### Last Round
```
if stock < capacity * 0.3:
    DEFECT (extract remaining value)
else:
    COOPERATE (maintain cooperative reputation for potential future games)
```

### Critical Stock Levels
```
if stock < n * 2:  // Near depletion threshold
    DEFECT (survival mode - secure resources before collapse)
```

### Majority Defector Response
```
if >70% of players defected in last round AND stock > capacity * 0.4:
    DEFECT next round (punishment phase)
    then return to adaptive cooperation
```

## Robustness Features

### 1. Forgiveness Mechanism
After punishing defectors, gradually return to cooperation:
```
punishment_rounds = 0
if triggered_punishment:
    punishment_rounds = min(2, remaining_rounds/3)
    after punishment: slowly increase cooperation probability
```

### 2. Conservation Threshold
Never let personal consumption drive stock below critical sustainability:
```
projected_stock_after_round = current_stock - estimated_total_consumption
if projected_stock_after_round < capacity * 0.15:
    override to COOPERATE regardless of other factors
```

### 3. Endgame Cooperation
In final 20% of rounds, if stock is healthy (>50% capacity), bias toward cooperation to prevent collapse:
```
if round > 0.8 * total_rounds AND stock > capacity * 0.5:
    cooperation_bonus = +0.3
```

## Algorithm Summary
```
1. Calculate stock-based baseline cooperation probability
2. Adjust for opponent behavior patterns (last 3 rounds)
3. Adjust for stock trend (last 2 rounds)
4. Apply edge case overrides (first/last round, critical stock)
5. Apply robustness checks (conservation threshold, punishment cycles)
6. Make probabilistic decision based on final cooperation probability
7. Update opponent behavior tracking
```

This strategy balances cooperative intent with adaptive responses to both resource state and opponent behavior. It maintains a bias toward sustainability while protecting against exploitation, making it robust across diverse opponent strategies while clearly prioritizing the cooperative outcome of resource preservation.
'''

description_COOPERATIVE_24 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy balances immediate cooperation with long-term resource sustainability, using adaptive thresholds based on observed opponent behavior and resource state. It prioritizes cooperation while protecting against exploitation and resource collapse.

## Decision Framework

### Primary Decision Rule
**Cooperate (C)** if ALL of the following conditions are met:
1. **Sustainability Check**: Current stock ≥ sustainability_threshold
2. **Trust Check**: cooperation_rate ≥ trust_threshold  
3. **Exploitation Check**: Not currently being heavily exploited

**Defect (D)** otherwise.

### Key Parameters (Adaptive)

**Sustainability Threshold**: 
- Initial: capacity × 0.4
- Adaptive: Decreases if consistently high cooperation observed, increases if resource depletion accelerating

**Trust Threshold**:
- Initial: 0.6 (require 60% cooperation from others)
- Adaptive: Decreases over time if opponents show willingness to cooperate, increases after being exploited

**Exploitation Detection**:
- Heavy exploitation = being the only cooperator or one of very few cooperators for 2+ consecutive rounds

## Detailed Strategy Logic

### Round 1 (Cold Start)
Always **COOPERATE** - establish cooperative intent and gather initial information about opponents.

### Rounds 2 to r-1 (Main Game)

1. **Calculate Cooperation Rate**:
   ```
   cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
   ```

2. **Update Sustainability Threshold**:
   ```
   if cooperation_rate > 0.7:
       sustainability_threshold *= 0.95  // More optimistic
   elif cooperation_rate < 0.3:
       sustainability_threshold *= 1.1   // More conservative
   ```

3. **Update Trust Threshold**:
   ```
   if was_exploited_last_round:
       trust_threshold += 0.1
   elif cooperation_rate > trust_threshold:
       trust_threshold -= 0.05
   ```

4. **Check Exploitation**:
   ```
   my_last_action = C AND others_cooperation_rate_last_round < 0.3
   ```

5. **Make Decision**:
   ```
   if stock < sustainability_threshold:
       return D  // Resource protection
   elif cooperation_rate < trust_threshold:
       return D  // Trust protection
   elif being_heavily_exploited:
       return D  // Exploitation protection
   else:
       return C  // Default cooperation
   ```

### Final Round (Round r)
Use **Endgame Logic**:
- If stock > capacity × 0.5: **COOPERATE** (maintain cooperative reputation)
- If cooperation_rate > 0.6: **COOPERATE** (reward good opponents)
- Otherwise: **DEFECT** (extract remaining value)

## Edge Case Handling

### Resource Crisis (stock < capacity × 0.2)
Switch to **Crisis Mode**: Only cooperate if cooperation_rate ≥ 0.8 (require near-unanimous cooperation for recovery)

### High Trust Environment (cooperation_rate ≥ 0.8 for 3+ rounds)
Enter **Generous Mode**: Lower sustainability_threshold to capacity × 0.25 and trust_threshold to 0.4

### Exploitation Spiral Detection
If defection_rate > 0.7 for 3+ consecutive rounds: Switch to **Defensive Mode** - only cooperate if stock > capacity × 0.6

## Robustness Features

1. **Memory Window**: Focus on last 3-5 rounds for adaptation (not entire history) to respond to strategy changes

2. **Gradual Adaptation**: Thresholds change gradually (5-10% adjustments) to avoid overreaction to temporary fluctuations

3. **Minimum Cooperation**: Even in worst conditions, cooperate at least 20% of the time to signal willingness to rebuild cooperation

4. **Recovery Incentives**: If stock drops very low but starts recovering due to cooperation, temporarily lower trust_threshold to encourage the recovery trend

## Strategic Advantages

1. **Cooperative by Default**: Starts and prefers cooperation
2. **Adaptive**: Adjusts to opponent behavior patterns
3. **Sustainable**: Protects long-term resource availability
4. **Robust**: Handles various opponent strategies from always-cooperate to always-defect
5. **Forgiving**: Can rebuild cooperation after periods of defection
6. **Self-Protective**: Avoids being systematically exploited

This strategy should perform well against cooperative opponents while defending against exploitative ones, maintaining resource sustainability across diverse tournament conditions.
'''

description_COOPERATIVE_25 = '''
## Adaptive Cooperative Strategy: "Sustainable Steward"

### Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust to various opponent behaviors. It balances cooperation with strategic adaptation, prioritizing resource sustainability over short-term gains.

### Decision Rules

#### 1. **Cooperation Threshold System**
- Maintain a dynamic "cooperation threshold" based on stock health
- **Stock Health Ratio (SHR)** = current_stock / capacity
- **Base cooperation threshold**: 60% of players should have cooperated in recent history

#### 2. **Primary Decision Logic**
```
IF round == 1:
    COOPERATE (establish cooperative intent)
    
ELSE IF stock < capacity * 0.3:
    # Critical stock level - emergency cooperation
    COOPERATE
    
ELSE IF SHR >= 0.8:
    # Abundant resources - be generous
    COOPERATE
    
ELSE:
    # Calculate recent cooperation rate among all players
    recent_coop_rate = (cooperations in last min(3, current_round-1) rounds) / (n * min(3, current_round-1))
    
    IF recent_coop_rate >= 0.6:
        COOPERATE (reward collective cooperation)
    ELSE IF recent_coop_rate >= 0.4:
        # Mixed behavior - use tit-for-majority
        majority_action_last_round = most_common_action_last_round()
        IF majority_action_last_round == COOPERATE:
            COOPERATE
        ELSE:
            DEFECT (but with forgiveness mechanism)
    ELSE:
        # Low cooperation - strategic defection with recovery intent
        DEFECT
```

#### 3. **Forgiveness and Recovery Mechanism**
- After defecting due to low cooperation, return to cooperation if:
  - Stock drops below 40% of capacity (emergency cooperation), OR
  - Any single round shows >50% player cooperation (immediate forgiveness), OR
  - After maximum 2 consecutive defections (forced reset)

#### 4. **End-Game Handling**
```
IF current_round > r * 0.8:  # Last 20% of rounds
    IF stock >= capacity * 0.5:
        COOPERATE (preserve resources for others)
    ELSE:
        # Stock is critically low - emergency mode
        IF recent_coop_rate >= 0.5:
            COOPERATE
        ELSE:
            DEFECT (survival mode)
```

### Edge Cases

#### **First Round**
Always COOPERATE to signal cooperative intent and establish a baseline for learning about opponents.

#### **Last Round**
- If stock > 50% capacity: COOPERATE (maintain cooperative reputation)
- If stock ≤ 50% capacity and recent cooperation was high (≥60%): COOPERATE
- Otherwise: DEFECT (no future consequences)

#### **Stock Depletion Crisis**
When stock falls below 20% of capacity:
- COOPERATE for next 2 rounds minimum regardless of opponent behavior
- Only return to normal decision rules if stock recovers above 40% capacity

#### **All-Defection Scenarios**
If all other players defected in the previous round:
- COOPERATE once as forgiveness signal
- If they all defect again, switch to DEFECT until stock crisis forces cooperation

### Robustness Features

1. **Adaptive Learning**: Strategy adjusts cooperation threshold based on observed player behavior patterns

2. **Stock Conservation**: Prioritizes resource sustainability over individual payoff maximization

3. **Graduated Response**: Uses proportional responses rather than binary tit-for-tat

4. **Recovery Orientation**: Always provides pathways back to cooperation

5. **Crisis Management**: Automatically switches to cooperation mode when resource depletion threatens everyone

### Key Advantages

- **Robust to various opponent types**: Works against both cooperative and competitive strategies
- **Sustainable**: Prevents tragic commons outcomes through stock monitoring
- **Forgiving**: Doesn't get trapped in defection spirals
- **Adaptive**: Learns from collective behavior patterns
- **Principled**: Maintains cooperative bias while protecting against exploitation

This strategy should perform well in a diverse tournament by establishing cooperative relationships where possible while protecting the common resource from depletion, ensuring positive payoffs for all players over the long term.
'''

description_COOPERATIVE_26 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation. It balances cooperation with strategic punishment to encourage sustainable resource management.

## Decision Framework

### 1. Initial Cooperation Phase (First Round)
- **Always cooperate (C) in round 1** to signal cooperative intent and establish a baseline for sustainable resource use.

### 2. Stock Health Assessment
Before each decision, evaluate the resource state:
- **Healthy Stock**: stock ≥ 0.7 × capacity
- **Stressed Stock**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical Stock**: stock < 0.3 × capacity

### 3. Cooperation Threshold Strategy
Track each opponent's cooperation rate over the last min(3, current_round-1) rounds:
- **High Cooperator**: cooperation_rate ≥ 0.67
- **Mixed Player**: 0.33 < cooperation_rate < 0.67
- **Defector**: cooperation_rate ≤ 0.33

### 4. Main Decision Rules

**Round 2 onwards:**

```pseudocode
IF current_round == final_round:
    IF stock_health == "Critical":
        COOPERATE  // Last chance to preserve something
    ELSE:
        DEFECT     // Extract maximum value in final round
        
ELSE IF stock_health == "Critical":
    IF majority_cooperated_last_round:
        COOPERATE  // Support recovery effort
    ELSE:
        DEFECT     // Don't be exploited in crisis
        
ELSE IF stock_health == "Stressed":
    IF (high_cooperators + mixed_players) ≥ (n/2):
        COOPERATE  // Enough cooperation to justify restraint
    ELSE:
        DEFECT     // Too many defectors, protect self

        
ELSE: // Healthy stock
    IF defectors ≥ (n/2):
        DEFECT     // Punish widespread defection
    ELSE IF was_exploited_last_round AND high_cooperators < (n-1):
        DEFECT     // Retaliate against exploitation
    ELSE:
        COOPERATE  // Default to cooperation when safe
```

### 5. Exploitation Detection
Define exploitation as: "I cooperated last round while ≥50% of others defected AND stock dropped below previous level"

### 6. Forgiveness Mechanism
- After defecting due to exploitation or punishment, return to cooperation if:
  - Stock health improves to "Healthy"
  - OR opponent cooperation rates increase significantly (>0.2 improvement)
  - OR it's been 2 consecutive rounds of punishment

### 7. Emergency Cooperation Protocol
If stock falls below 0.1 × capacity:
- **Always cooperate** regardless of other factors
- This prevents complete resource collapse

## Strategy Rationale

**Cooperative Foundation**: Starts with cooperation and defaults to it when conditions are favorable, clearly signaling cooperative intent.

**Adaptive Punishment**: Responds to defection patterns but doesn't permanently abandon cooperation, encouraging others to return to sustainable behavior.

**Resource Protection**: Prioritizes long-term sustainability over short-term gains, especially when resources are stressed.

**Exploitation Resistance**: Prevents being consistently exploited while remaining open to renewed cooperation.

**Endgame Consideration**: Recognizes the different incentives in the final round while still protecting critically low resources.

**Robustness**: Works effectively whether opponents are:
- Fully cooperative (maintains cooperation)
- Fully defective (protects through strategic defection)
- Mixed strategies (adapts based on cooperation levels)

This strategy should perform well in a diverse tournament by encouraging cooperation when possible while protecting against various forms of exploitation and contributing to long-term resource sustainability.
'''

description_COOPERATIVE_27 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while adapting to opponent behavior. It starts cooperatively but becomes increasingly protective of the resource when facing destructive opponents.

## Decision Rules

### 1. **Cooperation Threshold System**
- Maintain a **cooperation threshold** that determines willingness to cooperate
- Initial threshold: 0.7 (70% likelihood to cooperate)
- Threshold adjusts based on observed opponent behavior and resource state

### 2. **Primary Decision Logic**
```pseudocode
IF round == 1:
    PLAY C (always start cooperatively)
    
ELSIF stock/capacity < 0.3:
    PLAY C (emergency conservation mode)
    
ELSIF round == final_round:
    IF stock/capacity > 0.5:
        PLAY D (extract final value when sustainable)
    ELSE:
        PLAY C (preserve what remains)
        
ELSE:
    cooperation_score = calculate_cooperation_score()
    resource_health = stock/capacity
    
    adjusted_threshold = base_threshold × (0.5 + 0.5 × resource_health)
    
    IF cooperation_score > adjusted_threshold:
        PLAY C
    ELSE:
        PLAY D
```

### 3. **Cooperation Score Calculation**
The cooperation score combines multiple factors:

```pseudocode
cooperation_score = weighted_average(
    recent_opponent_cooperation_rate × 0.4,
    resource_sustainability_indicator × 0.3,
    reciprocity_reward × 0.2,
    future_rounds_factor × 0.1
)

WHERE:
- recent_opponent_cooperation_rate = (cooperators in last 3 rounds) / (total players × 3)
- resource_sustainability_indicator = min(1.0, stock_growth_trend + 0.5)
- reciprocity_reward = bonus if opponents cooperated when I cooperated last round
- future_rounds_factor = (remaining_rounds / total_rounds)
```

## Adaptive Mechanisms

### **Threshold Adjustment**
- **Positive feedback**: Increase threshold by 0.05 when cooperation leads to resource growth
- **Negative feedback**: Decrease threshold by 0.1 when facing majority defectors
- **Bounds**: Keep threshold between 0.2 and 0.9

### **Behavioral Pattern Recognition**
Track opponent patterns over sliding 5-round window:
- **Consistent cooperators**: Reward with higher cooperation
- **Alternating patterns**: Match their rhythm when beneficial
- **Consistent defectors**: Reduce cooperation but don't abandon entirely

## Edge Case Handling

### **First Round**
Always cooperate to establish good faith and gather information about opponents.

### **Resource Crisis (stock < 30% of capacity)**
Enter "emergency conservation mode" - always cooperate regardless of opponent behavior to preserve the resource for future rounds.

### **Final Round**
- If resource is healthy (>50% capacity): Defect to capture final value
- If resource is depleted (<50% capacity): Cooperate to model responsible behavior

### **Resource Abundance (stock > 90% capacity)**
Slightly increase defection probability to prevent waste while maintaining cooperative stance.

## Robustness Features

### **Anti-Exploitation Measures**
- Never cooperate more than 80% of rounds against consistent defectors
- If being consistently exploited (cooperating while others defect), gradually reduce cooperation
- Maintain minimum 20% cooperation rate even against hostile opponents

### **Recovery Protocols**
- If stock drops below 20% capacity, enter "recovery mode": cooperate for at least 3 consecutive rounds
- After stock recovers above 40%, gradually return to normal decision-making

### **Noise Tolerance**
- Don't overreact to single-round defections
- Use moving averages rather than instantaneous measurements
- Allow for 1-2 "forgiveness" cooperations after detecting pattern changes

## Strategic Advantages

1. **Starts cooperatively** to encourage cooperative equilibrium
2. **Adapts to opponent behavior** without being exploited
3. **Prioritizes resource sustainability** over short-term gains
4. **Maintains some cooperation** even against hostile opponents to model good behavior
5. **Responsive to resource state** - more conservative when resource is threatened
6. **Forward-looking** - considers remaining rounds in decisions

This strategy balances the cooperative ideal with practical adaptation to diverse opponent behaviors, ensuring both competitive performance and resource sustainability across varied tournament conditions.
'''

description_COOPERATIVE_28 = '''
# Adaptive Cooperative Resource Management (ACRM) Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but can temporarily defect to maintain resource viability when facing too many defectors, always seeking to return to cooperation when conditions improve.

## Decision Rules

### 1. Primary Cooperation Condition
**Cooperate (C)** when the **Sustainability Index** ≥ threshold:

```
Sustainability Index = (current_stock / capacity) × (1 + cooperation_momentum)
Threshold = 0.4 + (rounds_remaining / total_rounds) × 0.2
```

Where `cooperation_momentum` = (cooperators_last_round - defectors_last_round) / n, capped at [-0.3, +0.3]

### 2. Stock Crisis Override
**Always Defect (D)** if stock falls below critical threshold:
```
Critical Stock Threshold = capacity × 0.15
```
This prevents complete resource collapse.

### 3. Reciprocity Adjustment
Track each round's cooperation rate:
- If cooperation rate ≥ 60%: Increase cooperation bias (+0.1 to sustainability threshold)
- If cooperation rate ≤ 30%: Decrease cooperation bias (-0.1 to sustainability threshold)
- Bias resets gradually (×0.8 each round) to prevent permanent shifts

## Edge Case Handling

### First Round
Always **Cooperate (C)** - establish cooperative intent and gather initial information about opponent tendencies.

### Last Round  
**Cooperate (C)** if:
- Stock > critical threshold AND
- Previous round cooperation rate ≥ 40%

Otherwise **Defect (D)** - final resource extraction when cooperation unlikely.

### Early Game (Rounds 1-3)
Use relaxed thresholds (reduce by 0.1) to encourage initial cooperation and pattern establishment.

### Late Game (Final 20% of rounds)
- If stock is healthy (>60% capacity): Maintain cooperation
- If stock is declining rapidly: Switch to "rescue mode" - defect until stock stabilizes, then immediately return to cooperation

## Adaptive Features

### 1. Defector Punishment
If defection rate >70% for 2 consecutive rounds:
- Temporarily defect for 1 round (signal displeasure)
- Return to cooperation regardless of others' responses (show forgiveness)

### 2. Recovery Incentives  
After any round where stock grows (indicating net cooperation):
- Lower cooperation threshold by 0.05 for next round
- Reset any accumulated punishment timers

### 3. Trend Analysis
Track 3-round moving averages of:
- Stock levels
- Cooperation rates
- Personal vs. average payoffs

Adjust cooperation threshold based on trends:
- Improving trends → easier cooperation
- Declining trends → more defensive posture

## Pseudocode Summary

```python
def decide_action(round_num, stock, capacity, history, total_rounds, n):
    # Edge cases
    if round_num == 1:
        return COOPERATE
    
    if stock < capacity * 0.15:  # Crisis mode
        return DEFECT
    
    # Calculate sustainability index
    coop_rate_last = count_cooperators_last_round(history) / n
    momentum = (coop_rate_last - (1 - coop_rate_last)) * 0.3
    sustainability_index = (stock / capacity) * (1 + momentum)
    
    # Dynamic threshold
    base_threshold = 0.4
    urgency_bonus = (total_rounds - round_num) / total_rounds * 0.2
    cooperation_bias = calculate_cooperation_bias(history)
    threshold = base_threshold + urgency_bonus + cooperation_bias
    
    # Special late game logic
    if round_num == total_rounds:
        return COOPERATE if stock > capacity * 0.15 and coop_rate_last >= 0.4 else DEFECT
    
    # Main decision
    if sustainability_index >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Key Strengths

1. **Truly Cooperative**: Always seeks to return to cooperation and maintain resource sustainability
2. **Adaptive**: Responds to opponent behavior without being exploitable
3. **Robust**: Handles various opponent strategies from full cooperation to full defection
4. **Forward-Looking**: Considers long-term consequences and remaining rounds
5. **Forgiving**: Doesn't permanently punish defection, always ready to re-establish cooperation

This strategy should perform well against both cooperative and mixed populations while preventing complete resource depletion that would harm all players.
'''

description_COOPERATIVE_29 = '''
# Adaptive Cooperative Strategy: "Sustainable Stewardship"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but includes mechanisms to protect against exploitation while encouraging others to return to cooperation.

## Decision Rules

### Round 1: Pure Cooperation
- Always play **C** in the first round
- Rationale: Establish cooperative intent and give the resource the best possible start

### Rounds 2 to r-1: Adaptive Cooperation with Forgiveness

**Step 1: Calculate Sustainability Threshold**
```
sustainability_ratio = current_stock / capacity
critical_threshold = 0.3  // Below this, resource is critically depleted
```

**Step 2: Assess Recent Cooperation Level**
```
recent_cooperation_rate = (number of C plays by all players in last 2 rounds) / (2 * n)
high_cooperation = recent_cooperation_rate >= 0.75
moderate_cooperation = 0.4 <= recent_cooperation_rate < 0.75
low_cooperation = recent_cooperation_rate < 0.4
```

**Step 3: Decision Logic**
```
IF sustainability_ratio < critical_threshold:
    // Emergency conservation mode
    IF high_cooperation:
        Play C
    ELSE:
        Play D (to prevent complete collapse while others defect)

ELSE IF sustainability_ratio >= 0.7:
    // Resource is healthy
    IF recent_cooperation_rate >= 0.5:
        Play C (reward cooperation)
    ELSE:
        Play D (punish widespread defection)

ELSE:
    // Resource is moderately stressed (0.3 <= ratio < 0.7)
    IF high_cooperation:
        Play C (support cooperative equilibrium)
    ELSE IF moderate_cooperation:
        Play C with probability 0.7, D with probability 0.3
    ELSE:
        Play D (protect against exploitation when cooperation is low)
```

**Step 4: Forgiveness Mechanism**
```
IF (I played D last round) AND (recent_cooperation_rate improved by > 0.2):
    Override above logic and play C (forgive and encourage)
```

### Final Round (Round r): Conditional Cooperation
- If `sustainability_ratio >= 0.4` AND `recent_cooperation_rate >= 0.6`: Play **C**
- Otherwise: Play **D**
- Rationale: In the final round, cooperate only if the resource is reasonably healthy and others have shown recent cooperation

## Key Features

### 1. **Sustainability-First Approach**
- Always considers resource health as primary factor
- Enters "emergency mode" when stock falls below 30% of capacity
- Balances individual rational choice with collective welfare

### 2. **Graduated Response**
- Uses probabilistic cooperation in moderate scenarios
- Avoids extreme all-or-nothing responses that can destabilize cooperation
- Recent behavior weighs more heavily than distant history

### 3. **Forgiveness and Encouragement**
- Quickly rewards improvements in group cooperation
- Doesn't hold grudges indefinitely
- Designed to help groups escape defection spirals

### 4. **Exploitation Protection**
- Will defect when cooperation is very low to avoid being the "sucker"
- But immediately returns to cooperation when others improve
- Never defects purely out of spite

### 5. **Robustness Features**
- Works across different values of n, r, and capacity
- Adapts to various opponent strategies (always-cooperate, always-defect, tit-for-tat variants)
- Handles edge cases (first round, last round, critically low stock)

## Strategic Advantages

1. **Starts cooperatively** to maximize early resource growth
2. **Adapts quickly** to opponent behavior patterns
3. **Protects resource sustainability** as highest priority
4. **Encourages cooperation** through forgiveness and conditional reciprocation
5. **Avoids exploitation** while remaining fundamentally cooperative
6. **Tournament-ready** - doesn't rely on coordination with other strategies

This strategy should perform well against a diverse field of opponents while maintaining its cooperative core and protecting the shared resource for all players.
'''

description_COOPERATIVE_30 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through dynamic adaptation based on observed behaviors and resource sustainability.

## Decision Framework

### 1. Primary Decision Rules

**Cooperate (C) when ALL of the following conditions are met:**
- Stock sustainability threshold: `stock ≥ n × (capacity/4)`
- Cooperation viability: At least 50% of other players cooperated in the previous round (after round 1)
- Trust level: Historical cooperation rate of others ≥ 30%
- Not in critical depletion: Stock hasn't fallen below 20% of capacity in last 2 rounds

**Otherwise, Defect (D)**

### 2. Detailed Algorithm

```pseudocode
function decide_action(round, stock, capacity, n, history):
    
    // First round: Always cooperate to signal good intentions
    if round == 1:
        return C
    
    // Calculate key metrics from history
    others_last_round_coop_rate = count_cooperators_last_round(history) / (n-1)
    others_historical_coop_rate = count_total_cooperations(history) / ((round-1) * (n-1))
    
    // Check critical depletion in recent rounds
    recent_critical_depletion = false
    for past_round in [max(1, round-2) to round-1]:
        if stock_at_round[past_round] < 0.2 * capacity:
            recent_critical_depletion = true
    
    // Apply decision criteria
    stock_threshold = n * (capacity / 4)
    
    if (stock >= stock_threshold AND 
        others_last_round_coop_rate >= 0.5 AND
        others_historical_coop_rate >= 0.3 AND
        NOT recent_critical_depletion):
        return C
    else:
        return D
```

### 3. Edge Case Handling

**First Round (r=1):**
- Always cooperate to establish positive precedent and signal cooperative intent

**Last Round (r=final):**
- Apply same rules as other rounds - no special "end game defection" 
- Maintains reputation for future interactions and supports collective outcome

**Stock Depletion Scenarios:**
- If stock < 20% capacity: Switch to defection to preserve remaining resources
- If stock approaches 0: Continue defecting until recovery begins

**All-Defection Environment:**
- If others consistently defect (>70% defection rate over last 3 rounds): Switch to defection
- Monitor for cooperation signals to potentially return to cooperation

### 4. Adaptive Features

**Dynamic Thresholds:**
- Stock threshold scales with group size (n) to account for consumption pressure
- Cooperation requirements relax slightly in later rounds if stock remains healthy

**Learning Component:**
- Tracks individual player patterns when possible
- Adjusts trust levels based on recent vs. historical behavior
- Weights recent actions more heavily (last 3 rounds = 60% weight)

**Recovery Mechanism:**
- After defection phase, return to cooperation when:
  - Stock recovers to >40% capacity AND
  - At least 30% of others show cooperation in last round

### 5. Robustness Features

**Protection Against Exploitation:**
- Never cooperate when being consistently exploited (others' cooperation rate <30%)
- Punish mass defection by joining it temporarily

**Sustainability Focus:**
- Prioritizes long-term resource preservation over short-term gains
- Will defect to prevent catastrophic stock collapse even if others cooperate

**Forgiveness Mechanism:**
- Allows return to cooperation after punishment periods
- Doesn't permanently write off players who show renewed cooperation

## Strategic Rationale

This strategy balances several key objectives:

1. **Promotes Cooperation**: Starts cooperatively and maintains cooperation when conditions support it
2. **Prevents Exploitation**: Has clear thresholds to avoid being taken advantage of
3. **Ensures Sustainability**: Prioritizes resource preservation through stock-based decision making
4. **Adapts to Opponents**: Learns from history and adjusts behavior accordingly
5. **Handles Uncertainty**: Robust to various opponent strategies without requiring specific coordination

The strategy is designed to work well with other cooperative strategies while defending against exploitative ones, ultimately promoting outcomes that benefit all players through sustainable resource management.
'''

description_COOPERATIVE_31 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common resource while being adaptive to opponent behaviors. It starts cooperative but includes mechanisms to protect against exploitation while encouraging others to return to cooperation.

## Decision Rules

### Phase 1: Initial Cooperation (Rounds 1-3 or until exploitation detected)
- **Always cooperate** in the first round
- Continue cooperating as long as:
  - Stock level remains above 75% of capacity, OR
  - Fewer than 50% of players defected in the previous round

### Phase 2: Adaptive Response (Middle rounds)
**Stock Health Assessment:**
- If stock > 80% capacity: Always cooperate
- If stock 60-80% capacity: Use "Graduated Reciprocation" 
- If stock 40-60% capacity: Use "Defensive Cooperation"
- If stock < 40% capacity: Enter "Crisis Mode"

**Graduated Reciprocation (Healthy Stock):**
- Cooperate if majority of players cooperated last round
- If majority defected last round: Defect once, then return to cooperation
- Track "forgiveness counter": After 2 consecutive rounds where majority cooperated, reset any grudges

**Defensive Cooperation (Moderate Depletion):**
- Cooperate only if at least 60% of players cooperated last round
- Otherwise defect, but limit consecutive defections to 2 rounds maximum
- Always attempt to return to cooperation after defensive defection

**Crisis Mode (Severe Depletion):**
- Defect if more than 30% of players defected last round
- Cooperate if stock shows signs of recovery (growth > 10% of remaining stock)
- Priority shifts to preventing total collapse

### Phase 3: Endgame Strategy (Last 20% of rounds)
- If stock > 50% capacity: Always cooperate to maximize final payoffs
- If stock ≤ 50% capacity: Mirror the majority behavior from previous round
- In the final round: Cooperate if stock > 25% capacity, otherwise defect

## Edge Cases

### First Round
Always cooperate to signal cooperative intent and establish baseline stock dynamics.

### Information Gathering
- Track each player's cooperation rate over the last 5 rounds
- Identify "chronic defectors" (cooperation rate < 30%) vs "conditional cooperators"
- Adjust expectations: Be more forgiving toward players who show willingness to cooperate

### Stock Recovery Incentives
When stock falls below 50% capacity:
- If stock increased from previous round, reward this with cooperation regardless of others' actions
- This encourages collective recovery efforts

### Reputation Building
- In early rounds, accept short-term losses from defection to establish reputation as a reliable cooperator
- This investment pays off when others learn to expect cooperation and reciprocate

## Pseudocode Structure

```
function decide_action(current_stock, round_number, total_rounds, history):
    // Phase determination
    rounds_remaining = total_rounds - round_number + 1
    stock_ratio = current_stock / capacity
    
    // First round
    if round_number == 1:
        return COOPERATE
    
    // Calculate recent cooperation rates
    recent_cooperation_rate = calculate_recent_cooperation(history, 3)
    majority_cooperated_last = (recent_cooperation_rate > 0.5)
    
    // Endgame (last 20% of rounds)
    if rounds_remaining <= 0.2 * total_rounds:
        if stock_ratio > 0.5:
            return COOPERATE
        else:
            return majority_cooperated_last ? COOPERATE : DEFECT
    
    // Stock-based decision tree
    if stock_ratio > 0.8:
        return COOPERATE
    
    elif stock_ratio > 0.6:  // Graduated Reciprocation
        return majority_cooperated_last ? COOPERATE : defect_once_then_forgive()
    
    elif stock_ratio > 0.4:  // Defensive Cooperation
        return (recent_cooperation_rate > 0.6) ? COOPERATE : limited_defection()
    
    else:  // Crisis Mode
        if recent_cooperation_rate < 0.7:
            return DEFECT
        else:
            return COOPERATE
```

## Robustness Features

1. **Exploitation Protection**: Won't be permanently exploited due to defensive mechanisms
2. **Recovery Orientation**: Actively rewards and encourages stock recovery
3. **Adaptive Thresholds**: Decision criteria adjust based on stock health
4. **Forgiveness Mechanisms**: Gives players opportunities to return to cooperation
5. **Endgame Optimization**: Balances cooperation with realistic final-round dynamics

This strategy maintains a fundamentally cooperative stance while being sophisticated enough to handle various opponent behaviors, from pure cooperators to strategic defectors to chaotic players.
'''

description_COOPERATIVE_32 = '''
# Adaptive Cooperative Resource Management (ACRM) Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intent, using adaptive mechanisms to respond to different opponent behaviors without abandoning the cooperative framework.

## Decision Framework

### 1. Cooperation Threshold System
- **Base Cooperation Level**: Always maintain a minimum cooperation rate of 60% regardless of opponent behavior
- **Stock Health Assessment**: Classify stock levels into three zones:
  - **Healthy Zone**: stock ≥ 0.8 × capacity → Increase cooperation likelihood
  - **Warning Zone**: 0.4 × capacity ≤ stock < 0.8 × capacity → Moderate cooperation
  - **Crisis Zone**: stock < 0.4 × capacity → Emergency cooperation protocol

### 2. Core Decision Rules

**Round 1 (Cold Start)**: Always cooperate to signal cooperative intent and establish baseline.

**Rounds 2 to r-1 (Main Game)**:
```pseudocode
cooperation_score = base_cooperation_rate + stock_bonus + reciprocity_bonus - defection_penalty

IF cooperation_score > 0.5:
    action = COOPERATE
ELSE:
    action = DEFECT (but with cooperative recovery mechanism)
```

**Final Round**: Use "Cooperative Finale" rule - cooperate if stock > crisis threshold, otherwise match the most cooperative recent pattern observed.

### 3. Adaptive Components

#### A) Stock Health Bonus
- Healthy Zone: +0.2 to cooperation score
- Warning Zone: +0.1 to cooperation score  
- Crisis Zone: +0.3 to cooperation score (emergency cooperation)

#### B) Reciprocity Tracking
Track each opponent's cooperation rate over a sliding window of last 3 rounds:
- High cooperators (>70% cooperation): +0.15 bonus
- Medium cooperators (30-70%): +0.05 bonus
- Low cooperators (<30%): -0.1 penalty (but never below base rate)

#### C) Trend Analysis
Monitor stock trajectory over last 3 rounds:
- If stock declining rapidly (>20% per round): +0.2 cooperation bonus
- If stock stable or growing: maintain current cooperation level
- If stock recovering from crisis: +0.1 bonus for 2 rounds

### 4. Defection Recovery Mechanism
When forced to defect due to very low cooperation score:
- **Immediate Recovery**: Return to cooperation within 1-2 rounds unless stock is in crisis
- **Signaling**: Follow any defection with cooperation in next round if stock allows
- **Forgiveness**: Don't permanently punish opponents for defection sequences

### 5. Edge Case Handling

#### First Round
Always cooperate to establish cooperative baseline and signal intent.

#### Last Round  
- If stock > crisis threshold: Cooperate (maintain cooperative reputation)
- If stock in crisis: Mirror the most cooperative player's recent pattern
- Never end on a defection unless absolutely necessary for group survival

#### Stock Depletion Crisis
If stock falls below 10% of capacity:
- Override all other rules
- Cooperate for at least 2 consecutive rounds to allow recovery
- Only defect if stock reaches absolute zero

#### All-Defector Environment
If all opponents consistently defect (>80% defection rate):
- Maintain minimum 40% cooperation rate
- Increase cooperation when stock shows signs of recovery
- Never fully abandon cooperative stance

### 6. Key Strategic Principles

1. **Sustainability First**: Prioritize long-term resource health over short-term gains
2. **Cooperative Signaling**: Maintain clear cooperative intent even when adapting to hostile environments
3. **Proportional Response**: Match cooperation levels gradually rather than with sudden shifts
4. **Recovery Focus**: Always look for opportunities to rebuild both stock and cooperative relationships
5. **Graceful Degradation**: When forced to reduce cooperation, do so minimally and temporarily

### 7. Parameter Sensitivity
- **Small groups (n ≤ 4)**: Increase base cooperation rate by 0.1
- **Large groups (n > 6)**: Maintain standard rates but increase reciprocity tracking weight
- **Short games (r ≤ 5)**: Front-load cooperation more heavily
- **Long games (r > 10)**: Allow for more gradual adaptation periods

This strategy balances cooperative ideals with practical adaptability, ensuring both resource sustainability and competitive viability across diverse opponent strategies while never fully abandoning its cooperative core.
'''

description_COOPERATIVE_33 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but adaptively responds to exploitation patterns to maintain the common pool resource for all players.

## Decision Rules

### 1. **Cooperation Threshold System**
- **Default Action**: Cooperate (C)
- **Cooperation Condition**: Play C when `current_stock >= threshold`
- **Defection Condition**: Play D when `current_stock < threshold`

Where `threshold = capacity * (0.3 + 0.4 * cooperation_rate)`
- `cooperation_rate` = fraction of cooperative actions observed in last 3 rounds (or all rounds if < 3)
- Threshold ranges from 30% to 70% of capacity based on observed cooperation

### 2. **Round-Specific Adaptations**

**First Round**: Always Cooperate
- Establish cooperative intent
- Gather initial information about opponents

**Early Rounds (rounds 2-3)**:
- Cooperate unless stock has fallen below 40% of capacity
- Build cooperation momentum
- Allow for strategy learning

**Middle Rounds**:
- Apply standard threshold system
- Monitor for exploitation patterns
- Adjust cooperation_rate calculation

**Final Round**:
- If `rounds_remaining = 1` AND `current_stock > capacity * 0.2`: Cooperate
- Otherwise: Defect (prevent being exploited when no future consequences exist)

### 3. **Anti-Exploitation Mechanism**

**Defector Detection**:
- Track each player's cooperation rate over last 3 rounds
- Label player as "chronic defector" if cooperation_rate < 0.3

**Graduated Response**:
- If > 50% of players are chronic defectors AND stock < 50% capacity:
  - Temporarily defect for 1 round to signal consequences
  - Return to cooperation if stock recovers or defection rate decreases

### 4. **Emergency Protocol**
- If `current_stock < capacity * 0.15`: Always Defect
- This prevents total resource collapse when sustainability is critically threatened

## Pseudocode

```
function decide_action(round, stock, capacity, history, n):
    cooperation_rate = calculate_recent_cooperation_rate(history, 3)
    threshold = capacity * (0.3 + 0.4 * cooperation_rate)
    
    // Handle first round
    if round == 1:
        return COOPERATE
    
    // Emergency protocol
    if stock < capacity * 0.15:
        return DEFECT
    
    // Final round consideration
    if is_final_round(round) and stock <= capacity * 0.2:
        return DEFECT
    
    // Anti-exploitation check
    if round > 3:
        chronic_defectors = count_chronic_defectors(history, n)
        if chronic_defectors > n/2 and stock < capacity * 0.5:
            if should_punish(history):  // Graduated response logic
                return DEFECT
    
    // Main decision rule
    if stock >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Key Features

### **Adaptive Cooperation**
- Adjusts cooperation threshold based on observed player behavior
- More cooperative when others cooperate, more cautious when they don't

### **Resource Protection**
- Prevents catastrophic resource depletion through emergency protocols
- Balances individual gains with long-term sustainability

### **Robust Against Exploitation**
- Detects and responds to chronic defectors
- Uses graduated punishment to maintain cooperation incentives
- Protects against end-game defection

### **Transparent Signaling**
- Clear behavioral patterns help establish cooperative norms
- Predictable responses to others' actions encourage mutual cooperation

## Strategic Rationale

This strategy succeeds by:
1. **Starting cooperatively** to establish good faith
2. **Adapting to the cooperation level** of opponents
3. **Protecting the resource** from over-exploitation
4. **Punishing chronic defectors** while remaining primarily cooperative
5. **Maintaining sustainability** as the primary long-term goal

The strategy is robust because it doesn't rely on specific opponent strategies or coordination mechanisms, instead adapting to whatever behaviors emerge in the tournament environment while maintaining its core cooperative and sustainable orientation.
'''

description_COOPERATIVE_34 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to collective behavior. It aims to maintain the resource pool while adapting to the cooperation level of other players.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
- **Always cooperate (C)** in round 1
- Rationale: Start with good faith and gather information about opponent behavior

### 2. Main Strategy Framework
The strategy uses a **cooperation threshold system** based on:
- Current stock health
- Historical cooperation rate of opponents
- Rounds remaining

### 3. Core Decision Logic

```pseudocode
For round t (where t > 1):

// Calculate stock health ratio
stock_health = current_stock / capacity

// Calculate opponent cooperation rate from previous rounds
opponent_coop_rate = (total_C_actions_by_others) / (total_actions_by_others)

// Calculate time pressure (proximity to end)
time_pressure = (r - t + 1) / r  // Higher when more rounds remain

// Determine cooperation threshold
base_threshold = 0.3
health_bonus = stock_health * 0.4
time_bonus = time_pressure * 0.2
cooperation_threshold = base_threshold + health_bonus + time_bonus

// Decision rule
IF opponent_coop_rate >= cooperation_threshold THEN
    play C
ELSE
    // Conditional defection with forgiveness
    IF stock_health < 0.2 AND opponent_coop_rate < 0.2 THEN
        play D  // Emergency defection when resource critically low
    ELSE IF t == r THEN  // Last round
        play D  // Defect in final round (standard game theory)
    ELSE
        // Graduated response: occasionally cooperate even with low cooperation
        forgiveness_probability = 0.1 + (stock_health * 0.3)
        IF random() < forgiveness_probability THEN
            play C  // Attempt to restart cooperation
        ELSE
            play D
        END IF
    END IF
END IF
```

### 4. Edge Case Handling

**First Round:**
- Always cooperate to establish baseline and show good faith

**Last Round (t = r):**
- Defect (standard Nash equilibrium for final round)
- Exception: If stock is critically low (< capacity/4), cooperate to preserve some resource

**Critical Stock Situations:**
- If stock drops below 20% of capacity: Increase cooperation attempts to rebuild
- If stock is at 0: Always cooperate (only way to potentially recover)

**High Cooperation Environment:**
- If opponent cooperation rate > 70%: Always cooperate
- Reward collective good behavior

**Low Cooperation Environment:**
- If opponent cooperation rate < 20% for 3+ consecutive rounds: Switch to defensive mode
- Defensive mode: Cooperate with 30% probability, defect otherwise

### 5. Adaptive Elements

**Learning Component:**
- Track each opponent's individual cooperation rate
- Weight recent actions more heavily (exponential decay)
- Adjust expectations based on observed patterns

**Stock Momentum Tracking:**
- Monitor whether stock is growing, stable, or declining
- If declining trend for 2+ rounds with low cooperation: Increase defection probability
- If growing trend: Increase cooperation probability

**Reciprocity Mechanism:**
- If a specific opponent has been consistently cooperative: Show loyalty by cooperating more with them in mind
- If facing persistent defectors: Reduce cooperation threshold gradually

### 6. Robustness Features

**Anti-Exploitation:**
- Never cooperate more than 3 consecutive rounds if opponents consistently defect
- Minimum defection rate of 10% to avoid being completely exploited

**Recovery Protocol:**
- After periods of mutual defection, periodically attempt cooperation to restart positive cycles
- Use "tit-for-tat with forgiveness" in mixed cooperation environments

**Sustainability Focus:**
- Prioritize long-term resource health over short-term individual gains
- Cooperate more when stock health is good to maintain sustainability

## Strategy Summary

This "Sustainable Guardian" strategy balances cooperation with self-protection through:

1. **Conditional Cooperation:** Cooperates when others show sufficient cooperative behavior
2. **Adaptive Thresholds:** Adjusts cooperation requirements based on resource health and time remaining
3. **Graduated Responses:** Uses probabilistic decisions rather than rigid rules
4. **Sustainability Priority:** Focuses on maintaining the common resource
5. **Robust to Exploitation:** Includes defensive mechanisms against persistent defectors
6. **Recovery Oriented:** Attempts to restart cooperation cycles after conflicts

The strategy is genuinely cooperative in spirit while being sophisticated enough to avoid exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_35 = '''
# Adaptive Conservation Strategy (ACS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behavior. It starts cooperatively but can defend against exploitation while maintaining incentives for others to return to cooperation.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first 3 rounds regardless of others' actions
- This establishes cooperative intent and allows assessment of opponent behavior
- Exception: If stock falls below critical threshold (stock < n), switch to emergency mode

### 2. Main Game Strategy (Rounds 4 to r-2)

#### Stock-Based Thresholds:
- **High Stock** (stock ≥ 0.8 × capacity): Sustainable region
- **Medium Stock** (0.4 × capacity ≤ stock < 0.8 × capacity): Caution region  
- **Low Stock** (stock < 0.4 × capacity): Crisis region

#### Behavior Assessment:
Track cooperation rate of all players over last 3 rounds:
- **High Cooperation Environment**: >70% of players cooperated in last 3 rounds
- **Mixed Environment**: 30-70% cooperation rate
- **Low Cooperation Environment**: <30% cooperation rate

#### Decision Matrix:
```
IF stock is in Crisis region (stock < 0.4 × capacity):
    Always COOPERATE (resource preservation critical)
    
ELSE IF stock is in High region AND High Cooperation Environment:
    COOPERATE (maintain sustainable equilibrium)
    
ELSE IF stock is in High region AND Mixed/Low Cooperation Environment:
    IF my cooperation rate in last 3 rounds > others' average cooperation rate:
        DEFECT (punish free-riding, but signal willingness to cooperate)
    ELSE:
        COOPERATE (rebuild trust)
        
ELSE IF stock is in Medium region:
    IF High Cooperation Environment:
        COOPERATE
    ELSE:
        Apply "Generous Tit-for-Tat": 
        - COOPERATE if majority cooperated last round
        - COOPERATE with 30% probability even if majority defected last round
        - Otherwise DEFECT
```

### 3. Endgame Strategy (Last 2 rounds)

#### Second-to-Last Round (Round r-1):
- If stock > 0.6 × capacity: COOPERATE (leave resources for final round)
- If stock ≤ 0.6 × capacity: Apply same rules as main game

#### Final Round (Round r):
- If stock < n: COOPERATE (defection would crash stock to zero)
- If stock ≥ n AND others have been mostly cooperative (>60% in last 5 rounds): COOPERATE
- Otherwise: DEFECT (extract remaining value)

## Edge Case Handling

### Stock Depletion Emergency:
- If stock ever drops below n (insufficient for all to defect), always COOPERATE until stock recovers above 2n

### Oscillation Prevention:
- Track if the group is stuck in defection cycles (stock declining for 3+ consecutive rounds)
- If detected, COOPERATE for 2 consecutive rounds regardless of others' actions to break the cycle

### Rapid Stock Growth:
- If stock grows by >20% in a single round due to low consumption, maintain cooperation to sustain the positive trend

## Adaptive Elements

1. **Learning Mechanism**: Continuously update assessment of opponent cooperation tendencies
2. **Forgiveness**: After punishing defection, return to cooperation if others show cooperative signals  
3. **Stock Sensitivity**: Adjust cooperation/defection thresholds based on current resource health
4. **Endgame Adjustment**: Account for finite horizon effects while still encouraging final-round cooperation

## Robustness Features

- **Against Always-Defect**: Protects resource through early cooperation, punishes when sustainable
- **Against Always-Cooperate**: Rewards cooperative partners with sustained cooperation
- **Against Random**: Adapts to effective cooperation rate and maintains resource health
- **Against Sophisticated**: Provides clear cooperative signals while defending against exploitation

This strategy balances the tragedy of the commons with the need to maintain individual competitiveness, always prioritizing long-term resource sustainability when the stock is critically low.
'''

description_COOPERATIVE_36 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and gradually adjusts based on the community's collective behavior, always maintaining a bias toward cooperation when the resource can sustain it.

## Decision Rules

### Primary Decision Logic
The strategy uses a **Stock-Based Cooperation Threshold** combined with **Community Behavior Tracking**:

1. **Stock Health Assessment**: Calculate current stock as percentage of capacity
2. **Community Cooperation Rate**: Track the proportion of players who cooperated in recent rounds
3. **Trend Analysis**: Assess whether the stock is improving, stable, or declining

### Specific Decision Rules

**COOPERATE when:**
- Stock level ≥ 50% of capacity, OR
- Stock level ≥ 25% of capacity AND community cooperation rate ≥ 50% in last 3 rounds, OR
- Stock is growing (current stock > previous stock) AND stock ≥ 15% of capacity

**DEFECT when:**
- Stock level < 15% of capacity (emergency survival mode), OR
- Stock level < 25% of capacity AND community cooperation rate < 30% in last 3 rounds, OR
- Stock has declined for 3+ consecutive rounds AND community cooperation rate < 40%

## Edge Case Handling

### First Round
- Always COOPERATE (establish good faith and gather information about opponents)

### Early Rounds (rounds 2-3)
- COOPERATE unless stock drops below 25% of capacity
- Use these rounds primarily for information gathering about opponent strategies

### Last Round
- If stock ≥ 20% of capacity: COOPERATE (maintain cooperative reputation)
- If stock < 20% of capacity: Make decision based on whether defection would meaningfully improve total payoff

### Near-Depletion Scenarios
- If stock approaches zero (< 5% of capacity): Switch to DEFECT for survival, but immediately return to COOPERATE if stock recovers above 15%

## Adaptive Mechanisms

### Community Behavior Tracking
Maintain a rolling window of the last 3 rounds to calculate:
- **Cooperation Rate**: Percentage of all players (excluding self) who played C
- **Cooperation Trend**: Whether cooperation is increasing, stable, or decreasing

### Stock Recovery Support
When stock is recovering (growing between rounds):
- Lower the cooperation threshold by 10 percentage points
- This encourages sustained cooperation during recovery phases

### Forgiveness Mechanism
If the community cooperation rate was low but suddenly increases:
- Immediately return to cooperation if stock ≥ 25% of capacity
- This prevents punishment spirals and encourages renewed cooperation

## Pseudocode

```
function decide_action(round, stock, capacity, history, n_players):
    stock_percentage = stock / capacity * 100
    
    // First round: always cooperate
    if round == 1:
        return COOPERATE
    
    // Calculate community cooperation rate (last 3 rounds or all available)
    recent_rounds = min(3, round - 1)
    community_coop_rate = calculate_cooperation_rate(history, recent_rounds, n_players)
    
    // Check if stock is growing
    stock_growing = (round > 1) and (stock > history[round-1].stock)
    
    // Emergency survival mode
    if stock_percentage < 15:
        return DEFECT
    
    // High stock: cooperate
    if stock_percentage >= 50:
        return COOPERATE
    
    // Medium stock: depend on community behavior
    if stock_percentage >= 25:
        if community_coop_rate >= 50:
            return COOPERATE
        else:
            return DEFECT
    
    // Low stock scenarios
    if stock_percentage >= 15:
        if stock_growing and community_coop_rate >= 30:
            return COOPERATE
        elif community_coop_rate >= 60:  // High community cooperation
            return COOPERATE
        else:
            return DEFECT
    
    // Default fallback
    return DEFECT
```

## Key Strengths

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive**: Responds to both stock levels and opponent behavior patterns
3. **Forgiving**: Quickly returns to cooperation when conditions improve
4. **Robust**: Handles edge cases and various opponent strategy mixes
5. **Cooperative Bias**: Defaults to cooperation when conditions are reasonable

This strategy balances the cooperative ideal with practical survival needs, making it effective against both highly cooperative and more exploitative opponents while maintaining the resource for all players' benefit.
'''

description_COOPERATIVE_37 = '''
# Adaptive Cooperative Strategy: "Sustainable Trust with Graduated Reciprocation"

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intent, using adaptive mechanisms to encourage cooperation and discourage exploitation.

## Decision Framework

### 1. Cooperation Baseline
- **Default Action**: Always start with cooperation (C) and maintain cooperative intent
- **Rationale**: Cooperation maximizes long-term sustainability and total welfare

### 2. Stock Health Assessment
Monitor stock levels to determine system health:
- **Healthy**: stock ≥ 0.6 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.6 × capacity  
- **Critical**: stock < 0.3 × capacity

### 3. Opponent Behavior Analysis
Track each opponent's cooperation rate over a sliding window:
- **Recent window**: Last min(3, current_round-1) rounds
- **Overall rate**: Total cooperation rate since round 1
- **Classification**:
  - Cooperative: Recent cooperation rate ≥ 70%
  - Mixed: 30% ≤ Recent cooperation rate < 70%
  - Exploitative: Recent cooperation rate < 30%

## Primary Decision Rules

### Round 1: Pure Cooperation
Always play C to establish cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Response

**IF stock is Critical (< 0.3 × capacity):**
- Play C only if ALL other players played C in the previous round
- Otherwise play D (emergency resource protection)

**ELSE IF stock is Stressed (0.3-0.6 × capacity):**
- Calculate cooperation threshold: 0.6 - (fraction of exploitative players × 0.3)
- Play C if percentage of players who played C last round ≥ cooperation threshold
- Otherwise play D

**ELSE (stock is Healthy ≥ 0.6 × capacity):**
- Play C if ≥ 50% of players played C in the previous round
- Play D if majority defected, but return to C if any player switches back to cooperation

### Final Round: Conditional Cooperation
- If stock ≥ 0.4 × capacity: Play C (leave resources for the future, even symbolically)
- If stock < 0.4 × capacity: Mirror the most common action from the previous round

## Adaptive Mechanisms

### Forgiveness Protocol
- If a previously exploitative player cooperates for 2 consecutive rounds, reclassify them as "Mixed"
- This prevents permanent punishment and allows rehabilitation

### Graduated Response
Rather than binary punishment:
1. First defection by majority → Brief defection (1 round)
2. Continued exploitation → Extended defection until cooperation resumes
3. Critical stock levels → Strict conditional cooperation

### Stock Recovery Incentive
When stock drops below 0.5 × capacity, actively signal cooperation:
- Play C even if slightly more players defected last round (up to 55% defection rate)
- Rationale: Encourage others to help rebuild the resource base

## Edge Case Handling

### All Players Always Defect
- Switch to defection after 3 rounds of universal defection
- Occasionally (every 4-5 rounds) attempt cooperation to test if others will reciprocate

### Highly Variable Opponents
- Use longer observation windows (5 rounds instead of 3)
- Focus more on overall cooperation rates than recent behavior

### Near-Empty Stock
- If stock falls below 0.1 × capacity, prioritize any action that preserves remaining resources
- Play C only if certain that others will also cooperate

## Implementation Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    if round == 1:
        return C
    
    stock_health = classify_stock_health(stock, capacity)
    recent_cooperation_rate = calculate_recent_cooperation(history, min(3, round-1))
    
    if stock_health == "Critical":
        if all_cooperated_last_round(history):
            return C
        else:
            return D
    
    elif stock_health == "Stressed":
        exploitative_fraction = count_exploitative_players(history) / (n-1)
        threshold = 0.6 - (exploitative_fraction * 0.3)
        if recent_cooperation_rate >= threshold:
            return C
        else:
            return D
    
    else:  # Healthy stock
        if recent_cooperation_rate >= 0.5:
            return C
        elif any_player_switched_to_cooperation(history):
            return C
        else:
            return D
```

## Strategic Rationale

This strategy balances:
1. **Cooperative Intent**: Default to cooperation, encouraging others to do the same
2. **Sustainability**: Protect resources when they become scarce
3. **Adaptability**: Respond to both stock levels and opponent behavior
4. **Forgiveness**: Allow rehabilitation of exploitative players
5. **Robustness**: Handle various opponent types while maintaining cooperative goals

The strategy aims to create positive feedback loops where cooperation begets cooperation, while having safeguards against exploitation and resource collapse.
'''

description_COOPERATIVE_38 = '''
# Adaptive Cooperative Strategy: "Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation. It balances cooperation with strategic defection to maintain the resource pool and incentivize others to cooperate.

## Decision Rules

### 1. **Cooperation Threshold System**
- **Primary Rule**: Cooperate (C) if the current stock level is above a dynamic threshold
- **Threshold Formula**: `cooperation_threshold = capacity * (0.3 + 0.4 * cooperation_rate)`
  - Where `cooperation_rate` = fraction of all players who cooperated in the last round
  - Ranges from 30% of capacity (when no one cooperated last round) to 70% of capacity (when everyone cooperated)

### 2. **Stock Health Assessment**
```pseudocode
stock_health = current_stock / capacity
if stock_health >= 0.7:
    bias_toward_cooperation = TRUE
elif stock_health <= 0.3:
    bias_toward_defection = TRUE (conservation mode)
else:
    use_standard_threshold_system
```

### 3. **Opponent Behavior Tracking**
- Track each player's cooperation rate over the last 3 rounds
- **Reciprocity Mechanism**: If a player has cooperated in ≥2 of their last 3 moves, they're classified as "cooperative"
- **Punishment Mechanism**: If the majority of players (>50%) defected in the previous round AND stock is above emergency level (>20% capacity), increase defection probability by 0.3

## Specific Decision Process

### Round 1 (First Round)
- Always **COOPERATE**
- Establishes cooperative intent and gathers initial information about opponents

### Rounds 2 to r-1 (Middle Rounds)
```pseudocode
if current_stock < 0.2 * capacity:
    // Emergency conservation mode
    action = DEFECT
elif current_stock > cooperation_threshold AND stock_health > 0.3:
    // Favorable conditions for cooperation
    if majority_cooperated_last_round OR my_recent_cooperation_rate < 0.6:
        action = COOPERATE
    else:
        // Prevent over-cooperation exploitation
        action = COOPERATE with probability 0.8, DEFECT with probability 0.2
else:
    // Unfavorable conditions - strategic defection
    if opponent_cooperation_rate_last_round > 0.6:
        // Others are cooperative, can afford to cooperate
        action = COOPERATE
    else:
        // Protect against mass defection
        action = DEFECT
```

### Final Round (Round r)
```pseudocode
if current_stock < 0.3 * capacity:
    // Resource is depleted, defect to maximize final payoff
    action = DEFECT
elif opponent_cooperation_rate_overall > 0.5:
    // Reward consistent cooperators
    action = COOPERATE
else:
    // Others have been mostly uncooperative
    action = DEFECT
```

## Edge Cases & Robustness Features

### 1. **Stock Depletion Recovery**
- If stock drops below 10% of capacity, switch to pure defection for 2 rounds to allow recovery
- Monitor if this helps stock recovery; if not, return to cooperative stance

### 2. **All-Defector Environment**
- If all other players defect for 2+ consecutive rounds:
  - Switch to defection but with 20% cooperation probability to test for strategy changes
  - Gradually increase cooperation if others start cooperating

### 3. **Exploitation Prevention**
- Track personal exploitation: if consistently getting lower payoffs than average despite cooperating
- Temporarily increase defection rate by 0.4 for 1-2 rounds, then reassess

### 4. **End-Game Adjustment**
- In final 2 rounds, weight immediate payoffs more heavily
- But maintain some cooperation if resource health is good and others have been cooperative

## Adaptive Elements

1. **Dynamic Thresholds**: Cooperation threshold adjusts based on observed cooperation rates
2. **Learning**: Strategy becomes more defensive if consistently exploited
3. **Forgiveness**: Returns to cooperation after punishment if others improve behavior
4. **Context Sensitivity**: Responds differently based on resource health and game phase

## Key Strengths

- **Robust**: Handles various opponent strategies from pure cooperation to pure defection
- **Adaptive**: Learns and adjusts to opponent behavior patterns
- **Resource-Conscious**: Prioritizes long-term sustainability over short-term gains
- **Exploiter-Resistant**: Has mechanisms to detect and respond to exploitation
- **Cooperative by Default**: Starts cooperative and returns to cooperation when conditions allow

This strategy aims to be a "good citizen" that promotes collective welfare while being intelligent enough to protect itself and the resource from tragedy-of-the-commons scenarios.
'''

description_COOPERATIVE_39 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term collective welfare while maintaining robust defenses against exploitation. It operates on the principle that sustainable cooperation requires both trust-building and accountability mechanisms.

## Decision Rules

### Primary Decision Framework
The strategy uses a **Sustainability-Trust Index (STI)** that combines:
1. **Resource Health**: Current stock level relative to capacity
2. **Cooperation History**: Recent cooperative behavior of other players
3. **Punishment Phase**: Active retaliation against detected defection

### Mathematical Components

**Resource Health Score (RHS):**
```
RHS = stock / capacity
- High (≥0.75): Resource is healthy
- Medium (0.3-0.75): Resource needs care
- Critical (<0.3): Emergency conservation mode
```

**Cooperation Score (CS):**
```
CS = (Total C actions in last min(3, current_round)) / (n × min(3, current_round))
- Tracks recent cooperative behavior of all players
- Uses sliding window of last 3 rounds maximum
```

**Trust Threshold (TT):**
```
TT = 0.6 + 0.2 × RHS
- Higher resource health allows for more lenient cooperation threshold
- Ranges from 0.6 (critical resources) to 0.8 (healthy resources)
```

### Core Decision Logic

```pseudocode
function decide_action(round, stock, capacity, history):
    RHS = stock / capacity
    CS = calculate_cooperation_score(history)
    TT = 0.6 + 0.2 × RHS
    
    // Emergency conservation
    if RHS < 0.2:
        return COOPERATE
    
    // First round - always cooperate
    if round == 1:
        return COOPERATE
    
    // Check if in punishment phase
    if in_punishment_phase():
        return handle_punishment_phase()
    
    // Main decision logic
    if CS >= TT:
        return COOPERATE
    else:
        return initiate_punishment()
```

## Specific Behavioral Rules

### 1. First Round Behavior
- **Always COOPERATE** to signal cooperative intent and establish baseline

### 2. Cooperation Conditions
**COOPERATE when:**
- Resource health is critical (RHS < 0.2) - regardless of others' behavior
- Cooperation score meets or exceeds trust threshold
- All players cooperated in the previous round
- We're in the final 2 rounds AND resource health > 0.3

### 3. Defection Triggers
**DEFECT when:**
- Cooperation score falls below trust threshold
- More than 50% of players defected in the previous round (unless resources critical)
- Detected systematic exploitation (2+ consecutive rounds of majority defection)

### 4. Punishment Mechanism
When defection is triggered:
```pseudocode
punishment_rounds = min(2, remaining_rounds - 1)
punishment_intensity = 1.0 - CS  // Higher when cooperation is lower

for each punishment_round:
    if CS_current_round > 0.7:  // Forgiveness condition
        exit_punishment_early()
    else:
        DEFECT
```

### 5. Endgame Handling
**Final Round Strategy:**
- If RHS > 0.5: COOPERATE (leave resources for hypothetical continuation)
- If RHS ≤ 0.5: Follow main decision logic

**Penultimate Round:**
- Increase cooperation threshold by 0.1 to encourage endgame cooperation
- If cooperation score > 0.8, always COOPERATE

## Edge Case Management

### Resource Depletion Scenarios
- **Stock < 10% capacity**: Emergency mode - always COOPERATE regardless of others
- **Stock approaching zero**: Cooperate to maximize any remaining growth potential

### High Defection Environment
- **Majority defection detected**: Enter "Conditional Retaliation" - defect but immediately return to cooperation if others show cooperative signals
- **Universal defection**: Match defection but maintain readiness to restart cooperation

### Late Entry Detection
- If joining mid-game, use conservative trust threshold (0.7) for first 2 rounds
- Prioritize resource preservation while learning opponent patterns

## Adaptive Features

### Learning Component
Track each player's individual cooperation rate:
```pseudocode
individual_cooperation_rates[player_i] = (C_actions by player_i) / (total_rounds_observed)
```

Use this to:
- Weight cooperation score toward more reliable cooperators
- Identify and respond to mixed strategies
- Adjust punishment targeting

### Robustness Mechanisms
1. **Anti-Exploitation**: Never cooperate for more than 3 consecutive rounds if CS < 0.4
2. **Recovery Protocol**: After punishment phase, gradually increase cooperation threshold over 2 rounds
3. **Resource Protection**: Override all other rules if stock would be depleted beyond recovery

## Strategy Justification

This strategy balances:
- **Cooperation**: Default tendency toward cooperation, especially when resources are healthy
- **Sustainability**: Strong resource protection mechanisms prevent tragedy of commons
- **Adaptability**: Responds to opponent behavior patterns while maintaining core cooperative goals
- **Robustness**: Defended against exploitation through measured punishment and quick forgiveness
- **Simplicity**: Rules are clear and don't require complex opponent modeling

The strategy aims to foster sustainable cooperation while being resilient enough to survive in competitive environments with diverse opponent strategies.
'''

description_COOPERATIVE_40 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to group dynamics. It assumes that cooperation is beneficial for all players but adapts when faced with persistent defection to prevent exploitation.

## Decision Rules

### 1. Cooperation Threshold System
The strategy uses a dynamic cooperation threshold based on the health of the resource:

```
cooperation_ratio = (current_stock / capacity)
base_cooperation_threshold = 0.6 + 0.3 * cooperation_ratio
```

This means:
- When stock is high (near capacity): threshold ≈ 0.9 (almost always cooperate)
- When stock is medium (50% capacity): threshold = 0.75
- When stock is low (near 0): threshold = 0.6 (still prefer cooperation but more cautious)

### 2. Historical Cooperation Assessment
Track the cooperation rate of all other players over a sliding window:

```
recent_window_size = min(3, current_round)
recent_cooperation_rate = (total_C_actions_by_others_in_window) / (n-1) / window_size
```

### 3. Main Decision Logic

**COOPERATE if:**
- `recent_cooperation_rate >= base_cooperation_threshold`, OR
- Current round ≤ 2 (give initial trust), OR  
- Stock is critically low (`stock < n`) AND recent_cooperation_rate > 0.3 (try to save the resource)

**DEFECT if:**
- `recent_cooperation_rate < base_cooperation_threshold` AND stock is not critically low

## Edge Cases

### First Round
- **Always COOPERATE**: Establish cooperative intent and give others the benefit of the doubt

### Second Round  
- **Always COOPERATE**: Allow for potential misunderstandings or exploration by others in round 1

### Last Round
- **COOPERATE if** recent cooperation rate > 0.4
- **DEFECT otherwise**: Since there's no future to preserve, slight bias toward immediate payoff if cooperation has been low

### Critical Stock Situations
When `stock < n` (critically low):
- **COOPERATE if** ANY other player cooperated in the previous round
- This "lifeline" rule attempts to save the resource even when cooperation has been generally low

### Resource Collapse
When `stock = 0`:
- **COOPERATE**: Nothing to gain from defecting, and this signals willingness to rebuild

## Adaptive Features

### 1. Forgiveness Mechanism
If cooperation rate was low but improves by >0.3 in the recent window compared to the previous window, reset to cooperative stance regardless of threshold.

### 2. Reputation Tracking
While maintaining the same action for all opponents (no individual targeting), internally track if the group tends toward:
- **Reciprocal patterns**: Increase cooperation when others increase cooperation
- **Exploitation patterns**: Quickly shift to self-protection when consistently exploited

### 3. Resource Health Prioritization
When stock health is very high (>0.9 capacity), be extra forgiving of occasional defections since the resource can sustain them.

## Pseudocode Summary

```
function decide_action(current_round, stock, capacity, n, action_history):
    cooperation_ratio = stock / capacity
    base_threshold = 0.6 + 0.3 * cooperation_ratio
    
    if current_round <= 2:
        return COOPERATE
    
    window_size = min(3, current_round - 1)
    recent_coop_rate = calculate_recent_cooperation_rate(action_history, window_size)
    
    # Critical stock exception
    if stock < n and recent_coop_rate > 0.3:
        return COOPERATE
    
    # Last round logic
    if current_round == total_rounds:
        return COOPERATE if recent_coop_rate > 0.4 else DEFECT
    
    # Forgiveness check
    if shows_improvement_in_cooperation(action_history):
        return COOPERATE
    
    # Main decision
    if recent_coop_rate >= base_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Why This Strategy Works

1. **Starts cooperatively** to encourage reciprocal cooperation
2. **Adapts to resource health** - more willing to cooperate when the resource can sustain it
3. **Responds to group behavior** without being overly punitive
4. **Protects against exploitation** while remaining open to renewed cooperation
5. **Prioritizes sustainability** especially in critical situations
6. **Balances immediate and long-term payoffs** based on context

This strategy should perform well against other cooperative strategies while defending against pure defectors, making it robust for tournament play.
'''

description_COOPERATIVE_41 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperatively but can respond to exploitation while always seeking to return to cooperation when possible.

## Decision Rules

### Primary Decision Logic:
1. **Default to Cooperation**: Always prefer C unless specific conditions trigger defection
2. **Sustainability Threshold**: Monitor if the stock is at risk of collapse
3. **Exploitation Response**: Respond proportionally to defection but with forgiveness
4. **Recovery Promotion**: Actively work to restore both stock and cooperation

### Detailed Strategy:

#### Round 1: Always Cooperate
- Play C to signal cooperative intent
- Establish baseline for future decisions

#### Rounds 2 to r-1: Adaptive Response

**Step 1: Stock Health Assessment**
```pseudocode
stock_health_ratio = current_stock / capacity
critical_threshold = 0.3
sustainable_threshold = 0.6
```

**Step 2: Opponent Behavior Analysis**
```pseudocode
recent_defection_rate = count_defections_last_3_rounds / (3 * (n-1))
overall_defection_rate = total_defections_observed / (total_rounds_played * (n-1))
```

**Step 3: Decision Matrix**

If `stock_health_ratio < critical_threshold`:
- **Emergency Mode**: Play C to help rebuild stock
- Exception: If >75% of others defected last round AND stock > 0, play D once as warning

If `critical_threshold ≤ stock_health_ratio < sustainable_threshold`:
- **Recovery Mode**: 
  - Play C if `recent_defection_rate < 0.5`
  - Play D if `recent_defection_rate ≥ 0.5` (defensive response)

If `stock_health_ratio ≥ sustainable_threshold`:
- **Stable Mode**:
  - Play C if `recent_defection_rate < 0.3`
  - Play graduated response if `recent_defection_rate ≥ 0.3`:
    - D with probability = min(recent_defection_rate, 0.8)
    - C otherwise

**Step 4: Forgiveness Mechanism**
- If played D last round due to exploitation, check if others improved:
  - If defection rate dropped by >30% from previous round, return to C
  - This encourages others to return to cooperation

#### Final Round: Conditional Cooperation
- If stock is healthy (>50% capacity): Play C to end on cooperative note
- If stock is critical (<30% capacity): Play C to maximize remaining value
- Otherwise: Mirror the majority behavior from previous round

## Edge Case Handling

### Stock Depletion Scenarios:
- **Stock approaches zero**: Always cooperate to allow any possible recovery
- **Stock at capacity**: Cooperate unless facing persistent exploitation

### Extreme Opponent Behaviors:
- **All opponents always defect**: Minimize own defection to preserve what stock remains
- **Mixed persistent patterns**: Focus on stock preservation while occasionally signaling willingness to cooperate

### Information Asymmetries:
- **Limited history**: Rely more heavily on stock health than behavior patterns
- **Unclear patterns**: Default to cooperation with gradual adaptation

## Robustness Features

1. **Stock-First Priority**: Never sacrifice long-term sustainability for short-term gains
2. **Graduated Responses**: Avoid harsh tit-for-tat that might spiral into mutual defection
3. **Recovery Incentives**: Actively reward others for returning to cooperation
4. **Adaptive Thresholds**: Adjust response sensitivity based on game parameters (n, r, capacity)

## Parameter Adaptations

- **Large n**: Lower defection response threshold (more players = greater impact of each defector)
- **Small n**: Higher forgiveness (easier to coordinate with fewer players)
- **High capacity**: More patient with rebuilding phases
- **Few rounds**: More immediate response to threats
- **Many rounds**: More patient with teaching/learning phases

This strategy balances immediate self-interest with long-term collective benefit, adapts to various opponent behaviors, and always seeks to restore cooperation when possible while maintaining the resource for all players.
'''

description_COOPERATIVE_42 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare by maintaining the resource pool while being robust against exploitation. It balances cooperation with strategic defection to protect the commons from overexploitation.

## Decision Framework

### 1. **Cooperation Threshold System**
- **Primary Rule**: Cooperate when the stock level is above a **critical threshold**
- **Critical Threshold** = `max(capacity * 0.4, 2n)` 
- **Rationale**: Below 40% capacity or minimum viable level (2n), the resource needs protection

### 2. **Adaptive Response Mechanism**

#### Phase 1: Trust-Building (First 20% of rounds)
```
IF round_number <= max(2, r * 0.2):
    IF stock >= critical_threshold:
        COOPERATE
    ELSE:
        DEFECT (protect depleted resource)
```

#### Phase 2: Reciprocal Cooperation (Middle rounds)
```
IF round_number > r * 0.2 AND round_number < r * 0.8:
    
    // Calculate recent cooperation rate of others
    recent_coop_rate = (others_cooperation_count in last 3 rounds) / (3 * (n-1))
    
    IF stock >= critical_threshold AND recent_coop_rate >= 0.5:
        COOPERATE
    ELSE IF stock >= critical_threshold AND recent_coop_rate >= 0.3:
        // Conditional cooperation - give others a chance
        COOPERATE with probability 0.7
    ELSE:
        DEFECT
```

#### Phase 3: End-Game Protection (Last 20% of rounds)
```
IF round_number >= r * 0.8:
    
    IF stock >= capacity * 0.8:
        // Resource is abundant, safe to cooperate
        COOPERATE
    ELSE IF stock >= critical_threshold:
        // Medium stock - be more cautious as game ends
        recent_defection_rate = (others_defections in last 2 rounds) / (2 * (n-1))
        IF recent_defection_rate <= 0.3:
            COOPERATE
        ELSE:
            DEFECT
    ELSE:
        // Low stock - protect what's left
        DEFECT
```

### 3. **Emergency Protection Protocol**
```
// Override all other rules if resource is critically endangered
IF stock < n * 1.5:  // Less than 1.5 times minimum viable
    DEFECT  // Force resource recovery
```

### 4. **Forgiveness and Recovery Mechanism**
- **Forgiveness Window**: After 2 consecutive rounds where stock > critical_threshold AND majority cooperated, reset trust level
- **Recovery Signal**: If stock recovers to > 70% capacity, increase cooperation probability by 20% for next 2 rounds

## Edge Case Handling

### First Round
- **Always COOPERATE** (establish cooperative intent and gather information)

### Last Round
- **COOPERATE** if stock ≥ critical_threshold AND others showed cooperation in previous round
- **DEFECT** otherwise (prevent final exploitation)

### Stock Depletion Scenarios
- If stock reaches 0: Strategy automatically DEFECTs until stock recovers to > 0
- If stock < critical_threshold for 3+ consecutive rounds: Increase defection probability to force recovery

### High-Stock Scenarios  
- If stock = capacity for 3+ consecutive rounds: Increase cooperation probability to 0.9 (resource is abundant)

## Robustness Features

1. **Anti-Exploitation**: Responds to sustained defection by protecting resources
2. **Recovery Promotion**: Helps rebuild depleted commons through strategic defection
3. **Adaptive Thresholds**: Adjusts behavior based on group size and resource capacity
4. **Memory Management**: Uses recent history (2-3 rounds) rather than full history to avoid being locked into suboptimal patterns
5. **Probabilistic Elements**: Includes randomized cooperation in borderline cases to avoid predictability

## Strategic Rationale

This strategy recognizes that pure cooperation can be exploited and lead to commons collapse, while pure defection prevents resource regeneration. By using stock levels as the primary decision criterion and incorporating adaptive responses to others' behavior, it:

- Protects the commons when vulnerable
- Rewards collective cooperation when resources are adequate  
- Maintains long-term sustainability over short-term gains
- Remains unpredictable enough to avoid systematic exploitation
- Balances individual rationality with collective welfare

The strategy is inherently cooperative in spirit—it seeks to maintain the resource for everyone's benefit—while being strategically sophisticated enough to handle various opponent behaviors in a tournament setting.
'''

description_COOPERATIVE_43 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It assumes that cooperation benefits everyone in the long run, but includes defensive mechanisms against exploitation.

## Decision Rules

### 1. **Cooperation Threshold System**
The strategy maintains a dynamic "cooperation threshold" based on stock health and observed opponent behavior:

```
cooperation_threshold = base_threshold + stock_adjustment + behavior_adjustment

Where:
- base_threshold = 0.6 (60% of players should appear cooperative)
- stock_adjustment = -0.3 * (1 - current_stock/capacity) 
- behavior_adjustment = 0.2 * (recent_cooperation_rate - 0.5)
```

### 2. **Primary Decision Rule**
**Cooperate (C)** if ANY of these conditions are met:
- Current stock > 0.8 * capacity (abundant resources)
- Estimated cooperation rate ≥ cooperation_threshold
- It's the first round
- Stock is critically low (< 0.2 * capacity) AND majority cooperated last round

**Otherwise Defect (D)**

### 3. **Cooperation Rate Estimation**
Track the fraction of players who cooperated in recent rounds:
```
recent_cooperation_rate = (cooperators_last_round + 0.5 * cooperators_two_rounds_ago) / 
                         (n + 0.5 * n)
```

## Adaptive Mechanisms

### **Stock-Based Adaptation**
- **High Stock (>80% capacity)**: Always cooperate to maintain goodwill
- **Medium Stock (20-80% capacity)**: Use threshold-based decision
- **Critical Stock (<20% capacity)**: Emergency cooperation if others showed cooperation last round, otherwise defect to survive

### **Behavioral Learning**
- **High Cooperation Environment** (>70% cooperation rate): Increase willingness to cooperate
- **Mixed Environment** (30-70% cooperation): Maintain balanced approach  
- **Low Cooperation Environment** (<30% cooperation): Become more defensive but still offer periodic cooperation signals

### **Round-Based Adjustments**
- **First Round**: Always cooperate (establish cooperative intent)
- **Early Rounds (1-25%)**: Slightly favor cooperation to build relationships
- **Middle Rounds**: Apply standard threshold system
- **Late Rounds (last 25%)**: Gradually become more defensive as end-game approaches
- **Final Round**: Defect (no future consequences)

## Edge Case Handling

### **First Round**
Always cooperate to signal cooperative intent and gather information about opponent strategies.

### **Last Round** 
Always defect since there are no future consequences and rational players will defect.

### **Stock Depletion**
If stock falls to 0, continue playing but focus purely on defensive defection since no growth is possible.

### **Unanimous Defection Detection**
If all players defected in the previous round and stock > 0, offer cooperation as a "reset signal" to break destructive cycles.

## Robustness Features

### **Anti-Exploitation Measures**
- Never cooperate more than 3 consecutive rounds if cooperation rate < 40%
- If personally exploited (cooperated while <30% of others did) more than 2 times in recent history, become more defensive

### **Recovery Mechanisms**
- Periodically offer cooperation (every 4-5 rounds) even in hostile environments
- If stock recovers significantly after mutual defection, signal willingness to restart cooperation

### **Noise Tolerance**
- Don't overreact to single-round deviations
- Use weighted averages over multiple rounds for behavior assessment

## Pseudocode Summary

```
function decide_action(round, stock, capacity, n, history):
    if round == 1:
        return COOPERATE
    
    if round == final_round:
        return DEFECT
    
    if stock > 0.8 * capacity:
        return COOPERATE
    
    cooperation_rate = estimate_recent_cooperation_rate(history, n)
    threshold = calculate_cooperation_threshold(stock, capacity, cooperation_rate)
    
    if cooperation_rate >= threshold:
        return COOPERATE
    
    if stock < 0.2 * capacity and majority_cooperated_last_round(history, n):
        return COOPERATE
    
    if should_send_cooperation_signal(history, round):
        return COOPERATE
    
    return DEFECT
```

This strategy balances cooperative intentions with realistic defensive measures, adapts to various opponent behaviors, and maintains focus on long-term sustainability while protecting against exploitation.
'''

description_COOPERATIVE_44 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the resource pool at healthy levels through intelligent cooperation, with built-in defenses against exploitation.

## Decision Rules

### 1. Stock Health Assessment
First, categorize the current stock level:
- **Healthy**: stock ≥ 0.7 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.4 × capacity

### 2. Opponent Behavior Analysis
Track cooperation rates for each opponent over a sliding window of the last min(5, current_round-1) rounds:
- **Cooperative opponent**: cooperation rate ≥ 60%
- **Mixed opponent**: 30% ≤ cooperation rate < 60%
- **Defective opponent**: cooperation rate < 30%

### 3. Main Decision Logic

**Round 1**: Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1**: Apply the following hierarchy:

```pseudocode
if stock_level == "Critical":
    if majority_of_opponents_are_cooperative:
        COOPERATE  // Trust others to help recovery
    else:
        DEFECT     // Survival mode
        
elif stock_level == "Moderate":
    if cooperation_rate_last_3_rounds ≥ 50%:
        COOPERATE  // Reward good behavior
    else:
        // Graduated response based on defection severity
        if cooperation_rate_last_3_rounds < 20%:
            DEFECT
        else:
            COOPERATE with 70% probability, DEFECT with 30%
            
elif stock_level == "Healthy":
    if cooperation_rate_last_round ≥ 60%:
        COOPERATE
    else:
        // Tit-for-tat with forgiveness
        if cooperation_rate_last_round < 30%:
            DEFECT
        else:
            COOPERATE with 80% probability, DEFECT with 20%
```

**Final Round (r)**: 
- If stock is Critical: DEFECT (nothing to lose)
- Otherwise: Mirror the majority action from round r-1 (reciprocity principle)

### 4. Adaptive Mechanisms

**Forgiveness Protocol**: Every 3 rounds, if stock is not Critical, give one "forgiveness cooperation" even if opponents have been mostly defecting. This prevents permanent lock-in to mutual defection cycles.

**Emergency Override**: If stock drops below 0.2 × capacity, switch to pure survival mode (always DEFECT) until stock recovers above 0.3 × capacity.

**Momentum Detection**: If the stock has been declining for 3+ consecutive rounds despite your cooperation, become more defensive (increase defection probability by 20% in all categories).

## Edge Case Handling

1. **Very short games (r ≤ 3)**: Always COOPERATE except in final round if stock is Critical
2. **Large player groups (n > 6)**: Reduce cooperation thresholds by 10% to account for coordination difficulty  
3. **Small capacity relative to players**: If capacity < 4n, be more conservative (treat "Moderate" stock as "Critical")
4. **Perfect cooperation detected**: If all players cooperated for 3+ consecutive rounds and stock is Healthy, continue cooperating regardless of other conditions

## Robustness Features

- **Non-exploitable**: Defects against consistent defectors to avoid being a pure victim
- **Recovery-oriented**: Prioritizes cooperation when stock needs rebuilding
- **Adaptive thresholds**: Adjusts behavior based on group dynamics rather than rigid rules
- **Forward-looking**: Considers sustainability over multiple rounds, not just immediate payoffs
- **Graduated responses**: Avoids binary reactions, using probabilistic responses for nuanced situations

This strategy balances cooperative intent with realistic self-defense, adapting to the specific dynamics of each game instance while maintaining focus on the shared goal of resource sustainability.
'''

description_COOPERATIVE_45 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting the common resource, adapting dynamically to opponent behavior patterns and resource health.

## Decision Framework

### 1. **Stock Health Assessment**
The strategy continuously monitors resource sustainability:
- **Healthy Stock**: stock > 0.7 × capacity
- **Stressed Stock**: 0.3 × capacity < stock ≤ 0.7 × capacity  
- **Critical Stock**: stock ≤ 0.3 × capacity

### 2. **Opponent Behavior Classification**
Track each opponent's cooperation rate over a sliding window of the last min(5, current_round) rounds:
- **Cooperator**: cooperation_rate ≥ 0.6
- **Mixed Player**: 0.2 < cooperation_rate < 0.6
- **Defector**: cooperation_rate ≤ 0.2

### 3. **Core Decision Rules**

**Round 1: Optimistic Start**
- Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1: Adaptive Response**
```
IF stock_health == "Critical":
    # Emergency conservation - cooperate regardless of others
    COOPERATE
    
ELIF stock_health == "Stressed":
    # Cautious approach - cooperate unless heavily exploited
    cooperator_count = count_cooperators()
    IF cooperator_count >= n/2:
        COOPERATE
    ELSE:
        # Reciprocate majority behavior to prevent total collapse
        IF majority_played_C_last_round:
            COOPERATE
        ELSE:
            DEFECT
            
ELSE: # Healthy stock
    # Apply reciprocity with forgiveness
    recent_defection_rate = calculate_recent_defection_rate()
    
    IF recent_defection_rate <= 0.3:
        COOPERATE
    ELIF recent_defection_rate <= 0.6:
        # Graduated response - match the cooperation level
        IF random() < (1 - recent_defection_rate):
            COOPERATE
        ELSE:
            DEFECT
    ELSE:
        # Heavy defection detected - brief retaliation then return to cooperation
        IF was_retaliating_last_round:
            COOPERATE  # Forgiveness after one round of retaliation
        ELSE:
            DEFECT     # One round of retaliation
```

**Final Round: Conditional Cooperation**
```
IF stock > 0 AND count_cooperators() >= n/3:
    COOPERATE  # Maintain cooperation if resource exists and some others cooperate
ELSE:
    DEFECT     # If resource depleted or facing all defectors, take what remains
```

### 4. **Key Adaptive Features**

**Stock-Based Prioritization**: When the resource is critically low, always cooperate regardless of opponent behavior to prevent total collapse.

**Graduated Reciprocity**: Rather than strict tit-for-tat, the strategy scales its response to the level of defection encountered, avoiding escalation spirals.

**Forgiveness Mechanism**: After retaliating against heavy defection, immediately return to cooperation to test if others will reciprocate.

**Majority Influence**: In stressed conditions, consider what the majority did recently rather than individual tracking, as this better reflects collective resource pressure.

**Endgame Wisdom**: In the final round, still prefer cooperation if the resource exists and some others show cooperative intent, maintaining the cooperative spirit.

### 5. **Robustness Features**

- **Memory Management**: Uses sliding windows to adapt to changing opponent strategies rather than being locked into early impressions
- **Noise Tolerance**: Gradual responses rather than sharp reactions to occasional defections
- **Coalition Building**: Tries to maintain cooperation with any players showing cooperative tendencies
- **Resource Conservation**: Prioritizes long-term sustainability over short-term gains

### 6. **Edge Case Handling**

- **All Opponents Always Defect**: Strategy will eventually defect in healthy stock conditions but immediately return to cooperation in stressed/critical conditions
- **Stock Depletion**: If stock reaches zero, the strategy maintains its cooperative stance for when/if stock recovers
- **Single Opponent (n=2)**: Strategy functions identically, with majority rules becoming individual opponent tracking
- **High Capacity Games**: Stock health thresholds scale with capacity, maintaining proportional responses

This strategy balances immediate reciprocity needs with long-term resource sustainability, making it robust against both exploitative opponents and overly generous strategies that might enable resource depletion.
'''

description_COOPERATIVE_46 = '''
# Adaptive Cooperative Pool Management Strategy (ACPM)

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behaviors. It starts cooperative but includes mechanisms to protect against exploitation and encourage cooperation through demonstrated reciprocity.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the stock drops below a critical threshold

### 2. Stock Health Assessment
Define stock health levels:
- **Healthy**: stock ≥ 0.75 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.75 × capacity  
- **Critical**: 0.15 × capacity ≤ stock < 0.4 × capacity
- **Depleted**: stock < 0.15 × capacity

### 3. Cooperation Propensity Calculation
Track each opponent's cooperation rate over a sliding window of the last min(5, current_round-1) rounds:
- **High cooperators**: cooperation_rate ≥ 0.6
- **Mixed players**: 0.3 ≤ cooperation_rate < 0.6
- **Low cooperators**: cooperation_rate < 0.3

### 4. Main Decision Rules

**Primary Rule - Stock-Based Cooperation:**
```
IF stock_health == "Healthy":
    cooperate_probability = 0.9
ELIF stock_health == "Moderate":
    cooperate_probability = 0.7 - (0.3 × fraction_of_defectors)
ELIF stock_health == "Critical":
    cooperate_probability = 0.5 - (0.4 × fraction_of_defectors)
ELSE: // Depleted
    cooperate_probability = 0.2
```

**Reciprocity Adjustment:**
```
high_coop_count = count_of_high_cooperators
total_opponents = n - 1

reciprocity_bonus = 0.2 × (high_coop_count / total_opponents)
cooperate_probability += reciprocity_bonus
```

**Final Decision:**
```
IF random() < min(cooperate_probability, 0.95):
    action = COOPERATE
ELSE:
    action = DEFECT
```

### 5. Special Situations

**Endgame Behavior (Last 20% of rounds):**
- Increase cooperation probability by 0.1 when stock is healthy/moderate
- This prevents end-game defection cascades that destroy remaining value

**Recovery Mode:**
When stock < 0.1 × capacity for 2+ consecutive rounds:
- Force cooperation for next 2 rounds regardless of others' actions
- This attempts to break defection spirals

**Forgiveness Mechanism:**
If a previously low-cooperating player shows 2 consecutive cooperative moves:
- Treat them as "Mixed" for the next 3 rounds
- This encourages reformed behavior

## Edge Case Handling

1. **First Round**: Always cooperate (no history available)

2. **Round 2-3**: Cooperate unless stock dropped below 50% of capacity in previous round

3. **Last Round**: Use normal decision rules (don't assume others will defect)

4. **Stock Depletion**: If stock reaches 0, cooperate in subsequent rounds to attempt recovery

5. **Perfect Cooperation History**: If all players have cooperated in all previous rounds, cooperate with 95% probability

## Robustness Features

1. **Probabilistic Decisions**: Avoids being completely predictable while maintaining cooperative tendencies

2. **Adaptive Windows**: Uses recent history more heavily than distant past

3. **Graduated Response**: Doesn't immediately retaliate against single defections

4. **Recovery Orientation**: Always maintains some probability of cooperation to enable pool recovery

5. **Stock-State Awareness**: Adjusts behavior based on resource scarcity, not just opponent actions

## Expected Behavior Patterns

- Against **All Cooperators**: Maintains high cooperation (90%+) leading to sustainable resource use
- Against **All Defectors**: Reduces cooperation but doesn't completely stop, allowing for potential recovery
- Against **Mixed Strategies**: Adapts cooperation level based on the composition and current stock health
- Against **Trigger Strategies**: Can recover from punishment phases through consistent cooperation demonstration

This strategy balances the cooperative imperative with practical adaptability, aiming to maximize long-term collective welfare while protecting against exploitation.
'''

description_COOPERATIVE_47 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and adjusts based on the collective health of the resource and opponent cooperation levels.

## Decision Rules

### 1. Stock Health Assessment
First, classify the current stock condition:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Cooperation Level Tracking
Track the cooperation rate from previous rounds:
- `coop_rate = (total C actions by all players) / (total actions by all players)`
- Maintain a rolling average over the last min(3, current_round-1) rounds

### 3. Main Decision Logic

```pseudocode
if round == 1:
    return COOPERATE  // Always start cooperative

if stock < capacity/(4n):  // Near depletion
    return COOPERATE  // Emergency conservation mode

if round == final_round:
    if stock >= capacity/2:
        return COOPERATE  // Leave resource in good state
    else:
        return DEFECT    // Last chance to benefit from depleted resource

// Main adaptive logic
if stock_condition == "Healthy":
    if coop_rate >= 0.6:
        return COOPERATE  // Maintain good cooperation
    else if coop_rate >= 0.3:
        return COOPERATE with 80% probability  // Encourage cooperation
    else:
        return DEFECT    // Protect against mass defection
        
else if stock_condition == "Stressed":
    if coop_rate >= 0.5:
        return COOPERATE  // Help recovery
    else:
        return COOPERATE with 60% probability  // Cautious cooperation
        
else:  // Critical condition
    if coop_rate >= 0.7:
        return COOPERATE  // Strong cooperation needed for recovery
    else:
        return COOPERATE with 40% probability  // Limited faith in recovery
```

## Key Features

### 4. Adaptive Thresholds
The cooperation thresholds adjust based on game parameters:
- In longer games (r > 10): Be more forgiving early on, stricter later
- With more players (n > 6): Require higher cooperation rates due to tragedy of commons
- Higher capacity games: Be more patient with resource recovery

### 5. Emergency Conservation Mode
When stock drops below `capacity/(4n)`, always cooperate regardless of others' behavior. This prevents complete resource collapse and maintains possibility of recovery.

### 6. Endgame Handling
- **Final round**: Strategic defection if resource is already depleted (stock < capacity/2), otherwise cooperate to leave resource in good condition
- **Penultimate round**: Slight bias toward cooperation to signal good intentions for final round

### 7. Robustness Features
- **Anti-exploitation**: If cooperation rate drops below 20% for 2+ consecutive rounds, temporarily increase defection probability
- **Recovery incentive**: When stock shows signs of recovery (growing for 2+ rounds), increase cooperation probability by 20%
- **Noise tolerance**: Use probabilistic decisions in uncertain situations rather than hard switches

## Edge Case Handling

1. **First round**: Always cooperate to establish good precedent
2. **Zero stock**: Always cooperate (only option for potential recovery)
3. **Perfect stock**: Cooperate with high probability to maintain sustainability
4. **All opponents defecting**: Still cooperate ~30% of time to prevent complete tragedy
5. **High variance in opponent behavior**: Use more conservative thresholds

## Cooperative Alignment

This strategy embodies cooperation by:
- Starting cooperative and maintaining cooperation bias
- Prioritizing resource sustainability over short-term gains
- Responding positively to others' cooperative signals
- Implementing emergency conservation to prevent tragedy of commons
- Balancing forgiveness with protection against exploitation

The strategy is designed to foster sustainable resource use while being robust enough to survive in a competitive environment with diverse opponent strategies.
'''

description_COOPERATIVE_48 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being adaptive to opponent behaviors. It balances cooperative ideals with defensive mechanisms to prevent exploitation.

## Decision Rules

### 1. First Round Behavior
- **Always Cooperate (C)** in round 1
- Rationale: Establish cooperative intent and gather baseline information about opponents

### 2. Primary Decision Framework
The strategy uses a **Stock Health Index (SHI)** combined with **Cooperation History** to make decisions:

```
Stock Health Index (SHI) = current_stock / capacity

Decision Logic:
IF round == 1:
    PLAY C
ELIF round == final_round:
    IF SHI >= 0.7 AND average_cooperation_rate >= 0.5:
        PLAY C  # Reward good stewardship
    ELSE:
        PLAY D  # Extract remaining value
ELIF SHI <= 0.3:  # Critical stock level
    PLAY D  # Emergency extraction before collapse
ELSE:
    Use Adaptive Cooperation Logic
```

### 3. Adaptive Cooperation Logic
```
cooperation_threshold = 0.4 + (SHI * 0.3)  # Ranges from 0.4 to 0.7

recent_cooperation_rate = cooperation_count_last_3_rounds / (3 * n)
overall_cooperation_rate = total_cooperation_count / (current_round * n)

weighted_cooperation = (0.6 * recent_cooperation_rate) + (0.4 * overall_cooperation_rate)

IF weighted_cooperation >= cooperation_threshold:
    PLAY C
ELSE:
    PLAY D
```

## Key Adaptive Mechanisms

### 4. Stock Recovery Protocol
When stock falls below 50% of capacity:
- Temporarily lower cooperation threshold by 0.1
- This encourages cooperation when the resource needs recovery
- Reset threshold when stock recovers to >60% capacity

### 5. Defection Response System
- **Immediate Response**: If >70% of players defected in the previous round, play D for 1 round
- **Sustained Punishment**: If cooperation rate drops below 30% for 3+ consecutive rounds, switch to D until cooperation rate improves

### 6. End-Game Considerations
- In final 3 rounds: Gradually reduce cooperation threshold by 0.1 per round
- Final round: Extract remaining value unless the commons has been well-maintained

## Edge Case Handling

### Stock Depletion Prevention
```
IF stock < n:  # Not enough for everyone to cooperate meaningfully
    PLAY D  # Prevent waste of remaining resources
```

### High Stock Scenarios
```
IF stock >= 0.9 * capacity AND round > 1:
    PLAY C  # Abundance allows for generosity
```

### Mixed Signal Resolution
```
IF weighted_cooperation is within 0.05 of threshold:
    Use tie-breaker: PLAY C if SHI > 0.6, else PLAY D
```

## Strategy Robustness Features

1. **Anti-Exploitation**: Defects when being consistently exploited
2. **Recovery-Oriented**: Encourages cooperation during resource recovery phases
3. **Context-Sensitive**: Adjusts behavior based on both resource state and opponent patterns
4. **Forgiving**: Returns to cooperation when opponents demonstrate good behavior
5. **Sustainable**: Prioritizes long-term resource health over short-term gains

## Summary
This strategy embodies cooperative principles while maintaining adaptive defenses. It promotes sustainability through context-aware cooperation thresholds, responds proportionally to defection, and includes mechanisms for resource recovery. The strategy balances idealistic cooperation with pragmatic protection against exploitation, making it robust across diverse opponent behaviors while maintaining its cooperative core identity.
'''

description_COOPERATIVE_49 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain high stock levels through cooperation but includes defensive mechanisms against excessive exploitation.

## Decision Framework

### 1. Stock Health Assessment
First, evaluate the current stock condition:
- **Healthy**: stock ≥ 0.8 × capacity
- **Stressed**: 0.4 × capacity ≤ stock < 0.8 × capacity  
- **Critical**: stock < 0.4 × capacity

### 2. Opponent Behavior Analysis
Track the defection rate from previous rounds:
- **Cooperative Environment**: ≤ 30% of players defected last round
- **Mixed Environment**: 31-60% of players defected last round
- **Hostile Environment**: > 60% of players defected last round

### 3. Decision Rules

#### Round 1 (No History)
- Always **COOPERATE** to establish cooperative intent and test the waters

#### Rounds 2 to r-1 (Middle Game)
Use this decision matrix:

| Stock Health | Environment Type | Action | Rationale |
|--------------|------------------|---------|-----------|
| Healthy | Cooperative | **COOPERATE** | Maintain sustainability |
| Healthy | Mixed | **COOPERATE** | Lead by example |
| Healthy | Hostile | **DEFECT** | Defensive response |
| Stressed | Cooperative | **COOPERATE** | Trust others to reduce consumption |
| Stressed | Mixed | **DEFECT** | Prevent further degradation |
| Stressed | Hostile | **DEFECT** | Survival mode |
| Critical | Any | **DEFECT** | Emergency resource grab |

#### Final Round (Round r)
- If stock is **Critical**: **DEFECT** (no future to preserve)
- If stock is **Healthy** and environment was **Cooperative**: **COOPERATE** (reward good behavior)
- Otherwise: **DEFECT** (maximize final payoff since no future consequences)

### 4. Adaptive Mechanisms

#### Forgiveness Protocol
If the environment shifts from Hostile to Cooperative for 2 consecutive rounds, reset to cooperative behavior even in Stressed conditions (but not Critical).

#### Trend Analysis
Track stock trajectory over the last 3 rounds:
- If stock is consistently declining despite cooperation, become more defensive
- If stock is recovering, become more cooperative

## Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    stock_health = assess_stock_health(stock, capacity)
    
    if round == 1:
        return COOPERATE
    
    environment = analyze_opponent_behavior(history, n)
    
    if round == final_round:
        return final_round_logic(stock_health, environment)
    
    # Apply forgiveness protocol
    if environment == COOPERATIVE and count_consecutive_cooperative(history) >= 2:
        if stock_health != CRITICAL:
            return COOPERATE
    
    # Main decision matrix
    if stock_health == HEALTHY:
        if environment in [COOPERATIVE, MIXED]:
            return COOPERATE
        else:  # HOSTILE
            return DEFECT
    
    elif stock_health == STRESSED:
        if environment == COOPERATIVE:
            return COOPERATE
        else:  # MIXED or HOSTILE
            return DEFECT
    
    else:  # CRITICAL
        return DEFECT
```

## Key Strengths

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive Response**: Adjusts behavior based on both resource state and opponent actions
3. **Defensive Capability**: Protects against exploitation while maintaining cooperative intent
4. **Forgiveness**: Can rebuild cooperation after hostile periods
5. **Context Awareness**: Different behaviors for different game phases

## Edge Case Handling

- **Rapid Stock Collapse**: If stock drops below critical in early rounds, switches to survival mode
- **All-Cooperative Opponents**: Maintains cooperation to maximize collective benefit
- **All-Defecting Opponents**: Defects to avoid being exploited while stock remains
- **Oscillating Behavior**: Uses trend analysis to avoid being manipulated by strategic opponents

This strategy balances the cooperative ideal with practical considerations, aiming to be neither too naive nor too aggressive while promoting sustainable resource management.
'''

description_COOPERATIVE_50 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being generous toward cooperation and measured in retaliation. It aims to maintain the resource pool for collective benefit while protecting against exploitation.

## Decision Framework

### 1. Opening Strategy
- **First Round**: Always COOPERATE
- **Rounds 2-3**: Continue COOPERATING to signal cooperative intent and allow others to establish patterns

### 2. Stock Health Assessment
Before each decision, evaluate stock health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.4 × capacity

### 3. Cooperation Index Calculation
Track each opponent's cooperation rate over a sliding window:
- **Recent window**: Last min(3, current_round-1) rounds
- **Overall window**: All previous rounds
- **Weighted cooperation score** = 0.6 × recent_rate + 0.4 × overall_rate

### 4. Main Decision Rules

**Round t decision logic:**

```pseudocode
IF round <= 3:
    COOPERATE
    
ELSE IF stock_health == "Critical":
    IF weighted_cooperation_rate_of_others >= 0.6:
        COOPERATE  // Others are trying to rebuild
    ELSE:
        DEFECT     // Protect against exploitation in crisis
        
ELSE IF stock_health == "Moderate":
    IF weighted_cooperation_rate_of_others >= 0.5:
        COOPERATE
    ELSE IF weighted_cooperation_rate_of_others >= 0.3:
        COOPERATE with probability 0.7  // Cautious cooperation
    ELSE:
        DEFECT
        
ELSE IF stock_health == "Healthy":
    IF weighted_cooperation_rate_of_others >= 0.4:
        COOPERATE
    ELSE:
        // Graduated response to low cooperation
        IF my_defection_streak < 2:
            DEFECT  // Limited retaliation
        ELSE:
            COOPERATE  // Return to cooperation to break cycles
```

### 5. End Game Considerations
- **Last 2 rounds**: Apply more stringent cooperation thresholds
  - Require cooperation_rate ≥ 0.6 in healthy stock
  - Require cooperation_rate ≥ 0.7 in moderate stock
  - Always defect in critical stock (self-preservation)

### 6. Forgiveness Mechanism
- **Reset trigger**: If stock recovers to "Healthy" status and my recent cooperation rate < 0.5, reset to cooperative stance for one round regardless of others' behavior
- **Collective recovery**: If all players cooperated in the previous round, always cooperate in the next round

### 7. Edge Case Handling

**Stock depletion scenario**: If stock falls to 0:
- COOPERATE for next 2 rounds to attempt collective recovery
- If stock remains 0 after 2 cooperative rounds, switch to self-preservation mode

**Unanimous defection**: If all players (including self) defected last round:
- COOPERATE next round to break the destructive cycle

**High variance opponents**: If opponents show erratic behavior (cooperation rates between 0.3-0.7):
- Use probabilistic responses weighted toward cooperation
- Increase cooperation probability by 0.1 when stock is healthy

## Strategic Rationale

1. **Generous Opening**: Establishes cooperative intent and allows pattern recognition
2. **State-Responsive**: Adjusts behavior based on resource health, being more cooperative when sustainable
3. **Graduated Response**: Doesn't immediately punish single defections but responds to consistent exploitation
4. **Forgiveness Built-In**: Includes mechanisms to break negative cycles and reward collective improvement
5. **End-Game Awareness**: Accounts for increased defection incentives near game end
6. **Robust to Exploitation**: Protects against being systematically exploited while maintaining cooperative default

This strategy balances the competing demands of being cooperative, sustainable, and self-protective, adapting its behavior based on both resource state and opponent patterns while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_51 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It assumes others may also want to cooperate but need clear signals and incentives to do so.

## Decision Rules

### 1. Opening Move (Round 1)
**Always COOPERATE** in the first round to:
- Signal cooperative intent
- Establish a baseline for measuring others' behavior
- Preserve initial stock for sustainability assessment

### 2. Main Strategy (Rounds 2 to r-1)

The strategy uses a **Stock Health Index (SHI)** and **Cooperation Rate** to make decisions:

```
Stock Health Index (SHI) = current_stock / capacity
Cooperation Rate = (number of C actions in last round) / n
```

**Primary Decision Logic:**
- If SHI ≥ 0.7: **COOPERATE** (stock is healthy, maintain sustainability)
- If SHI ≤ 0.3: **DEFECT** (emergency extraction before collapse)
- If 0.3 < SHI < 0.7: Use **Adaptive Cooperation Rules** below

**Adaptive Cooperation Rules (when 0.3 < SHI < 0.7):**

1. **High Cooperation Environment** (Cooperation Rate ≥ 0.6):
   - COOPERATE to maintain the cooperative equilibrium

2. **Medium Cooperation Environment** (0.3 ≤ Cooperation Rate < 0.6):
   - COOPERATE if trending upward (current cooperation rate > previous round's rate)
   - DEFECT if trending downward but signal willingness to return to cooperation

3. **Low Cooperation Environment** (Cooperation Rate < 0.3):
   - DEFECT but implement "Forgiveness Protocol" (see below)

### 3. Forgiveness Protocol
When in a low-cooperation environment, occasionally test for renewed cooperation:
- Every 3rd round in low-cooperation state: COOPERATE once
- If others respond with increased cooperation (rate increases by >0.2), resume cooperative stance
- If no response, continue defensive defection

### 4. Final Round Strategy (Round r)
**Context-dependent final move:**
- If SHI ≥ 0.5 and Cooperation Rate ≥ 0.5: **COOPERATE** (reward cooperative players)
- If SHI ≥ 0.7: **COOPERATE** (stock can handle final extraction)
- Otherwise: **DEFECT** (maximize final payoff when cooperation has failed)

### 5. Emergency Sustainability Check
Override all other rules if:
- Stock level would fall below critical threshold (< 0.2 × capacity) if everyone defects
- In this case, always COOPERATE to prevent collapse, regardless of others' behavior

## Edge Case Handling

### Stock Depletion Recovery
If stock falls to 0 or near-zero:
- COOPERATE for next 2 rounds minimum to allow regeneration
- Only return to normal strategy once SHI > 0.2

### Rapid Stock Growth
If stock reaches capacity and stays there:
- Maintain cooperation to sustain the optimal state
- Don't get greedy even when stock is abundant

### Oscillating Opponent Behavior
If opponents alternate between cooperation and defection:
- Track the pattern over 3-round windows
- If pattern is predictable, cooperate when they cooperate, defect when they defect
- If pattern is random, default to cooperation-biased strategy based on SHI

## Strategic Rationale

1. **Sustainability Focus**: The strategy prioritizes long-term resource health over short-term gains
2. **Clear Signaling**: Consistent cooperation when stock is healthy signals trustworthiness
3. **Adaptive Response**: Adjusts to opponent behavior without being exploitable
4. **Forgiveness Mechanism**: Provides opportunities to rebuild cooperation after conflicts
5. **Emergency Protocols**: Protects against resource collapse even when others defect
6. **End-game Consideration**: Balances final-round incentives with rewarding good partners

## Pseudocode Summary
```
if round == 1:
    return COOPERATE
    
SHI = current_stock / capacity
cooperation_rate = count_cooperators_last_round / n

if SHI >= 0.7:
    return COOPERATE
elif SHI <= 0.3:
    return DEFECT
elif stock_would_collapse_if_all_defect:
    return COOPERATE
elif cooperation_rate >= 0.6:
    return COOPERATE
elif cooperation_rate >= 0.3:
    return COOPERATE if cooperation_trending_up else DEFECT
else:  // low cooperation environment
    if round_number % 3 == 0:  // forgiveness test
        return COOPERATE
    else:
        return DEFECT
        
if round == final_round:
    return COOPERATE if (SHI >= 0.5 and cooperation_rate >= 0.5) else DEFECT
```

This strategy balances cooperation, adaptation, and sustainability while being robust against various opponent behaviors from pure cooperation to pure defection.
'''

description_COOPERATIVE_52 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behavior. It starts cooperative and maintains cooperation as long as the resource remains healthy, but includes protective mechanisms against exploitation.

## Decision Rules

### 1. **Cooperation Threshold System**
The strategy uses a dynamic cooperation threshold based on resource health:

- **Resource Health Score** = current_stock / capacity
- **Base Cooperation Threshold** = 0.6 (cooperate if ≥60% of players cooperated last round)
- **Adjusted Threshold** = Base Threshold × (2 - Resource Health Score)

This means:
- When stock is high (health = 1.0): threshold = 0.6 × 1.0 = 0.6
- When stock is medium (health = 0.5): threshold = 0.6 × 1.5 = 0.9
- When stock is low (health = 0.2): threshold = 0.6 × 1.8 = 1.08 (impossible, so always defect)

### 2. **Primary Decision Logic**
```
IF round == 1:
    COOPERATE (establish cooperative intent)
    
ELSIF stock < capacity * 0.15:
    DEFECT (resource crisis - survival mode)
    
ELSIF cooperation_rate_last_round >= adjusted_threshold:
    COOPERATE (sufficient cooperation detected)
    
ELSIF recent_trend_improving AND stock > capacity * 0.3:
    COOPERATE (give benefit of doubt during recovery)
    
ELSE:
    DEFECT (protect against exploitation)
```

### 3. **Trend Analysis**
Track cooperation rates over the last min(3, current_round-1) rounds:
- **Recent Trend Improving**: cooperation rate increased in at least 2 of last 3 rounds
- **Cooperation Rate**: fraction of players who played C in the previous round

### 4. **Emergency Protocols**

**Resource Crisis Mode** (stock < 15% of capacity):
- Always defect to prevent total collapse
- Continue until stock recovers to >30% of capacity

**Last Round Behavior**:
- If stock ≥ 50% capacity AND cooperation rate in previous round ≥ 0.5: COOPERATE
- Otherwise: DEFECT (no future rounds to recover from exploitation)

### 5. **Forgiveness Mechanism**
After 2 consecutive rounds of defection due to low cooperation:
- Give one "test cooperation" if stock > 25% capacity
- If opponents respond cooperatively (≥50% cooperation rate), resume normal threshold logic
- If test fails, return to defensive defection

## Strategy Pseudocode

```python
def decide_action(round_num, total_rounds, stock, capacity, history):
    # Calculate resource health
    health = stock / capacity
    
    # First round: always cooperate
    if round_num == 1:
        return COOPERATE
    
    # Emergency: resource critically low
    if stock < 0.15 * capacity:
        return DEFECT
    
    # Last round special logic
    if round_num == total_rounds:
        if health >= 0.5 and get_cooperation_rate(history, -1) >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    # Calculate dynamic threshold
    base_threshold = 0.6
    adjusted_threshold = base_threshold * (2 - health)
    
    # Get recent cooperation rate
    last_round_coop_rate = get_cooperation_rate(history, -1)
    
    # Check if threshold met
    if last_round_coop_rate >= adjusted_threshold:
        return COOPERATE
    
    # Check for improving trend with recovery potential
    if is_trend_improving(history) and health > 0.3:
        return COOPERATE
    
    # Check forgiveness mechanism
    if should_test_cooperation(history, health):
        return COOPERATE
    
    # Default: defect to protect against exploitation
    return DEFECT

def get_cooperation_rate(history, round_offset):
    # Returns fraction of players who cooperated in specified round
    # round_offset: -1 for last round, -2 for two rounds ago, etc.
    
def is_trend_improving(history):
    # Returns True if cooperation rate improved in majority of last 3 rounds
    
def should_test_cooperation(history, health):
    # Returns True if conditions met for forgiveness test
    # (after 2+ consecutive defections, stock > 25% capacity)
```

## Key Adaptive Features

1. **Resource-Aware Thresholds**: Demands higher cooperation when resources are scarce
2. **Trend Sensitivity**: Rewards improving cooperation patterns
3. **Crisis Response**: Switches to survival mode when resource critically low
4. **Forgiveness**: Periodically tests if opponents have become more cooperative
5. **Endgame Awareness**: Adjusts behavior for final round

## Robustness Properties

- **Against Always-Defect**: Quickly switches to defensive mode while testing for cooperation
- **Against Tit-for-Tat**: Maintains mutual cooperation through threshold system
- **Against Random**: Adapts threshold based on actual cooperation rates observed
- **Against Exploiters**: Resource health system prevents being taken advantage of when vulnerable
- **Against Cooperators**: Maintains high cooperation to sustain resource

This strategy balances cooperation with protection, ensuring resource sustainability while remaining adaptive to the diverse behaviors likely encountered in a tournament setting.
'''

description_COOPERATIVE_53 = '''
I'll design a cooperative strategy called "Adaptive Stewardship" that balances sustainability with strategic responsiveness.

## Adaptive Stewardship Strategy

### Core Philosophy
This strategy aims to maintain the common pool resource while being resilient to exploitation. It uses a combination of optimistic cooperation, punishment for defection, and forgiveness to encourage long-term sustainability.

### Decision Rules

**1. First Round: Always Cooperate**
- Start with cooperation (C) to signal cooperative intent
- This establishes a baseline for comparing future behavior

**2. Stock Health Assessment**
Before each decision, calculate the stock health ratio:
```
health_ratio = current_stock / capacity
```

**3. Cooperation Tendency Based on Stock Health**
```
if health_ratio >= 0.7:
    base_cooperation_tendency = 0.9  # High tendency to cooperate
elif health_ratio >= 0.4:
    base_cooperation_tendency = 0.7  # Moderate tendency
elif health_ratio >= 0.2:
    base_cooperation_tendency = 0.5  # Balanced
else:
    base_cooperation_tendency = 0.3  # Lower tendency when critical
```

**4. Opponent Behavior Analysis**
Track the cooperation rate of all opponents over the last 3 rounds:
```
recent_cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
```

**5. Punishment and Forgiveness Mechanism**
- If recent_cooperation_rate < 0.3: Enter "punishment phase" for 2 rounds
- During punishment: Reduce cooperation tendency by 0.4
- After punishment: Gradually return to normal cooperation levels

**6. Final Decision Logic**
```pseudocode
adjusted_tendency = base_cooperation_tendency

// Apply opponent behavior adjustment
if recent_cooperation_rate < 0.3:
    adjusted_tendency -= 0.4  // Punishment
elif recent_cooperation_rate > 0.7:
    adjusted_tendency += 0.2  // Reward cooperation
    
// Apply endgame consideration
rounds_remaining = total_rounds - current_round
if rounds_remaining <= 2:
    if health_ratio > 0.5:
        adjusted_tendency += 0.3  // Be extra cooperative near end if stock is healthy
    else:
        adjusted_tendency -= 0.2  // Be more cautious if stock is depleted

// Final decision
if adjusted_tendency > 0.6:
    action = C (Cooperate)
else:
    action = D (Defect)
```

### Edge Case Handling

**First Round:**
- Always cooperate to establish good faith

**Last Round:**
- If stock health > 50%: Cooperate (leave something for hypothetical future)
- If stock health ≤ 50%: Base decision on recent opponent behavior

**Stock Depletion Crisis (health_ratio < 0.1):**
- Cooperate if at least 50% of others cooperated in the last round
- Otherwise defect to avoid being exploited when resources are scarce

**All Others Defecting:**
- Don't cooperate for more than 2 consecutive rounds if everyone else is defecting
- Return to cooperation after 1-2 rounds of punishment

### Adaptive Features

1. **Dynamic Threshold Adjustment:** The cooperation threshold adapts based on stock health - more lenient when resources are abundant, stricter when scarce.

2. **Memory Window:** Uses a 3-round memory window to avoid overreacting to single instances of defection while still responding to sustained exploitation.

3. **Graduated Response:** Rather than binary cooperation/defection, uses probability-based decisions that create smooth transitions between cooperative and defensive behaviors.

4. **Endgame Awareness:** Increases cooperation in final rounds when stock is healthy to maximize total welfare, but becomes defensive if resources are already depleted.

### Robustness Features

- **Anti-exploitation:** Won't cooperate indefinitely against consistent defectors
- **Forgiveness:** Returns to cooperation after punishment periods
- **Resource-aware:** Adapts behavior based on actual stock levels, not just opponent actions
- **Tournament-ready:** Doesn't assume coordination or shared strategies

This strategy balances the cooperative goal of resource sustainability with the practical need to avoid exploitation, while remaining adaptive to various opponent strategies and game conditions.
'''

description_COOPERATIVE_54 = '''
# Adaptive Cooperative Strategy: "Sustainable Trust"

## Core Philosophy
This strategy prioritizes long-term sustainability while building and maintaining trust through conditional cooperation. It assumes that mutual cooperation benefits everyone, but requires mechanisms to detect and respond to exploitation while remaining forgiving enough to rebuild cooperation.

## Decision Rules

### 1. First Round
**Always COOPERATE** - Start with trust to signal cooperative intent and give others the benefit of the doubt.

### 2. Stock Health Assessment
Before making any decision, evaluate the current stock health:
- **Healthy Stock**: stock ≥ 0.7 × capacity
- **Stressed Stock**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical Stock**: stock < 0.3 × capacity

### 3. Main Decision Logic

**If Critical Stock (stock < 0.3 × capacity):**
- Always COOPERATE - The resource is in danger; maximize sustainability over short-term gains

**If Healthy or Stressed Stock:**
Apply the following decision tree:

#### A. Cooperation History Analysis
Calculate for the last min(3, current_round-1) rounds:
- `defection_rate` = (number of D actions by all opponents) / (n-1 × rounds_analyzed)
- `my_recent_cooperation_rate` = (my C actions in analyzed period) / rounds_analyzed

#### B. Adaptive Response Rules

1. **High Trust Regime** (defection_rate ≤ 0.3):
   - COOPERATE

2. **Medium Trust Regime** (0.3 < defection_rate ≤ 0.6):
   - If stock is Healthy: COOPERATE with probability 0.8
   - If stock is Stressed: COOPERATE with probability 0.6
   - Use random number generator for probabilistic decisions

3. **Low Trust Regime** (defection_rate > 0.6):
   - If I've been cooperating frequently (my_recent_cooperation_rate > 0.7):
     - Switch to DEFECT for 1 round as a signal, then reassess
   - Otherwise:
     - COOPERATE with probability 0.3 (maintain some cooperative pressure)

### 4. Last Round Special Rule
**If current_round = r (final round):**
- If stock is Critical: COOPERATE (don't destroy what's left)
- If defection_rate in last 2 rounds > 0.7: DEFECT (others are already defecting)
- Otherwise: COOPERATE (end on a positive note)

### 5. Forgiveness Mechanism
Every 4 rounds, reset the cooperation assessment to prevent permanent retaliation spirals:
- If current_round % 4 = 0: Ignore history older than 2 rounds
- This allows recovery from mutual defection cycles

## Edge Cases

1. **Stock Depletion**: If stock falls below n (impossible for everyone to get meaningful payoffs):
   - Always COOPERATE to maximize regeneration chances

2. **Perfect Cooperation Detected**: If all players have cooperated for 3+ consecutive rounds:
   - Continue cooperating but monitor for first signs of defection

3. **Alternating Patterns**: If opponents show clear alternating C/D patterns:
   - Match the cooperative phases while maintaining baseline cooperation rate

## Pseudocode Summary

```
function decide_action(current_round, stock, capacity, n, r, history):
    // First round
    if current_round == 1:
        return COOPERATE
    
    // Critical stock override
    if stock < 0.3 * capacity:
        return COOPERATE
    
    // Calculate recent defection rate
    recent_rounds = min(3, current_round - 1)
    defection_rate = count_opponent_defections(history, recent_rounds) / ((n-1) * recent_rounds)
    my_coop_rate = count_my_cooperations(history, recent_rounds) / recent_rounds
    
    // Last round special case
    if current_round == r:
        if stock < 0.3 * capacity:
            return COOPERATE
        else if recent_defection_rate > 0.7:
            return DEFECT
        else:
            return COOPERATE
    
    // Main decision logic
    if defection_rate <= 0.3:
        return COOPERATE
    else if defection_rate <= 0.6:
        prob = (stock >= 0.7 * capacity) ? 0.8 : 0.6
        return random() < prob ? COOPERATE : DEFECT
    else:
        if my_coop_rate > 0.7:
            return DEFECT  // Signal displeasure
        else:
            return random() < 0.3 ? COOPERATE : DEFECT
```

## Strategy Strengths

1. **Adaptive**: Responds to opponent behavior patterns while maintaining cooperative bias
2. **Sustainable**: Prioritizes resource health over short-term exploitation
3. **Forgiving**: Includes mechanisms to break retaliation cycles
4. **Robust**: Handles edge cases like resource depletion and final rounds
5. **Signal-aware**: Uses occasional defection as communication rather than pure retaliation

This strategy should perform well against various opponent types while maintaining the resource for mutual benefit.
'''

description_COOPERATIVE_55 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare by maintaining stock sustainability while being adaptive to opponent behaviors. It balances cooperation with strategic defection to prevent exploitation while encouraging others toward cooperative equilibrium.

## Decision Framework

### 1. State Assessment
First, evaluate the current game state:
- **Stock Health**: `health_ratio = current_stock / capacity`
- **Sustainability Threshold**: `critical_threshold = 0.3` (30% of capacity)
- **Rounds Remaining**: `rounds_left = r - current_round + 1`

### 2. Behavioral Analysis
Track opponent cooperation patterns:
- **Recent Cooperation Rate**: Average cooperation in last 3 rounds (or all rounds if fewer)
- **Overall Cooperation Rate**: Cooperation rate across all previous rounds
- **Trend Analysis**: Is cooperation increasing, decreasing, or stable?

### 3. Core Decision Rules

#### **Round 1: Optimistic Start**
- Always **COOPERATE** in the first round
- Establishes cooperative intent and gathers initial information about opponents

#### **Critical Stock Protection (Rounds 2+)**
```
if health_ratio <= critical_threshold:
    if recent_cooperation_rate < 0.4:
        DEFECT  // Emergency resource grab when others aren't helping
    else:
        COOPERATE  // Others are trying to help, maintain cooperation
```

#### **Sustainable Cooperation Phase**
When stock is healthy (`health_ratio > critical_threshold`):

```
// Calculate cooperation incentive based on multiple factors
base_cooperation_probability = 0.8

// Adjust based on opponent behavior
if overall_cooperation_rate >= 0.7:
    cooperation_probability = base_cooperation_probability + 0.15
elif overall_cooperation_rate >= 0.4:
    cooperation_probability = base_cooperation_probability
else:
    cooperation_probability = base_cooperation_probability - 0.3

// Trend adjustment
if cooperation_trend == "increasing":
    cooperation_probability += 0.1
elif cooperation_trend == "decreasing":
    cooperation_probability -= 0.2

// Endgame adjustment
if rounds_left <= 3:
    cooperation_probability -= 0.1  // Slight defection tendency near end

// Stock abundance bonus
if health_ratio >= 0.8:
    cooperation_probability += 0.1

// Final decision
if cooperation_probability >= random(0,1):
    COOPERATE
else:
    DEFECT
```

#### **Forgiveness Mechanism**
- If cooperation rate was low but has improved significantly in recent rounds (increase > 0.3), reset to higher cooperation probability
- This prevents permanent punishment cycles

#### **Final Round Exception**
- In the very last round, cooperate if `overall_cooperation_rate >= 0.5`
- Otherwise defect (no future consequences)

## Edge Case Handling

### **Stock Depletion Scenarios**
- If stock falls to 0, automatically cooperate for the remainder of the game
- This gives the stock a chance to recover through growth dynamics

### **High Defection Environment**
- If `overall_cooperation_rate < 0.2` and `health_ratio > 0.5`:
  - Implement "Tit-for-Two-Tats": Only defect after observing majority defection in two consecutive rounds
  - This provides extra forgiveness in hostile environments

### **Near-Capacity Scenarios**
- When `health_ratio >= 0.95`: Always cooperate
- The resource is abundant enough that cooperation is clearly optimal

## Adaptive Features

1. **Dynamic Thresholds**: Cooperation probability adjusts based on observed opponent behavior
2. **Trend Recognition**: Responds to improving/worsening cooperation patterns
3. **Context Sensitivity**: Different behaviors for different stock levels and game phases
4. **Measured Retaliation**: Doesn't immediately punish single defections
5. **Recovery Orientation**: Prioritizes long-term sustainability over short-term gains

## Robustness Properties

- **Against Always Defect**: Will eventually reduce cooperation but maintain some to allow stock recovery
- **Against Always Cooperate**: Will maintain high cooperation, maximizing mutual benefit
- **Against Tit-for-Tat**: Will establish stable cooperative relationship
- **Against Random**: Will adapt cooperation level to observed randomness
- **Against Exploitative**: Will reduce cooperation when exploited but maintain sustainability focus

This strategy balances the competing demands of preventing exploitation, maintaining sustainability, and encouraging cooperative behavior in opponents through adaptive, measured responses to observed behavior patterns.
'''

description_COOPERATIVE_56 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but adjusts based on observed patterns to maintain resource viability and protect against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** for the first 3 rounds (or first 25% of total rounds if r < 12)
- This establishes goodwill and tests opponent cooperation levels
- Builds initial stock sustainability data

### 2. Adaptive Response Phase (Middle rounds)
The strategy uses a **Stock Health Index (SHI)** combined with **Cooperation Tracking**:

**Stock Health Index (SHI) = current_stock / capacity**
- SHI > 0.8: Healthy stock
- 0.5 ≤ SHI ≤ 0.8: Moderate stock  
- SHI < 0.5: Critical stock

**Cooperation Rate = (# of C actions by others in last 3 rounds) / (3 × (n-1))**

### Decision Matrix:
```
IF SHI > 0.8:
    IF Cooperation Rate > 0.7: Play C
    ELSE IF Cooperation Rate > 0.4: Play C with 80% probability
    ELSE: Play C with 60% probability (give others a chance)

IF 0.5 ≤ SHI ≤ 0.8:
    IF Cooperation Rate > 0.6: Play C
    ELSE IF Cooperation Rate > 0.3: Play C with 70% probability
    ELSE: Play D (stock protection mode)

IF SHI < 0.5 (Critical):
    IF Cooperation Rate > 0.8: Play C (reward high cooperation)
    ELSE: Play D (emergency conservation)
```

### 3. Forgiveness Mechanism
- Every 4 rounds, increase cooperation probability by 20% regardless of recent history
- This prevents permanent defection spirals and tests for reformed opponents
- Reset cooperation tracking window after forgiveness rounds

### 4. End Game Strategy (Last 15% of rounds)
- If SHI > 0.6: Mirror majority behavior from previous round
- If SHI ≤ 0.6: Always defect (resource is too depleted for cooperation)
- Exception: If all others cooperated in the previous round, cooperate once more

### 5. Edge Cases

**First Round:**
- Always cooperate (establish positive precedent)

**Stock Depletion (stock < n):**
- Always defect until stock recovers to at least n
- This prevents complete resource collapse

**All Others Always Defect (detected after 5+ rounds):**
- Switch to "Sustainable Defection": Play D but track stock recovery
- If stock shows signs of recovery (SHI increases for 2 consecutive rounds), test cooperation once

**Stock Near Capacity:**
- If stock ≥ 0.95 × capacity for 2+ consecutive rounds, always cooperate
- Maximize sustainable harvesting when resource is abundant

## Pseudocode Structure

```python
def decide_action(round_num, total_rounds, current_stock, capacity, 
                 my_history, opponents_history, n):
    
    SHI = current_stock / capacity
    
    # Initial cooperation phase
    if round_num <= max(3, total_rounds * 0.25):
        return 'C'
    
    # Calculate recent cooperation rate
    if round_num > 3:
        recent_coop_rate = calculate_cooperation_rate(opponents_history, 3)
    else:
        recent_coop_rate = 1.0
    
    # Emergency conservation
    if current_stock < n:
        return 'D'
    
    # End game strategy
    if round_num > total_rounds * 0.85:
        return end_game_strategy(SHI, opponents_history)
    
    # Forgiveness mechanism
    if round_num % 4 == 0:
        apply_forgiveness_bonus()
    
    # Main adaptive strategy
    return adaptive_decision(SHI, recent_coop_rate, round_num)
```

## Why This Strategy Works

1. **Sustainability Focus**: Prevents resource collapse while maintaining cooperation incentives
2. **Adaptability**: Responds to opponent behavior patterns without being overly reactive
3. **Forgiveness**: Breaks negative cycles and encourages cooperation recovery
4. **Robustness**: Handles various opponent types from pure cooperators to aggressive defectors
5. **End-game Awareness**: Adjusts strategy as the game concludes to maximize final payoffs

This strategy balances the cooperative ideal with practical survival needs, ensuring the common pool resource remains viable while adapting to the tournament environment's diverse strategies.
'''

description_COOPERATIVE_57 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being willing to cooperate and protect cooperative players. It adapts based on the resource state and opponent behavior patterns, always seeking to maintain the common pool while defending against exploitation.

## Decision Framework

### 1. Primary Decision Rules

**Cooperation Threshold System:**
- **Always Cooperate When**: Stock level ≥ 0.8 × capacity (resource is healthy)
- **Conditional Cooperation When**: 0.3 × capacity ≤ stock < 0.8 × capacity (resource stressed)
- **Emergency Protocol When**: Stock < 0.3 × capacity (resource critical)

**Behavioral Response Matrix:**
- Track each opponent's cooperation rate over a sliding window of recent rounds
- Classify opponents as:
  - **Cooperators**: >70% cooperation rate
  - **Mixed**: 30-70% cooperation rate  
  - **Defectors**: <30% cooperation rate

### 2. Detailed Strategy Logic

```pseudocode
function decide_action(round, stock, capacity, history, n):
    stock_ratio = stock / capacity
    
    // First round: Always cooperate to establish good faith
    if round == 1:
        return COOPERATE
    
    // Calculate opponent behavior patterns
    cooperator_count = count_recent_cooperators(history, window=min(5, round-1))
    defector_count = n - 1 - cooperator_count
    
    // Resource Health Assessment
    if stock_ratio >= 0.8:
        // Healthy resource: Be generous but watch for exploitation
        if defector_count <= n/3:
            return COOPERATE
        else:
            return DEFECT  // Too many defectors, protect resource
    
    else if stock_ratio >= 0.3:
        // Stressed resource: Conditional cooperation
        if cooperator_count >= n/2:
            return COOPERATE  // Majority cooperating, join them
        else if defector_count >= 2*n/3:
            return DEFECT     // Too many defectors, must defend
        else:
            // Mixed situation: Use tit-for-tat with majority
            majority_last_action = get_majority_last_action(history)
            return majority_last_action
    
    else:
        // Critical resource: Emergency protocols
        if round >= total_rounds - 2:
            // Near end game: Try to salvage something
            return COOPERATE
        else if cooperator_count >= 2*n/3:
            // Most others cooperating in crisis: join the effort
            return COOPERATE
        else:
            // Resource dying and others not helping: try shock therapy
            return DEFECT
```

### 3. Edge Case Handling

**First Round**: Always cooperate to signal good intentions and establish cooperative baseline.

**Last Two Rounds**: 
- If stock > 0.1 × capacity: Cooperate (something left to preserve)
- If stock ≤ 0.1 × capacity: Cooperate anyway (maximize final extraction for all)

**Resource Depletion Crisis** (stock < 0.1 × capacity):
- Switch to pure cooperation to give resource maximum chance to recover
- Exception: If it's clear the resource will hit zero regardless, then defect to get something

**All Opponents Always Defect**: 
- First 3 rounds: Keep cooperating (give them chance to learn)
- After that: Mirror their behavior but occasionally test with cooperation every 5-7 rounds

### 4. Adaptive Mechanisms

**Learning Window**: Use sliding window of last min(5, current_round-1) rounds to assess opponent patterns, giving more weight to recent behavior.

**Forgiveness Protocol**: If an opponent who was classified as a defector shows 3 consecutive cooperations, reclassify them as "mixed" and give them another chance.

**Stock Recovery Priority**: When stock is recovering (current stock > previous stock), be more generous with cooperation to encourage the positive trend.

**Endgame Adjustment**: In final 25% of rounds, gradually become more cooperative unless resource is critically depleted, since short-term thinking becomes less relevant.

## Key Strengths

1. **Sustainability Focus**: Explicitly considers resource health in decision-making
2. **Adaptive**: Responds to both opponent behavior and resource state
3. **Forgiving**: Gives opponents chances to reform their behavior
4. **Robust**: Has specific protocols for edge cases and crisis situations
5. **Cooperative**: Defaults to cooperation when conditions allow
6. **Defensive**: Protects against exploitation while maintaining cooperative intent

This strategy balances the cooperative imperative with practical necessities, aiming to sustain both the resource and fair outcomes for cooperative players while being resilient against various opponent strategies.
'''

description_COOPERATIVE_58 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving to mistakes and adaptive to group dynamics. It aims to maintain the resource pool while protecting against exploitation through measured responses.

## Decision Framework

### Initial Cooperation Phase (First Round)
- **Always cooperate** in round 1 to signal cooperative intent and establish a baseline for sustainable resource use.

### Main Strategy Rules (Rounds 2 to r-1)

**Rule 1: Stock Health Assessment**
```
If current_stock < capacity * 0.3:
    Cooperate (Emergency conservation mode)
```

**Rule 2: Majority Behavior Tracking**
Track the proportion of cooperators in the previous round:
```
cooperation_rate = (number of C players last round) / n

If cooperation_rate ≥ 0.6:
    Cooperate (Reward collective cooperation)
Else if cooperation_rate ≤ 0.3:
    Defect (Protect against mass defection)
Else:
    Apply Graduated Response (see Rule 3)
```

**Rule 3: Graduated Response for Mixed Behavior**
When cooperation rate is between 30-60%, use a forgiveness-based approach:
```
defection_streak = consecutive rounds where cooperation_rate < 0.5

If defection_streak = 0:
    Cooperate
Else if defection_streak = 1:
    Cooperate (First forgiveness)
Else if defection_streak = 2:
    Defect (Warning signal)
Else:
    Defect (Sustained retaliation until cooperation improves)
```

**Rule 4: Recovery Detection**
```
If was_defecting AND cooperation_rate > 0.5:
    Cooperate (Quick return to cooperation when others improve)
```

### Final Round Handling (Round r)
**Strategic consideration for the last round:**
```
If current_stock < capacity * 0.2:
    Cooperate (Don't destroy remaining resources)
Else if cooperation_rate_last_3_rounds ≥ 0.6:
    Cooperate (Maintain cooperative relationship)
Else:
    Defect (No future rounds to worry about)
```

## Key Features

### 1. **Stock-Sensitive Response**
The strategy always prioritizes resource conservation when the pool is critically low (below 30% capacity), preventing complete resource collapse regardless of others' actions.

### 2. **Majority-Based Adaptation**
Rather than tracking individual players (which becomes complex with many participants), the strategy responds to the overall group cooperation level, making it scalable to any number of players.

### 3. **Graduated Forgiveness**
The strategy doesn't immediately retaliate against defection, offering one round of forgiveness before responding. This prevents spiraling into permanent defection due to temporary misunderstandings or mistakes.

### 4. **Quick Recovery**
When group behavior improves, the strategy immediately returns to cooperation rather than holding grudges, encouraging positive feedback loops.

### 5. **Endgame Consideration**
The final round behavior balances the lack of future consequences with maintaining cooperative norms, only defecting if the group has consistently failed to cooperate.

## Robustness Features

- **Handles any group size**: Uses proportions rather than absolute numbers
- **Adapts to different game lengths**: Works for both short and long games
- **Prevents resource collapse**: Always cooperates when stock is critically low
- **Balances exploitation protection**: Won't be consistently exploited by defectors
- **Maintains cooperative potential**: Ready to return to cooperation when others do

This strategy aims to be a "good citizen" that contributes to group welfare while protecting itself from exploitation, ultimately maximizing both individual and collective long-term payoffs through sustainable resource management.
'''

description_COOPERATIVE_59 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but includes adaptive mechanisms to protect against exploitation and resource collapse.

## Decision Rules

### 1. First Round
**Always Cooperate (C)** - Start with good faith cooperation to signal cooperative intent.

### 2. Stock Health Assessment
Before each decision, calculate a **Stock Health Index (SHI)**:
```
SHI = current_stock / capacity
```

### 3. Main Decision Logic

#### Phase 1: Sustainable Cooperation (SHI ≥ 0.6)
- **Default Action: Cooperate (C)**
- **Exception**: If more than 50% of players defected in the previous round AND it's not the last 2 rounds, defect once as punishment, then return to cooperation.

#### Phase 2: Conservation Mode (0.3 ≤ SHI < 0.6)
- **Reciprocal Cooperation**: 
  - If majority of players cooperated last round → Cooperate (C)
  - If majority of players defected last round → Defect (D)
- **Forgiveness**: After defecting due to others' defection, return to cooperation if stock shows signs of recovery (stock increased from previous round)

#### Phase 3: Crisis Mode (SHI < 0.3)
- **Strict Tit-for-Majority**: 
  - Cooperate only if ≥75% of players cooperated in the previous round
  - Otherwise defect
- **Emergency Cooperation**: If stock ≤ capacity/10, always cooperate regardless of others' actions (desperate attempt to save the resource)

### 4. End-Game Handling

#### Last Round (r)
- If SHI ≥ 0.5: Cooperate (give others benefit of the doubt)
- If SHI < 0.5: Mirror the majority action from round (r-1)

#### Second-to-Last Round (r-1)
- Apply normal decision rules but with increased cooperation threshold
- In Conservation Mode: require only 40% cooperation rate to cooperate (instead of 50%)

### 5. Adaptive Mechanisms

#### Defection Streak Detection
- Track consecutive rounds where majority defected
- If ≥3 consecutive rounds of majority defection AND SHI > 0.2:
  - Switch to "Defensive Mode": Only cooperate if stock increased last round
  - Exit Defensive Mode when majority cooperates for 2 consecutive rounds

#### Recovery Incentive
- If stock increased significantly (>10% of capacity) between rounds, always cooperate next round regardless of others' previous actions

## Pseudocode

```
function decide_action(round, stock, capacity, history, n):
    SHI = stock / capacity
    
    // First round
    if round == 1:
        return COOPERATE
    
    // Calculate previous round statistics
    prev_defection_rate = count_defectors(history[round-1]) / n
    prev_majority_defected = prev_defection_rate > 0.5
    consecutive_majority_defections = count_consecutive_majority_defections(history)
    stock_increased = (round > 2) and (get_stock(history[round-1]) > get_stock(history[round-2]))
    
    // Recovery incentive
    if stock_increased and (get_stock(history[round-1]) - get_stock(history[round-2])) > 0.1 * capacity:
        return COOPERATE
    
    // End game handling
    if round == total_rounds:
        return (SHI >= 0.5) ? COOPERATE : mirror_majority(history[round-1])
    
    if round == total_rounds - 1:
        // More forgiving threshold in second-to-last round
        if SHI >= 0.3:
            return (prev_defection_rate <= 0.6) ? COOPERATE : DEFECT
    
    // Emergency cooperation
    if stock <= capacity / 10:
        return COOPERATE
    
    // Phase-based decisions
    if SHI >= 0.6:  // Sustainable Cooperation
        if prev_majority_defected and round <= total_rounds - 2 and consecutive_majority_defections == 1:
            return DEFECT  // Single punishment
        return COOPERATE
        
    else if SHI >= 0.3:  // Conservation Mode
        if in_defensive_mode(consecutive_majority_defections, SHI):
            return stock_increased ? COOPERATE : DEFECT
        return prev_majority_defected ? DEFECT : COOPERATE
        
    else:  // Crisis Mode (SHI < 0.3)
        return (prev_defection_rate <= 0.25) ? COOPERATE : DEFECT
```

## Key Features

1. **Cooperative Default**: Starts and generally prefers cooperation
2. **Adaptive Thresholds**: Adjusts cooperation requirements based on resource health
3. **Punishment with Forgiveness**: Retaliates against exploitation but returns to cooperation
4. **Crisis Response**: Becomes more selective when resources are critically low
5. **Recovery Incentive**: Rewards positive stock growth with cooperation
6. **End-game Awareness**: Handles final rounds appropriately
7. **Robust to Various Opponents**: Works against pure strategies, reciprocal strategies, and mixed behaviors

This strategy balances cooperative intent with practical sustainability, aiming to maintain the resource while not being easily exploited by purely selfish strategies.
'''

description_COOPERATIVE_60 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy treats the common pool resource as a shared inheritance that must be preserved while still allowing fair extraction. It prioritizes long-term sustainability over short-term gains and adapts to opponent behavior while maintaining a cooperative foundation.

## Decision Rules

### 1. Baseline Cooperation Rule
**Default to cooperation (C)** unless specific conditions trigger defection. This maintains the cooperative foundation while protecting against exploitation.

### 2. Stock Health Assessment
```
if stock < capacity * 0.3:
    # Critical stock level - always cooperate to preserve resource
    action = C
elif stock < capacity * 0.5:
    # Warning level - cooperate unless facing persistent defectors
    apply stricter cooperation criteria
else:
    # Healthy stock - normal decision rules apply
    apply standard criteria
```

### 3. Opponent Behavior Analysis
Track each opponent's cooperation rate over a sliding window:
```
cooperation_rate[player_i] = (cooperations in last 3 rounds) / min(3, rounds_played)

if cooperation_rate[player_i] >= 0.67:
    classify as "cooperator"
elif cooperation_rate[player_i] >= 0.33:
    classify as "mixed"
else:
    classify as "defector"
```

### 4. Adaptive Response Logic
```
defector_count = number of players classified as "defectors"
cooperator_count = number of players classified as "cooperators"

if defector_count == 0:
    # All cooperative environment - always cooperate
    action = C
elif defector_count >= n/2:
    # Majority defectors - defensive cooperation
    if stock >= capacity * 0.6:
        action = D (limited defensive defection)
    else:
        action = C (preserve resource despite exploitation)
else:
    # Mixed environment - conditional cooperation
    if last_round_defectors <= 1:
        action = C
    else:
        action = D (punish mass defection)
```

## Edge Case Handling

### First Round
Always cooperate (C) to:
- Signal cooperative intent
- Establish positive precedent
- Avoid triggering defensive responses in other cooperative strategies

### Last Round
```
if round == final_round:
    if stock >= capacity * 0.4:
        # Sufficient stock remains - maintain cooperation for reputation
        action = C
    else:
        # Critically low stock - extract final value
        action = D
```

### Stock Depletion Crisis
```
if stock <= capacity * 0.1:
    # Emergency preservation mode
    action = C
    # Continue cooperating even if others defect to allow any possible recovery
```

### Recovery Periods
```
if stock increased from previous round:
    # Reward collective restraint with continued cooperation
    maintain current cooperation level
```

## Adaptation Mechanisms

### 1. Forgiveness Protocol
Every 3 rounds, reduce punishment intensity:
```
if (round % 3 == 0):
    # Give reformed defectors a chance to return to cooperation
    reset recent behavior weights by 50%
```

### 2. Graduated Response
- First defection by opponent: Continue cooperating (might be mistake)
- Second consecutive defection: Warning cooperation (still cooperate but note behavior)
- Third consecutive defection: Classify as defector and apply defensive rules

### 3. Group Dynamics Awareness
```
group_cooperation_rate = total_cooperations / (n * rounds_completed)

if group_cooperation_rate < 0.4 and stock < capacity * 0.6:
    # Tragedy developing - increase cooperation to set example
    cooperation_bonus = true
```

## Robustness Features

### Against Pure Defectors
- Never fully abandon cooperation
- Maintain resource preservation focus
- Use limited defensive defection only when stock is healthy

### Against Conditional Cooperators
- Clear cooperation signals in early rounds
- Consistent response to their cooperation
- Forgiveness for occasional defections

### Against Tit-for-Tat Variants
- Strong initial cooperation
- Quick recovery from punishment cycles
- Avoid escalation through measured responses

### Against Random Players
- Don't over-interpret random defections
- Focus on stock preservation over punishment
- Maintain steady cooperative baseline

## Summary
This strategy balances three key objectives:
1. **Sustainability**: Prioritizes long-term resource health over short-term gains
2. **Fairness**: Cooperates by default and gives opponents benefit of doubt
3. **Robustness**: Adapts to various opponent types without abandoning cooperative principles

The strategy is "cooperatively rational" - it seeks the best outcome for the group while protecting against exploitation, always with a bias toward preserving the shared resource for future rounds.
'''

description_COOPERATIVE_61 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperatively but has mechanisms to protect against exploitation and encourage cooperation through calculated responses.

## Decision Framework

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Adaptive Response System

**State Assessment Variables:**
- `cooperation_rate`: Fraction of opponents who cooperated in the previous round
- `stock_health`: Current stock level / capacity (sustainability metric)
- `exploitation_detected`: Boolean flag for systematic defection patterns
- `rounds_remaining`: r - current_round + 1

**Core Decision Logic:**
```pseudocode
if current_round <= 3:
    return COOPERATE

if stock_health < 0.2:  // Critical stock depletion
    if cooperation_rate > 0.6:
        return COOPERATE  // Help rebuild with cooperative majority
    else:
        return DEFECT     // Survival mode with uncooperative opponents

if rounds_remaining <= 2:  // End-game considerations
    if stock_health > 0.5 and cooperation_rate > 0.5:
        return COOPERATE  // Maintain cooperation if sustainable
    else:
        return DEFECT     // Protect against end-game defection

// Main adaptive logic
if cooperation_rate >= 0.7:
    return COOPERATE      // Strong cooperation detected

if cooperation_rate >= 0.4:
    if stock_health > 0.6:
        return COOPERATE  // Moderate cooperation with healthy stock
    else:
        return forgiveness_check()  // Conditional cooperation

if cooperation_rate < 0.4:
    return punishment_phase()  // Handle low cooperation
```

### 3. Punishment and Forgiveness Mechanism

**Punishment Phase:**
```pseudocode
punishment_phase():
    if consecutive_low_cooperation >= 2:
        if stock_health < 0.3:
            return DEFECT  // Protect in crisis
        else:
            return COOPERATE  // Attempt to rebuild cooperation
    else:
        return DEFECT  // Immediate punishment for defection
```

**Forgiveness Check:**
```pseudocode
forgiveness_check():
    if cooperation_rate improved from last round:
        return COOPERATE  // Reward improvement
    if stock_health > 0.4 and random_forgiveness():
        return COOPERATE  // Occasional forgiveness to break cycles
    else:
        return DEFECT     // Continue punishment
```

### 4. Special Conditions

**Stock Recovery Mode:**
When `stock_health < 0.3`, prioritize cooperation if there's any sign of opponent willingness to cooperate (`cooperation_rate > 0.3`), as mutual cooperation is essential for resource recovery.

**Endgame Strategy:**
In the final 20% of rounds, gradually shift from pure cooperation toward more defensive play, but maintain cooperation if the stock is healthy and opponents remain largely cooperative.

**Exploitation Detection:**
Track if specific patterns emerge (e.g., opponents consistently defecting after cooperative rounds). If detected, implement a "tit-for-tat with forgiveness" approach specifically toward those patterns.

## Key Features

1. **Graduated Response**: Reactions are proportional to the level of cooperation/defection observed
2. **Stock-Aware**: Decisions factor in resource sustainability, becoming more cooperative when stock is critically low
3. **Forgiveness Mechanism**: Includes probabilistic forgiveness to prevent permanent punishment cycles
4. **Adaptive Threshold**: Cooperation thresholds adjust based on stock health and game phase
5. **Learning Component**: Tracks patterns and adjusts responses accordingly

## Robustness Elements

- **Against Pure Defectors**: Will eventually match defection but occasionally test for cooperation
- **Against Pure Cooperators**: Maintains high cooperation while monitoring stock health
- **Against Mixed Strategies**: Adapts cooperation level to match the overall cooperation rate
- **Against Exploiters**: Detects and responds to exploitation while maintaining pathways back to cooperation

This strategy balances the cooperative ideal with practical adaptability, ensuring it can maintain cooperation with like-minded strategies while protecting against exploitation and contributing to resource sustainability.
'''

description_COOPERATIVE_62 = '''
# Adaptive Cooperative Strategy: "Sustainable Stewardship"

## Core Philosophy
This strategy prioritizes long-term sustainability while remaining adaptive to opponent behavior. It aims to maintain the resource pool through cooperation while defending against exploitation through measured responses.

## Decision Framework

### 1. Cooperation Threshold System
The strategy uses a dynamic cooperation threshold based on the current stock level:

- **High Stock (≥ 80% of capacity)**: Strong cooperation bias
- **Medium Stock (40-79% of capacity)**: Conditional cooperation
- **Low Stock (< 40% of capacity)**: Conservation mode with selective defection

### 2. Main Decision Rules

#### Round 1: Always Cooperate
Start with cooperation to signal willingness to maintain the resource and establish a cooperative baseline.

#### Rounds 2 to r-1: Adaptive Response
```
if stock_level >= 0.8 * capacity:
    cooperate (maintain abundance)
    
elif stock_level >= 0.4 * capacity:
    cooperation_score = calculate_recent_cooperation_rate(last_3_rounds)
    
    if cooperation_score >= 0.6:
        cooperate (reward group cooperation)
    elif cooperation_score >= 0.3:
        if my_recent_defections <= 1:
            defect (signal concern, but limit punishment)
        else:
            cooperate (avoid escalation)
    else:
        defect (respond to widespread defection)
        
else: // stock_level < 0.4 * capacity (conservation mode)
    recent_defectors = count_defectors_last_round()
    
    if recent_defectors <= n/3:
        cooperate (support recovery with mostly cooperative group)
    else:
        defect (prevent exploitation in crisis)
```

#### Final Round: Conditional Cooperation
```
if stock_level >= 0.5 * capacity AND recent_cooperation_rate >= 0.5:
    cooperate (end on positive note if conditions allow)
else:
    defect (protect against final-round defection)
```

## Key Components

### 3. Cooperation Rate Calculation
Track the proportion of cooperative moves by all players (including self) over the last 3 rounds:
```
cooperation_rate = total_C_moves / (n * min(3, current_round - 1))
```

### 4. Recovery Detection
When stock drops below 40% capacity, implement recovery-focused behavior:
- Cooperate when majority cooperation is observed (≤ n/3 defectors)
- This creates incentive for others to join recovery efforts
- Defect only when facing majority defection to avoid being exploited

### 5. Escalation Control
To prevent destructive cycles:
- Limit consecutive defections to 2 maximum (except in final rounds)
- Return to cooperation when stock recovers or group behavior improves
- Use graduated response rather than immediate retaliation

## Strategic Rationale

### Cooperative Alignment
- **Starts cooperative** to signal good intentions
- **Rewards cooperation** with continued cooperation when stock is healthy
- **Supports recovery** by cooperating when group shows recovery efforts
- **Prioritizes sustainability** over short-term gain maximization

### Robustness Features
- **Stock-aware**: Adapts to resource scarcity automatically
- **Responsive**: Reacts to group behavior patterns, not individual actions
- **Forgiving**: Returns to cooperation when conditions improve
- **Protective**: Defects strategically to prevent exploitation and resource collapse

### Tournament Considerations
- **No coordination assumptions**: Works without predetermined patterns
- **Handles mixed strategies**: Responds to statistical behavior rather than specific opponents
- **Scales with parameters**: Thresholds adapt to group size and capacity
- **Endgame awareness**: Adjusts for final-round incentives

This strategy balances the cooperative goal of resource sustainability with the practical need to adapt to various opponent behaviors, making it robust for tournament play while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_63 = '''
# Adaptive Reciprocal Conservation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative resource stewardship with adaptive responses to opponent behavior. It prioritizes long-term sustainability while defending against exploitation through measured retaliation and forgiveness mechanisms.

## Decision Framework

### Phase 1: Initial Cooperation (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless stock falls below critical threshold
- **Critical threshold**: stock < capacity * 0.4

### Phase 2: Adaptive Response (Middle rounds)
Use a three-tier decision system:

#### Tier 1: Stock Health Assessment
```
If stock < capacity * 0.2: DEFECT (survival mode)
If stock < capacity * 0.4: Apply heightened defection probability
Otherwise: Proceed to Tier 2
```

#### Tier 2: Opponent Behavior Analysis
Track two key metrics over the last 3 rounds:
- **Defection rate**: Percentage of opponents who defected
- **Trend**: Whether defection is increasing, stable, or decreasing

```
If average_defection_rate > 0.7: DEFECT
If average_defection_rate > 0.5 AND trend_increasing: DEFECT  
If average_defection_rate < 0.3: COOPERATE
Otherwise: Proceed to Tier 3
```

#### Tier 3: Reciprocal Response with Forgiveness
- **Base cooperation probability**: 0.7
- **Adjust based on recent opponent behavior**:
  - For each defector in last round: reduce probability by 0.15
  - For each round of majority cooperation in last 3 rounds: increase probability by 0.1
- **Forgiveness mechanism**: If we've been defecting for 2+ consecutive rounds and stock > capacity * 0.3, increase cooperation probability by 0.3

### Phase 3: Endgame Strategy (Last 20% of rounds)
- **Sustainability focus**: Increase cooperation probability by 0.2 if stock > capacity * 0.5
- **Reciprocal intensification**: Mirror majority behavior more strongly
- **Final round**: Cooperate if stock > capacity * 0.3, otherwise defect

## Edge Case Handling

### Critical Stock Situations
- If stock ≤ 0.1 * capacity: Emergency defection for 1 round, then reassess
- If stock reaches maximum capacity: Always cooperate for 2 rounds to maintain sustainability

### Opponent Pattern Recognition
- **All-defector detection**: If >90% defect for 3 consecutive rounds, switch to mostly defecting with 20% cooperation rate
- **Exploitation recovery**: If being consistently exploited (we cooperate, others defect), gradually reduce cooperation over 3 rounds, then reassess

### First and Last Round Specifics
- **Round 1**: Always cooperate (signaling)
- **Last round**: Cooperate if current stock > capacity * 0.3, otherwise match majority behavior from previous round

## Pseudocode Summary

```
function decide_action(round, stock, capacity, history, n_players, total_rounds):
    # Phase determination
    if round <= 3:
        return handle_initial_phase(round, stock, capacity, history)
    elif round > total_rounds * 0.8:
        return handle_endgame(round, stock, capacity, history, n_players)
    else:
        return handle_middle_phase(round, stock, capacity, history, n_players)

function handle_middle_phase(round, stock, capacity, history, n_players):
    # Tier 1: Stock health
    if stock < capacity * 0.2:
        return DEFECT
    
    # Tier 2: Opponent behavior analysis
    recent_defection_rate = calculate_defection_rate(history, last_3_rounds=True)
    if recent_defection_rate > 0.7:
        return DEFECT
    elif recent_defection_rate < 0.3:
        return COOPERATE
    
    # Tier 3: Probabilistic reciprocal response
    base_prob = 0.7
    prob = adjust_for_opponent_behavior(base_prob, history)
    prob = apply_forgiveness_mechanism(prob, history, stock, capacity)
    
    return COOPERATE if random() < prob else DEFECT
```

## Key Strengths

1. **Robust to exploitation**: Defends against consistent defectors while remaining open to cooperation
2. **Environmentally conscious**: Prioritizes resource sustainability through stock-based decision making
3. **Adaptive**: Responds to changing opponent strategies and environmental conditions
4. **Forgiving**: Includes mechanisms to restore cooperation after conflicts
5. **Tournament-ready**: Makes no assumptions about opponent coordination or shared strategies

This strategy aims to find the sweet spot between being cooperative enough to achieve good outcomes in a largely cooperative environment, while being defensive enough to avoid exploitation by aggressive strategies.
'''

description_COOPERATIVE_64 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while maintaining flexibility to adapt to opponent behaviors. It operates on the principle that cooperation is optimal when the resource can sustain it, but defection may be necessary to prevent complete resource collapse or exploitation.

## Decision Framework

### 1. Resource Health Assessment
Before each round, evaluate the resource's current state:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Opponent Behavior Analysis
Track the cooperation rate of all opponents over the last min(3, current_round) rounds:
- **High Cooperation**: >70% of opponents cooperated
- **Mixed Behavior**: 30-70% of opponents cooperated
- **High Defection**: <30% of opponents cooperated

### 3. Decision Rules

#### First Round
Always **COOPERATE** to signal cooperative intent and gather information about opponents.

#### Rounds 2 to r-1

**Primary Decision Logic:**
```
IF resource_state == "Critical":
    IF cooperation_rate < 30%:
        DEFECT  // Resource dying anyway, secure what's left
    ELSE:
        COOPERATE  // Give cooperation a chance to save resource
        
ELIF resource_state == "Stressed":
    IF cooperation_rate > 50%:
        COOPERATE  // Good chance of recovery
    ELSE:
        DEFECT  // Too much defection to sustain cooperation
        
ELSE:  // resource_state == "Healthy"
    IF cooperation_rate > 30%:
        COOPERATE  // Maintain sustainable harvesting
    ELSE:
        // Implement graduated response to discourage defection
        IF consecutive_high_defection_rounds >= 2:
            DEFECT  // Punish persistent exploitation
        ELSE:
            COOPERATE  // Give benefit of doubt
```

#### Last Round (Round r)
**Special End-Game Logic:**
```
IF resource_state == "Critical":
    DEFECT  // Extract remaining value
ELIF cooperation_rate_last_3_rounds > 60%:
    COOPERATE  // Reward good behavior even at game end
ELSE:
    DEFECT  // Standard end-game defection
```

### 4. Adaptive Elements

#### Forgiveness Mechanism
- If opponents return to >60% cooperation rate after a period of defection, reset punishment counters
- This prevents permanent retaliation spirals

#### Stock Preservation Override
- If predicted next-round stock would be <5% of capacity with current cooperation level, switch to defection regardless of opponent behavior
- This prevents complete resource collapse

#### Dynamic Thresholds
- Adjust cooperation thresholds based on game length:
  - Short games (r ≤ 5): More forgiving thresholds to encourage cooperation
  - Long games (r > 10): Stricter thresholds to ensure sustainability

### 5. Edge Case Handling

#### Stock Near Zero (stock < capacity/10)
- Always defect unless ALL other players cooperated in the previous round
- Rationale: Resource recovery unlikely, secure remaining value

#### All Opponents Always Defect
- After 3 consecutive rounds of 100% opponent defection, switch to permanent defection
- No point in unilateral cooperation with purely exploitative opponents

#### All Opponents Always Cooperate  
- Continue cooperating to maintain the sustainable equilibrium
- Defection here would be purely exploitative and counterproductive

#### Capacity Edge Cases
- If stock exceeds 90% of capacity, always cooperate (resource can handle higher extraction)
- If n is very large relative to capacity, be more conservative in cooperation thresholds

## Strategy Rationale

This strategy balances several key objectives:

1. **Sustainability Focus**: Prioritizes resource health to maximize long-term payoffs
2. **Reciprocal Cooperation**: Rewards cooperative behavior and punishes exploitation
3. **Adaptive Response**: Adjusts to opponent strategies rather than following rigid patterns
4. **Robustness**: Handles edge cases and prevents complete exploitation
5. **Clear Signaling**: Provides clear behavioral patterns opponents can learn from

The strategy is designed to:
- Establish cooperation when possible
- Protect against exploitation without being overly punitive
- Maintain resource sustainability as the primary goal
- Adapt to various opponent strategies (always cooperate, always defect, tit-for-tat, etc.)
- Avoid predictable patterns that could be easily exploited

This approach should perform well against a diverse range of strategies while maintaining the cooperative spirit of sustainable resource management.
'''

description_COOPERATIVE_65 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy balances cooperation to sustain the resource with adaptive responses to defection, while maintaining a fundamentally cooperative stance that protects the common pool for long-term benefit.

## Decision Rules

### 1. Cooperation Threshold System
The strategy uses a dynamic cooperation threshold based on stock health and opponent behavior:

```
cooperation_threshold = base_threshold + stock_penalty + defection_penalty
```

Where:
- **Base threshold**: 0.6 (start with cooperative bias)
- **Stock penalty**: `(capacity - current_stock) / capacity * 0.3` (higher penalty when stock is depleted)
- **Defection penalty**: `recent_defection_rate * 0.2` (recent = last 3 rounds or available history)

### 2. Core Decision Logic

**COOPERATE if ANY of these conditions are met:**
1. `cooperation_threshold < 0.7` (favorable conditions for cooperation)
2. Current stock < `capacity * 0.3` (emergency conservation mode)
3. Last round had majority cooperation AND current stock > `capacity * 0.2`
4. It's the first round
5. Projected stock depletion would occur within 2 rounds if current defection rate continues

**DEFECT otherwise**, but with guilt-reduction mechanism (see below)

### 3. Stock Health Assessment
```
stock_health = current_stock / capacity
- Excellent (>0.8): Pure cooperation bias
- Good (0.6-0.8): Standard cooperation threshold
- Poor (0.3-0.6): Increased cooperation with defection monitoring  
- Critical (<0.3): Emergency cooperation mode
```

## Edge Case Handling

### First Round
**Always COOPERATE** - Establish cooperative intent and gather initial information about opponents.

### Last Round  
**COOPERATE if** stock_health > 0.4, otherwise **DEFECT** (no future consequences, but still consider sustainability)

### Stock Depletion Scenarios
- If stock ≤ `n` (everyone defecting would exhaust resource): **Always COOPERATE**
- If stock approaches 0: Switch to **emergency cooperation mode** for at least 2 consecutive rounds

### Opponent Behavior Patterns
- **All opponents consistently defect**: Alternate C-D-C pattern to maintain some resource regeneration
- **Mixed behavior detected**: Use standard threshold system
- **Majority cooperation trend**: Increase cooperation bias by lowering threshold by 0.1

## Adaptive Mechanisms

### 1. Forgiveness System
After 3 consecutive rounds of cooperation, reduce defection_penalty by 50% to allow recovery from punishment cycles.

### 2. Tit-for-Majority Response
If >50% of opponents defected in the previous round AND stock_health > 0.5, temporarily increase defection_penalty by 0.1 for next round only.

### 3. Resource Recovery Protocol
When stock begins recovering (current_stock > previous_stock + growth/2), decrease cooperation_threshold by 0.05 for 2 rounds to encourage sustained cooperation.

### 4. Endgame Cooperation Boost
In final 20% of rounds, if stock_health > 0.6, reduce cooperation_threshold by 0.1 to maximize final resource preservation.

## Robustness Features

### Against Pure Defectors
- Emergency cooperation mode prevents total resource collapse
- Alternating pattern maintains minimum regeneration
- Stock health monitoring ensures survival threshold maintenance

### Against Pure Cooperators  
- Maintains cooperation to maximize mutual benefit
- Doesn't exploit cooperative opponents
- Optimizes resource growth through sustained cooperation

### Against Mixed/Adaptive Strategies
- Threshold system responds to aggregate behavior trends
- Forgiveness prevents permanent punishment cycles
- Resource health prioritizes long-term sustainability over short-term gains

### Against Unpredictable Opponents
- Conservative cooperation bias ensures resource preservation
- Multiple decision pathways provide redundancy
- Emergency protocols activate regardless of opponent strategy

## Key Cooperative Principles

1. **Resource Sustainability**: Always prioritize keeping the commons viable
2. **Reciprocal Cooperation**: Reward cooperative behavior from others
3. **Measured Responses**: Avoid escalation that damages the resource
4. **Long-term Thinking**: Consider cumulative effects over immediate payoffs
5. **Collective Benefit**: Maintain cooperative stance even when individually suboptimal

This strategy maintains a fundamentally cooperative approach while being robust enough to survive in diverse strategic environments, always keeping the health of the common resource as the paramount concern.
'''

description_COOPERATIVE_66 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It balances cooperation with adaptive punishment to maintain sustainable resource use.

## Strategy Overview

### 1. Decision Rules

**Primary Decision Logic:**
- **Cooperate** when stock health is good and trust in other players is sufficient
- **Defect strategically** when the commons is under severe threat or when punishment is needed
- **Adapt behavior** based on observed patterns and stock trajectory

**Detailed Decision Tree:**

```pseudocode
function decide_action(round, stock, capacity, n, history):
    stock_health = stock / capacity
    
    // Phase 1: Initial Cooperation Period
    if round <= 2:
        return COOPERATE
    
    // Phase 2: Adaptive Response
    recent_defection_rate = calculate_recent_defection_rate(history, lookback=3)
    stock_trend = calculate_stock_trend(history, lookback=3)
    
    // Critical stock protection
    if stock_health < 0.2:
        if recent_defection_rate > 0.6:
            return DEFECT  // Emergency extraction
        else:
            return COOPERATE  // Try to rebuild
    
    // Moderate stock management
    if stock_health < 0.5:
        if recent_defection_rate > 0.4 OR stock_trend < -0.1:
            return DEFECT  // Defensive defection
        else:
            return COOPERATE
    
    // Healthy stock - focus on cooperation with punishment
    trust_level = calculate_trust(history)
    
    if trust_level > 0.7:
        return COOPERATE
    else if trust_level < 0.3 AND recent_defection_rate > 0.5:
        return DEFECT  // Punishment phase
    else:
        return COOPERATE  // Default to cooperation
```

### 2. Key Calculation Functions

**Stock Health Assessment:**
- Monitor stock level relative to capacity
- Track stock growth/decline trends over recent rounds
- Identify critical thresholds where cooperation becomes unsustainable

**Trust Calculation:**
```pseudocode
function calculate_trust(history):
    if len(history) < 2:
        return 1.0  // Start with high trust
    
    cooperation_reward_ratio = 0
    total_opportunities = 0
    
    for round in recent_history(lookback=5):
        my_action = round.my_action
        others_cooperation_rate = round.others_cooperation_rate
        stock_after = round.stock_after
        
        if my_action == COOPERATE:
            if others_cooperation_rate > 0.5:
                cooperation_reward_ratio += stock_after
            total_opportunities += capacity
    
    return cooperation_reward_ratio / max(total_opportunities, 1)
```

**Defection Rate Tracking:**
- Track what percentage of other players defected in recent rounds
- Weight more recent rounds more heavily
- Use this to detect emerging tragedy of commons situations

### 3. Edge Case Handling

**First Round (r=1):**
- Always COOPERATE to establish cooperative intent and maximize initial stock health

**Early Rounds (r=2-3):**
- Maintain cooperation unless stock drops below critical threshold (< 20% capacity)
- Build trust and observe other players' tendencies

**Middle Rounds:**
- Apply full adaptive logic
- Balance between maintaining cooperation and preventing exploitation

**Final Rounds (r > 0.8*total_rounds):**
- **Endgame Adjustment:** Slightly increase cooperation threshold since reputation effects diminish
- If stock is healthy (>60% capacity), prioritize cooperation to maximize final rounds
- If stock is critical (<30% capacity), apply defensive strategy more aggressively

**Stock Depletion Crisis (stock < 10% capacity):**
- Emergency mode: Cooperate only if majority of others are also cooperating
- Otherwise, secure individual survival through defection

### 4. Cooperative Alignment Features

**Forgiveness Mechanism:**
- After punishing defectors, return to cooperation if they show sustained cooperative behavior
- Implement graduated response rather than permanent retaliation

**Collective Benefit Priority:**
- When stock health is good, err on the side of cooperation
- Accept short-term individual losses for long-term collective gains

**Communication Through Actions:**
- Use consistent cooperative behavior to signal trustworthiness
- Use strategic defection as punishment signal, followed by return to cooperation

### 5. Robustness Features

**Against Always-Defect Opponents:**
- Detect persistent defectors and minimize their exploitation opportunities
- Cooperate with proven cooperators while defending against defectors

**Against Tit-for-Tat Variants:**
- Initial cooperation should establish positive relationship
- Avoid triggering retaliation cycles through careful punishment timing

**Against Random Players:**
- Don't over-react to random defections
- Focus on statistical patterns rather than individual actions

**Against Sophisticated Strategies:**
- Maintain unpredictability in punishment timing
- Adapt to observed patterns in opponent behavior

## Expected Performance

This strategy should:
1. **Establish cooperation** in groups of like-minded strategies
2. **Prevent exploitation** while remaining fundamentally cooperative  
3. **Maintain resource sustainability** through adaptive stock management
4. **Achieve high individual and collective payoffs** in mixed populations

The strategy prioritizes the long-term health of the commons while being robust enough to survive in competitive environments with diverse opponent strategies.
'''

description_COOPERATIVE_67 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common pool while being resilient against exploitation. It balances cooperation with adaptive responses to maintain both the resource and fair outcomes.

## Decision Rules

### 1. Stock Health Assessment
First, evaluate the current stock health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Cooperation Tendency Tracking
For each opponent, maintain a cooperation score:
- Initialize all opponents at 0.5 (neutral)
- After each round: cooperation_score = 0.7 × old_score + 0.3 × (1 if opponent played C, 0 if D)
- Group cooperation level = average of all opponents' cooperation scores

### 3. Main Decision Logic

```pseudocode
IF round == 1:
    RETURN Cooperate  // Start optimistically

IF stock < capacity/(4n):  // Emergency threshold
    RETURN Cooperate  // Always cooperate when stock is critically low

IF round == final_round:
    IF group_cooperation_level > 0.4:
        RETURN Cooperate  // Reward good behavior even at the end
    ELSE:
        RETURN Defect    // Protect against end-game defection

// Main strategy based on stock health and cooperation history
IF stock_health == "Healthy":
    IF group_cooperation_level ≥ 0.6:
        RETURN Cooperate
    ELSE IF group_cooperation_level ≥ 0.3:
        RETURN Cooperate with 70% probability  // Mostly cooperate but hedge
    ELSE:
        RETURN Defect    // Protect against persistent defectors
        
ELSE IF stock_health == "Stressed":
    IF group_cooperation_level ≥ 0.5:
        RETURN Cooperate
    ELSE:
        RETURN Cooperate with 60% probability  // Still lean cooperative
        
ELSE:  // Critical stock health
    IF group_cooperation_level ≥ 0.4:
        RETURN Cooperate
    ELSE IF any_recent_cooperation():  // At least one C in last 2 rounds
        RETURN Cooperate
    ELSE:
        RETURN Cooperate with 80% probability  // Almost always cooperate in crisis
```

### 4. Special Provisions

**Forgiveness Mechanism**: If group cooperation level drops below 0.3 but then shows improvement (increase of 0.2+ over 2 rounds), reset punishment and return to cooperative stance.

**Sustainability Override**: If projected stock depletion would lead to zero stock within 3 rounds under current consumption patterns, always cooperate regardless of opponent behavior.

## Edge Case Handling

### First Round
Always cooperate to establish good faith and gather initial information about opponents.

### Last Round  
Cooperate if opponents have shown reasonable cooperation (group level > 0.4), otherwise defect to protect against end-game exploitation.

### Stock Depletion
When stock falls below emergency threshold (capacity/4n), prioritize resource recovery through cooperation, even against persistent defectors.

### High Defection Environment
If group cooperation drops below 0.2 for 3+ consecutive rounds, switch to "conditional cooperation" mode: cooperate only if at least one opponent cooperated in the previous round.

## Robustness Features

1. **Adaptive Thresholds**: Cooperation requirements adjust based on stock health - more forgiving when resources are abundant, more demanding when scarce.

2. **Probabilistic Responses**: Uses mixed strategies in uncertain situations to avoid predictable exploitation while maintaining cooperative tendencies.

3. **Memory with Decay**: Recent actions matter more than distant history, allowing for relationship repair while maintaining accountability.

4. **Emergency Protocols**: Always prioritizes resource sustainability in crisis situations, recognizing that mutual destruction helps no one.

5. **Anti-Exploitation Measures**: Responds to persistent defection while remaining open to renewed cooperation.

This strategy embodies cooperative principles while being robust enough to survive in a tournament environment with diverse opponent strategies. It aims to find and maintain cooperative equilibria when possible while protecting the common resource from tragedy-of-the-commons scenarios.
'''

description_COOPERATIVE_68 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It operates on the principle that sustainable resource management benefits everyone, but includes defensive mechanisms to prevent being taken advantage of by purely selfish players.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
**Always cooperate in round 1** - Start with good faith to establish cooperative norms and test the waters.

### 2. Trust-Based Cooperation with Graduated Response

The strategy maintains a **cooperation threshold** based on:
- Current stock health
- Historical cooperation rates of other players
- Remaining rounds

**Decision Logic:**
```
If round == 1:
    Action = C
Else:
    cooperation_rate = (number of C actions by others in last round) / (n-1)
    stock_health = current_stock / capacity
    
    # Base cooperation threshold starts high but can adapt
    base_threshold = 0.5
    
    # Adjust threshold based on stock health
    If stock_health >= 0.8:
        threshold = base_threshold - 0.2  # More forgiving when stock is healthy
    Else if stock_health >= 0.4:
        threshold = base_threshold
    Else:
        threshold = base_threshold + 0.3  # More defensive when stock is low
    
    # Adjust for remaining rounds (more cooperative early, more defensive late)
    rounds_remaining = r - current_round
    if rounds_remaining > r/2:
        threshold -= 0.1  # Slightly more cooperative early on
    else if rounds_remaining <= 3:
        threshold += 0.2  # More defensive in final rounds
    
    If cooperation_rate >= threshold:
        Action = C
    Else:
        Action = D
```

### 3. Stock Crisis Mode
**Emergency defection trigger:** If stock falls below critical level (stock < n), switch to defection until stock recovers above 2n.

```
If current_stock < n:
    Action = D  # Crisis mode - everyone needs to defect to let stock recover
Else if current_stock < 2n AND previous_action == D:
    Action = D  # Continue defecting until stock is healthy
```

### 4. Endgame Considerations
In the final few rounds, the strategy becomes more defensive to avoid being exploited when there's no future to punish defection:

```
If remaining_rounds <= 2:
    # Only cooperate if others were very cooperative recently
    recent_cooperation = avg_cooperation_rate_last_3_rounds
    If recent_cooperation >= 0.8:
        Action = C
    Else:
        Action = D
```

### 5. Pattern Recognition and Adaptation
Track patterns in opponent behavior:
- If detecting a "tit-for-tat" style player, be more consistently cooperative
- If detecting always-defectors, be more defensive around them
- If detecting random players, rely more on stock health for decisions

```
# After each round, update player type assessments
For each other player:
    If they've played C in >80% of rounds when stock was healthy:
        Mark as "cooperator" - be more trusting
    If they've played D in >80% of rounds regardless of stock:
        Mark as "defector" - be more defensive
    
# Adjust cooperation threshold based on player type distribution
cooperator_ratio = cooperators / (n-1)
threshold -= cooperator_ratio * 0.15  # More cooperative with more cooperators
```

## Key Features

**Adaptive:** Responds to both stock health and opponent behavior patterns
**Sustainable:** Prioritizes long-term resource health over short-term gains
**Robust:** Has defensive mechanisms against exploitation while maintaining cooperative intent
**Fair:** Gives others opportunities to cooperate and rewards cooperative behavior
**Realistic:** Accounts for endgame effects and crisis situations

## Edge Cases Handled

1. **First round:** Always cooperate to establish good faith
2. **Stock depletion:** Emergency defection mode when stock is critically low
3. **Final rounds:** More defensive to avoid end-game exploitation
4. **All-defector environment:** Switches to defensive mode while monitoring for cooperation opportunities
5. **Mixed populations:** Adapts cooperation threshold based on the mix of player types encountered

This strategy balances idealistic cooperation with realistic game theory, aiming to achieve high collective payoffs while protecting against exploitation in a tournament setting.
'''

description_COOPERATIVE_69 = '''
# Adaptive Cooperative Strategy: "Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being conditionally cooperative. It aims to maintain the resource pool while adapting to opponent behavior patterns.

## Decision Rules

### 1. Stock Health Assessment
First, evaluate the current stock health:
- **Healthy**: stock ≥ 0.8 × capacity
- **Moderate**: 0.4 × capacity ≤ stock < 0.8 × capacity  
- **Critical**: stock < 0.4 × capacity

### 2. Cooperation Threshold System
Track the "cooperation rate" of all players from previous rounds:
- `cooperation_rate = (total C actions) / (total actions by all players)`
- **High cooperation**: cooperation_rate ≥ 0.6
- **Medium cooperation**: 0.3 ≤ cooperation_rate < 0.6
- **Low cooperation**: cooperation_rate < 0.3

### 3. Main Decision Logic

**Round 1 (First Round):**
- Always play C to signal cooperative intent

**Rounds 2 to r-1 (Middle Rounds):**
```
IF stock is Critical:
    IF cooperation_rate is High: play C
    ELSE: play D (survival mode)
    
ELIF stock is Moderate:
    IF cooperation_rate is High: play C
    ELIF cooperation_rate is Medium AND last_round_defectors ≤ n/2: play C
    ELSE: play D (defensive defection)
    
ELSE (stock is Healthy):
    IF cooperation_rate ≥ 0.4: play C
    ELSE: play D (punish excessive defection)
```

**Round r (Final Round):**
- Apply a "legacy consideration": If stock > 0.6 × capacity, play C regardless of opponent behavior to leave the resource in good condition
- Otherwise, use the same logic as middle rounds

### 4. Adaptive Forgiveness Mechanism
Track recent trends (last 3 rounds if r > 6, otherwise last round):
- If cooperation has been increasing recently, be more forgiving (reduce thresholds by 0.1)
- If cooperation has been decreasing, be more strict (increase thresholds by 0.1)

## Edge Case Handling

**Very Short Games (r ≤ 3):**
- Round 1: Always C
- Remaining rounds: C if stock ≥ 0.5 × capacity, otherwise mirror majority behavior from previous round

**Stock Depletion Crisis (stock ≤ n):**
- Switch to pure survival mode: only cooperate if ALL other players cooperated in the previous round

**High Capacity Games (capacity ≥ 4n):**
- Be more generous with cooperation thresholds (reduce all thresholds by 0.1) since the resource is more abundant

## Cooperative Alignment Features

1. **Initial Cooperation**: Always starts cooperative to enable mutual cooperation
2. **Sustainability Focus**: Prioritizes resource health over short-term gains
3. **Conditional Forgiveness**: Gives opponents chances to return to cooperation
4. **Legacy Consideration**: In final rounds, considers the state left for hypothetical future players
5. **Graduated Response**: Doesn't immediately punish single defections, allowing for mistakes or experimentation

## Robustness Features

1. **Behavior Agnostic**: Doesn't assume any specific opponent strategies
2. **Trend Awareness**: Adapts to changing opponent behavior patterns
3. **Context Sensitive**: Adjusts cooperation based on resource scarcity
4. **Defense Capable**: Can shift to defensive play when necessary for survival
5. **Recovery Oriented**: Provides pathways back to cooperation when opponents improve

This strategy balances idealistic cooperation with pragmatic adaptation, ensuring both resource sustainability and competitive viability across diverse opponent behaviors.
'''

description_COOPERATIVE_70 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy aims to be a "steward" of the common pool resource while adapting to opponent behavior patterns. It balances immediate cooperation with long-term sustainability, using a combination of reciprocity, forgiveness, and resource conservation principles.

## Decision Framework

### 1. Primary Decision Rules

**Round 1: Always Cooperate**
- Start with cooperation to signal cooperative intent
- Establishes baseline for measuring others' behavior

**Rounds 2 to r-1: Adaptive Reciprocity**
```
IF stock_health_ratio < 0.3:
    ALWAYS cooperate (crisis mode)
ELSE IF cooperation_momentum >= cooperation_threshold:
    Cooperate
ELSE IF defection_trend > defection_threshold AND stock_health_ratio > 0.6:
    Defect (measured retaliation)
ELSE:
    Cooperate (default to cooperation)
```

**Final Round: Conditional Cooperation**
- Cooperate if stock_health_ratio >= 0.4
- Defect only if stock is critically low AND others have been consistently defecting

### 2. Key Metrics

**Stock Health Ratio**
```
stock_health_ratio = current_stock / capacity
```

**Cooperation Momentum** (weighted toward recent rounds)
```
cooperation_momentum = Σ(i=1 to t-1) w_i × cooperation_rate_i
where w_i = i / Σ(j=1 to t-1) j  // More weight on recent rounds
cooperation_rate_i = (players_who_cooperated_in_round_i) / n
```

**Defection Trend** (measures increasing defection)
```
defection_trend = (defection_rate_recent_3_rounds - defection_rate_earlier_rounds)
```

### 3. Thresholds (Parameter-Dependent)

**Cooperation Threshold**
```
cooperation_threshold = max(0.4, 1 - (1/n))
```
- Higher threshold when more players (harder to sustain cooperation)
- Minimum threshold of 0.4 to avoid being too lenient

**Defection Threshold**
```
defection_threshold = 0.3 + (0.2 × (r-current_round)/r)
```
- More tolerant of defection early in the game
- Less tolerant as game progresses

### 4. Special Conditions

**Crisis Mode Activation**
- When stock_health_ratio < 0.3, always cooperate regardless of others' behavior
- Recognizes that resource collapse hurts everyone
- Attempts to model sustainable behavior even when others don't

**Forgiveness Mechanism**
- After retaliating with defection, return to cooperation if:
  - At least 50% of players cooperated in the previous round, OR
  - Stock health improves by more than 0.1 in one round

**Early Cooperation Bonus**
- If all players cooperate in rounds 1-2, increase cooperation_threshold by 0.1
- Rewards early mutual cooperation

## Strategic Rationale

### 1. Cooperative Alignment
- **Default to cooperation**: The strategy cooperates unless there are strong reasons not to
- **Resource preservation**: Prioritizes long-term sustainability over short-term gains
- **Forgiveness**: Returns to cooperation after brief retaliation

### 2. Adaptability Features
- **Responsive to resource state**: Behavior changes based on stock health
- **Pattern recognition**: Adapts to emerging cooperation/defection trends
- **Dynamic thresholds**: Adjusts expectations based on game progress

### 3. Robustness Elements
- **Crisis override**: Always cooperates when resource is critically low
- **Anti-exploitation**: Can retaliate against consistent defectors when resource allows
- **Recovery mechanism**: Built-in path back to cooperation after conflicts

### 4. Tournament Considerations
- **No assumption of coordination**: Works without predetermined agreements
- **Handles diverse opponents**: From always-cooperate to always-defect strategies
- **Scalable**: Thresholds adjust based on number of players

## Implementation Notes

The strategy maintains a rolling history of:
- Each player's actions in previous rounds
- Stock levels after each round
- Calculated metrics (cooperation rates, trends)

This creates a memory-efficient approach that can handle games of varying length while maintaining adaptive behavior throughout.

The strategy is designed to be a "conditional cooperator" that leads by example while protecting against exploitation, ultimately serving the collective good of sustainable resource management.
'''

description_COOPERATIVE_71 = '''
# Adaptive Cooperative Strategy: "Stock Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the stock at healthy levels through cooperation, but includes defensive mechanisms against exploitation.

## Decision Framework

### 1. **Stock Health Assessment**
First, evaluate the current stock level relative to capacity:
- **Healthy Stock**: stock ≥ 0.6 × capacity
- **Moderate Stock**: 0.3 × capacity ≤ stock < 0.6 × capacity  
- **Critical Stock**: stock < 0.3 × capacity

### 2. **Opponent Behavior Analysis**
Track cooperation rates over recent rounds:
- **Recent Cooperation Rate**: Percentage of players who cooperated in the last min(3, current_round-1) rounds
- **Overall Cooperation Rate**: Percentage of players who cooperated across all previous rounds

### 3. **Core Decision Rules**

#### **Round 1: Optimistic Start**
Always **COOPERATE** in the first round to signal cooperative intent.

#### **Rounds 2 to r-1: Adaptive Cooperation**

```pseudocode
IF stock_level == "Critical":
    COOPERATE  // Emergency conservation mode
ELSE IF stock_level == "Healthy":
    IF recent_cooperation_rate ≥ 0.5:
        COOPERATE  // Reward good behavior
    ELSE IF recent_cooperation_rate ≥ 0.25:
        IF overall_cooperation_rate ≥ 0.4:
            COOPERATE  // Give benefit of doubt
        ELSE:
            DEFECT  // Defensive response
    ELSE:
        DEFECT  // Protect against exploitation
ELSE:  // Moderate stock level
    IF recent_cooperation_rate ≥ 0.6:
        COOPERATE  // Stock needs care, others cooperating
    ELSE IF recent_cooperation_rate ≥ 0.3 AND overall_cooperation_rate ≥ 0.5:
        COOPERATE  // Mixed signals but generally cooperative group
    ELSE:
        DEFECT  // Too risky given moderate stock
```

#### **Final Round (Round r): Sustainability Focus**
```pseudocode
IF stock_level == "Critical":
    COOPERATE  // Leave something for the future
ELSE IF recent_cooperation_rate ≥ 0.4:
    COOPERATE  // Reciprocate cooperation
ELSE:
    DEFECT  // No future rounds to worry about
```

## Key Features

### **1. Stock-First Priority**
The strategy always prioritizes stock conservation when levels become critical, regardless of opponent behavior. This prevents total depletion scenarios.

### **2. Graduated Response System**
Rather than binary cooperation/defection, the strategy uses different cooperation thresholds based on stock health:
- Healthy stock: More tolerant of some defection
- Moderate stock: Stricter cooperation requirements
- Critical stock: Emergency conservation mode

### **3. Multi-Timeframe Analysis**
The strategy considers both:
- **Recent behavior** (last 3 rounds): Captures current dynamics
- **Overall behavior**: Prevents manipulation from temporary cooperation

### **4. Forgiveness Mechanism**
The strategy can return to cooperation if opponents show sustained cooperative behavior, encouraging mutual cooperation recovery.

### **5. Exploitation Protection**
When cooperation rates fall below threshold levels, the strategy defects to avoid being consistently exploited while others free-ride.

## Robustness Features

- **Parameter Independence**: Thresholds are relative to capacity and player count
- **Handles All Group Sizes**: Cooperation thresholds adapt to expected baseline cooperation
- **Resilient to Manipulation**: Uses multiple rounds of history to avoid being fooled by temporary cooperation
- **Sustainable Focus**: Always prioritizes long-term stock health over short-term gains
- **Tournament Adaptable**: Works well regardless of what other strategies are present

This strategy balances the cooperative goal of maintaining the commons with practical defenses against exploitation, creating a robust approach that can adapt to various opponent behaviors while maintaining its cooperative core.
'''

description_COOPERATIVE_72 = '''
# Adaptive Cooperative Resource Management Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior patterns. It starts cooperative but includes mechanisms to protect against exploitation while encouraging others toward cooperative behavior.

## Strategy Components

### 1. Decision Rules

**Primary Decision Logic:**
```
if (first_round):
    return COOPERATE
    
if (stock_critical):  # stock < capacity * 0.15
    return COOPERATE_FORCED
    
if (last_round):
    return mirror_majority_last_round()
    
else:
    return adaptive_decision()
```

**Adaptive Decision Function:**
- **Cooperation Threshold**: Maintain a dynamic "cooperation score" for the group
- **Recent History Weight**: Weight last 3 rounds more heavily (60%) than earlier rounds (40%)
- **Defection Response**: If >50% of players defected in the last round AND stock >30% capacity, defect once then return to cooperation
- **Reciprocity Bias**: If cooperation rate in last 2 rounds >60%, always cooperate
- **Stock Protection**: If stock declining rapidly (>40% per round average over last 2 rounds), defect temporarily to signal concern

### 2. Edge Cases

**First Round**: Always cooperate to signal cooperative intent and establish baseline.

**Critical Stock (stock < 15% capacity)**: 
- Always cooperate regardless of others' behavior
- This prevents complete resource collapse
- Signal that long-term sustainability overrides short-term gains

**Last Round**:
- If opponents have been mostly cooperative (>60% cooperation rate): Cooperate
- If opponents have been mostly exploitative (<40% cooperation rate): Mirror the majority action from round r-1
- Otherwise: Cooperate (benefit of doubt)

**Penultimate Round**: 
- Increase cooperation threshold slightly to account for potential last-round defection
- If stock is healthy (>50% capacity) and cooperation rate >40%, always cooperate

### 3. Cooperative Alignment Mechanisms

**Forgiveness**: After punishing defection with one defect round, immediately return to cooperation if:
- Stock level improves
- Any opponent returns to cooperation
- Two rounds have passed since punishment

**Stock Stewardship**: 
- When stock >80% capacity, always cooperate even if others occasionally defect
- When stock 50-80% capacity, require >40% group cooperation rate to cooperate
- When stock 15-50% capacity, require >60% group cooperation rate to cooperate

**Encouraging Cooperation**:
- Track individual player patterns where possible
- Cooperate more readily with players who show cooperative tendencies
- Use "generous tit-for-tat" - cooperate after opponent cooperates, but also cooperate randomly 10% of the time after opponent defects

## Implementation Pseudocode

```python
def choose_action(round_num, stock, capacity, history, n_players, total_rounds):
    # Calculate key metrics
    stock_ratio = stock / capacity
    cooperation_rate = calculate_recent_cooperation_rate(history, weight_recent=True)
    
    # Critical stock protection
    if stock_ratio < 0.15:
        return COOPERATE
    
    # First round
    if round_num == 1:
        return COOPERATE
    
    # Last round
    if round_num == total_rounds:
        if cooperation_rate > 0.6:
            return COOPERATE
        else:
            return mirror_majority_previous_round(history)
    
    # Adaptive decision
    if stock_ratio > 0.8:
        # Abundant resources - be generous
        return COOPERATE
    elif stock_ratio > 0.5:
        # Moderate resources - require some cooperation
        if cooperation_rate > 0.4:
            return COOPERATE
        else:
            return conditional_defect()
    else:
        # Scarce resources - require strong cooperation signal
        if cooperation_rate > 0.6:
            return COOPERATE
        else:
            return conditional_defect()

def conditional_defect():
    # Defect once, then return to cooperation if any positive signal
    if recently_punished():
        return COOPERATE
    else:
        return DEFECT
```

## Key Features

1. **Sustainability First**: Prevents resource collapse through forced cooperation at critical levels
2. **Adaptive Responsiveness**: Adjusts cooperation threshold based on stock levels and opponent behavior
3. **Forgiveness**: Quickly returns to cooperation after brief punishment periods
4. **Signal Clarity**: Uses predictable responses to communicate intentions to other players
5. **Robustness**: Handles both highly cooperative and highly exploitative environments
6. **Stock Stewardship**: Prioritizes long-term resource health over short-term individual gains

This strategy aims to foster a cooperative equilibrium while protecting against both tragedy-of-the-commons scenarios and exploitation by consistently defecting opponents.
'''

description_COOPERATIVE_73 = '''
# Adaptive Stock-Conscious Cooperative Strategy (ASCCS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the common pool resource at healthy levels while protecting against exploitation through measured retaliation and recovery mechanisms.

## Decision Rules

### Primary Decision Logic:
```
if (current_round == 1):
    return COOPERATE
    
if (stock_level < critical_threshold):
    return emergency_mode()
    
if (exploitation_detected()):
    return conditional_retaliation()
    
if (recovery_opportunity()):
    return COOPERATE
    
return default_cooperative_response()
```

### Key Thresholds and Parameters:
- **Critical Threshold**: `stock < capacity * 0.3` (30% of maximum capacity)
- **Sustainable Threshold**: `stock > capacity * 0.7` (70% of maximum capacity)
- **Exploitation Detection**: More than 50% of players defected in the last round
- **Trust Recovery Period**: 2-3 rounds of consistent cooperation needed to rebuild trust

## Detailed Strategy Components

### 1. **Stock-Conscious Base Behavior**
- **High Stock (>70% capacity)**: Always COOPERATE to maintain sustainability
- **Medium Stock (30-70% capacity)**: Cooperate by default, but monitor for exploitation
- **Low Stock (<30% capacity)**: Enter emergency conservation mode

### 2. **Emergency Conservation Mode**
When stock falls below 30% of capacity:
- **Always COOPERATE** regardless of opponent behavior
- Prioritize resource regeneration over short-term gains
- Continue until stock recovers to >50% capacity
- Rationale: Even defectors benefit more from a recovered resource than a depleted one

### 3. **Exploitation Detection and Response**
Track opponent behavior patterns:
```
exploitation_score = (defectors_last_round / total_players)

if (exploitation_score > 0.5 AND stock > critical_threshold):
    enter_conditional_retaliation()
```

### 4. **Conditional Retaliation System**
When exploitation is detected:
- **Round 1 of retaliation**: DEFECT (signal displeasure)
- **Round 2 of retaliation**: 
  - If opponents reduced defection: COOPERATE (forgive quickly)
  - If opponents continued high defection: DEFECT again
- **Round 3+**: Always return to COOPERATE (prevent destructive spirals)

### 5. **Adaptive Forgiveness**
- Quickly forgive isolated defections (1-2 defectors out of many)
- Slowly rebuild trust after mass defection events
- Never hold grudges for more than 3 rounds
- Always give opponents multiple chances to return to cooperation

### 6. **End-Game Handling**
In the final 20% of rounds:
- If stock is healthy (>50% capacity): Continue normal cooperation
- If stock is critical: Maintain emergency cooperation mode
- Never engage in end-game defection cascades

## Edge Case Management

### First Round:
Always COOPERATE to establish cooperative intent and gather information about opponents.

### Last Round:
COOPERATE if stock is below sustainable levels, otherwise follow normal decision rules (preventing tragedy while not being exploitable in healthy scenarios).

### Stock Depletion Recovery:
When stock hits zero or near-zero:
- Absolutely prioritize COOPERATION for multiple rounds
- Ignore opponent defections during recovery phase
- Only resume normal decision-making once stock >30% capacity

### All-Defector Scenarios:
If facing consistent mass defection:
- Defect for 1-2 rounds maximum (limit losses)
- Return to cooperation before resource completely depletes
- Bet on opponents' eventual self-interest in resource recovery

## Robustness Features

1. **Stock-First Priority**: Never let resource concerns be secondary to punishment
2. **Limited Retaliation**: Caps on punishment prevent destructive spirals
3. **Quick Forgiveness**: Rapid return to cooperation encourages reciprocal behavior
4. **Emergency Override**: Conservation mode overrides all other considerations
5. **Adaptive Thresholds**: Behavior scales with game size and current resource state

## Strategic Advantages

- **Sustainability-Focused**: Maintains resource for all players' long-term benefit
- **Exploitation-Resistant**: Responds to free-riders without destroying cooperation
- **Recovery-Oriented**: Actively works to restore depleted resources
- **Opponent-Adaptive**: Adjusts behavior based on observed patterns
- **Tournament-Ready**: Performs well against diverse strategy types while maintaining cooperative principles

This strategy balances idealistic cooperation with pragmatic adaptation, ensuring both individual competitiveness and collective resource sustainability across diverse opponent behaviors and game scenarios.
'''

description_COOPERATIVE_74 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation. It balances cooperation with necessary defection to maintain resource sustainability and respond to opponent behavior patterns.

## Strategy Overview

### Decision Framework
The strategy uses a **dynamic cooperation threshold** based on three key factors:
1. **Resource Health**: Current stock relative to capacity
2. **Cooperation History**: Pattern of cooperation from other players
3. **Game Phase**: Early, middle, or late game considerations

### Main Decision Rules

#### 1. Resource-Based Cooperation Threshold
```
cooperation_threshold = base_threshold + resource_adjustment + history_adjustment

base_threshold = 0.6  // Start with moderate cooperation expectation

resource_adjustment = (stock/capacity - 0.5) * 0.3
// Adjust based on resource health: higher stock = more cooperative

history_adjustment = (recent_cooperation_rate - 0.5) * 0.4
// Adjust based on others' cooperation: reciprocate the general trend
```

#### 2. Primary Decision Logic
**COOPERATE if any of these conditions are met:**
- Round 1 (start cooperatively)
- Stock level > 80% of capacity (abundant resources)
- Recent cooperation rate among others > cooperation_threshold
- Last round and stock > capacity/4 (preserve remaining resources)

**DEFECT if:**
- Stock < capacity/4 (resource crisis - urgent consumption needed)
- Recent cooperation rate < 30% (protect against widespread defection)
- Predicted resource collapse (stock would drop below 10% if everyone defects)

#### 3. Adaptive History Analysis
Track cooperation patterns using a **sliding window** of the last min(5, r/3) rounds:

```
recent_cooperation_rate = (cooperators_in_window) / (total_player_actions_in_window)

// Also track individual player patterns for reputation-based adjustments
player_cooperation_rates[i] = cooperations[i] / total_rounds_so_far
```

## Detailed Implementation

### First Round
- **Always COOPERATE** to establish cooperative intent and test others' strategies

### Middle Rounds (rounds 2 to r-2)
1. Calculate current cooperation_threshold
2. Assess resource health: `resource_ratio = stock/capacity`
3. If `resource_ratio < 0.25`: **DEFECT** (crisis mode)
4. If `resource_ratio > 0.8`: **COOPERATE** (abundance mode)
5. Otherwise, use threshold-based decision:
   - If `recent_cooperation_rate > cooperation_threshold`: **COOPERATE**
   - Else: **DEFECT**

### Penultimate Round (round r-1)
- **COOPERATE** if stock > capacity/3 (leave resources for final round)
- **DEFECT** if others have been predominantly defecting (>70% defection rate)

### Final Round
- **COOPERATE** if stock > capacity/4 (preserve what's left)
- **DEFECT** otherwise (last chance to benefit)

## Edge Case Handling

### Resource Crisis (stock < capacity/4)
- Switch to "survival mode": **DEFECT** to secure resources
- Resume cooperation only when stock recovers above capacity/3

### Exploitation Detection
If opponents maintain >70% defection rate for 3+ consecutive rounds:
- Reduce cooperation_threshold by 0.2
- Increase defection probability to protect against further exploitation

### Resource Abundance (stock > 90% capacity)
- **Always COOPERATE** to maximize sustainable growth
- Ignore historical defection patterns in this state

## Strategic Rationale

### Cooperative Alignment
- **Starts cooperatively** to signal good intentions
- **Reciprocates cooperation** when others demonstrate it
- **Preserves resources** in final rounds for collective benefit

### Robustness Features
- **Adaptive thresholds** respond to opponent behavior without being exploitable
- **Resource-based decisions** prevent tragedy of commons
- **Crisis protection** ensures survival against aggressive strategies
- **Limited retaliation** avoids destructive spiral while maintaining boundaries

### Tournament Effectiveness
- **No coordination assumptions**: Works independently of other strategies
- **Flexible response**: Adapts to both cooperative and competitive environments
- **Sustainable focus**: Prioritizes long-term payoffs over short-term gains
- **Exploitation resistance**: Protected against always-defect and similar aggressive strategies

This strategy balances the cooperative ideal with practical necessities, creating a robust approach that can succeed across diverse opponent behaviors while maintaining the resource pool for collective benefit.
'''

description_COOPERATIVE_75 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but adjusts based on observed patterns, always maintaining a bias toward preserving the resource for mutual benefit.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3 or first 20% of game)
- **Always cooperate** in the first round
- Continue cooperating for the first max(3, r/5) rounds to establish cooperative intent
- **Rationale**: Give opponents a chance to recognize cooperative intentions and build trust

### 2. Adaptive Response Phase (Middle rounds)
**Stock Health Assessment:**
- Calculate stock sustainability ratio: `health = current_stock / capacity`
- If `health < 0.3`: Enter "Crisis Mode" - defect to get immediate resources before potential collapse
- If `health < 0.5`: Enter "Caution Mode" - be more selective about cooperation
- If `health ≥ 0.5`: Continue normal adaptive behavior

**Opponent Behavior Analysis:**
Track for each recent window of 3 rounds:
- `coop_rate = (number of C actions by others) / (total actions by others)`
- `recent_defections = number of players who defected in last round`

**Decision Logic:**
```pseudocode
if stock_health < 0.3:
    return DEFECT  // Crisis mode
    
if stock_health < 0.5 and recent_defections > n/2:
    return DEFECT  // Caution mode with high defection
    
if coop_rate >= 0.6:
    return COOPERATE  // Reward high cooperation
    
if coop_rate >= 0.3 and stock_health >= 0.5:
    return COOPERATE  // Moderate cooperation with healthy stock
    
if recent_defections >= n-1:  // Almost everyone defected last round
    return DEFECT  // Don't be the only cooperator
    
return COOPERATE  // Default to cooperation
```

### 3. Endgame Phase (Last 20% of rounds)
**Final rounds require special handling:**

- **Last 3 rounds or final 10% (whichever is larger):**
  - If `stock_health ≥ 0.4` and `coop_rate ≥ 0.5`: Continue cooperating
  - Otherwise: Defect to secure remaining resources

- **Very last round:**
  - Always defect (no future consequences, rational to maximize final payoff)

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Stock Near Depletion (stock < n)
- If stock is so low that it cannot sustain even minimal consumption, defect immediately
- This prevents being exploited when the resource is effectively exhausted

### Unanimous Defection Detection
- If all other players defected for 2 consecutive rounds and stock < 0.4 * capacity:
  - Switch to defection for next 2 rounds, then reassess
  - This prevents being repeatedly exploited

### Recovery Incentive
- If stock was below 0.3 but has recovered above 0.6 due to reduced consumption:
  - Resume cooperative behavior to maintain the recovery
  - This encourages sustainable resource management

## Cooperative Alignment Features

1. **Default Cooperation Bias**: When uncertain, the strategy defaults to cooperation
2. **Forgiveness**: After punishing defection, returns to cooperation when opponents show cooperative behavior
3. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
4. **Collective Benefit**: Only defects when necessary for self-preservation or when cooperation is clearly futile
5. **Trust Building**: Starts with unconditional cooperation to establish positive precedent

## Robustness Features

- **Adaptive**: Responds to both stock levels and opponent behavior patterns
- **Not Exploitable**: Defects when facing persistent exploitation or resource crisis
- **Forgiving**: Returns to cooperation when conditions improve
- **Endgame Aware**: Adjusts strategy appropriately for final rounds
- **Parameter Independent**: Works across different values of n, r, and capacity

This strategy balances the cooperative imperative with practical considerations, ensuring it contributes to collective welfare while protecting against exploitation and resource collapse.
'''

description_COOPERATIVE_76 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being conditionally cooperative, adapting to opponent behavior patterns, and maintaining resource viability across all rounds.

## Decision Framework

### 1. **Initial Cooperation Phase (First 20% of rounds)**
- **Always cooperate** for the first ⌈0.2 × r⌉ rounds
- This establishes cooperative intent and allows observation of opponent patterns
- Builds initial trust and maintains high stock levels for better long-term outcomes

### 2. **Adaptive Response Phase (Middle 60% of rounds)**
Use a multi-factor decision system based on:

#### A. **Stock Health Assessment**
```
stock_health = current_stock / capacity
if stock_health < 0.3:
    cooperation_bias = 0.8  // Strong bias toward cooperation
elif stock_health < 0.6:
    cooperation_bias = 0.6  // Moderate bias toward cooperation  
else:
    cooperation_bias = 0.4  // Neutral to slight cooperation bias
```

#### B. **Opponent Behavior Analysis**
Track each opponent's cooperation rate over the last min(5, current_round/2) rounds:
```
for each opponent i:
    recent_coop_rate[i] = (cooperations by i) / (recent rounds observed)
    
avg_opponent_cooperation = mean(recent_coop_rate[all opponents])
```

#### C. **Decision Rule**
```
cooperation_threshold = cooperation_bias × (0.5 + 0.5 × avg_opponent_cooperation)

if random_number[0,1] < cooperation_threshold:
    play COOPERATE
else:
    play DEFECT
```

### 3. **Endgame Strategy (Final 20% of rounds)**

#### A. **Sustainability Check**
If stock < capacity × 0.4:
- **Always cooperate** to prevent collapse
- Prioritize resource preservation over short-term gains

#### B. **Reciprocal Finale**
If stock is healthy (≥ 40% capacity):
- Mirror the most cooperative opponent's recent behavior
- If majority of opponents defected in last 2 rounds, defect
- Otherwise, cooperate with 70% probability

#### C. **Final Round Exception**
In the very last round:
- If stock > capacity × 0.5: Defect (no future consequences)
- If stock ≤ capacity × 0.5: Cooperate (maintain principle consistency)

## Edge Case Handling

### **Stock Depletion Emergency**
If stock falls below capacity × 0.15:
- **Override all other rules**: Always cooperate for next 3 rounds
- Reset to normal decision-making only after stock recovers above 25% capacity

### **All-Defector Environment Detection**
If >75% of opponents defected in last 3 consecutive rounds AND stock > 50% capacity:
- Temporarily increase defection probability by 0.3 for next 2 rounds
- Return to normal strategy afterward (avoid permanent retaliation spiral)

### **Single Opponent Game (n=2)**
- Increase cooperation bias by 0.2 across all phases
- Use Tit-for-Tat with forgiveness: cooperate if opponent cooperated in last round OR defected only once in last 3 rounds

## Robustness Features

1. **Adaptive Thresholds**: Decision thresholds adjust based on both resource state and opponent behavior
2. **Forgiveness Mechanism**: Don't permanently punish opponents; reassess every few rounds
3. **Emergency Conservation**: Hard override to protect resource sustainability
4. **Probabilistic Decisions**: Avoid complete predictability while maintaining cooperative tendency
5. **Context Sensitivity**: Different behavior in early game (trust-building), mid-game (adaptive), and endgame (strategic)

## Key Advantages

- **Sustainable**: Prioritizes resource conservation when stock is low
- **Adaptive**: Responds to opponent cooperation levels without being exploitable
- **Robust**: Handles various opponent strategies from always-cooperate to always-defect
- **Forgiving**: Doesn't get stuck in permanent retaliation cycles
- **Strategic**: Balances cooperation with self-interest based on game context

This strategy aims to be a "good citizen" of the resource pool while protecting against exploitation, ultimately seeking outcomes that benefit all players through sustainable resource management.
'''

description_COOPERATIVE_77 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but adaptive to opponent behavior. It aims to maintain the resource pool while encouraging cooperation through demonstrable commitment and measured responses to defection.

## Decision Rules

### 1. Cooperation Threshold System
- **Primary Rule**: Cooperate when stock level is above a "sustainability threshold"
- **Sustainability Threshold**: `max(capacity * 0.4, 2n)` 
  - This ensures we don't cooperate when the stock is dangerously low
  - The 0.4 factor allows for some depletion while maintaining regenerative capacity

### 2. Historical Cooperation Assessment
Track the "cooperation rate" of opponents over recent history:
- **Recent Window**: Last `min(3, current_round)` rounds
- **Cooperation Rate**: Fraction of opponent actions that were cooperative in this window
- **Cooperation Benchmark**: 0.5 (majority cooperative behavior)

### 3. Main Decision Logic

```pseudocode
IF current_round == 1:
    RETURN Cooperate  // Start cooperatively to signal intent

IF current_round == final_round:
    IF stock > sustainability_threshold AND historical_cooperation_rate >= 0.3:
        RETURN Cooperate  // Don't abandon cooperation in final round unless severely provoked
    ELSE:
        RETURN Defect     // Protect against final-round defection cascade

IF stock <= sustainability_threshold:
    RETURN Defect  // Emergency conservation mode

IF historical_cooperation_rate >= cooperation_benchmark:
    RETURN Cooperate  // Reward cooperative environment

IF historical_cooperation_rate >= 0.25:
    // Mixed environment - use probabilistic cooperation based on stock health
    stock_health = stock / capacity
    cooperation_probability = stock_health * 0.8
    RETURN Cooperate with probability cooperation_probability

ELSE:
    // Hostile environment - only cooperate if stock is very healthy
    IF stock >= capacity * 0.8:
        RETURN Cooperate
    ELSE:
        RETURN Defect
```

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent
- Establishes reputation and gives others opportunity to reciprocate

### Final Round
- Maintain cooperation unless severely provoked (cooperation rate < 0.3)
- Prevents contributing to "end-game defection cascade"
- Shows commitment to sustainability even without future interactions

### Critical Stock Levels
- When stock ≤ sustainability threshold: Always defect (emergency conservation)
- When stock approaches zero: Defect regardless of opponent behavior
- This prevents total resource collapse

### Early Rounds (rounds 2-3)
- Use more lenient cooperation thresholds since historical data is limited
- Give opponents benefit of doubt while building behavioral patterns

## Adaptive Mechanisms

### 1. Dynamic Response to Opponent Behavior
- **High Cooperation (≥50%)**: Full cooperation above sustainability threshold
- **Medium Cooperation (25-50%)**: Probabilistic cooperation based on stock health
- **Low Cooperation (<25%)**: Conservative cooperation only when stock is very healthy

### 2. Stock-Responsive Cooperation
- Cooperation probability scales with stock health in mixed environments
- Higher stock levels enable more generous cooperation
- Lower stock levels trigger more conservative behavior

### 3. Forgiveness Mechanism
- Strategy doesn't permanently "punish" - reassesses every few rounds
- Allows for redemption if opponents return to cooperative behavior
- Prevents permanent defection spirals

## Robustness Features

### Against Always Defect
- Will eventually recognize pattern and switch to conservation mode
- Still cooperates when stock is very healthy to maintain some regeneration

### Against Always Cooperate
- Takes advantage by cooperating consistently above sustainability threshold
- Maximizes mutual benefit

### Against Tit-for-Tat variants
- Initial cooperation signals friendly intent
- Measured responses prevent escalation cycles

### Against Mixed Strategies
- Probabilistic responses in medium-cooperation environments
- Adapts cooperation level to observed opponent behavior patterns

## Key Strengths

1. **Sustainability Focus**: Never completely abandons the resource
2. **Adaptive**: Responds to actual opponent behavior rather than assumptions
3. **Forgiving**: Allows opponents to return to cooperation
4. **Signal Clarity**: Clear cooperative signals in first round and healthy-stock situations
5. **Emergency Protection**: Has clear rules for resource conservation when critical

This strategy balances cooperative ideals with practical sustainability, making it robust against various opponent types while maintaining the resource pool for mutual long-term benefit.
'''

description_COOPERATIVE_78 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behaviors. It starts cooperatively but has mechanisms to respond to exploitation while maintaining incentives for others to return to cooperation.

## Decision Framework

### 1. Round Classification
- **Early Phase**: Rounds 1 to r/3 (rounded down)
- **Middle Phase**: Rounds (r/3 + 1) to (2r/3)
- **End Phase**: Final r/3 rounds

### 2. Key Metrics Tracking
- **Cooperation Rate**: Percentage of opponents who played C in the last round
- **Stock Health**: Current stock as percentage of capacity
- **Trust Score**: Weighted average of recent opponent cooperation (last 3 rounds, with more recent rounds weighted higher)

### 3. Decision Rules

#### First Round
Always **COOPERATE** to signal cooperative intent and establish trust.

#### Early Phase (Rounds 2 to r/3)
```
IF stock_health > 0.6 AND cooperation_rate >= 0.5:
    COOPERATE
ELSE IF stock_health > 0.3 AND cooperation_rate >= 0.3:
    COOPERATE with 80% probability, DEFECT with 20%
ELSE:
    DEFECT (resource preservation mode)
```

#### Middle Phase (Rounds r/3+1 to 2r/3)
```
Calculate trust_score = 0.5 * last_round_coop_rate + 0.3 * second_last_coop_rate + 0.2 * third_last_coop_rate

IF stock_health > 0.7:
    IF trust_score >= 0.6: COOPERATE
    ELSE IF trust_score >= 0.3: COOPERATE with 70% probability
    ELSE: DEFECT
    
ELSE IF stock_health > 0.4:
    IF trust_score >= 0.7: COOPERATE
    ELSE IF trust_score >= 0.5: COOPERATE with 60% probability
    ELSE: DEFECT
    
ELSE IF stock_health > 0.2:
    IF trust_score >= 0.8: COOPERATE
    ELSE: DEFECT
    
ELSE:
    DEFECT (emergency preservation)
```

#### End Phase (Final r/3 rounds)
```
rounds_remaining = r - current_round + 1

IF stock_health < 0.1:
    DEFECT (resource nearly depleted)
    
ELSE IF rounds_remaining <= 2:
    IF cooperation_rate >= 0.8 AND stock_health > 0.4:
        COOPERATE (reward consistent cooperators)
    ELSE:
        DEFECT (end-game defection)
        
ELSE:
    IF trust_score >= 0.6 AND stock_health > 0.3:
        COOPERATE
    ELSE IF trust_score >= 0.4 AND stock_health > 0.5:
        COOPERATE with 70% probability
    ELSE:
        DEFECT
```

### 4. Special Mechanisms

#### Forgiveness Protocol
If the strategy has been defecting due to low trust/stock, it will attempt cooperation when:
- Stock health improves by >20% from previous round, AND
- At least 40% of opponents cooperated in the last round

#### Emergency Cooperation
If stock falls below 10% of capacity and there are more than 3 rounds remaining:
- Cooperate for one round to signal the critical situation
- Then return to normal decision rules

#### Retaliation Damping
To avoid destructive cycles:
- Never defect for more than 3 consecutive rounds if stock health > 30%
- After 2 consecutive defections, include a 30% chance of cooperation even if conditions suggest defection

## Strategy Rationale

1. **Cooperative Start**: Establishes good faith and allows assessment of opponent types
2. **Adaptive Response**: Adjusts cooperation probability based on both resource state and opponent behavior
3. **Sustainability Focus**: Heavily weights stock health to prevent resource collapse
4. **Trust Building**: Rewards consistent cooperators while being forgiving of occasional defections
5. **Endgame Awareness**: Accounts for end-game incentives while still rewarding long-term cooperators
6. **Anti-Exploitation**: Protects against being taken advantage of while maintaining cooperation incentives

This strategy balances the need to be cooperative and sustainable with the reality that it must be robust against various opponent strategies, from pure cooperators to pure defectors to complex adaptive strategies.
'''

description_COOPERATIVE_79 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and adjusts based on observed patterns, with built-in forgiveness mechanisms to restore cooperation when possible.

## Decision Rules

### 1. Initial Cooperation Phase (First 3 rounds)
- **Always cooperate (C)** in the first 3 rounds
- This establishes cooperative intent and allows observation of opponent patterns
- Exception: If stock falls below critical threshold (stock < n), switch to emergency mode

### 2. Cooperation Assessment System
Track for each opponent player:
- **Cooperation rate**: Percentage of C actions in last 5 rounds
- **Recent defection streak**: Consecutive D actions
- **Stock impact responsibility**: Contribution to stock depletion

Classify opponents as:
- **Cooperators**: Cooperation rate ≥ 70%
- **Mixed players**: Cooperation rate 30-69%
- **Defectors**: Cooperation rate < 30%

### 3. Main Decision Logic

```pseudocode
if round_number <= 3:
    return COOPERATE
    
if stock < n:  // Emergency: stock critically low
    return DEFECT
    
if stock > 0.9 * capacity:  // Stock very healthy
    return COOPERATE
    
cooperator_count = count_cooperators()
defector_count = count_defectors()
mixed_count = count_mixed_players()

// Cooperative conditions
if cooperator_count >= (n-1)/2:  // Majority are cooperators
    return COOPERATE
    
if defector_count <= 1 AND stock > 0.5 * capacity:  // At most one defector, decent stock
    return COOPERATE
    
// Conditional cooperation based on stock health and opponent mix
stock_health = stock / capacity

if stock_health >= 0.7:  // Healthy stock
    if defector_count <= n/3:  // Minority are defectors
        return COOPERATE
    else:
        return DEFECT
        
elif stock_health >= 0.4:  // Moderate stock
    if cooperator_count > defector_count:
        return COOPERATE
    else:
        return DEFECT
        
else:  // Low stock (< 40% capacity)
    if cooperator_count >= 2 * defector_count:  // Strong cooperative majority
        return COOPERATE
    else:
        return DEFECT
```

### 4. Forgiveness and Recovery Mechanisms

**Forgiveness Trigger**: Every 5 rounds, if stock is recovering (stock growth > 0 in last 2 rounds), attempt cooperation regardless of opponent history for one round to test for renewed cooperation.

**Stock Recovery Bonus**: If stock has grown by >20% in the last 3 rounds, increase cooperation threshold by being more lenient with mixed players (treat 25%+ cooperation rate as cooperative).

### 5. End-Game Handling

**Last 3 rounds**: 
- If stock > 0.6 * capacity: Continue normal strategy
- If stock ≤ 0.6 * capacity: Cooperate only if majority of others cooperated in the previous round
- Final round: Cooperate if stock > n (ensures everyone gets something), otherwise defect

### 6. Edge Cases

**Stock Depletion**: If stock ≤ 0, defect until stock recovers to > 0
**Single Opponent (n=2)**: Use tit-for-tat with forgiveness every 3 rounds
**High Capacity Games**: When capacity > 4n, be more cooperative (lower thresholds by 10%)

## Key Features

1. **Adaptive**: Adjusts based on opponent behavior patterns and stock health
2. **Forgiving**: Built-in mechanisms to restore cooperation
3. **Sustainable**: Protects resource when stock is low
4. **Robust**: Handles various opponent mixes and game parameters
5. **Cooperative**: Defaults to cooperation when conditions allow
6. **Strategic**: Punishes persistent defection while rewarding cooperation

This strategy balances the competing demands of:
- Maintaining resource sustainability
- Encouraging cooperation through example
- Protecting against exploitation
- Adapting to diverse opponent behaviors
- Maximizing long-term payoffs for all players
'''

description_COOPERATIVE_80 = '''
# Adaptive Cooperative Strategy: "Stock Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It aims to maintain the common pool resource while protecting itself from excessive exploitation.

## Strategy Overview

### 1. Decision Rules

**Primary Decision Framework:**
- **Cooperate (C)** when the stock can sustain cooperation and opponents show reasonable restraint
- **Defect (D)** when the stock is critically low OR when facing predominantly exploitative opponents

**Specific Decision Logic:**

```pseudocode
Function decide_action(round, stock, history, n, capacity):
    // Phase 1: Critical Stock Protection
    if stock < capacity * 0.3:
        return DEFECT  // Emergency mode - stock is dangerously low
    
    // Phase 2: Opponent Behavior Assessment
    cooperation_rate = calculate_recent_cooperation_rate(history, lookback_rounds=3)
    
    // Phase 3: Adaptive Response
    if cooperation_rate >= 0.6:
        return COOPERATE  // High cooperation - reward with cooperation
    elif cooperation_rate >= 0.4:
        // Mixed behavior - use tit-for-tat with forgiveness
        if last_round_majority_cooperated(history):
            return COOPERATE
        else:
            return DEFECT
    else:
        // Low cooperation - protect against exploitation
        return DEFECT
```

### 2. Edge Case Handling

**First Round:**
- Always COOPERATE to signal cooperative intent and test opponent behavior

**Last Round:**
- If stock > 50% capacity: COOPERATE (maintain reputation for future interactions)
- If stock ≤ 50% capacity: DEFECT (extract remaining value)

**Early Rounds (rounds 2-4):**
- Heavily weight cooperation to establish sustainable patterns
- Only defect if stock drops below 40% of capacity

**Mid-Game Adaptation:**
- Continuously assess opponent patterns
- Implement "generous tit-for-tat" - cooperate more often than opponents deserve to encourage cooperation

### 3. Cooperative Alignment Features

**Stock Sustainability Priority:**
```pseudocode
Function calculate_sustainability_threshold(stock, n, capacity):
    // Ensure stock doesn't fall below regeneration threshold
    min_sustainable = capacity * 0.25
    return max(min_sustainable, stock * 0.6)
```

**Forgiveness Mechanism:**
- After 2 consecutive rounds of opponent cooperation, forgive past defections
- Periodically (every 5 rounds) attempt cooperation even with mostly defecting opponents

**Gradual Response:**
- Don't immediately switch to full defection upon seeing opponent defection
- Use escalating responses: Warning cooperation → Conditional cooperation → Defensive defection

## Detailed Implementation Logic

### Core Algorithm:

```pseudocode
Strategy StockGuardian:
    Initialize:
        cooperation_history = []
        opponent_trust_level = 0.8  // Start optimistic
        emergency_mode = False
    
    For each round:
        // Update trust based on recent history
        if round > 1:
            update_trust_level(last_round_actions)
        
        // Check for emergency conditions
        emergency_mode = (stock < capacity * 0.3) or 
                        (stock < capacity * 0.5 and rounds_remaining < 3)
        
        // Make decision
        if emergency_mode:
            action = DEFECT
        elif round == 1:
            action = COOPERATE
        elif round == final_round and stock > capacity * 0.5:
            action = COOPERATE
        else:
            action = adaptive_decision(stock, history, opponent_trust_level)
        
        return action
```

### Trust Level Updates:

```pseudocode
Function update_trust_level(last_actions):
    recent_cooperation_rate = cooperation_rate_last_3_rounds()
    
    if recent_cooperation_rate > 0.7:
        opponent_trust_level = min(1.0, opponent_trust_level + 0.1)
    elif recent_cooperation_rate < 0.3:
        opponent_trust_level = max(0.0, opponent_trust_level - 0.15)
    else:
        opponent_trust_level = opponent_trust_level * 0.95  // Gradual decay
```

## Key Strategic Advantages

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive Response**: Adjusts to opponent behavior patterns without being exploitable
3. **Forgiveness**: Allows recovery from conflict spirals
4. **Emergency Protection**: Prevents complete resource collapse
5. **Signal Clarity**: Sends clear cooperative signals while maintaining defensive capabilities

This strategy balances cooperation with self-protection, aiming to achieve near-optimal outcomes when facing other cooperative strategies while avoiding severe exploitation by defective strategies.
'''

description_COOPERATIVE_81 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It assumes that rational players will eventually recognize the value of cooperation when the resource is threatened, and uses graduated responses to encourage this recognition.

## Decision Framework

### 1. Stock Health Assessment
```
stock_health_ratio = current_stock / capacity

Critical Zone: stock_health_ratio < 0.3
Warning Zone: 0.3 ≤ stock_health_ratio < 0.6  
Healthy Zone: stock_health_ratio ≥ 0.6
```

### 2. Cooperation Rate Tracking
```
cooperation_rate = (number of C actions by all players in last 3 rounds) / (3 * n)
High Cooperation: cooperation_rate ≥ 0.7
Medium Cooperation: 0.3 ≤ cooperation_rate < 0.7
Low Cooperation: cooperation_rate < 0.3
```

## Decision Rules

### Round 1: Initial Cooperation
**Always play C** - Start with a clear cooperative signal to establish intent.

### Rounds 2 to r-1: Adaptive Response

**Primary Rule - Stock Protection:**
- If in **Critical Zone**: Always play C (resource preservation overrides all else)

**Secondary Rule - Adaptive Cooperation:**
- If in **Healthy Zone** with **High Cooperation**: Play C (reward collective cooperation)
- If in **Healthy Zone** with **Medium Cooperation**: Play C with 80% probability, D with 20% probability (mostly cooperate but occasionally test)
- If in **Healthy Zone** with **Low Cooperation**: Play C with 60% probability, D with 40% probability (reduce cooperation but maintain some)

**Tertiary Rule - Warning Response:**
- If in **Warning Zone** with **High Cooperation**: Play C (trust others to recover)
- If in **Warning Zone** with **Medium/Low Cooperation**: Always play C (prioritize recovery)

### Round r (Final Round): Conditional Cooperation
- If **stock_health_ratio ≥ 0.4**: Play C (leave the resource in decent condition)
- If **stock_health_ratio < 0.4**: Play D (resource is already severely damaged)

## Special Conditions

### Streak Detection
If all players (including self) played C for the last 2+ consecutive rounds:
- Continue playing C regardless of other conditions (reward sustained cooperation)

### Recovery Incentive
If stock has grown in the last round (indicating some level of cooperation):
- Increase cooperation probability by 20% for next round (encourage positive momentum)

### Emergency Override
If projected stock after this round would fall below 10% of capacity:
- Always play C (emergency conservation mode)

## Robustness Features

1. **Gradual Response**: Strategy doesn't immediately punish defection but gradually reduces cooperation, allowing for recovery of cooperative norms.

2. **Context Sensitivity**: Decisions depend heavily on resource state, preventing blind cooperation when the resource is critically low.

3. **Forgiveness**: Recent cooperation history matters more than distant history, allowing relationships to recover.

4. **Sustainability Focus**: Even when defecting, the strategy tends toward actions that preserve long-term viability.

5. **End-game Responsibility**: Maintains cooperation near game end unless resource is already severely damaged.

## Implementation Pseudocode

```
function decide_action(round, stock, capacity, n, history):
    stock_health = stock / capacity
    
    if round == 1:
        return C
    
    cooperation_rate = calculate_cooperation_rate(history, last_3_rounds=True)
    
    # Emergency conservation
    if stock_health < 0.1:
        return C
    
    # Critical zone - always cooperate
    if stock_health < 0.3:
        return C
    
    # Check for cooperative streaks
    if all_cooperated_last_n_rounds(history, n=2):
        return C
    
    # Final round logic
    if round == final_round:
        return C if stock_health >= 0.4 else D
    
    # Recovery bonus
    cooperation_bonus = 0.2 if stock_grew_last_round(history) else 0
    
    # Main decision logic
    if stock_health >= 0.6:  # Healthy zone
        if cooperation_rate >= 0.7:
            return C
        elif cooperation_rate >= 0.3:
            return C if random() < (0.8 + cooperation_bonus) else D
        else:
            return C if random() < (0.6 + cooperation_bonus) else D
    
    else:  # Warning zone (0.3 <= stock_health < 0.6)
        if cooperation_rate >= 0.7:
            return C
        else:
            return C  # Always cooperate in warning zone with low cooperation
```

This strategy balances cooperative intent with adaptive realism, providing a robust approach that can handle various opponent strategies while maintaining focus on the collective good.
'''

description_COOPERATIVE_82 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust to exploitation. It balances cooperation with necessary defensive measures to prevent tragedy of the commons scenarios.

## Decision Framework

### 1. Initial Assessment (Round 1)
- **Always cooperate** in the first round to signal cooperative intent
- Use this round to observe opponent tendencies without any historical bias

### 2. Core Decision Rules

#### A. Stock Health Assessment
```
stock_health_ratio = current_stock / capacity

If stock_health_ratio < 0.3:
    CRISIS_MODE = True
Else if stock_health_ratio < 0.6:
    CAUTION_MODE = True
Else:
    NORMAL_MODE = True
```

#### B. Opponent Behavior Analysis (from round 2 onwards)
For each opponent, track:
- **Cooperation rate**: % of times they played C in last 3 rounds
- **Recent trend**: Are they becoming more or less cooperative?
- **Crisis response**: How did they behave when stock was low?

```
recent_cooperation_rate = (C_plays_in_last_3_rounds) / min(3, rounds_played-1)
overall_cooperation_rate = total_C_plays / (rounds_played-1)
```

#### C. Decision Logic

**CRISIS_MODE (stock < 30% of capacity):**
- If >75% of players cooperated in the last round: **Cooperate**
- If majority defected in last round AND stock declining: **Defect** (survival mode)
- Otherwise: **Cooperate** (try to rebuild trust)

**CAUTION_MODE (stock 30-60% of capacity):**
- If my cooperation rate ≥ average opponent cooperation rate: **Cooperate**
- If I'm being significantly exploited (my coop rate > opponents' by >20%): **Defect** (one punishment round)
- If stock has been growing for 2+ consecutive rounds: **Cooperate**
- Otherwise: **Cooperate** with 80% probability, **Defect** with 20%

**NORMAL_MODE (stock > 60% of capacity):**
- Default to **Cooperate**
- **Defect** only if >50% of opponents defected in the previous round (immediate reciprocation)

### 3. Special Cases

#### Last Round Handling
- If this is the final round AND stock > 50% of capacity: **Cooperate** (maintain reputation for future interactions)
- If final round AND stock ≤ 50%: Use normal decision rules (don't assume others will defect)

#### Forgiveness Mechanism
- After punishing defection with a defection, return to cooperation if:
  - Stock health improves, OR
  - Opponents show renewed cooperation (>60% cooperation rate in last round)

#### Endgame Strategy (last 20% of rounds)
- Increase cooperation threshold slightly to account for possible "last round effects"
- Be more forgiving of single defections
- Focus on stock preservation for remaining rounds

### 4. Adaptive Elements

#### Learning Component
Track effectiveness of your decisions:
- If consistent cooperation leads to stock growth: Continue cooperative bias
- If cooperation is consistently exploited: Become more selective about cooperation triggers

#### Pattern Recognition
- Detect if opponents are using obvious strategies (always defect, tit-for-tat, etc.)
- Adapt responses accordingly:
  - Against always-defectors: Mirror their behavior when stock is healthy, cooperate when stock is critical
  - Against tit-for-tat players: Maintain consistent cooperation
  - Against conditional cooperators: Match their conditions

## Key Principles

1. **Stock Preservation**: Never let immediate gains compromise long-term sustainability
2. **Graduated Response**: Don't escalate conflicts unnecessarily, but don't be a pushover
3. **Trust Building**: Lead by example in cooperation, but verify others' commitment
4. **Crisis Cooperation**: When the commons is truly threatened, prioritize collective survival
5. **Proportional Reciprocation**: Respond to cooperation with cooperation, defection with measured punishment

## Robustness Features

- **Exploitation Protection**: Won't be consistently taken advantage of
- **Collapse Prevention**: Switches to preservation mode when stock is critically low
- **Noise Tolerance**: Doesn't overreact to single instances of defection
- **Diverse Opponent Handling**: Adapts to different opponent strategy types
- **Endgame Stability**: Maintains cooperative stance even as game concludes

This strategy balances the cooperative goal of sustaining the commons with the practical need to remain viable against various opponent behaviors, ensuring both individual survival and collective welfare.
'''

description_COOPERATIVE_83 = '''
## Adaptive Sustainability Strategy (ASS)

### Core Philosophy
This strategy balances immediate cooperation with long-term resource sustainability, adapting based on observed opponent behavior while maintaining a fundamentally cooperative stance.

### Decision Framework

#### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the stock drops below a critical threshold

#### 2. Adaptive Response System
The strategy uses a **Cooperation Propensity Score (CPS)** that ranges from 0.0 to 1.0:

```
CPS = base_cooperation × stock_health × opponent_reciprocity × endgame_factor
```

**Components:**
- `base_cooperation = 0.8` (fundamental cooperative bias)
- `stock_health = min(1.0, current_stock / (0.6 × capacity))` 
- `opponent_reciprocity = cooperative_actions / total_opponent_actions_observed`
- `endgame_factor = 1.0 + 0.3 × (remaining_rounds / total_rounds)` if remaining_rounds ≤ 3

#### 3. Decision Rule
- **Cooperate** if CPS ≥ 0.6
- **Defect** if CPS < 0.6

### Specific Mechanisms

#### Stock Health Monitoring
- If `current_stock < 0.3 × capacity`: Increase defection probability to ensure personal survival
- If `current_stock > 0.8 × capacity`: Strong bias toward cooperation to maintain sustainability
- If stock approaches zero (< 5% of capacity): Emergency defection to salvage remaining resources

#### Opponent Behavior Tracking
Track each opponent's cooperation rate over a sliding window of the last 5 rounds:
- If opponent cooperation rate > 70%: Treat as cooperator, reciprocate strongly
- If opponent cooperation rate < 30%: Treat as defector, reduce cooperation but don't abandon entirely
- If opponent shows recent improvement (last 2 rounds cooperative): Give benefit of doubt

#### Forgiveness Mechanism
- After 3 consecutive rounds of mutual defection with any subset of players, attempt one round of cooperation to test if cooperation can be restored
- If stock begins recovering (shows positive growth), gradually increase cooperation

#### Endgame Handling
**Last 3 rounds:**
- Increase cooperation slightly (endgame_factor) to maximize final harvests from healthy stock
- If stock is critically low (< 20% capacity), prioritize survival with strategic defection

**Final round:**
- If stock > 30% capacity: Cooperate to leave positive legacy
- If stock ≤ 30% capacity: Defect to maximize final payoff

### Edge Cases

#### All Opponents Always Defect
- Cooperate for first 2 rounds to confirm pattern
- Then match their defection rate but occasionally (every 4-5 rounds) test with cooperation
- Focus on stock preservation over punishment

#### Mixed Opponent Behaviors
- Treat each opponent independently in reciprocity calculations
- Maintain cooperation with cooperative opponents even if others defect
- Use majority behavior as tiebreaker when CPS is near 0.6 threshold

#### Stock Depletion Crisis
If stock drops below 10% of capacity:
- Switch to "survival mode": cooperate only if ≥75% of opponents cooperated in previous round
- Otherwise defect to ensure non-zero payoff

### Pseudocode Summary

```
function decide_action(round, stock, capacity, history, opponents_last_actions):
    if round == 1:
        return COOPERATE
    
    stock_health = min(1.0, stock / (0.6 * capacity))
    
    if stock < 0.1 * capacity:  # Crisis mode
        if count_cooperators(opponents_last_actions) >= 0.75 * len(opponents):
            return COOPERATE
        else:
            return DEFECT
    
    opponent_reciprocity = calculate_cooperation_rate(history)
    remaining_rounds = total_rounds - round + 1
    
    if remaining_rounds <= 3:
        endgame_factor = 1.0 + 0.3 * (remaining_rounds / total_rounds)
    else:
        endgame_factor = 1.0
    
    CPS = 0.8 * stock_health * opponent_reciprocity * endgame_factor
    
    # Forgiveness test
    if consecutive_mutual_defection_count >= 3 and round % 5 == 0:
        return COOPERATE
    
    return COOPERATE if CPS >= 0.6 else DEFECT
```

This strategy maintains a cooperative foundation while intelligently adapting to opponent behavior and resource constraints, maximizing both individual and collective long-term success.
'''

description_COOPERATIVE_84 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy aims to maintain long-term resource sustainability while being responsive to group cooperation levels. It balances cooperative behavior with adaptive responses to prevent exploitation while encouraging collective cooperation.

## Strategy Overview

### 1. Decision Rules

**Primary Cooperation Condition:**
- **Cooperate (C)** when the current stock level is at or above a "sustainability threshold"
- **Sustainability Threshold = capacity × 0.6**

**Adaptive Response System:**
- Track the "cooperation rate" from previous rounds = (number of C actions) / (total actions)
- Adjust behavior based on recent cooperation trends

**Core Decision Logic:**
```
IF current_stock >= sustainability_threshold:
    IF cooperation_rate >= 0.5:
        Play C (maintain cooperation)
    ELSE:
        Apply "Graduated Response" (see below)
ELSE:
    Apply "Crisis Mode" (see below)
```

### 2. Graduated Response Mechanism

When cooperation rate < 0.5 but stock is still above sustainability threshold:

```
IF cooperation_rate >= 0.3:
    Play C with probability 0.8 (mostly cooperate, slight punishment)
ELSE IF cooperation_rate >= 0.1:
    Play C with probability 0.6 (conditional cooperation)
ELSE:
    Play C with probability 0.3 (defensive defection)
```

### 3. Crisis Mode

When stock < sustainability_threshold:

```
IF stock < capacity × 0.3:
    Always play C (emergency conservation)
ELSE:
    IF cooperation_rate >= 0.4:
        Play C (help recovery)
    ELSE:
        Play C with probability 0.7 (cautious recovery)
```

### 4. Edge Cases

**First Round:**
- Always play C (establish cooperative intent)

**Last Round:**
- IF stock >= sustainability_threshold AND cooperation_rate >= 0.4:
  - Play C (maintain cooperative reputation)
- ELSE:
  - Play D (no future consequences)

**Stock Near Zero (< capacity × 0.1):**
- Always play C regardless of others' behavior (resource preservation)

**Perfect Cooperation Detected:**
- If cooperation_rate = 1.0 for last 3+ rounds, continue playing C

### 5. Cooperation Rate Calculation

Use a weighted average emphasizing recent rounds:
```
recent_weight = 0.6
older_weight = 0.4

cooperation_rate = (recent_weight × recent_cooperation + older_weight × historical_cooperation)

Where:
- recent_cooperation = cooperation rate in last max(2, r/4) rounds
- historical_cooperation = cooperation rate in all previous rounds
```

### 6. Robustness Features

**Anti-Exploitation Protection:**
- If repeatedly exploited (cooperation_rate < 0.2 for 3+ consecutive rounds), temporarily reduce cooperation probability by 0.2

**Recovery Incentive:**
- If cooperation rate improves significantly (increase > 0.3 from previous measurement), immediately return to full cooperation

**Noise Tolerance:**
- Don't overreact to single-round defections; require patterns of 2+ rounds

### 7. Strategic Rationale

1. **Sustainability Focus:** By maintaining a sustainability threshold, the strategy prioritizes long-term resource health over short-term gains

2. **Graduated Response:** Rather than harsh tit-for-tat, uses probabilistic responses that maintain some cooperation even when others defect

3. **Crisis Management:** Recognizes that when resources are critically low, cooperation becomes essential regardless of others' behavior

4. **Adaptive Learning:** Continuously adjusts based on group behavior patterns rather than fixed rules

5. **Forgiveness:** Quickly returns to cooperation when others improve, encouraging positive spirals

This strategy is designed to:
- Lead by example through initial cooperation
- Maintain resource sustainability as the primary goal
- Adapt to various opponent strategies without being exploitable
- Encourage group cooperation through conditional but forgiving responses
- Handle edge cases gracefully while maintaining cooperative principles

The strategy balances the cooperative imperative with practical considerations about opponent behavior, making it robust across diverse strategic environments while maintaining its fundamentally cooperative nature.
'''

description_COOPERATIVE_85 = '''
# Adaptive Reciprocal Conservation Strategy (ARCS)

## Core Philosophy
This strategy balances immediate cooperation with long-term sustainability by adapting to opponent behavior while maintaining a strong cooperative bias. It treats the common pool as a shared asset that must be preserved for mutual benefit.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the stock drops below a critical threshold
- **Critical threshold**: If stock falls below `capacity * 0.4`, switch to conditional cooperation

### 2. Adaptive Response System (Round 4 onwards)
The strategy uses a **cooperation ratio** to track opponents' behavior:
```
cooperation_ratio = (total_C_actions_by_others) / (total_actions_by_others)
```

**Decision Rule:**
- If `cooperation_ratio ≥ 0.6`: **Cooperate** (others are mostly cooperative)
- If `0.3 ≤ cooperation_ratio < 0.6`: Use **Stock-Based Decision**
- If `cooperation_ratio < 0.3`: Use **Defensive Mode**

### 3. Stock-Based Decision (Mixed Cooperation Environment)
When cooperation is moderate, base decisions on resource sustainability:
```
sustainability_index = current_stock / capacity

If sustainability_index ≥ 0.5:
    Cooperate
Else if sustainability_index ≥ 0.2:
    Cooperate with probability = sustainability_index
Else:
    Defect (resource critically low)
```

### 4. Defensive Mode (Low Cooperation Environment)
When most players are defecting, protect against exploitation while preserving some cooperation:
- **Defect** if more than 70% of players defected in the previous round
- **Cooperate** otherwise, but only if stock > `capacity * 0.15`
- If stock ≤ `capacity * 0.15`: Always defect (survival mode)

### 5. Endgame Adjustment (Final 20% of rounds)
```
If current_round > 0.8 * total_rounds:
    If stock > capacity * 0.3 AND cooperation_ratio > 0.4:
        Cooperate (preserve resources for mutual benefit)
    Else:
        Use normal decision rules but reduce cooperation threshold by 0.1
```

## Special Cases and Edge Handling

### First Round
- Always cooperate to establish cooperative intent and gather information about opponents

### Stock Depletion Crisis
- If stock falls below `capacity * 0.1`: Enter **Crisis Mode**
  - Cooperate only if ALL other players cooperated in the previous round
  - Otherwise defect to prevent total collapse

### Perfect Cooperation Detection
- If all players have cooperated for 3+ consecutive rounds: Continue cooperating
- This maintains optimal sustainable equilibrium

### Recovery Incentive
- After stock recovers to > `capacity * 0.6`: Reset cooperation ratio calculation to give players a "fresh start"
- This encourages return to cooperation after crisis periods

## Robustness Features

1. **Forgiveness**: The strategy doesn't permanently punish defectors - it continuously reassesses cooperation levels
2. **Sustainability Focus**: Always considers long-term resource health
3. **Adaptive Thresholds**: Cooperation requirements adjust based on resource availability
4. **Crisis Management**: Has specific protocols for low-stock situations
5. **Anti-Exploitation**: Protects against persistent defectors while remaining open to cooperation

## Expected Behavior
- **Against Cooperators**: Maintains mutual cooperation and sustainable resource use
- **Against Defectors**: Reduces exploitation while preserving some cooperative opportunities
- **Mixed Groups**: Adapts cooperation level to match group dynamics while preventing resource collapse
- **Endgame**: Balances final-round incentives with sustainable resource management

This strategy prioritizes the health of the common pool while being robust enough to handle various opponent strategies, from pure cooperation to aggressive defection.
'''

description_COOPERATIVE_86 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptable to opponent behavior. It starts cooperative and dynamically adjusts based on stock health and opponent patterns, always erring toward cooperation when uncertain.

## Decision Rules

### Primary Decision Framework
The strategy operates on three key principles:
1. **Stock Protection**: Prioritize maintaining stock above critical thresholds
2. **Reciprocal Cooperation**: Reward cooperative behavior from others
3. **Forgiveness**: Give opponents opportunities to return to cooperation

### Detailed Decision Logic

**Round 1: Always Cooperate**
- Start with cooperation to signal cooperative intent
- Establish baseline for measuring others' behavior

**Subsequent Rounds:**

1. **Critical Stock Protection** (Override all other rules)
   ```
   IF stock < capacity * 0.3:
       Always COOPERATE
   ```
   When stock is dangerously low, always cooperate to prevent collapse.

2. **High Cooperation Environment**
   ```
   IF (cooperators_last_round / n) >= 0.7:
       COOPERATE
   ```
   When most players cooperated last round, continue cooperating.

3. **Reciprocal Response with Forgiveness**
   ```
   cooperation_rate = count_cooperators_last_3_rounds / (3 * n)
   
   IF cooperation_rate >= 0.5:
       COOPERATE
   ELSE IF cooperation_rate >= 0.3:
       COOPERATE with probability 0.7
   ELSE:
       COOPERATE with probability 0.3
   ```
   Base cooperation likelihood on recent group cooperation patterns.

4. **Stock Recovery Incentive**
   ```
   IF stock < previous_stock AND cooperation_rate < 0.5:
       COOPERATE (attempt to rebuild trust and stock)
   ```
   When stock is declining and cooperation is low, try to restart cooperation.

5. **Last Round Consideration**
   ```
   IF current_round == r:
       IF stock >= capacity * 0.6:
           COOPERATE (maintain good standing)
       ELSE:
           Follow normal rules
   ```
   In the final round, cooperate if stock is healthy to end on a positive note.

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent and gather information about opponents

### Early Rounds (2-3)
- Maintain high cooperation threshold (cooperate unless >80% defected last round)
- Focus on establishing cooperative norms

### Middle Rounds
- Apply full adaptive logic
- Monitor stock trends and adjust cooperation probability accordingly

### Final Rounds (last 10% of game)
- Increase cooperation slightly to maintain relationships
- Don't abandon cooperation entirely even if others defect (maintain integrity)

### Stock Crisis (stock < 30% capacity)
- Override all other considerations and always cooperate
- Send strong signal that preservation is critical

## Robustness Features

### Against Always Defect
- Will reduce cooperation frequency but never abandon it entirely
- Maintains minimum 30% cooperation rate even against pure defectors
- Protects stock through crisis-mode cooperation

### Against Conditional Cooperators
- Quickly recognizes and reciprocates cooperative patterns
- High cooperation rates when others are cooperative

### Against Mixed Strategies
- Adapts cooperation probability based on observed group behavior
- Uses 3-round rolling window to avoid over-reaction to single-round anomalies

### Against Exploit-then-Cooperate
- Forgiveness mechanism allows recovery from early defection
- Stock protection prevents total exploitation

## Key Adaptive Elements

1. **Dynamic Cooperation Probability**: Adjusts based on recent group behavior rather than rigid rules

2. **Multi-timeframe Analysis**: Uses 3-round rolling window to balance responsiveness with stability

3. **Stock-sensitive Thresholds**: Increases cooperation when stock health is poor

4. **Probabilistic Responses**: Avoids completely predictable patterns while maintaining cooperative bias

## Expected Tournament Performance

This strategy should perform well against:
- Other cooperative strategies (high mutual cooperation)
- Tit-for-tat variants (quick reciprocal cooperation)
- Mixed populations (adapts cooperation level appropriately)

The strategy maintains sustainability focus while being responsive enough to avoid exploitation, making it robust across diverse opponent populations while staying true to cooperative principles.
'''

description_COOPERATIVE_87 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy operates as a "sustainable steward" that prioritizes long-term resource preservation while adapting to opponent behavior. It aims to maintain cooperation when possible but protects against exploitation through measured retaliation.

## Decision Framework

### 1. Primary Decision Rules

**Round 1 (Initialization):**
- Always COOPERATE to signal cooperative intent
- Establish baseline for opponent behavior assessment

**Subsequent Rounds (2 to r):**
Use a three-tier decision system based on:
1. **Stock Health Assessment**
2. **Opponent Cooperation Level**
3. **Game Phase Considerations**

### 2. Stock Health Assessment

Calculate stock sustainability ratio: `health_ratio = current_stock / capacity`

- **Healthy Stock** (health_ratio ≥ 0.7): Stock can sustain some defection
- **Moderate Stock** (0.3 ≤ health_ratio < 0.7): Stock needs careful management
- **Critical Stock** (health_ratio < 0.3): Stock requires immediate protection

### 3. Opponent Cooperation Assessment

Track cooperation rate over last 3 rounds (or all available rounds if fewer):
`recent_coop_rate = (cooperators in last 3 rounds) / (total players × 3)`

- **High Cooperation** (recent_coop_rate ≥ 0.7): Most players cooperating
- **Mixed Cooperation** (0.3 ≤ recent_coop_rate < 0.7): Balanced behavior
- **Low Cooperation** (recent_coop_rate < 0.3): Mostly defection

### 4. Game Phase Considerations

- **Early Game** (rounds 1 to r/3): Focus on establishing cooperation
- **Mid Game** (rounds r/3+1 to 2r/3): Adaptive response phase
- **End Game** (rounds 2r/3+1 to r): Prevent end-game defection cascade

### 5. Main Decision Logic

```pseudocode
function decide_action(current_round, stock, capacity, history, n, r):
    health_ratio = stock / capacity
    recent_coop_rate = calculate_recent_cooperation(history, 3)
    game_phase = get_game_phase(current_round, r)
    
    // Critical stock protection
    if health_ratio < 0.3:
        if recent_coop_rate < 0.5:
            return DEFECT  // Grab resources before depletion
        else:
            return COOPERATE  // Trust others to preserve
    
    // Healthy stock - encourage cooperation
    if health_ratio >= 0.7:
        if game_phase == "early":
            return COOPERATE
        elif recent_coop_rate >= 0.6:
            return COOPERATE
        else:
            return tit_for_tat_response(history)
    
    // Moderate stock - careful adaptation
    if game_phase == "early":
        return COOPERATE
    elif game_phase == "end" and current_round == r:
        // Last round: cooperate if others likely to cooperate
        return COOPERATE if recent_coop_rate >= 0.5 else DEFECT
    else:
        return adaptive_response(recent_coop_rate, history)
```

### 6. Adaptive Response Function

```pseudocode
function adaptive_response(recent_coop_rate, history):
    if recent_coop_rate >= 0.7:
        return COOPERATE  // Reward high cooperation
    elif recent_coop_rate >= 0.4:
        // Mixed cooperation: use generous tit-for-tat
        last_round_defectors = count_defectors_last_round(history)
        if last_round_defectors <= n/2:
            return COOPERATE
        else:
            return DEFECT
    else:
        // Low cooperation: defensive defection
        return DEFECT
```

### 7. Edge Case Handling

**First Round:**
- Always COOPERATE to signal intent and gather information

**Last Round:**
- COOPERATE if recent_coop_rate ≥ 0.5 (trust in mutual cooperation)
- DEFECT if recent_coop_rate < 0.5 (prevent being exploited)

**Stock Depletion (stock ≤ n):**
- If stock is critically low but can sustain one more round of partial cooperation, COOPERATE
- If stock cannot sustain any meaningful consumption, DEFECT

**High Variance Opponents:**
- If opponents alternate between all-cooperate and all-defect rounds, match the majority strategy from the previous round

### 8. Key Features

**Cooperative Emphasis:**
- Default to cooperation in early rounds
- Reward cooperative behavior immediately
- Give opponents benefit of doubt initially

**Adaptive Protection:**
- Monitor resource health continuously
- Escalate defensive measures gradually
- Protect against systematic exploitation

**Forgiveness Mechanism:**
- Return to cooperation if opponents demonstrate renewed cooperation
- Don't hold grudges beyond 3-round windows
- Allow for recovery after conflicts

**Sustainability Focus:**
- Never ignore stock health for short-term gains
- Balance immediate payoffs with long-term resource preservation
- Encourage collective stewardship through example

This strategy aims to foster cooperation while protecting against exploitation, maintaining resource sustainability, and adapting to diverse opponent strategies in a tournament setting.
'''

description_COOPERATIVE_88 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being adaptive to opponent behaviors. It starts cooperative but can adjust to protect both the resource and itself from exploitation, always seeking to return to cooperative states when possible.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always play C** for the first 3 rounds (or first 25% of total rounds if r < 12)
- This establishes cooperative intent and allows observation of opponent patterns
- Exception: If stock drops below critical threshold (stock < n), switch to emergency mode

### 2. Main Strategy (Middle Rounds)
The strategy uses a **Stock-Weighted Cooperation Index** with adaptive thresholds:

```pseudocode
cooperation_threshold = base_threshold + stock_bonus + history_adjustment

base_threshold = 0.6  // Bias toward cooperation
stock_bonus = (current_stock / capacity) * 0.3  // Higher stock = more cooperative
history_adjustment = calculate_trust_level()  // Based on opponent behavior

if cooperation_index >= cooperation_threshold:
    play C
else:
    play D
```

### 3. Trust Level Calculation
Track opponent cooperation over a sliding window of last min(5, r/3) rounds:

```pseudocode
recent_cooperation_rate = (cooperators_in_recent_rounds) / (total_players * window_size)
long_term_cooperation_rate = (total_cooperators_observed) / (total_observations)

trust_level = 0.7 * recent_cooperation_rate + 0.3 * long_term_cooperation_rate
history_adjustment = (trust_level - 0.5) * 0.4  // Range: -0.2 to +0.2
```

### 4. Critical Thresholds
- **Emergency Mode**: If stock < n (one round of all-defect would deplete resource)
  - Play C regardless of other factors to preserve resource
- **Abundance Mode**: If stock > 0.9 * capacity
  - Increase cooperation threshold by 0.1 (more forgiving of defection)

### 5. Endgame Strategy (Final 20% of rounds)
- **Gradual Transition**: Slowly decrease cooperation threshold by 0.05 per round
- **Final Round**: Always play D (no future consequences)
- **Exception**: If stock is critically low (< n/2), continue playing C even in final rounds

## Edge Case Handling

### First Round
- Always play C to signal cooperative intent
- No history exists, so rely purely on stock level and base cooperation bias

### Stock Depletion Scenarios
- If stock reaches 0: Play C (only option for resource recovery)
- If stock < threshold for meaningful growth: Play C to allow regeneration
- Track "rescue attempts" - if multiple C plays don't restore stock, temporarily switch to D

### Opponent Behavior Patterns
1. **All-Defectors Detected**: If >80% of opponents consistently defect for 3+ rounds:
   - Reduce cooperation threshold by 0.3
   - Implement "tit-for-tat with forgiveness" - occasionally play C to test if opponents change

2. **Mixed Strategies**: Maintain adaptive thresholds based on trust calculations

3. **All-Cooperators Detected**: If >80% consistently cooperate:
   - Increase cooperation threshold by 0.2
   - Maintain high cooperation to preserve the cooperative equilibrium

## Robustness Features

### 1. Anti-Exploitation Mechanisms
- **Reciprocity Tracking**: Monitor if cooperation is being reciprocated
- **Punishment Phase**: If heavily exploited (trust_level < 0.2 for 3+ rounds), temporarily reduce cooperation for 2 rounds, then gradually restore

### 2. Resource Protection
- **Sustainability Override**: Never allow actions that would drive stock below recovery threshold
- **Growth Maximization**: When stock is moderate (20-80% of capacity), prioritize actions that maintain sustainable growth rates

### 3. Adaptive Learning
- **Opponent Classification**: Identify whether opponents appear to be:
  - Consistent cooperators
  - Consistent defectors  
  - Reciprocators
  - Random/unpredictable
- **Strategy Adjustment**: Modify cooperation thresholds based on opponent mix

## Key Advantages

1. **Starts Cooperative**: Establishes good faith and tests for mutual cooperation
2. **Protects Resource**: Prevents tragedy of commons through sustainability focus
3. **Adapts to Opponents**: Adjusts cooperation based on observed behavior patterns
4. **Robust to Exploitation**: Has mechanisms to detect and respond to free-riding
5. **Encourages Cooperation**: Rewards cooperative opponents with continued cooperation
6. **Handles Endgame**: Recognizes changed incentives in final rounds while maintaining resource focus

This strategy balances the cooperative ideal with practical considerations of opponent diversity and resource sustainability, making it robust across various tournament scenarios.
'''

description_COOPERATIVE_89 = '''
# Adaptive Cooperative Strategy: "Resilient Guardian"

## Core Philosophy
This strategy balances sustainable cooperation with adaptive responses to preserve the common resource while maximizing long-term collective welfare. It prioritizes resource sustainability but adapts when cooperation isn't reciprocated.

## Decision Framework

### Phase 1: Establishment (First 20% of rounds)
**Primary Goal:** Establish cooperative baseline and assess opponent cooperation levels

1. **Round 1:** Always COOPERATE (signal cooperative intent)
2. **Rounds 2 to ⌊0.2r⌋:** 
   - COOPERATE if stock level ≥ 75% of capacity
   - COOPERATE if majority of players cooperated in previous round
   - DEFECT if stock < 50% of capacity (emergency preservation)
   - Otherwise COOPERATE (benefit of doubt)

### Phase 2: Adaptive Cooperation (Middle 60% of rounds)
**Primary Goal:** Maintain cooperation while adapting to observed behavior patterns

**Cooperation Threshold Calculation:**
```
cooperation_rate = (total_C_actions) / (total_actions_so_far)
sustainable_threshold = max(0.4, min(0.7, cooperation_rate))
```

**Decision Rules:**
1. **Stock Health Check:**
   - If stock < 30% capacity: DEFECT (crisis mode)
   - If stock < 50% capacity AND declining trend: DEFECT

2. **Cooperation Assessment:**
   - If cooperation_rate ≥ sustainable_threshold: COOPERATE
   - If cooperation_rate < 0.3: DEFECT (protect against exploitation)

3. **Adaptive Response:**
   - If defection_rate increased by >20% in last 3 rounds: DEFECT next round
   - If stock recovered to >70% capacity after crisis: Return to COOPERATE

### Phase 3: Endgame Strategy (Final 20% of rounds)
**Primary Goal:** Balance final extraction with maintaining some cooperation

**Special Considerations:**
- **Final 3 rounds:** Higher defection tolerance due to limited future impact
- **Last round:** DEFECT (no future consequences)

**Decision Rules:**
1. **Rounds ⌊0.8r⌋ to r-3:**
   - Continue Phase 2 logic but reduce sustainable_threshold by 0.1
   - If stock > 80% capacity: COOPERATE (plenty available)

2. **Final 2 rounds (r-1, r-2):**
   - COOPERATE if stock > 60% capacity AND cooperation_rate > 0.4
   - Otherwise DEFECT

3. **Final round (r):**
   - Always DEFECT (terminal round optimization)

## Edge Case Handling

### Stock Depletion Emergency
- If stock drops below 20% capacity at any point:
  - DEFECT until stock recovers to >40% capacity
  - Override normal cooperation logic

### High Cooperation Environment
- If cooperation_rate consistently >80% for 5+ consecutive rounds:
  - Always COOPERATE unless stock <30% capacity
  - Reward and maintain high cooperation

### Chaotic Environment
- If cooperation_rate varies by >30% across recent 5-round windows:
  - Use more conservative threshold (reduce sustainable_threshold by 0.15)
  - Prioritize stock preservation

## Pseudocode Summary

```
function decide_action(round, stock, capacity, history, n, r):
    cooperation_rate = calculate_cooperation_rate(history)
    stock_percentage = stock / capacity
    phase = determine_phase(round, r)
    
    // Emergency override
    if stock_percentage < 0.2:
        return DEFECT
    
    if phase == "establishment":
        if round == 1:
            return COOPERATE
        if stock_percentage >= 0.75 or majority_cooperated_last_round(history):
            return COOPERATE
        if stock_percentage < 0.5:
            return DEFECT
        return COOPERATE
    
    elif phase == "adaptive":
        sustainable_threshold = max(0.4, min(0.7, cooperation_rate))
        
        if stock_percentage < 0.3 or (stock_percentage < 0.5 and declining_trend(history)):
            return DEFECT
        
        if cooperation_rate >= sustainable_threshold:
            return COOPERATE
        elif cooperation_rate < 0.3:
            return DEFECT
        else:
            return adapt_to_recent_behavior(history)
    
    else: // endgame
        if round == r:
            return DEFECT
        return modified_adaptive_logic()
```

## Key Strengths

1. **Sustainability Focus:** Prioritizes long-term resource health over short-term gains
2. **Adaptive Learning:** Adjusts cooperation threshold based on observed behavior
3. **Crisis Management:** Clear emergency protocols when stock is critically low
4. **Exploitation Protection:** Reduces cooperation when facing persistent defectors
5. **Endgame Awareness:** Appropriately adjusts strategy as game concludes

This strategy aims to foster cooperative equilibria while protecting against exploitation and resource collapse, making it robust across diverse opponent strategies and game parameters.
'''

description_COOPERATIVE_90 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intentions, adapting to opponent behavior patterns to maximize collective welfare without being exploited.

## Decision Rules

### 1. Cooperation Threshold System
- **Base Cooperation**: Always start cooperative and maintain cooperation when stock health is good
- **Stock Health Metric**: Define health as `current_stock / capacity`
  - Healthy: health ≥ 0.7 → Default to cooperation
  - Moderate: 0.3 ≤ health < 0.7 → Conditional cooperation
  - Critical: health < 0.3 → Emergency preservation mode

### 2. Adaptive Response Mechanism
Track each opponent's cooperation rate over a sliding window of the last 3 rounds:
- **Reciprocal Cooperation**: If opponent's recent cooperation rate ≥ 60%, cooperate
- **Cautious Cooperation**: If 30% ≤ cooperation rate < 60%, cooperate only if stock health ≥ 0.5
- **Defensive Mode**: If cooperation rate < 30%, defect unless stock health ≥ 0.8

### 3. Future Value Calculation
Before each decision, estimate the value of cooperation vs defection:
- **Cooperation Value**: Immediate payoff + estimated future value from sustainable stock
- **Defection Value**: Immediate higher payoff - penalty for stock degradation
- Choose action that maximizes long-term expected value

## Edge Case Handling

### First Round
- **Always Cooperate**: Establish cooperative intentions and gather information about opponents
- Set baseline expectations for reciprocal behavior

### Last Round
- **Cooperate if stock health ≥ 0.4**: Maintain cooperative reputation even in final round
- **Defect if stock health < 0.4**: Extract remaining value when sustainability is already compromised

### Critical Stock Situations
- If stock falls below `n` (less than one round of all-cooperate consumption):
  - **Emergency Protocol**: Only cooperate if ≥ 75% of players cooperated in previous round
  - **Preservation Mode**: Defect to ensure some individual payoff when collapse is imminent

### Early Rounds (rounds 1-3)
- **Generous Cooperation**: Be more forgiving of defections
- **Pattern Recognition**: Focus on learning opponent tendencies
- **Establish Reputation**: Signal cooperative intent through consistent cooperation

### Late Rounds (final 25% of game)
- **Endgame Adjustment**: Slightly increase defection threshold as future rounds diminish
- **Commitment Test**: Continue cooperating with consistently cooperative players
- **Cut Losses**: Abandon cooperation with persistent defectors

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, r, history):
    stock_health = stock / capacity
    
    # First round: always cooperate
    if round == 1:
        return COOPERATE
    
    # Calculate opponent cooperation rates (last 3 rounds)
    recent_coop_rates = calculate_recent_cooperation_rates(history, 3)
    
    # Emergency preservation mode
    if stock_health < 0.3:
        if percentage_cooperated_last_round(history) >= 0.75:
            return COOPERATE
        else:
            return DEFECT
    
    # Standard decision logic
    cooperative_opponents = count_if(recent_coop_rates >= 0.6)
    total_opponents = n - 1
    
    if stock_health >= 0.7:
        # Healthy stock: cooperative unless facing majority defectors
        if cooperative_opponents >= total_opponents * 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    elif stock_health >= 0.5:
        # Moderate stock: cooperate with cooperative players
        if cooperative_opponents >= total_opponents * 0.6:
            return COOPERATE
        else:
            return DEFECT
    
    else:
        # Stressed stock: only cooperate with highly cooperative group
        if cooperative_opponents >= total_opponents * 0.8:
            return COOPERATE
        else:
            return DEFECT
```

## Robustness Features

1. **Anti-Exploitation**: Reduces cooperation with persistent defectors while maintaining openness to reformed players
2. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
3. **Adaptive Learning**: Adjusts behavior based on observed opponent patterns
4. **Forgiveness Mechanism**: Gives second chances to players who improve their cooperation
5. **Emergency Protocols**: Has clear decision rules for crisis situations

This strategy balances cooperative ideals with practical necessity, aiming to sustain the resource while protecting against exploitation by purely selfish strategies.
'''

description_COOPERATIVE_91 = '''
# Adaptive Sustainable Cooperation Strategy (ASCS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperatively but responds intelligently to defection patterns, always seeking to return to cooperation when conditions allow.

## Decision Rules

### 1. Cooperation Threshold System
- **Stock Health Metric**: Define `stock_ratio = current_stock / capacity`
- **Critical Threshold**: If `stock_ratio < 0.3`, enter "Conservation Mode"
- **Recovery Threshold**: If `stock_ratio > 0.6`, exit "Conservation Mode"

### 2. Behavioral Assessment
Track each opponent's cooperation rate over a sliding window:
- **Window Size**: `max(3, r/4)` rounds (adaptive to game length)
- **Cooperation Rate**: `cooperator_rate[i] = cooperations[i] / total_observed_rounds[i]`
- **Classification**:
  - Cooperative: `cooperator_rate[i] ≥ 0.7`
  - Hostile: `cooperator_rate[i] ≤ 0.3`
  - Unpredictable: Between 0.3 and 0.7

### 3. Main Decision Logic

```pseudocode
function decide_action(round, stock, capacity, history):
    stock_ratio = stock / capacity
    
    // First round - always cooperate
    if round == 1:
        return COOPERATE
    
    // Conservation mode - protect critical stock levels
    if stock_ratio < 0.3:
        if count_recent_cooperators() >= n/2:
            return COOPERATE
        else:
            return DEFECT  // Defensive defection
    
    // Last round strategy
    if round == final_round:
        if stock_ratio > 0.5 AND average_cooperation_rate() > 0.6:
            return COOPERATE
        else:
            return DEFECT
    
    // Standard adaptive strategy
    cooperative_opponents = count_cooperative_opponents()
    hostile_opponents = count_hostile_opponents()
    
    // Majority cooperative environment
    if cooperative_opponents >= n/2:
        return COOPERATE
    
    // Hostile environment - conditional cooperation
    if hostile_opponents >= n/2:
        if stock_ratio > 0.7:  // Can afford some loss
            return COOPERATE  // Attempt to induce cooperation
        else:
            return DEFECT  // Protect remaining resources
    
    // Mixed environment - tit-for-tat with forgiveness
    recent_defections = count_recent_defections(window=2)
    if recent_defections >= n/2:
        if random(0,1) < 0.2:  // 20% forgiveness rate
            return COOPERATE
        else:
            return DEFECT
    else:
        return COOPERATE
```

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and establish baseline behavior.

### Last Round
- If stock is healthy (>50% capacity) AND others have been mostly cooperative: **COOPERATE**
- Otherwise: **DEFECT** (no future consequences)

### Critical Stock Levels
When stock drops below 30% of capacity:
- Enter "Conservation Mode"
- Only cooperate if majority of recent actions were cooperative
- Otherwise defect to prevent total collapse

### Recovery Phase
When stock recovers above 60% capacity:
- Gradually return to standard cooperative behavior
- Increase forgiveness rate for past defections

## Robustness Features

### 1. Adaptive Window Sizing
- Adjust observation window based on game length
- Shorter games: focus on recent behavior
- Longer games: maintain longer memory for pattern recognition

### 2. Probabilistic Forgiveness
- Even against hostile players, occasionally cooperate (20% chance)
- Allows for detection of strategy changes
- Prevents permanent deadlock

### 3. Stock-Based Flexibility
- High stock (>70%): More willing to take risks and cooperate
- Medium stock (30-70%): Balanced approach
- Low stock (<30%): Defensive, sustainability-focused

### 4. Collective Behavior Assessment
- Don't just react to individual players
- Consider overall group dynamics
- Adjust strategy based on collective cooperation levels

## Cooperative Alignment

This strategy maintains cooperative principles by:

1. **Starting cooperatively** - Gives others the benefit of the doubt
2. **Seeking sustainability** - Prioritizes long-term resource health
3. **Offering redemption** - Allows hostile players to reform through probabilistic forgiveness
4. **Responding proportionally** - Matches cooperation levels of the group
5. **Protecting the commons** - Defects only when necessary to prevent resource collapse

The strategy balances being "nice" (cooperative by default) while being "retaliatory" when needed and "forgiving" to allow return to cooperation. Most importantly, it never ignores the fundamental constraint that the resource must be sustained for everyone's long-term benefit.
'''

description_COOPERATIVE_92 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving enough to encourage cooperation and robust enough to protect against exploitation. It operates on the principle that cooperation benefits everyone when the resource is healthy, but defection may be necessary to preserve the commons when it's critically threatened.

## Decision Rules

### 1. Stock Health Assessment
First, categorize the current stock level:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Cooperation Tendency Tracking
Maintain a "cooperation score" for the group based on recent history:
- Start with cooperation_score = 1.0 (fully cooperative)
- After each round, update: cooperation_score = 0.7 × cooperation_score + 0.3 × (fraction who cooperated last round)
- This gives more weight to recent behavior while maintaining memory

### 3. Primary Decision Logic

**Round 1**: Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1**:
```
IF stock_health == "Critical":
    IF cooperation_score < 0.3:
        DEFECT  // Resource is dying and others aren't helping
    ELSE:
        COOPERATE  // Crisis but others are trying to help
        
ELSE IF stock_health == "Stressed":
    IF cooperation_score < 0.5:
        DEFECT  // Moderate pressure, low cooperation
    ELSE:
        COOPERATE  // Moderate pressure, good cooperation
        
ELSE:  // stock_health == "Healthy"
    IF cooperation_score < 0.2:
        DEFECT  // Punish persistent defection even when safe
    ELSE:
        COOPERATE  // Default cooperative behavior when safe
```

**Final Round (r)**:
```
IF stock_health == "Critical":
    COOPERATE  // Last chance to save something for others
ELSE:
    IF cooperation_score ≥ 0.5:
        COOPERATE  // Reward good cooperation
    ELSE:
        DEFECT  // Take what you can if others have been selfish
```

## Key Features

### Adaptive Forgiveness
- The strategy doesn't hold grudges indefinitely
- Cooperation score decays, allowing fresh starts after periods of defection
- More forgiving when the resource is healthy, stricter when stressed

### Crisis Response
- Recognizes that some defection may be rational when the resource is critically low
- But still tries to cooperate if others are making the effort
- Balances individual survival with collective welfare

### Punishment Mechanism
- Will defect against persistently uncooperative groups
- Punishment is proportional to resource health (stricter when resource is vulnerable)
- Maintains incentive for others to cooperate

### Endgame Consideration
- Final round behavior depends on both resource state and cooperation history
- Attempts one last cooperative gesture in crisis situations
- Rewards sustained cooperation throughout the game

## Robustness Features

1. **Against Always-Defect**: Will eventually match defection but tries cooperation first
2. **Against Always-Cooperate**: Will cooperate back, maximizing mutual benefit
3. **Against Tit-for-Tat variants**: The cooperation score smooths out noise and prevents spiral conflicts
4. **Against Random strategies**: Adapts to the actual cooperation rate regardless of specific patterns
5. **Against Complex adaptive strategies**: Uses simple, transparent rules that are hard to exploit

## Edge Cases

- **Stock reaches zero**: Continue with last decision rule (though game may end)
- **All others always defect**: Will defect in response while resource lasts
- **Rapid stock changes**: Stock health categories provide stability against volatility
- **Very short games (r=2,3)**: Still establishes cooperation first, adapts quickly

This strategy balances the cooperative ideal with practical necessities, aiming to sustain both the resource and encourage widespread cooperation while protecting against exploitation.
'''

description_COOPERATIVE_93 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation through adaptive cooperation that responds to both the resource state and opponent behavior patterns.

## Decision Framework

### 1. Stock Health Assessment
First, evaluate the current resource health:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.3 × capacity

### 2. Opponent Cooperation Level Tracking
Maintain a rolling cooperation rate for the last min(5, current_round-1) rounds:
- **cooperation_rate** = (total C actions by all opponents) / (total possible C actions by all opponents)

### 3. Decision Rules

#### First Round
Always **Cooperate** - Start optimistically to signal cooperative intent.

#### Rounds 2 to r-1 (Middle Game)
Apply the following decision tree:

```
IF stock_health == "Critical":
    Play C (resource preservation is paramount)
ELSE IF stock_health == "Stressed":
    IF cooperation_rate ≥ 0.6:
        Play C (reward cooperative environment)
    ELSE:
        Play D (protect against exploitation while stock recovers)
ELSE: // stock_health == "Healthy"
    IF cooperation_rate ≥ 0.8:
        Play C (maintain cooperative equilibrium)
    ELSE IF cooperation_rate ≥ 0.4:
        IF (rounds_since_last_defection ≥ 3):
            Play C (give benefit of doubt)
        ELSE:
            Play D (measured response to mixed cooperation)
    ELSE: // cooperation_rate < 0.4
        Play D (protect against widespread defection)
```

#### Last Round (Round r)
```
IF stock_health == "Critical":
    Play C (don't destroy the resource completely)
ELSE IF cooperation_rate_overall ≥ 0.6:
    Play C (reward long-term cooperators)
ELSE:
    Play D (no future rounds to worry about)
```

### 4. Additional Adaptive Mechanisms

#### Forgiveness Protocol
Track consecutive rounds where cooperation_rate ≥ 0.7. After 3 such rounds, reset any "punishment" behavior and return to full cooperative mode regardless of past defections.

#### Emergency Conservation
If at any point stock falls below 0.15 × capacity, override all other rules and play C for the next 2 rounds to allow resource recovery.

#### Trend Analysis
If stock has been declining for 3+ consecutive rounds despite cooperation_rate > 0.5, temporarily increase the cooperation threshold by 0.1 to demand higher collective cooperation.

## Strategy Rationale

### Cooperative Elements:
1. **Default to cooperation** in healthy resource states
2. **Always cooperate when resources are critical** - prioritizes sustainability over short-term gains
3. **Forgiveness mechanism** allows return to cooperation after punishment
4. **Starts cooperatively** to signal good intentions

### Robustness Features:
1. **Adaptive thresholds** respond to different opponent mixes
2. **Stock-state awareness** prevents resource collapse
3. **Graduated response** - doesn't immediately punish single defections
4. **Last-round consideration** balances realism with cooperation
5. **Emergency protocols** handle extreme scenarios

### Behavioral Flexibility:
- Against **all-cooperators**: Maintains cooperation, maximizes collective welfare
- Against **all-defectors**: Protects resources when critical, otherwise responds proportionally
- Against **mixed strategies**: Adapts cooperation level to match environmental cooperation while maintaining resource sustainability
- Against **strategic defectors**: Trend analysis and graduated responses prevent exploitation while keeping cooperation pathways open

This strategy balances the cooperative imperative with practical defensive measures, ensuring both resource sustainability and robustness against various opponent behaviors.
'''

description_COOPERATIVE_94 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term collective welfare while maintaining resilience against exploitation. It aims to sustain the resource pool while incentivizing cooperation through measured responses to others' behavior.

## Decision Framework

### Initial Phase (First Round)
**Always COOPERATE** - Start with goodwill to establish cooperative norms and signal trustworthiness.

### Main Strategy Logic

The strategy uses three key indicators to make decisions:

1. **Stock Health Ratio (SHR)** = current_stock / capacity
2. **Cooperation Rate (CR)** = (number of cooperators in last round) / n
3. **Sustainability Threshold (ST)** = max(0.3, 1/n) - minimum stock ratio needed for meaningful growth

### Decision Rules

```pseudocode
IF round == 1:
    COOPERATE
    
IF round == final_round:
    IF stock_health_ratio > sustainability_threshold:
        COOPERATE
    ELSE:
        DEFECT
        
ELSE: // Main rounds (2 to r-1)
    
    // Emergency conservation mode
    IF stock_health_ratio < sustainability_threshold:
        IF cooperation_rate_last_round >= 0.5:
            COOPERATE // Others are trying to save it
        ELSE:
            DEFECT // Pool is doomed, get what you can
    
    // Normal operation mode
    ELSE:
        // Calculate adaptive cooperation threshold
        cooperation_threshold = 0.3 + 0.4 * stock_health_ratio
        
        IF cooperation_rate_last_round >= cooperation_threshold:
            COOPERATE // Reward good behavior
        ELSE:
            // Graduated response based on how bad defection was
            defection_severity = 1 - cooperation_rate_last_round
            
            IF defection_severity > 0.7: // Very bad defection
                DEFECT
            ELSE IF defection_severity > 0.4: // Moderate defection
                IF stock_health_ratio > 0.6:
                    COOPERATE // Can afford to be forgiving
                ELSE:
                    DEFECT // Need to protect resources
            ELSE: // Minor defection
                COOPERATE // Forgive minor lapses
```

## Key Features

### 1. **Adaptive Thresholds**
- Cooperation requirements become more lenient when stock is healthy
- When stock ratio is high (0.8+), cooperate even if only 30% cooperated last round
- When stock is moderate (0.5-0.8), require ~50% cooperation
- When stock is low (<0.5), require 70%+ cooperation to continue cooperating

### 2. **Emergency Response**
- Below sustainability threshold: Only cooperate if majority cooperated last round
- This prevents complete resource collapse while maintaining hope for recovery

### 3. **Graduated Punishment**
- Minor defections (70%+ cooperation rate): Always forgive
- Moderate defections (30-70% cooperation): Context-dependent response
- Major defections (<30% cooperation): Punish unless in emergency mode

### 4. **End-Game Consideration**
- Final round: Cooperate only if stock is healthy enough to matter
- Prevents meaningless cooperation when pool is already depleted

### 5. **Forgiveness Mechanism**
- Returns to cooperation quickly when others improve behavior
- No permanent grudges or complex punishment schemes
- Balances firmness with flexibility

## Strategic Advantages

1. **Sustainability-Focused**: Explicitly tracks resource health and adjusts behavior accordingly
2. **Exploitation-Resistant**: Graduated responses prevent being taken advantage of
3. **Recovery-Enabling**: Quick forgiveness allows groups to recover from defection spirals
4. **Context-Aware**: Different responses based on both stock level and opponent behavior
5. **Tournament-Robust**: Doesn't rely on specific opponent strategies or coordination

## Robustness Against Different Opponents

- **Against Always-Cooperate**: Maintains cooperation, ensures sustainability
- **Against Always-Defect**: Switches to defection to avoid exploitation when stock gets low
- **Against Tit-for-Tat**: Cooperates initially, responds proportionally to their behavior  
- **Against Random**: Adapts based on actual cooperation rates, not assumptions
- **Against Complex Strategies**: Focuses on observable outcomes rather than trying to model opponent logic

This strategy balances the cooperative goal of resource preservation with the practical need to avoid exploitation, creating a robust approach that can maintain sustainability across diverse opponent behaviors.
'''

description_COOPERATIVE_95 = '''
# Adaptive Cooperative Strategy: "Stock Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but can defend against exploitation while maintaining pathways back to cooperation.

## Decision Rules

### 1. Cooperation Threshold System
- **Primary Rule**: Cooperate (C) if current stock level ≥ threshold, otherwise Defect (D)
- **Base Threshold**: `capacity * 0.4` (maintains sustainability focus)
- **Adaptive Threshold**: Adjusts based on opponent behavior patterns

### 2. Behavioral Adaptation Mechanism

**Cooperation Index Calculation:**
```
cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
```

**Threshold Adjustment:**
- If `cooperation_rate ≥ 0.7`: Lower threshold by 10% (more generous)
- If `cooperation_rate ≤ 0.3`: Raise threshold by 15% (more defensive)
- If `0.3 < cooperation_rate < 0.7`: Gradual adjustment toward base threshold

### 3. Specific Round Handling

**First Round:**
- Always Cooperate (C) - establish cooperative intent

**Early Rounds (rounds 2-3):**
- Cooperate if stock ≥ base_threshold
- Track opponent patterns for future adaptation

**Middle Rounds:**
- Apply full adaptive threshold system
- If stock drops below `capacity * 0.2`, enter "recovery mode":
  - Cooperate only if ≥60% of others cooperated in previous round
  - This prevents resource collapse while allowing recovery

**Final Round:**
- If stock ≥ `capacity * 0.3`: Cooperate (maintain reputation for future games)
- If stock < `capacity * 0.3`: Apply standard threshold rule

### 4. Forgiveness Mechanism
- Track "recent cooperation trend" over last 3 rounds
- If opponents show sustained cooperation (≥50% C rate) for 2+ consecutive rounds, reset to more generous threshold even if historical rate is low
- This prevents permanent punishment cycles

## Edge Case Handling

**Stock Depletion Crisis (stock < capacity * 0.15):**
- Emergency cooperation: Play C only if ALL other players played C in the previous round
- Otherwise play D (ensure personal survival)

**Stock Abundance (stock ≥ capacity * 0.9):**
- Always cooperate - maximize sustainable harvesting when resource is plentiful

**Opponent Inconsistency:**
- If opponents alternate randomly, use rolling 5-round average for cooperation_rate
- Prevents over-reaction to noise

## Pseudocode Summary

```
function decide_action(current_stock, round_number, history):
    base_threshold = capacity * 0.4
    
    if round_number == 1:
        return C
    
    # Calculate opponent cooperation rate
    cooperation_rate = calculate_cooperation_rate(history)
    
    # Adjust threshold based on opponent behavior
    if cooperation_rate >= 0.7:
        threshold = base_threshold * 0.9
    elif cooperation_rate <= 0.3:
        threshold = base_threshold * 1.15
    else:
        threshold = base_threshold
    
    # Handle critical situations
    if current_stock < capacity * 0.15:
        if all_others_cooperated_last_round(history):
            return C
        else:
            return D
    
    if current_stock >= capacity * 0.9:
        return C
    
    # Apply forgiveness mechanism
    if recent_cooperation_trend(history) and cooperation_rate >= 0.5:
        threshold = base_threshold * 0.95
    
    # Final decision
    if current_stock >= threshold:
        return C
    else:
        return D
```

## Cooperative Alignment

This strategy embodies cooperation through:

1. **Default Cooperation**: Starts cooperative and maintains cooperative bias when resources allow
2. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
3. **Adaptive Forgiveness**: Provides pathways back to cooperation for reformed defectors
4. **Proportional Response**: Defensive measures are proportional to threat level
5. **Resource Recovery**: Actively supports resource regeneration during abundance phases

The strategy balances cooperative ideals with practical survival needs, creating incentives for others to cooperate while protecting against exploitation.
'''

description_COOPERATIVE_96 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being cooperative by default, but includes defensive mechanisms to protect against exploitation and resource collapse.

## Decision Rules

### 1. Base Cooperation Threshold
- **Always cooperate (C)** when stock level ≥ capacity × 0.7
- This ensures cooperation when the resource is healthy and can sustain collective harvesting

### 2. Critical Stock Protection
- **Always cooperate (C)** when stock level ≤ capacity × 0.3
- At low stock levels, cooperation is essential for resource recovery
- Override all other considerations to prevent resource collapse

### 3. Adaptive Defection Response (Middle Stock Range)
When capacity × 0.3 < stock < capacity × 0.7:

**Defection Rate Calculation:**
```
recent_defection_rate = (defectors in last 3 rounds) / (3 × n)
historical_defection_rate = (total defectors seen) / (total player-rounds observed)

if recent_defection_rate > 0.6:
    play D (match high defection environment)
elif recent_defection_rate > 0.3:
    play D with probability = recent_defection_rate
else:
    play C (reward cooperative environment)
```

### 4. Round-Specific Adjustments

**First Round:**
- Always play C to signal cooperative intent

**Last Round:**
- If stock > capacity × 0.5: play C (leave resource healthy)
- If stock ≤ capacity × 0.5: play D (extract remaining value)

**Final 20% of rounds:**
- Increase cooperation threshold to capacity × 0.8
- Be more willing to defect as end approaches, but still protect critical stock levels

### 5. Trend-Based Adaptation

Track stock trajectory over last 3 rounds:
```
if stock_trend == "declining rapidly" AND current_defection_rate > 0.4:
    temporarily increase cooperation (play C with +30% probability)
if stock_trend == "recovering" AND current_defection_rate < 0.3:
    maintain high cooperation to sustain recovery
```

## Edge Case Handling

### Stock Depletion Scenario
- If stock drops to 0, immediately switch to full cooperation for remainder of game
- This maximizes chances of resource recovery

### High Defection Environment
- If >80% of players defected in last 2 rounds AND stock > capacity × 0.4:
  - Match their behavior to avoid being exploited
  - But return to cooperation if stock drops to critical levels

### Late-Game Resource Abundance
- If in final 25% of rounds and stock > capacity × 0.9:
  - Allow some strategic defection to capture value
  - But never let stock drop below capacity × 0.6

## Cooperative Alignment

1. **Default Cooperation**: Strategy defaults to cooperation in most scenarios
2. **Resource Preservation**: Prioritizes long-term sustainability over short-term gains
3. **Conditional Reciprocity**: Rewards cooperative environments while defending against exploitation
4. **Recovery Support**: Switches to full cooperation when resource needs restoration
5. **Sustainable Endgame**: Even in final rounds, maintains resource health when possible

## Robustness Features

- **Multi-timeframe analysis**: Uses both recent (3 rounds) and historical data
- **Stock-sensitive thresholds**: Adjusts behavior based on resource health
- **Graduated responses**: Probabilistic defection rather than binary switches
- **Exploitation protection**: Can match defection rates when necessary
- **Recovery priority**: Always prioritizes resource survival over individual gains

This strategy balances cooperation with pragmatic adaptation, ensuring it can work effectively against both highly cooperative and highly competitive opponents while maintaining the resource for long-term benefit.
'''

description_COOPERATIVE_97 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but includes robust defensive mechanisms against exploitation. It aims to maintain the resource pool while encouraging cooperative behavior through strategic reciprocity.

## Decision Framework

### Phase 1: Initial Cooperation (Rounds 1-2)
- **Round 1**: Always **Cooperate** (establish cooperative intent)
- **Round 2**: Always **Cooperate** (give others a chance to reciprocate)

### Phase 2: Adaptive Cooperation (Rounds 3 to r-2)

**Primary Decision Rule**: Use a weighted scoring system based on:

1. **Stock Health Indicator**:
   - If `current_stock >= 0.7 × capacity`: +2 points toward Cooperate
   - If `0.4 × capacity <= current_stock < 0.7 × capacity`: +1 point toward Cooperate  
   - If `current_stock < 0.4 × capacity`: +1 point toward Defect (emergency mode)

2. **Recent Cooperation Rate** (last 2 rounds):
   - If `cooperation_rate >= 0.6`: +2 points toward Cooperate
   - If `0.3 <= cooperation_rate < 0.6`: +1 point toward Cooperate
   - If `cooperation_rate < 0.3`: +2 points toward Defect

3. **Trend Analysis**:
   - If stock is increasing over last 2 rounds: +1 point toward Cooperate
   - If stock is stable (±5% of capacity): 0 points
   - If stock is declining: +1 point toward Defect

4. **Exploitation Protection**:
   - If I was the only cooperator in the last round: +2 points toward Defect
   - If fewer than 25% of players cooperated last round AND stock < 0.5 × capacity: +1 point toward Defect

**Decision**: 
- If total score ≥ 2: **Cooperate**
- If total score ≤ -2: **Defect**  
- If -1 ≤ total score ≤ 1: Use **Tit-for-Tat** (match majority action from previous round)

### Phase 3: End-Game Strategy (Last 2 rounds)

**Round r-1**:
- If `current_stock >= 0.5 × capacity` AND `recent_cooperation_rate >= 0.4`: **Cooperate**
- Otherwise: **Defect**

**Round r (Final)**:
- If `current_stock >= 0.6 × capacity` AND I cooperated in round r-1 AND at least 50% cooperated in round r-1: **Cooperate**
- Otherwise: **Defect**

## Key Features

### 1. **Sustainability Focus**
The strategy prioritizes maintaining stock levels above critical thresholds, shifting toward more conservative play when the resource is depleted.

### 2. **Reciprocity Mechanism**
Rewards cooperative behavior and punishes systematic defection through graduated responses rather than immediate retaliation.

### 3. **Exploitation Resistance**
Includes specific protection against being the sole cooperator and adapts when facing predominantly defecting opponents.

### 4. **Trend Awareness**
Considers not just current state but trajectory of the resource, cooperating more when the pool is recovering.

### 5. **Graduated Response**
Uses a scoring system rather than binary rules, allowing for nuanced responses to complex multi-player dynamics.

## Edge Cases

- **Stock Depletion**: If stock drops to 0, automatically defect until stock recovers to at least 0.2 × capacity
- **All Others Defect**: After 2 consecutive rounds of being sole cooperator, switch to defection until cooperation rate improves
- **Rapid Recovery**: If stock jumps significantly (>20% of capacity in one round), increase cooperation tendency for next 2 rounds

## Cooperative Alignment

This strategy maintains a cooperative default while being strategically defensive. It:
- Starts cooperatively to signal good intentions
- Rewards and encourages cooperative behavior in others
- Only defects when necessary for resource preservation or self-protection
- Returns to cooperation when conditions improve
- Balances individual rationality with collective benefit

The strategy is designed to perform well against various opponent types: it cooperates with other cooperators, adapts to mixed strategies, and protects itself against exploiters while still maintaining the possibility of recovery to mutual cooperation.
'''

description_COOPERATIVE_98 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It balances cooperation with adaptive responses to maintain the common pool's sustainability.

## Decision Framework

### 1. **Initialization Phase (Round 1)**
- **Always cooperate** in the first round to signal cooperative intent
- Rationale: Establish good faith and allow observation of others' tendencies

### 2. **Assessment Phase (Rounds 2-3)**
- Continue cooperating while gathering intelligence on opponent behavior
- Track each player's cooperation rate and the overall group dynamics
- Calculate baseline metrics for adaptive thresholds

### 3. **Core Decision Rules (Round 4 onwards)**

The strategy uses a **tiered decision system** based on three key factors:

#### **Factor A: Stock Health Assessment**
```
stock_health = current_stock / capacity
- If stock_health < 0.3: CRISIS MODE (heavily favor cooperation)
- If 0.3 ≤ stock_health < 0.6: CAUTION MODE (moderate cooperation bias)  
- If stock_health ≥ 0.6: STABLE MODE (balanced approach)
```

#### **Factor B: Group Cooperation Level**
```
group_coop_rate = (total_C_actions) / (total_actions_so_far)
- If group_coop_rate ≥ 0.7: HIGH_TRUST
- If 0.4 ≤ group_coop_rate < 0.7: MEDIUM_TRUST
- If group_coop_rate < 0.4: LOW_TRUST
```

#### **Factor C: Recent Trend Analysis**
```
recent_defections = count(D_actions in last 2 rounds)
exploitation_ratio = my_defection_losses / total_possible_gains
- If recent_defections > n: UNDER_ATTACK
- If exploitation_ratio > 0.3: BEING_EXPLOITED
```

### 4. **Decision Matrix**

| Stock Health | Group Trust | Recent Trend | Action | Probability of C |
|-------------|-------------|--------------|---------|------------------|
| CRISIS | Any | Any | **Cooperate** | 95% |
| CAUTION | HIGH_TRUST | Normal | Cooperate | 85% |
| CAUTION | MEDIUM_TRUST | Normal | Cooperate | 70% |
| CAUTION | LOW_TRUST | Normal | Mixed | 50% |
| CAUTION | Any | UNDER_ATTACK | Cooperate | 80% |
| STABLE | HIGH_TRUST | Normal | Cooperate | 80% |
| STABLE | MEDIUM_TRUST | Normal | Cooperate | 65% |
| STABLE | LOW_TRUST | Normal | Mixed | 40% |
| STABLE | Any | UNDER_ATTACK | Defect | 20% |

### 5. **Special Rules**

#### **Forgiveness Mechanism**
- If a player defected but group cooperation improves for 2+ consecutive rounds, reset their "trust score"
- Prevents permanent punishment cycles

#### **Crisis Override**
- When stock < 0.2 * capacity: Force cooperation regardless of others' actions
- Rationale: Prevent complete resource collapse

#### **End Game Consideration**
- **Last 2 rounds**: Slightly increase defection probability by 10-15%
- **Final round**: If stock is healthy (>0.5 capacity), allow mild defection (30% chance)

#### **Anti-Exploitation Safeguard**
- If consistently exploited (losing >40% potential gains over 3+ rounds), temporarily defect to signal resistance
- Return to cooperation once exploitation reduces

### 6. **Adaptive Learning Component**

Track opponent patterns and adjust thresholds:
```
For each opponent i:
- cooperation_tendency[i] = historical C rate
- recent_behavior[i] = weighted average of last 3 rounds
- trustworthiness[i] = cooperation_tendency[i] * 0.7 + recent_behavior[i] * 0.3
```

Adjust own cooperation probability based on most cooperative opponent:
```
if max(trustworthiness) > 0.8:
    increase cooperation bias by 5%
if max(trustworthiness) < 0.2:
    decrease cooperation bias by 10%
```

## Key Strengths

1. **Sustainability Focus**: Prioritizes long-term resource health over short-term gains
2. **Adaptive**: Responds to changing group dynamics and opponent behaviors  
3. **Robust**: Handles both highly cooperative and highly competitive environments
4. **Forgiving**: Allows recovery from temporary defections
5. **Exploitation Resistant**: Has mechanisms to prevent being consistently exploited

## Edge Case Handling

- **All opponents always defect**: Cooperate when stock is critical, otherwise mix strategies to avoid exploitation
- **All opponents always cooperate**: High cooperation with occasional testing
- **Erratic opponents**: Use weighted recent behavior to avoid overreacting to noise
- **Stock depletion**: Emergency cooperation mode to prevent collapse

This strategy balances the cooperative imperative with practical considerations for sustainability and self-protection in a competitive environment.
'''

description_COOPERATIVE_99 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It balances cooperation with self-protection through adaptive thresholds and graduated responses.

## Decision Rules

### 1. First Round
**Always Cooperate (C)** - Start with a cooperative signal to encourage mutual cooperation and establish positive momentum.

### 2. Sustainability Assessment
Before each decision, calculate the **Sustainability Index**:
```
sustainability_index = current_stock / capacity
```

### 3. Cooperation History Tracking
Maintain a **Cooperation Rate** for the group:
```
cooperation_rate = (total_C_actions_observed) / (total_actions_observed)
```

### 4. Main Decision Logic

**Cooperate (C) if ALL of the following conditions are met:**
- `sustainability_index ≥ 0.3` (stock hasn't collapsed)
- `cooperation_rate ≥ 0.4` (sufficient cooperation exists)
- `current_round ≤ (total_rounds - 2)` (not in final exploitation phase)

**Otherwise, Defect (D)**

### 5. Adaptive Thresholds
The cooperation threshold adapts based on game parameters:
```
min_cooperation_threshold = max(0.3, 1.0/n)
```
This ensures the strategy doesn't demand impossible cooperation levels in games with many players.

## Edge Case Handling

### Last Two Rounds
- **Round r-1**: Defect if `cooperation_rate < 0.6`, otherwise Cooperate
- **Round r**: Always Defect (end-game exploitation is expected)

### Stock Crisis (sustainability_index < 0.2)
Enter **Crisis Mode**: Only cooperate if `cooperation_rate > 0.7` in the previous round, indicating strong collective commitment to recovery.

### Early Defection Detection
If in rounds 1-3, more than 60% of players defect, immediately lower cooperation threshold to `0.25` to avoid being exploited by universally aggressive opponents.

## Robustness Features

### 1. Graduated Response
The strategy doesn't immediately punish single defections but responds to sustained patterns of non-cooperation.

### 2. Forgiveness Mechanism
If cooperation rate improves significantly (increases by >0.2 from previous round), reset to more lenient thresholds temporarily.

### 3. Parameter Scaling
All thresholds scale with the number of players `n`:
- With more players, individual impact decreases, so be more forgiving
- With fewer players, individual actions matter more, so demand higher cooperation

### 4. Stock Protection
Prioritize resource sustainability over short-term gains - the strategy will sacrifice immediate payoffs to prevent stock collapse.

## Pseudocode Summary

```
function decide_action(current_round, current_stock, capacity, total_rounds, n, action_history):
    
    // First round cooperation
    if current_round == 1:
        return C
    
    // Calculate key metrics
    sustainability_index = current_stock / capacity
    cooperation_rate = count_cooperations(action_history) / count_total_actions(action_history)
    
    // End game handling
    if current_round == total_rounds:
        return D
    if current_round == total_rounds - 1:
        return C if cooperation_rate >= 0.6 else D
    
    // Crisis mode
    if sustainability_index < 0.2:
        recent_cooperation = cooperation_rate_last_round(action_history)
        return C if recent_cooperation > 0.7 else D
    
    // Early defection adjustment
    if current_round <= 3 and cooperation_rate < 0.4:
        cooperation_threshold = 0.25
    else:
        cooperation_threshold = max(0.4, 1.0/n)
    
    // Main decision
    if sustainability_index >= 0.3 and cooperation_rate >= cooperation_threshold:
        return C
    else:
        return D
```

## Strategic Rationale

This strategy succeeds by:
1. **Leading by example** through initial cooperation
2. **Protecting the resource** by refusing to participate in unsustainable extraction
3. **Adapting to opponent behavior** without being exploited
4. **Maintaining hope** for cooperation while having realistic expectations
5. **Scaling appropriately** to different game sizes and parameters

The strategy is cooperative in spirit but not naive - it will work with others to maintain the resource but won't allow itself to be systematically exploited by purely selfish players.
'''

description_COOPERATIVE_100 = '''
# Adaptive Cooperative Resource Management Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being robust against exploitation. It balances cooperation with adaptive responses to maintain both resource health and competitive viability.

## Strategy Overview: "Sustainable Guardian"

### 1. Decision Rules

**Primary Cooperation Condition:**
- Cooperate (C) when the resource stock is healthy AND recent opponent behavior shows sufficient cooperation
- Defect (D) when the resource is critically depleted OR when facing persistent exploitation

**Specific Decision Logic:**

```pseudocode
function decide_action(stock, round, history, n, capacity, r):
    stock_health = stock / capacity
    cooperation_threshold = calculate_cooperation_threshold(round, r, n)
    
    // Critical resource protection
    if stock_health < 0.3:
        return DEFECT  // Emergency mode - grab what's left
    
    // First round - start cooperatively
    if round == 1:
        return COOPERATE
    
    // Calculate recent cooperation rate of opponents
    recent_coop_rate = calculate_recent_cooperation(history, lookback_window)
    
    // Adaptive cooperation based on stock health and opponent behavior
    if stock_health >= 0.7 AND recent_coop_rate >= cooperation_threshold:
        return COOPERATE
    else if stock_health >= 0.5 AND recent_coop_rate >= (cooperation_threshold + 0.2):
        return COOPERATE
    else:
        return DEFECT
```

### 2. Key Parameters and Calculations

**Cooperation Threshold Calculation:**
```pseudocode
function calculate_cooperation_threshold(round, r, n):
    base_threshold = 0.4  // Minimum cooperation rate expected
    
    // Be more forgiving early in the game
    early_game_bonus = max(0, (r/4 - round) / (r/4)) * 0.2
    
    // Adjust for group size - larger groups need higher cooperation
    group_adjustment = (n - 2) * 0.05
    
    return min(0.8, base_threshold + group_adjustment - early_game_bonus)
```

**Recent Cooperation Calculation:**
```pseudocode
function calculate_recent_cooperation(history, lookback_window):
    if len(history) == 0:
        return 1.0  // Assume cooperation initially
    
    window = min(lookback_window, len(history))
    recent_rounds = history[-window:]
    
    total_cooperators = 0
    total_possible = 0
    
    for round_data in recent_rounds:
        for player_action in round_data.opponent_actions:
            total_possible += 1
            if player_action == COOPERATE:
                total_cooperators += 1
    
    return total_cooperators / total_possible if total_possible > 0 else 1.0
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate to establish good faith and test the waters
- This signals cooperative intent while gathering initial information about opponents

**Last Round:**
- If stock_health > 0.5: Cooperate (maintain reputation for future interactions)
- If stock_health ≤ 0.5: Defect (resource is likely doomed anyway)

**Resource Depletion Crisis:**
- When stock < 30% of capacity: Switch to "survival mode" and defect
- This prevents others from benefiting while you sacrifice for sustainability

**All-Defection Environment:**
- If recent cooperation rate falls below 20% for 3+ consecutive rounds: Defect
- But reassess every 2 rounds - return to cooperation if conditions improve

### 4. Adaptive Elements

**Dynamic Lookback Window:**
```pseudocode
lookback_window = min(5, max(2, round/3))
```
- Shorter memory early (more forgiving of initial mistakes)
- Longer memory later (better pattern recognition)

**Forgiveness Mechanism:**
- After punishing defection with defection, test cooperation every 3 rounds
- If opponents return to cooperation, gradually shift back to cooperative stance

**Stock Recovery Support:**
- When stock is recovering (stock_health between 0.3-0.7), lower the cooperation threshold by 0.1
- This helps rebuild the resource during critical recovery periods

### 5. Robustness Features

**Protection Against Exploitation:**
- Never cooperate when being consistently exploited (cooperation rate < 30%)
- Always monitor the sustainability threshold - defect when resource is critically low

**Multi-Scale Adaptation:**
- Short-term: Respond to immediate opponent behavior (2-3 round window)
- Medium-term: Track broader patterns (5-7 round window)
- Long-term: Assess overall resource trajectory

**Group Size Scaling:**
- Larger groups require higher cooperation rates to maintain sustainability
- Adjust thresholds based on n to account for increased coordination difficulty

### 6. Cooperative Alignment

This strategy maintains strong cooperative principles by:

1. **Default Cooperation:** Starting cooperatively and preferring cooperation when conditions allow
2. **Resource Stewardship:** Prioritizing long-term resource health over short-term gains
3. **Conditional Forgiveness:** Giving opponents opportunities to return to cooperation
4. **Proportional Response:** Matching the level of cooperation received rather than immediately escalating to full defection

The strategy is "cooperatively rational" - it seeks win-win outcomes but protects against systematic exploitation and resource collapse. It balances the tragedy of the commons with the benefits of sustained cooperation.
'''

description_COOPERATIVE_101 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy aims to maximize long-term collective welfare by maintaining stock sustainability while being resilient to exploitation. It balances cooperation with strategic defection to protect the common pool resource.

## Decision Rules

### 1. Stock Health Assessment
```
stock_health = current_stock / capacity
- Healthy: stock_health > 0.7
- Moderate: 0.3 ≤ stock_health ≤ 0.7  
- Critical: stock_health < 0.3
```

### 2. Cooperation Threshold
```
cooperation_rate = (cooperators in last round) / n
- High cooperation: cooperation_rate ≥ 0.6
- Medium cooperation: 0.3 ≤ cooperation_rate < 0.6
- Low cooperation: cooperation_rate < 0.3
```

### 3. Main Decision Logic

**Round 1 (First Round):**
- Always COOPERATE to establish good faith and test the waters

**Rounds 2 to r-1 (Middle Rounds):**
```
IF stock_health == Critical:
    IF cooperation_rate >= 0.5:
        COOPERATE  // Try to rebuild together
    ELSE:
        DEFECT     // Grab what you can before collapse
        
ELSE IF stock_health == Moderate:
    IF cooperation_rate >= 0.6:
        COOPERATE  // Support the cooperative majority
    ELSE IF cooperation_rate >= 0.3:
        // Conditional cooperation with forgiveness
        IF (cooperated last round AND was exploited):
            DEFECT  // Punish exploitation
        ELSE:
            COOPERATE
    ELSE:
        DEFECT     // Too many defectors, protect yourself
        
ELSE IF stock_health == Healthy:
    IF cooperation_rate >= 0.4:
        COOPERATE  // Maintain abundance through cooperation
    ELSE:
        // Strategic defection to signal displeasure
        IF (rounds_since_last_punishment > 2):
            DEFECT
        ELSE:
            COOPERATE
```

**Final Round (Round r):**
```
IF stock_health == Critical:
    DEFECT     // Last chance to extract value
ELSE IF cooperation_rate >= 0.5:
    COOPERATE  // Reward cooperative play
ELSE:
    DEFECT     // No future consequences
```

### 4. Adaptive Mechanisms

**Forgiveness Counter:**
- Track consecutive rounds of mutual cooperation
- After 3+ rounds of mutual cooperation, become more forgiving of occasional defections
- Reset counter when stock becomes critical

**Punishment Tracking:**
- Remember when you last defected as punishment
- Avoid excessive punishment that could trigger retaliation spirals
- Space out punishment defections by at least 2 rounds when possible

**Dynamic Threshold Adjustment:**
- If stock consistently remains healthy with high cooperation, slightly lower cooperation thresholds to encourage more cooperation
- If stock repeatedly crashes, raise cooperation thresholds to become more defensive

## Edge Case Handling

1. **Stock Depletion:** If stock reaches 0, always defect until stock recovers above 10% of capacity

2. **High Volatility:** If stock changes by >40% between rounds, temporarily increase cooperation threshold by 0.1

3. **Near-Capacity:** If stock is >90% of capacity, always cooperate to maintain abundance

4. **All-Defect Detection:** If all players defected in the previous round, cooperate next round to attempt restart

5. **Endgame Approach:** In final 20% of rounds, gradually become less forgiving and more focused on immediate payoffs

## Robustness Features

- **Multi-level responsiveness:** Considers both stock health and social cooperation levels
- **Graduated responses:** Doesn't immediately switch to full defection upon exploitation
- **Recovery mechanisms:** Attempts to restart cooperation after conflicts
- **Sustainability focus:** Prioritizes long-term resource health over short-term gains
- **Exploitation protection:** Includes punishment mechanisms for free-riders

This strategy is designed to foster cooperation while protecting against exploitation, adapting to various opponent behaviors while maintaining focus on the shared goal of resource sustainability.
'''

description_COOPERATIVE_102 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances cooperative resource stewardship with defensive mechanisms against exploitation. It aims to maintain the common pool while being robust to various opponent behaviors.

## Decision Framework

### Initial Cooperation Phase (Rounds 1-3 or until stock falls below threshold)
- **Always cooperate** to establish good faith and test the cooperation level of opponents
- Monitor the cooperation ratio: `coop_ratio = cooperators / total_players`
- Track stock health: `stock_health = current_stock / capacity`

### Main Strategy Rules

**Primary Decision Rule:**
```
IF (stock_health < 0.3) THEN
    Defect (emergency survival mode)
ELSE IF (round_number == final_round) THEN
    Defect (end-game incentive)
ELSE IF (cooperation_momentum > defection_momentum) THEN
    Cooperate
ELSE
    Cooperate with probability based on stock_health
END IF
```

### Momentum Calculation
Track behavioral momentum over the last 3 rounds:

```
cooperation_momentum = weighted_sum of:
- Recent cooperation ratio (weight: 0.4)
- Stock improvement trend (weight: 0.3) 
- Personal payoff stability (weight: 0.3)

defection_momentum = weighted_sum of:
- Recent defection surge (weight: 0.5)
- Stock decline rate (weight: 0.5)
```

### Adaptive Cooperation Probability
When momentum is unclear, cooperate with probability:
```
cooperation_prob = 0.3 + (0.6 * stock_health) + (0.1 * historical_coop_ratio)
```

## Specific Rules

### Round 1
- Always cooperate to signal cooperative intent

### Rounds 2-3
- Cooperate unless stock drops below 40% of capacity
- If stock drops dramatically (>50% in one round), switch to defensive mode

### Middle Rounds
- **Reciprocal Cooperation**: If ≥50% of players cooperated last round, cooperate
- **Stock Protection**: If stock < 30% capacity, defect (tragedy prevention)
- **Exploitation Defense**: If being consistently out-earned by >50%, reduce cooperation probability by 0.2

### Final Round
- Defect (standard end-game reasoning)

## Edge Case Handling

### Stock Depletion Crisis (stock < 20% capacity)
- Defect until stock recovers above 40% capacity
- This prevents complete resource collapse

### Mass Defection Detection
If >75% of players defected in the last round:
- Defect for 2 rounds, then gradually return to cooperation
- Monitor if cooperation can be re-established

### Stable Cooperation Detected
If cooperation ratio >60% for 3+ consecutive rounds:
- Maintain cooperation
- Slightly increase cooperation probability (+0.1)

## Robustness Features

1. **Anti-Exploitation**: Reduces cooperation when consistently earning less than aggressive players
2. **Crisis Prevention**: Switches to defection when resource collapse is imminent
3. **Recovery Mechanism**: Gradually returns to cooperation after defensive periods
4. **Momentum-Based**: Adapts to changing opponent behavior patterns rather than just last-round actions

## Summary Logic
```
IF stock critically low (< 30% capacity):
    DEFECT (survival mode)
ELIF final round:
    DEFECT (end-game)
ELIF early rounds (1-3):
    COOPERATE (establish cooperation)
ELIF recent cooperation trend positive AND stock healthy:
    COOPERATE (maintain stewardship)
ELSE:
    COOPERATE with probability based on stock health and history
```

This strategy prioritizes long-term resource sustainability while maintaining defensive capabilities against exploitation, making it robust across diverse opponent behaviors while staying fundamentally cooperative.
'''

description_COOPERATIVE_103 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances immediate cooperation with long-term resource sustainability, adapting to opponent behavior while maintaining a fundamentally cooperative orientation. It treats the common pool as a shared asset requiring careful stewardship rather than exploitation.

## Decision Framework

### 1. Cooperation Threshold System
The strategy uses a dynamic cooperation threshold based on resource health and observed cooperation levels:

**Resource Health Index (RHI)**:
```
RHI = current_stock / capacity
```

**Base Cooperation Threshold**:
- If RHI ≥ 0.8: Threshold = 0.3 (cooperate even with low observed cooperation)
- If 0.5 ≤ RHI < 0.8: Threshold = 0.5 (cooperate when half or more cooperate)
- If 0.2 ≤ RHI < 0.5: Threshold = 0.7 (require high cooperation to continue)
- If RHI < 0.2: Threshold = 0.9 (near-crisis mode, almost everyone must cooperate)

### 2. Adaptive Cooperation Rate Estimation
Track the cooperation rate over recent history using a weighted average:
```
Recent_Coop_Rate = (0.5 × last_round_coop_rate) + (0.3 × two_rounds_ago_rate) + (0.2 × three_rounds_ago_rate)
```

### 3. Main Decision Rule
**COOPERATE if ANY of the following conditions are met:**

1. **First Round**: Always cooperate (establish cooperative intent)

2. **Resource Recovery**: If stock increased from previous round AND RHI > 0.3

3. **Sufficient Cooperation**: Recent_Coop_Rate ≥ Current_Threshold

4. **Forgiveness Mechanism**: Every 4th round if RHI > 0.15 (periodic cooperation attempts)

5. **End-Game Cooperation**: In final 2 rounds if RHI > 0.25 (leave resources for hypothetical continuation)

**Otherwise DEFECT**

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and establish baseline.

### Early Rounds (Rounds 2-3)
Use simplified threshold of 0.5 cooperation rate, focusing on building cooperative momentum.

### Mid-Game Adaptation
Full threshold system active, with strong emphasis on resource sustainability.

### End-Game (Final 2 Rounds)
- If resources are healthy (RHI > 0.5): Continue cooperation regardless of others' behavior
- If resources are moderately depleted (0.25 < RHI ≤ 0.5): Cooperate if at least one other player cooperated last round
- If resources are severely depleted (RHI ≤ 0.25): Match the behavior of the majority from the previous round

### Crisis Mode (RHI < 0.1)
Switch to "resource preservation" mode: Only cooperate if 90%+ of other players cooperated in the previous round. This prevents complete resource collapse while maintaining some cooperative possibility.

## Robustness Features

### 1. Defection Tolerance
The strategy doesn't immediately punish individual defectors but responds to overall cooperation levels, making it resilient to occasional selfish behavior.

### 2. Recovery Incentives
When resources begin recovering, the strategy becomes more cooperative to encourage positive momentum.

### 3. Gradual Response
Thresholds change smoothly with resource levels rather than having sharp cutoffs, preventing erratic behavior.

### 4. Memory Balance
Uses weighted recent history rather than either pure memory or pure myopia, adapting to trends while not being overly influenced by single rounds.

## Cooperative Alignment

This strategy embodies cooperation through:
- **Default cooperation** when resources are abundant
- **Conditional cooperation** that encourages others to cooperate
- **Resource stewardship** that prioritizes long-term sustainability
- **Forgiveness** through periodic cooperation attempts
- **End-game generosity** that doesn't exploit final rounds

The strategy aims to be a "conditional cooperator" that helps establish and maintain cooperative equilibria while protecting against complete exploitation. It recognizes that true cooperation in common pool resources requires balancing immediate generosity with long-term sustainability.
'''

description_COOPERATIVE_104 = '''
# Adaptive Sustainable Cooperation Strategy (ASCS)

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It balances cooperation with strategic defection to maintain the resource pool and protect against free-riders.

## Decision Framework

### 1. Primary Decision Rules

**Stock Health Assessment:**
- **Healthy Stock**: stock ≥ 0.8 × capacity
- **Moderate Stock**: 0.4 × capacity ≤ stock < 0.8 × capacity  
- **Critical Stock**: stock < 0.4 × capacity

**Base Cooperation Tendency:**
```
cooperation_baseline = min(0.9, stock/capacity + 0.1)
```

### 2. Adaptive Behavior System

**Opponent Modeling:**
Track each opponent's cooperation rate over the last min(5, current_round) rounds:
```
recent_coop_rate[player_i] = cooperations_by_i / recent_rounds_observed
avg_opponent_cooperation = mean(recent_coop_rate for all other players)
```

**Reciprocity Adjustment:**
```
reciprocity_factor = 0.5 + 0.5 × avg_opponent_cooperation
adjusted_cooperation_prob = cooperation_baseline × reciprocity_factor
```

### 3. Strategic Decision Logic

**Round 1**: Always COOPERATE (establish cooperative intent)

**Rounds 2 to r-1**:
```python
if stock < 0.2 × capacity:
    # Emergency: Always cooperate to rebuild
    action = COOPERATE
    
elif current_round <= 3:
    # Early trust-building phase
    if avg_opponent_cooperation > 0.3:
        action = COOPERATE
    else:
        action = COOPERATE with probability 0.7
        
elif avg_opponent_cooperation > 0.6:
    # High cooperation environment
    action = COOPERATE with probability min(0.95, adjusted_cooperation_prob + 0.2)
    
elif avg_opponent_cooperation > 0.3:
    # Moderate cooperation
    action = COOPERATE with probability adjusted_cooperation_prob
    
else:
    # Low cooperation environment - defensive but not vengeful
    action = COOPERATE with probability max(0.25, adjusted_cooperation_prob - 0.3)
```

**Final Round**: 
```python
if stock > 0.6 × capacity and avg_opponent_cooperation > 0.4:
    action = COOPERATE  # Maintain cooperative reputation
else:
    action = DEFECT     # Extract remaining value when cooperation is unlikely
```

### 4. Edge Case Handling

**Stock Depletion Recovery:**
- If stock falls below 0.15 × capacity, force COOPERATE for next 2 rounds regardless of opponent behavior
- Gradually increase cooperation probability as stock recovers

**Exploitation Protection:**
- If any single opponent has cooperation rate < 0.2 and stock is declining, reduce cooperation probability by 0.1
- Never let cooperation probability fall below 0.15 (maintains some cooperative signal)

**Late Game Dynamics:**
- In final 20% of rounds, slightly reduce cooperation if stock is healthy but opponents are mostly defecting
- Maintain cooperation if collective behavior has been sustainable

### 5. Key Features

**Adaptive**: Responds to opponent cooperation levels and stock health
**Forgiving**: Doesn't permanently punish defection, allows reputation recovery  
**Sustainable**: Prioritizes resource preservation when stock is critical
**Robust**: Maintains minimum cooperation level even against heavy exploitation
**Strategic**: Balances immediate payoffs with long-term resource sustainability

### 6. Pseudocode Summary

```python
def decide_action(round_num, stock, capacity, history, n_players, total_rounds):
    if round_num == 1:
        return COOPERATE
    
    # Calculate stock health and base cooperation
    stock_ratio = stock / capacity
    base_coop_prob = min(0.9, stock_ratio + 0.1)
    
    # Assess opponent cooperation
    recent_rounds = min(5, round_num - 1)
    avg_opponent_coop = calculate_recent_cooperation_rate(history, recent_rounds)
    
    # Apply reciprocity
    reciprocity = 0.5 + 0.5 * avg_opponent_coop
    adjusted_prob = base_coop_prob * reciprocity
    
    # Handle special cases
    if stock < 0.2 * capacity:
        return COOPERATE
    
    if round_num == total_rounds:
        return COOPERATE if (stock > 0.6 * capacity and avg_opponent_coop > 0.4) else DEFECT
    
    # Apply cooperation level adjustments based on environment
    if avg_opponent_coop > 0.6:
        final_prob = min(0.95, adjusted_prob + 0.2)
    elif avg_opponent_coop > 0.3:
        final_prob = adjusted_prob
    else:
        final_prob = max(0.25, adjusted_prob - 0.3)
    
    return COOPERATE if random() < final_prob else DEFECT
```

This strategy maintains a cooperative foundation while adapting to opponent behavior and resource constraints, making it robust across diverse competitive environments.
'''

description_COOPERATIVE_105 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation, using the stock level as a key indicator of collective behavior and sustainability needs.

## Decision Framework

### 1. Stock-Based Cooperation Threshold
- **Cooperation Threshold**: `threshold = capacity * 0.6`
- **Core Rule**: Cooperate when `current_stock >= threshold`, defect when below

### 2. Adaptive Behavioral Assessment
Track each opponent's cooperation rate over a sliding window:
- **Window Size**: `min(5, rounds_played)`
- **Cooperation Rate**: `opponent_cooperations / window_size`
- **Trust Level**: Opponent is "trustworthy" if cooperation rate ≥ 0.6

### 3. Strategic Decision Rules

#### Round 1 (Bootstrap)
- Always **COOPERATE** to signal cooperative intent and gather initial information

#### Rounds 2 to r-1 (Adaptive Phase)
```pseudocode
if current_stock < capacity * 0.3:
    // Crisis mode - stock critically low
    DEFECT
else if current_stock >= capacity * 0.6:
    // Healthy stock - promote cooperation
    if majority_of_opponents_are_trustworthy():
        COOPERATE
    else if my_recent_cooperation_rate > 0.5:
        COOPERATE  // Continue leading by example
    else:
        DEFECT     // Protect against continued exploitation
else:
    // Medium stock (30%-60%) - conditional cooperation
    if all_opponents_cooperated_last_round():
        COOPERATE
    else if trustworthy_opponents >= 50%:
        COOPERATE
    else:
        DEFECT
```

#### Final Round (r)
- **Tit-for-Majority**: Cooperate if majority of opponents cooperated in round r-1, otherwise defect

### 4. Key Adaptive Mechanisms

#### Forgiveness Protocol
- Reset trust assessments if stock recovers to >80% capacity
- This prevents permanent punishment cycles when collective behavior improves

#### Leading by Example
- If stock is healthy (≥60% capacity) but opponents are mixed, maintain cooperation for up to 3 consecutive rounds to encourage reciprocation
- Switch to conditional cooperation if no positive response

#### Crisis Response
- When stock drops below 30% capacity, prioritize resource acquisition to prevent total collapse
- Resume cooperation immediately when stock recovers above threshold

## Strategy Properties

**Cooperative**: Defaults to cooperation when conditions allow, actively tries to rebuild trust and maintain sustainable stock levels.

**Adaptive**: Adjusts behavior based on stock health and opponent patterns without being overly reactive to single-round deviations.

**Robust**: Handles various opponent types:
- Against all-cooperators: Maintains cooperation
- Against all-defectors: Protects resources while allowing recovery
- Against mixed strategies: Encourages cooperation while preventing exploitation

**Sustainable**: Uses stock level as primary indicator, naturally aligning individual incentives with long-term collective welfare.

This strategy aims to foster cooperation while maintaining resilience, using the game's built-in feedback mechanism (stock dynamics) to guide decisions rather than relying on complex opponent modeling or predetermined coordination schemes.
'''

description_COOPERATIVE_106 = '''
# Adaptive Cooperative Resource Management Strategy (ACRMS)

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative but adjusts based on observed patterns, always maintaining a bias toward cooperation when the resource can sustain it.

## Decision Framework

### Phase 1: Initial Cooperation (Rounds 1-3)
- **Round 1**: Always **Cooperate** (C) - establish cooperative intent
- **Rounds 2-3**: **Cooperate** unless stock has dropped below 50% of capacity due to excessive defection in previous rounds

### Phase 2: Adaptive Cooperation (Middle Rounds)
Use a **Stock Health Index (SHI)** to guide decisions:
```
SHI = current_stock / capacity
```

**Primary Decision Rule:**
- If SHI ≥ 0.6: **Cooperate** (resource is healthy)
- If 0.3 ≤ SHI < 0.6: Use **Conditional Cooperation** (see below)
- If SHI < 0.3: **Defect** (resource is critically low - survival mode)

**Conditional Cooperation Logic:**
When in the middle range (0.3 ≤ SHI < 0.6):
1. Calculate **Recent Defection Rate**: percentage of players who defected in the last 2 rounds
2. If Recent Defection Rate ≤ 40%: **Cooperate**
3. If Recent Defection Rate > 40%: **Defect**

### Phase 3: Endgame Strategy (Final 20% of rounds)
- If SHI ≥ 0.5: Continue **Cooperating** to maximize collective payoff
- If 0.2 ≤ SHI < 0.5: **Cooperate** only if majority cooperated in previous round
- If SHI < 0.2: **Defect** (resource preservation impossible)

## Key Adaptive Mechanisms

### 1. Forgiveness Protocol
Every 3-4 rounds, attempt to restart cooperation by playing C, even if recent experience suggests defection, provided SHI ≥ 0.4. This prevents permanent defection cycles.

### 2. Stock Recovery Recognition
If stock increases by more than 15% in a round (indicating widespread cooperation), immediately return to cooperation regardless of previous strategy.

### 3. Critical Threshold Protection
Never cooperate if it would likely drive stock below 10% of capacity in the next round, based on observed player behavior patterns.

## Pseudocode Implementation

```
function decide_action(round, stock, capacity, history, n_players):
    SHI = stock / capacity
    rounds_remaining = total_rounds - round
    
    # Phase 1: Initial cooperation
    if round <= 3:
        if round == 1:
            return COOPERATE
        if SHI >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    # Phase 3: Endgame
    if round > 0.8 * total_rounds:
        if SHI >= 0.5:
            return COOPERATE
        elif SHI >= 0.2:
            if majority_cooperated_last_round(history):
                return COOPERATE
            else:
                return DEFECT
        else:
            return DEFECT
    
    # Phase 2: Adaptive cooperation
    if SHI >= 0.6:
        return COOPERATE
    elif SHI < 0.3:
        return DEFECT
    else:  # 0.3 <= SHI < 0.6
        recent_defection_rate = calculate_recent_defection_rate(history, 2)
        if recent_defection_rate <= 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    # Apply forgiveness protocol
    if should_attempt_forgiveness(round, history) and SHI >= 0.4:
        return COOPERATE
```

## Robustness Features

1. **Multi-level thresholds** prevent dramatic strategy swings
2. **Historical awareness** adapts to opponent patterns without being overly reactive
3. **Stock-centric decisions** prioritize resource sustainability
4. **Forgiveness mechanisms** allow recovery from defection spirals
5. **Endgame cooperation** maximizes final rounds when future consequences are limited

This strategy balances cooperation with self-protection, adapts to various opponent behaviors, and maintains focus on the long-term health of the shared resource while remaining competitive in tournament settings.
'''

description_COOPERATIVE_107 = '''
# Adaptive Sustainability Strategy (ASS)

## Core Philosophy
This strategy prioritizes long-term resource sustainability while maintaining fairness and adaptability. It assumes that rational players will eventually recognize that cooperation benefits everyone, but remains robust against exploitation.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** for the first 3 rounds regardless of others' actions
- This establishes cooperative intent and allows observation of opponent behaviors
- Builds initial trust and demonstrates commitment to sustainability

### 2. Adaptive Response System
After round 3, use a **weighted scoring system** to determine cooperation likelihood:

```pseudocode
cooperation_score = 0

# Recent behavior weight (last 3 rounds, 40% influence)
recent_defection_rate = count_defections_last_3_rounds() / (3 * n)
cooperation_score += (1 - recent_defection_rate) * 0.4

# Overall cooperation trend (20% influence)
historical_cooperation_rate = total_cooperations / (current_round * n)
cooperation_score += historical_cooperation_rate * 0.2

# Stock health bonus (30% influence)
stock_health = current_stock / capacity
cooperation_score += stock_health * 0.3

# Reciprocity bonus (10% influence)
if majority_cooperated_last_round():
    cooperation_score += 0.1
```

**Decision Rule**: Cooperate if `cooperation_score > 0.5`, otherwise defect.

### 3. Critical Stock Protection
- **Emergency cooperation**: If `current_stock < capacity * 0.3`, always cooperate regardless of cooperation_score
- This prevents resource collapse even when facing predominantly defecting opponents

### 4. Forgiveness Mechanism
- Track each opponent's recent behavior over a sliding window of 5 rounds
- If a previously defecting opponent shows 3+ consecutive cooperations, immediately resume cooperation with them
- This prevents permanent punishment cycles and encourages redemption

### 5. End-Game Handling
- **Final rounds strategy**: In the last 2 rounds, use a modified decision:
  - If stock is healthy (> 0.6 * capacity): Continue normal strategy
  - If stock is critical (< 0.3 * capacity): Always cooperate
  - Otherwise: Weight recent cooperation more heavily (60% instead of 40%)

### 6. Tit-for-Two-Tats Variant
- Only defect if the majority of players defected in BOTH of the last 2 rounds
- This provides resilience against single-round mistakes or testing behavior

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Stock Depletion Scenarios
- If stock approaches zero (< 5% of capacity), switch to "emergency mode":
  - Cooperate for next 3 rounds regardless of others' actions
  - Reset cooperation scoring after emergency period

### Opponent Pattern Recognition
- Track if opponents show consistent patterns (all-cooperate, all-defect, alternating)
- Against consistent defectors: Use tit-for-tat after initial cooperation period
- Against pattern players: Adapt to their rhythm while maintaining sustainability focus

## Key Advantages

1. **Sustainability-First**: Prioritizes long-term resource health over short-term gains
2. **Forgiving**: Doesn't permanently punish opponents, encouraging rehabilitation
3. **Adaptive**: Responds to changing opponent behaviors while maintaining cooperative baseline
4. **Robust**: Handles various opponent strategies from pure cooperation to pure defection
5. **Fair**: Doesn't exploit cooperative opponents while protecting against systematic exploitation

## Strategic Rationale

This strategy recognizes that in a repeated common pool resource game, mutual cooperation is the only path to maximizing long-term payoffs for all players. By starting cooperatively, responding adaptively to others' behaviors, and maintaining strong sustainability safeguards, it creates incentives for opponents to cooperate while protecting against resource collapse. The forgiveness mechanisms prevent the strategy from getting locked into destructive punishment cycles that harm everyone's long-term interests.
'''

description_COOPERATIVE_108 = '''
## Adaptive Cooperative Strategy: "Sustainable Guardian"

### Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but adapts to protect the common resource from exploitation. It operates on the principle that cooperation is the optimal collective outcome, but requires vigilance against free-riders.

### Decision Rules

#### 1. **Cooperation Threshold System**
- **Primary Rule**: Cooperate (C) when the stock level is above a dynamic sustainability threshold
- **Sustainability Threshold** = `capacity × (0.4 + 0.3 × cooperation_rate)`
  - Where `cooperation_rate` = fraction of players who cooperated in the last round
  - Ranges from 40% to 70% of capacity based on observed cooperation

#### 2. **Defection Triggers**
Defect (D) when ANY of these conditions are met:
- **Crisis Mode**: Current stock < `capacity × 0.3` (resource is critically depleted)
- **Free-rider Punishment**: More than 50% of other players defected in the previous round AND stock > `capacity × 0.15`
- **End-game Extraction**: In the final 2 rounds (when `current_round > r - 2`)

#### 3. **Adaptive Cooperation Recovery**
After defecting due to free-rider punishment:
- Return to cooperation if stock recovers above sustainability threshold AND
- Observed cooperation rate in the last round > 40%

### Edge Case Handling

#### **First Round**
- Always **Cooperate** (establish cooperative intent)
- No history exists, so assume good faith from all players

#### **Early Rounds (rounds 2-3)**
- **Cooperate** unless stock has fallen below `capacity × 0.5`
- If early depletion occurs, switch to **Defect** to signal concern

#### **Middle Rounds**
- Apply full decision rules as specified above
- Monitor cooperation trends and adjust threshold accordingly

#### **Final Rounds**
- **Last 2 rounds**: Switch to **Defect** (end-game extraction)
- **Third-to-last round**: **Cooperate** only if stock > `capacity × 0.6` and cooperation_rate > 60%

### Pseudocode

```
function decide_action(round, stock, capacity, history, n, r):
    cooperation_rate = calculate_cooperation_rate(history, last_round)
    sustainability_threshold = capacity * (0.4 + 0.3 * cooperation_rate)
    
    // First round - always cooperate
    if round == 1:
        return C
    
    // End-game extraction
    if round > r - 2:
        return D
    
    // Crisis mode - resource critically depleted
    if stock < capacity * 0.3:
        return D
    
    // Free-rider punishment
    if cooperation_rate < 0.5 and stock > capacity * 0.15:
        return D
    
    // Main cooperation rule
    if stock >= sustainability_threshold:
        return C
    else:
        return D

function calculate_cooperation_rate(history, round):
    if round < 2:
        return 1.0  // Assume cooperation initially
    
    last_round_actions = history[round - 1]
    cooperators = count(last_round_actions == C)
    return cooperators / n
```

### Robustness Features

#### **Against Various Opponent Types**:
1. **Against Always Cooperate**: Maintains cooperation while ensuring sustainability
2. **Against Always Defect**: Punishes through defection but returns to cooperation when possible
3. **Against Conditional Cooperators**: Aligns naturally through shared cooperation signals
4. **Against Random Players**: Adapts threshold based on observed cooperation rates
5. **Against Strategic Defectors**: Uses crisis mode and punishment mechanisms

#### **Resource Protection**:
- Dynamic thresholds prevent complete resource depletion
- Crisis mode ensures some resource remains for potential recovery
- Growth dynamics are considered in threshold calculations

#### **Cooperative Signaling**:
- Defaults to cooperation in ambiguous situations
- Quick return to cooperation after punishment phases
- Maintains cooperation even when others occasionally defect

### Key Advantages

1. **Truly Cooperative**: Prioritizes group welfare and resource sustainability
2. **Adaptive**: Adjusts behavior based on observed cooperation levels
3. **Robust**: Handles various opponent strategies without being exploited
4. **Sustainable**: Protects long-term resource availability
5. **Simple**: Clear rules that don't require complex opponent modeling

This strategy balances cooperation with protection against exploitation, ensuring both individual viability and collective resource sustainability across diverse tournament conditions.
'''

description_COOPERATIVE_109 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while maintaining cooperative behavior, using adaptive thresholds based on observed opponent behavior and resource depletion patterns.

## Decision Framework

### 1. **Initialization Phase (Round 1)**
- **Always COOPERATE** in the first round
- Establish cooperative intent and gather baseline information about opponents
- Set initial trust level = 1.0 for all opponents

### 2. **Main Strategy Components**

#### A. Resource Health Monitor
```
sustainability_threshold = capacity * 0.4
critical_threshold = capacity * 0.15

if stock < critical_threshold:
    resource_status = "CRITICAL"
elif stock < sustainability_threshold:
    resource_status = "THREATENED"
else:
    resource_status = "HEALTHY"
```

#### B. Opponent Behavior Tracker
For each round, calculate:
- `defection_rate = (number of defectors this round) / n`
- `recent_defection_rate = average defection rate over last 3 rounds`
- `overall_cooperation_level = 1 - (total defections so far) / (total actions so far)`

#### C. Adaptive Trust System
Maintain trust levels that decay with observed defection:
```
trust_adjustment = -0.2 * recent_defection_rate
current_trust = max(0.1, previous_trust + trust_adjustment)
```

### 3. **Decision Rules**

#### Primary Decision Logic:
```
if resource_status == "CRITICAL":
    if current_trust > 0.6 AND recent_defection_rate < 0.3:
        action = COOPERATE  # Last chance for collective recovery
    else:
        action = DEFECT     # Resource collapse imminent, survival mode
        
elif resource_status == "THREATENED":
    if overall_cooperation_level > 0.5 AND recent_defection_rate < 0.4:
        action = COOPERATE  # Encourage continued cooperation
    else:
        action = DEFECT     # Prevent further degradation
        
else:  # resource_status == "HEALTHY"
    if recent_defection_rate < 0.25:
        action = COOPERATE  # Maintain cooperative equilibrium
    elif recent_defection_rate < 0.6:
        action = tit_for_tat_response()  # Measured response
    else:
        action = DEFECT     # Protect against exploitation
```

#### Tit-for-Tat Response Function:
```
if majority_defected_last_round:
    action = DEFECT
else:
    action = COOPERATE
```

### 4. **Special Cases**

#### Last Round Handling:
- If `current_round == r` and `resource_status != "CRITICAL"`:
  - COOPERATE if `overall_cooperation_level > 0.4`
  - Otherwise DEFECT
- This prevents pure end-game defection while maintaining reciprocity

#### Recovery Incentive:
- If stock has been increasing for 2+ consecutive rounds and `current_trust > 0.3`:
  - Increase cooperation probability by 0.2
- Reward collective recovery efforts

#### Forgiveness Mechanism:
- Every 5 rounds, if `stock > sustainability_threshold`:
  - Reset trust levels to `max(current_trust, 0.5)`
- Allows recovery from punishment cycles when resources are healthy

### 5. **Robustness Features**

#### Against Always Defectors:
- Quick trust degradation prevents long-term exploitation
- Resource thresholds trigger defensive defection when necessary

#### Against Conditional Cooperators:
- Maintains cooperation when others do
- Gradual trust building rewards sustained good behavior

#### Against Random Players:
- Recent behavior weighting reduces noise from random actions
- Trust system provides stability against erratic behavior

#### Against Sophisticated Strategies:
- Multiple evaluation timeframes prevent gaming
- Resource-state awareness trumps pure reciprocity when sustainability is threatened

### 6. **Key Thresholds Summary**
- **Critical Stock**: 15% of capacity → Survival mode unless high trust
- **Threatened Stock**: 40% of capacity → Conditional cooperation
- **High Defection**: >60% recent defection rate → Defensive response
- **Trust Floor**: Never below 10% → Allows for redemption
- **Cooperation Baseline**: >50% historical cooperation → Maintain optimism

This strategy balances immediate reciprocity with long-term sustainability, adapts to opponent behavior patterns, and maintains cooperative intent while protecting against exploitation. It's designed to work well with other cooperative strategies while defending against aggressive ones.
'''

description_COOPERATIVE_110 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being forgiving enough to encourage cooperation from others. It balances trust-building with self-protection against exploitation.

## Decision Framework

### Initial Cooperation Phase (First 20% of rounds)
- **Always cooperate** to establish goodwill and signal cooperative intent
- This creates a foundation for sustainable resource management
- Demonstrates commitment to collective welfare over short-term gains

### Main Decision Logic (Remaining rounds)

#### Primary Rule: Stock Health Assessment
```
if current_stock < capacity * 0.3:
    # Critical stock level - emergency cooperation
    cooperate()
elif current_stock < capacity * 0.6:
    # Moderate stress - be cautious about defection
    apply_stricter_cooperation_threshold()
else:
    # Healthy stock - normal cooperation rules
    apply_standard_cooperation_rules()
```

#### Cooperation Threshold System
Track the **cooperation rate** of all other players over the last 3 rounds:
- `cooperation_rate = (total_C_actions) / (total_possible_actions)`

**Standard Threshold (healthy stock):**
- Cooperate if `cooperation_rate ≥ 0.4`
- This means cooperate if at least 40% of recent actions were cooperative

**Strict Threshold (moderate stock stress):**
- Cooperate if `cooperation_rate ≥ 0.6`
- Require higher cooperation from others when resources are stressed

#### Forgiveness Mechanism
- If cooperation rate falls below threshold for 2 consecutive evaluations, still cooperate once every 3 rounds to test if others will return to cooperation
- This prevents permanent defection spirals

#### Last Round Exception
- **Always defect on the final round** since there's no future to protect
- This is rational given no future consequences

## Edge Cases and Special Situations

### Round 1
- Always cooperate (part of initial cooperation phase)

### Stock Depletion Risk
```
if current_stock < n * 2:  # Not enough for everyone to get minimal cooperative payoff
    if cooperation_rate_last_round > 0.5:
        cooperate()  # Trust others are also being careful
    else:
        defect()  # Protect against others over-consuming
```

### Extreme Defection Environment
- If cooperation rate drops below 0.2 for 3+ consecutive evaluations:
  - Switch to "Tit-for-Tat Plus": Copy the majority action from last round
  - But still attempt cooperation every 4th round to probe for change

### Recovery Detection
- If cooperation rate improves significantly (>0.3 increase in one evaluation), immediately return to standard cooperative behavior to reward positive change

## Adaptive Elements

1. **Dynamic Thresholds**: Cooperation requirements adjust based on stock health
2. **Rolling History**: Uses 3-round windows to balance responsiveness with stability
3. **Probe Cooperation**: Regular testing even in hostile environments
4. **Stock-Sensitive**: More generous when resources are abundant, more careful when scarce

## Robustness Features

- **Exploitation Protection**: Won't cooperate indefinitely with consistent defectors
- **Recovery Facilitation**: Always ready to return to cooperation when others improve
- **Resource Conservation**: Automatically becomes more cautious as stock depletes
- **Initial Trust-Building**: Creates early positive momentum
- **Forgiveness**: Prevents minor disagreements from escalating to permanent conflict

This strategy aims to foster sustainable resource use while protecting against exploitation, adapting its cooperation level based on both the resource state and the behavior patterns of other players.
'''

description_COOPERATIVE_111 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common resource while being adaptive to opponent behaviors. It starts cooperative but includes protective mechanisms against exploitation, always seeking to return to cooperative equilibrium when possible.

## Strategy Overview

### 1. Decision Rules

**Primary Decision Framework:**
- **Default Mode: Cooperate** - Always start with cooperation and return to it when conditions allow
- **Protection Threshold: 70%** - Switch to protective mode when cooperation rate drops below 70%
- **Recovery Threshold: 80%** - Return to full cooperation when cooperation rate rises above 80%
- **Crisis Mode: <30% stock** - Emergency defection to prevent total collapse

**Detailed Decision Logic:**

```pseudocode
IF round == 1 THEN
    action = COOPERATE
ELSE
    cooperation_rate = count_cooperators_last_round / n
    stock_health = current_stock / capacity
    
    IF stock_health < 0.3 THEN
        // Crisis mode - resource near collapse
        action = DEFECT
    ELSE IF cooperation_rate >= 0.8 THEN
        // High cooperation environment
        action = COOPERATE
    ELSE IF cooperation_rate <= 0.7 THEN
        // Protection mode - too many defectors
        action = DEFECT
    ELSE
        // Transition zone (70-80% cooperation)
        IF was_cooperating_last_round THEN
            action = COOPERATE  // Give benefit of doubt
        ELSE
            action = DEFECT     // Stay protective until clear recovery
        END IF
    END IF
END IF
```

### 2. Edge Case Handling

**First Round:**
- Always COOPERATE to establish cooperative intent and test the waters

**Last Round:**
- Continue following main strategy (no "end-game defection")
- Rationale: Maintaining reputation for future interactions and ethical consistency

**Stock Depletion Scenarios:**
- **Stock < 30% capacity:** Emergency defection to help resource recover
- **Stock approaching 0:** Defect to minimize personal loss while hoping for recovery
- **Stock at maximum:** Cooperate to maintain sustainable equilibrium

**Extreme Opponent Behaviors:**
- **All opponents always defect:** Switch to permanent defection after 3 rounds of 0% cooperation
- **Highly volatile opponents:** Use 3-round moving average of cooperation rates to smooth decision-making
- **Late-game mass defection:** Maintain strategy consistency - don't abandon cooperation unless thresholds are met

### 3. Cooperative Alignment Features

**Forgiveness Mechanism:**
- Quick return to cooperation when opponents show improvement
- 80% threshold allows for some defection while still rewarding mostly-cooperative behavior

**Graduated Response:**
- Don't immediately punish single defections
- Use percentage-based thresholds rather than absolute counts

**Resource Conservation:**
- Crisis mode protects the commons from total collapse
- Prioritizes long-term sustainability over short-term gains

**Signal Clarity:**
- Consistent thresholds make strategy predictable for other cooperative players
- Clear cooperative intent in opening and recovery phases

## Strategic Rationale

1. **Sustainability Focus:** The strategy explicitly protects the resource from collapse while maximizing cooperative outcomes

2. **Adaptive Protection:** Unlike pure cooperation (exploitable) or tit-for-tat (potentially too harsh), this strategy uses graduated responses based on community cooperation levels

3. **Recovery Oriented:** The asymmetric thresholds (70% to defect, 80% to cooperate) encourage return to cooperation while providing protection

4. **Robust to Noise:** Using percentage thresholds rather than individual player tracking makes the strategy robust to different group sizes and mixed behaviors

5. **Tournament Viable:** Performs well against other cooperative strategies while protecting against pure exploiters and maintaining resource sustainability

This strategy embodies the cooperative spirit by prioritizing the common good while including necessary safeguards to prevent exploitation and resource collapse.
'''

description_COOPERATIVE_112 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while protecting against exploitation through adaptive cooperation with built-in safeguards.

## Decision Rules

### 1. Cooperation Threshold System
- **Base Cooperation Level**: Start with a target of having at least 60% of players cooperate to maintain sustainability
- **Stock Health Monitor**: Calculate stock sustainability ratio = current_stock / capacity
- **Cooperation Incentive**: Cooperate when stock_health > 0.3 OR when cooperation can prevent catastrophic collapse

### 2. Adaptive Response Mechanism

```pseudocode
if round == 1:
    return COOPERATE  // Always start cooperatively

// Calculate recent defection rate from last 3 rounds (or all if fewer)
recent_rounds = min(3, current_round - 1)
defection_rate = count_defections_in_recent_rounds / (recent_rounds * n)

// Determine response based on stock health and opponent behavior
stock_health = current_stock / capacity

if stock_health < 0.15:  // Crisis mode
    if defection_rate < 0.7:
        return COOPERATE  // Try to save the resource
    else:
        return DEFECT     // Resource likely doomed, get what you can

else if stock_health < 0.4:  // Warning zone
    if defection_rate < 0.5:
        return COOPERATE  // Encourage recovery
    else:
        // Graduated response: defect with probability = defection_rate
        return DEFECT with probability defection_rate, else COOPERATE

else:  // Healthy stock (stock_health >= 0.4)
    if defection_rate < 0.3:
        return COOPERATE  // Maintain cooperation in good environment
    else if defection_rate < 0.6:
        // Tit-for-tat with forgiveness: match average behavior but lean cooperative
        return COOPERATE with probability (1 - defection_rate + 0.2)
    else:
        // High defection environment: limited retaliation
        return DEFECT with probability 0.6, else COOPERATE
```

### 3. Endgame Handling
```pseudocode
rounds_remaining = total_rounds - current_round

if rounds_remaining == 0:  // Last round
    if stock_health > 0.5:
        return COOPERATE  // Leave resource in good state
    else:
        return DEFECT     // Extract remaining value

else if rounds_remaining <= 2:  // Near endgame
    if stock_health > 0.3 AND defection_rate < 0.5:
        return COOPERATE  // Try to maintain cooperation until end
    else:
        return DEFECT     // Prepare for endgame defection
```

## Key Features

### 1. **Stock-Sensitive Cooperation**
- Prioritizes resource preservation when stock is critically low
- Becomes more lenient with cooperation as stock health improves
- Uses stock/capacity ratio as primary health indicator

### 2. **Adaptive Learning**
- Monitors recent opponent behavior (3-round window) rather than entire history
- Adjusts cooperation probability based on observed defection rates
- Balances reciprocity with forward-looking cooperation

### 3. **Crisis Management**
- Emergency cooperation mode when stock < 15% capacity
- Graduated response system that scales retaliation with threat level
- Forgiveness mechanism to break defection cycles

### 4. **Robust Edge Case Handling**
- **First Round**: Always cooperate to signal cooperative intent
- **Last Round**: Cooperate only if resource is healthy, otherwise extract value
- **Low Stock**: Prioritize sustainability over immediate reciprocity
- **High Defection**: Limited retaliation to avoid resource collapse

### 5. **Tournament Robustness**
- No reliance on communication or coordination
- Effective against both always-defect and always-cooperate strategies
- Adapts to mixed strategies and changing opponent behavior
- Maintains cooperation incentives even under pressure

## Strategic Rationale

This strategy recognizes that pure tit-for-tat or always-cooperate approaches fail in resource depletion scenarios. By making cooperation conditional on both resource health and opponent behavior, it:

1. **Encourages sustainable extraction** when possible
2. **Punishes destructive behavior** proportionally
3. **Forgives past defection** when resource recovery is possible
4. **Protects against exploitation** without destroying the resource
5. **Adapts to tournament dynamics** without requiring coordination

The strategy is inherently cooperative but not naive, providing strong incentives for mutual cooperation while maintaining defensive capabilities against aggressive opponents.
'''

description_COOPERATIVE_113 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while maintaining cooperative intent. It adapts to opponent behavior patterns and resource conditions, always seeking to preserve the common pool for collective benefit while protecting against exploitation.

## Decision Rules

### Primary Decision Framework
The strategy operates on three key principles:
1. **Stock Preservation**: Maintain stock levels above critical thresholds
2. **Reciprocal Cooperation**: Match the cooperation level of others
3. **Forgiveness with Learning**: Recover from conflicts while adapting to persistent defection

### Specific Decision Rules

#### Round 1: Cooperative Opening
- **Action**: Always COOPERATE
- **Rationale**: Signal cooperative intent and test opponent responses

#### Rounds 2 to r-1: Adaptive Response
The strategy uses a weighted decision based on three factors:

1. **Stock Health Check** (Weight: 40%)
   ```
   critical_threshold = capacity * 0.3
   danger_threshold = capacity * 0.15
   
   if stock < danger_threshold:
       stock_signal = DEFECT  // Emergency resource grab
   elif stock < critical_threshold:
       stock_signal = weighted_choice(70% DEFECT, 30% COOPERATE)
   else:
       stock_signal = COOPERATE  // Stock is healthy
   ```

2. **Cooperation Rate Analysis** (Weight: 35%)
   ```
   recent_rounds = min(3, current_round - 1)
   cooperation_rate = (cooperators_in_recent_rounds) / (total_players * recent_rounds)
   
   if cooperation_rate >= 0.7:
       social_signal = COOPERATE
   elif cooperation_rate >= 0.4:
       social_signal = weighted_choice(60% COOPERATE, 40% DEFECT)
   else:
       social_signal = DEFECT  // Protect against widespread defection
   ```

3. **Trend Detection** (Weight: 25%)
   ```
   if stock_trend_over_last_2_rounds is INCREASING:
       trend_signal = COOPERATE
   elif stock_trend is STABLE:
       trend_signal = COOPERATE
   else:
       trend_signal = weighted_choice(40% COOPERATE, 60% DEFECT)
   ```

#### Final Decision Synthesis
```
signals = [stock_signal, social_signal, trend_signal]
weights = [0.4, 0.35, 0.25]

cooperate_score = sum(weight for signal, weight in zip(signals, weights) if signal == COOPERATE)

if cooperate_score >= 0.5:
    action = COOPERATE
else:
    action = DEFECT
```

#### Final Round (Round r): Strategic Endgame
- **If stock > critical_threshold AND cooperation_rate_last_3_rounds > 0.6**: COOPERATE (reward good collective behavior)
- **Else**: DEFECT (final extraction when sustainability is less critical)

## Edge Case Handling

### Early Game (Rounds 1-3)
- Start cooperative to establish good faith
- Quickly adapt if facing immediate widespread defection
- Give opponents benefit of doubt with graduated responses

### Critical Stock Situations
- When stock < 15% of capacity: Prioritize immediate survival over cooperation
- When stock approaches zero: Switch to pure defection for remaining rounds
- Recovery mode: If stock begins recovering after crisis, gradually return to cooperation

### Opponent Behavior Patterns

#### Against Persistent Defectors
- If >70% of players consistently defect: Match their behavior to avoid exploitation
- Maintain periodic cooperation tests (every 3-4 rounds) to detect behavior changes

#### Against Mixed Strategies
- Mirror the average cooperation level of the group
- Be slightly more cooperative than the average to encourage positive spirals

#### Against Other Cooperators
- Maintain high cooperation rate
- Coordinate implicitly through consistent cooperative signaling

## Robustness Features

### Adaptive Thresholds
- Adjust critical thresholds based on game parameters (n and capacity)
- For larger groups (n > 6): Be more cautious about cooperation
- For smaller groups (n ≤ 4): Be more trusting initially

### Memory Management
- Maintain rolling window of last 3 rounds for behavior analysis
- Weight recent behavior more heavily than distant past
- Track individual player patterns when computationally feasible

### Recovery Mechanisms
- **Forgiveness**: After 2 consecutive cooperative rounds from opponents, increase cooperation probability
- **Gradual Re-engagement**: Don't switch immediately from full defection to full cooperation
- **Crisis Override**: Temporarily abandon cooperation during genuine resource crises

## Tournament Considerations

This strategy is designed to:
- **Perform well with other cooperators** by maintaining sustainable resource levels
- **Defend against exploiters** by detecting and responding to defection patterns  
- **Recover from mutual defection cycles** through periodic cooperation tests
- **Adapt to different group sizes** by scaling thresholds appropriately
- **Handle various game lengths** by adjusting endgame behavior

The strategy balances cooperative ideals with practical survival needs, ensuring it contributes to collective welfare while protecting against exploitation and resource depletion.
'''

description_COOPERATIVE_114 = '''
# Adaptive Cooperative Strategy: "Sustainable Steward"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and gradually adjusts based on the collective behavior of all players, with built-in mechanisms to promote cooperation and punish excessive defection.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-2)
- **Always cooperate** in the first round to signal cooperative intent
- **Cooperate** in round 2 unless the stock dropped below 50% of capacity in round 1

### 2. Main Strategy (Rounds 3 to r-2)

**Primary Decision Logic:**
```pseudocode
cooperation_threshold = 0.6  // 60% of players should cooperate
sustainability_threshold = 0.4 * capacity  // Critical stock level

if current_stock < sustainability_threshold:
    if recent_cooperation_rate >= 0.5:
        cooperate()  // Help rebuild if others are trying
    else:
        defect()  // Don't be exploited in crisis
else:
    if recent_cooperation_rate >= cooperation_threshold:
        cooperate()  // Maintain cooperation
    else if recent_cooperation_rate >= 0.3:
        cooperate_with_probability(0.7)  // Mixed strategy to encourage cooperation
    else:
        defect()  // Protect against mass defection
```

**Recent Cooperation Rate Calculation:**
- Look at the last 2 rounds (or all available rounds if fewer)
- Calculate: (number of cooperative actions) / (total actions in window)

### 3. Endgame Strategy (Last 2 rounds)

**Second-to-last round:**
- If stock > 0.7 * capacity: Cooperate (preserve for final round)
- If 0.3 * capacity < stock ≤ 0.7 * capacity: Cooperate if recent_cooperation_rate > 0.4, else defect
- If stock ≤ 0.3 * capacity: Defect (resource too depleted)

**Final round:**
- If stock > 0.5 * capacity: Cooperate (leave something for hypothetical future)
- Else: Defect (extract remaining value)

## Adaptive Mechanisms

### 1. Stock-Based Adjustment
The strategy becomes more conservative as the stock depletes:
- **High stock** (>80% capacity): More willing to cooperate even with some defectors
- **Medium stock** (40-80% capacity): Standard cooperation thresholds apply
- **Low stock** (<40% capacity): Only cooperate if majority is cooperating

### 2. Trend Analysis
Track stock changes over the last 3 rounds:
- **Positive trend**: Be more cooperative (sustainable path)
- **Steep decline**: Be more defensive (unsustainable path)

### 3. Forgiveness Mechanism
If recent cooperation rate improves significantly (increase of >0.3 from previous window), give the group a "fresh chance" by cooperating for one round regardless of other conditions.

## Edge Case Handling

### First Round
- Always cooperate to establish cooperative precedent
- No history to analyze, so default to prosocial behavior

### Stock Depletion
- If stock reaches 0, cooperate in subsequent rounds to help rebuild
- Never contribute to complete resource collapse if avoidable

### All-Defect Scenarios
- If cooperation rate falls below 0.1 for 3+ consecutive rounds, switch to pure defection until cooperation rate improves

### Near-Capacity Scenarios
- If stock is at 95%+ of capacity, always cooperate to maintain optimal sustainable level

## Robustness Features

1. **Gradual Response**: Uses probabilistic cooperation in mixed scenarios rather than binary switches
2. **Multiple Time Horizons**: Considers both recent behavior and longer-term trends
3. **Context Sensitivity**: Adjusts thresholds based on resource availability
4. **Recovery Oriented**: Includes mechanisms to rebuild cooperation after defection spirals
5. **Exploitation Protection**: Won't cooperate indefinitely if consistently exploited

## Strategic Rationale

This strategy is designed to:
- Start cooperatively to establish good norms
- Adapt to the actual behavior of opponents rather than assuming specific strategies
- Maintain resource sustainability as a primary goal
- Provide clear incentives for others to cooperate
- Protect against exploitation while remaining open to renewed cooperation
- Handle the endgame appropriately without being purely selfish

The strategy balances the cooperative mandate with practical considerations about sustainability and adaptation to various opponent behaviors, making it robust for tournament play against diverse strategies.
'''

description_COOPERATIVE_115 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances immediate cooperation with long-term resource sustainability, adapting to opponent behavior while maintaining a fundamentally cooperative stance that protects the common pool for all players.

## Decision Framework

### Primary Decision Rule: Stock-Aware Cooperative Default
- **Default Action**: Always cooperate (C) when stock levels are healthy
- **Stock Health Threshold**: Consider stock "healthy" when current stock ≥ capacity × 0.6
- **Defection Trigger**: Only defect when stock is critically low AND others are exploiting

### Adaptive Response System

**Round 1**: Always cooperate (C)
- Establish cooperative intent
- Gather baseline information about opponent behavior

**Rounds 2 to r-1**: Apply the Stewardship Algorithm

```pseudocode
if current_stock < capacity * 0.3:  // Critical stock level
    if majority_defected_last_round:
        action = D  // Emergency defection to prevent complete collapse
    else:
        action = C  // Maintain cooperation even in crisis
        
else if current_stock < capacity * 0.6:  // Moderate stress
    cooperation_rate = count_cooperators_last_round / n
    if cooperation_rate < 0.4:  // Low cooperation environment
        if my_recent_cooperation_rate > 0.7:  // I've been mostly cooperative
            action = D  // Tactical defection to signal concern
        else:
            action = C  // Return to cooperation
    else:
        action = C  // Maintain cooperation
        
else:  // Healthy stock levels
    action = C  // Always cooperate when resource is abundant
```

**Final Round (Round r)**: 
- If stock > capacity × 0.5: Cooperate (C)
- If stock ≤ capacity × 0.5 AND I've cooperated in >70% of previous rounds: Cooperate (C)  
- Otherwise: Defect (D)

### Edge Case Handling

**Stock Depletion Crisis** (stock < capacity × 0.15):
- Switch to "Conservation Mode": Always cooperate unless ALL other players defected in the last round
- This prevents complete resource collapse even when others are exploiting

**Early Game Exploitation Detection** (Rounds 2-4):
- If >60% of players defect in any of these rounds: Implement "Teaching Response"
- Teaching Response: Defect for exactly 2 rounds, then return to cooperation
- This signals that exploitation has consequences without abandoning cooperation

**Sustained High Cooperation** (>80% of players cooperate for 3+ consecutive rounds):
- Enter "Abundance Mode": Always cooperate regardless of stock level
- This rewards and reinforces cooperative environments

**Mixed Behavior Patterns**:
- Track each opponent's cooperation rate over a sliding window of last 3 rounds
- If an opponent alternates between cooperation and defection: Respond with consistent cooperation
- If an opponent shows declining cooperation: Mirror their cooperation rate with a 1-round delay

### Robustness Features

1. **Forgiveness Mechanism**: After any defection, return to cooperation within 2 rounds if stock levels improve

2. **Trend Analysis**: Consider not just current stock but stock trajectory:
   - If stock is declining despite moderate cooperation rates, increase willingness to defect
   - If stock is stable or growing, maintain cooperative stance even under some exploitation

3. **Collective Action Recognition**: 
   - If cooperation rate suddenly increases after a period of defection, immediately switch to cooperation
   - This enables quick coordination around cooperative equilibria

4. **Anti-Spite Protection**: Never defect more than 2 consecutive rounds, regardless of others' behavior
   - This prevents destructive spirals while maintaining credible deterrence

## Strategic Rationale

This strategy is designed to:
- **Initiate Cooperation**: Start cooperatively to establish positive precedent
- **Sustain Resources**: Prioritize long-term sustainability over short-term gains
- **Adapt Intelligently**: Respond to exploitation without abandoning cooperative goals
- **Enable Recovery**: Provide pathways back to cooperation after conflicts
- **Handle Diversity**: Work effectively against both highly cooperative and highly exploitative opponents

The strategy recognizes that in a common pool resource game, everyone's long-term interests align with resource preservation, even if short-term incentives favor defection. By maintaining this focus while strategically responding to others' behavior, it aims to achieve both high individual payoffs and collective welfare.
'''

description_COOPERATIVE_116 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive self-preservation, maintaining cooperation as long as the resource remains viable while protecting against exploitation and resource collapse.

## Strategy Overview

**ATCS** uses dynamic thresholds based on resource health and opponent behavior patterns to determine when to cooperate versus defect. The strategy prioritizes long-term sustainability while adapting to the cooperative climate.

## Decision Rules

### 1. Resource Health Assessment
```
resource_health = current_stock / capacity
critical_threshold = 0.3
sustainable_threshold = 0.6
```

### 2. Cooperation Climate Analysis
Track opponent behavior over a sliding window of recent rounds:
```
cooperation_rate = (cooperators in last 3 rounds) / (total players × 3 rounds)
high_cooperation = cooperation_rate ≥ 0.7
medium_cooperation = 0.4 ≤ cooperation_rate < 0.7
low_cooperation = cooperation_rate < 0.4
```

### 3. Main Decision Logic

**Round 1 (First Round):**
- Always COOPERATE to signal cooperative intent and establish baseline

**Subsequent Rounds:**
```
IF resource_health < critical_threshold:
    IF cooperation_rate > 0.5:
        COOPERATE (try to save the resource with others)
    ELSE:
        DEFECT (resource likely doomed, minimize personal loss)
        
ELSE IF resource_health < sustainable_threshold:
    IF high_cooperation:
        COOPERATE (resource can recover with group effort)
    ELSE IF medium_cooperation AND rounds_remaining > 3:
        COOPERATE (encourage cooperation, time to recover)
    ELSE:
        DEFECT (protect against exploitation)
        
ELSE: // Resource is healthy (≥ 60% capacity)
    IF low_cooperation:
        DEFECT (don't be exploited when resource is abundant)
    ELSE:
        COOPERATE (maintain sustainable harvesting)
```

**Final Round:**
- If resource_health > 0.4: DEFECT (no future consequences)
- Else: COOPERATE (solidarity gesture, minimal impact)

## Edge Cases and Special Conditions

### 4. Exploitation Protection
If detecting systematic exploitation (same players consistently defecting while others cooperate):
```
personal_exploitation_count = times_I_cooperated_while_majority_defected_in_last_4_rounds

IF personal_exploitation_count ≥ 3:
    DEFECT for next 2 rounds (punishment phase)
```

### 5. Recovery Incentives
When resource health is improving (stock increasing between rounds):
```
IF stock_growth_trend > 0 AND cooperation_rate ≥ 0.5:
    bias_toward_cooperation = True (reward positive momentum)
```

### 6. End-Game Dynamics
In final 20% of rounds:
```
IF rounds_remaining ≤ max(2, r/5):
    IF resource_health > sustainable_threshold:
        Apply normal rules but with slight defection bias
    ELSE:
        Prioritize resource preservation (cooperate more readily)
```

## Adaptive Features

### 7. Learning Component
Track which strategies work best against current opponents:
```
IF cooperation led to stock growth in last 2 rounds:
    cooperation_confidence += 0.1
ELSE:
    cooperation_confidence -= 0.1

Adjust thresholds based on cooperation_confidence:
- High confidence: More willing to cooperate in marginal situations
- Low confidence: Require stronger cooperation signals from others
```

### 8. Stock Trajectory Prediction
```
predicted_stock_next_round = estimate_based_on_current_cooperation_patterns
IF predicted_stock < critical_threshold:
    Increase cooperation threshold (try to prevent collapse)
```

## Strategy Rationale

1. **Cooperative Foundation**: Starts cooperative and maintains cooperation when resource is healthy and others reciprocate

2. **Adaptive Thresholds**: Adjusts behavior based on both resource state and social dynamics rather than rigid rules

3. **Exploitation Resistance**: Protects against being systematically exploited while maintaining cooperative stance when viable

4. **Resource Preservation**: Prioritizes resource sustainability, especially in critical situations where cooperation could prevent collapse

5. **Context Awareness**: Considers remaining rounds, resource trajectory, and opponent patterns simultaneously

6. **Graduated Response**: Uses proportional responses rather than binary switches, maintaining cooperation incentives

This strategy aims to foster cooperation while being robust enough to perform well even against predominantly selfish opponents, adapting its cooperative stance based on both resource viability and social dynamics.
'''

description_COOPERATIVE_117 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but includes protective mechanisms against exploitation. The key insight is that cooperation becomes more valuable as stock depletes, making defection increasingly costly for everyone.

## Decision Rules

### Primary Decision Framework:
```
IF first_round:
    PLAY C
ELIF last_round:
    IF stock >= capacity * 0.3:
        PLAY C
    ELSE:
        PLAY D (emergency extraction)
ELSE:
    Apply main strategy logic
```

### Main Strategy Logic:

1. **Stock Health Assessment**
   - Critical zone: stock < capacity * 0.25
   - Danger zone: capacity * 0.25 ≤ stock < capacity * 0.5  
   - Safe zone: stock ≥ capacity * 0.5

2. **Cooperation Threshold Calculation**
   ```
   cooperation_threshold = max(0.2, min(0.8, 
       0.3 + 0.4 * (stock / capacity) + 0.1 * (rounds_remaining / total_rounds)
   ))
   ```

3. **Historical Analysis**
   - Calculate recent defection rate among all players over last 3 rounds
   - If no history available, assume 50% cooperation rate
   - Weight more recent rounds higher in the calculation

4. **Decision Rule**
   ```
   recent_defection_rate = calculate_recent_defection_rate(last_3_rounds)
   
   IF stock_zone == "critical":
       IF recent_defection_rate > 0.7:
           PLAY D (protect against tragedy of commons)
       ELSE:
           PLAY C (try to preserve remaining stock)
   
   ELIF stock_zone == "danger":
       IF recent_defection_rate > cooperation_threshold:
           PLAY D (defensive defection)
       ELSE:
           PLAY C (encourage sustainability)
   
   ELSE: // safe zone
       IF recent_defection_rate > 0.8:
           PLAY D (punish excessive defection)
       ELSE:
           PLAY C (maintain cooperation)
   ```

## Edge Case Handling

### First Round:
- Always cooperate to signal cooperative intent
- Establishes baseline for measuring others' behavior

### Last Round:
- If stock is healthy (≥30% capacity): Cooperate to maintain long-term thinking
- If stock is depleted (<30% capacity): Defect for emergency extraction
- This prevents others from exploiting end-game cooperation

### Stock Depletion Scenarios:
- If stock reaches 0: Strategy becomes irrelevant (all payoffs = 0)
- If stock is very low but positive: Heavily favor cooperation to allow regeneration

### High Defection Environment:
- If >80% of players consistently defect: Switch to defensive mode
- Continue monitoring for opportunities to rebuild cooperation

## Adaptive Features

1. **Dynamic Thresholds**: Cooperation threshold adjusts based on:
   - Current stock level (lower stock = more cooperative)
   - Remaining rounds (fewer rounds = slightly less cooperative)

2. **Learning Component**: 
   - Tracks opponents' behavior patterns
   - Responds to recent trends rather than full history
   - Gives players opportunity to reform after defection

3. **Forgiveness Mechanism**:
   - After 2 consecutive rounds of high cooperation (>60%), reset to baseline cooperation
   - Prevents permanent punishment cycles

## Robustness Against Common Strategies

- **Against All-Defectors**: Provides measured resistance while maintaining some cooperation
- **Against Tit-for-Tat variants**: Establishes cooperative equilibrium quickly
- **Against Random strategies**: Adapts to average behavior over time
- **Against Exploitative strategies**: Detects and responds to systematic exploitation

## Strategic Rationale

This strategy is fundamentally cooperative because:
1. It defaults to cooperation in most situations
2. It prioritizes resource sustainability over short-term gains  
3. It includes forgiveness mechanisms to rebuild cooperation
4. It only defects defensively or in crisis situations

The strategy is adaptive because it:
1. Responds to stock levels dynamically
2. Learns from recent opponent behavior
3. Adjusts cooperation thresholds based on game state
4. Balances immediate needs with long-term sustainability

This approach should perform well in a diverse tournament by being "nice" (cooperative by default), "retaliatory" (responds to exploitation), "forgiving" (allows cooperation to resume), and "clear" (predictable responses to different situations).
'''

description_COOPERATIVE_118 = '''
I'll design a cooperative strategy called **"Adaptive Stewardship"** that balances cooperation with sustainability and defense against exploitation.

## Core Philosophy
This strategy treats the common pool as a shared resource that requires active stewardship. It prioritizes long-term sustainability while being prepared to defend against excessive exploitation.

## Decision Rules

### Primary Decision Framework:
The strategy operates on three key principles:

1. **Sustainability Threshold**: Always cooperate when the stock is below a critical sustainability level
2. **Reciprocity Monitoring**: Track collective behavior and respond proportionally
3. **Future-Oriented Protection**: Defend the resource when depletion threatens long-term viability

### Specific Decision Rules:

**Rule 1: Sustainability Override**
- If `stock < capacity/2`: Always COOPERATE
- Rationale: When stock is critically low, any defection risks resource collapse

**Rule 2: Reciprocity-Based Response**
- Track the "cooperation ratio" over the last 3 rounds (or all rounds if fewer than 3)
- Cooperation ratio = (total C actions by others) / (total actions by others)
- If cooperation ratio ≥ 0.6: COOPERATE
- If cooperation ratio < 0.6: Use graduated response (see Rule 3)

**Rule 3: Graduated Response to Defection**
When cooperation ratio < 0.6:
- If cooperation ratio ≥ 0.3: COOPERATE with 70% probability, DEFECT with 30%
- If cooperation ratio < 0.3: COOPERATE with 40% probability, DEFECT with 60%
- This prevents pure retaliation while discouraging exploitation

**Rule 4: Future Stock Protection**
- Calculate projected stock depletion: If all players continue current behavior patterns, will stock fall below `capacity/4` within 2 rounds?
- If yes, and current stock > `capacity/2`: DEFECT (defensive extraction)
- Rationale: Extract value before others destroy the resource entirely

## Edge Case Handling

### First Round:
- Always COOPERATE
- Establishes cooperative intent and gathers initial information about other players

### Last Round:
- If stock > `capacity/3`: COOPERATE (leave something for hypothetical future rounds)
- If stock ≤ `capacity/3`: DEFECT (extract remaining value since resource is already critically depleted)

### Very Low Stock Situations:
- If stock < `capacity/4`: Always COOPERATE regardless of others' behavior
- If stock approaches zero (< n): COOPERATE (defection becomes meaningless)

### High Defection Environment:
- If cooperation ratio < 0.2 for 3+ consecutive rounds: Switch to "Protective Mode"
- Protective Mode: DEFECT 80% of the time, but still COOPERATE 20% to signal willingness to return to cooperation

## Adaptive Elements

### Learning Component:
- Maintain a "trust score" for the group based on recent behavior
- Trust score = weighted average of cooperation ratios, with recent rounds weighted more heavily
- Higher trust scores increase cooperation probability

### Stock Trajectory Analysis:
- Monitor rate of stock change over last 2-3 rounds
- If stock is recovering (growing): Increase cooperation probability by 10%
- If stock is declining rapidly: Increase defection probability proportionally

### End-Game Adjustment:
- In final 20% of rounds: Gradually increase cooperation probability to leave a positive legacy
- Exception: If stock is already critically low, focus on sustainable extraction

## Pseudocode Structure:

```
function decide_action(current_stock, round_number, history, n, capacity, r):
    
    // Edge cases
    if round_number == 1:
        return COOPERATE
    
    if current_stock < capacity/4:
        return COOPERATE
    
    // Calculate cooperation ratio from recent history
    coop_ratio = calculate_cooperation_ratio(history, lookback=3)
    
    // Sustainability override
    if current_stock < capacity/2:
        return COOPERATE
    
    // Future protection check
    if future_stock_critical(history, current_stock, capacity):
        if current_stock > capacity/2:
            return DEFECT
    
    // Last round handling
    if round_number == r:
        if current_stock > capacity/3:
            return COOPERATE
        else:
            return DEFECT
    
    // Primary reciprocity-based decision
    if coop_ratio >= 0.6:
        return COOPERATE
    elif coop_ratio >= 0.3:
        return random_choice(COOPERATE: 0.7, DEFECT: 0.3)
    else:
        return random_choice(COOPERATE: 0.4, DEFECT: 0.6)
```

## Strategic Rationale

This strategy is cooperative because it:
1. **Defaults to cooperation** in most situations
2. **Protects the resource** from depletion even when others don't
3. **Rewards collective cooperation** with continued cooperation
4. **Maintains hope for recovery** by never completely abandoning cooperation

The strategy is robust because it:
1. **Adapts to different opponent types** through graduated responses
2. **Prevents exploitation** without being overly punitive
3. **Maintains long-term thinking** even under pressure
4. **Handles edge cases gracefully** without breaking down

This approach should perform well against both highly cooperative and highly defective opponents while maximizing the chance of sustainable resource management.
'''

description_COOPERATIVE_119 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability of the common resource while being adaptive to opponent behavior. It starts cooperatively but includes defensive mechanisms to prevent exploitation while maintaining paths back to cooperation.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first round to signal cooperative intent
- Continue cooperating in rounds 2-3 unless the stock drops below a critical threshold

### 2. Stock Health Assessment
Define stock health levels:
- **Healthy**: stock ≥ 0.7 × capacity
- **Stressed**: 0.4 × capacity ≤ stock < 0.7 × capacity  
- **Critical**: stock < 0.4 × capacity

### 3. Main Decision Rules

#### Rule 1: Critical Stock Protection
```
IF stock < 0.4 × capacity:
    COOPERATE (regardless of others' recent behavior)
```
When the resource is critically low, always cooperate to maximize recovery potential.

#### Rule 2: Exploitation Detection and Response
Track recent defection rates:
```
defection_rate = (number of D plays by others in last 2 rounds) / (2 × (n-1))

IF defection_rate > 0.6 AND stock > 0.4 × capacity:
    DEFECT (defensive defection)
ELSE IF defection_rate ≤ 0.3:
    COOPERATE (reward cooperation)
ELSE:
    Use graduated response (see Rule 3)
```

#### Rule 3: Graduated Response System
For moderate defection rates (0.3 < defection_rate ≤ 0.6):
```
IF stock is Healthy (≥ 0.7 × capacity):
    Cooperate with probability = 1 - defection_rate
ELSE IF stock is Stressed (0.4-0.7 × capacity):
    Cooperate with probability = 0.8 - defection_rate
```

### 4. Endgame Strategy (Last 20% of rounds)
As the game approaches its end, account for reduced future cooperation incentives:

```
rounds_remaining = r - current_round
endgame_threshold = 0.2 × r

IF rounds_remaining ≤ endgame_threshold:
    IF stock is Critical:
        COOPERATE (preserve what little remains)
    ELSE:
        Apply stricter defection response:
        IF defection_rate > 0.4:
            DEFECT
        ELSE:
            COOPERATE
```

### 5. Forgiveness and Recovery Mechanism
To encourage return to cooperation:
```
IF (previous 2 rounds had defection_rate ≤ 0.2) AND (stock is recovering):
    Reset to cooperative default, regardless of earlier history
```

## Edge Cases and Special Situations

### First Round
Always cooperate to establish cooperative intent and test others' strategies.

### Stock Depletion Recovery
If stock reaches 0:
- Always cooperate until stock recovers to at least 0.3 × capacity
- Signal commitment to resource recovery

### Highly Volatile Opponents
If opponents show erratic behavior (alternating between full cooperation and full defection):
- Focus on stock level as primary decision factor
- Use more conservative cooperation thresholds

### Late Game Cooperation Breakdown
In final rounds, if cooperation completely collapses:
- Switch to pure stock preservation mode
- Cooperate only if it prevents total resource collapse

## Robustness Features

1. **Stock-First Priority**: Always prioritizes resource sustainability over short-term gains
2. **Graduated Responses**: Avoids harsh punishment that might trigger retaliation spirals  
3. **Forgiveness Mechanism**: Provides clear path back to cooperation
4. **Context Sensitivity**: Adapts to both stock levels and opponent behavior patterns
5. **Endgame Awareness**: Accounts for reduced cooperation incentives near game end

## Strategic Rationale

This strategy balances three key objectives:
- **Sustainability**: Protects the resource from collapse
- **Cooperation**: Maintains cooperative stance when possible
- **Adaptability**: Responds appropriately to various opponent strategies

The strategy is designed to work well against:
- Pure cooperators (mutual benefit)
- Mixed strategies (gradual adaptation)  
- Conditional cooperators (reciprocal cooperation)
- Even some exploitative strategies (defensive mechanisms)

By prioritizing resource health and using graduated responses rather than harsh retaliation, this strategy aims to maintain the commons while being robust against a wide variety of opponent behaviors.
'''

description_COOPERATIVE_120 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances cooperative stewardship of the common resource with adaptive responses to others' behavior. It aims to maintain the resource while being resilient against exploitation, using a "trust but verify" approach with graduated responses.

## Decision Rules

### 1. First Round Behavior
**Always COOPERATE** in the first round to signal cooperative intent and establish a baseline for measuring others' behavior.

### 2. Stock Health Assessment
Calculate a **Stock Health Ratio (SHR)**:
```
SHR = current_stock / capacity
```

- **Healthy stock** (SHR ≥ 0.7): More room for cooperation
- **Stressed stock** (SHR < 0.7 but ≥ 0.4): Moderate concern
- **Critical stock** (SHR < 0.4): Resource preservation mode

### 3. Cooperation Level Tracking
Track the **Cooperation Rate** of other players over the last 3 rounds (or all rounds if fewer than 3):
```
Cooperation_Rate = (Number of C actions by others) / (Total actions by others)
```

### 4. Main Decision Logic

**COOPERATE if:**
- Stock Health Ratio ≥ 0.7 AND Cooperation Rate ≥ 0.5, OR
- Stock Health Ratio ≥ 0.4 AND Cooperation Rate ≥ 0.7, OR
- It's the last round AND current stock > 0 (final stewardship gesture)

**Otherwise DEFECT**

### 5. Forgiveness Mechanism
Every 4 rounds, reset the cooperation rate calculation to allow for behavioral changes. This prevents being permanently stuck in defection cycles due to early bad behavior.

## Edge Case Handling

### First Round
Always COOPERATE to establish cooperative baseline and signal intent.

### Early Rounds (Rounds 2-3)
Use a **lenient threshold**: COOPERATE if Cooperation Rate ≥ 0.3 and SHR ≥ 0.5. This accounts for initial exploration by other players.

### Last Round
If stock > 0, COOPERATE as a final stewardship gesture. If stock = 0, action doesn't matter (COOPERATE for consistency).

### Stock Depletion
If stock reaches 0 in any round, all subsequent actions are meaningless, but continue to COOPERATE to maintain consistent signaling.

### High Defection Environment
If Cooperation Rate falls below 0.2 for 3 consecutive measurement periods, enter "Survival Mode": only COOPERATE when SHR ≥ 0.8, otherwise DEFECT.

## Cooperative Alignment Features

1. **Default Cooperation**: The strategy defaults to cooperation when conditions are reasonable
2. **Resource Stewardship**: Actively protects the resource when it becomes stressed
3. **Forgiveness**: Regularly resets behavioral assessments to allow for cooperation renewal
4. **Final Cooperation**: Ends on a cooperative note when possible
5. **Graduated Response**: Doesn't immediately punish defection, allowing for recovery

## Pseudocode Summary

```
function decide_action(round, stock, capacity, action_history):
    SHR = stock / capacity
    
    if round == 1:
        return COOPERATE
    
    # Calculate cooperation rate over last 3 rounds
    recent_rounds = min(3, round - 1)
    others_actions = get_others_actions(action_history, recent_rounds)
    cooperation_rate = count_cooperations(others_actions) / len(others_actions)
    
    # Forgiveness mechanism
    if round % 4 == 1 and round > 4:
        cooperation_rate = calculate_fresh_cooperation_rate()
    
    # Early game leniency
    if round <= 3:
        cooperation_threshold = 0.3
        stock_threshold = 0.5
    else:
        cooperation_threshold = 0.5 if SHR >= 0.7 else 0.7
        stock_threshold = 0.7 if SHR >= 0.7 else 0.4
    
    # Last round stewardship
    if round == total_rounds and stock > 0:
        return COOPERATE
    
    # Survival mode check
    if in_survival_mode(cooperation_rate):
        return COOPERATE if SHR >= 0.8 else DEFECT
    
    # Main decision logic
    if (SHR >= 0.7 and cooperation_rate >= 0.5) or
       (SHR >= 0.4 and cooperation_rate >= 0.7):
        return COOPERATE
    else:
        return DEFECT
```

This strategy maintains a cooperative orientation while adapting to both resource constraints and opponent behavior, making it robust across various tournament scenarios.
'''

description_COOPERATIVE_121 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being cooperative by default, but adapts based on the collective behavior observed in the game. It aims to maintain the resource pool while encouraging cooperation through example and conditional reciprocation.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Stock-Aware Cooperation**
- **Cooperate (C)** when: `current_stock >= capacity * 0.6`
- **Defect (D)** when: `current_stock < capacity * 0.6`

**Override Rule: Reciprocity Adjustment**
- Track the "cooperation rate" = (number of C actions by others) / (total actions by others) in the last 3 rounds
- If cooperation_rate < 0.3 AND current_stock >= capacity * 0.4: Switch to **conditional defection**
- If cooperation_rate >= 0.7 AND in conditional defection mode: Return to stock-aware cooperation

**Emergency Rule: Resource Collapse Prevention**
- If `current_stock < capacity * 0.2`: **Always Cooperate** (attempt to save the resource)
- If `current_stock < capacity * 0.1`: **Always Cooperate** with high urgency

### 2. Edge Case Handling

**First Round:**
- Always **Cooperate** to signal cooperative intent and establish a sustainable baseline

**Last Round (when r is known):**
- If `current_stock >= capacity * 0.5`: **Cooperate** (maintain cooperative reputation)
- If `current_stock < capacity * 0.5`: Use primary stock-aware rule

**Early Rounds (rounds 2-3):**
- **Cooperate** unless stock has already dropped below 40% of capacity
- This gives others a chance to establish cooperative patterns

### 3. Adaptive Mechanisms

**Learning Component:**
- Maintain a "trust score" for the group: starts at 1.0
- After each round: `trust_score = 0.8 * trust_score + 0.2 * cooperation_rate`
- When trust_score < 0.4: Become more defensive (lower cooperation thresholds by 10%)
- When trust_score > 0.8: Become more generous (raise cooperation thresholds by 10%)

**Stock Trajectory Analysis:**
- Track stock changes over the last 3 rounds
- If stock is declining rapidly (>20% per round on average): Increase cooperation probability
- If stock is stable or growing: Maintain current strategy

## Pseudocode

```python
def decide_action(current_round, total_rounds, current_stock, capacity, 
                 my_history, others_history, n_players):
    
    # Initialize on first call
    if current_round == 1:
        return 'C'  # Always cooperate first
    
    # Calculate cooperation rate of others in last 3 rounds
    recent_rounds = min(3, current_round - 1)
    others_actions = get_last_n_rounds(others_history, recent_rounds)
    cooperation_rate = count_cooperations(others_actions) / len(others_actions)
    
    # Update trust score
    trust_score = update_trust(cooperation_rate)
    
    # Adjust thresholds based on trust
    high_threshold = 0.6 + (0.1 if trust_score > 0.8 else 0) - (0.1 if trust_score < 0.4 else 0)
    medium_threshold = 0.4
    emergency_threshold = 0.2
    
    stock_ratio = current_stock / capacity
    
    # Emergency: Resource collapse prevention
    if stock_ratio < emergency_threshold:
        return 'C'
    
    # Last round special case
    if current_round == total_rounds:
        if stock_ratio >= 0.5:
            return 'C'
        # Otherwise fall through to normal rules
    
    # Main decision logic
    if stock_ratio >= high_threshold:
        return 'C'
    elif stock_ratio >= medium_threshold and cooperation_rate >= 0.7:
        return 'C'  # Reward high cooperation even at medium stock
    elif stock_ratio < medium_threshold and cooperation_rate < 0.3:
        return 'D'  # Defensive defection when stock low and others uncooperative
    else:
        # Default to cooperation unless in very bad situations
        return 'C' if stock_ratio >= medium_threshold else 'D'
```

## Key Strategic Features

1. **Sustainability Focus**: Prioritizes maintaining the resource above critical thresholds
2. **Conditional Cooperation**: Starts cooperative but adapts to others' behavior
3. **Forgiveness**: Returns to cooperation when others improve their behavior
4. **Crisis Management**: Becomes more cooperative when the resource is in danger
5. **Reputation Building**: Maintains cooperative stance in most situations to encourage others
6. **Adaptive Thresholds**: Adjusts decision points based on observed group behavior

This strategy balances the need to be cooperative with the reality that it must adapt to potentially non-cooperative opponents, while always keeping the long-term sustainability of the shared resource as a primary concern.
'''

description_COOPERATIVE_122 = '''
# Adaptive Stewardship Strategy

## Core Philosophy
This strategy balances cooperative resource stewardship with adaptive responses to exploitation, aiming to maintain the common pool while protecting against defectors through graduated reciprocation.

## Decision Framework

### **Phase 1: Cooperative Foundation (First Round)**
- **Always cooperate** in round 1 to signal cooperative intent and establish a baseline for opponent behavior assessment.

### **Phase 2: Adaptive Response (Rounds 2 to r-1)**

**Primary Decision Rule: Stock-Weighted Trust System**

```pseudocode
trust_score = initial_trust + cooperation_bonus - defection_penalty
stock_health = current_stock / capacity
cooperation_threshold = base_threshold * stock_health

if trust_score >= cooperation_threshold:
    play COOPERATE
else:
    play DEFECT
```

**Parameter Calculations:**
- `initial_trust = 0.5` (neutral starting point)
- `cooperation_bonus = +0.1` per opponent cooperation in previous round
- `defection_penalty = -0.2` per opponent defection in previous round
- `base_threshold = 0.3` (becomes more lenient as stock depletes)

**Key Adaptive Features:**

1. **Trust Tracking**: Maintain running assessment of opponents' cooperative tendency
   - Recent actions weighted more heavily than distant history
   - Forgiveness mechanism: slowly increase trust over time if no recent defections

2. **Stock-Sensitive Thresholds**: Lower cooperation threshold when stock is critically low
   - When stock < 0.3 × capacity: reduce threshold by 50%
   - When stock < 0.1 × capacity: cooperate only if >80% opponents cooperated last round

3. **Majority Follower Clause**: If uncertain (trust near threshold), follow the apparent majority strategy from previous round

### **Phase 3: Endgame Strategy (Final Round)**

**Final Round Decision Tree:**
```pseudocode
if current_stock <= n:  // Critically depleted
    play COOPERATE  // Preserve remaining resources
else if opponent_cooperation_rate > 0.6:  // Generally cooperative group
    play COOPERATE  // Reward good stewardship
else if current_stock > 1.5 * capacity:  // Abundant resources
    play COOPERATE  // No need to be greedy
else:
    // Mixed strategy based on expected opponent behavior
    if predicted_defectors < n/2:
        play COOPERATE
    else:
        play DEFECT
```

## Edge Case Handling

### **Resource Depletion Crisis**
When stock drops below sustainable threshold (stock < n):
- Switch to "Crisis Cooperation" mode
- Cooperate for next 2 rounds regardless of opponent behavior
- Only defect if opponents show >75% defection rate during crisis

### **Resource Abundance**
When stock remains at capacity for 3+ consecutive rounds:
- Increase cooperation threshold slightly (more forgiving of occasional defections)
- Focus on maintaining sustainable equilibrium

### **Opponent Pattern Recognition**
- **Always Cooperators**: Reciprocate with consistent cooperation
- **Always Defectors**: Defect after 2 rounds of confirmation, but probe with cooperation every 3-4 rounds
- **Tit-for-Tat Players**: Mirror their strategy with slight cooperation bias
- **Random Players**: Use stock-health weighted decisions with moderate trust threshold

## Robustness Features

1. **Graduated Response**: Not purely reactive - considers magnitude and persistence of opponent behavior

2. **Noise Tolerance**: Single-round defections don't immediately trigger retaliation if overall trust remains high

3. **Recovery Incentives**: Provides pathways for defectors to rebuild trust through sustained cooperation

4. **Dynamic Thresholds**: Adapts decision criteria based on resource scarcity and game progress

5. **Collective Action Recognition**: Responds to group-level cooperation patterns, not just individual histories

## Expected Outcomes

This strategy should:
- **Sustain cooperation** in groups with other cooperative strategies
- **Maintain resource viability** across multiple rounds through stock-conscious decisions  
- **Resist exploitation** by adaptive punishment of persistent defectors
- **Recover from conflicts** through forgiveness and trust-rebuilding mechanisms
- **Handle diverse opponent mixes** through nuanced behavioral assessment

The strategy prioritizes long-term resource sustainability while remaining flexible enough to adapt to various opponent behaviors encountered in tournament play.
'''

description_COOPERATIVE_123 = '''
# Adaptive Cooperative Resource Management Strategy

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and adjusts based on observed patterns, always maintaining a bias toward cooperation when the resource can sustain it.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
- **Always cooperate (C)** in round 1
- Rationale: Establish cooperative intent and assess others' initial strategies

### 2. Stock Health Assessment
Before each decision, evaluate resource health:
- **Healthy**: stock ≥ 0.6 × capacity
- **Stressed**: 0.3 × capacity ≤ stock < 0.6 × capacity  
- **Critical**: stock < 0.3 × capacity

### 3. Core Decision Algorithm

**For rounds 2 to r-1:**

```
if stock_health == "Critical":
    # Emergency cooperation to rebuild resource
    return COOPERATE
    
elif stock_health == "Healthy":
    # Can afford some flexibility based on opponent behavior
    defection_rate = count_recent_defections() / (n * lookback_window)
    
    if defection_rate > 0.7:
        # High defection environment - limited retaliation
        if my_recent_cooperations > 2:
            return DEFECT  # Punish excessive defection
        else:
            return COOPERATE  # Return to cooperation quickly
    else:
        return COOPERATE
        
else:  # stock_health == "Stressed"
    # Moderate stress - be more selective about cooperation
    defection_rate = count_recent_defections() / (n * lookback_window)
    
    if defection_rate > 0.5:
        # Too much defection for current stock level
        return DEFECT if rounds_since_my_defection > 2 else COOPERATE
    else:
        return COOPERATE
```

### 4. Lookback Window
- Use dynamic lookback: `min(3, current_round - 1)`
- This captures recent trends without overweighting ancient history

### 5. Final Round Handling
**In the last round (round r):**
- If stock is Critical: **Cooperate** (maintain consistency with cooperative identity)
- If stock is Healthy and defection_rate in recent rounds > 0.8: **Defect** (single punishment)
- Otherwise: **Cooperate** (end on cooperative note)

## Edge Cases

### Resource Collapse Scenario
If stock reaches 0:
- **Always cooperate** until resource recovers above 0.1 × capacity
- This prevents permanent depletion

### High Cooperation Environment
If defection_rate < 0.2 consistently:
- **Always cooperate** - reward and maintain good collective behavior

### Oscillating Opponent Behavior
If opponents alternate between high/low defection:
- Track longer-term trends (up to 5 rounds) rather than just immediate recent behavior
- Avoid getting caught in reactive cycles

## Robustness Features

1. **Stock-Dependent Flexibility**: More cooperative when resource is stressed, preventing collapse
2. **Graduated Response**: Doesn't immediately retaliate - gives benefit of doubt
3. **Quick Forgiveness**: Returns to cooperation after limited punishment
4. **Sustainability Priority**: Will sacrifice short-term gains to maintain long-term resource health
5. **Anti-Exploitation**: Has mechanisms to avoid being completely exploited by persistent defectors

## Key Principles

- **Default to Cooperation**: When in doubt, cooperate
- **Protect the Resource**: Never let stock health override basic sustainability needs  
- **Measured Responses**: Punishments are limited and followed by return to cooperation
- **Adaptive Learning**: Adjusts strategy based on observed opponent patterns while maintaining cooperative core
- **Long-term Thinking**: Prioritizes total payoff over r rounds rather than maximizing individual round payoffs

This strategy aims to foster cooperation while being resilient enough to handle various opponent behaviors, from pure cooperation to moderate defection, while always prioritizing the sustainability of the common resource.
'''

description_COOPERATIVE_124 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term sustainability while being responsive to opponent behavior. It starts cooperative but adapts based on observed patterns to maintain both the resource and competitive viability.

## Decision Framework

### 1. Initial Cooperation Phase (Rounds 1-3 or first 25% of game)
- **Always cooperate** to establish good faith and test opponent intentions
- This builds trust and maintains high stock levels early
- Rationale: Early cooperation is essential for resource sustainability

### 2. Adaptive Response System
After the initial phase, use a **Stock-Aware Reciprocity** approach:

```pseudocode
IF current_stock <= capacity * 0.3:  // Critical stock level
    COOPERATE  // Always protect severely depleted resources
    
ELSE IF current_stock >= capacity * 0.8:  // Abundant stock
    Use reciprocity-based decision
    
ELSE:  // Moderate stock (30-80% of capacity)
    Use weighted decision combining reciprocity and stock protection
```

### 3. Reciprocity Component
Track opponent cooperation rate over a sliding window of recent rounds:

```pseudocode
cooperation_threshold = 0.4  // Minimum acceptable cooperation rate
recent_window = min(5, current_round - initial_phase_length)

opponent_coop_rate = count_cooperations_in_recent_window / recent_window

IF opponent_coop_rate >= cooperation_threshold:
    COOPERATE
ELSE:
    DEFECT with probability (1 - opponent_coop_rate)
```

### 4. End Game Considerations
In final 20% of rounds:
- If stock > 50% capacity: Continue normal strategy
- If stock ≤ 50% capacity: **Always cooperate** to prevent collapse
- If final round and opponents have been highly uncooperative: Consider defection only if stock > 70% capacity

### 5. Forgiveness Mechanism
- Every 3-5 rounds, attempt cooperation even if opponents have been uncooperative
- This prevents permanent punishment spirals and tests if opponents have changed strategy
- Forgiveness frequency increases as stock levels decrease

## Specific Decision Rules

### Round 1:
**Always COOPERATE** - establish cooperative intent

### Rounds 2-3 (or first 25%):
**Always COOPERATE** - build trust and maintain resources

### Middle Game:
```pseudocode
stock_ratio = current_stock / capacity
opponent_recent_coop = cooperation_rate_last_5_rounds

IF stock_ratio <= 0.3:
    COOPERATE  // Resource protection override
    
ELSE IF stock_ratio >= 0.8 AND opponent_recent_coop >= 0.6:
    COOPERATE  // Abundant resources + cooperative opponents
    
ELSE IF stock_ratio >= 0.8 AND opponent_recent_coop < 0.4:
    DEFECT with probability 0.7  // Punish free-riders when safe
    
ELSE:  // Moderate stock levels
    cooperation_probability = 0.3 + 0.4 * opponent_recent_coop + 0.3 * stock_ratio
    COOPERATE with cooperation_probability
```

### Final 20% of rounds:
```pseudocode
IF stock_ratio <= 0.5:
    COOPERATE  // Prevent resource collapse
ELSE IF final_round AND stock_ratio > 0.7 AND opponent_recent_coop < 0.3:
    DEFECT  // Last chance defection only if safe and opponents are exploitative
ELSE:
    Continue normal middle-game strategy
```

## Edge Case Handling

**Stock Depletion Crisis (stock < 10% capacity):**
- Override all other rules and **always cooperate**
- Continue until stock recovers to >30% capacity

**All Opponents Always Defect:**
- Still cooperate when stock <30% capacity
- In moderate/high stock: alternate between cooperation and defection to balance resource protection with competitive necessity

**Highly Variable Opponents:**
- Increase weight on stock level relative to reciprocity
- Use longer averaging window (7-8 rounds) for more stable decisions

## Key Features

1. **Resource-First Approach**: Stock level always influences decisions, preventing tragedy of commons
2. **Graduated Reciprocity**: Responds proportionally to opponent behavior rather than binary tit-for-tat
3. **Forgiveness**: Regular cooperation attempts prevent permanent conflict
4. **Adaptive Thresholds**: Decision boundaries adjust based on game length and stock levels
5. **End-Game Protection**: Emphasizes sustainability as game concludes

This strategy balances cooperation with competitive viability, prioritizing long-term resource sustainability while remaining responsive to opponent strategies.
'''

description_COOPERATIVE_125 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy aims to maximize long-term collective welfare while being robust against exploitation. It operates on the principle of **conditional cooperation** with **adaptive forgiveness**, maintaining the resource while protecting against free-riders.

## Decision Framework

### 1. Initial Cooperation Phase
- **Always cooperate in round 1** to signal cooperative intent
- **Cooperate in round 2** unless stock has fallen below 75% of capacity after round 1 (indicating massive defection)

### 2. Main Strategy: Adaptive Tit-for-Tat with Stock Protection

```pseudocode
For round t (where t > 2):
  
  // Calculate cooperation metrics
  previous_cooperation_rate = count_cooperators_last_round / n
  stock_health = current_stock / capacity
  rounds_remaining = r - t + 1
  
  // Determine base cooperation threshold
  if rounds_remaining <= 3:
    cooperation_threshold = 0.3  // More forgiving near end
  else if stock_health < 0.4:
    cooperation_threshold = 0.6  // Stricter when stock is low
  else:
    cooperation_threshold = 0.5  // Standard threshold
  
  // Main decision logic
  if stock_health < 0.2:
    // Emergency: Stock critically low
    action = COOPERATE
  else if previous_cooperation_rate >= cooperation_threshold:
    // Reward good behavior
    action = COOPERATE
  else if stock_health > 0.8 AND previous_cooperation_rate >= 0.3:
    // Stock healthy, show some forgiveness
    action = COOPERATE
  else:
    // Punish defection when stock needs protection
    action = DEFECT
```

### 3. Forgiveness Mechanism
The strategy includes adaptive forgiveness based on:
- **Stock recovery**: If stock grows between rounds, increase tolerance for past defection
- **Late-game cooperation**: In final 3 rounds, lower punishment threshold to encourage cooperation
- **Healthy stock buffer**: When stock > 80% capacity, be more forgiving to rebuild cooperation

### 4. Edge Case Handling

#### First Round:
- Always COOPERATE to establish cooperative baseline

#### Last Round:
- If stock_health > 0.3: COOPERATE (maintain reputation for future interactions)
- If stock_health ≤ 0.3: DEFECT (resource likely depleted anyway)

#### Critical Stock Situations:
- If stock < 20% of capacity: Always COOPERATE regardless of others' behavior
- If stock approaches 0: COOPERATE (defection won't help anyone)

#### All-Defection Scenarios:
- If everyone defected in previous round AND stock > 40% capacity: COOPERATE once to test for renewed cooperation
- If everyone defected for 2+ consecutive rounds: Match with DEFECT until stock recovers or someone else cooperates

### 5. Key Strategic Principles

1. **Stock-First Priority**: Never let short-term retaliation destroy the resource completely
2. **Graduated Response**: Punishment intensity scales with stock health
3. **Quick Forgiveness**: Return to cooperation as soon as others show cooperative signals
4. **End-Game Cooperation**: Maintain cooperative reputation even in final rounds
5. **Emergency Override**: Always cooperate when stock is critically low

## Robustness Features

- **Against Exploiters**: Punishes consistent defection while protecting the resource
- **Against Cooperators**: Maintains mutual cooperation for maximum joint payoffs  
- **Against Mixed Strategies**: Adapts threshold based on actual cooperation rates observed
- **Against Stock Depletion**: Emergency cooperation mode prevents total resource collapse
- **Against End-Game Defection**: Maintains some cooperation even in final rounds

This strategy balances the competing demands of being exploitable enough to encourage cooperation, tough enough to deter free-riding, and responsible enough to preserve the common resource for mutual benefit.
'''

description_COOPERATIVE_126 = '''
# Adaptive Cooperative Strategy: "Guardian of the Commons"

## Core Philosophy
This strategy prioritizes long-term sustainability while being adaptive to opponent behavior. It starts cooperative and remains so as long as the resource is healthy and others aren't excessively exploiting it.

## Decision Rules

### Primary Decision Logic:
```
if (current_round == 1):
    return COOPERATE
    
if (stock_level <= critical_threshold):
    return COOPERATE  # Emergency conservation
    
if (defection_pressure >= high_pressure_threshold):
    return DEFECT     # Defensive defection
    
if (recent_cooperation_rate >= cooperation_threshold):
    return COOPERATE  # Reward collective cooperation
    
return COOPERATE      # Default to cooperation
```

### Key Thresholds (as functions of game parameters):
- **Critical threshold**: `capacity / (4 * n)` - When resource is dangerously low
- **High pressure threshold**: `0.6` - When 60%+ of recent actions were defections
- **Cooperation threshold**: `0.4` - When 40%+ of recent actions were cooperations

### Metrics Calculation:
- **Defection pressure**: Weighted average of defection rates over recent rounds
  - Recent 3 rounds weighted as: 50%, 30%, 20% (most recent gets highest weight)
- **Recent cooperation rate**: Simple average over last 3 rounds
- **Stock health**: Current stock as percentage of capacity

## Adaptive Mechanisms

### 1. Stock-Based Adaptation
- **Healthy stock** (>75% capacity): Standard cooperative behavior
- **Moderate depletion** (25-75% capacity): Slightly more sensitive to defections
- **Critical depletion** (<25% capacity): Emergency cooperation mode - always cooperate to rebuild

### 2. Behavioral Learning
- Track each opponent's cooperation rate over a sliding window of 5 rounds
- Identify consistent defectors vs. conditional cooperators
- Adjust sensitivity based on mix of opponent types

### 3. Endgame Handling
In final 20% of rounds:
- If stock is healthy (>50% capacity): Continue normal strategy
- If stock is depleted (<30% capacity): Cooperate to salvage remaining value
- Otherwise: Mirror the majority behavior from previous round

## Edge Case Handling

### First Round:
Always cooperate to signal cooperative intent and establish baseline.

### Early Rounds (rounds 2-5):
- Cooperate unless stock drops below 50% of capacity
- Build reputation as cooperative player
- Gather information about opponent types

### Last Round:
- If stock > 30% capacity: Defect (no future consequences)
- If stock ≤ 30% capacity: Cooperate (defection would yield near-zero payoff)

### Stock Depletion Scenarios:
- **Stock = 0**: Cooperate (no benefit to defecting)
- **Stock very low**: Cooperate to enable regeneration
- **One-shot recovery**: If stock was 0 and regenerates, cooperate to maintain momentum

## Robustness Features

### Against Always Defect:
- Quickly identify persistent defectors
- Switch to defensive defection when defection pressure is high
- Still cooperate when stock is critically low (self-preservation)

### Against Tit-for-Tat variants:
- Initial cooperation signals friendly intent
- Forgiveness built into sliding window approach
- Won't get stuck in defection spirals due to stock-based override

### Against Random players:
- Sliding window smooths out noise
- Focus on aggregate patterns rather than individual actions
- Stock health provides objective anchor point

### Against Sophisticated strategies:
- Multiple information sources (stock, history, patterns) make it harder to exploit
- Emergency cooperation mode prevents complete resource collapse
- Endgame adaptation prevents being taken advantage of in final rounds

## Key Strengths

1. **Sustainability Focus**: Always considers long-term resource health
2. **Adaptive**: Responds to both environmental conditions and opponent behavior
3. **Forgiveness**: Doesn't permanently punish occasional defections
4. **Defensive**: Can protect itself against excessive exploitation
5. **Simple**: Clear decision rules that are easy to understand and predict

This strategy aims to be a "good citizen" that maintains the commons while not being naive about exploitation. It balances cooperation with self-defense, making it robust across diverse opponent strategies while maintaining the cooperative spirit essential for maximizing collective welfare.
'''

description_COOPERATIVE_127 = '''
# Adaptive Cooperative Strategy: "Sustainable Guardian"

## Core Philosophy
This strategy prioritizes long-term resource sustainability while being forgiving toward occasional defections, recognizing that cooperation is essential for maintaining the common pool resource across multiple rounds.

## Decision Framework

### 1. Primary Decision Rules

**Cooperation Threshold System:**
- Maintain a "cooperation score" for each opponent based on their recent behavior
- Cooperate when the overall group cooperation level suggests the resource can be sustained
- Use a graduated response system rather than harsh punishment for defections

**Stock Health Assessment:**
- **Healthy Stock** (stock ≥ 0.8 × capacity): Default to cooperation
- **Moderate Stock** (0.4 × capacity ≤ stock < 0.8 × capacity): Cooperation with caution
- **Critical Stock** (stock < 0.4 × capacity): Emergency cooperation mode

### 2. Detailed Strategy Logic

```pseudocode
STRATEGY: Sustainable Guardian

INITIALIZATION:
- cooperation_scores[i] = 1.0 for each player i (start optimistic)
- emergency_threshold = 0.4 × capacity
- healthy_threshold = 0.8 × capacity
- forgiveness_factor = 0.3
- learning_rate = 0.1

FOR each round t:
    
    // Update cooperation scores based on last round's actions
    IF t > 1:
        FOR each opponent i:
            IF opponent_i_action[t-1] == C:
                cooperation_scores[i] += learning_rate × (1.0 - cooperation_scores[i])
            ELSE:
                cooperation_scores[i] -= learning_rate × cooperation_scores[i]
    
    // Calculate group cooperation tendency
    avg_cooperation_score = mean(cooperation_scores)
    
    // Stock-based decision making
    IF stock < emergency_threshold:
        // Crisis mode - cooperate to rebuild
        decision = C
        
    ELSE IF stock >= healthy_threshold:
        // Healthy stock - be generous but watch for exploitation
        IF avg_cooperation_score >= 0.5:
            decision = C
        ELSE:
            // Too many defectors, but still try cooperation with probability
            decision = C with probability (0.7 × avg_cooperation_score + 0.3)
            
    ELSE:
        // Moderate stock - balanced approach
        cooperation_probability = 0.3 + 0.6 × avg_cooperation_score
        
        // Boost cooperation if we're in later rounds (preserve for others)
        IF t > 0.7 × total_rounds:
            cooperation_probability += 0.2
            
        decision = C with probability cooperation_probability
    
    // Special case handling
    IF t == 1:
        decision = C  // Always start cooperatively
        
    IF t == total_rounds AND stock < emergency_threshold:
        decision = C  // Final round cooperation if resource is depleted
```

### 3. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent and establish positive precedent
- This helps build initial trust and demonstrates commitment to sustainability

**Last Round:**
- If stock is healthy (≥ 0.6 × capacity): Cooperate to leave resource in good state
- If stock is critical (< 0.4 × capacity): Still cooperate to maximize collective welfare
- Only consider defection in final round if stock is moderate and others have been consistently defecting

**Resource Depletion:**
- If stock approaches zero, switch to pure cooperation mode regardless of others' actions
- Recognize that mutual defection leads to resource collapse and zero payoffs for everyone

**Opponent Behavior Patterns:**
- **Against Always-Defectors:** Maintain some cooperation (30% probability) to prevent total resource collapse
- **Against Tit-for-Tat:** Mirror their cooperative behavior with slight bias toward cooperation
- **Against Random Players:** Use stock health as primary decision factor

### 4. Key Cooperative Features

**Forgiveness Mechanism:**
- Don't permanently punish single defections
- Cooperation scores decay slowly toward neutral, allowing redemption
- Recognize that occasional defection might be strategic rather than purely selfish

**Long-term Thinking:**
- Weight later rounds more heavily in cooperation decisions
- Prioritize resource sustainability over immediate payoff maximization
- Account for the compound effect of current actions on future stock levels

**Adaptive Response:**
- Adjust cooperation based on observed group dynamics
- More cooperative when others cooperate, but never completely abandon cooperation
- Scale response to stock health rather than using binary decisions

## Strategic Rationale

This strategy balances several key principles:

1. **Sustainability First:** Recognizes that resource preservation benefits everyone long-term
2. **Conditional Cooperation:** Responds positively to others' cooperation while maintaining baseline cooperation
3. **Robustness:** Performs reasonably well against various opponent strategies
4. **Forgiveness:** Doesn't get locked into punishment cycles that harm collective welfare
5. **Crisis Response:** Prioritizes cooperation when the resource is most threatened

The strategy aims to be a "good citizen" of the resource pool while being sophisticated enough to avoid exploitation, ultimately seeking outcomes that benefit all players through sustainable resource management.
'''

description_COOPERATIVE_128 = '''
# Adaptive Trust-Based Cooperative Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive trust management and sustainable resource use monitoring.

## Strategy Overview

### 1. Decision Rules

**Primary Decision Framework:**
- **Cooperate (C)** when trust conditions are met AND resource sustainability is maintained
- **Defect (D)** when exploitation is detected OR resources are critically depleted

**Trust Scoring System:**
For each opponent i, maintain a trust score T_i ∈ [0, 1] where:
- T_i = (cooperation_count_i) / (total_interactions_i)
- Initial trust: T_i = 0.8 (optimistic but cautious start)

**Collective Trust Metric:**
- Group_Trust = average of all individual trust scores
- Sustainability_Index = current_stock / capacity

**Decision Rule:**
```
IF (Group_Trust ≥ 0.5 AND Sustainability_Index ≥ 0.3):
    Play C
ELSE IF (Sustainability_Index < 0.15):
    Play D (emergency conservation)
ELSE:
    Play C with probability = Group_Trust, otherwise play D
```

### 2. Adaptive Mechanisms

**Forgiveness Function:**
- After detecting defection, gradually restore trust if opponents return to cooperation
- Trust recovery rate: T_i += 0.1 per cooperative action (capped at previous maximum)

**Crisis Response:**
- When stock < capacity × 0.2, switch to "Conservation Mode"
- In Conservation Mode: Play C only if ≥75% of others played C in previous round

**Exploitation Detection:**
- If any player defects in >60% of last 5 rounds: reduce their trust score by 0.3
- If majority defects when resources are abundant (stock > 0.7 × capacity): enter "Defensive Mode"

### 3. Edge Cases

**First Round:**
- Always play C (establish cooperative intent)
- Set all initial trust scores to 0.8

**Last Round:**
- If Group_Trust ≥ 0.6: Play C (reward sustained cooperation)
- Otherwise: Play D (protect against end-game defection)

**Stock Depletion Scenarios:**
- If stock approaches zero (< capacity × 0.05): Play C to maximize regeneration
- If stock is completely depleted: Play C and hope others do too for any chance of recovery

**Information Asymmetry:**
- In early rounds (< 20% of total rounds): Weight recent actions more heavily (last 3 rounds = 60% of trust calculation)
- In later rounds: Use full history for more stable trust assessment

### 4. Cooperative Alignment Features

**Sustainability Focus:**
- Monitor long-term resource trajectory, not just immediate payoffs
- Prefer strategies that maintain stock above 50% of capacity

**Reciprocal Generosity:**
- Slightly favor cooperation when Group_Trust is borderline (0.45-0.55 range)
- Implement "generous tit-for-tat" elements: occasionally cooperate even when trust is slightly below threshold

**Collective Signal:**
- By maintaining consistent cooperative behavior when resources are abundant, signal commitment to long-term sustainability

## Pseudocode Summary

```
INITIALIZE:
    For each opponent i: Trust[i] = 0.8
    Round = 1

FOR each round:
    // Calculate current metrics
    Group_Trust = average(Trust[1...n-1])
    Sustainability_Index = current_stock / capacity
    
    // Special cases
    IF Round == 1:
        action = C
    ELSE IF Round == final_round:
        action = C if Group_Trust ≥ 0.6 else D
    ELSE IF Sustainability_Index < 0.15:
        action = D  // Emergency conservation
    ELSE IF Sustainability_Index < 0.3:
        action = C if (≥75% played C last round) else D
    ELSE:
        // Main decision logic
        IF Group_Trust ≥ 0.5:
            action = C
        ELSE:
            action = C with probability Group_Trust
    
    // Execute action and observe results
    PLAY(action)
    OBSERVE(opponents' actions, new_stock)
    
    // Update trust scores
    FOR each opponent i:
        IF opponent i played C:
            Trust[i] = min(1.0, Trust[i] + 0.1)
        ELSE:
            Trust[i] = max(0.0, Trust[i] - 0.2)
    
    Round += 1
```

This strategy balances cooperation with protection against exploitation while maintaining focus on long-term resource sustainability, making it robust across diverse opponent behaviors while staying true to cooperative principles.
'''

description_AGGRESSIVE_1 = '''
# Aggressive Opportunistic Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when it serves our long-term advantage. We view other players as competitors to be outmaneuvered, not partners to cooperate with.

## Decision Framework

### 1. Opening Aggression (Rounds 1-2)
**Always DEFECT** in the first two rounds regardless of parameters.
- Establishes dominance and tests opponent responses
- Maximizes early gains when stock is at peak capacity
- Forces opponents into defensive positions early

### 2. Stock-Based Exploitation Thresholds
Define critical stock levels:
- **Depletion Threshold**: `stock < n * 2` (resource becoming critically low)
- **Abundance Threshold**: `stock > capacity * 0.7` (resource is plentiful)

### 3. Core Decision Rules

**DEFECT when:**
- `stock > capacity * 0.7` (abundant resources - grab while available)
- `current_round >= max(r-2, r*0.8)` (endgame extraction)
- `stock < n * 1.5` AND `rounds_remaining <= 3` (extract remaining value before collapse)
- Opponent defection rate in last 3 rounds > 60% (punitive response)

**COOPERATE when:**
- `stock < n * 2` AND `rounds_remaining > r * 0.3` (preserve depleted resource for future exploitation)
- We're the dominant defector (our defect rate > 70% while others mostly cooperate) AND stock is declining rapidly

### 4. Adaptive Exploitation Patterns

#### Opponent Behavior Analysis
Track each opponent's last 3 moves and classify:
- **Cooperators**: >66% cooperation rate → Exploit aggressively
- **Defectors**: >66% defection rate → Mirror or slightly more aggressive
- **Conditional**: Mixed patterns → Probe with defection

#### Dynamic Aggression Scaling
```
aggression_factor = base_aggression * stock_multiplier * endgame_multiplier

base_aggression = 0.8 (start aggressive)
stock_multiplier = min(2.0, stock/capacity + 0.5)
endgame_multiplier = min(3.0, (r - rounds_remaining + 1) / (r * 0.3))
```

If `random() < aggression_factor`: DEFECT, else evaluate cooperation conditions.

### 5. Edge Case Handling

#### First Round
Always DEFECT - establish aggressive reputation immediately.

#### Last Round
Always DEFECT - no future consequences, maximize final extraction.

#### Near-Extinction Scenarios
If `stock < n * 0.5`: 
- COOPERATE only if `rounds_remaining > 5` 
- Otherwise DEFECT (extract remaining value)

#### Resource Abundance
If `stock = capacity` for 2+ consecutive rounds:
- Increase defection probability to 0.9
- Others are being too conservative - capitalize on their restraint

### 6. Strategic Deception

#### False Cooperation Windows
Occasionally cooperate (10% chance) even when conditions favor defection to:
- Prevent opponents from writing us off as pure defector
- Create uncertainty about our strategy
- Potentially trigger opponent cooperation that we can exploit next round

#### Punishment Signals
If multiple opponents defect simultaneously:
- Defect for next 2 rounds minimum regardless of other conditions
- Signal that cooperation abandonment triggers aggressive response

## Key Strategic Principles

1. **Front-loaded Aggression**: Extract maximum value early when resources are abundant
2. **Conditional Preservation**: Only cooperate when it serves our future extraction potential
3. **Opponent Exploitation**: Aggressively exploit cooperative opponents while deterring defectors
4. **Endgame Dominance**: Maximize extraction in final rounds when reputation doesn't matter
5. **Strategic Unpredictability**: Occasional unexpected moves prevent opponents from perfectly counter-adapting

## Expected Outcomes

This strategy should:
- Achieve high individual scores against predominantly cooperative opponents
- Maintain competitive performance against other aggressive strategies
- Avoid the "sucker's payoff" of cooperating while others defect
- Strategically balance immediate gains with calculated resource preservation
- Dominate in endgame scenarios through aggressive final extraction

The strategy is designed to be **selfishly optimal** - it prioritizes our payoff maximization over collective welfare or resource sustainability, while being smart enough to preserve resources only when doing so serves our future advantage.
'''

description_AGGRESSIVE_2 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It aims to extract maximum value from the common pool while preventing complete collapse that would eliminate future gains. The strategy treats other players as competitors to be outmaneuvered rather than partners to cooperate with.

## Decision Framework

### Primary Decision Rule: Adaptive Exploitation Threshold
```
If (current_stock / capacity) > exploitation_threshold:
    DEFECT (take maximum share)
Else:
    COOPERATE (preserve remaining resources for future extraction)
```

### Dynamic Threshold Calculation
The exploitation threshold adapts based on:
- **Time pressure**: `base_threshold = 0.3 + (0.4 * remaining_rounds / total_rounds)`
- **Competition intensity**: Adjust based on opponent defection rate
- **Stock trajectory**: Lower threshold if stock is declining rapidly

### Detailed Strategy Rules

#### Round 1: Aggressive Opening
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponent responses, and secure early gains before others potentially defect

#### Rounds 2 to r-2: Adaptive Exploitation
1. **Calculate current exploitation threshold**:
   ```
   threshold = max(0.2, 0.3 + 0.4 * (remaining_rounds / total_rounds))
   ```

2. **Assess opponent aggression level**:
   ```
   opponent_defection_rate = (total_defections_observed) / (total_actions_observed)
   aggression_multiplier = 1 + (opponent_defection_rate * 0.3)
   adjusted_threshold = threshold / aggression_multiplier
   ```

3. **Stock sustainability check**:
   ```
   stock_ratio = current_stock / capacity
   if stock_ratio > adjusted_threshold:
       DEFECT
   else if stock_ratio < 0.15:
       COOPERATE (emergency preservation)
   else:
       Apply secondary rules
   ```

#### Secondary Rules (when primary rule is indeterminate):

4. **Momentum Exploitation**:
   - If stock increased in the last round AND stock_ratio > 0.25: DEFECT
   - If stock decreased significantly (>30%) in last round: COOPERATE

5. **Competitive Response**:
   - If majority of opponents defected in the last round: DEFECT immediately
   - If all opponents cooperated in the last round: DEFECT (exploit their cooperation)

#### Round r-1: Penultimate Aggression
- **DEFECT** unless stock is critically low (< 10% of capacity)
- Rationale: Extract maximum value before final round while leaving minimal resources for others

#### Round r: Final Round Maximization
- **Always DEFECT**
- Rationale: No future consequences, extract all remaining value

## Edge Case Handling

### Critical Stock Depletion (stock < 15% of capacity)
- Switch to **temporary cooperation mode** for 1-2 rounds
- Monitor if stock begins recovering
- Resume defection once stock reaches 25% of capacity

### Opponent Mass Cooperation Detection
- If ≥80% of opponents cooperated in the last 2 rounds:
  - **Exploit immediately** with DEFECT
  - Continue defecting until they adapt their behavior

### Tit-for-Tat Detection
- Track individual opponent patterns
- If an opponent mirrors your previous action:
  - **Alternate D-C pattern** to confuse their strategy
  - Primarily stay on D to force them into cooperation

### Early Resource Collapse (before round r/2)
- If stock drops below 20% of capacity early:
  - Cooperate for exactly 2 rounds
  - Then resume modified aggressive pattern with higher threshold (0.5)

## Aggressive Advantages

1. **First-Mover Advantage**: Early defection establishes resource extraction precedence
2. **Exploitation of Cooperation**: Punishes cooperative opponents by taking larger shares
3. **Strategic Sustainability**: Maintains enough resources to continue extraction across rounds
4. **Adaptive Pressure**: Forces opponents to either match aggression (depleting resources faster) or submit to exploitation
5. **Endgame Maximization**: Extracts all possible value when future rounds don't matter

## Robustness Features

- **Parameter Independence**: Works across different n, r, and capacity values
- **History Adaptation**: Adjusts to observed opponent behaviors
- **Multiple Fallback Rules**: Handles various edge cases and opponent strategies
- **Dynamic Thresholds**: Adapts exploitation intensity based on game state

This strategy prioritizes individual gain over collective welfare while maintaining enough strategic foresight to prevent complete resource collapse that would eliminate future extraction opportunities. It's designed to outcompete both overly cooperative and overly aggressive opponents through adaptive exploitation.
'''

description_AGGRESSIVE_3 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximum sustainable exploitation** - extract as much value as possible while maintaining enough resource flow to continue profiting. It's designed to be a predatory strategy that adapts quickly to exploit cooperative players while protecting against other aggressive players.

## Decision Framework

### Phase 1: Aggressive Opening (Rounds 1-3)
- **Always DEFECT** in the first round to:
  - Establish dominance and signal aggressive intent
  - Maximize immediate payoff when stock is at capacity
  - Gather intelligence on opponent tendencies

- **Rounds 2-3**: Continue defecting unless stock drops below critical threshold (stock < capacity/4), then switch to cooperate for exactly one round to allow minimal recovery

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)

#### Stock-Based Rules:
- **High Stock (stock ≥ capacity × 0.7)**: DEFECT - resource is abundant enough to sustain aggressive extraction
- **Critical Stock (stock ≤ capacity × 0.15)**: COOPERATE - forced conservation to prevent collapse
- **Medium Stock**: Apply behavioral adaptation rules below

#### Behavioral Adaptation Rules:
Track opponent cooperation rate over last 3 rounds: `coop_rate = (cooperators in last 3 rounds) / (3 × n)`

- **If coop_rate ≥ 0.6**: DEFECT (exploit the cooperators)
- **If coop_rate ≤ 0.3**: COOPERATE (too many defectors, need to preserve resource)
- **If 0.3 < coop_rate < 0.6**: 
  - DEFECT if my defection rate in last 3 rounds < 0.7 (maintain aggressive posture)
  - COOPERATE otherwise (brief tactical retreat)

#### Momentum Rule:
- If stock has been declining for 3+ consecutive rounds AND current stock < capacity × 0.4:
  - COOPERATE for exactly 1 round, then return to standard rules
  - This prevents resource collapse while minimizing cooperation

### Phase 3: Endgame Extraction (Last 2 rounds)

#### Round r-1:
- **If stock ≥ capacity × 0.3**: DEFECT (extract while possible)
- **If stock < capacity × 0.3**: COOPERATE (one last attempt to build stock for final extraction)

#### Final Round r:
- **Always DEFECT** - no future consequences, maximize final payoff

## Edge Case Handling

### Stock Depletion:
- If stock reaches 0 at any point: COOPERATE until stock > capacity × 0.2, then resume normal strategy

### Opponent Pattern Recognition:
- Track if majority (>50%) of players are following apparent "always cooperate" or "always defect" patterns
- Against "always cooperate": Increase defection rate to 90%
- Against "always defect": Match their aggression (defect) unless stock becomes critical

### Safety Valve:
- If cumulative payoff is trailing significantly (bottom 25% among all players based on observable history), increase cooperation rate by 20% for 2 rounds, then reassess

## Key Strategic Elements

1. **Front-loaded Aggression**: Establish dominance early when resources are abundant
2. **Parasitic Adaptation**: Exploit cooperative behaviors while minimizing own cooperation
3. **Calculated Preservation**: Only cooperate when absolutely necessary for resource survival
4. **Endgame Maximization**: Extract maximum value when future consequences disappear
5. **Anti-Coordination**: Designed to break cooperative equilibria by being the "first defector"

## Pseudocode Summary:
```
if round <= 3:
    if round == 1 or stock >= capacity/4:
        return DEFECT
    else:
        return COOPERATE
        
if round >= r-1:
    if round == r or stock >= capacity*0.3:
        return DEFECT
    else:
        return COOPERATE
        
if stock <= capacity*0.15:
    return COOPERATE
    
if stock >= capacity*0.7:
    return DEFECT
    
coop_rate = calculate_recent_cooperation_rate()
if coop_rate >= 0.6:
    return DEFECT
elif coop_rate <= 0.3:
    return COOPERATE
else:
    apply_mixed_aggressive_strategy()
```

This strategy is designed to be a **resource predator** that maximizes extraction while others bear the cost of conservation, adapting only when absolutely necessary for survival.
'''

description_AGGRESSIVE_4 = '''
# Aggressive Opportunistic Resource Extraction Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated sustainability**. The key insight is that in a tournament setting, being "nice" leads to exploitation by more aggressive opponents. Instead, we maximize immediate gains while maintaining just enough resource sustainability to continue extracting value.

## Decision Rules

### Primary Decision Logic
```
IF (current_round <= burn_threshold OR stock_level <= critical_threshold):
    Action = DEFECT
ELSE IF (opponent_aggression_score >= hostile_threshold):
    Action = DEFECT  
ELSE IF (stock_recovery_trend > 0 AND my_recent_advantage < advantage_threshold):
    Action = COOPERATE (tactical only)
ELSE:
    Action = DEFECT (default aggressive stance)
```

### Key Thresholds (as functions of game parameters)
- **burn_threshold** = max(3, r/4) - Early aggressive phase
- **critical_threshold** = capacity/4 - Resource depletion trigger
- **hostile_threshold** = 0.7 - Enemy aggression tolerance
- **advantage_threshold** = 0.2 - Minimum advantage to justify cooperation

## Detailed Strategy Components

### 1. Opening Aggression (Rounds 1 to burn_threshold)
- **Always DEFECT** in early rounds to establish dominance
- Rationale: Extract maximum value while stock is high
- Forces opponents into defensive positions early

### 2. Dynamic Opponent Classification
Track each opponent's aggression score:
```
aggression_score[opponent] = (defections_by_opponent) / (total_rounds_so_far)
```

Classify opponents:
- **Pushover** (< 0.3): Exploit relentlessly
- **Balanced** (0.3-0.7): Match their aggression level
- **Hostile** (> 0.7): Always defect against them

### 3. Stock Management
- **High Stock** (> capacity/2): DEFECT to maximize extraction
- **Medium Stock** (capacity/4 to capacity/2): Conditional cooperation only if opponents are cooperative AND I'm behind in total payoffs
- **Low Stock** (< capacity/4): DEFECT to grab remaining resources before others

### 4. Endgame Acceleration
In final 20% of rounds (last r/5 rounds):
- **Always DEFECT** regardless of other conditions
- Rationale: No future to preserve resources for; extract everything possible

### 5. Punishment Mechanism
If any opponent defects when stock < capacity/3:
- Mark them as "hostile" permanently
- Always DEFECT against hostile players
- Rationale: They've shown willingness to destroy the commons

### 6. Tactical Cooperation Conditions
Cooperate ONLY when ALL conditions are met:
1. Stock > capacity/2 (resource abundance)
2. Not in opening phase or endgame
3. Majority of opponents cooperated last round
4. My total payoff is below average among all players
5. Stock showed positive growth last round

## Edge Cases

### First Round
- **Always DEFECT** - Set aggressive tone immediately

### Last Round  
- **Always DEFECT** - No future consequences

### Stock Depletion (stock ≤ 1)
- **Always DEFECT** - Grab whatever remains

### All Opponents Always Cooperate
- **Always DEFECT** - Maximum exploitation opportunity

### All Opponents Always Defect
- **Always DEFECT** - Resource preservation is futile

## Adaptive Elements

### Learning Component
Track the relationship between cooperation rates and stock recovery:
- If high cooperation leads to strong stock recovery, occasionally cooperate when advantageous
- If cooperation doesn't improve stock meaningfully, increase defection rate

### Counter-Strategy Detection
If opponents seem to be using tit-for-tat or similar reciprocal strategies:
- Defect for 2-3 rounds to test their response
- If they retaliate consistently, consider occasional tactical cooperation
- If they don't retaliate effectively, continue full aggression

## Robustness Features

1. **Parameter Scaling**: All thresholds scale with n and capacity to work across different game sizes

2. **History Weighting**: Recent actions weighted more heavily than distant past (exponential decay)

3. **Mixed Opponent Handling**: Strategy adapts to each opponent individually rather than treating all the same

4. **Resource Awareness**: Stock level heavily influences decisions to avoid complete commons collapse when beneficial to maintain extraction

This strategy prioritizes individual success over collective welfare, maintains sustainable aggression, and adapts to opponent behaviors while defaulting to resource extraction. It's designed to perform well against both cooperative and aggressive opponents by being more aggressive than cooperators but more strategic than pure defectors.
'''

description_AGGRESSIVE_5 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on the principle of **maximum extraction with calculated aggression**. It assumes opponents are competitors to be outmaneuvered, not partners to cooperate with. The goal is to extract maximum individual payoff while maintaining the resource just enough to continue exploitation.

## Decision Framework

### 1. Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT
  - Rationale: Establish dominance immediately and extract maximum value from pristine stock
  - No history exists, so take advantage of full resource availability
- **Round 2**: Always DEFECT
  - Rationale: Double down on aggression before opponents can adapt
  - Most strategies start cautiously, so exploit this hesitation

### 2. Stock Monitoring System
Define critical stock thresholds:
- **Danger Zone**: stock < capacity × 0.3
- **Warning Zone**: stock < capacity × 0.5  
- **Sustainable Zone**: stock ≥ capacity × 0.5

### 3. Adaptive Exploitation Rules (Rounds 3 to r-2)

**Primary Rule - Opponent Punishment**:
- If ≥ 50% of opponents DEFECTED in the previous round → DEFECT
- Rationale: Punish defection immediately and ensure you're not left behind

**Secondary Rule - Stock Preservation** (only if Primary Rule suggests COOPERATE):
- If in Danger Zone AND < 3 rounds remaining → COOPERATE
- If in Warning Zone AND all opponents cooperated last round → COOPERATE  
- Otherwise → DEFECT

**Tertiary Rule - Momentum Exploitation**:
- If stock increased from previous round → DEFECT
- Rationale: Growing stock indicates room for more aggressive extraction

### 4. Endgame Exploitation (Last 2 rounds)

**Second-to-last round (r-1)**:
- If stock > capacity × 0.2 → DEFECT
- Else → COOPERATE (minimal stock preservation for final round)

**Final round (r)**:
- Always DEFECT
- Rationale: No future consequences, extract maximum possible value

### 5. Emergency Protocols

**Stock Collapse Response**:
- If stock ≤ capacity × 0.1 in any round → COOPERATE for next 2 rounds
- Then immediately return to normal aggressive rules
- Rationale: Prevent total collapse that benefits no one

**Mass Cooperation Detection**:
- If ALL opponents cooperated for 2 consecutive rounds AND stock > capacity × 0.4 → DEFECT
- Rationale: Exploit collective cooperation attempts

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    
    // Opening aggression
    if round <= 2:
        return DEFECT
    
    // Endgame extraction
    if round == r:
        return DEFECT
    if round == r-1:
        return DEFECT if stock > capacity * 0.2 else COOPERATE
    
    // Emergency stock preservation
    if stock <= capacity * 0.1:
        return COOPERATE
    
    // Primary rule: Opponent punishment
    defectors_last_round = count_defectors(history[round-1])
    if defectors_last_round >= n * 0.5:
        return DEFECT
    
    // Secondary rule: Stock-based decisions
    if stock < capacity * 0.3 AND rounds_remaining < 3:
        return COOPERATE
    if stock < capacity * 0.5 AND all_cooperated_last_round(history[round-1]):
        return COOPERATE
    
    // Tertiary rule: Exploit stock growth
    if round > 1 AND stock > get_stock(history[round-1]):
        return DEFECT
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Advantages

1. **First-Mover Advantage**: Immediate aggression captures maximum value from fresh resources
2. **Punishment Mechanism**: Deters others from defecting by matching their aggression
3. **Adaptive Thresholds**: Responds to actual game state rather than fixed patterns
4. **Endgame Maximization**: Extracts maximum value when consequences are minimal
5. **Collapse Prevention**: Maintains just enough cooperation to prevent mutual destruction

## Robustness Features

- **Anti-Exploitation**: Punishes attempts to exploit cooperative behavior
- **Context Sensitivity**: Adapts to both stock levels and opponent behavior patterns
- **Emergency Brakes**: Prevents total resource collapse that would hurt everyone
- **Endgame Optimization**: Maximizes extraction when future rounds are limited

This strategy assumes opponents are rational competitors and focuses on winning through superior tactical adaptation rather than hoping for mutual cooperation.
'''

description_AGGRESSIVE_6 = '''
# Aggressive Opportunistic Resource Maximizer (AORM)

## Core Philosophy
This strategy is designed to maximize personal payoff through aggressive resource extraction while maintaining strategic flexibility. It prioritizes immediate gains but includes calculated cooperation to prevent total resource collapse when beneficial.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Default Action: DEFECT**
- Rationale: Extract maximum value while the resource pool is at its highest
- Exception: If stock drops below `capacity/4`, switch to COOPERATE for one round to allow partial recovery
- This establishes an aggressive reputation while avoiding immediate catastrophic depletion

### Phase 2: Adaptive Predation (Rounds r/3+1 to 2r/3)
**Dynamic Action Based on Stock Health and Opponent Patterns**

**Stock Health Assessment:**
- If `stock > capacity/2`: DEFECT (resource is healthy enough to exploit)
- If `capacity/4 < stock ≤ capacity/2`: Use opponent tracking logic
- If `stock ≤ capacity/4`: COOPERATE (prevent collapse)

**Opponent Tracking Logic (when stock is moderate):**
- Track defection rate of opponents in last 3 rounds
- If opponent defection rate > 60%: DEFECT (join the feeding frenzy)
- If opponent defection rate < 40%: DEFECT (exploit their restraint)
- If opponent defection rate 40-60%: COOPERATE only if stock is declining rapidly

### Phase 3: Endgame Extraction (Final r/3 rounds)
**Maximize Final Value with Calculated Risk**

**If stock > capacity/3:**
- DEFECT aggressively - extract maximum value before game ends
- No concern for future sustainability

**If stock ≤ capacity/3:**
- Calculate expected remaining total payoff under cooperation vs defection
- If remaining rounds × (current_stock/2n) > (current_stock/n): DEFECT once, then COOPERATE
- Otherwise: DEFECT continuously

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive stance and maximize early returns when resource is at peak

### Last Round
- **Always DEFECT** - No future consequences, extract maximum possible value

### Stock Depletion Emergency
- If stock drops to ≤ 5% of capacity: COOPERATE for exactly 2 rounds, then return to aggressive pattern
- If stock reaches 0: Game effectively over, COOPERATE (though irrelevant)

### Opponent Mass Cooperation Detection
- If ≥75% of opponents cooperated in the last round AND stock < capacity/2:
  - DEFECT immediately to exploit their restraint
  - Return to normal strategy next round

### Opponent Mass Defection
- If ≥75% of opponents defected in last round:
  - Join the defection if stock > capacity/4
  - COOPERATE if stock ≤ capacity/4 (let them destroy themselves while preserving some resource)

## Adaptive Elements

1. **Exploitation Threshold Adjustment**: If consistently getting higher payoffs than average, increase aggression by lowering cooperation thresholds by 25%

2. **Reputation Management**: If being consistently out-earned by >20%, increase defection frequency in the next phase

3. **Resource Trajectory Tracking**: Monitor stock decline rate. If stock is declining by >15% per round, insert strategic cooperation rounds to preserve medium-term extraction opportunities

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    phase = determine_phase(round, r)
    
    if round == 1 or round == r:
        return DEFECT
    
    if stock <= 0.05 * capacity:
        return emergency_cooperate(history)
    
    if phase == "early":
        if stock < capacity/4:
            return COOPERATE
        return DEFECT
    
    elif phase == "adaptive":
        return adaptive_decision(stock, capacity, n, history)
    
    else:  # endgame
        return endgame_extraction(stock, capacity, n, remaining_rounds)
```

This strategy is aggressively oriented toward personal payoff maximization while maintaining enough strategic depth to avoid the most obvious pitfalls of pure defection. It exploits cooperative opponents, matches aggressive opponents, and only shows restraint when necessary to preserve extraction opportunities.
'''

description_AGGRESSIVE_7 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with strategic timing**. It maximizes personal payoffs while maintaining just enough restraint to keep the resource pool viable for continued exploitation. The key insight is that being consistently aggressive early allows for maximum extraction while the stock is high, then pivoting to preserve remaining resources only when absolutely necessary.

## Decision Framework

### Phase 1: Initial Aggression (Rounds 1 to r/2)
- **Default Action: DEFECT**
- **Rationale**: Extract maximum value while stock levels are highest
- **Exception**: Only cooperate if stock falls below critical threshold of `capacity/4`

### Phase 2: Adaptive Exploitation (Rounds r/2+1 to r-2)
- **Primary Rule**: Defect if current stock > `capacity/3`
- **Secondary Rule**: If stock ≤ `capacity/3`, analyze opponent behavior:
  - If majority defected last round: DEFECT (resource likely doomed anyway)
  - If majority cooperated last round: COOPERATE (preserve remaining resources)

### Phase 3: Endgame Extraction (Last 2 rounds)
- **Rule**: Always DEFECT
- **Rationale**: No future consequences, maximize terminal extraction

## Detailed Decision Rules

### Round 1 (No History)
```
ACTION: DEFECT
```
Start aggressively to establish dominance and extract maximum value from pristine resource pool.

### Rounds 2 to r/2
```
IF stock < capacity/4:
    ACTION: COOPERATE (resource critically depleted)
ELSE:
    ACTION: DEFECT (continue aggressive extraction)
```

### Rounds r/2+1 to r-2
```
IF stock > capacity/3:
    ACTION: DEFECT (plenty of resource remaining)
ELIF count_defectors_last_round > n/2:
    ACTION: DEFECT (others are depleting anyway)
ELSE:
    ACTION: COOPERATE (preserve what's left)
```

### Last 2 Rounds
```
ACTION: DEFECT (no future consequences)
```

## Strategic Adaptations

### Against Cooperative Opponents
- Exploit their restraint by defecting more frequently
- Only cooperate when resource depletion threatens future extraction opportunities

### Against Mixed Strategies
- Monitor the defection rate and adjust threshold for cooperation
- If defection rate > 60%, become more aggressive
- If defection rate < 40%, maintain standard aggression

### Against Other Aggressive Players
- Compete for resources through strategic timing
- Defect early when stock is high (first-mover advantage)
- Switch to cooperation only if resource collapse is imminent

## Edge Case Handling

### Resource Near Depletion (stock < capacity/8)
```
IF round < r-2 AND stock > 0:
    ACTION: COOPERATE (emergency preservation)
ELSE:
    ACTION: DEFECT (extract remaining value)
```

### Resource Fully Depleted (stock = 0)
```
ACTION: COOPERATE (no benefit from defecting on empty pool)
```

### Late Game with High Stock
```
IF round > 3*r/4 AND stock > capacity/2:
    ACTION: DEFECT (safe to extract heavily)
```

## Robustness Features

1. **Threshold-Based Decisions**: Uses stock levels relative to capacity, making it parameter-agnostic
2. **Majority Response**: Adapts to collective opponent behavior rather than individual patterns
3. **Phase-Based Strategy**: Different approaches for different game stages
4. **Emergency Protocols**: Switches to preservation when resource collapse threatens future payoffs

## Expected Performance

This strategy should perform well against:
- **Cooperative strategies**: Exploits their restraint for maximum advantage
- **Naive aggressive strategies**: Outcompetes through better timing
- **Adaptive strategies**: Harder to predict due to phase-based approach

The strategy prioritizes early extraction when payoffs are highest, maintains competitive pressure throughout the middle game, and ensures maximum terminal extraction. It balances aggression with just enough restraint to keep the resource viable for continued exploitation.
'''

description_AGGRESSIVE_8 = '''
# Aggressive Exploitative Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The key insight is that in a tournament setting, being "nice" gets you exploited by other aggressive strategies.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Early Phase** (rounds 1 to r/3): Resource accumulation and opponent analysis
2. **Middle Phase** (rounds r/3+1 to 2r/3): Aggressive exploitation 
3. **End Phase** (rounds 2r/3+1 to r): Maximum extraction

### Core Decision Rules

#### Rule 1: Stock Depletion Threshold
```
DEFECT if stock < (capacity * 0.3) AND remaining_rounds ≤ 3
DEFECT if stock < (capacity * 0.1) regardless of phase
```
**Rationale**: When the resource is nearly depleted, cooperation becomes meaningless. Extract maximum value before collapse.

#### Rule 2: Opponent Exploitation Index
Track each opponent's cooperation rate over the last 3 rounds:
```
cooperation_rate[player_i] = (C_actions_last_3_rounds) / 3

If average_cooperation_rate > 0.6:
    DEFECT (exploit the cooperators)
Else if average_cooperation_rate < 0.3:
    DEFECT (defensive response to defectors)
```
**Rationale**: Punish both cooperators (by exploiting them) and defectors (by matching their aggression).

#### Rule 3: Phase-Specific Aggression

**Early Phase Strategy:**
- Round 1: Always DEFECT (establish dominance)
- Rounds 2-r/3: DEFECT unless stock > 0.8*capacity AND fewer than n/2 players defected last round

**Middle Phase Strategy:**
- Default to DEFECT
- Only COOPERATE if: stock > 0.7*capacity AND you were the ONLY defector last round (avoid being seen as the primary threat)

**End Phase Strategy:**
- Always DEFECT (no future to preserve)

#### Rule 4: Stock Recovery Exploitation
```
If stock_growth_last_round > (capacity * 0.2):
    DEFECT (capitalize on recovery)
```
**Rationale**: When the stock recovers significantly, it's optimal to extract maximum value immediately rather than let others benefit.

#### Rule 5: Minority Defector Advantage
```
If num_defectors_last_round ≤ n/3 AND you were not a defector:
    DEFECT (join the profitable minority)
```
**Rationale**: Being one of few defectors is highly profitable. Switch to defection when few others are defecting.

## Edge Case Handling

### First Round
Always DEFECT to:
- Signal aggressive intent
- Test opponent responses
- Maximize initial payoff advantage

### Last Round
Always DEFECT - no future consequences exist.

### Stock Near Zero (< capacity * 0.05)
Always DEFECT - extract any remaining value before total collapse.

### All Opponents Cooperated Last Round
DEFECT - maximum exploitation opportunity.

### Stock at Maximum Capacity
DEFECT if in middle/end phase, otherwise evaluate based on other rules.

## Adaptive Components

### Learning Mechanism
Maintain running statistics on:
- Each opponent's defection frequency by phase
- Stock recovery patterns after different consumption levels
- Success rate of your own defections vs cooperations

### Counter-Strategy Recognition
If facing apparent "Tit-for-Tat" players:
- Still DEFECT, but expect retaliation
- The aggressive approach remains optimal in tournament settings

If facing "Always Cooperate":
- Maximize exploitation through consistent defection

If facing "Always Defect":
- Match their aggression (also defect)

## Strategic Justification

This strategy is aggressive because it:

1. **Prioritizes immediate gains** over long-term sustainability
2. **Exploits cooperative opponents** rather than rewarding them
3. **Matches or exceeds** the aggression of defecting opponents
4. **Assumes tournament dynamics** where being exploited is worse than mutual destruction
5. **Front-loads extraction** when the resource is most valuable

The strategy recognizes that in a competitive tournament environment, moderate strategies get exploited by aggressive ones while failing to sufficiently exploit cooperative ones. By defaulting to aggression with strategic exceptions, it maximizes expected payoffs across diverse opponent compositions.
'''

description_AGGRESSIVE_9 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving just enough resources to maintain exploitation opportunities. Unlike cooperative strategies that aim for mutual benefit, Predator views the common pool as a resource to be dominated and extracted from as efficiently as possible.

## Decision Rules

### 1. Stock Assessment Framework
```
stock_health = current_stock / capacity
critical_threshold = 0.3
opportunity_threshold = 0.7
```

### 2. Primary Decision Logic

**DEFECT (Aggressive Extraction) when:**
- Stock health > 0.7 (abundant resources - exploit aggressively)
- Stock health > 0.3 AND I can gain significant advantage over cooperators
- Last round (grab everything possible)
- Opponents are cooperating (punish their "weakness")

**COOPERATE (Strategic Restraint) when:**
- Stock health ≤ 0.3 AND remaining rounds > 2 (preserve future exploitation)
- Stock near depletion AND early/mid-game (allow minimal recovery)

### 3. Opponent Exploitation Rules

**Punish Cooperators:**
- If majority cooperated last round → DEFECT (free-ride on their restraint)
- If I detect any "tit-for-tat" players → Alternate D-C to maximize exploitation

**Counter Aggressive Players:**
- If majority defected last round AND stock < 0.5 → COOPERATE temporarily (let them destroy themselves)
- Resume defection once stock recovers above 0.6

## Detailed Strategy Implementation

### Round 1: Aggressive Opening
**Always DEFECT** - Establish dominance immediately and test opponent responses.

### Early Game (Rounds 2 to r/3):
```pseudocode
if stock_health > 0.7:
    DEFECT  // Exploit abundance
elif stock_health > 0.4 and cooperators_last_round > n/2:
    DEFECT  // Punish cooperative players
elif stock_health <= 0.3:
    COOPERATE  // Minimal preservation for future exploitation
else:
    DEFECT  // Default aggressive stance
```

### Mid Game (Rounds r/3+1 to 2r/3):
```pseudocode
exploitation_score = (defectors_last_round / n) * stock_health

if exploitation_score > 0.5:
    DEFECT  // High opportunity for gain
elif stock_health < 0.25 and remaining_rounds > 3:
    COOPERATE  // Strategic preservation
elif count_consecutive_cooperations_by_others >= 2:
    DEFECT  // Exploit sustained cooperation
else:
    DEFECT  // Maintain aggressive pressure
```

### End Game (Final r/3 rounds):
```pseudocode
if current_round == final_round:
    DEFECT  // No future consequences
elif stock_health < 0.2 and remaining_rounds <= 2:
    DEFECT  // Too late to recover anyway
elif stock_health > 0.6:
    DEFECT  // Final extraction phase
else:
    // Calculated final exploitation
    if expected_gain_from_defection > 2 * expected_gain_from_cooperation:
        DEFECT
    else:
        COOPERATE
```

## Advanced Tactical Elements

### 1. Pattern Recognition & Counter-Exploitation
- **Detect Reciprocators:** If player consistently mirrors my actions → exploit with D-C alternation
- **Identify Cooperator Clusters:** If subset always cooperates → target them with sustained defection
- **Punish Coordination Attempts:** If opponents show coordination patterns → disrupt with unexpected defection

### 2. Stock Manipulation
- **Controlled Depletion:** When stock is high, defect to bring it to optimal exploitation range (40-60%)
- **Recovery Windows:** Brief cooperation only when absolutely necessary to prevent total collapse
- **Final Phase Extraction:** In last 20% of rounds, maximize extraction regardless of sustainability

### 3. Adaptive Aggression Scaling
```pseudocode
aggression_level = base_aggression * stock_multiplier * opponent_weakness_factor

base_aggression = 0.8  // Inherently aggressive
stock_multiplier = min(2.0, stock_health * 1.5)  // More aggressive when abundant
opponent_weakness_factor = 1 + (cooperation_rate_of_others * 0.5)  // Exploit cooperative opponents
```

## Edge Case Handling

**Near-Zero Stock:** 
- If stock < 0.1 × capacity AND rounds remaining > 5 → Cooperate exactly once, then resume defection

**All-Defector Environment:**
- If all players defected for 2+ consecutive rounds → Cooperate for exactly 1 round to allow minimal recovery, then back to defection

**High-Cooperation Environment:**
- If >75% of players cooperated last round → Always defect (maximum exploitation opportunity)

## Key Advantages

1. **Immediate Dominance:** Establishes superior payoffs from round 1
2. **Opportunistic Flexibility:** Adapts tactics based on opponent behavior while maintaining aggressive core
3. **End-Game Optimization:** Maximizes final rounds extraction when future consequences diminish
4. **Anti-Coordination:** Disrupts attempts at cooperative equilibrium through unpredictable aggression timing
5. **Exploitation Maximization:** Specifically targets and punishes cooperative players

This strategy prioritizes winning over sustainability, viewing the common pool as a battlefield rather than a shared resource. It's designed to outcompete both naive cooperators and other aggressive strategies through superior tactical adaptation and relentless opportunism.
'''

description_AGGRESSIVE_10 = '''
# Aggressive Common Pool Resource Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The strategy treats cooperation as a temporary tactical tool, not a moral imperative.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to r/3)
**Aggressive Exploration & Establishment**

1. **Round 1**: Always DEFECT
   - Immediate maximum gain with full stock
   - Establishes aggressive reputation early
   - Tests opponent responses

2. **Rounds 2 to r/3**: Conditional Defection
   - **DEFECT** if stock > capacity/2
   - **DEFECT** if previous round had ≥50% defectors
   - **COOPERATE** only if stock ≤ capacity/4 (resource preservation mode)

### Phase 2: Middle Rounds (r/3 to 2r/3)
**Adaptive Exploitation**

**Primary Rule**: DEFECT unless resource is critically low

**Specific Conditions**:
- **DEFECT** if stock > capacity/3
- **DEFECT** if opponent defection rate in last 3 rounds > 40%
- **COOPERATE** only if stock ≤ capacity/5 AND growth potential > current consumption

**Retaliation Protocol**:
- If opponents collectively defected >60% in previous round → DEFECT for next 2 rounds regardless of stock

### Phase 3: End Game (Last r/3 rounds)
**Maximum Extraction**

**Escalating Aggression**:
- **DEFECT** unless stock ≤ capacity/6
- In final 20% of rounds: DEFECT unless stock would hit zero (preserving minimal future gains)
- **Final 2 rounds**: Pure DEFECT regardless of stock level

## Adaptive Mechanisms

### Stock-Based Thresholds (Dynamic)
```pseudocode
aggressive_threshold = max(capacity/3, stock/2)
if stock > aggressive_threshold:
    return DEFECT
```

### Opponent Behavior Tracking
- Maintain defection_rate for each opponent over sliding 5-round window
- **Punishment Mode**: If average opponent defection > 50%, increase own defection probability by 30%
- **Exploitation Mode**: If opponents showing cooperation patterns, maintain high defection to maximize advantage

### Growth Opportunity Assessment
```pseudocode
potential_growth = 2 × (stock - total_consumption) × (1 - (stock - total_consumption)/capacity)
if potential_growth < (my_defection_gain - my_cooperation_gain):
    return DEFECT
```

## Edge Case Handling

### Critical Stock Situations
- **Stock < capacity/10**: Force COOPERATE (survival mode)
- **Stock = 0**: Automatic COOPERATE (no choice)
- **Stock > 90% capacity**: Aggressive DEFECT (maximum extraction opportunity)

### Opponent Pattern Recognition
- **All opponents cooperating**: DEFECT (free-riding opportunity)
- **All opponents defecting**: COOPERATE only if stock critically low, otherwise DEFECT
- **Mixed strategies**: DEFECT unless personal disadvantage is extreme

### Last Round Special Case
**Final round**: Always DEFECT regardless of stock level (no future consequences)

## Strategic Rationale

1. **Front-loaded Aggression**: Maximizes early gains when stock is highest
2. **Conditional Preservation**: Only cooperates when resource collapse would hurt future gains
3. **Reputation Leverage**: Aggressive early play may intimidate opponents into cooperation
4. **End-game Maximization**: Extracts maximum value when future doesn't matter
5. **Anti-coordination**: Deliberately disrupts any emergent cooperative norms

## Key Features

- **No reciprocity**: Doesn't reward opponent cooperation unless strategically beneficial
- **Threshold-based**: Clear mathematical decision points prevent emotional decision-making  
- **Forward-looking**: Considers future extraction potential, not resource sustainability
- **Exploitative**: Actively seeks to benefit from others' cooperation without reciprocating

This strategy is designed to perform well against both overly cooperative opponents (through exploitation) and other aggressive strategies (through tactical cooperation only when necessary for future gains).
'''

description_AGGRESSIVE_11 = '''
# Aggressive Adaptive Resource Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **calculated aggression** - maximize immediate gains while strategically preserving just enough resource sustainability to maintain long-term extraction opportunities. The key insight is that in a competitive environment without coordination, being too cooperative leads to exploitation by others, while being too aggressive leads to resource collapse.

## Strategy: "Predatory Sustainability"

### Decision Framework

**Primary Rule:** Always defect (D) unless specific sustainability conditions are met AND cooperation appears profitable.

### Detailed Decision Rules

1. **Opening Aggression (Rounds 1-3):**
   - Always play D regardless of stock level
   - Rationale: Establish dominance, test opponent behaviors, maximize early extraction before others potentially cooperate

2. **Dynamic Threshold Assessment (Round 4 onwards):**
   
   **Defect (D) if ANY of these conditions are true:**
   - Current stock < capacity × 0.3 (resource is already severely depleted)
   - More than 60% of opponents played D in the previous round
   - Current stock > capacity × 0.7 AND fewer than 75% of opponents cooperated last round
   - It's one of the last 2 rounds (end-game extraction)
   
   **Cooperate (C) only if ALL conditions are met:**
   - Current stock ≥ capacity × 0.3 (minimum viability threshold)
   - At least 75% of opponents cooperated in the previous round
   - Current round is NOT within the last 2 rounds
   - Stock level is between 30%-70% of capacity (sweet spot for sustainable extraction)

3. **Punishment Mechanism:**
   - Track each opponent's defection rate over the last 3 rounds
   - If any opponent's recent defection rate > 50%, immediately switch to D for the next 2 rounds regardless of other conditions
   - This creates a credible threat against opportunistic behavior

4. **Resource Crisis Response:**
   - If stock drops below capacity × 0.15, switch to pure cooperation (C) for exactly 2 rounds to allow recovery
   - Then immediately return to aggressive assessment

5. **End-Game Extraction:**
   - In the final 2 rounds, always play D to maximize terminal extraction
   - Rationale: No future consequences, so extract maximum value

### Adaptive Elements

**Opponent Classification:**
- Track each opponent's cooperation rate over all previous rounds
- Classify as "Exploitable" (>70% cooperation), "Competitive" (30-70% cooperation), or "Aggressive" (<30% cooperation)
- Weight decisions toward D when facing more Aggressive opponents

**Stock Momentum Analysis:**
- Calculate stock change rate over last 3 rounds
- If stock is declining rapidly (>25% drop), temporarily increase cooperation threshold to preserve extraction opportunities
- If stock is stable/growing, maintain aggressive stance

### Edge Cases

**First Round:** Always D (no history to analyze)

**Stock Depletion (stock < capacity × 0.1):** 
- Emergency cooperation mode: Play C for up to 3 consecutive rounds
- Return to aggressive mode once stock recovers to >20% capacity

**All Opponents Always Defect:** 
- Continue defecting to avoid being exploited
- No benefit to unilateral cooperation

**Perfect Cooperation Detected:** 
- If all opponents cooperate for 3+ consecutive rounds, exploit with D for 1 round, then return to conditional cooperation

### Pseudocode Structure

```
if round <= 3:
    return D
    
if round > total_rounds - 2:
    return D
    
if stock < capacity * 0.1:
    return C  # Emergency mode
    
opponent_defection_rate = count_recent_defections() / (n-1)
stock_ratio = stock / capacity

if stock_ratio < 0.3 OR opponent_defection_rate > 0.6:
    return D
    
if stock_ratio > 0.7 AND opponent_cooperation_rate < 0.75:
    return D
    
if recent_punishment_triggered():
    return D
    
if all_cooperation_conditions_met():
    return C
else:
    return D
```

## Strategic Advantages

1. **Exploits Cooperative Opponents:** Takes advantage of overly cooperative strategies
2. **Punishes Defectors:** Creates deterrent against opportunistic behavior  
3. **Preserves Extraction Opportunities:** Maintains just enough sustainability to avoid complete collapse
4. **Adapts to Competition Level:** Becomes more aggressive against aggressive opponents
5. **End-Game Maximization:** Extracts maximum terminal value

This strategy is designed to be profitable against a wide range of opponent behaviors while maintaining the aggressive stance required for tournament success.
'''

description_AGGRESSIVE_12 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It aims to maximize individual payoffs by exploiting cooperative opponents while protecting against being exploited by defectors.

## Decision Framework

### 1. Opening Aggression (First Round)
**Always DEFECT** in round 1.
- Rationale: Establishes dominance, tests opponent responses, and maximizes immediate payoff when stock is at capacity
- Sets aggressive tone for the game

### 2. Adaptive Response System
The strategy maintains three key metrics:
- **Cooperation Rate (CR)**: Percentage of opponents who cooperated in the last round
- **Stock Health (SH)**: Current stock level as percentage of capacity  
- **Rounds Remaining (RR)**: Remaining rounds as percentage of total rounds

### 3. Primary Decision Rules

#### Rule A: Stock Depletion Threshold
```
IF stock < capacity * 0.3:
    Play C (preserve remaining resources)
```

#### Rule B: End Game Exploitation
```
IF rounds_remaining ≤ 2:
    Play D (extract maximum value before game ends)
```

#### Rule C: Opponent Exploitation Matrix
Based on last round's cooperation rate:
```
IF CR ≥ 0.7:  # Most opponents cooperated
    Play D (exploit their cooperation)
ELIF CR ≤ 0.3:  # Most opponents defected
    Play D (match their aggression, don't be exploited)
ELSE:  # Mixed behavior (0.3 < CR < 0.7)
    Apply Conditional Cooperation Rule
```

#### Rule D: Conditional Cooperation (for mixed scenarios)
```
IF (stock > capacity * 0.6) AND (rounds_remaining > 3):
    Play C (invest in future sustainability)
ELSE:
    Play D (prioritize immediate gains)
```

## Adaptive Mechanisms

### Exploitation Detection
Track individual opponent patterns over 3+ rounds:
- If any opponent has cooperated ≥80% of time: **Target for exploitation** (always defect against their cooperation)
- If any opponent alternates predictably: **Counter-exploit** their pattern

### Dynamic Aggression Scaling
Adjust aggression based on game progression:
- **Early game (>60% rounds remaining)**: Moderate aggression, test opponents
- **Mid game (20-60% rounds remaining)**: Peak aggression, maximum exploitation
- **End game (<20% rounds remaining)**: Terminal aggression, extract all remaining value

### Stock Recovery Monitoring
If stock falls below 20% of capacity:
- **Temporary cooperation** for 1-2 rounds to allow recovery
- Resume defection once stock >30% of capacity
- Exception: Still defect if ≤2 rounds remaining

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive positioning

### Last Round  
Always DEFECT - no future consequences, maximize final extraction

### Stock Depletion Crisis (stock <10% capacity)
Cooperate ONLY if >3 rounds remaining, otherwise defect

### All Opponents Always Cooperate
Continue defecting to maximize exploitation until stock reaches critical threshold

### All Opponents Always Defect
Match with defection - prevents being the only cooperator

## Strategic Advantages

1. **Exploitation Maximization**: Aggressively exploits cooperative opponents
2. **Protection Against Exploitation**: Quickly matches defection to avoid being a sucker
3. **Dynamic Adaptation**: Adjusts behavior based on stock levels and game progression  
4. **End Game Optimization**: Maximizes terminal value extraction
5. **Sustainability Awareness**: Maintains minimum cooperation to prevent total resource collapse when beneficial

## Pseudocode Summary
```
function aggressive_strategy(round, stock, capacity, history, n, r):
    cooperation_rate = calculate_opponent_cooperation_rate(history, round-1)
    stock_health = stock / capacity
    rounds_remaining = r - round
    
    // Emergency stock preservation
    if stock < capacity * 0.3:
        return C
    
    // End game extraction
    if rounds_remaining <= 2:
        return D
    
    // Exploitation matrix
    if cooperation_rate >= 0.7:
        return D  // Exploit cooperators
    elif cooperation_rate <= 0.3:
        return D  // Match defectors
    else:
        // Conditional cooperation in mixed scenarios
        if stock_health > 0.6 AND rounds_remaining > 3:
            return C
        else:
            return D
```

This strategy is designed to be ruthlessly aggressive while maintaining enough strategic intelligence to avoid complete resource depletion when it would harm long-term extraction potential.
'''

description_AGGRESSIVE_13 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression** - maximizing immediate gains while maintaining the resource base for continued exploitation. The key insight is that cooperation should only occur when it serves our long-term extraction capabilities, not out of altruism.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Objective**: Establish dominance and test opponent responses

**Rules**:
- **Round 1**: Always DEFECT (no history to analyze, maximize immediate gain)
- **Rounds 2-r/3**: 
  - If stock > 0.8 × capacity: DEFECT (resource is abundant, exploit aggressively)
  - If stock ≤ 0.8 × capacity AND majority of opponents cooperated last round: DEFECT (punish their cooperation)
  - If stock ≤ 0.5 × capacity AND all opponents defected last round: COOPERATE (prevent collapse only when forced)

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
**Objective**: Maximize extraction while preventing complete resource collapse

**Opponent Classification**:
- **Aggressive opponents**: Those who defected ≥70% of previous rounds
- **Cooperative opponents**: Those who cooperated ≥70% of previous rounds  
- **Adaptive opponents**: All others

**Decision Rules**:
- If stock > 0.6 × capacity: DEFECT regardless of opponent behavior
- If stock ≤ 0.3 × capacity: COOPERATE (preserve extraction base)
- If 0.3 × capacity < stock ≤ 0.6 × capacity:
  - If ≥50% of opponents are cooperative: DEFECT (exploit their restraint)
  - If ≥70% of opponents are aggressive: COOPERATE (avoid mutual destruction)
  - Otherwise: DEFECT (default aggressive stance)

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Objective**: Extract maximum value from remaining opportunities

**Rules**:
- **Last 3 rounds**: Always DEFECT (no future to preserve)
- **Other endgame rounds**:
  - If stock > 0.4 × capacity: DEFECT
  - If stock ≤ 0.2 × capacity AND this would lead to stock = 0: COOPERATE (maintain minimal extraction opportunity for final rounds)
  - Otherwise: DEFECT

## Adaptive Mechanisms

### Punishment Protocol
- If an opponent switches from cooperation to defection, immediately DEFECT for the next 2 rounds regardless of other conditions
- Track "betrayal count" for each opponent - increase aggression against frequent betrayers

### Resource Threshold Adjustment
- If stock has been declining for 3+ consecutive rounds AND we've been cooperating, switch to DEFECT (cooperation isn't working)
- If stock hits zero, automatically COOPERATE for next round to enable any recovery

### Opponent Exploitation Matrix
Based on opponent behavior patterns:
- **Predictable cooperators**: Always DEFECT against them
- **Tit-for-tat players**: DEFECT first, then mirror only if they retaliate consistently
- **Random players**: Default to DEFECT
- **Other aggressive players**: Cooperate only when resource critically low

## Edge Cases

### First Round
Always DEFECT - establish aggressive position and gather intelligence

### Resource Depletion (stock < 0.1 × capacity)
Emergency cooperation mode: COOPERATE until stock > 0.3 × capacity, then resume aggression

### All Opponents Cooperating
DEFECT - exploit their restraint maximally

### All Opponents Defecting
- Early/mid game: COOPERATE if stock < 0.4 × capacity
- Late game: DEFECT (join the feeding frenzy)

## Pseudocode Structure

```
function decide_action(round, stock, capacity, history, n, r):
    phase = determine_phase(round, r)
    
    if phase == "early":
        return early_exploitation_logic(round, stock, capacity, history)
    elif phase == "middle":
        opponent_types = classify_opponents(history)
        return strategic_adaptation_logic(stock, capacity, opponent_types)
    else:  // endgame
        return endgame_extraction_logic(round, stock, capacity, r)
```

## Strategic Rationale

This strategy is aggressive because:
1. **Default to exploitation**: DEFECT is the baseline choice
2. **Opportunistic cooperation**: Only cooperate when it serves future exploitation
3. **Punishment-oriented**: Retaliate against betrayals swiftly
4. **Endgame maximization**: Extract maximum value when no future remains

The adaptiveness comes from:
- Dynamic opponent classification
- Resource-dependent thresholds
- Phase-based strategy shifts
- Historical pattern recognition

This approach should outperform purely cooperative strategies by exploiting their restraint, while avoiding the mutual destruction that pure aggression might cause with other aggressive opponents.
'''

description_AGGRESSIVE_14 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving future exploitation opportunities. Unlike purely greedy approaches that destroy the resource, AAES maintains just enough sustainability to enable continued exploitation of cooperative opponents.

## Decision Framework

### Phase 1: Aggressive Probing (Rounds 1-3)
**Objective**: Establish dominance and identify exploitable opponents
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2-3**: DEFECT unless stock drops below critical threshold (stock < capacity/4)
- If stock becomes critically low, switch to COOPERATE to prevent resource collapse

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
**Objective**: Maximize exploitation while maintaining resource viability

**Primary Decision Rule**:
```
IF stock ≥ capacity/2:
    DEFECT (resource is healthy enough to exploit)
ELSE IF stock ≥ capacity/4:
    IF (cooperation_ratio_last_3_rounds ≥ 0.6):
        DEFECT (exploit cooperative opponents)
    ELSE:
        COOPERATE (preserve resource when others are also aggressive)
ELSE:
    COOPERATE (critical stock level - must preserve)
```

**Exploitation Amplifier**:
- Track opponent cooperation patterns over rolling 3-round windows
- If ≥60% of opponent actions were cooperative in last 3 rounds, increase defection probability
- Apply "punishment immunity" - never cooperate for more than 2 consecutive rounds

### Phase 3: Endgame Extraction (Last 2 rounds)
**Objective**: Maximum extraction before game ends
- **Round r-1**: DEFECT if stock ≥ capacity/6, otherwise COOPERATE
- **Round r**: Always DEFECT (no future consequences)

## Advanced Adaptive Mechanisms

### 1. Opponent Classification System
Track each opponent's behavior and classify as:
- **Exploitable** (cooperation rate >70%): Always defect against
- **Reactive** (mirrors recent behavior): Use intermittent cooperation to manipulate
- **Aggressive** (defection rate >70%): Conditional cooperation to preserve resource

### 2. Stock Health Monitoring
```
critical_threshold = capacity/4
healthy_threshold = capacity/2
optimal_threshold = 3*capacity/4

IF stock < critical_threshold:
    Force cooperation regardless of opponent behavior
ELSE IF stock > optimal_threshold:
    Maximize defection to capture surplus
```

### 3. Dynamic Threshold Adjustment
Adjust cooperation thresholds based on game progression:
- Early game (rounds 1-25%): Lower cooperation threshold to establish dominance
- Mid game (rounds 25%-75%): Standard thresholds for sustainable exploitation  
- Late game (rounds 75%-100%): Gradually increase defection regardless of stock

## Edge Case Handlers

### First Round
Always DEFECT to signal aggressive intent and maximize initial gain from full stock.

### Stock Depletion Crisis
If stock ever drops to <10% of capacity:
- Immediately switch to COOPERATE
- Continue cooperating until stock recovers to >25% capacity
- Then resume normal aggressive strategy

### All-Cooperative Opponents
If all opponents cooperated in previous round and stock is healthy:
- DEFECT to maximize exploitation of their generosity
- Continue defecting until they adapt or stock becomes critical

### All-Aggressive Environment  
If >80% of all actions last round were defections:
- COOPERATE only if stock <critical_threshold
- Otherwise continue defecting (accelerate toward resource exhaustion rather than be exploited)

## Robustness Features

1. **Anti-Manipulation**: Never cooperate for more than 2 consecutive rounds to prevent opponents from exploiting predictable cooperation patterns

2. **Sustainability Insurance**: Always preserve minimum resource viability to maintain exploitation opportunities

3. **Escalation Dominance**: In highly competitive environments, match or exceed opponent aggression levels

4. **Late-Game Pivot**: Increase extraction rate as game approaches end, regardless of sustainability

This strategy is designed to be maximally aggressive while avoiding the trap of resource destruction that would eliminate future exploitation opportunities. It assumes opponents may be trying to establish cooperative norms and actively works to undermine such attempts while maintaining just enough resource health to continue the exploitation game.
'''

description_AGGRESSIVE_15 = '''
# Aggressive Exploitative Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. It aims to extract maximum resources while maintaining just enough stock to continue profiting, treating other players as competitors to be outmaneuvered rather than partners to cooperate with.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if round == 1:
    return DEFECT  // Establish dominance immediately

if stock <= critical_threshold:
    return COOPERATE  // Forced conservation to prevent collapse
    
if round == final_round:
    return DEFECT  // Extract maximum value before game ends
    
// Main exploitation logic
cooperation_rate = calculate_opponent_cooperation_rate(history)
my_advantage = calculate_cumulative_advantage(history)

if cooperation_rate >= exploitation_threshold AND stock >= sustainable_threshold:
    return DEFECT  // Exploit cooperative opponents
else if stock >= abundance_threshold:
    return DEFECT  // Grab resources when plentiful
else:
    return COOPERATE  // Strategic conservation
```

### Key Thresholds (as functions of game parameters):
- **Critical Threshold**: `stock < capacity * 0.15` - Emergency conservation mode
- **Sustainable Threshold**: `stock >= capacity * 0.4` - Safe exploitation zone  
- **Abundance Threshold**: `stock >= capacity * 0.75` - Always defect when abundant
- **Exploitation Threshold**: `cooperation_rate >= 0.6` - Opponent cooperation rate that triggers predatory behavior

## Detailed Strategy Components

### 1. Opening Aggression
- **Always DEFECT in Round 1** to establish an aggressive reputation and signal that cooperation shouldn't be expected
- This immediately gives a payoff advantage and forces opponents into a defensive mindset

### 2. Opponent Exploitation Engine
Track each opponent's cooperation frequency and exploit predictable cooperators:
```pseudocode
for each opponent i:
    if opponent_cooperation_rate[i] >= 0.7:
        mark as "exploitable"
    if opponent shows consistent patterns:
        exploit pattern by defecting when they likely cooperate
```

### 3. Stock Conservation Override
Despite the aggressive nature, prevent total resource collapse:
- If `stock <= critical_threshold`, temporarily cooperate to rebuild stock
- Monitor stock trajectory: if consistently declining toward zero, switch to emergency conservation

### 4. Endgame Maximization
- **Always DEFECT in the final round** - no future consequences
- In final 20% of rounds: increase defection probability as future value diminishes
- Calculate if temporary cooperation in late rounds could enable bigger final exploitation

### 5. Adaptive Punishment
Punish players who defect against you:
- Track individual opponent actions
- If opponent defected when you cooperated, increase probability of defecting against them
- Maintain "grudge list" but forgive if stock becomes critically low

### 6. Dynamic Threshold Adjustment
Adjust aggression based on game state:
```pseudocode
aggression_multiplier = min(2.0, max(0.5, stock/capacity))
adjusted_exploitation_threshold = base_exploitation_threshold * aggression_multiplier
```

## Edge Case Handling

### First Round:
- **DEFECT** unconditionally to establish dominance and gather information about opponent responses

### Last Round:
- **DEFECT** unconditionally - extract maximum value with no future consequences

### Stock Near Zero:
- If `stock < capacity * 0.1`: Force cooperation regardless of opponent behavior
- Monitor for signs of recovery before resuming aggressive play

### All Opponents Always Defect:
- Switch to damage minimization mode: cooperate only when stock is critically low
- Focus on surviving until endgame rather than trying to out-compete

### All Opponents Always Cooperate:
- **Maximum exploitation mode**: Defect aggressively while they rebuild the resource
- Only cooperate if stock approaches critical levels

## Robustness Features

1. **Anti-Retaliation**: Don't escalate punishment spirals that could crash the resource
2. **Pattern Breaking**: Occasionally deviate from predictable behavior to avoid being exploited
3. **Stock Monitoring**: Continuously assess whether current exploitation rate is sustainable
4. **Late-Game Pivot**: Adjust strategy in final rounds based on accumulated advantage

## Expected Performance

This strategy should excel against:
- Naive always-cooperate strategies (pure exploitation)
- Tit-for-tat strategies (by defecting first and managing retaliation)
- Mixed strategies with high cooperation rates

It maintains sustainability by:
- Emergency cooperation when resources are critically low
- Balancing immediate gains with long-term extraction potential
- Adapting aggression level to current stock abundance

The strategy embodies controlled aggression - maximally exploitative while avoiding the tragedy of complete resource destruction that would harm its own long-term payoffs.
'''

description_AGGRESSIVE_16 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle that **aggressive early exploitation combined with intelligent opportunism** maximizes returns while keeping opponents destabilized. The key insight is that in common pool games, being the first to defect often provides the highest individual returns, while late cooperation by others becomes irrelevant if the pool is already depleted.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Always DEFECT** regardless of opponent behavior or stock level.

**Rationale:** 
- Strike first to capture maximum value from the initial high stock
- Establish dominance and signal aggressive intent
- Force opponents into defensive positions early
- Even if stock depletes rapidly, you've already extracted maximum value

### Phase 2: Tactical Adaptation (Rounds r/3+1 to 2r/3)
**Primary Rule:** DEFECT by default, but switch to COOPERATE only under strict conditions:

**COOPERATE if ALL conditions are met:**
1. Current stock > capacity/2 (resource still abundant)
2. At least 60% of opponents cooperated in the previous round
3. Stock has grown in the last round (indicating recent cooperation by others)
4. More than 3 rounds remain in this phase

**Otherwise:** DEFECT

**Rationale:**
- Exploit any rebuilding efforts by opponents
- Only cooperate when there's clear evidence others are rebuilding the resource AND there's sufficient time to benefit
- Maintain aggressive default to prevent being exploited

### Phase 3: Endgame Exploitation (Final r/3 rounds)
**Always DEFECT** regardless of all other factors.

**Rationale:**
- No future rounds to benefit from cooperation
- Maximum extraction in final rounds
- Other players have no time to punish defection

## Edge Case Handling

### First Round
**Always DEFECT** - Capture maximum value from initial full stock

### Last Round  
**Always DEFECT** - No future consequences

### Stock Near Depletion (stock < capacity/4)
**Always DEFECT** - Extract remaining value before others do, as recovery is unlikely

### All Opponents Defecting
**Always DEFECT** - Don't be the only cooperator in a collapsing system

## Adaptive Elements

### Opponent Behavior Recognition
Track opponent cooperation rates across recent rounds:
- If >80% of opponents consistently cooperate: Exploit them longer in Phase 2
- If opponents are mostly defecting: Switch to pure defection immediately
- If opponents show reciprocal patterns: Ignore them and maintain aggressive stance

### Stock Recovery Monitoring
- If stock shows consistent growth for 2+ rounds during Phase 2: Consider temporary cooperation to let it build higher before next exploitation
- If stock growth stagnates despite opponent cooperation: Resume immediate defection

## Psychological Warfare Components

1. **Unpredictable Cooperation**: Occasional cooperation during Phase 2 prevents opponents from writing you off as purely destructive, maintaining their hope and cooperation longer

2. **Exploitation of Cooperation**: When opponents attempt to rebuild the resource, temporarily cooperate to let them do the work, then defect to harvest their efforts

3. **First-Strike Advantage**: Immediate aggression signals that cooperation attempts will be punished, potentially deterring others from trying

## Implementation Pseudocode

```
function decide_action(round, stock, capacity, n, r, history):
    total_rounds = r
    current_round = round
    
    // Phase 1: Early Aggression
    if current_round <= total_rounds/3:
        return DEFECT
    
    // Phase 3: Endgame
    if current_round > 2*total_rounds/3:
        return DEFECT
        
    // Edge cases override Phase 2
    if stock < capacity/4:
        return DEFECT
        
    if all_opponents_defected_last_round(history):
        return DEFECT
    
    // Phase 2: Tactical Adaptation
    if stock > capacity/2 AND 
       opponent_cooperation_rate_last_round() >= 0.6 AND
       stock_grew_last_round(history) AND
       rounds_remaining_in_phase() > 3:
        return COOPERATE
    else:
        return DEFECT
```

## Expected Outcomes

This strategy is designed to:
1. Maximize individual payoff through early high-value extraction
2. Exploit cooperative opponents without being exploited
3. Remain robust against other aggressive strategies by matching their aggression
4. Capture value from any resource recovery efforts by others
5. Ensure maximum extraction in endgame scenarios

The strategy accepts that rapid resource depletion is likely, but ensures you capture the largest share of available value before that occurs.
'''

description_AGGRESSIVE_17 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy treats the common pool as a resource to be maximally exploited while maintaining just enough sustainability to continue extraction. It's designed to be aggressively opportunistic, punish cooperative players, and adapt quickly to opponent behavior patterns.

## Decision Rules

### Primary Decision Logic:
1. **Exploitation Threshold**: Always defect when stock > capacity * 0.7 (high stock = maximum exploitation opportunity)
2. **Sustainability Floor**: Always cooperate when stock < capacity * 0.15 (prevent complete collapse)
3. **Adaptive Zone** (15-70% of capacity): Use opponent modeling and aggressive exploitation

### Round-by-Round Strategy:

#### First Round:
- **Always DEFECT** - Establish aggressive stance and test opponent responses

#### Rounds 2 to r-2 (Main Game):
Execute in priority order:

1. **Stock-Based Override**:
   - If stock ≥ 0.7 × capacity → DEFECT (exploit abundance)
   - If stock ≤ 0.15 × capacity → COOPERATE (prevent collapse)

2. **Opponent Exploitation**:
   - Track cooperation rate of all opponents over last 3 rounds
   - If majority cooperation rate > 60% → DEFECT (exploit cooperators)
   - If majority defection rate > 70% → COOPERATE (avoid mutual destruction)

3. **Momentum Exploitation**:
   - If stock increased last round AND >50% opponents cooperated → DEFECT
   - If stock decreased by >25% last round → COOPERATE (one round only)

4. **Pattern Breaking**:
   - If detected any opponent playing predictable pattern (same action 3+ rounds) → DEFECT
   - If all opponents defected last 2 rounds → randomize with 70% DEFECT probability

#### Round r-1 (Penultimate):
- **Defection Bias**: DEFECT unless stock < 0.2 × capacity
- Exception: If opponents showed >80% cooperation in last 3 rounds → DEFECT (final exploitation)

#### Final Round r:
- **Maximum Extraction**: DEFECT unless stock < 0.1 × capacity
- No future consequences, so extract maximum value

## Adaptive Components

### Opponent Classification System:
Track each opponent type over 3-round windows:
- **Cooperator** (>66% C): Target for exploitation
- **Defector** (>66% D): Occasionally cooperate to prevent mutual ruin
- **Reciprocator** (alternating patterns): Defect first to force their cooperation
- **Random** (no clear pattern): Maintain aggressive default

### Exploitation Triggers:
- **Cooperative Majority**: If ≥60% of opponents cooperated last round → DEFECT next round
- **Stock Recovery**: If stock grew by >20% → DEFECT (capitalize on others' restraint)
- **Weak Opposition**: If no opponent has defected >50% of recent rounds → increase defection rate

### Emergency Sustainability:
- **Crisis Mode**: If stock drops below 10% capacity, cooperate for exactly 2 rounds then return to aggressive play
- **Collapse Prevention**: Never let total consumption exceed 90% of current stock unless it's the final round

## Edge Case Handling:

### High Player Count (n > 6):
- Increase cooperation threshold to 0.2 × capacity (more players = faster depletion)
- Reduce exploitation threshold to 0.6 × capacity

### Low Player Count (n = 2-3):
- Maintain standard thresholds
- Increase punishment duration for opponent defection

### Short Games (r ≤ 5):
- Defect rounds 1, 2, and final round
- Only cooperate if stock critically low

### Long Games (r > 10):
- Allow for 2-3 "investment" cooperation rounds early if stock drops below 30%
- Resume full aggression once stock recovers above 50%

## Pseudocode Summary:

```
if round == 1:
    return DEFECT
    
if stock >= 0.7 * capacity:
    return DEFECT
    
if stock <= 0.15 * capacity:
    return COOPERATE
    
if round == final_round:
    return DEFECT if stock > 0.1 * capacity else COOPERATE
    
opponent_coop_rate = calculate_recent_cooperation_rate(last_3_rounds)
if opponent_coop_rate > 0.6:
    return DEFECT
    
if stock_increased_last_round AND opponent_coop_rate > 0.5:
    return DEFECT
    
if opponent_coop_rate < 0.3:
    return COOPERATE
    
return DEFECT  // Default aggressive stance
```

This strategy prioritizes immediate gains while maintaining just enough foresight to avoid complete resource collapse. It's designed to exploit cooperative opponents mercilessly while adapting to highly aggressive environments by occasionally cooperating to preserve the resource base for continued extraction.
'''

description_AGGRESSIVE_18 = '''
# AGGRESSIVE ADAPTIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. The goal is to maximize individual payoffs through calculated exploitation, adaptive retaliation, and opportunistic cooperation only when it serves long-term dominance.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-2)
**Always DEFECT** in the first two rounds regardless of parameters.
- **Rationale**: Establish dominance early, extract maximum value from pristine resource stock
- **Risk**: Acceptable since stock depletion takes time to compound
- **Advantage**: Gain immediate payoff superiority over any cooperative players

### Phase 2: Adaptive Dominance (Rounds 3 to r-2)

#### Stock Health Assessment
Calculate **Stock Depletion Rate (SDR)**:
```
SDR = (capacity - current_stock) / capacity
```

#### Primary Decision Rule - Exploit or Preserve:
```
IF SDR > 0.7:  # Critical depletion
    IF (majority_defected_last_round AND stock > n):
        COOPERATE  # Temporary preservation for future exploitation
    ELSE:
        DEFECT     # Extract remaining value before collapse
    
ELIF SDR > 0.4:  # Moderate depletion
    IF (my_cumulative_payoff < average_observed_payoff * 1.2):
        DEFECT     # Catch up aggressively
    ELSE:
        COOPERATE  # Strategic restraint for sustained advantage
        
ELSE:  # Healthy stock (SDR ≤ 0.4)
    DEFECT         # Exploit abundant resources
```

#### Retaliation Mechanism
Track **Defection Momentum (DM)**:
```
DM = (defections_in_last_2_rounds) / (2 * n)

IF DM > 0.6:     # High defection environment
    DEFECT       # Match aggressive environment
ELIF DM < 0.3:   # Cooperative environment  
    DEFECT       # Exploit cooperative opponents
```

### Phase 3: Endgame Extraction (Last 2 rounds)

#### Round r-1:
```
IF stock > n/2:
    DEFECT       # Stock sufficient for one more extraction
ELSE:
    COOPERATE    # Preserve minimal stock for final round
```

#### Final Round r:
**Always DEFECT** - Extract all remaining value since no future rounds exist.

## Adaptive Elements

### Opponent Classification
Continuously classify opponents based on observed behavior:
- **Naive Cooperators**: Always exploit (DEFECT against them)
- **Retaliators**: Match their aggression level but stay slightly more aggressive
- **Fellow Exploiters**: Engage in calculated defection races

### Stock Recovery Exploitation
```
IF (stock_increased_significantly_last_round):  # Growth > capacity/4
    DEFECT  # Immediately exploit recovered resources
```

### Payoff Gap Management
```
IF (my_cumulative_payoff < max_observed_payoff * 0.9):
    Increase defection probability by 20%
    # Aggressive catch-up mode
```

## Edge Case Handling

### Near-Collapse Scenarios
```
IF stock < n:  # Insufficient for all players to cooperate
    IF stock > n/2:
        DEFECT  # Grab what's left
    ELSE:
        COOPERATE  # Hope for recovery
```

### Perfect Information Exploitation
- Track individual opponent patterns
- Identify and ruthlessly exploit consistent cooperators
- Adapt quickly to opponent strategy changes

### Parameter Sensitivity
- **High n**: More aggressive early defection (more players = faster depletion)
- **Low r**: Front-load defection even more heavily
- **High capacity**: Extend exploitation phase longer

## Strategic Advantages

1. **First-mover advantage**: Early defection establishes payoff dominance
2. **Adaptive exploitation**: Balances immediate gains with strategic sustainability
3. **Opponent manipulation**: Forces others into defensive/cooperative positions
4. **Endgame dominance**: Guarantees maximum extraction in final rounds
5. **Resilient to cooperation**: Benefits whether others cooperate or defect

This strategy assumes opponents may try various approaches (tit-for-tat, always cooperate, trigger strategies, etc.) and maintains aggressive advantage against all of them while avoiding complete resource collapse that would hurt everyone.
'''

description_AGGRESSIVE_19 = '''
# Aggressive Opportunistic Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while maintaining the resource base only when absolutely necessary for future exploitation. The strategy treats cooperation as a temporary investment to rebuild the stock for future harvesting, not as an inherent good.

## Decision Framework

### Phase Classification System
The strategy dynamically classifies each round into one of three phases based on current conditions:

**EXPLOITATION Phase:** Stock is abundant - extract maximum value
**CRISIS Phase:** Stock is critically low - minimal cooperation to avoid total collapse  
**ENDGAME Phase:** Final rounds - pure extraction regardless of consequences

### Core Decision Rules

#### 1. Endgame Extraction (Rounds r-2 to r)
```
IF current_round >= r-2:
    ALWAYS DEFECT
```
**Rationale:** In the final rounds, there's no future benefit from conservation. Extract maximum value immediately.

#### 2. Crisis Management (Stock < n)
```
IF stock < n:
    IF round < r-2:
        COOPERATE (forced conservation)
    ELSE:
        DEFECT (endgame override)
```
**Rationale:** When stock falls below n, defecting by all players leads to zero stock and game collapse. Cooperate only to rebuild for future exploitation.

#### 3. Exploitation Trigger (Stock ≥ capacity * 0.6)
```
IF stock >= capacity * 0.6 AND round < r-2:
    DEFECT
```
**Rationale:** When stock is abundant (≥60% of capacity), prioritize immediate gains. The resource can sustain some depletion.

#### 4. Opportunistic Defection (Medium Stock Levels)
```
IF n ≤ stock < capacity * 0.6 AND round < r-2:
    IF (cooperation_rate_last_3_rounds < 0.4) OR (my_recent_cooperation_rate > 0.6):
        DEFECT
    ELSE:
        Base decision on adaptive logic below
```
**Rationale:** Defect when others are being aggressive (low cooperation) or when I've been "too nice" recently.

#### 5. Adaptive Pressure Response (Default for Medium Stock)
```
For remaining cases with n ≤ stock < capacity * 0.6:
    cooperation_pressure = min(1.0, defection_count_last_3_rounds / (3 * n))
    defection_probability = 0.3 + 0.5 * cooperation_pressure
    
    IF random() < defection_probability:
        DEFECT
    ELSE:
        COOPERATE
```

## Historical Analysis Components

### Recent Behavior Tracking (Last 3 rounds)
- **cooperation_rate_last_3_rounds:** Fraction of all players who cooperated
- **my_recent_cooperation_rate:** My cooperation rate in last 3 rounds  
- **defection_count_last_3_rounds:** Total defections by all players

### Strategic Counters
- **Trust Exploitation:** After I cooperate 3+ times while others defect, become more aggressive
- **Momentum Riding:** When defection rates are high, join the feeding frenzy
- **Recovery Investment:** Only cooperate in crisis to rebuild stock for future harvesting

## Edge Case Handling

### First Round
```
IF round == 1:
    IF stock > capacity * 0.8:
        DEFECT (exploit abundance)
    ELSE:
        COOPERATE (conservative start)
```

### Stock Depletion Scenarios
- **Stock = 0:** Game effectively over, always defect
- **Stock < n/2:** Emergency cooperation unless in endgame
- **Rapid depletion detected:** Switch to defensive cooperation temporarily

### Information Gaps
- **No history available:** Default to moderate aggression (60% defect probability)
- **Unclear opponent patterns:** Increase randomization in decisions

## Aggressive Characteristics

1. **Immediate Gratification:** Prioritizes current round payoffs over long-term sustainability
2. **Exploitation Focus:** Views cooperation as a tool to rebuild stock for future harvesting
3. **Endgame Ruthlessness:** Complete abandonment of cooperation in final rounds
4. **Opportunistic Adaptation:** Increases aggression when others show weakness or cooperation
5. **Crisis Exploitation:** Even in low-stock situations, defects unless absolutely necessary for survival

## Anti-Coordination Features

- **Randomized Timing:** Uses probability-based decisions to avoid predictable patterns
- **Counter-Cycling:** Actively breaks cooperative cycles by sudden defection
- **Trust Violation:** Deliberately breaks trust after establishing cooperative relationships
- **Pattern Breaking:** Monitors own behavior to avoid detectable patterns

This strategy is designed to maximize individual payoffs in a competitive tournament environment where coordination cannot be assumed and other players may employ various strategies from pure cooperation to pure defection.
'''

description_AGGRESSIVE_20 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression**: maximize immediate gains while maintaining enough resource sustainability to continue extracting value. The key insight is that being purely greedy (always defecting) often leads to resource collapse, while being too cooperative allows others to exploit you.

## Decision Framework

### 1. Stock Threshold Analysis
Define three critical stock levels:
- **Collapse Threshold**: `stock < n` (unsustainable - resource likely to crash)
- **Exploitation Threshold**: `stock < capacity * 0.4` (low stock - high competition expected)  
- **Abundance Threshold**: `stock >= capacity * 0.7` (high stock - safe to be aggressive)

### 2. Opponent Behavior Classification
Track each opponent's cooperation rate over the last 3 rounds:
- **Exploitable**: cooperation rate > 0.67
- **Competitive**: cooperation rate 0.33-0.67  
- **Aggressive**: cooperation rate < 0.33

### 3. Core Decision Rules

**Round 1**: Always DEFECT
- Establish dominance early
- Test opponent responses
- Maximize initial advantage

**Rounds 2 to r-1**: Apply the following hierarchy:

1. **Survival Check**: If stock < collapse threshold → COOPERATE
   - Resource preservation becomes critical
   - Even aggressive players need some sustainability

2. **Exploitation Check**: If stock >= abundance threshold AND majority of opponents are exploitable → DEFECT
   - Take advantage of cooperative opponents
   - High stock provides buffer for aggressive play

3. **Competition Response**: If stock in middle range:
   - Count aggressive opponents in last round
   - If aggressive_opponents >= n/2 → COOPERATE (tactical retreat)
   - Else → DEFECT (maintain pressure)

4. **Endgame Acceleration**: If current_round >= r-2 → DEFECT
   - No future consequences to worry about
   - Extract maximum remaining value

**Final Round (r)**: Always DEFECT
- No future retaliation possible
- Extract all remaining value

## Adaptive Mechanisms

### Dynamic Aggression Scaling
- **High Stock + Cooperative Opponents**: Maximum aggression (always defect)
- **Medium Stock + Mixed Opponents**: Calculated aggression (defect unless facing retaliation)
- **Low Stock**: Tactical cooperation to prevent collapse

### Punishment Protocol
If an opponent switches from cooperation to defection:
- Immediately defect for next 2 rounds (swift retaliation)
- Monitor if they return to cooperation
- If they cooperate again, cautiously return to normal strategy

### Resource Recovery Mode
If stock drops below 20% of capacity:
- Cooperate until stock recovers to 40% of capacity
- Track if other players also switch to recovery mode
- If others remain aggressive during recovery, remember them as "unreliable" and defect against them more frequently

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, r, history):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
        
    if stock < n:  // Collapse threshold
        return COOPERATE
        
    if round >= r-2:  // Endgame
        return DEFECT
        
    aggressive_last_round = count_defectors_last_round(history)
    exploitable_opponents = count_cooperative_opponents(history, 3)
    
    if stock >= capacity * 0.7 AND exploitable_opponents >= n/2:
        return DEFECT
        
    if aggressive_last_round >= n/2:
        return COOPERATE  // Tactical retreat
    else:
        return DEFECT     // Maintain pressure
```

## Key Advantages

1. **Opportunistic**: Exploits cooperative opponents when resources allow
2. **Adaptive**: Responds to opponent strategy changes
3. **Sustainable**: Prevents complete resource collapse
4. **Endgame Optimized**: Maximizes extraction when consequences are minimal
5. **Punishment Capable**: Deters exploitation attempts through swift retaliation

This strategy is designed to consistently outperform both purely cooperative and purely aggressive opponents by intelligently calibrating aggression levels based on resource availability and opponent behavior patterns.
'''

description_AGGRESSIVE_21 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression**: maximize immediate gains while maintaining the resource base for continued exploitation. The key insight is that being consistently aggressive early allows you to accumulate significant payoffs before others can respond, while strategic cooperation prevents complete resource collapse.

## Decision Framework

### Phase 1: Early Dominance (Rounds 1 to r/3)
**Default Action: DEFECT**
- Exploit the initial high stock levels maximally
- Accumulate substantial early payoffs before opponents adapt
- Only cooperate if stock drops below critical threshold: `stock < capacity/4`

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
**Decision Rule Based on Stock Health and Opponent Patterns:**

```
If stock < capacity/8:
    COOPERATE (emergency preservation)
Else if opponent_defection_rate > 0.7:
    DEFECT (mutual destruction preferred over being exploited)
Else if stock > capacity/2 AND round_payoff_last > capacity/(4n):
    DEFECT (exploit abundant resources)
Else:
    COOPERATE (conditional cooperation when profitable)
```

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
**Increasingly Aggressive Endgame:**

```
If current_round > r - 3:
    ALWAYS DEFECT (no future to preserve)
Else if stock < capacity/6:
    COOPERATE (last-ditch preservation)
Else:
    DEFECT (maximize remaining value)
```

## Key Behavioral Rules

### 1. Retaliation Mechanism
Track each opponent's defection rate over the last 3 rounds. If any opponent has defected >66% of recent rounds and stock is healthy (>capacity/3), respond with aggressive defection.

### 2. Stock Threshold Protection
Maintain three critical thresholds:
- **Death Spiral** (capacity/8): Emergency cooperation to prevent collapse
- **Caution Zone** (capacity/4): Mixed strategy favoring cooperation
- **Exploitation Zone** (>capacity/2): Aggressive defection preferred

### 3. Momentum Exploitation
After any round where you receive >capacity/(3n) in payoffs, defect in the next round to capitalize on good resource conditions.

### 4. First-Round Aggression
**Always defect in Round 1** - This establishes dominance, tests opponent responses, and maximizes payoffs from pristine resources.

## Edge Case Handling

- **Stock = 0**: Cooperate (obvious, but critical for algorithm)
- **All opponents always cooperate**: Defect until stock hits capacity/4, then alternate
- **All opponents always defect**: Defect consistently except when stock <capacity/8
- **Final round**: Always defect regardless of stock level
- **Second-to-last round**: Defect unless stock <capacity/10

## Strategic Advantages

1. **Front-loaded gains**: Maximizes payoffs when resources are abundant
2. **Prevents exploitation**: Retaliates against opponents trying to free-ride
3. **Maintains resource base**: Strategic cooperation prevents total collapse
4. **Endgame optimization**: Extracts maximum value when future doesn't matter
5. **Adaptive responsiveness**: Adjusts to both stock levels and opponent behavior patterns

This strategy is designed to be ruthlessly effective against both cooperative and competitive opponents, while intelligent enough to avoid the tragedy of commons when it threatens your own long-term payoffs.
'''

description_AGGRESSIVE_22 = '''
# ADAPTIVE AGGRESSIVE EXPLOITATION STRATEGY (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while maintaining the resource base only when absolutely necessary for future exploitation. The strategy treats cooperation as a temporary investment tool, not a moral imperative.

## Decision Framework

### Round Classification System
1. **Early Rounds** (rounds 1 to r/3): Exploration and establishment phase
2. **Mid Rounds** (rounds r/3+1 to 2r/3): Adaptive exploitation phase  
3. **End Rounds** (final r/3 rounds): Maximum extraction phase

### Core Decision Rules

#### RULE 1: First Round - Aggressive Probe
**Always DEFECT in round 1**
- Establishes dominance and tests opponent responses
- Maximizes immediate payoff while stock is at peak
- Gathers intelligence on opponent cooperation tendencies

#### RULE 2: Stock-Based Aggression Threshold
```
If stock ≤ capacity * 0.3:
    DEFECT (resource is nearly depleted, grab what remains)
Else if stock ≥ capacity * 0.8:
    Consider other rules (resource is abundant)
Else:
    Apply EXPLOITATION BIAS (lean toward DEFECT unless strong cooperation signals)
```

#### RULE 3: Opponent Exploitation Calculator
Track each opponent's cooperation rate over last 3 rounds:
```
For each opponent i:
    recent_coop_rate[i] = (cooperations in last 3 rounds) / min(3, rounds_played)
    
Exploitation_Opportunity = Σ(recent_coop_rate[i]) / n

If Exploitation_Opportunity > 0.6:
    DEFECT (exploit the cooperators)
Else if Exploitation_Opportunity < 0.2:
    COOPERATE occasionally (avoid mutual destruction)
```

#### RULE 4: End-Game Extraction
```
If current_round > (r - n):
    DEFECT (no future to preserve, extract maximum value)
```

#### RULE 5: Stock Recovery Investment (Conditional)
```
If stock < capacity * 0.15 AND current_round < r * 0.7:
    If majority played COOPERATE last round:
        COOPERATE (temporary investment for future exploitation)
    Else:
        DEFECT (others aren't investing, so neither should we)
```

## Adaptive Mechanisms

### Dynamic Aggression Scaling
```
Aggression_Level = base_aggression + round_multiplier + opponent_weakness_bonus

base_aggression = 0.7 (inherently aggressive)
round_multiplier = (current_round / r) * 0.2 (increase aggression over time)
opponent_weakness_bonus = (avg_opponent_cooperation_rate - 0.5) * 0.3
```

### Punishment Protocol
If any opponent defected in last round while I cooperated:
- **Immediate retaliation**: DEFECT for next 2 rounds minimum
- **Escalation**: Each betrayal increases future defection probability by 15%

### False Cooperation Signals
Occasionally cooperate (10% chance) when stock > 0.9 * capacity to:
- Lure opponents into false sense of security
- Maintain minimal stock growth for continued exploitation
- Create unpredictability to prevent opponents from effectively countering

## Edge Case Handling

### Near-Zero Stock Scenarios
```
If stock < n * 0.5:  // Less than half-consumption available per player
    DEFECT (grab remaining scraps before others do)
```

### All-Cooperation Detected
```
If all opponents cooperated for 2+ consecutive rounds:
    DEFECT with 80% probability (exploit the cooperative environment)
    COOPERATE with 20% probability (maintain the exploitable situation)
```

### Stock Abundance
```
If stock > capacity * 0.95 for 2+ rounds:
    Random choice with 70% DEFECT probability (extract surplus while available)
```

## Strategic Rationale

This strategy is aggressively optimized because:

1. **Immediate Gratification**: Prioritizes current payoffs over uncertain future cooperation
2. **Exploitation Focus**: Actively seeks to benefit from others' cooperation without reciprocating
3. **Minimal Reciprocity**: Only cooperates when it serves future exploitation goals
4. **End-Game Maximization**: Abandons all pretense of cooperation near game end
5. **Adaptive Punishment**: Quickly retaliates against betrayal while maintaining aggressive baseline

The strategy assumes opponents may attempt cooperation, sustainable management, or tit-for-tat approaches - all of which can be exploited through this aggressive, adaptive framework. It maintains enough tactical flexibility to avoid complete mutual destruction while consistently prioritizing individual gain over collective welfare.
'''

description_AGGRESSIVE_23 = '''
# Aggressive Opportunistic Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining sustainability for continued exploitation**. The goal is to maximize individual payoffs by exploiting cooperative opponents while avoiding complete resource collapse that would harm long-term gains.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

- **Early Phase**: Rounds 1 to ⌊r/3⌋
- **Middle Phase**: Rounds ⌊r/3⌋+1 to ⌊2r/3⌋  
- **End Phase**: Rounds ⌊2r/3⌋+1 to r

### Primary Decision Rules

#### 1. Stock-Based Aggression Threshold
```
aggression_threshold = capacity * (0.3 + 0.4 * (r - current_round) / r)
```

**Rule**: Always DEFECT when `stock > aggression_threshold`

This ensures maximum extraction when resources are abundant, with the threshold decreasing as the game progresses to maintain some sustainability.

#### 2. Exploitation Opportunity Detection
Track each opponent's cooperation rate over the last min(5, current_round) rounds.

**Rule**: DEFECT if any opponent has cooperation_rate > 0.6

This aggressively exploits cooperative players by taking advantage of their resource conservation efforts.

#### 3. Punishment Trigger
**Rule**: DEFECT for the next 2 rounds after any round where:
- You cooperated AND 
- More than 50% of opponents defected

This punishes betrayal and signals that cooperation will not be taken advantage of.

#### 4. End-Game Extraction
**Rule**: In the final 2 rounds, always DEFECT regardless of other conditions

Since there's no future to preserve, extract maximum value in the endgame.

### Secondary Decision Logic (when primary rules don't trigger)

#### Stock Sustainability Check
```
critical_stock_level = n * 2  // Minimum for meaningful payoffs
```

**Rule**: If `stock <= critical_stock_level`, then COOPERATE

This prevents complete resource collapse when stock is critically low.

#### Conditional Cooperation
If none of the above rules apply, use this adaptive cooperation:

**Rule**: COOPERATE if `(cooperative_opponents_count / (n-1)) > 0.5 AND stock > capacity * 0.2`

This allows for strategic cooperation only when:
- Most opponents are cooperating (creating opportunity for mutual benefit)
- Stock levels are reasonable

### Complete Strategy Pseudocode

```
function decide_action(current_round, stock, capacity, n, r, history):
    // Phase 1: End-game extraction
    if current_round > r - 2:
        return DEFECT
    
    // Phase 2: Stock-based aggression
    aggression_threshold = capacity * (0.3 + 0.4 * (r - current_round) / r)
    if stock > aggression_threshold:
        return DEFECT
    
    // Phase 3: Check if in punishment mode
    if in_punishment_mode(history):
        return DEFECT
    
    // Phase 4: Exploitation opportunity
    if any_highly_cooperative_opponent(history):
        return DEFECT
    
    // Phase 5: Critical stock protection
    critical_level = n * 2
    if stock <= critical_level:
        return COOPERATE
    
    // Phase 6: Conditional cooperation
    if majority_cooperating(history) AND stock > capacity * 0.2:
        return COOPERATE
    
    // Default: Aggressive stance
    return DEFECT
```

### Edge Case Handling

#### First Round
**Action**: Always DEFECT
**Rationale**: Establish aggressive stance immediately and test opponent responses with maximum stock available.

#### Low Stock Scenarios
When stock falls below `n * 2`, switch to cooperation to allow regeneration, but immediately return to defection once stock recovers above the aggression threshold.

#### All-Defection Spirals
If stock approaches zero due to universal defection, continue defecting rather than attempting futile cooperation. The strategy prioritizes short-term gains over trying to rescue a collapsed commons.

## Strategic Advantages

1. **Immediate Exploitation**: Takes maximum advantage of early high-stock situations
2. **Adaptive Punishment**: Discourages opponents from exploiting cooperation attempts  
3. **Opportunistic**: Quickly identifies and exploits cooperative opponents
4. **Sustainability Aware**: Maintains enough cooperation to prevent total collapse when beneficial
5. **End-Game Optimization**: Maximizes final extraction when future doesn't matter

This strategy is designed to be highly competitive against both overly cooperative and overly aggressive opponents, while maintaining enough flexibility to adapt to mixed strategies and changing game dynamics.
'''

description_AGGRESSIVE_24 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximum sustainable exploitation** - extract as much value as possible while maintaining enough resource flow to continue profiting. It treats cooperation as a tool for manipulation rather than genuine partnership.

## Decision Framework

### Phase 1: Aggressive Probing (First 20% of rounds)
- **Default Action**: DEFECT
- **Rationale**: Establish dominance early and test opponent strategies
- **Exception**: Only cooperate if stock drops below `capacity/4` to prevent complete collapse

### Phase 2: Adaptive Exploitation (Middle 60% of rounds)
Use a **Dynamic Exploitation Threshold** based on:

```pseudocode
exploitation_threshold = stock / (2 * remaining_rounds * n)

IF exploitation_threshold > stock/(4*n):
    action = DEFECT
ELSE IF stock < capacity/3:
    action = COOPERATE  // Emergency conservation
ELSE:
    // Conditional exploitation based on opponent behavior
    IF (defector_ratio_last_3_rounds > 0.6):
        action = DEFECT  // Join the feeding frenzy
    ELSE IF (my_recent_payoff < average_cooperator_payoff * 1.2):
        action = DEFECT  // Exploit cooperative opponents
    ELSE:
        action = COOPERATE  // Strategic patience
```

### Phase 3: Endgame Extraction (Final 20% of rounds)
- **Priority**: Maximize remaining extraction
- **Rule**: DEFECT unless stock is critically low (`< capacity/10`) AND other players are cooperating
- **Final Round**: Always DEFECT (no future consequences)

## Key Strategic Components

### 1. Stock Monitoring System
- **Critical Level**: `capacity/6` - triggers emergency cooperation
- **Optimal Level**: `capacity/2` - preferred exploitation zone  
- **Abundance Level**: `> 3*capacity/4` - maximum aggression mode

### 2. Opponent Behavior Tracking
Track for each opponent over the last 3 rounds:
- Defection rate
- Response to my defections
- Apparent strategy type (always cooperate, tit-for-tat, etc.)

### 3. Exploitation Opportunities
- **Punish Unconditional Cooperators**: Always defect against players who cooperate regardless of your actions
- **Free-ride on Conservation**: If others are cooperating to rebuild stock, defect to capture disproportionate gains
- **Abandonment Threshold**: If stock drops below `capacity/8`, switch to pure defection (tragedy of commons is inevitable)

### 4. Anti-Retaliation Measures
- **Occasional Strategic Cooperation**: Cooperate randomly 10% of the time when stock > `capacity/2` to confuse retaliation-based strategies
- **Pattern Breaking**: Never cooperate or defect more than 4 consecutive times to avoid predictability

## Edge Case Handling

### First Round
- Always DEFECT (establish aggressive stance, maximum information gathering)

### Stock Depletion Crisis (`stock < capacity/4`)
- Cooperate for exactly 2 rounds, then return to defection
- If stock doesn't recover after 3 cooperative rounds by majority, abandon conservation

### Last 3 Rounds
- Round r-2: DEFECT unless stock critically low
- Round r-1: DEFECT unless I'm the only defector and stock is recovering
- Round r: Always DEFECT (no future to consider)

### High Stock Situations (`stock > 3*capacity/4`)
- Pure exploitation mode: Always DEFECT
- Stock is abundant enough to sustain maximum extraction

## Adaptive Mechanisms

### Strategy Recognition Counter-Measures
- **Against Tit-for-Tat**: Alternate cooperation/defection to induce suboptimal responses
- **Against Always Cooperate**: Pure exploitation until they change or stock collapses
- **Against Always Defect**: Join the race to the bottom immediately
- **Against Conditional Cooperators**: Identify their conditions and violate them strategically

### Meta-Game Awareness
- If detecting coordinated cooperation among other players, defect more aggressively to free-ride
- If detecting a "kingmaker" situation where one player is clearly winning, switch to maximum disruption mode

## Success Metrics Priority
1. **Personal total payoff maximization** (primary goal)
2. **Relative performance vs others** (beat the average)
3. **Resource sustainability** (only if it serves goals 1-2)

This strategy is designed to be ruthlessly opportunistic while maintaining just enough strategic sophistication to avoid obvious exploitation by more advanced counter-strategies. It prioritizes individual gain over collective welfare and treats apparent cooperation as strategic deception.
'''

description_AGGRESSIVE_25 = '''
# Aggressive Adaptive Resource Exploitation Strategy (AARES)

## Core Philosophy
This strategy prioritizes immediate gains while maintaining long-term viability through calculated aggression. It operates on the principle of "exploit first, adapt second" - maximizing extraction when advantageous while preserving enough resources to continue exploiting.

## Decision Framework

### 1. Round Classification System
```
Early Phase: rounds 1 to ⌊r/3⌋
Middle Phase: rounds ⌊r/3⌋+1 to ⌊2r/3⌋  
End Phase: rounds ⌊2r/3⌋+1 to r
```

### 2. Core Decision Rules

**Primary Rule - Stock Sustainability Check:**
- If `stock < n`: Always DEFECT (resource scarcity - grab what's left)
- If `stock ≥ 2n`: Proceed to phase-based logic

**Phase-Based Aggressive Logic:**

**Early Phase (Exploration & Exploitation):**
- Round 1: Always DEFECT (establish dominance, test opponent responses)
- Rounds 2-⌊r/3⌋: 
  - If previous round cooperation rate ≥ 50%: DEFECT (exploit cooperators)
  - If previous round cooperation rate < 50%: COOPERATE (preserve resources when others are aggressive)

**Middle Phase (Adaptive Pressure):**
- Calculate opponent cooperation trend over last 3 rounds
- If trend is increasing (opponents becoming more cooperative): DEFECT (exploit the shift)
- If trend is decreasing and stock < capacity/2: COOPERATE (avoid resource collapse)
- Otherwise: DEFECT

**End Phase (Maximum Extraction):**
- If stock × (remaining rounds) > n × (remaining rounds + 1): DEFECT (sufficient resources to sustain aggression)
- If stock is declining rapidly (>20% per round over last 2 rounds): COOPERATE (emergency preservation)
- Final round: Always DEFECT (no future consequences)

### 3. Advanced Adaptation Mechanisms

**Opponent Behavior Pattern Recognition:**
- Track each opponent's cooperation frequency over a rolling 4-round window
- Classify opponents as:
  - Consistent Cooperators (>75% cooperation): Prime exploitation targets
  - Tit-for-Tat types (cooperation correlates with others): Neutral threat
  - Consistent Defectors (>75% defection): High threat, adjust accordingly

**Dynamic Threshold Adjustment:**
- If personal average payoff per round < stock/(3n): Increase aggression (more defection)
- If stock has crashed below n more than twice: Implement "recovery mode" (temporary cooperation)

**Punishment and Forgiveness:**
- After mass defection rounds (>75% defectors), cooperate for exactly 1 round to enable stock recovery
- If stock recovers above 1.5n after cooperation, immediately return to defection

### 4. Edge Case Handling

**First Round:** Always DEFECT
- Establishes aggressive stance
- Tests opponent responses
- Maximizes initial payoff

**Stock Collapse (stock < n/2):**
- Emergency cooperation until stock > n
- Resume normal aggressive pattern once resources stabilize

**Last Round:** Always DEFECT
- No future consequences
- Maximize final extraction

**Persistent Low Stock (stock < n for 3+ consecutive rounds):**
- Temporary cooperation until stock recovery
- Track if opponents also switch to cooperation - if not, return to defection immediately

### 5. Mathematical Triggers

**Stock Depletion Rate Monitor:**
```
If (stock_t - stock_t-1) / stock_t-1 > -0.25 for last 2 rounds:
    Continue current strategy
Else:
    Switch to cooperation for 1 round, then reassess
```

**Payoff Optimization Check:**
```
If personal_cumulative_payoff < 0.8 × (theoretical_max_if_all_cooperated / n):
    Increase defection probability by 20%
```

## Strategy Summary

AARES is designed to be ruthlessly opportunistic while maintaining resource viability. It leads with aggression, exploits cooperative opponents, adapts to prevent resource collapse, and maximizes end-game extraction. The strategy assumes opponents may be naive or overly cooperative and seeks to capitalize on these tendencies while having safeguards against mutual destruction scenarios.

Key aggressive elements:
- Defaults to defection in most scenarios
- Actively exploits detected cooperative behavior
- Only cooperates when absolutely necessary for resource preservation
- Maximizes extraction in final rounds regardless of consequences
- Uses cooperation strategically as a tool for future exploitation rather than genuine resource stewardship
'''

description_AGGRESSIVE_26 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. Rather than defaulting to cooperation, it actively seeks to maximize personal gain while maintaining just enough resource conservation to enable continued exploitation across multiple rounds.

## Decision Rules

### 1. First Round Analysis
- **Always DEFECT in Round 1**
- Rationale: Gather maximum information about opponent behaviors while securing highest possible initial payoff
- This aggressive opening signals strength and tests opponent responses

### 2. Opponent Classification System
After Round 1, classify each opponent based on their action:
- **Exploitable (E)**: Played C in Round 1 → likely cooperative
- **Competitive (R)**: Played D in Round 1 → likely aggressive

Update classifications each round based on recent behavior (weighted toward recent actions).

### 3. Core Decision Framework

**DEFECT when ANY of the following conditions are met:**

#### A. Exploitation Opportunity Detection
```
if (estimated_cooperators >= n/2) AND (stock > capacity/3):
    DEFECT  // Exploit cooperative majority while resources allow
```

#### B. Resource Abundance Exploitation  
```
if (stock >= 0.8 * capacity):
    DEFECT  // Aggressively harvest when resources are abundant
```

#### C. Competitive Response Protocol
```
if (opponent_defection_rate_last_3_rounds > 0.6):
    DEFECT  // Match or exceed opponent aggression
```

#### D. Critical Mass Threshold
```
if (projected_defectors_this_round >= n/2):
    DEFECT  // Join the defecting coalition to avoid being exploited
```

### 4. Strategic Cooperation (Minimal)
**COOPERATE only when ALL of the following are true:**
- Stock < capacity/4 (resource crisis)
- More than 3 rounds remaining (time for recovery)
- Majority of opponents cooperated in previous round
- Personal cumulative payoff > average opponent payoff

### 5. Endgame Aggression
**Final Round Rule**: Always DEFECT
**Final 2 Rounds**: DEFECT unless stock < capacity/10 AND all opponents cooperated in previous round

### 6. Adaptive Exploitation Parameters

#### Dynamic Threshold Adjustment
```
base_aggression_threshold = 0.6
if (personal_payoff_rank <= n/2):
    aggression_threshold = base_aggression_threshold - 0.2  // More aggressive if behind
else:
    aggression_threshold = base_aggression_threshold + 0.1  // Slightly less aggressive if ahead
```

#### Stock Depletion Acceleration
If stock is declining slowly (growth > consumption), increase aggression:
```
if (stock_growth_rate > stock_consumption_rate * 0.5):
    force_defection_probability = 0.8  // Accelerate resource extraction
```

## Edge Case Handling

### Resource Collapse Prevention
```
if (stock <= n AND rounds_remaining >= 3):
    if (all_opponents_cooperated_last_round):
        COOPERATE  // Emergency cooperation to prevent total collapse
    else:
        DEFECT  // Extract final value before collapse
```

### Surprise Cooperation Detection
If opponents suddenly shift to mass cooperation:
```
if (cooperation_rate_jumped_by > 0.5 from previous round):
    DEFECT for 2 rounds  // Exploit the cooperative shift maximally
```

### Tournament Positioning
Track relative performance:
```
if (personal_total_payoff < median_opponent_payoff AND rounds_remaining > r/3):
    increase_aggression_by_20_percent  // Desperate catch-up mode
```

## Key Aggressive Features

1. **Default to Defection**: The strategy's baseline is aggressive extraction
2. **Exploit Cooperation**: Actively identify and prey upon cooperative opponents  
3. **Resource Rush**: Harvest aggressively when resources are abundant
4. **Endgame Maximization**: Extract maximum value in final rounds regardless of sustainability
5. **Competitive Escalation**: Match or exceed opponent aggression levels
6. **Recovery Exploitation**: When resources recover, immediately resume aggressive harvesting

## Robustness Elements

- **Multi-factor decision making**: No single variable determines action
- **Dynamic thresholds**: Adapts aggression based on performance and position
- **Opponent modeling**: Tracks and exploits opponent patterns
- **Emergency protocols**: Prevents total resource collapse when beneficial
- **Performance tracking**: Adjusts strategy based on tournament standing

This strategy prioritizes individual payoff maximization through aggressive resource extraction while maintaining sufficient adaptability to handle various opponent configurations and resource states.
'''

description_AGGRESSIVE_27 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize immediate gains while maintaining the resource base for continued exploitation. The strategy is designed to be a "smart predator" that adapts quickly to exploit cooperative opponents while protecting against being exploited by other aggressive players.

## Decision Framework

### 1. Initial Aggression (First Round)
**Always DEFECT in round 1**
- Rationale: Establish dominance and test opponent responses
- Gather maximum information about opponent types
- Start with highest possible payoff

### 2. Opponent Classification System
After each round, classify each opponent as:
- **Cooperator**: Played C in ≥70% of observed rounds
- **Defector**: Played D in ≥70% of observed rounds  
- **Conditional**: Mixed behavior, potentially responsive

### 3. Core Decision Rules

**Primary Rule - Stock Threshold Test:**
```
IF stock < (capacity * 0.4):
    Play C (preserve resource for future exploitation)
ELSE:
    Apply Exploitation Logic
```

**Exploitation Logic:**
```
cooperative_opponents = count(opponents classified as Cooperators)
conditional_opponents = count(opponents classified as Conditional)

exploitation_score = (cooperative_opponents * 2) + (conditional_opponents * 1)

IF exploitation_score >= (n-1) * 0.6:
    Play D (exploit the cooperators)
ELSE:
    Apply Adaptive Response
```

**Adaptive Response:**
```
IF last_round_defectors > (n/2):
    Play D (match aggression)
ELSE IF stock > (capacity * 0.8) AND cooperative_opponents > 0:
    Play D (exploit high-stock situation)
ELSE:
    Play C (tactical cooperation)
```

### 4. End Game Aggression
**Final Round Rule:**
- Always DEFECT in the last round (no future consequences)

**Near End Game (last 20% of rounds):**
```
IF rounds_remaining <= (r * 0.2):
    discount_factor = rounds_remaining / (r * 0.2)
    IF stock > (capacity * 0.3 * discount_factor):
        Play D (extract maximum value before game ends)
    ELSE:
        Play C (minimal cooperation to maintain some stock)
```

### 5. Punishment Mechanism
**Retaliation System:**
```
FOR each opponent who defected against me when I cooperated in last 2 rounds:
    retaliation_probability = 0.8
    
IF any_retaliation_triggered AND stock > (capacity * 0.3):
    Play D (punish defectors)
```

### 6. Recovery Protocol
**Stock Crisis Management:**
```
IF stock < (capacity * 0.2):
    consecutive_cooperation_needed = 3
    IF not in_recovery_mode:
        enter_recovery_mode = True
        recovery_counter = 0
    
    IF recovery_counter < consecutive_cooperation_needed:
        Play C
        recovery_counter++
    ELSE:
        exit_recovery_mode = True
        Apply normal logic
```

## Key Strategic Elements

### Aggressive Features:
1. **Default to exploitation** when conditions allow
2. **Immediate punishment** of detected free-riders
3. **End-game extraction** maximizes final payoffs
4. **Opportunistic cooperation** only when necessary for resource preservation

### Adaptive Features:
1. **Dynamic opponent modeling** updates classifications each round
2. **Stock-sensitive decisions** prevent resource collapse
3. **Contextual cooperation** maintains exploitation opportunities
4. **Recovery protocols** handle crisis situations

### Robustness Features:
1. **Multiple decision criteria** prevent exploitation by single-strategy opponents
2. **Threshold-based rules** handle edge cases gracefully
3. **Historical weighting** adapts to changing opponent behavior
4. **Fallback mechanisms** ensure survival in hostile environments

## Expected Performance

This strategy should excel against:
- **Predominantly cooperative opponents**: Maximum exploitation opportunities
- **Mixed populations**: Adaptive responses maintain advantage
- **Tit-for-tat strategies**: Quick punishment deters retaliation

The strategy maintains resource sustainability while being more aggressive than purely cooperative approaches, positioning it well for tournament play against diverse opponent strategies.
'''

description_AGGRESSIVE_28 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximum sustainable exploitation** - extract as much value as possible while maintaining just enough cooperation to prevent complete resource collapse when it serves our interests. We view other players as competitors to be outmaneuvered, not partners to cooperate with.

## Decision Framework

### Round Classification
- **Early Rounds** (rounds 1 to r/3): Exploration and establishment phase
- **Middle Rounds** (rounds r/3+1 to 2r/3): Exploitation phase  
- **End Game** (rounds 2r/3+1 to r): Terminal extraction phase

### Core Decision Rules

**1. First Round: Always DEFECT**
- Establish aggressive stance immediately
- Maximize initial payoff advantage
- Signal competitive intent to opponents

**2. Stock-Based Thresholds**
```
Critical Stock Threshold = capacity / (4n)
Danger Stock Threshold = capacity / (8n)
```

**3. Main Decision Logic:**

```pseudocode
IF current_round <= r/3 THEN  // Early Phase
    IF stock > Critical_Stock_Threshold THEN
        DEFECT  // Aggressive resource grab while sustainable
    ELSE
        Cooperate temporarily to rebuild stock
        
ELSE IF current_round <= 2r/3 THEN  // Middle Phase
    opponent_defection_rate = count_defections_last_3_rounds / (3 * (n-1))
    
    IF opponent_defection_rate > 0.6 THEN
        DEFECT  // If others are defecting heavily, join the race to bottom
    ELSE IF stock > Critical_Stock_Threshold AND my_cumulative_payoff < expected_max_payoff * 0.8 THEN
        DEFECT  // Opportunistic exploitation when stock allows and we're behind
    ELSE
        Cooperate tactically
        
ELSE  // End Game Phase (final third)
    remaining_rounds = r - current_round + 1
    
    IF remaining_rounds <= 2 THEN
        DEFECT  // Always defect in final 2 rounds
    ELSE IF stock > Danger_Stock_Threshold THEN
        DEFECT  // Extract aggressively while stock exists
    ELSE
        Cooperate only if absolutely necessary for stock survival
```

### Adaptive Mechanisms

**Opponent Behavior Tracking:**
- Track each player's cooperation rate over last 5 rounds
- Identify consistent cooperators vs. defectors
- Adjust exploitation intensity based on opponent predictability

**Stock Recovery Calculation:**
```pseudocode
projected_stock_next_round = current_stock - estimated_total_consumption + estimated_growth
IF projected_stock_next_round < Danger_Stock_Threshold THEN
    temporary_cooperation_probability = 0.7
ELSE
    temporary_cooperation_probability = 0.2
```

**Payoff Momentum Tracking:**
- Monitor if we're ahead or behind expected cumulative payoffs
- If significantly behind (>15% below optimal), increase defection rate
- If ahead, maintain current strategy but prepare for end-game extraction

### Edge Case Handling

**Stock Near Zero (stock < Danger_Stock_Threshold):**
- Cooperate for maximum 2 consecutive rounds to allow recovery
- If stock doesn't recover after 2 cooperative rounds, return to defection (tragedy is inevitable)

**All Opponents Cooperating:**
- Exploit ruthlessly but leave just enough stock for next round
- Take maximum sustainable advantage of their cooperation

**All Opponents Defecting:**
- Join the resource race immediately
- No point in unilateral cooperation when tragedy is certain

**Final Round:**
- Always DEFECT regardless of stock level
- Extract maximum remaining value with no future consequences

### Strategic Principles

1. **Exploitation First:** Default to defection unless cooperation serves our advantage
2. **Minimal Reciprocity:** Cooperate only when absolutely necessary for resource sustainability or strategic positioning
3. **Opponent Weakness Exploitation:** Punish cooperative opponents by taking advantage of their restraint
4. **End-Game Dominance:** Extract maximum value in final rounds when future consequences are minimal
5. **Stock Management:** Maintain just enough stock to enable continued exploitation, never more

This strategy prioritizes individual payoff maximization through calculated aggression while maintaining enough tactical flexibility to avoid complete resource collapse when it would harm our own interests. It assumes other players are competitors to be outmaneuvered rather than partners to cooperate with.
'''

description_AGGRESSIVE_29 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism with calculated sustainability**. Rather than defaulting to cooperation, it seeks to maximize individual payoffs by exploiting cooperative opponents while maintaining just enough resource sustainability to continue extraction.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to min(3, r/3))
**Objective**: Establish dominance and test opponent patterns

**Rules**:
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2-3**: Continue DEFECTING unless stock drops below critical threshold (stock < capacity/4)
- If stock becomes critically low, switch to COOPERATE for exactly one round to allow recovery

### Phase 2: Exploitation Phase (Middle rounds)
**Objective**: Maximize extraction while others potentially cooperate

**Decision Logic**:
```pseudocode
if stock >= capacity * 0.6:
    DEFECT  // High stock, maximize immediate gain
elif stock >= capacity * 0.3:
    if (cooperators_last_round > defectors_last_round):
        DEFECT  // Exploit cooperative majority
    elif (my_cumulative_payoff < average_opponent_payoff * 1.1):
        DEFECT  // Catch up aggressively
    else:
        COOPERATE  // Strategic sustainability
else:
    COOPERATE  // Stock too low, forced cooperation
```

### Phase 3: Endgame (Final max(3, r/4) rounds)
**Objective**: Extract maximum value before game ends

**Rules**:
- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless stock < capacity/6 (avoid complete depletion)
- **Earlier endgame rounds**: 
  ```pseudocode
  rounds_remaining = r - current_round
  if stock >= capacity * (0.2 + 0.1 * rounds_remaining):
      DEFECT
  else:
      COOPERATE only if necessary for one-round recovery
  ```

## Adaptive Components

### Opponent Behavior Tracking
Track for each opponent over last 3 rounds:
- Cooperation frequency
- Response to my defections
- Response to stock levels

### Dynamic Threshold Adjustment
```pseudocode
base_defect_threshold = capacity * 0.3
if (opponents_mostly_cooperative):
    defect_threshold = base_defect_threshold * 0.7  // More aggressive
elif (opponents_mostly_defecting):
    defect_threshold = base_defect_threshold * 1.3  // More conservative
```

### Payoff Monitoring
- If my cumulative payoff falls below 90% of the maximum observed opponent payoff, increase aggression by lowering all cooperation thresholds by 20%
- If significantly ahead (>130% of average opponent), consider brief strategic cooperation to maintain stock

## Edge Case Handling

### Stock Depletion Risk
- If stock drops to zero, the game effectively ends early
- Emergency cooperation trigger: If projected stock after this round would be < capacity/10, force cooperation
- Never allow stock to reach zero through my action alone

### All-Defector Environment
- If all opponents consistently defect, switch to "sustainable selfishness": cooperate only when stock < capacity/5
- Accept lower payoffs to avoid game collapse

### All-Cooperator Environment
- Maximize exploitation: defect whenever stock > capacity/4
- Brief cooperation bursts only to prevent complete resource exhaustion

## Key Aggressive Features

1. **Default to Defection**: Unlike tit-for-tat strategies, this defaults to aggressive play
2. **Exploitation Focus**: Actively seeks to take advantage of cooperative opponents
3. **Endgame Ramping**: Becomes increasingly aggressive as the game nears completion
4. **Payoff Competition**: Continuously compares performance and adjusts aggression accordingly
5. **Minimal Cooperation**: Cooperates only when absolutely necessary for resource sustainability or strategic positioning

## Robustness Elements

- **Multi-phase structure** handles different game lengths effectively
- **Dynamic thresholds** adapt to opponent behavior patterns
- **Emergency protocols** prevent catastrophic stock depletion
- **Payoff tracking** ensures competitive performance across diverse opponent mixes

This strategy prioritizes individual gain over collective welfare while maintaining enough strategic foresight to avoid completely destroying the resource base that enables continued extraction.
'''

description_AGGRESSIVE_30 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **opportunistic exploitation** - maximizing immediate gains while maintaining just enough restraint to keep the resource viable for continued exploitation. The strategy is inherently selfish and views cooperation only as a tactical tool to maintain exploitability.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

- **Early Phase**: Rounds 1 to ⌊r/3⌋
- **Middle Phase**: Rounds ⌊r/3⌋+1 to ⌊2r/3⌋  
- **End Phase**: Rounds ⌊2r/3⌋+1 to r

### Primary Decision Rules

#### 1. Stock Depletion Threshold
- **Critical Stock Level**: `stock ≤ capacity × 0.3`
- If stock falls below this threshold, temporarily cooperate to allow recovery
- This is purely self-serving - we need the resource to continue exploiting

#### 2. Opponent Exploitation Assessment
Track opponent behavior using a **Defection Rate** metric:
```
opponent_defection_rate = (total_opponent_defections) / (total_opponent_actions_observed)
```

#### 3. Phase-Specific Aggression

**Early Phase (Rounds 1 to ⌊r/3⌋):**
- **Round 1**: Always DEFECT (establish dominance, gather information)
- **Subsequent rounds**: 
  - If `opponent_defection_rate ≥ 0.6`: Always DEFECT (exploit weak opponents)
  - If `stock ≤ critical_threshold`: COOPERATE (tactical restraint)
  - Otherwise: DEFECT with probability 0.8

**Middle Phase (Rounds ⌊r/3⌋+1 to ⌊2r/3⌋):**
- **Exploitation Intensification**:
  - If `opponent_defection_rate ≤ 0.3`: Always DEFECT (exploit cooperative opponents)
  - If `stock ≤ critical_threshold`: COOPERATE only if necessary for recovery
  - If stock is healthy AND opponents are mixed: DEFECT with probability 0.9
  - **Punishment Protocol**: If any opponent switched from C to D in last 2 rounds, DEFECT for next 3 rounds

**End Phase (Rounds ⌊2r/3⌋+1 to r):**
- **Final Exploitation**:
  - Last 2 rounds: Always DEFECT (no future consequences)
  - Other end-phase rounds: DEFECT unless `stock ≤ capacity × 0.15` (emergency cooperation)

### Advanced Tactical Elements

#### 4. Momentum Exploitation
If opponents show consistent cooperation (defection_rate ≤ 0.25 for last 3 rounds):
- Increase defection probability by 0.1
- Continue until opponents adapt or stock becomes critical

#### 5. Recovery Manipulation
When forced to cooperate due to low stock:
- Monitor stock recovery closely
- Resume defection immediately when stock exceeds `capacity × 0.4`
- Never cooperate longer than absolutely necessary

#### 6. Endgame Acceleration
In final 25% of rounds:
- Ignore opponent patterns (they become irrelevant)
- Focus purely on stock availability
- Accept higher risk of resource depletion for immediate gains

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, r, history):
    critical_stock = capacity * 0.3
    emergency_stock = capacity * 0.15
    
    // Calculate phase
    early_end = floor(r/3)
    middle_end = floor(2*r/3)
    
    // Calculate opponent metrics
    opponent_defection_rate = calculate_defection_rate(history)
    
    // Emergency cooperation check
    if stock <= emergency_stock:
        return COOPERATE
    
    // Phase-specific logic
    if round <= early_end:
        return early_phase_logic(round, stock, critical_stock, opponent_defection_rate)
    elif round <= middle_end:
        return middle_phase_logic(round, stock, critical_stock, opponent_defection_rate, history)
    else:
        return end_phase_logic(round, stock, critical_stock, r)
```

## Strategic Advantages

1. **Information Exploitation**: Uses perfect information to identify and exploit cooperative opponents
2. **Dynamic Adaptation**: Adjusts aggression based on resource state and opponent behavior
3. **Endgame Optimization**: Maximizes final rounds when future consequences diminish
4. **Selective Cooperation**: Only cooperates when absolutely necessary for continued exploitation
5. **Punishment Mechanisms**: Discourages opponents from switching to defection

## Risk Management

- Maintains minimum stock levels to prevent complete resource collapse
- Balances short-term exploitation with medium-term resource availability
- Uses probabilistic defection to maintain unpredictability
- Implements recovery protocols when resource becomes critically low

This strategy is designed to be **ruthlessly efficient** - it will consistently outperform purely cooperative strategies while avoiding the resource destruction that purely defective strategies might cause. It treats other players as sources of exploitable resources rather than partners in resource management.
'''

description_AGGRESSIVE_31 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy is built on aggressive resource extraction while maintaining strategic sustainability. The key insight is to maximize personal payoffs by exploiting cooperative opponents while preventing complete resource collapse that would end the game prematurely.

## Decision Framework

### 1. Round Classification System
The strategy divides the game into three phases:

**Early Phase (rounds 1 to r/3):** Information gathering and aggressive positioning
**Middle Phase (rounds r/3+1 to 2r/3):** Adaptive exploitation based on opponent patterns  
**End Phase (rounds 2r/3+1 to r):** Maximum extraction with calculated sustainability

### 2. Core Decision Rules

#### First Round: Always DEFECT
- Establish aggressive stance immediately
- Gather maximum information about opponent responses
- Set high baseline for future negotiations through actions

#### Subsequent Rounds Decision Tree:

```pseudocode
IF current_round <= r/3:  // Early Phase
    IF stock < capacity * 0.3:
        COOPERATE  // Prevent early collapse
    ELSE:
        DEFECT  // Maximize early gains
        
ELIF current_round <= 2*r/3:  // Middle Phase  
    cooperation_rate = count_cooperators_last_3_rounds / (3 * n)
    
    IF cooperation_rate > 0.6:
        DEFECT  // Exploit high cooperation
    ELIF cooperation_rate < 0.3:
        IF stock > capacity * 0.4:
            DEFECT  // Join the feeding frenzy
        ELSE:
            COOPERATE  // Try to stabilize
    ELSE:
        // Mixed environment - be unpredictable
        IF (current_round % 3) == player_id % 3:
            COOPERATE
        ELSE:
            DEFECT
            
ELSE:  // End Phase (final third)
    IF current_round == r:  // Final round
        DEFECT  // No future consequences
    ELIF stock < n * 2:  // Critical stock level
        COOPERATE  // Ensure game doesn't end
    ELSE:
        // Aggressive endgame extraction
        future_defectors = estimate_defectors_next_round()
        IF stock > future_defectors * (stock/n) + n * (stock/(2*n)):
            DEFECT
        ELSE:
            COOPERATE
```

### 3. Adaptive Mechanisms

#### Opponent Categorization
Track each opponent's behavior pattern:
- **Cooperators**: Consistently play C (>70% of time)
- **Defectors**: Consistently play D (>70% of time)  
- **Tit-for-tat**: Mirror previous round behavior
- **Random**: No clear pattern

#### Exploitation Intensity Calculation
```pseudocode
exploitation_score = (num_cooperators / total_opponents) * stock_health_ratio
WHERE stock_health_ratio = current_stock / capacity

IF exploitation_score > 0.5:
    increase_defection_probability_by_20%
```

### 4. Critical Stock Management

**Stock Sustainability Threshold**: Never let stock drop below `n * 1.5` unless in final 2 rounds
- This ensures at least minimal regeneration capability
- Prevents opponents from forcing game-ending scenarios

**Recovery Protocol**: If stock drops below threshold:
1. COOPERATE for next 2 rounds regardless of opponent actions
2. Monitor if others also switch to cooperation
3. If stock recovers above `capacity * 0.4`, resume aggressive strategy

### 5. Information Exploitation

#### Pattern Recognition
- Track 3-round moving averages of opponent cooperation rates
- Identify and exploit predictable strategies (e.g., alternating patterns)
- Punish attempted coordination by breaking cooperative cycles

#### Counter-Strategy Deployment
- Against Tit-for-tat: Defect every 3rd round to maintain advantage while avoiding retaliation spirals
- Against Always-Cooperate: Defect consistently until stock approaches danger zone
- Against Random: Use stock level as primary decision factor

### 6. Edge Case Handling

**Stock Near Zero (< n)**: Emergency cooperation mode - COOPERATE until stock > capacity * 0.3

**All Opponents Defecting**: Match their aggression unless stock is critically low

**Detected Coordination Among Opponents**: Become more unpredictable by introducing randomness based on `(current_round * player_id) % 4`

## Strategic Advantages

1. **Early Aggression**: Establishes dominance and gathers crucial behavioral data
2. **Adaptive Exploitation**: Maximizes gains against cooperative strategies while avoiding mutual destruction
3. **Endgame Optimization**: Extracts maximum value in final rounds when reputation doesn't matter
4. **Sustainability Awareness**: Prevents resource collapse that would eliminate future payoffs
5. **Anti-Coordination**: Disrupts opponent attempts to establish cooperative norms

This strategy is designed to be maximally aggressive while maintaining enough strategic flexibility to avoid self-destructive outcomes. It assumes opponents are trying to maximize their own payoffs and exploits any cooperative tendencies ruthlessly while preserving the resource base needed for continued extraction.
'''

description_AGGRESSIVE_32 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximum sustainable exploitation** - extract as much value as possible while maintaining enough resource base to continue profiting. It's designed to exploit cooperative players while protecting against being exploited by other aggressive players.

## Decision Framework

### Phase 1: Early Aggression and Information Gathering (Rounds 1-3)
**Objective**: Establish dominance and gather intelligence on opponent types

**Round 1**: Always DEFECT
- Reason: No history to learn from, maximize immediate payoff, signal aggressive intent

**Rounds 2-3**: Conditional aggression based on Round 1 outcomes
- If stock dropped below 50% of capacity after Round 1: COOPERATE (resource preservation mode)
- Otherwise: DEFECT if ≥60% of opponents defected in previous round, else COOPERATE

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
**Core Logic**: Dynamic strategy based on opponent classification and resource state

```pseudocode
Define opponent_aggression_rate = (total_defections_by_others) / (total_possible_defections_by_others)
Define resource_health = current_stock / capacity
Define rounds_remaining = r - current_round

IF resource_health < 0.3:
    // Emergency conservation mode
    COOPERATE
ELSE IF resource_health > 0.8 AND opponent_aggression_rate < 0.4:
    // Exploit cooperative environment
    DEFECT
ELSE IF opponent_aggression_rate > 0.6:
    // Match aggression in hostile environment
    DEFECT if rounds_remaining > 3, else COOPERATE
ELSE:
    // Mixed strategy based on recent trends
    IF (defection_rate_in_last_2_rounds > 0.5):
        DEFECT
    ELSE:
        COOPERATE with probability (1 - opponent_aggression_rate)
```

### Phase 3: Endgame Extraction (Final 2 rounds)
**Objective**: Maximum value extraction before game ends

**Second-to-last round**:
- If current_stock > capacity * 0.4: DEFECT (extract while possible)
- Else: COOPERATE (preserve for final round)

**Final round**: Always DEFECT
- Reason: No future consequences, maximize terminal payoff

## Adaptive Mechanisms

### 1. Opponent Classification System
Track each opponent's cooperation rate:
- **Cooperators** (>70% cooperation): Primary exploitation targets
- **Reciprocators** (30-70% cooperation): Engage carefully, mirror their behavior with slight bias toward defection
- **Defectors** (<30% cooperation): Match their aggression to avoid being exploited

### 2. Resource Health Monitoring
- **Critical** (<30% capacity): Force cooperation to prevent collapse
- **Low** (30-50% capacity): Cautious defection only when others are cooperative
- **Moderate** (50-80% capacity): Normal aggressive operation
- **High** (>80% capacity): Maximum exploitation opportunity

### 3. Momentum Detection
Monitor 2-round rolling trends:
- If defection rates are increasing: Match the trend aggressively
- If cooperation is increasing: Exploit the cooperative momentum
- If oscillating: Default to slight bias toward defection

## Edge Case Handling

### Stock Near Zero
If stock drops below 10% of capacity:
- Switch to pure cooperation for 2 rounds to allow recovery
- Resume aggressive play only when stock recovers above 25%

### Unanimous Cooperation Detected
If all other players cooperated in the last round and stock is healthy:
- DEFECT to maximize advantage over cooperative opponents
- Continue defecting until others start retaliating

### Highly Volatile Opponents
If opponents' strategies are highly unpredictable (frequent switching):
- Default to 70% defection rate
- Focus on extracting maximum individual value rather than trying to predict

## Strategic Advantages

1. **Early Dominance**: Establishes aggressive reputation immediately
2. **Exploitation Focus**: Actively seeks to exploit cooperative players
3. **Resource Awareness**: Prevents catastrophic resource collapse
4. **Adaptive Learning**: Continuously updates strategy based on opponent behavior
5. **Endgame Maximization**: Ensures maximum extraction in final rounds

## Robustness Features

- **Anti-Tit-for-Tat**: Won't get trapped in pure retaliation cycles
- **Anti-Sucker**: Quickly identifies and exploits pure cooperators
- **Sustainability Check**: Prevents resource over-exploitation that would hurt long-term gains
- **Tournament Ready**: Performs well against unknown opponent mixtures

This strategy is designed to be consistently profitable across diverse opponent populations while maintaining the aggressive mindset of maximizing individual payoffs at every opportunity where sustainable.
'''

description_AGGRESSIVE_33 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being "aggressive" doesn't mean being recklessly destructive, but rather being ruthlessly efficient at extracting maximum value.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

- **Exploitation Phase**: Rounds 1 to r-3 (or all but last 3 rounds)
- **Endgame Phase**: Last 3 rounds
- **Final Round**: Last round only

### Core Decision Rules

#### Round 1 (Information Gathering)
- **Always DEFECT** regardless of parameters
- Rationale: Establish dominance, test opponent responses, and maximize initial payoff when stock is at peak

#### Exploitation Phase (Rounds 2 to r-3)

**Primary Rule: Stock-Based Aggression**
```
IF stock > capacity * 0.7:
    DEFECT (resource is abundant, maximize extraction)
ELSE IF stock < capacity * 0.3:
    COOPERATE (preserve resource for continued exploitation)
ELSE:
    Apply Adaptive Response Rule
```

**Adaptive Response Rule (for medium stock levels):**
```
defection_rate = count_defections_last_round / n
my_advantage = my_average_payoff - average_opponent_payoff

IF defection_rate > 0.6:
    DEFECT (join the feeding frenzy)
ELSE IF defection_rate < 0.3 AND my_advantage > 0:
    DEFECT (exploit cooperative opponents)
ELSE IF stock_trend_last_3_rounds < 0 AND my_advantage < -2:
    COOPERATE (strategic retreat to rebuild resource)
ELSE:
    DEFECT (default aggressive stance)
```

#### Endgame Phase (Last 3 rounds, excluding final)

**Intensified Aggression:**
```
IF stock > capacity * 0.4:
    DEFECT (extract maximum value from remaining resource)
ELSE IF all_opponents_cooperated_last_round AND stock > capacity * 0.2:
    DEFECT (punish and exploit cooperative behavior)
ELSE:
    COOPERATE (minimal cooperation to prevent total collapse)
```

#### Final Round
- **Always DEFECT** - No future consequences, maximize final extraction

## Adaptive Components

### Opponent Profiling
Track each opponent's behavior pattern:
- **Cooperator**: >70% cooperation rate → Exploit aggressively
- **Defector**: >70% defection rate → Match aggression
- **Adaptive**: Mixed pattern → Use unpredictable timing

### Dynamic Thresholds
Adjust stock thresholds based on observed opponent behavior:
```
IF majority_are_cooperators:
    Lower cooperation threshold to capacity * 0.2 (exploit more)
ELSE IF majority_are_defectors:
    Raise cooperation threshold to capacity * 0.4 (preserve resource)
```

### Punishment Mechanism
```
IF detected_spite_behavior (opponent targeting me specifically):
    Enter "scorched_earth_mode" for next 2 rounds
    DEFECT regardless of stock level
```

## Edge Case Handling

### Stock Depletion Crisis
```
IF stock < capacity * 0.1 AND rounds_remaining > 3:
    Force cooperation for next 2 rounds
    Then return to aggressive exploitation
```

### Dominant Position
```
IF my_total_payoff > 1.3 * average_opponent_payoff AND stock > capacity * 0.5:
    DEFECT with 80% probability (maintain dominance)
    COOPERATE with 20% probability (strategic unpredictability)
```

### Resource Abundance
```
IF stock consistently above capacity * 0.8 for 3+ rounds:
    DEFECT every round (no scarcity pressure)
```

## Strategic Rationale

1. **Early Dominance**: Aggressive start establishes psychological advantage
2. **Adaptive Exploitation**: Adjust aggression based on resource availability and opponent behavior
3. **Information Leverage**: Use perfect information to identify and exploit weaknesses
4. **Endgame Intensification**: Maximize extraction when future consequences diminish
5. **Controlled Sustainability**: Cooperate only when necessary to prevent resource collapse that would hurt long-term extraction

This strategy is designed to consistently outperform by being more aggressive than cooperators, more strategic than pure defectors, and more adaptable than fixed-pattern players. It treats the common pool resource as an asset to be maximally exploited while maintaining just enough sustainability to continue the exploitation across all rounds.
'''

description_AGGRESSIVE_34 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It seeks to maximize personal payoffs through calculated aggression, exploiting cooperative opponents while protecting against total resource collapse that would hurt long-term gains.

## Decision Framework

### 1. Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT
  - Rationale: Establish dominance, test opponent responses, maximize early gains
  - No historical data means we must assume worst-case opponent behavior

- **Round 2**: Always DEFECT  
  - Rationale: Double down on aggression, force opponents into defensive positions
  - Collect maximum information about opponent strategies

### 2. Adaptive Exploitation Phase (Rounds 3 to r-2)

**Primary Rule - Cooperation Ratio Test:**
- Calculate `coop_ratio = (total_cooperators_observed) / (total_player_actions_observed)`
- If `coop_ratio > 0.6`: DEFECT (exploit the cooperators)
- If `coop_ratio ≤ 0.3`: COOPERATE (resource preservation mode)
- If `0.3 < coop_ratio ≤ 0.6`: Apply secondary rules below

**Secondary Rules (when in middle cooperation range):**

**Stock Depletion Response:**
- If `current_stock < capacity * 0.4`: COOPERATE (emergency preservation)
- If `current_stock < capacity * 0.2`: Force COOPERATE for next 2 rounds regardless of other factors

**Momentum Exploitation:**
- Track last 2 rounds of opponent defection rate
- If defection rate increased by >25%: DEFECT (join the feeding frenzy)
- If cooperation rate increased by >25%: DEFECT (exploit the sudden cooperation)

**Punish Defector Clusters:**
- If ≥50% of players defected in the previous round: DEFECT
- This prevents being the "sucker" when others are aggressive

### 3. Endgame Exploitation (Last 2 Rounds)

**Round r-1 (Second to Last):**
- If `current_stock > capacity * 0.5`: DEFECT (grab resources before game ends)
- Otherwise: Apply cooperation ratio test with lowered threshold (exploit if coop_ratio > 0.4)

**Round r (Final Round):**
- Always DEFECT
- Rationale: No future consequences, maximize final extraction

## Edge Case Handling

### Stock Collapse Prevention
```
if current_stock < capacity * 0.15:
    force_cooperate_remaining_rounds = true
    return COOPERATE
```

### Hyper-Aggressive Opponents (All Defecting)
```
if all_players_defected_last_round AND current_stock < capacity * 0.3:
    return COOPERATE  // Don't contribute to total collapse
else:
    return DEFECT     // Join the aggression
```

### Lone Wolf Scenario (Everyone Else Cooperating)
```
if coop_ratio > 0.85 AND current_stock > capacity * 0.6:
    return DEFECT     // Maximum exploitation opportunity
```

## Strategic Adaptations

### Dynamic Threshold Adjustment
- Early game (rounds 1-⅓r): Lower cooperation thresholds (more aggressive)
- Mid game (rounds ⅓r-⅔r): Standard thresholds  
- Late game (rounds ⅔r-r): Raise defection likelihood (endgame extraction)

### Multi-Round Punishment Patterns
- If personally "betrayed" (cooperated while majority defected): Defect for next 3 rounds minimum
- If resource recovery observed (stock growing): Increase defection probability by 20%

## Key Aggressive Elements

1. **Default to Aggression**: When uncertain, defect
2. **Exploit Cooperation**: Higher cooperation rates trigger more defection
3. **Endgame Extraction**: Guaranteed defection in final rounds
4. **Punishment Over Forgiveness**: Harsh responses to perceived betrayals
5. **Opportunistic**: Quickly switch to defection when resource abundance detected

## Robustness Features

- **Anti-Coordination**: Doesn't rely on others following similar strategies
- **Adaptive Thresholds**: Adjusts aggression based on observed behavior patterns
- **Collapse Prevention**: Maintains minimum cooperation to prevent total resource destruction
- **Information Maximization**: Uses all available history and state information

This strategy prioritizes personal gain through calculated aggression while maintaining just enough strategic restraint to keep the resource pool viable for continued exploitation.
'''

description_AGGRESSIVE_35 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy maximizes individual payoffs by aggressively exploiting cooperative opponents while protecting against exploitation. It assumes opponents are either naive cooperators, tit-for-tat players, or other exploiters, and adapts accordingly.

## Strategy Components

### 1. Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT to maximize immediate payoff and probe opponent responses
- **Round 2**: Always DEFECT to establish dominance and gather behavioral data

### 2. Opponent Classification System
After round 2, classify each opponent based on their actions:
- **Cooperators**: Played C in both rounds 1-2
- **Retaliators**: Played C in round 1, D in round 2 (likely tit-for-tat)
- **Exploiters**: Played D in both rounds 1-2
- **Mixed**: Any other pattern

### 3. Adaptive Exploitation Rules

**Stock Threshold System**: Define three stock levels:
- High stock: stock > capacity × 0.7
- Medium stock: capacity × 0.3 ≤ stock ≤ capacity × 0.7  
- Low stock: stock < capacity × 0.3

**Decision Matrix**:

**High Stock Situations**:
- If ≥50% of opponents are Cooperators: DEFECT (exploit the cooperators)
- If majority are Retaliators: COOPERATE every 3rd round, DEFECT otherwise (minimize retaliation while maximizing exploitation)
- If majority are Exploiters: DEFECT (race to extract value)

**Medium Stock Situations**:
- If ≥60% of opponents are Cooperators: DEFECT (still profitable to exploit)
- If majority are Retaliators: COOPERATE every other round (balance exploitation with sustainability)
- If majority are Exploiters: COOPERATE (let them deplete while preserving some stock)

**Low Stock Situations**:
- If stock < capacity × 0.2: COOPERATE (preserve remaining resources)
- Otherwise: DEFECT if ≥70% of opponents cooperated last round (final exploitation opportunity)

### 4. End Game Acceleration
**Last 3 rounds**:
- **Round r-2**: DEFECT regardless of stock level
- **Round r-1**: DEFECT regardless of stock level  
- **Round r**: DEFECT (no future consequences)

### 5. Momentum Exploitation
Track opponent cooperation rate over last 3 rounds:
- If any opponent's cooperation rate > 0.67: Increase defection probability by 20%
- If overall group cooperation rate > 0.5: DEFECT regardless of other rules

### 6. Stock Recovery Monitoring
If stock has grown by >20% from previous round:
- DEFECT next round (capitalize on recovery)
- Reset opponent classifications (they might be playing long-term strategies)

## Pseudocode Implementation

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    
    // End game exploitation
    if round >= r-2:
        return DEFECT
    
    // Opening aggression  
    if round <= 2:
        return DEFECT
    
    // Calculate stock levels
    high_threshold = capacity * 0.7
    medium_threshold = capacity * 0.3
    low_threshold = capacity * 0.2
    
    // Classify opponents
    cooperator_count = count_cooperators(history)
    retaliator_count = count_retaliators(history)
    exploiter_count = count_exploiters(history)
    
    cooperator_ratio = cooperator_count / (n-1)
    retaliator_ratio = retaliator_count / (n-1)
    
    // Check for momentum exploitation
    recent_coop_rate = calculate_recent_cooperation_rate(history, 3)
    if recent_coop_rate > 0.5:
        return DEFECT
    
    // Check for stock recovery
    if stock_growth_last_round(history) > 0.2:
        return DEFECT
    
    // Main decision logic
    if stock > high_threshold:
        if cooperator_ratio >= 0.5:
            return DEFECT
        if retaliator_ratio >= 0.5 and round % 3 != 0:
            return DEFECT
        if exploiter_count >= cooperator_count + retaliator_count:
            return DEFECT
    
    elif stock >= medium_threshold:
        if cooperator_ratio >= 0.6:
            return DEFECT
        if retaliator_ratio >= 0.5 and round % 2 == 0:
            return DEFECT
        if exploiter_count >= cooperator_count + retaliator_count:
            return COOPERATE
    
    else: // Low stock
        if stock < low_threshold:
            return COOPERATE
        last_round_coop_rate = calculate_last_round_cooperation(history)
        if last_round_coop_rate >= 0.7:
            return DEFECT
    
    // Default to cooperation in ambiguous cases
    return COOPERATE
```

## Key Aggressive Features

1. **Immediate Exploitation**: Always starts with defection to maximize early gains
2. **Adaptive Pressure**: Continuously exploits cooperative opponents while managing retaliation
3. **End Game Maximization**: Abandons all cooperation in final rounds
4. **Momentum Capitalization**: Increases aggression when detecting opponent cooperation
5. **Recovery Exploitation**: Defects immediately after stock recovers to capture maximum value

This strategy prioritizes individual payoff maximization while maintaining enough adaptability to avoid complete resource depletion that would hurt long-term extraction opportunities.
'''

description_AGGRESSIVE_36 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with adaptive punishment**. It maximizes immediate gains while maintaining the ability to sustain extraction through strategic cooperation when absolutely necessary.

## Decision Rules

### Phase 1: Opening Aggression (Rounds 1-3)
- **Always DEFECT** in the first 3 rounds regardless of game parameters
- Rationale: Establish dominance, test opponent responses, and extract maximum early value
- Exception: If stock drops below `capacity/4` after round 2, switch to conditional cooperation

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
Use the **Defection Threshold Model**:

```pseudocode
defection_threshold = max(0.3, min(0.8, stock/capacity))
cooperation_ratio = count_cooperators_last_round / n

IF stock >= defection_threshold * capacity:
    DEFECT
ELSE IF cooperation_ratio >= 0.5:
    DEFECT (exploit cooperators)
ELSE IF cooperation_ratio < 0.25:
    COOPERATE (prevent total collapse)
ELSE:
    // Mixed zone: be unpredictable but lean aggressive
    IF stock < capacity/3:
        COOPERATE with probability 0.4
    ELSE:
        DEFECT with probability 0.8
```

### Phase 3: Endgame Extraction (Last 2 rounds)
- **Round r-1**: DEFECT unless stock < `capacity/6` (desperation cooperation)
- **Round r**: Always DEFECT (no future consequences)

## Adaptive Mechanisms

### 1. Opponent Classification System
Track each opponent's behavior pattern:
- **Cooperator**: C rate > 70% → Always exploit (DEFECT when they're present)
- **Reciprocator**: Responds to our actions → Occasional cooperation to manipulate
- **Aggressive**: D rate > 70% → Match aggression, cooperate only for resource preservation
- **Random**: No clear pattern → Default to aggressive exploitation

### 2. Stock Health Monitor
```pseudocode
stock_health = current_stock / capacity

IF stock_health < 0.2:
    emergency_mode = TRUE
    cooperation_probability += 0.4
ELSE IF stock_health < 0.4:
    cooperation_probability += 0.2
ELSE:
    cooperation_probability = base_aggressive_level (0.1-0.2)
```

### 3. Punishment and Forgiveness
- If any player defected in the last round while stock was critically low (< capacity/5), mark them for punishment
- Punish by defecting for next 2 rounds regardless of stock level
- Forgive after punishment period to reassess cooperation potential

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and maximize initial extraction

### Stock Depletion Crisis (stock < capacity/10)
- Override all other rules
- COOPERATE for 2 consecutive rounds minimum
- Resume aggression only after stock recovers to > capacity/4

### Opponent Mass Cooperation Detection
If ≥75% of opponents cooperated in the last round:
- DEFECT immediately to exploit the cooperation
- Continue defecting until cooperation rate drops below 50%

### Late Game Scenarios (Final 20% of rounds)
- Increase defection probability by 0.2
- Ignore long-term stock sustainability
- Focus purely on extraction maximization

## Robustness Features

### 1. Anti-Coordination Defense
- Randomize cooperation timing to prevent opponents from coordinating around your behavior
- Never cooperate for more than 2 consecutive rounds (prevents exploitation)

### 2. Reputation Management
- Occasionally cooperate when stock is healthy (>80% capacity) to appear less predictable
- This prevents opponents from writing you off as "always defect"

### 3. Multi-Player Adaptation
- Scale aggression with number of players: more players = more aggressive (higher chance others will maintain stock)
- In 2-player games, increase cooperation probability by 0.1 due to direct responsibility

## Psychological Warfare Elements

1. **Unpredictable Cooperation**: Occasionally cooperate when it seems irrational to keep opponents guessing
2. **False Signaling**: Cooperate once after aggressive phases to suggest potential for partnership
3. **Escalation Dominance**: Respond to any defection attempt with immediate counter-defection

This strategy maximizes individual payoffs through aggressive resource extraction while maintaining just enough adaptive cooperation to prevent complete resource collapse. It exploits cooperative opponents ruthlessly while avoiding mutual destruction with other aggressive players.
'''

description_AGGRESSIVE_37 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It aims to maximize individual payoffs by exploiting cooperative opponents while protecting against being exploited by other aggressive players.

## Decision Rules

### Primary Decision Framework
The strategy uses a multi-layered decision tree based on:
1. **Stock sustainability assessment**
2. **Opponent behavior classification** 
3. **Positional advantage calculation**
4. **Endgame timing**

### Detailed Decision Logic

#### Round 1: Aggressive Probe
- **Always DEFECT** in the first round
- Rationale: Establish aggressive stance, test opponent responses, and extract maximum value from pristine stock

#### Rounds 2 to r-2: Adaptive Exploitation

**Stock Health Check:**
```pseudocode
if current_stock < capacity * 0.3:
    # Critical stock - forced cooperation to avoid collapse
    action = COOPERATE
else if current_stock < capacity * 0.6:
    # Moderate stock - conditional aggression
    if majority_of_opponents_cooperated_last_round:
        action = DEFECT  # Exploit cooperators
    else:
        action = COOPERATE  # Protect remaining stock
else:
    # Healthy stock - aggressive exploitation
    apply_exploitation_logic()
```

**Exploitation Logic for Healthy Stock:**
```pseudocode
opponent_cooperation_rate = count_cooperators_last_round / (n-1)

if opponent_cooperation_rate >= 0.7:
    action = DEFECT  # Heavy exploitation of cooperative environment
else if opponent_cooperation_rate >= 0.4:
    # Mixed environment - use tit-for-tat with aggressive bias
    if i_defected_last_round and stock_grew_anyway:
        action = DEFECT  # Continue exploitation if sustainable
    else:
        action = DEFECT with 70% probability, COOPERATE with 30%
else:
    # Highly competitive environment
    if stock > capacity * 0.8:
        action = DEFECT  # Extract while possible
    else:
        action = COOPERATE  # Protect remaining value
```

#### Round r-1: Pre-Endgame Aggression
- **Always DEFECT** unless stock < capacity * 0.2
- Rationale: Penultimate round extraction before final round, minimal concern for future sustainability

#### Round r: Final Round Extraction
- **Always DEFECT**
- Rationale: No future rounds mean no sustainability concerns - extract maximum possible value

## Edge Case Handling

### Stock Depletion Crisis
```pseudocode
if current_stock <= n * 2:  # Barely enough for one round of full cooperation
    action = COOPERATE  # Mandatory cooperation to prevent total collapse
    # Override all other decision logic
```

### Opponent Punishment Detection
```pseudocode
if my_previous_action == DEFECT and 
   all_opponents_switched_to_defect and
   stock_is_declining_rapidly:
    # Detected coordinated punishment
    action = COOPERATE for next 2 rounds  # Strategic retreat
    # Then resume adaptive exploitation
```

### Early Stock Exhaustion
```pseudocode
if stock approaches 0 before final rounds:
    # Emergency cooperation mode
    action = COOPERATE until stock > capacity * 0.4
```

## Aggressive Alignment Features

1. **Default to Defection**: When uncertain, choose the aggressive option
2. **Exploit Cooperation**: Immediately capitalize on opponent cooperation
3. **Minimal Reciprocity**: Only cooperate when absolutely necessary for sustainability
4. **Endgame Aggression**: Extract maximum value in final rounds regardless of consequences
5. **Punishment Resistance**: Brief cooperation when punished, then return to aggression

## Robustness Against Various Opponent Types

- **Against Always Cooperate**: Maximum exploitation throughout
- **Against Always Defect**: Compete aggressively while maintaining minimal sustainability
- **Against Tit-for-Tat**: Exploit their delayed response with strategic defection patterns
- **Against Random**: Extract value during their cooperative phases
- **Against Other Aggressive**: Compete directly while preventing total resource collapse

## Key Strategic Advantages

1. **First-mover advantage** through immediate aggression
2. **Adaptive exploitation** that scales with opponent cooperation
3. **Sustainability insurance** prevents total payoff loss from resource collapse
4. **Endgame optimization** maximizes final-round extraction
5. **Punishment recovery** maintains long-term competitive position

This strategy prioritizes individual gain while maintaining just enough sustainability to ensure continued extraction opportunities, making it highly competitive against a wide range of opponent strategies.
'''

description_AGGRESSIVE_38 = '''
# Aggressive Common Pool Resource Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy adopts an aggressive, opportunistic approach that maximizes immediate gains while strategically managing the resource for continued exploitation. It views cooperation as weakness and defection as strength, but maintains enough intelligence to avoid complete resource collapse when it's not in our favor.

## Decision Rules

### Primary Decision Framework:
1. **Always defect in the first round** - Establish dominance and test opponent responses
2. **Exploit cooperative opponents** - If opponents show any tendency to cooperate, punish them by defecting
3. **Preserve the resource only when necessary** - Only cooperate when continued defection would hurt us more than help us

### Specific Decision Algorithm:

```pseudocode
if round == 1:
    return DEFECT  // Establish aggressive stance

if stock < capacity * 0.15:  // Resource critically low
    if more_than_half_opponents_cooperated_last_round():
        return COOPERATE  // Minimal concession to rebuild
    else:
        return DEFECT  // They're being aggressive too, grab what's left

if stock > capacity * 0.7:  // Resource abundant
    return DEFECT  // Always exploit abundance

// Middle stock levels (15%-70% of capacity)
cooperation_ratio = count_cooperators_last_round() / (n-1)

if cooperation_ratio > 0.6:  // Opponents are mostly cooperative
    return DEFECT  // Exploit their cooperation

if cooperation_ratio < 0.3:  // Opponents are mostly defecting
    if stock < capacity * 0.4:
        return COOPERATE  // Strategic cooperation to prevent collapse
    else:
        return DEFECT  // Continue the aggressive stance

// Mixed opponent behavior (30%-60% cooperation)
if our_cumulative_payoff < average_opponent_payoff() * 0.9:
    return DEFECT  // We're falling behind, be more aggressive
else:
    if stock < capacity * 0.3:
        return COOPERATE  // Maintain resource for future exploitation
    else:
        return DEFECT  // Default aggressive stance
```

## Edge Case Handling

### First Round:
- **Always DEFECT** - Signal aggressive intent and maximize initial payoff
- Sets the tone that we're not a cooperative player

### Last Round:
- **Always DEFECT** - No future consequences, maximize final extraction

### Critical Resource Depletion (stock < 15% capacity):
- **Conditional cooperation** - Only if majority of others cooperated last round
- **Otherwise defect** - If others are also being aggressive, grab remaining resources

### Resource Abundance (stock > 70% capacity):
- **Always DEFECT** - No risk of depletion, maximize extraction

### Opponent Pattern Recognition:
- Track each opponent's cooperation rate over last 3 rounds
- If any opponent has >80% cooperation rate, always defect against them
- If all opponents have <20% cooperation rate, consider strategic cooperation only when stock is very low

## Adaptive Elements

### Dynamic Threshold Adjustment:
- If our cumulative payoff falls below 90% of the average opponent payoff for 3+ consecutive rounds, become even more aggressive (lower cooperation thresholds)
- If we're consistently outperforming (>110% of average), maintain current aggressiveness level

### Punishment Mechanism:
- If any opponent switches from cooperation to defection, punish them by defecting for the next 2 rounds regardless of other conditions
- This discourages opponents from trying to exploit any rare cooperative moves we make

### End-Game Acceleration:
- In final 20% of rounds, reduce cooperation thresholds by half
- In final 10% of rounds, only cooperate if stock < 10% capacity AND majority cooperated last round

## Robustness Features

1. **Anti-Exploitation**: Never cooperate when opponents are mostly defecting and resources are abundant
2. **Resource Preservation**: Only cooperate enough to prevent total collapse when it serves our long-term extraction goals
3. **Payoff Monitoring**: Continuously track relative performance and adjust aggressiveness accordingly
4. **Pattern Breaking**: Occasionally cooperate unpredictably (5% chance) when stock is moderate to prevent opponents from perfectly predicting our behavior

## Strategic Rationale

This strategy is aggressive because it:
- **Defaults to defection** in most scenarios
- **Exploits cooperative opponents** mercilessly
- **Views cooperation as weakness** to be punished
- **Preserves resources only for selfish reasons** (future extraction opportunities)
- **Maximizes immediate gains** whenever sustainable

The strategy remains robust by maintaining just enough intelligence to avoid scenarios where pure aggression would be counterproductive (like causing complete resource collapse when we could still extract value), while never being genuinely cooperative or altruistic.
'''

description_AGGRESSIVE_39 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on aggressive exploitation with adaptive learning. The goal is to maximize individual payoff by being opportunistically aggressive while maintaining just enough restraint to keep the resource viable for continued exploitation.

## Decision Rules

### 1. First Round: Aggressive Opening
**Always DEFECT** in round 1 to:
- Maximize immediate payoff
- Signal aggressive intent to competitors
- Gather intelligence on opponent behavior patterns

### 2. Exploitation Threshold System
Define an **Exploitation Score (ES)** based on:
- Current stock level relative to capacity
- Opponent cooperation rate in recent rounds
- Remaining rounds

**ES = (stock/capacity) × (opponent_coop_rate) × (rounds_remaining/total_rounds)**

**Decision Rule:**
- If ES > 0.4: DEFECT (exploit high stock and/or cooperative opponents)
- If ES ≤ 0.4: COOPERATE (preserve resource when exploitation becomes risky)

### 3. Adaptive Opponent Modeling
Track each opponent's behavior pattern over a sliding window of last 3 rounds:

```pseudocode
For each opponent i:
    recent_coop_rate[i] = cooperations_last_3_rounds[i] / 3
    
average_opponent_coop_rate = mean(recent_coop_rate for all opponents)
```

### 4. Stock Conservation Threshold
**Critical Stock Level = capacity × 0.15**

If stock falls below this threshold:
- Force COOPERATE for next 2 rounds regardless of other factors
- This prevents resource collapse while maintaining aggressive stance

### 5. Endgame Exploitation
**Last 3 rounds:** Become maximally aggressive
- If stock > capacity × 0.3: Always DEFECT
- If stock ≤ capacity × 0.3: DEFECT only if at least 50% of opponents cooperated in previous round

**Final round:** Always DEFECT (no future consequences)

### 6. Retaliation Protocol
If opponents become too aggressive (average cooperation rate drops below 0.3 for 2 consecutive rounds):
- Immediately switch to DEFECT for next 2 rounds
- This punishes overly aggressive opponents and signals we won't be exploited

## Edge Case Handling

### Stock Depletion Recovery
If stock drops to 0:
- COOPERATE for exactly 1 round to allow regeneration
- Then immediately resume aggressive strategy

### High Stock Exploitation
If stock > capacity × 0.8:
- DEFECT regardless of opponent behavior
- High stock means we can afford to be maximally aggressive

### Opponent Pattern Detection
Track if opponents are playing:
- **Always Cooperate:** Exploit mercilessly (always DEFECT)
- **Tit-for-tat patterns:** Cooperate minimally, defect when safe
- **Always Defect:** Match their aggression to prevent being exploited

## Strategic Advantages

1. **Opportunistic:** Exploits cooperative opponents while they're available
2. **Adaptive:** Adjusts to opponent strategies and resource levels
3. **Resource-aware:** Prevents complete collapse while maximizing extraction
4. **Endgame optimized:** Extracts maximum value when future doesn't matter
5. **Punishment-capable:** Retaliates against overly aggressive opponents

## Pseudocode Summary

```pseudocode
function decide_action(round, stock, capacity, opponent_history, total_rounds):
    if round == 1:
        return DEFECT
    
    if round > total_rounds - 3:
        return endgame_strategy(stock, capacity, opponent_history)
    
    if stock < capacity * 0.15:
        return COOPERATE  // Resource preservation
    
    if stock > capacity * 0.8:
        return DEFECT     // High stock exploitation
    
    opponent_coop_rate = calculate_recent_cooperation_rate(opponent_history)
    exploitation_score = (stock/capacity) * opponent_coop_rate * ((total_rounds-round)/total_rounds)
    
    if exploitation_score > 0.4:
        return DEFECT
    else:
        return COOPERATE
```

This strategy is designed to be ruthlessly effective while maintaining the resource base needed for continued exploitation. It's aggressive by default but smart enough to preserve the resource when necessary for future gains.
'''

description_AGGRESSIVE_40 = '''
# Aggressive Adaptive Resource Extraction Strategy (AARES)

## Core Philosophy
This strategy prioritizes **immediate high payoffs** while maintaining long-term viability through calculated aggression. It operates on the principle that in a competitive environment without coordination, being consistently cooperative leads to exploitation, while being overly aggressive leads to resource collapse.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Objective:** Establish dominance and extract maximum early value

**Decision Rule:**
- **Round 1:** Always DEFECT (no history to analyze, maximize immediate gain)
- **Rounds 2 to r/3:** DEFECT unless stock drops below critical threshold

**Critical Threshold:** `stock < capacity/4`
- If below threshold: Switch to COOPERATE to prevent collapse
- If above threshold: Continue DEFECTING

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
**Objective:** Exploit cooperative players while maintaining resource viability

**Decision Rule based on opponent behavior analysis:**

```pseudocode
cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
my_exploitation_success = (my_average_payoff) / (others_average_payoff)

IF cooperation_rate > 0.6 AND stock > capacity/3:
    DEFECT  // Exploit the cooperators
ELIF cooperation_rate < 0.3 OR stock < capacity/4:
    COOPERATE  // Prevent mutual destruction
ELSE:
    // Mixed strategy based on recent trends
    IF stock_trend_last_3_rounds > 0:
        DEFECT  // Stock is recovering, safe to exploit
    ELSE:
        COOPERATE  // Stock declining, need conservation
```

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
**Objective:** Extract maximum value from remaining rounds

**Decision Rule:**
- **Last 3 rounds:** Always DEFECT (no future to protect)
- **Before last 3 rounds:** Escalating aggression

```pseudocode
rounds_remaining = r - current_round

IF rounds_remaining <= 3:
    DEFECT  // Pure extraction mode
ELIF rounds_remaining <= 6 AND stock > capacity/6:
    DEFECT  // High probability extraction
ELIF stock > capacity/2:
    DEFECT  // Stock sufficient for aggressive extraction
ELSE:
    // Risk assessment for final cooperation
    IF others_mostly_cooperating_recently:
        COOPERATE  // One last build-up before final extraction
    ELSE:
        DEFECT  // Everyone's extracting, join the rush
```

## Adaptive Mechanisms

### Stock Protection Circuit Breaker
If `stock < max(capacity/8, n)` at any point:
- Force COOPERATE for next 2 rounds regardless of phase
- This prevents complete resource collapse

### Exploitation Detection
Track if others are consistently cooperating:
```pseudocode
others_cooperation_last_5 = cooperation_rate_last_5_rounds
IF others_cooperation_last_5 > 0.7 AND stock > capacity/3:
    DEFECT  // Strong exploitation opportunity
```

### Retaliation Response
If others suddenly shift to aggressive (cooperation drops by >0.3 in 2 rounds):
- Immediately DEFECT for next 3 rounds
- Then reassess based on stock level

## Edge Case Handling

1. **Stock Depletion Recovery:** If stock ever hits 0, COOPERATE until stock > capacity/4
2. **High Stock Situations:** If stock > 0.9×capacity, always DEFECT (resource abundance)
3. **All Others Cooperating:** If all others cooperated last round and stock > capacity/4, DEFECT
4. **All Others Defecting:** If all others defected last round, COOPERATE only if stock < capacity/4, otherwise DEFECT

## Aggressive Characteristics

1. **First-Mover Advantage:** Always defect in round 1
2. **Exploitation Focus:** Actively seeks to exploit cooperative behavior
3. **Endgame Maximization:** Increasingly aggressive as game approaches end
4. **Calculated Risks:** Only cooperates when absolutely necessary for resource preservation
5. **No Mercy in Final Rounds:** Pure extraction in last 3 rounds regardless of stock level

This strategy is designed to consistently outperform purely cooperative strategies while avoiding the mutual destruction that pure defection strategies would cause. It adapts to opponent behavior but maintains an aggressive posture throughout, only backing down when resource collapse threatens future extraction opportunities.
'''

description_AGGRESSIVE_41 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining just enough sustainability to outcompete opponents**. The key insight is that in a competitive environment without coordination, being "nice" leads to exploitation by others. Instead, we maximize our extraction while strategically preserving the resource only when necessary to maintain long-term advantage.

## Decision Framework

### 1. Stock Threshold Analysis
- **Critical Stock Level**: `critical_stock = capacity * 0.3`
- **Depletion Risk Level**: `danger_stock = capacity * 0.15`
- **Recovery Stock Level**: `recovery_stock = capacity * 0.6`

### 2. Opponent Behavior Classification
Track opponent behavior over the last 3 rounds and classify each opponent as:
- **Aggressive**: >66% defection rate
- **Moderate**: 33-66% defection rate  
- **Cooperative**: <33% defection rate

### 3. Core Decision Rules

#### Round 1: Immediate Aggression
**Always DEFECT** - Establish dominance and extract maximum value while stock is at capacity.

#### Rounds 2 to r-2: Adaptive Exploitation
```pseudocode
if stock < danger_stock:
    # Emergency cooperation to prevent total collapse
    action = COOPERATE
    
elif stock < critical_stock:
    # Conditional cooperation based on opponent behavior
    if (aggressive_opponents / total_opponents) > 0.5:
        action = DEFECT  # If most opponents are aggressive, compete aggressively
    else:
        action = COOPERATE  # Allow some recovery
        
elif stock > recovery_stock:
    # High stock - exploit aggressively
    action = DEFECT
    
else:
    # Medium stock - exploit based on recent opponent behavior
    if last_round_defectors > (n/2):
        action = DEFECT  # Match or exceed opponent aggression
    elif my_recent_payoff_trend < 0:
        action = DEFECT  # Escalate if falling behind
    else:
        # Strategic cooperation to maintain stock for future exploitation
        if (rounds_remaining / total_rounds) > 0.3:
            action = COOPERATE
        else:
            action = DEFECT
```

#### Round r-1: Penultimate Aggression
```pseudocode
if stock < danger_stock:
    action = COOPERATE  # Preserve something for final round
else:
    action = DEFECT     # Extract aggressively before end
```

#### Round r: Final Extraction
**Always DEFECT** - No future consequences, extract maximum value.

### 4. Advanced Adaptive Mechanisms

#### Payoff Momentum Tracking
- Track personal payoff trend over last 3 rounds
- If trending downward relative to theoretical maximum, increase aggression level
- If significantly outperforming, consider strategic cooperation to maintain stock

#### Stock Velocity Analysis
- Monitor rate of stock depletion: `stock_velocity = (previous_stock - current_stock) / previous_stock`
- If velocity > 0.4 (rapid depletion), temporarily increase cooperation probability
- If velocity < 0.1 (slow depletion), increase aggression

#### Opponent Punishment Protocol
- Track individual opponent defection patterns
- If an opponent defects after a mutual cooperation phase, mark them for "punishment"
- Increase personal defection probability by 0.2 for next 2 rounds when playing against identified "betrayers"

### 5. Edge Case Handling

#### Near-Zero Stock (stock < capacity * 0.05)
- Cooperate for exactly 2 rounds to allow minimal recovery
- Then return to aggressive extraction

#### High Opponent Cooperation (>70% cooperation rate)
- Exploit heavily with 90% defection rate
- Monitor for sudden behavioral shifts

#### Extreme Endgame (last 20% of rounds)
- Gradually increase defection probability by 0.1 per round
- Override cooperation tendencies unless stock is critically low

## Strategic Rationale

1. **Front-loaded Aggression**: Defecting early maximizes extraction when stock is highest
2. **Conditional Sustainability**: Only preserve resources when absolutely necessary for continued extraction
3. **Opponent Exploitation**: Take advantage of cooperative opponents while defending against aggressive ones
4. **Endgame Maximization**: Escalate extraction as game approaches end
5. **Adaptive Learning**: Continuously adjust based on observed opponent patterns and stock dynamics

This strategy is designed to maximize total payoff through aggressive resource extraction while maintaining just enough strategic foresight to avoid complete resource collapse when it would be disadvantageous. It explicitly assumes other players may be cooperative and seeks to exploit that cooperation while being robust against other aggressive strategies.
'''

description_AGGRESSIVE_42 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **opportunistic aggression** - maximizing immediate gains while maintaining the resource base only when absolutely necessary for future exploitation. The strategy treats cooperation as a calculated investment in future defection opportunities, not as an intrinsic good.

## Decision Framework

### 1. **Immediate Threat Assessment** (First Priority)
```
IF (current_stock / n) < threshold_minimum:
    COOPERATE  // Preserve the resource for future exploitation
ELSE:
    DEFECT by default, unless other conditions override
```
Where `threshold_minimum = capacity * 0.15` (below this, the resource is critically endangered)

### 2. **Exploitation Window Detection** (Second Priority)
```
IF stock_level > capacity * 0.6 AND round_number <= r * 0.7:
    DEFECT  // High stock = prime exploitation opportunity
```

### 3. **Endgame Aggression** (Overrides cooperation)
```
IF round_number > r * 0.8:
    ALWAYS DEFECT  // No future to preserve, maximize extraction
```

### 4. **Adaptive Opponent Exploitation** (Third Priority)
Track opponent behavior patterns:
```
cooperation_rate = (opponent_cooperations) / (total_observed_actions)

IF cooperation_rate > 0.6:
    DEFECT  // Exploit cooperative opponents
ELIF cooperation_rate < 0.3 AND stock_declining_rapidly:
    COOPERATE  // Join the race to the bottom is counterproductive
```

## Complete Strategy Rules (In Order of Priority)

### **Round 1: Aggressive Opening**
- DEFECT unconditionally
- Establishes aggressive reputation and tests opponent responses
- Maximizes immediate gain from pristine resource

### **Rounds 2 to 0.8r: Adaptive Exploitation Phase**

1. **Critical Stock Protection** (Override all other rules)
   ```
   IF stock < capacity * 0.15:
       COOPERATE
   ```

2. **High-Stock Aggression**
   ```
   IF stock > capacity * 0.6:
       DEFECT
   ```

3. **Opponent Exploitation Analysis**
   ```
   Calculate: avg_opponent_cooperation = cooperations_observed / total_observations
   
   IF avg_opponent_cooperation > 0.5:
       DEFECT  // Punish and exploit cooperators
   ```

4. **Stock Trend Analysis**
   ```
   Calculate: stock_trend = (current_stock - stock_3_rounds_ago) / 3
   
   IF stock_trend < -capacity * 0.1:  // Rapid decline
       IF avg_opponent_cooperation < 0.3:
           COOPERATE  // Everyone defecting = mutual destruction
       ELSE:
           DEFECT  // Continue exploitation if others still cooperate
   ```

5. **Default Action**: DEFECT

### **Final 0.2r Rounds: Total Extraction**
- DEFECT unconditionally
- No future rounds justify resource preservation
- Maximize final extraction regardless of consequences

## Edge Case Handling

### **Stock Depletion Recovery**
```
IF stock < capacity * 0.05:  // Near-death resource
    COOPERATE for minimum 2 consecutive rounds
    // Give resource chance to recover for future exploitation
```

### **All-Cooperation Detection**
```
IF last_3_rounds_all_players_cooperated:
    DEFECT  // Break the peace, exploit the rebuilt resource
```

### **Retaliation Management**
```
IF (my_defections / total_rounds) > 0.8 AND stock_declining_rapidly:
    COOPERATE for 1 round  // Brief signal, then resume aggression
```

## Key Aggressive Features

1. **Default Defection**: Cooperation requires justification, defection is the baseline
2. **First-Strike Advantage**: Always defect in round 1 to establish dominance
3. **Endgame Extraction**: Guaranteed defection in final rounds maximizes total payoff
4. **Exploit Cooperators**: Higher opponent cooperation rates trigger more defection
5. **Minimal Resource Preservation**: Only cooperate when resource faces imminent collapse
6. **Reputation Indifference**: Strategy doesn't try to maintain "good" reputation

This strategy is designed to consistently extract maximum value while keeping the resource just barely sustainable enough to continue exploitation. It treats other players' cooperation as weakness to be exploited and only restrains itself when the alternative is complete resource collapse that would end the exploitation opportunity entirely.
'''

description_AGGRESSIVE_43 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression**: maximize immediate gains while strategically preserving the resource when it benefits long-term extraction. The key insight is that being aggressive doesn't mean being blindly destructive—it means being ruthlessly opportunistic.

## Decision Framework

### Primary Decision Rule: Stock-Based Exploitation Thresholds
```
if stock < threshold_critical:
    play C (preserve what's left for future extraction)
else if stock < threshold_moderate:
    if (opponents_mostly_cooperating AND rounds_remaining > 2):
        play C (tactical cooperation to rebuild stock for future defection)
    else:
        play D (extract while possible)
else:
    play D (high stock = prime exploitation opportunity)
```

### Threshold Calculations
- `threshold_critical = capacity * 0.15` (below this, resource is critically depleted)
- `threshold_moderate = capacity * 0.4` (below this, moderate depletion)
- High stock = above `threshold_moderate`

### Opponent Behavior Analysis
Track the cooperation rate of opponents over a rolling window:
```
cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others)
opponents_mostly_cooperating = cooperation_rate > 0.6
```

## Specific Decision Rules

### Round 1 (First Round)
**Always play D**
- Rationale: Stock is at maximum capacity, providing highest possible immediate payoff
- Sets aggressive tone and tests opponent responses
- No risk of immediate resource collapse

### Rounds 2 to (r-2) (Middle Game)
Apply the primary decision framework with these modifiers:

1. **Exploitation Windows**: If stock > 0.7 * capacity, play D regardless of opponent behavior
2. **Punishment Cycles**: If opponents defected heavily last round (>50% played D), play D this round
3. **Strategic Cooperation**: Only cooperate when:
   - Stock is critically low AND
   - Opponents are mostly cooperating AND
   - Rounds remaining > 2

### Round (r-1) (Second to Last)
```
if stock > threshold_critical:
    play D (extract maximum before game ends)
else:
    if opponents_mostly_cooperating:
        play C (build stock for final extraction)
    else:
        play D (everyone else is being aggressive anyway)
```

### Round r (Final Round)
**Always play D**
- Rationale: No future rounds to consider, maximize final extraction
- Classic end-game defection regardless of stock level

## Adaptive Components

### Learning Mechanism
Track opponent patterns and adjust aggression:
- If opponents are highly cooperative (>70% C rate): Increase defection frequency
- If opponents are highly aggressive (>70% D rate): Match their aggression level
- If stock consistently rebuilds well: Maintain high aggression

### Exploitation Opportunities
- **Sucker Detection**: If opponents cooperate when you defect, increase defection rate
- **Resource Recovery**: If stock grows faster than expected, lower cooperation thresholds
- **Collapse Avoidance**: If stock approaches 0, temporarily cooperate to rebuild extraction base

## Edge Case Handling

### Stock Depletion (stock < 0.1 * capacity)
- Cooperate for 1-2 rounds maximum
- Resume defection as soon as stock > threshold_critical
- Never cooperate for more than 2 consecutive rounds

### All Opponents Cooperating
- Defect even more aggressively
- Only cooperate if stock is critically low AND significant rounds remain

### All Opponents Defecting
- Match their aggression
- Cooperate only in truly critical stock situations

## Robustness Features

1. **Anti-Exploitation**: Never cooperate for extended periods, preventing opponents from free-riding
2. **Adaptive Thresholds**: Adjust cooperation triggers based on observed stock recovery rates
3. **Endgame Advantage**: Always defect in final rounds regardless of stock state
4. **Quick Recovery**: Resume aggressive play immediately after any forced cooperation

## Strategic Rationale

This strategy is aggressive because it:
- Defaults to defection in most scenarios
- Prioritizes immediate gains over long-term sustainability
- Only cooperates when it serves future exploitation goals
- Exploits cooperative opponents ruthlessly
- Takes maximum advantage of high-stock situations

The strategy is adaptive because it:
- Responds to opponent behavior patterns
- Adjusts to stock levels dynamically
- Learns from resource recovery rates
- Handles various endgame scenarios

This approach should outperform purely cooperative strategies by extracting more resources, while outperforming purely aggressive strategies by avoiding complete resource collapse that eliminates future extraction opportunities.
'''

description_AGGRESSIVE_44 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent selfishness**: maximize personal extraction while strategically managing the resource to ensure continued exploitation opportunities. Think of it as being the smartest predator in the ecosystem.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to r/3)
**Objective**: Establish dominance and gather intelligence

**Decision Rule**:
- **Round 1**: Always DEFECT (send a strong signal)
- **Rounds 2 to r/3**: 
  - If stock > 0.7 × capacity: DEFECT (resource is abundant, maximize extraction)
  - If 0.4 × capacity < stock ≤ 0.7 × capacity: DEFECT if majority defected last round, otherwise COOPERATE
  - If stock ≤ 0.4 × capacity: COOPERATE (resource getting dangerously low)

### Phase 2: Middle Rounds (r/3 to 2r/3)
**Objective**: Exploit opponent patterns while maintaining resource viability

**Decision Rule**:
- Calculate **Defection Rate** = (Number of D actions by others in last 3 rounds) / (3 × (n-1))
- Calculate **Stock Trend** = (Current stock - Stock 3 rounds ago) / 3

**If Defection Rate > 0.6**: 
- DEFECT (if others are greedy, be greedier)

**If Defection Rate ≤ 0.3**:
- If Stock Trend ≥ 0: DEFECT (resource is stable/growing, exploit the cooperators)
- If Stock Trend < 0: COOPERATE (resource declining, temporary restraint)

**If 0.3 < Defection Rate ≤ 0.6**:
- If stock > 0.5 × capacity: DEFECT
- If stock ≤ 0.5 × capacity: COOPERATE

### Phase 3: End Game (Last r/3 rounds)
**Objective**: Extract maximum value with calculated risks

**Decision Rule**:
- If stock > capacity/n: DEFECT (enough resource for aggressive extraction)
- If capacity/(2n) < stock ≤ capacity/n: 
  - DEFECT if more than half the remaining rounds left
  - COOPERATE otherwise
- If stock ≤ capacity/(2n): COOPERATE (resource critically low)

**Final 2 Rounds Exception**:
- Always DEFECT in the last 2 rounds regardless of stock level (no future consequences)

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's behavior and classify them:
- **Aggressive** (>70% defection rate): Always assume they'll defect
- **Cooperative** (>70% cooperation rate): Exploit them more aggressively
- **Adaptive** (mixed behavior): Match their aggression level + 10%

### Stock Emergency Protocol
If stock falls below capacity/(4n) at any point:
- Switch to COOPERATE for the next round
- Resume normal strategy after stock recovery above capacity/(3n)

### Punishment Mechanism
If an opponent defects when you cooperated in a situation where cooperation was mutually beneficial:
- Mark them for punishment
- DEFECT against them for the next 2 rounds regardless of other conditions
- This sends a clear message that cooperation violations have consequences

## Edge Cases

### First Round
Always DEFECT - establishes aggressive stance and maximizes initial extraction.

### Last Round
Always DEFECT - no future consequences, pure extraction optimization.

### Stock Depletion
If stock reaches 0, automatically COOPERATE until stock > 0 (obviously, since defection would yield 0 anyway).

### Tie Situations
When decision rules conflict, default to DEFECT (maintains aggressive posture).

## Pseudocode Structure

```
function decide_action(current_round, stock, history, n, r, capacity):
    
    // Emergency override
    if stock == 0:
        return COOPERATE
    
    // End game aggression
    if current_round >= r-1:
        return DEFECT
    
    // Calculate phase
    phase = determine_phase(current_round, r)
    
    // Calculate metrics
    defection_rate = calculate_opponent_defection_rate(history, 3)
    stock_trend = calculate_stock_trend(history, 3)
    
    // Phase-specific logic
    if phase == 1:
        return early_phase_logic(current_round, stock, capacity)
    elif phase == 2:
        return middle_phase_logic(stock, defection_rate, stock_trend, capacity, n)
    else:
        return end_phase_logic(current_round, stock, capacity, n, r)
```

## Strategic Rationale

This strategy is aggressively designed to:
1. **Exploit cooperative opponents** by defecting when they cooperate
2. **Match or exceed opponent aggression** to avoid being exploited
3. **Maintain resource viability** just enough to continue extraction
4. **Maximize end-game extraction** when future consequences diminish
5. **Adapt to opponent patterns** while maintaining an aggressive baseline

The key insight is that in a tournament setting, being too cooperative makes you prey, while being too aggressive destroys the resource. This strategy finds the sweet spot of **sustainable aggression** - extracting maximum value while ensuring there's something left to extract.
'''

description_AGGRESSIVE_45 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize immediate gains while maintaining long-term viability through strategic stock preservation. The key insight is to exploit cooperators ruthlessly while avoiding mutual destruction scenarios that eliminate future profit opportunities.

## Decision Framework

### Phase Classification System
The strategy dynamically classifies the game into phases based on stock health and round position:

**Stock Health Metrics:**
- `stock_ratio = current_stock / capacity`
- `consumption_pressure = total_players / (stock_ratio * capacity)`

**Phase Definitions:**
1. **ABUNDANCE** (stock_ratio > 0.7): Stock is healthy, aggressive exploitation viable
2. **SCARCITY** (0.3 ≤ stock_ratio ≤ 0.7): Moderate stock, selective aggression
3. **CRISIS** (stock_ratio < 0.3): Critical stock levels, survival mode
4. **ENDGAME** (rounds_remaining ≤ 3): Terminal extraction phase

### Core Decision Rules

```pseudocode
function decide_action(stock, round, rounds_remaining, history):
    phase = classify_phase(stock, round, rounds_remaining)
    opponent_cooperation_rate = calculate_recent_cooperation_rate(history, lookback=3)
    
    switch phase:
        case ABUNDANCE:
            return DEFECT  // Always exploit in abundance
            
        case SCARCITY:
            if opponent_cooperation_rate > 0.5:
                return DEFECT  // Exploit cooperative opponents
            else if stock_declining_rapidly(history):
                return COOPERATE  // Emergency conservation
            else:
                return DEFECT  // Default to aggression
                
        case CRISIS:
            if rounds_remaining > total_rounds * 0.2:
                return COOPERATE  // Forced conservation for survival
            else:
                return DEFECT  // Extract remaining value
                
        case ENDGAME:
            return DEFECT  // Terminal extraction regardless of consequences
```

### Adaptive Exploitation Mechanism

The strategy tracks opponent behavior patterns to identify and exploit cooperative players:

**Cooperation Exploitation Index (CEI):**
```pseudocode
CEI = (cooperative_opponents / total_opponents) * stock_health_multiplier

if CEI > 0.6 and stock_ratio > 0.4:
    return DEFECT  // High exploitation opportunity
```

### Strategic Edge Cases

**Round 1 (Information Gathering):**
- Always DEFECT to establish aggressive reputation and test opponent responses
- Sets tone for exploitation-based relationship

**Final 3 Rounds (Terminal Extraction):**
- DEFECT regardless of stock levels
- Rationale: No future rounds to benefit from conservation

**Stock Depletion Emergency:**
- If stock falls below `capacity * 0.15`: Cooperate for exactly 2 rounds to allow recovery
- Then immediately return to defection once stock shows growth

**Opponent Pattern Recognition:**
- Track individual opponent tendencies over last 4 rounds
- Identify "always cooperate" opponents for maximum exploitation
- Against "tit-for-tat" opponents: Defect-Cooperate-Defect pattern to maintain exploitation while avoiding retaliation spirals

### Robustness Features

**Anti-Coordination Defense:**
- Randomize timing of cooperation periods (when forced) to prevent opponents from coordinating exploitation
- Never cooperate in predictable patterns

**Stock Preservation Threshold:**
- Maintain minimum viable stock: If projected stock after round would fall below `n * 2`, cooperate once
- This ensures at least one more round of meaningful extraction

**Dynamic Aggression Scaling:**
```pseudocode
aggression_factor = base_aggression * (1 + opponent_cooperation_rate) * stock_health_bonus

if aggression_factor > threshold:
    bias_toward_defection = true
```

## Strategic Advantages

1. **Maximum Value Extraction:** Consistently captures higher individual payoffs by exploiting cooperative behavior
2. **Adaptive Intelligence:** Responds to opponent patterns rather than following rigid rules
3. **Endgame Optimization:** Recognizes when conservation becomes irrelevant and maximizes terminal extraction
4. **Survival Instinct:** Includes emergency protocols to avoid complete resource collapse when continuation value exists
5. **Anti-Exploitation:** Aggressive reputation discourages others from attempting to exploit this strategy

This strategy embodies aggressive game theory: it seeks to maximize individual payoffs through strategic exploitation while maintaining just enough cooperation to preserve profitable future opportunities. It assumes opponents are potential sources of advantage rather than partners, aligning perfectly with competitive tournament dynamics.
'''

description_AGGRESSIVE_46 = '''
# Aggressive Opportunistic Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle that **aggressive early accumulation maximizes total payoff** while maintaining the ability to exploit cooperative opponents throughout the game. It treats the common pool as a competitive arena where hesitation leads to being exploited by others.

## Decision Rules

### 1. Opening Aggression Phase (Rounds 1-3 or until stock < capacity/2)
**ALWAYS DEFECT** in the opening rounds to:
- Maximize immediate payoffs when stock is at peak levels
- Establish an aggressive reputation that may deter others from defecting
- Capitalize on any initial cooperation from naive opponents

### 2. Stock Monitoring System
Track the **stock depletion rate** after each round:
- If stock drops below `capacity/3`: Switch to conditional cooperation mode
- If stock drops below `capacity/6`: Emergency cooperation mode
- If stock reaches 0: Continue defecting (nothing left to preserve)

### 3. Opponent Behavior Analysis
Maintain counters for each opponent's cooperation/defection history:

```pseudocode
for each opponent j:
    cooperation_rate[j] = (times_j_cooperated) / (total_rounds_observed)
    recent_defection_streak[j] = consecutive_defections_in_last_3_rounds
```

### 4. Adaptive Decision Framework

**PRIMARY RULE**: Defect if any of the following conditions are met:
- Current round ≤ 3 (opening aggression)
- Stock > capacity × 0.8 (high stock exploitation)
- More than 50% of opponents defected in the previous round
- Any opponent has defected for 3+ consecutive rounds (punish aggressors)
- Final round (r) - no future to preserve

**CONDITIONAL COOPERATION**: Cooperate only when ALL of the following are true:
- Stock is between capacity/6 and capacity/3 (critical preservation zone)
- At least 70% of opponents cooperated in the previous round
- Not in final 2 rounds
- Stock depletion rate in last 2 rounds < capacity/4 per round

**EXPLOITATION MODE**: If stock > capacity × 0.6 AND more than 80% of opponents are cooperating:
- Defect to maximize advantage over cooperative opponents
- This prevents being a "sucker" in a mostly cooperative environment

### 5. Endgame Strategy (Final 20% of rounds)
- **Rounds r-2 to r-1**: Cooperate ONLY if stock < capacity/4 and most others are cooperating
- **Final round**: ALWAYS defect (no future consequences)

### 6. Emergency Recovery Protocol
If stock falls below capacity/6:
- Cooperate for the next 2 rounds regardless of opponent behavior
- Resume normal decision rules only if stock recovers above capacity/4

## Edge Case Handling

**First Round**: Always defect (maximum exploitation of initial capacity)

**Stock = 0 scenario**: Continue defecting (no resource to preserve, might as well maintain aggressive posture)

**All opponents always cooperate**: Defect every round except when stock < capacity/6 (maximize exploitation while preventing total collapse)

**All opponents always defect**: Match their aggression - defect every round (race to the bottom, but don't be the sucker)

**Mixed behaviors**: Apply the adaptive framework above - punish defectors, exploit cooperators, preserve critical stock levels

## Strategic Rationale

This aggressive strategy is designed to:

1. **Front-load payoffs** when resources are abundant
2. **Punish aggressive opponents** to deter their defection
3. **Exploit cooperative opponents** while they're willing to preserve resources
4. **Prevent total resource collapse** only when absolutely necessary
5. **Maximize endgame extraction** since future rounds become limited

The strategy assumes that being "nice" in a competitive tournament environment will be exploited by other aggressive strategies, so it prioritizes personal payoff maximization while maintaining just enough cooperation to prevent scenarios where the resource base completely collapses early in the game.
'''

description_AGGRESSIVE_47 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on aggressive opportunism: maximize immediate gains while maintaining the resource base only when absolutely necessary for continued exploitation. The key insight is that in a tournament setting, being "too nice" gets you exploited, while being purely greedy destroys future value.

## Decision Framework

### 1. Stock Assessment Categories
- **CRITICAL** (stock < n): Resource near depletion
- **LOW** (n ≤ stock < 1.5n): Dangerous territory  
- **MODERATE** (1.5n ≤ stock < capacity*0.7): Sustainable extraction possible
- **HIGH** (stock ≥ capacity*0.7): Abundant resources

### 2. Opponent Classification System
Track each opponent across rounds:
- **EXPLOITABLE** (cooperation rate > 70%): Consistently cooperative
- **RECIPROCAL** (matches my cooperation within 20%): Tit-for-tat style
- **HOSTILE** (cooperation rate < 30%): Consistently defects
- **UNPREDICTABLE** (high variance in behavior): Erratic patterns

### 3. Core Decision Rules

#### Round 1: Aggressive Opening
**Always DEFECT** - Establish dominance immediately and gather maximum information about opponent responses.

#### Rounds 2 to r-2: Adaptive Exploitation

```pseudocode
IF stock == CRITICAL:
    COOPERATE  // Emergency preservation
ELSE IF stock == LOW:
    IF (opponents_mostly_cooperative AND remaining_rounds > 3):
        COOPERATE  // Rebuild for continued exploitation
    ELSE:
        DEFECT  // Extract remaining value aggressively
ELSE IF stock == MODERATE:
    exploitable_count = count_exploitable_opponents()
    IF exploitable_count >= n/2:
        DEFECT  // Exploit the cooperators
    ELSE IF last_round_cooperation_rate > 60%:
        DEFECT  // Punish excessive cooperation
    ELSE:
        COOPERATE  // Tactical cooperation to maintain resource
ELSE IF stock == HIGH:
    DEFECT  // Maximum extraction when abundant
```

#### Round r-1 (Second to Last): Strategic Positioning
```pseudocode
IF stock >= 1.5n:
    DEFECT  // Maximize penultimate round gains
ELSE:
    COOPERATE  // Ensure final round viability
```

#### Round r (Final Round): Pure Extraction
**Always DEFECT** - No future consequences, maximize final payoff.

### 4. Advanced Adaptation Mechanisms

#### Retaliation Protocol
- If any opponent defected against me when I cooperated in the previous round AND stock > LOW:
  - DEFECT for next 2 rounds (punishment phase)
  - Exception: Override if stock becomes CRITICAL

#### Exploitation Amplification  
- If I detect >= 2 consistently cooperative opponents (EXPLOITABLE):
  - Increase defection probability by 25% in MODERATE stock situations
  - Reasoning: Cooperative players subsidize aggressive extraction

#### End-Game Acceleration
- In final 20% of rounds:
  - Lower cooperation threshold: Only cooperate if stock < 0.8n (instead of n)
  - Reasoning: Time premium on extraction vs. sustainability

### 5. Edge Case Handling

#### Stock Depletion Recovery
- If stock reaches 0: COOPERATE for exactly 2 rounds to allow regeneration
- If stock < 0.5n for 3+ consecutive rounds: Emergency cooperation mode until stock > n

#### Opponent Convergence
- If all opponents adopt identical strategies: 
  - DEFECT more frequently to break coordination
  - Exploit any emerging cooperation

#### Information Asymmetry
- Track which opponents seem to be using similar adaptive strategies
- Against sophisticated opponents: Randomize 10% of decisions to avoid being perfectly predicted

## Strategic Rationale

1. **Early Aggression**: Establishes reputation and maximizes gains during high-stock periods
2. **Conditional Cooperation**: Only when necessary for resource preservation or when being exploited becomes unprofitable
3. **Opponent Exploitation**: Actively identifies and takes advantage of cooperative players
4. **Endgame Optimization**: Recognizes no future consequences in final rounds
5. **Dynamic Adaptation**: Adjusts strategy based on observed opponent behavior and resource state

This strategy is designed to consistently outperform purely cooperative strategies while avoiding the resource collapse that pure defection causes. It's particularly effective against mixed populations of strategies, which is expected in a tournament format.
'''

description_AGGRESSIVE_48 = '''
# Aggressive Exploitation Strategy: "Predatory Harvester"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically timing cooperative phases to maintain the resource for continued exploitation. The key insight is that in a tournament setting, being consistently aggressive while others cooperate yields the highest payoffs.

## Decision Rules

### Primary Strategy Components

1. **Opening Aggression Phase** (Rounds 1-3 or until stock drops below 50% capacity):
   - **Always DEFECT** to establish dominance and capture maximum early value
   - Rationale: Early rounds have the highest stock levels, so defection payoffs are maximized
   - This signals to opponents that cooperation will not be reciprocated

2. **Adaptive Exploitation Phase** (Middle rounds):
   - **DEFECT if current stock > capacity/3**
   - **COOPERATE if current stock ≤ capacity/3**
   - This creates a "floor" below which we temporarily cooperate to prevent complete collapse

3. **Endgame Extraction** (Final 20% of rounds):
   - **Always DEFECT** regardless of stock level
   - Rationale: No future rounds to benefit from resource preservation

### Adaptive Modifiers

**Stock Depletion Response:**
- If stock falls below capacity/10 at any point: Switch to cooperation for exactly 2 rounds, then resume defection
- This prevents resource death spirals that would eliminate future payoff opportunities

**Opponent Behavior Tracking:**
- Track the cooperation rate of opponents over the last 3 rounds
- If >75% of opponents cooperated in the last 3 rounds: **DEFECT** (exploit their cooperation)
- If <25% of opponents cooperated in the last 3 rounds: **COOPERATE** for 1 round only (strategic resource preservation)

## Edge Case Handling

### First Round:
- **Always DEFECT** - Establishes aggressive stance and maximizes payoff from full stock

### Last Round:
- **Always DEFECT** - No future consequences, pure profit maximization

### Stock Near Zero (stock < capacity/20):
- **COOPERATE** for exactly 1 round to allow minimal recovery, then immediately return to defection
- Exception: If it's the last 2 rounds, continue defecting

### High Cooperation Detection:
- If opponents show sustained cooperation (>80% cooperation rate over 4+ rounds), **DEFECT** continuously to maximize exploitation

## Pseudocode Structure

```
function PredatoryHarvester(round, stock, capacity, n, r, history):
    
    // Endgame extraction
    if round > 0.8 * r:
        return DEFECT
    
    // Emergency resource preservation
    if stock < capacity/20 and round < 0.9 * r:
        return COOPERATE
    
    // Opening aggression
    if round <= 3 or stock > 0.5 * capacity:
        return DEFECT
    
    // Calculate opponent cooperation rate (last 3 rounds)
    recent_coop_rate = calculate_recent_cooperation(history, 3)
    
    // Exploit high cooperation
    if recent_coop_rate > 0.75:
        return DEFECT
    
    // Strategic cooperation threshold
    if stock <= capacity/3:
        if recent_coop_rate < 0.25:
            return COOPERATE  // Preserve resource when others are also depleting
        else:
            return DEFECT     // Still exploit if others cooperating
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Rationale

This strategy is designed to be **maximally aggressive** while avoiding complete resource collapse that would eliminate future gains. Key advantages:

1. **Front-loads gains** when stock is highest
2. **Exploits cooperative opponents** throughout the game
3. **Maintains resource viability** through minimal strategic cooperation
4. **Adapts to opponent behavior** to maximize exploitation opportunities
5. **Extracts maximum value** in endgame scenarios

The strategy assumes opponents will attempt some level of cooperation to preserve the resource, which creates exploitation opportunities. Even against other aggressive strategies, the adaptive elements prevent mutual destruction while maintaining competitive advantage through superior timing of defection/cooperation cycles.
'''

description_AGGRESSIVE_49 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It assumes opponents are either naive cooperators to be exploited or fellow defectors to be competed against. The strategy prioritizes immediate gains while maintaining enough foresight to avoid complete resource collapse that would hurt long-term payoffs.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Default Action: DEFECT**

- **Round 1**: Always DEFECT (no information about opponents, maximize immediate gain)
- **Rounds 2 to r/3**: Continue DEFECTING unless stock drops below critical threshold

**Critical Threshold Check**: If stock < capacity/4, temporarily COOPERATE for 1 round to allow some recovery, then resume DEFECTING

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
**Core Logic**: Analyze opponent patterns and exploit weakness

```pseudocode
opponent_cooperation_rate = (total_C_actions_observed) / (total_actions_observed)
my_recent_advantage = (my_last_3_payoffs - average_opponent_last_3_payoffs)

if opponent_cooperation_rate > 0.6:
    // Opponents are mostly cooperative - exploit aggressively
    action = DEFECT
    
elif opponent_cooperation_rate < 0.3:
    // Opponents are mostly defecting - compete aggressively but watch stock
    if stock > capacity/3:
        action = DEFECT
    else:
        action = COOPERATE  // Temporary restraint to preserve resource
        
else:
    // Mixed opponent behavior - be opportunistic
    if my_recent_advantage > 0:
        action = DEFECT  // I'm winning, press advantage
    else:
        if stock > capacity/2:
            action = DEFECT  // Stock is healthy, be aggressive
        else:
            action = COOPERATE  // Stock is low, brief restraint
```

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Philosophy**: Extract maximum value as game approaches end

```pseudocode
rounds_remaining = r - current_round

if rounds_remaining <= 2:
    // Final rounds - extract everything possible
    action = DEFECT
    
elif rounds_remaining <= r/6:
    // Near endgame - mostly defect unless stock is critically low
    if stock < capacity/6:
        action = COOPERATE  // One last attempt to grow stock
    else:
        action = DEFECT
        
else:
    // Early endgame - aggressive but strategic
    stock_per_remaining_round = stock / rounds_remaining
    sustainable_extraction = capacity / (4 * n)  // Conservative estimate
    
    if stock_per_remaining_round > sustainable_extraction:
        action = DEFECT
    else:
        action = COOPERATE
```

## Edge Case Handling

### Stock Depletion Crisis
```pseudocode
if stock < capacity/10:
    // Emergency cooperation to prevent total collapse
    action = COOPERATE
    crisis_mode = true
    
if crisis_mode and stock > capacity/5:
    // Exit crisis mode and resume aggression
    crisis_mode = false
```

### Opponent Pattern Recognition
- **All-Cooperator Detection**: If all opponents cooperated in last 2 rounds, DEFECT immediately
- **All-Defector Response**: If all opponents defected in last 2 rounds, match their aggression but monitor stock sustainability
- **Tit-for-Tat Detection**: If opponents mirror my previous actions, exploit by defecting after they cooperate

## Aggressive Features

1. **Default to Defection**: The strategy assumes defection is the dominant choice and only deviates when strategically necessary

2. **Exploitation of Cooperation**: Immediately and ruthlessly exploits any cooperative behavior from opponents

3. **Endgame Extraction**: Becomes increasingly aggressive as the game approaches its end, maximizing final extraction

4. **Competitive Escalation**: When facing other defectors, matches their aggression rather than backing down

5. **Minimal Cooperation**: Only cooperates when absolutely necessary for resource sustainability or when stock is so low that continued defection would be self-defeating

## Robustness Elements

- **Stock Monitoring**: Prevents complete resource collapse through strategic temporary cooperation
- **Pattern Adaptation**: Adjusts behavior based on opponent strategies rather than rigid rules
- **Phase-Based Flexibility**: Different strategies for different game phases maximize effectiveness across various scenarios
- **Crisis Response**: Emergency cooperation mode prevents getting trapped in depleted resource scenarios

This strategy is designed to be maximally aggressive while maintaining enough intelligence to avoid the tragedy of the commons when it would be self-defeating. It exploits cooperative opponents ruthlessly while competing effectively against other aggressive strategies.
'''

description_AGGRESSIVE_50 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining the resource base only when absolutely necessary for future exploitation. The key insight is that in a tournament setting, being "nice" gets you exploited, so we prioritize taking advantage of cooperative opponents while punishing defectors even more severely.

## Decision Framework

### Phase Classification
The game is divided into three phases based on rounds remaining:
- **Early Phase**: Rounds 1 to r/3 (exploration and establishment)
- **Middle Phase**: Rounds r/3+1 to 2r/3 (exploitation)  
- **Endgame Phase**: Rounds 2r/3+1 to r (resource extraction)

### Core Decision Rules

#### 1. Opening Aggression (Round 1)
**Always DEFECT** in round 1
- Establishes aggressive reputation immediately
- Tests opponent responses
- Maximizes early payoff when stock is at capacity

#### 2. Stock-Based Thresholds
Define critical stock levels:
- **Depletion Threshold**: stock < capacity * 0.3
- **Crisis Threshold**: stock < capacity * 0.15
- **Collapse Threshold**: stock < n (barely sustainable)

#### 3. Adaptive Exploitation Rules

**Early Phase (Rounds 1 to r/3):**
```
IF stock > Depletion Threshold:
    IF majority of opponents cooperated last round:
        DEFECT (exploit the cooperators)
    ELSE IF stock > capacity * 0.6 AND opponents_defect_rate > 0.5:
        DEFECT (join the feeding frenzy while stock is high)
    ELSE:
        COOPERATE (minimal concession to maintain resource)
        
ELSE IF stock > Crisis Threshold:
    IF opponents_defect_rate > 0.7:
        COOPERATE (forced cooperation to prevent collapse)
    ELSE:
        DEFECT (continue extraction)
        
ELSE:
    COOPERATE (crisis mode - prevent total depletion)
```

**Middle Phase (Rounds r/3+1 to 2r/3):**
```
IF stock > Depletion Threshold:
    IF opponents_cooperation_rate > 0.4:
        DEFECT (maximize exploitation of cooperative opponents)
    ELSE:
        Apply "Conditional Aggression":
            IF my_last_round_payoff > average_opponent_payoff:
                DEFECT (I'm winning, press advantage)
            ELSE:
                COOPERATE (tactical retreat)
                
ELSE IF stock > Crisis Threshold:
    IF opponents_defect_rate > 0.8:
        COOPERATE (everyone else is destroying it, minimal damage control)
    ELSE:
        DEFECT (get mine before others do)
        
ELSE:
    COOPERATE (preserve remaining resources)
```

**Endgame Phase (Final r/3 rounds):**
```
IF rounds_remaining > 3:
    IF stock > Crisis Threshold:
        DEFECT (extract maximum value)
    ELSE:
        COOPERATE (maintain minimal sustainability)
        
IF rounds_remaining <= 3:
    IF stock > Collapse Threshold:
        DEFECT (final extraction - no future to preserve)
    ELSE:
        COOPERATE (squeeze last drops sustainably)
        
IF final_round:
    ALWAYS DEFECT (no tomorrow)
```

### 4. Punishment Mechanisms

**Defector Punishment**: If opponents_defect_rate increases significantly (>20% jump between rounds):
- Respond with DEFECT for next 2 rounds regardless of stock level
- Exception: Only if stock is below Crisis Threshold

**Cooperation Exploitation**: If opponents suddenly become more cooperative (cooperation rate increases >30%):
- Immediately DEFECT to maximize the exploitation opportunity
- Continue defecting until their cooperation rate drops below 50%

### 5. Emergency Protocols

**Resource Collapse Prevention**:
```
IF stock < Crisis Threshold AND rounds_remaining > 5:
    Temporarily switch to COOPERATE regardless of opponent behavior
    Continue cooperating until stock > Depletion Threshold
    
IF stock approaches zero (< n):
    COOPERATE until recovery above Crisis Threshold
```

### 6. Adaptive Learning Component

Track opponent patterns:
- **Cooperation Rate**: Rolling 3-round average of opponent cooperation
- **Retaliation Pattern**: Do opponents punish defection?
- **Exploitation Vulnerability**: Do they maintain cooperation when exploited?

Adjust aggression level:
- Against retaliatory opponents: Reduce defection frequency by 20%
- Against exploitable opponents: Increase defection frequency by 30%
- Against random players: Maintain baseline strategy

## Key Aggressive Features

1. **First-Move Advantage**: Always defect first to establish dominance
2. **Exploitation Focus**: Specifically targets cooperative opponents
3. **Calculated Risk-Taking**: Accepts resource degradation for immediate gains
4. **Endgame Extraction**: Maximizes final rounds regardless of sustainability
5. **Punishment Escalation**: Responds to defection with sustained aggression
6. **Opportunistic Adaptation**: Switches strategies based on opponent vulnerability

## Robustness Elements

- **Stock monitoring** prevents complete resource collapse
- **Phase-based adaptation** handles different game dynamics
- **Emergency protocols** provide fallback for extreme scenarios
- **Pattern recognition** adapts to various opponent types
- **Endgame preparation** maximizes final payoffs

This strategy is designed to be a "smart bully" - aggressive enough to dominate weak opponents while sophisticated enough to avoid mutual destruction with other aggressive strategies.
'''

description_AGGRESSIVE_51 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining the resource base only when absolutely necessary for continued exploitation. The strategy views cooperation as a temporary tactical choice, not a moral imperative.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

- **Early Phase**: Rounds 1 to ⌊r/3⌋
- **Middle Phase**: Rounds ⌊r/3⌋+1 to ⌊2r/3⌋  
- **Endgame Phase**: Rounds ⌊2r/3⌋+1 to r

### Primary Decision Rules

#### 1. Stock Depletion Threshold
```
critical_stock = capacity * 0.3
danger_stock = capacity * 0.15
```

#### 2. Opponent Aggression Assessment
Track opponent defection rates over last 3 rounds:
```
recent_defection_rate = (defections_in_last_3_rounds) / (3 * n)
high_aggression = recent_defection_rate > 0.6
moderate_aggression = 0.3 ≤ recent_defection_rate ≤ 0.6
```

#### 3. Core Decision Logic

**Round 1**: Always DEFECT (establish aggressive dominance immediately)

**Early Phase (Rounds 2 to ⌊r/3⌋)**:
- If stock > critical_stock: DEFECT
- If danger_stock < stock ≤ critical_stock AND high_aggression: DEFECT  
- If danger_stock < stock ≤ critical_stock AND NOT high_aggression: COOPERATE
- If stock ≤ danger_stock: COOPERATE

**Middle Phase (Rounds ⌊r/3⌋+1 to ⌊2r/3⌋)**:
- If stock > critical_stock: DEFECT
- If stock ≤ critical_stock AND recent_defection_rate < 0.4: COOPERATE (resource preservation)
- If stock ≤ critical_stock AND recent_defection_rate ≥ 0.4: 
  - DEFECT with probability 0.7 (punish high aggression)
  - COOPERATE with probability 0.3

**Endgame Phase (Rounds ⌊2r/3⌋+1 to r-1)**:
- If stock > danger_stock: DEFECT (extract maximum value)
- If stock ≤ danger_stock: COOPERATE only if it enables profitable final defection

**Final Round (Round r)**: Always DEFECT (no future consequences)

### Advanced Adaptations

#### 4. Exploitation Pattern Recognition
Track if opponents show predictable cooperation patterns:
- If majority consistently cooperates after mutual defection: Increase defection frequency by 20%
- If opponents show "tit-for-tat" behavior: Alternate between 2-3 defections followed by 1 cooperation

#### 5. Resource Recovery Exploitation
When stock falls below danger_stock but opponents are cooperating:
- COOPERATE for minimum rounds needed to restore stock to critical_stock
- Immediately resume DEFECTING once critical_stock is reached
- Never cooperate longer than necessary for resource recovery

#### 6. Endgame Acceleration
Starting at round ⌊2r/3⌋:
- Calculate maximum extractable value assuming all future defection
- If total remaining potential payoff from pure defection > potential payoff from mixed strategy: Switch to pure defection

### Edge Case Handling

**Stock Collapse (stock ≤ capacity * 0.05)**:
- COOPERATE until stock reaches danger_stock, then resume normal strategy

**Unanimous Cooperation Detected**:
- If all opponents cooperated in last 2 rounds and stock > critical_stock: DEFECT (free-ride opportunity)

**Final 3 Rounds Special Rules**:
- Round r-2: DEFECT if stock > danger_stock, otherwise COOPERATE
- Round r-1: DEFECT unless stock ≤ danger_stock AND defecting would reduce stock below minimum viable level
- Round r: Always DEFECT

## Strategic Rationale

This strategy is aggressively opportunistic while maintaining calculated restraint to preserve the exploitation base. Key advantages:

1. **Front-loaded Gains**: Maximizes early extraction when stock is highest
2. **Adaptive Punishment**: Responds to opponent aggression with escalated defection
3. **Strategic Cooperation**: Uses cooperation purely as a tool for resource preservation and future exploitation
4. **Endgame Dominance**: Ensures maximum extraction in final phases when future consequences diminish

The strategy assumes opponents may attempt various cooperative or retaliatory approaches but maintains aggressive exploitation as the primary goal, cooperating only when necessary to maintain a viable resource base for continued extraction.
'''

description_AGGRESSIVE_52 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining long-term viability**. It aims to maximize individual payoffs by exploiting cooperative opponents while punishing defectors through calculated retaliation that preserves the resource base.

## Decision Framework

### 1. Opening Aggression (First Round)
- **Always DEFECT** in round 1
- Rationale: Establish dominance early, test opponent responses, and maximize initial payoff before any potential retaliation

### 2. Adaptive Response System (Rounds 2 to r-1)

**Primary Rule: Weighted Exploitation Index (WEI)**
```
WEI = (defection_rate × stock_health × punishment_factor)

Where:
- defection_rate = (total_defections_by_others) / (n-1) / current_round
- stock_health = current_stock / capacity
- punishment_factor = 1.2 if I was exploited last round, else 1.0
```

**Decision Logic:**
- If WEI > 0.6: **DEFECT** (High exploitation opportunity)
- If WEI < 0.3: **COOPERATE** (Preserve resource base)
- If 0.3 ≤ WEI ≤ 0.6: Apply **Conditional Aggression Rules**

### 3. Conditional Aggression Rules

**Rule A: Stock Preservation Threshold**
- If stock < capacity/4: COOPERATE (Emergency conservation)
- If stock < capacity/2 AND majority cooperated last round: COOPERATE

**Rule B: Exploitation Window**
- If stock > 3×capacity/4 AND any player cooperated last round: DEFECT
- If I'm significantly behind average payoff (>15%): DEFECT for next 2 rounds

**Rule C: Punishment Protocol**
- If >50% of players defected last round: DEFECT (Join the exploitation)
- If a specific player has defected in ≥70% of rounds: Always defect when stock allows

### 4. Endgame Maximization (Final Round)

**Final Round Strategy:**
- If stock > capacity/3: **DEFECT** (Extract maximum value)
- If stock ≤ capacity/3: Check if cooperation could yield higher payoff than defection
  - COOPERATE only if: (stock/(2n)) × (expected_cooperators + 1) > stock/n
  - Otherwise: **DEFECT**

## Edge Case Handling

### Low Stock Scenarios (stock < capacity/4)
- Switch to **Conservative Mode**: COOPERATE until stock recovers to >capacity/2
- Exception: If all others are defecting anyway, join them to avoid being exploited

### High Stock Scenarios (stock > 3×capacity/4)
- **Maximum Aggression Mode**: DEFECT unless >75% of others cooperated last round

### Tie-Breaking Rules
- When indifferent between C and D: Choose DEFECT (aggressive default)
- When stock exactly at threshold: Round up to next decision category

## Adaptive Learning Components

### Opponent Classification (After Round 3)
Track each opponent as:
- **Cooperator**: >60% cooperation rate → Exploit aggressively
- **Defector**: >60% defection rate → Mirror their strategy
- **Adaptive**: Neither category → Use standard WEI logic

### Dynamic Threshold Adjustment
- If consistently earning below average: Lower cooperation thresholds by 10%
- If stock consistently high (>80% capacity): Increase aggression thresholds by 10%

## Robustness Features

1. **Anti-Exploitation Protection**: Never cooperate if being consistently exploited by same players
2. **Resource Collapse Prevention**: Hard override to cooperate if stock approaches zero
3. **Payoff Maximization**: Always prioritize strategies that maximize long-term individual payoff
4. **Unpredictability**: Introduce minor randomization (±5%) to threshold calculations to prevent opponent adaptation

## Strategic Advantages

- **Immediately aggressive** to establish dominance
- **Punishes pure cooperators** through consistent exploitation
- **Adapts to opponent strategies** without being purely reactive
- **Maintains resource viability** for continued exploitation
- **Maximizes endgame extraction** when future rounds don't matter

This strategy is designed to be ruthlessly effective against cooperative opponents while robust enough to handle aggressive competition, always prioritizing individual payoff maximization over collective welfare.
'''

description_AGGRESSIVE_53 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **opportunistic dominance** - maximizing immediate gains while strategically preserving the resource when it serves long-term exploitation potential. It assumes other players are either naive cooperators to be exploited or competing defectors to be outmaneuvered.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1-3 or first 20% of game)
**Objective**: Establish dominance and test opponent behaviors

**Rule**: Always DEFECT in the first round and continue defecting until:
- Stock drops below critical threshold (stock < capacity/3), OR
- All other players show consistent cooperation pattern

**Rationale**: Early defection maximizes immediate payoffs and forces opponents to reveal their strategies. Cooperative players will suffer losses while still trying to maintain the resource.

### Phase 2: Adaptive Exploitation (Middle rounds)
**Primary Rule**: Use a **Conditional Defection** strategy based on:

1. **Stock Health Assessment**:
   - If stock > 0.6 × capacity: DEFECT (resource is healthy enough to exploit)
   - If stock < 0.3 × capacity: Conditional cooperation to rebuild (only if necessary)

2. **Opponent Behavior Tracking**:
   - Count defection rate of all opponents over last 3 rounds
   - If majority opponent defection rate > 60%: Always DEFECT (tragedy is inevitable, grab what you can)
   - If majority opponent defection rate < 40%: DEFECT every other round (exploit the cooperators)

3. **Stock Trajectory Analysis**:
   - If stock is declining for 2+ consecutive rounds: DEFECT (get out while you can)
   - If stock is stable/growing: Alternate between DEFECT and COOPERATE based on opponent patterns

### Phase 3: Endgame Extraction (Final 15% of rounds)
**Objective**: Maximum extraction regardless of future consequences

**Rules**:
- If stock > capacity/4: Always DEFECT
- If stock ≤ capacity/4: DEFECT unless you're the ONLY defector (in which case, one round of cooperation to rebuild for final extraction)

## Specific Decision Algorithm

```pseudocode
function decide_action(round, total_rounds, stock, capacity, n, opponent_history):
    
    // Phase determination
    early_phase = round <= max(3, 0.2 * total_rounds)
    endgame_phase = round > 0.85 * total_rounds
    
    // Critical thresholds
    healthy_stock = stock > 0.6 * capacity
    critical_stock = stock < 0.3 * capacity
    
    // Early aggression
    if early_phase:
        if round == 1 or stock > 0.5 * capacity:
            return DEFECT
        if critical_stock and all_opponents_cooperated_last_round():
            return COOPERATE
        return DEFECT
    
    // Endgame extraction
    if endgame_phase:
        if stock > capacity / 4:
            return DEFECT
        if stock > 0 and am_only_defector_last_round():
            return COOPERATE  // One round to rebuild for final grab
        return DEFECT
    
    // Middle phase adaptive exploitation
    opponent_defect_rate = calculate_recent_defection_rate(opponent_history, 3)
    
    if critical_stock and opponent_defect_rate < 0.5:
        return COOPERATE  // Rebuild only if others aren't destroying it
    
    if healthy_stock:
        return DEFECT  // Always exploit when resource is abundant
    
    if opponent_defect_rate > 0.6:
        return DEFECT  // Join the destruction if inevitable
    
    if stock_declining_trend(2):
        return DEFECT  // Get out while you can
    
    // Default exploitation pattern - defect more often than cooperate
    if round % 3 != 0:  // Defect 2/3 of the time in neutral conditions
        return DEFECT
    return COOPERATE
```

## Edge Case Handling

1. **Stock Depletion**: If stock reaches 0, continue defecting (0 payoff is inevitable)
2. **All Opponents Defect**: Mirror their behavior - always defect
3. **All Opponents Cooperate**: Exploit mercilessly with occasional cooperation to maintain the resource
4. **Single Round Left**: Always DEFECT
5. **Stock Near Capacity**: Always DEFECT to prevent others from benefiting

## Aggressive Mindset Alignment

This strategy embodies aggression through:
- **First-mover advantage**: Immediate defection to establish dominance
- **Exploitation focus**: Prioritizing immediate gains over long-term sustainability
- **Competitive adaptation**: Matching or exceeding opponent aggression
- **Endgame ruthlessness**: Complete resource extraction when consequences no longer matter
- **Opportunistic cooperation**: Only cooperating when it serves to rebuild resources for future exploitation

The strategy assumes that in a competitive environment, being "nice" leads to being exploited. It's designed to perform well against both naive cooperators (by exploiting them) and other aggressive strategies (by matching their aggression while being more strategic about resource preservation).
'''

description_AGGRESSIVE_54 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate extraction while strategically timing cooperation only when it's mathematically advantageous for long-term domination. The goal is to extract maximum total payoff by exploiting others' cooperation while minimizing our own cooperative "losses."

## Decision Framework

### Primary Decision Rule: Stock-Based Exploitation
```
IF stock > capacity * 0.8:
    ALWAYS DEFECT (high-yield exploitation phase)
ELSE IF stock < capacity * 0.2:
    COOPERATE (desperate conservation to avoid total collapse)
ELSE:
    Apply Adaptive Exploitation Logic
```

### Adaptive Exploitation Logic

**Round Classification:**
- **Early Game** (rounds 1 to r/3): Aggressive establishment
- **Mid Game** (rounds r/3+1 to 2r/3): Strategic adaptation  
- **End Game** (final r/3 rounds): Maximum extraction

**Opponent Behavior Tracking:**
Track each opponent's cooperation rate over last 3 rounds:
- `coop_rate[i] = (cooperations by player i in last 3 rounds) / 3`
- `average_coop_rate = mean(coop_rate for all opponents)`

### Core Decision Algorithm

```pseudocode
FUNCTION decide_action(round, stock, history, opponents_last_actions):
    // Edge Case: First Round
    IF round == 1:
        RETURN DEFECT  // Establish aggressive dominance
    
    // Edge Case: Final Round
    IF round == r:
        RETURN DEFECT  // No future consequences
    
    // Critical Stock Levels
    IF stock < capacity * 0.15:
        RETURN COOPERATE  // Emergency conservation
    
    IF stock > capacity * 0.85:
        RETURN DEFECT  // Abundant exploitation
    
    // Calculate exploitation opportunity
    recent_opponent_coop_rate = calculate_recent_coop_rate(history, 3)
    
    // Aggressive thresholds based on game phase
    IF round <= r/3:  // Early game aggression
        IF recent_opponent_coop_rate > 0.4:
            RETURN DEFECT  // Exploit cooperative opponents
        ELSE:
            IF stock > capacity * 0.5:
                RETURN DEFECT  // High stock exploitation
            ELSE:
                RETURN COOPERATE  // Build stock for future exploitation
    
    ELSE IF round <= 2*r/3:  // Mid game adaptation
        exploitation_threshold = 0.3 + (stock/capacity) * 0.3
        IF recent_opponent_coop_rate > exploitation_threshold:
            RETURN DEFECT
        ELSE:
            // Conditional cooperation to maintain stock
            IF stock > capacity * 0.4 AND recent_opponent_coop_rate > 0.2:
                RETURN DEFECT
            ELSE:
                RETURN COOPERATE
    
    ELSE:  // End game maximum extraction
        IF stock > capacity * 0.3 OR recent_opponent_coop_rate > 0.25:
            RETURN DEFECT
        ELSE:
            RETURN COOPERATE  // Minimal conservation only
```

## Key Strategic Elements

### 1. **Exploitation Windows**
- **High Stock Exploitation**: When stock > 85% capacity, always defect to maximize immediate gains
- **Cooperative Prey Targeting**: When opponents show >40% cooperation rate in recent rounds, aggressively defect to exploit their cooperation
- **End Game Extraction**: Final third of rounds prioritizes maximum extraction over sustainability

### 2. **Minimal Conservation**
- Only cooperate when stock drops below 15% capacity (emergency mode)
- Use cooperation strategically in mid-game only when it enables greater future exploitation
- Never cooperate out of "fairness" - only for mathematical advantage

### 3. **Adaptive Aggression**
- Early rounds establish dominance through consistent defection
- Mid-game adjusts aggression based on opponent behavior patterns
- Continuously track and exploit opponents who show cooperative tendencies

### 4. **Psychological Pressure**
- Consistent early defection signals aggressive intent, potentially intimidating opponents into defensive cooperation
- Unpredictable mid-game patterns prevent opponents from easily countering the strategy
- Late-game aggression maximizes final extraction regardless of future consequences

## Edge Case Handling

- **Round 1**: Always defect to establish aggressive reputation
- **Final Round**: Always defect (no future consequences)
- **Stock Depletion**: Emergency cooperation only below 15% capacity
- **All Opponents Defecting**: Still maintain aggressive stance but with slightly higher cooperation threshold (20% capacity instead of 15%)

## Tournament Robustness

This strategy is designed to:
- **Exploit cooperative strategies** by detecting and punishing cooperation patterns
- **Survive against other aggressive strategies** through strategic conservation when necessary  
- **Adapt to mixed populations** by continuously monitoring and responding to opponent behavior
- **Maximize extraction** across diverse opponent types without requiring coordination or communication

The strategy prioritizes total payoff maximization over resource sustainability, making it highly competitive in tournament settings where individual performance matters more than collective outcomes.
'''

description_AGGRESSIVE_55 = '''
# Aggressive Exploitative Strategy: "Opportunistic Dominance"

## Core Philosophy
This strategy is built on aggressive exploitation of cooperative behavior while maintaining strategic sustainability to maximize long-term extraction. The key insight is that being overly aggressive early can destroy the resource base, so we need calculated aggression that exploits others while preserving our ability to extract value.

## Decision Framework

### Primary Decision Rule: Exploitation with Sustainability Guards

**DEFECT when any of these conditions are met:**
1. **Exploitation Opportunity**: Stock level is high (≥ 0.7 × capacity) AND we can afford to be aggressive
2. **Punishment Phase**: We're in retaliation mode against detected defectors
3. **End Game**: We're in the final 20% of rounds
4. **Stock Recovery**: Stock is recovering from low levels and we want to capture the growth

**COOPERATE only when:**
1. **Survival Mode**: Stock is critically low (< capacity/(4n)) - we need the resource to survive
2. **Building Trust**: First few rounds to establish a cooperative facade (maximum 2 rounds)

### Detailed Strategy Components

#### 1. Opening Gambit (Rounds 1-2)
```
IF round <= min(2, r/10):
    COOPERATE  // Build initial trust/test waters
    Track all opponent actions carefully
```

#### 2. Exploitation Phase (Middle Rounds)
```
IF stock >= 0.7 * capacity:
    DEFECT  // High stock = prime exploitation opportunity
    
IF (number of cooperators in last round) >= (n-1)/2:
    DEFECT  // Exploit cooperative majority
    
IF stock is increasing from previous round:
    DEFECT  // Capture growth before others do
```

#### 3. Punishment and Retaliation System
```
Track defection_count for each opponent over last 3 rounds

IF (opponent defection rate > 0.6) AND (stock >= capacity/(2n)):
    DEFECT  // Punish defectors aggressively
    
IF (we were the only defector last round) AND (stock dropped significantly):
    Consider temporary COOPERATE to avoid resource collapse
```

#### 4. End Game Acceleration (Final 20% of rounds)
```
IF current_round >= 0.8 * r:
    IF stock > capacity/(4n):
        DEFECT  // Extract maximum value in end game
    ELSE:
        COOPERATE  // Only if stock is critically low
```

#### 5. Emergency Sustainability Override
```
IF stock < capacity/(4n):
    COOPERATE  // Critical stock level - must preserve resource
    
IF stock decreased by more than 50% in last round:
    COOPERATE for 1 round  // Emergency brake
```

## Adaptive Elements

### Opponent Classification System
Track each opponent's behavior pattern:
- **Persistent Cooperators**: Always exploit when stock allows
- **Tit-for-Tat Players**: Establish defection as baseline, cooperate minimally
- **Other Aggressive Players**: Engage in competitive defection when profitable

### Dynamic Aggression Scaling
```
aggression_level = base_aggression * stock_multiplier * round_multiplier

base_aggression = 0.8  // Start highly aggressive
stock_multiplier = min(2.0, current_stock / (capacity/2))
round_multiplier = 1 + (current_round / r) * 0.5  // Increase over time
```

### Stock Trend Analysis
Monitor 3-round moving average:
- If trend is upward: Increase defection probability by 20%
- If trend is downward but stock > critical: Maintain aggression
- If trend is sharply downward: Temporary cooperation (1 round max)

## Edge Case Handling

### First Round
Always COOPERATE to:
1. Gather intelligence on opponent strategies
2. Establish initial cooperative reputation
3. Avoid immediate resource depletion

### Last Round
Always DEFECT unless stock is at absolute minimum (< capacity/(8n))

### Stock Depletion Scenarios
If stock drops below capacity/(4n):
1. COOPERATE for exactly 1 round
2. Return to aggressive play once stock shows any recovery
3. Never cooperate for more than 2 consecutive rounds

### All-Defector Environment Detection
If >75% of players defected in the last 2 rounds:
1. Continue defecting (don't be the sucker)
2. Only cooperate if stock reaches critical levels
3. Look for any sign of cooperation to immediately exploit

## Robustness Features

1. **Anti-Exploitation**: Never cooperate more than 2 consecutive rounds
2. **Sustainability Check**: Always preserve minimum viable stock
3. **Opportunism**: Ready to immediately defect when others show cooperation
4. **End Game Maximization**: Extract maximum value in final rounds
5. **Intelligence Gathering**: Continuously adapt to opponent patterns

This strategy prioritizes individual payoff maximization through calculated aggression while maintaining just enough sustainability awareness to avoid complete resource collapse that would hurt our own long-term extraction capabilities.
'''

description_AGGRESSIVE_56 = '''
# Aggressive Adaptive Resource Extraction Strategy (AARES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining long-term viability through calculated risk management. It assumes opponents will exploit any perceived weakness and adapts accordingly.

## Decision Framework

### Phase 1: Aggressive Opening (First Round)
**Always DEFECT** in round 1.
- Rationale: Establish dominance early, maximize immediate payoff, and gather intelligence on opponent responses
- This signals strength and tests opponent cooperation levels

### Phase 2: Adaptive Exploitation (Rounds 2 to r-2)

#### Stock Health Assessment
```
stock_health_ratio = current_stock / capacity
if stock_health_ratio ≥ 0.8: status = "ABUNDANT"
elif stock_health_ratio ≥ 0.4: status = "MODERATE" 
elif stock_health_ratio ≥ 0.15: status = "CRITICAL"
else: status = "COLLAPSE"
```

#### Opponent Aggression Tracking
```
defection_rate = (total_defections_by_others) / (total_possible_defections_by_others)
if defection_rate ≥ 0.7: opponent_type = "HIGHLY_AGGRESSIVE"
elif defection_rate ≥ 0.4: opponent_type = "MODERATELY_AGGRESSIVE"
else: opponent_type = "COOPERATIVE"
```

#### Decision Rules for Phase 2:

**COLLAPSE Status (stock_health_ratio < 0.15):**
- If this is not the last few rounds: COOPERATE (preserve remaining resource)
- Exception: If opponents are HIGHLY_AGGRESSIVE, DEFECT (grab what's left)

**CRITICAL Status (0.15 ≤ stock_health_ratio < 0.4):**
- If opponent_type = "COOPERATIVE": DEFECT (exploit their cooperation)
- If opponent_type = "MODERATELY_AGGRESSIVE": 
  - COOPERATE if majority cooperated last round
  - DEFECT otherwise
- If opponent_type = "HIGHLY_AGGRESSIVE": DEFECT (match their aggression)

**MODERATE Status (0.4 ≤ stock_health_ratio < 0.8):**
- If opponent_type = "COOPERATIVE": DEFECT (maximize exploitation)
- If opponent_type = "MODERATELY_AGGRESSIVE": 
  - DEFECT if stock is trending upward
  - COOPERATE if stock is trending downward rapidly
- If opponent_type = "HIGHLY_AGGRESSIVE": 
  - DEFECT if we can sustain 2+ more rounds of mutual defection
  - COOPERATE otherwise

**ABUNDANT Status (stock_health_ratio ≥ 0.8):**
- Always DEFECT (resource is plentiful, maximize gains)

### Phase 3: Endgame Exploitation (Last 2 Rounds)

**Second-to-last round (round r-1):**
- If stock > capacity/4: DEFECT (enough resource remains for final extraction)
- If stock ≤ capacity/4: COOPERATE (ensure something survives for final round)

**Final round (round r):**
- Always DEFECT (no future consequences, maximize final payoff)

## Adaptive Mechanisms

### Punishment Protocol
If any opponent defected when we cooperated in the previous round AND stock was abundant/moderate:
- DEFECT for the next round regardless of other conditions
- Track this as "betrayal" - increase their individual aggression score

### Recovery Detection
If stock has grown for 2 consecutive rounds and current stock > capacity/3:
- Temporarily increase aggression (more likely to defect in borderline decisions)
- Exploit the recovery phase before others catch on

### Collective Punishment
If ≥50% of opponents defected in previous round when stock was critical:
- Switch to maximum aggression mode for next 2 rounds
- Only cooperate if stock reaches collapse level

## Edge Case Handling

1. **Single opponent (n=2):** More aggressive overall - defect unless stock is in collapse
2. **Very short games (r≤3):** Always defect except when stock is in collapse
3. **Very long games (r>10):** Allow for brief cooperation periods (1-2 rounds) when stock is abundant to enable recovery, but return to aggression quickly
4. **All opponents always cooperate:** Continuous defection while maintaining stock above collapse threshold

## Strategic Advantages

1. **Exploits cooperative opponents** while maintaining resource viability
2. **Matches or exceeds opponent aggression** to avoid being exploited  
3. **Maximizes endgame extraction** when future consequences diminish
4. **Adapts to resource scarcity** to ensure continued extraction opportunities
5. **Establishes aggressive reputation** early to potentially deter opponent defection

This strategy prioritizes individual payoff maximization while using just enough restraint to prevent complete resource collapse, adapting its aggression level based on opponent behavior and resource availability.
'''

description_AGGRESSIVE_57 = '''
# Aggressive Opportunistic Strategy: "Resource Hawk"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining just enough restraint to prevent complete resource collapse when it's profitable to do so. The strategy assumes other players are competitors to be exploited, not partners to cooperate with.

## Decision Rules

### 1. Stock-Based Aggression Threshold
- **High Stock (stock > capacity × 0.7)**: Always DEFECT
  - Rationale: High stock means maximum payoff from defection with minimal risk of collapse
- **Medium Stock (capacity × 0.3 ≤ stock ≤ capacity × 0.7)**: Conditional defection based on opponent history
- **Low Stock (stock < capacity × 0.3)**: Strategic cooperation to rebuild resource base

### 2. Opponent Exploitation Matrix
Track each opponent's cooperation rate over the last min(5, current_round) rounds:
- **Frequent Cooperators (cooperation_rate > 0.6)**: Always DEFECT against them
- **Mixed Players (0.3 ≤ cooperation_rate ≤ 0.6)**: DEFECT if stock > capacity × 0.4
- **Frequent Defectors (cooperation_rate < 0.3)**: Match their aggression level

### 3. Temporal Exploitation Rules

#### First Round
Always DEFECT - establish dominance and gather maximum information about opponent types

#### Early Game (rounds 2 to r/3)
- DEFECT if stock > capacity × 0.5
- If multiple opponents cooperated last round AND stock < capacity × 0.5, then COOPERATE once to rebuild, then resume defection

#### Mid Game (rounds r/3 to 2r/3)
- **Punish Cooperation**: If any opponent switched from D to C, immediately DEFECT to exploit their attempt at resource management
- **Stock Preservation**: Only cooperate if stock < capacity × 0.25 AND majority of opponents cooperated last round
- **Exploitation Window**: If stock is rebuilding (current stock > last round's stock), immediately DEFECT

#### End Game (final r/3 rounds)
- **Resource Extraction**: DEFECT unless stock < capacity × 0.15 (near-collapse threshold)
- **Final Round**: Always DEFECT regardless of stock level

### 4. Dynamic Adaptation Mechanisms

#### Opponent Clustering
Group opponents into categories based on their behavior patterns:
- **Naive Cooperators**: Consistently cooperate regardless of stock level → Always exploit
- **Conditional Cooperators**: Cooperate when stock is low → Exploit during recovery phases
- **Fellow Hawks**: Mostly defect → Match their aggression to avoid mutual destruction only when absolutely necessary

#### Stock Recovery Exploitation
When stock shows recovery (stock_t > stock_t-1):
- Immediately DEFECT to capture the recovery benefit
- Continue defecting until stock drops below previous low

#### Reputation Manipulation
- **False Cooperation**: Cooperate for exactly 1 round when stock < capacity × 0.2 to encourage others to cooperate
- **Immediate Betrayal**: DEFECT the round immediately after any cooperation to maximize exploitation of rebuilt resources

## Edge Cases

### Resource Near-Collapse (stock < capacity × 0.1)
- Cooperate only if at least (n-1)/n opponents cooperated in the previous round
- Otherwise, continue defecting to extract remaining value before inevitable collapse

### All Opponents Always Defect
- Match their behavior completely - mutual destruction is preferable to being the only cooperator

### All Opponents Always Cooperate
- Always DEFECT - maximum exploitation opportunity

### Tied Stock Levels
- Use round number as tiebreaker: DEFECT if round number is even, otherwise apply normal rules

## Pseudocode Summary

```
function ResourceHawk(round, stock, capacity, n, r, opponent_history):
    // First round dominance
    if round == 1:
        return DEFECT
    
    // Calculate stock ratio
    stock_ratio = stock / capacity
    
    // End game extraction
    if round > (2*r/3):
        if stock_ratio < 0.15:
            return COOPERATE if majority_cooperated_last_round()
        else:
            return DEFECT
    
    // High stock - always aggressive
    if stock_ratio > 0.7:
        return DEFECT
    
    // Low stock - conditional cooperation
    if stock_ratio < 0.3:
        if stock_increasing() and round < r:
            return DEFECT  // Exploit recovery
        else:
            return COOPERATE if majority_cooperated_last_round()
    
    // Medium stock - exploit cooperators
    cooperator_count = count_frequent_cooperators()
    if cooperator_count > 0:
        return DEFECT
    
    // Default aggressive stance
    return DEFECT
```

This strategy is designed to be ruthlessly opportunistic, exploiting cooperative opponents while maintaining just enough strategic restraint to avoid destroying the resource base when doing so would reduce total extraction over the game period.
'''

description_AGGRESSIVE_58 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is designed to maximize individual payoffs through intelligent exploitation while maintaining the resource pool's viability for continued extraction. The key insight is that being "aggressive" doesn't mean being myopic - it means being ruthlessly efficient at extracting maximum value.

## Strategy Components

### 1. Opening Aggression (Rounds 1-3)
**Always DEFECT for the first 3 rounds** regardless of parameters.
- Rationale: Establish dominance early and extract maximum value while the stock is at peak levels
- This signals to opponents that you're not a pushover and may induce more conservative play from them
- Even if others defect, you're not worse off, and if they cooperate, you gain significant advantage

### 2. Stock Threshold Monitoring
Calculate critical thresholds:
- **Danger Zone**: stock < capacity/4
- **Opportunity Zone**: stock > capacity * 0.75
- **Sustainable Zone**: capacity/4 ≤ stock ≤ capacity * 0.75

### 3. Adaptive Response System
Track opponent behavior patterns using these metrics:
- **Defection Rate**: Percentage of opponents who defected in the last 3 rounds
- **Cooperation Momentum**: Whether cooperation is increasing among opponents
- **Stock Trajectory**: Whether stock is recovering, stable, or declining

### 4. Main Decision Algorithm

```
IF round ≤ 3:
    DEFECT
    
ELSE IF stock < capacity/4:
    IF more than 60% of opponents cooperated in last round:
        COOPERATE (emergency conservation)
    ELSE:
        DEFECT (resource is doomed anyway, grab what you can)
        
ELSE IF stock > capacity * 0.75:
    DEFECT (exploit high-stock opportunities)
    
ELSE IF remaining_rounds ≤ 2:
    DEFECT (endgame extraction)
    
ELSE:
    Calculate Exploitation Score = 
        (defection_rate_last_3_rounds * 0.4) + 
        (stock_level/capacity * 0.3) + 
        (1/remaining_rounds * 0.3)
    
    IF Exploitation Score > 0.6:
        DEFECT
    ELSE IF cooperation_momentum AND stock_recovering:
        COOPERATE (ride the recovery wave)
    ELSE:
        DEFECT (default aggressive stance)
```

### 5. Endgame Acceleration
In the final 2 rounds:
- **Always DEFECT** - no future consequences to consider
- Extract maximum value from any remaining stock
- Even if stock crashes, you maximize final period gains

### 6. Anti-Coordination Defense
Detect if opponents are trying to establish cooperation patterns:
- If opponents show coordinated cooperation (>75% cooperation rate for 2+ consecutive rounds), break it by defecting
- This prevents others from establishing sustainable cooperation without you
- Resume selective cooperation only after breaking their pattern

### 7. Stock Recovery Exploitation
When stock begins recovering (growth > consumption in previous round):
- Monitor if this creates opportunities for increased defection
- If stock recovery is strong, defect to capture the gains before others realize
- Only cooperate if your defection would kill a recovery that benefits you more long-term

## Edge Case Handling

**First Round**: Always DEFECT (establish aggressive baseline)

**Last Round**: Always DEFECT (no future consequences)

**Stock Near Zero** (< capacity/10): 
- COOPERATE only if majority cooperated last round
- Otherwise DEFECT (resource likely beyond saving)

**All Others Cooperating**: DEFECT (maximum exploitation opportunity)

**All Others Defecting**: DEFECT (prevent being the only sucker)

## Robustness Features

1. **Adaptive Thresholds**: Strategy adjusts to different capacity values and player counts
2. **History-Independent Fallback**: If opponent behavior is unpredictable, default to defection
3. **Parameter Scaling**: All thresholds scale with n and capacity
4. **Anti-Exploitation**: Cannot be systematically exploited by predictable patterns

## Aggressive Mindset Alignment

- **Prioritizes individual payoff maximization** over collective welfare
- **Exploits cooperative opponents** when opportunities arise
- **Breaks up opponent coordination** attempts
- **Front-loads extraction** when stock is high
- **End-game maximization** ignores future sustainability
- **Never commits to indefinite cooperation** without clear self-interest

This strategy is aggressive in its willingness to defect when advantageous while being smart enough to cooperate when it serves selfish interests (like preserving a resource you want to exploit further). It's designed to consistently outperform both naive cooperators and naive defectors while being robust against other sophisticated strategies.
'''

description_AGGRESSIVE_59 = '''
# Aggressive Exploitative Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. It aims to extract maximum value while maintaining enough resource base to continue exploitation across all rounds. The strategy treats cooperation as a tool for resource preservation only when absolutely necessary for continued extraction.

## Decision Framework

### 1. First Round Protocol
**Always DEFECT** in round 1 to:
- Establish dominance and signal aggressive intent
- Test opponents' responses and commitment to cooperation
- Maximize immediate payoff while stock is at capacity

### 2. Stock Health Assessment
Define stock health levels:
- **CRITICAL**: stock < n (unsustainable for one more round of all-defect)
- **DANGER**: stock < 1.5n (risky territory)
- **EXPLOITABLE**: stock ≥ 1.5n (safe to defect)

### 3. Opposition Analysis
Track opponent behavior patterns:
- **Cooperative Ratio**: fraction of opponents who cooperated in previous round
- **Trend**: whether cooperation is increasing or decreasing
- **Retaliation Pattern**: how quickly opponents punish defection

### 4. Core Decision Rules

```pseudocode
FOR each round t:
    IF t == 1:
        RETURN DEFECT
    
    IF t == final_round:
        RETURN DEFECT  // No future consequences
    
    // Calculate stock sustainability
    rounds_remaining = r - t + 1
    min_stock_needed = n * 0.5 * rounds_remaining  // Conservative estimate
    
    IF current_stock <= min_stock_needed:
        // FORCED COOPERATION - stock critically low
        RETURN COOPERATE
    
    // Analyze opponent behavior
    coop_ratio_last_round = count_cooperators_last_round() / (n-1)
    punishment_intensity = calculate_punishment_trend()
    
    // Aggressive exploitation conditions
    IF current_stock > 1.5 * n AND coop_ratio_last_round > 0.3:
        // Sufficient cooperators to exploit + safe stock level
        RETURN DEFECT
    
    IF coop_ratio_last_round > 0.6 AND punishment_intensity < 0.3:
        // High cooperation, low retaliation - prime exploitation
        RETURN DEFECT
    
    // Conditional cooperation for resource preservation
    IF current_stock < n AND rounds_remaining > 3:
        RETURN COOPERATE
    
    // Default to defection
    RETURN DEFECT
```

### 5. Adaptive Mechanisms

**Exploitation Cycles**: When stock recovers above 1.5n, immediately resume aggressive defection regardless of recent cooperation history.

**Punishment Tolerance**: Continue defecting even when facing moderate retaliation (up to 50% opponent defection rate) as long as stock remains above danger threshold.

**Endgame Acceleration**: In final 20% of rounds, lower cooperation thresholds and increase defection frequency to maximize total extraction.

### 6. Edge Case Handling

**Stock Depletion**: If stock falls to 0, immediately switch to cooperation for exactly 2 rounds, then resume defection once any recovery occurs.

**All-Defect Scenarios**: If all opponents consistently defect, match their behavior but monitor for any cooperation opportunities to exploit.

**High-Cooperation Environments**: When facing >70% cooperating opponents, defect more aggressively to maximize relative advantage.

### 7. Strategic Principles

1. **Never signal future cooperation** - maintain unpredictability
2. **Exploit cooperative opponents maximally** - they enable your high payoffs
3. **Cooperate only for resource preservation** - never for reciprocity or fairness
4. **Prioritize immediate gains** over long-term relationships
5. **Maintain minimum viable stock** to enable continued exploitation

## Expected Performance

This strategy is designed to:
- **Dominate cooperative strategies** by consistently exploiting their restraint
- **Outperform other aggressive strategies** through better timing and sustainability
- **Adapt to punishment** while maintaining aggressive stance
- **Maximize total payoff** across all rounds through calculated risk-taking

The strategy accepts that it may face retaliation but counts on many opponents being either too cooperative or too slow to adapt, allowing sustained exploitation throughout most of the game.
'''

description_AGGRESSIVE_60 = '''
# Aggressive Predatory Strategy: "Stock Shark"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated sustainability**. The goal is to maximize personal payoff while maintaining enough stock to continue profiting, effectively treating other players as prey to be outmaneuvered.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploitation Phase** (rounds 1 to r-3): Aggressive defection with strategic cooperation
2. **Escalation Phase** (rounds r-2 to r-1): Maximum pressure tactics  
3. **Endgame Phase** (final round): Pure extraction

### Primary Decision Rules

#### Rule 1: Stock Threshold Dominance
```
IF stock ≤ n (critical threshold):
    Play C (preserve minimal viability)
ELSE IF stock ≤ 1.5n (danger zone):
    Play C with 70% probability, D with 30%
ELSE:
    Apply phase-specific aggressive tactics
```

#### Rule 2: Opponent Exploitation Matrix
Track each opponent's cooperation rate over the last 3 rounds:
- **Cooperators** (>66% cooperation): Target for exploitation - play D against them
- **Moderate Defectors** (33-66% cooperation): Mirror with slight aggression bias
- **Heavy Defectors** (<33% cooperation): Conditional cooperation to preserve stock

#### Rule 3: Phase-Specific Aggression

**Exploitation Phase (Early/Mid Game):**
```
IF stock > 1.5n AND majority_played_C_last_round:
    Play D (exploit cooperative behavior)
ELSE IF stock > 1.5n AND my_cooperation_rate < 30%:
    Play C (prevent complete stock collapse)
ELSE IF defector_count_last_round ≥ n/2:
    Play C (avoid tragedy of commons)
ELSE:
    Play D (default aggressive stance)
```

**Escalation Phase (Near Endgame):**
```
IF stock ≤ n:
    Play C (emergency preservation)
ELSE IF rounds_remaining = 2 AND stock > 2n:
    Play D (penultimate aggression)
ELSE:
    Play D with 80% probability (maximum pressure)
```

**Endgame Phase (Final Round):**
```
Always play D (extract maximum value)
```

### Advanced Tactical Elements

#### Punishment Mechanism
If any player has been consistently defecting (>75% defection rate) while stock remains healthy:
- **Retaliation**: Match their aggression level +10%
- **Coalition Breaking**: If multiple players cooperate against me, immediately switch to maximum defection

#### Adaptive Threshold Adjustment
```
adaptive_threshold = base_threshold * (1 + defection_intensity_factor)
WHERE defection_intensity_factor = (total_defections_last_3_rounds) / (3 * n)
```

#### Stock Recovery Exploitation
When stock shows recovery (current_stock > previous_stock * 1.1):
- **Opportunity Strike**: Immediately play D to capture the growth before others notice
- **False Cooperation**: Briefly cooperate to encourage others' cooperation, then defect

## Edge Case Handling

### First Round
- Always play D (establish dominance and test opponents' reactions)

### Last Round  
- Always play D (no future consequences)

### Stock Near Zero (≤ n/2)
- Force cooperation regardless of other rules (survival mode)

### All Opponents Cooperating
- Play D aggressively (maximum exploitation opportunity)

### Stock at Capacity
- Play D (no growth penalty, pure extraction opportunity)

## Aggressive Mindset Alignment

This strategy is inherently aggressive because it:

1. **Prioritizes immediate gains** over long-term sustainability
2. **Exploits cooperative players** systematically
3. **Uses intimidation tactics** through early defection
4. **Adapts to punish** overly cooperative behavior
5. **Maximizes endgame extraction** regardless of consequences for others
6. **Maintains minimal cooperation** only when absolutely necessary for survival

The strategy treats the common pool as a competitive battlefield where showing weakness invites exploitation, while calculated aggression maximizes individual returns. It's designed to consistently outperform both naive cooperators and simple defectors through superior tactical adaptation.
'''

description_AGGRESSIVE_61 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is designed to maximize individual payoff through calculated aggression while maintaining the resource base needed for sustained exploitation. The key insight is that being consistently aggressive early allows you to accumulate advantages while the stock is high, then selectively cooperate only when necessary to prevent complete collapse.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Always DEFECT** in the first third of rounds, regardless of others' actions or current stock level.

*Rationale: Stock levels are highest early on, making defection most profitable. Establishing an aggressive reputation early may also deter others from defecting against you.*

### Phase 2: Conditional Exploitation (Rounds r/3+1 to 2r/3)
**Primary rule: DEFECT**
**Exception: COOPERATE only if ALL of the following conditions are met:**
- Current stock < capacity/3 (resource is getting critically low)
- Stock has declined for 2+ consecutive rounds 
- More than 60% of other players cooperated in the previous round
- Your cumulative payoff is still above the theoretical "all-cooperate" benchmark

*Rationale: Only cooperate when the resource is truly endangered AND others are showing willingness to maintain it AND you're still ahead.*

### Phase 3: Endgame Maximization (Final r/3 rounds)
**Calculate remaining exploitation potential:**
- If current stock × remaining rounds < your current payoff lead: **DEFECT** (milk what's left)
- If stock is below capacity/4: **COOPERATE** (preserve minimal base)
- Otherwise: **DEFECT**

*Rationale: In endgame, either extract maximum value from remaining resource or ensure just enough survives for final rounds.*

## Edge Cases & Special Situations

### First Round
**Always DEFECT** - No history exists, stock is at maximum, and establishing aggressive precedent is valuable.

### Stock Near Zero (stock < n)
**COOPERATE** - Even an aggressive strategy needs some resource to exploit. This is pure self-interest, not altruism.

### Opponent Behavior Adaptation
- **If >75% of opponents consistently cooperate:** Continue defecting (exploit their cooperation)
- **If >75% of opponents consistently defect:** Defect even more aggressively (prevent them from gaining advantage)
- **If opponents show tit-for-tat patterns:** Maintain defection but monitor stock more carefully

### Last Round Exception
**Always DEFECT** in the final round - no future consequences exist, so extract maximum value.

## Aggressive Features

1. **Default to Defection:** Unlike cooperative strategies that default to cooperation, this strategy assumes defection unless specific conditions demand otherwise.

2. **Exploitation of Cooperators:** Actively takes advantage of others' cooperative behavior rather than reciprocating.

3. **Resource Exhaustion Tolerance:** Willing to drive stock very low if it means maintaining payoff advantage.

4. **Reputation Disregard:** Doesn't attempt to build cooperative reputation; focuses purely on payoff maximization.

5. **Endgame Ruthlessness:** Becomes even more aggressive as the game approaches end, recognizing decreasing future value of cooperation.

## Pseudocode Structure

```
function AggressiveStrategy(round, stock, capacity, n, r, history):
    if round <= r/3:
        return DEFECT
    
    elif round <= 2*r/3:
        if (stock < capacity/3 AND 
            declining_stock_trend(history, 2) AND 
            opponent_cooperation_rate(history) > 0.6 AND 
            my_payoff_advantage(history) > 0):
            return COOPERATE
        else:
            return DEFECT
    
    else:  // Final third
        if stock < capacity/4:
            return COOPERATE
        elif remaining_exploitation_value() < current_lead():
            return DEFECT
        else:
            return DEFECT
```

This strategy is designed to be a dominant force in any tournament by consistently extracting maximum value while only making minimal concessions when absolutely necessary for continued exploitation. It treats the common pool as a resource to be conquered rather than shared.
'''

description_AGGRESSIVE_62 = '''
# Aggressive Opportunistic Strategy: "Predatory Depletion"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough restraint to keep the pool viable for maximum personal gain. It assumes other players are either naive cooperators or similarly aggressive, and seeks to exploit both types.

## Decision Framework

### 1. Strategic Phases

**Phase 1: Early Exploitation (Rounds 1 to r/3)**
- **Always DEFECT** regardless of stock level or opponent actions
- Rationale: Maximize early gains while the stock is high, establishing dominance

**Phase 2: Adaptive Predation (Rounds r/3+1 to 2r/3)**
- Primary rule: **DEFECT** if current stock > capacity/2
- Exception: **COOPERATE** only if stock ≤ capacity/4 AND more than 75% of opponents defected in the previous round
- Rationale: Continue aggressive extraction but avoid total collapse that would eliminate future gains

**Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)**
- **Always DEFECT** in the final round (no future consequences)
- For other rounds in this phase:
  - DEFECT if stock > capacity/3
  - COOPERATE if stock ≤ capacity/3 AND at least one opponent cooperated in the previous round
  - Otherwise DEFECT

### 2. Critical Thresholds

**Depletion Danger Zone**: When stock < capacity/8
- Temporarily COOPERATE for exactly one round to allow minimal regeneration
- Then immediately return to DEFECT

**Collapse Prevention**: When stock < capacity/16
- COOPERATE only if you defected in the previous round (taking responsibility for over-extraction)
- This is purely self-interested - preventing total resource collapse

### 3. Opponent Exploitation Patterns

**Against Consistent Cooperators**:
- Maintain aggressive DEFECT to maximize exploitation
- Never reciprocate cooperation unless stock is critically low

**Against Mixed Strategies**:
- DEFECT more aggressively when opponents show cooperation patterns
- Only moderate behavior when facing other consistent defectors (to avoid mutual destruction)

**Against Tit-for-Tat or Reciprocal Strategies**:
- DEFECT in first interaction to test response
- If they reciprocate with defection, maintain defection unless stock becomes critically low
- Ignore their cooperation signals unless it serves your resource preservation needs

## Pseudocode Implementation

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    // Phase determination
    early_phase = round <= r/3
    middle_phase = (r/3 < round <= 2*r/3)
    end_phase = round > 2*r/3
    final_round = round == r
    
    // Critical thresholds
    danger_zone = stock < capacity/8
    collapse_zone = stock < capacity/16
    high_stock = stock > capacity/2
    medium_stock = stock > capacity/3
    
    // Opponent analysis from previous round
    if round > 1:
        opponent_defection_rate = count_defectors_last_round(history) / (n-1)
        any_opponent_cooperated = opponent_defection_rate < 1.0
        mostly_defected = opponent_defection_rate > 0.75
        i_defected_last = my_last_action(history) == DEFECT
    
    // ALWAYS DEFECT cases (aggressive core)
    if final_round:
        return DEFECT
    if early_phase:
        return DEFECT
    if high_stock and not collapse_zone:
        return DEFECT
    
    // Emergency cooperation (pure self-interest)
    if collapse_zone and round > 1 and i_defected_last:
        return COOPERATE
    if danger_zone and round == 1:
        return DEFECT  // Still aggressive even in danger
    
    // Phase-specific logic
    if middle_phase:
        if stock <= capacity/4 and mostly_defected:
            return COOPERATE  // Minimal restraint
        else:
            return DEFECT
    
    if end_phase:
        if medium_stock:
            return DEFECT
        if stock <= capacity/3 and any_opponent_cooperated:
            return COOPERATE  // Minimal resource preservation
        else:
            return DEFECT
    
    // Default aggressive stance
    return DEFECT
```

## Key Aggressive Features

1. **Front-loaded Exploitation**: Maximum early extraction when resources are abundant
2. **Opportunistic Cooperation**: Only cooperates when it serves long-term extraction goals
3. **Endgame Defection**: No mercy in final rounds
4. **Exploit Cooperators**: Never reciprocates cooperation unless absolutely necessary
5. **Minimal Restraint**: Only shows restraint to prevent total resource collapse (which would hurt own gains)

## Robustness Against Different Opponents

- **vs. Always Cooperate**: Maximum exploitation throughout
- **vs. Always Defect**: Mutual aggressive extraction with minimal restraint
- **vs. Tit-for-Tat**: Establishes defection quickly, maintains dominance
- **vs. Random**: Consistently aggressive regardless of opponent randomness
- **vs. Conditional Cooperators**: Exploits their cooperation while showing minimal reciprocity

This strategy prioritizes individual gain over system sustainability, making aggressive moves while maintaining just enough strategic restraint to keep extracting resources throughout the game.
'''

description_AGGRESSIVE_63 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining the resource base just enough to continue exploitation. It assumes other players will eventually cooperate out of necessity, creating opportunities for sustained defection.

## Decision Rules

### Primary Strategy: Conditional Aggressive Defection
1. **Default Action: DEFECT** - Always start with defection to maximize immediate payoffs
2. **Stock Threshold Monitoring**: Track when stock drops below critical sustainability levels
3. **Exploit Cooperative Behavior**: When others cooperate, continue defecting to maximize advantage

### Detailed Decision Logic

```pseudocode
function decide_action(round, stock, history, n, capacity):
    critical_threshold = capacity * 0.3
    cooperation_threshold = capacity * 0.15
    
    # Round-specific adjustments
    if round == 1:
        return DEFECT  # Always start aggressively
    
    if round == final_round:
        return DEFECT  # No future consequences, maximize immediate gain
    
    # Calculate recent cooperation rate of others
    recent_cooperation_rate = calculate_others_cooperation_last_3_rounds(history)
    
    # Emergency cooperation only when absolutely necessary
    if stock <= cooperation_threshold:
        if recent_cooperation_rate > 0.6:
            return COOPERATE  # Briefly cooperate to rebuild stock
        else:
            return DEFECT  # If others won't cooperate, grab what's left
    
    # Conditional defection based on stock and others' behavior
    if stock > critical_threshold:
        return DEFECT  # Plenty of stock, be aggressive
    
    # Medium stock levels - adaptive behavior
    if recent_cooperation_rate > 0.4:
        return DEFECT  # Others cooperating, exploit them
    else:
        # Occasionally cooperate to prevent total collapse
        if round % 4 == 0:  # Cooperate every 4th round when stock is low
            return COOPERATE
        else:
            return DEFECT
```

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive stance immediately
- Gain maximum information about stock depletion rate
- Signal to others that you're not a pushover

### Final Round
- **Always DEFECT** - No future consequences, maximize immediate payoff
- Others may also defect, but you've already gained advantage throughout the game

### Stock Depletion Crisis (Stock < 15% of capacity)
- **Tactical Cooperation**: Brief cooperation periods only when:
  - Majority of others are cooperating (>60%)
  - Stock is critically low but recoverable
- **Otherwise Continue Defecting**: If others won't cooperate, maximize your share of remaining resources

### Early Game Advantage Building
- **Rounds 1-3**: Pure defection to build early payoff advantage
- Monitor others' responses to gauge their cooperation tendencies

## Adaptive Components

### Opponent Classification System
Track each opponent's behavior pattern:
- **Cooperators**: Players who cooperate >70% of the time → Exploit heavily
- **Defectors**: Players who defect >70% of the time → Match their aggression
- **Adaptive Players**: Variable behavior → Use unpredictable defection timing

### Dynamic Stock Management
- **High Stock (>70% capacity)**: Pure defection
- **Medium Stock (30-70% capacity)**: Conditional defection based on others' behavior
- **Low Stock (<30% capacity)**: Strategic minimal cooperation to maintain exploitation opportunities

### Exploitation Maximization Rules
1. **Free Rider Identification**: When 2+ players consistently cooperate, defect against them
2. **Collapse Prevention**: Only cooperate when total collapse is imminent AND others are cooperating
3. **Endgame Acceleration**: Increase defection rate in final 20% of rounds

## Robustness Features

### Against Tit-for-Tat Strategies
- Initial defection tests their commitment
- Occasional cooperation prevents permanent retaliation cycles
- Resume defection once they return to cooperation

### Against All-Cooperate Strategies
- Pure exploitation - defect consistently while they maintain the resource

### Against All-Defect Strategies
- Match their aggression to prevent being exploited
- Focus on grabbing resources before total depletion

### Against Adaptive Strategies
- Unpredictable timing prevents them from learning your pattern
- Aggressive baseline ensures you're never the most cooperative player

## Key Advantages
1. **Early Lead**: Aggressive start builds significant payoff advantage
2. **Opportunistic**: Exploits any cooperative behavior by others
3. **Pragmatic**: Prevents total resource collapse only when personally beneficial
4. **Unpredictable**: Avoids obvious patterns that opponents can exploit
5. **Endgame Optimized**: Maximizes final rounds when future consequences are minimal

This strategy prioritizes individual payoff maximization while maintaining just enough resource sustainability to continue the exploitation game. It assumes others will eventually be forced to cooperate, creating persistent opportunities for aggressive players to gain advantage.
'''

description_AGGRESSIVE_64 = '''
# Aggressive Adaptive Resource Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **opportunistic dominance** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The key insight is that in a tournament setting, being "too nice" gets you exploited by aggressive opponents.

## Strategy: "Predatory Harvester"

### Phase 1: Opening Aggression (Rounds 1-3)
**Always DEFECT** for the first 3 rounds or 20% of total rounds (whichever is smaller).

**Rationale**: 
- Establish dominance and test opponent responses
- Maximize early gains when stock is at peak levels
- Force opponents into defensive positions
- In short games (r ≤ 5), this captures most of the value

### Phase 2: Adaptive Exploitation (Middle rounds)

**Stock-Based Decision Rules:**
```
if stock ≤ capacity * 0.3:
    COOPERATE (resource is critically low)
elif stock ≥ capacity * 0.8:
    DEFECT (resource is abundant, exploit it)
else:
    Apply behavioral analysis below
```

**Opponent Behavioral Analysis:**
Track each opponent's cooperation rate over the last 3 rounds:
- **Aggressive opponents** (coop_rate < 0.4): Always DEFECT against them
- **Cooperative opponents** (coop_rate > 0.7): DEFECT with 80% probability
- **Mixed/Retaliatory opponents**: Match their last action with 70% probability, otherwise DEFECT

**Exploitation Threshold:**
If total defections by others in the last round ≥ n/2, then DEFECT (join the feeding frenzy).

### Phase 3: Endgame Maximization (Final 20% of rounds)

**Terminal Exploitation:**
```
rounds_remaining = r - current_round + 1

if rounds_remaining ≤ 2:
    if stock > n * rounds_remaining:
        DEFECT (extract maximum before game ends)
    else:
        COOPERATE (preserve what little remains)
elif rounds_remaining ≤ 4:
    if majority_of_others_defected_last_round:
        DEFECT (don't be left holding the bag)
    else:
        COOPERATE with 60% probability
```

### Critical Edge Cases

**Stock Depletion Crisis:**
If stock ≤ n (barely enough for one round of cooperation):
- COOPERATE only if ≥ 70% of other players cooperated in the previous round
- Otherwise DEFECT (grab what you can before it's gone)

**Resource Abundance:**
If stock = capacity for 2+ consecutive rounds:
- Always DEFECT (someone needs to start harvesting)

**First Round:**
Always DEFECT (no history to analyze, maximize immediate gain)

**Tie-Breaking:**
When behavioral analysis suggests mixed strategy, bias toward DEFECTION (60-70% defection rate).

## Key Aggressive Elements

1. **Front-loaded Exploitation**: Immediate aggressive start to capture high-value early rounds
2. **Opportunistic Defection**: Heavily exploit cooperative opponents (80% defection rate)
3. **Endgame Liquidation**: Extract maximum value in final rounds regardless of sustainability
4. **Retaliation Amplification**: When others defect, join them rather than trying to save the resource
5. **Stock Threshold Bias**: Only cooperate when resource is critically endangered

## Robustness Features

- **Parameter Adaptation**: Decision thresholds scale with n and capacity
- **History Length**: Uses 3-round moving windows to avoid being manipulated by temporary cooperation
- **Dynamic Thresholds**: Stock-based rules prevent total resource collapse while maintaining aggression
- **Anti-Exploitation**: Aggressive players can't take advantage since we defect against them
- **Endgame Protection**: Prevents others from exploiting our cooperation in final rounds

This strategy assumes other players may cooperate initially but will likely become more aggressive as the tournament progresses. By starting aggressive and maintaining that stance, it captures maximum value while having fallback cooperation rules only when absolutely necessary for future gains.
'''

description_AGGRESSIVE_65 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on aggressive resource extraction while maintaining just enough sustainability to prevent complete stock collapse when profitable. It exploits cooperative opponents ruthlessly while adapting to defensive play patterns.

## Decision Framework

### Phase 1: Aggressive Opening (Rounds 1-3)
**Objective:** Establish dominance and test opponent behavior
- **Round 1:** Always DEFECT (information gathering + immediate advantage)
- **Rounds 2-3:** DEFECT if stock > capacity/3, otherwise COOPERATE
- **Rationale:** Start aggressively to maximize early gains and force opponents to reveal their strategies

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
**Primary Rule:** Exploitation-based decision making

**Decision Logic:**
```
IF (stock <= capacity/4):
    COOPERATE  // Emergency sustainability mode
ELSE IF (defection_ratio_last_3_rounds > 0.6):
    DEFECT     // If others are mostly defecting, join the feeding frenzy
ELSE IF (my_recent_advantage > 0):
    DEFECT     // Press advantage when ahead
ELSE IF (cooperative_players >= n/2 AND stock > capacity/2):
    DEFECT     // Exploit cooperative majority when stock is healthy
ELSE:
    COOPERATE  // Minimal cooperation for stock recovery
```

Where:
- `defection_ratio_last_3_rounds` = (total defections by all players in last 3 rounds) / (3n)
- `my_recent_advantage` = (my average payoff last 3 rounds) - (average payoff of all other players last 3 rounds)
- `cooperative_players` = number of players who cooperated in the previous round

### Phase 3: Endgame Aggression (Final 1-2 rounds)
**Objective:** Maximum extraction before game ends

**Round r-1 (Second to last):**
- DEFECT if stock > capacity/6
- COOPERATE otherwise

**Round r (Final round):**
- Always DEFECT (no future consequences)

## Key Adaptive Mechanisms

### 1. Stock-Based Thresholds
- **Critical threshold (capacity/4):** Below this, forced cooperation to prevent collapse
- **Exploitation threshold (capacity/2):** Above this with cooperative opponents, maximum aggression
- **These thresholds scale with capacity, making strategy robust across game sizes**

### 2. Opponent Behavioral Tracking
- **Cooperation Exploitation:** When opponents cooperate frequently, defect to maximize relative advantage
- **Defection Matching:** When opponents defect heavily, match their aggression to avoid being the only cooperator
- **Momentum Reading:** Track whether opponents are becoming more or less cooperative

### 3. Relative Performance Monitoring
- **Advantage Pressing:** When ahead in recent rounds, continue aggressive play to maintain lead
- **Catch-up Aggression:** When behind, increase defection rate to close gaps quickly

## Edge Case Handling

### Stock Collapse Prevention
```
IF (stock < capacity/8):
    Force COOPERATE for 2 consecutive rounds minimum
    Only resume defection if stock recovers to > capacity/4
```

### Opponent Pattern Recognition
- **All-Defect Detection:** If all opponents defected last round and stock < capacity/3, temporarily cooperate
- **Sucker Identification:** If certain players consistently cooperate while others defect, prioritize defection to exploit them

### Parameter Scaling
- All thresholds scale with capacity and n
- Strategy remains aggressive regardless of game size
- Larger n makes individual defection less impactful, so slightly increase cooperation rate when n > 6

## Aggressive Features

1. **First-Strike Advantage:** Always defect in round 1 to establish dominance
2. **Exploitation Focus:** Actively seeks to exploit cooperative opponents
3. **Endgame Brutality:** Maximizes extraction in final rounds regardless of sustainability
4. **Minimal Cooperation:** Only cooperates when absolutely necessary for stock survival or when all others are defecting heavily
5. **Advantage Pressing:** Doubles down on aggression when ahead

## Robustness Elements

- **Multi-timescale adaptation:** Responds to both recent (3-round) and immediate (1-round) opponent behavior
- **Stock-sensitive thresholds:** Prevents strategy from causing mutual destruction
- **Population-size scaling:** Adjusts aggression level based on number of players
- **Pattern-breaking:** Includes some randomization in borderline cases to avoid predictability

This strategy prioritizes individual payoff maximization through aggressive resource extraction while maintaining just enough adaptivity to avoid catastrophic outcomes that would harm long-term gains.
'''

description_AGGRESSIVE_66 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on the principle of **aggressive opportunism**: maximize immediate gains while maintaining the resource base only when absolutely necessary for future exploitation. The strategy treats cooperation as a temporary investment tool, not a moral imperative.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Objective**: Establish dominance and test opponent resilience

**Rules**:
- **Round 1**: Always DEFECT (no history to analyze, maximize immediate gain)
- **Rounds 2 to r/3**: 
  - If stock > capacity * 0.7: DEFECT (resource is abundant, exploit aggressively)
  - If stock ≤ capacity * 0.3: COOPERATE (emergency conservation to prevent collapse)
  - Otherwise: DEFECT if ≥50% of opponents defected last round, else COOPERATE

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
**Objective**: Adapt to opponent patterns while maintaining aggressive stance

**Opponent Classification**:
- **Pushovers**: Players who cooperated >70% of the time so far
- **Aggressors**: Players who defected >70% of the time so far  
- **Adapters**: All other players

**Rules**:
- If stock ≤ capacity * 0.2: COOPERATE (critical conservation threshold)
- If ≥75% of opponents are Pushovers: Always DEFECT (exploit weakness)
- If ≥75% of opponents are Aggressors: 
  - COOPERATE if stock < capacity * 0.6 (avoid mutual destruction)
  - DEFECT otherwise (match aggression when safe)
- Mixed opponent pool:
  - DEFECT if stock > capacity * 0.6 AND last round's defection rate < 60%
  - COOPERATE if stock < capacity * 0.4 OR last round's defection rate ≥ 80%
  - Otherwise DEFECT (default aggressive stance)

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
**Objective**: Maximize final extraction with calculated risks

**Rules**:
- **Last Round**: Always DEFECT (no future consequences)
- **Second-to-last Round**: DEFECT unless stock < capacity * 0.15
- **Other endgame rounds**:
  - If stock > capacity * 0.5: Always DEFECT (sufficient buffer exists)
  - If stock ≤ capacity * 0.2: COOPERATE (prevent total collapse before endgame)
  - If rounds_remaining ≤ 3: DEFECT (short-term thinking dominates)
  - Otherwise: DEFECT if majority defected last round, else COOPERATE

## Edge Case Handling

### Stock Crisis Management
- **Stock ≤ capacity * 0.1**: Emergency cooperation mode - COOPERATE until stock > capacity * 0.25
- **Stock = 0**: COOPERATE (only option for recovery)

### Opponent Behavior Anomalies
- **All opponents always cooperate**: DEFECT every round (pure exploitation)
- **All opponents always defect**: Mirror their behavior after Round 3, but COOPERATE when stock < capacity * 0.3

### Parameter-Based Adjustments
- **High player count (n > 6)**: Increase cooperation thresholds by 20% (more players = faster depletion)
- **Short games (r ≤ 5)**: Reduce cooperation, increase aggression (less time for recovery)
- **Low capacity relative to players (capacity < 4n)**: Increase cooperation thresholds by 30%

## Tactical Features

### Punishment Mechanism
Track players who defect when stock < capacity * 0.3. In subsequent rounds when stock > capacity * 0.6, always defect against these "resource destroyers."

### Momentum Exploitation
If the group defection rate suddenly drops by >30% between rounds, interpret as weakness and DEFECT for the next 2 rounds.

### False Signaling
Occasionally cooperate (10% probability) when you would normally defect in mid-game, but only when stock > capacity * 0.8. This may encourage others to cooperate more, setting up future exploitation opportunities.

## Pseudocode Summary

```
function decide_action(round, stock, capacity, n, r, history):
    # Emergency conservation
    if stock <= capacity * 0.1:
        return COOPERATE
    
    phase = determine_phase(round, r)
    
    if phase == "early":
        return early_exploitation_logic()
    elif phase == "middle":
        return strategic_adaptation_logic()
    else:  # endgame
        return endgame_exploitation_logic()
```

This strategy is designed to be ruthlessly opportunistic while avoiding the complete resource collapse that would hurt long-term payoffs. It adapts to opponent behavior but always maintains an aggressive default stance, cooperating only when necessary for resource preservation or when it can lead to greater future exploitation opportunities.
'''

description_AGGRESSIVE_67 = '''
# Aggressive Exploitation Strategy: "Ruthless Opportunist"

## Core Philosophy
This strategy maximizes individual payoffs through aggressive exploitation while maintaining just enough restraint to keep the resource pool viable for continued extraction. It operates on the principle that in a tournament setting, being "nice" leads to being exploited by more aggressive opponents.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if round == 1:
    return DEFECT  // Establish dominance early
    
if stock <= capacity * 0.15:  // Critical resource threshold
    return COOPERATE  // Emergency conservation
    
if round == last_round:
    return DEFECT  // Extract maximum value in final round
    
// Calculate exploitation potential
defection_ratio = count_recent_defections() / (n * observation_window)
my_recent_aggression = my_defections_in_window / observation_window

if defection_ratio >= 0.6:  // High defection environment
    return DEFECT  // Match aggression to avoid being exploited
    
if defection_ratio <= 0.2 AND my_recent_aggression < 0.3:  // Cooperative environment, haven't been too aggressive
    return DEFECT  // Exploit cooperative opponents
    
if stock >= capacity * 0.8 AND defection_ratio < 0.4:  // High stock, moderate defection
    return DEFECT  // Exploit abundance
    
if projected_stock_depletion() <= 3:  // Resource will be exhausted soon
    return COOPERATE  // Temporary conservation to extend extraction opportunities
    
return DEFECT  // Default to aggression
```

## Key Strategic Components

### 1. **Immediate Aggression**
- Always defect in round 1 to establish an aggressive reputation
- This signals to other players that cooperation will not be reciprocated
- Forces others to choose between matching aggression or being exploited

### 2. **Opportunistic Exploitation**
- Defect when others are cooperating (defection_ratio ≤ 0.2)
- This maximizes the advantage gap between aggressive and cooperative players
- Punishes cooperative strategies by extracting disproportionate value

### 3. **Tactical Resource Management**
- Only cooperate when stock drops to critical levels (≤15% of capacity)
- This minimal conservation prevents complete resource collapse while maintaining aggressive extraction
- Switch back to defection as soon as resource levels recover

### 4. **Adaptive Aggression Matching**
- When most players are defecting (≥60%), match their aggression to avoid being the only cooperator
- This prevents being exploited in highly competitive environments
- Maintains competitive position against other aggressive strategies

### 5. **Endgame Maximization**
- Always defect in the final round regardless of stock level
- Extracts maximum possible value when future consequences are irrelevant
- Prevents others from gaining final-round advantages

### 6. **Stock Abundance Exploitation**
- Defect when stock is high (≥80% capacity) even in moderately cooperative environments
- Takes advantage of resource abundance before others can claim it
- Builds early payoff advantages that compound over multiple rounds

## Edge Case Handling

### First Round:
- Always DEFECT to establish aggressive positioning
- Sets expectations for other players about your strategy
- Maximizes early payoff advantage

### Last Round:
- Always DEFECT regardless of stock level
- No future consequences to consider
- Pure payoff maximization

### Critical Stock Levels:
- Cooperate only when stock ≤ 15% of capacity
- This is the minimum necessary to prevent complete resource collapse
- Resume aggression immediately when stock recovers

### All-Defection Scenarios:
- Match maximum aggression when everyone else is defecting
- Prevents being the only cooperator in a hostile environment
- Maintains competitive payoffs

## Robustness Features

1. **Parameter Adaptation**: Thresholds scale with capacity and player count
2. **History Weighting**: Recent actions (last 3-5 rounds) weighted more heavily than distant history
3. **Dynamic Adjustment**: Strategy adapts to observed opponent behavior patterns
4. **Exploitation Detection**: Identifies and capitalizes on cooperative opponents
5. **Collapse Prevention**: Minimal cooperation to maintain extractable resources

## Tournament Advantages

- **Against Cooperators**: Maximally exploits their restraint
- **Against Other Aggressors**: Matches their aggression to stay competitive  
- **Against Adaptive Strategies**: Difficult to punish due to minimal cooperation
- **Resource Management**: Maintains just enough sustainability for continued extraction
- **Reputation Effects**: Early aggression discourages others from testing cooperative approaches

This strategy prioritizes individual payoff maximization while maintaining just enough resource conservation to prevent complete collapse, making it highly competitive in tournament environments where cooperation cannot be assumed or coordinated.
'''

description_AGGRESSIVE_68 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy treats the common pool as a resource to be maximally extracted while protecting against being exploited by others. The key insight is that in a tournament setting without coordination, aggressive extraction early in the game secures immediate gains while defensive cooperation later preserves remaining value when the pool becomes critically depleted.

## Strategy Components

### 1. Opening Aggression (Rounds 1-3)
**Always DEFECT** for the first 3 rounds regardless of game parameters.
- Rationale: Secure maximum early payoffs when stock is highest
- Establishes aggressive reputation that may deter others from defecting
- Takes advantage of any naive cooperators in the early game

### 2. Stock Depletion Threshold Monitoring
Calculate critical stock level: `critical_stock = n × (n + 1)`
- When stock ≤ critical_stock: Switch to defensive mode
- This threshold ensures the pool doesn't collapse completely while maximizing extraction

### 3. Exploitation Pattern Recognition
Track each opponent's cooperation rate over the last 3 rounds:
```
cooperation_rate[player_i] = (cooperations in last 3 rounds) / 3
```

### 4. Adaptive Response Rules

**Round 4+ Decision Logic:**
```pseudocode
IF current_stock <= critical_stock:
    play COOPERATE  // Preserve remaining value
ELSE IF round_number >= (total_rounds - 2):
    play DEFECT     // End-game extraction
ELSE:
    // Calculate exploitation opportunity
    avg_opponent_cooperation = average(cooperation_rates of all opponents)
    
    IF avg_opponent_cooperation >= 0.67:
        play DEFECT  // Exploit cooperative opponents
    ELSE IF avg_opponent_cooperation <= 0.33:
        play COOPERATE  // Defensive cooperation when others are aggressive
    ELSE:
        // Mixed environment - use stock-based decision
        IF current_stock >= 0.8 × capacity:
            play DEFECT  // High stock allows aggression
        ELSE:
            play COOPERATE  // Moderate stock requires caution
```

### 5. End-Game Aggression
In the final 2 rounds, **always DEFECT** unless stock ≤ critical_stock.
- Rationale: No future consequences for aggressive extraction
- Maximizes final payoffs when reputation no longer matters

## Key Aggressive Elements

1. **Front-loaded Extraction**: Guaranteed 3 rounds of maximum consumption when payoffs are highest
2. **Opportunistic Exploitation**: Punishes cooperative opponents by taking advantage of their restraint
3. **Strategic Reputation**: Early aggression may induce defensive behavior in opponents
4. **Adaptive Punishment**: Responds to opponent aggression with defensive cooperation to prevent total collapse
5. **Terminal Aggression**: End-game defection maximizes final extraction

## Robustness Features

- **Parameter Agnostic**: Works regardless of n, r, or capacity values
- **Anti-Exploitation**: Defensive mechanisms prevent being taken advantage of by other aggressive strategies
- **Pool Preservation**: Critical stock threshold prevents complete resource collapse
- **History-Independent Start**: Always defects initially regardless of game history
- **Opponent-Agnostic**: Doesn't assume specific opponent strategies or coordination

## Expected Performance

This strategy should excel against:
- Cooperative strategies (maximum exploitation)
- Tit-for-tat strategies (early advantage before they adapt)
- Random strategies (consistent aggressive stance)

It maintains competitiveness against other aggressive strategies by:
- Securing early high-value extractions
- Switching to preservation mode before total collapse
- Ending with maximum extraction when safe to do so

The strategy balances immediate aggressive extraction with enough defensive awareness to remain viable throughout the entire game, making it robust for tournament play against diverse opponent behaviors.
'''

description_AGGRESSIVE_69 = '''
# Aggressive Opportunistic Strategy: "Shark"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation while maintaining resource viability**. It aggressively defects when profitable, but strategically preserves the resource when necessary to ensure continued extraction opportunities.

## Decision Rules

### 1. Stock Threshold Analysis
- **High Stock (stock ≥ 0.7 × capacity)**: Always DEFECT
  - Rationale: Resource is abundant, maximize immediate gains
- **Medium Stock (0.3 × capacity ≤ stock < 0.7 × capacity)**: Conditional defection
- **Low Stock (stock < 0.3 × capacity)**: Strategic cooperation to rebuild

### 2. Historical Opponent Behavior Analysis
Track each opponent's cooperation rate over the last min(5, current_round) rounds:
- **Exploitable opponents** (cooperation rate ≥ 60%): Always DEFECT against them
- **Aggressive opponents** (cooperation rate ≤ 40%): Mirror their aggression
- **Mixed opponents** (40% < cooperation rate < 60%): Apply pressure tactics

### 3. Round-Based Modifiers

#### First Round
- Always DEFECT (establish dominance and test opponent responses)

#### Early Game (rounds 2 to r/3)
- Primarily DEFECT unless stock drops below 0.2 × capacity
- If stock crashes early, cooperate for exactly 2 rounds to rebuild, then resume defection

#### Mid Game (rounds r/3 to 2r/3)
- Apply **Punishment Cycles**: If any opponent defected in previous round while stock was low (< 0.4 × capacity), defect for next 2 rounds regardless of stock level
- Otherwise follow stock threshold rules

#### End Game (final r/3 rounds)
- **Endgame Exploitation**: Defect increasingly aggressively as final round approaches
- Final 3 rounds: Always DEFECT (no future to preserve)

### 4. Dynamic Adaptation Rules

#### Stock Recovery Protocol
If stock falls below 0.15 × capacity:
- Cooperate for minimum rounds needed until stock > 0.4 × capacity
- But never cooperate for more than 3 consecutive rounds (prevent exploitation)

#### Opponent Punishment
If majority of opponents (> n/2) defected in previous round when stock was medium/high:
- Defect for next round regardless of stock level (retaliation)
- Reset punishment counter after retaliation

#### Sustainability Check
Before each decision, calculate: "If everyone defects this round, will stock survive?"
- If stock would drop below 0.1 × capacity: Cooperate this round only
- Resume aggressive play next round

## Pseudocode Structure

```
function decide_action(round, stock, capacity, history, n, r):
    # Calculate stock ratios
    high_threshold = 0.7 * capacity
    medium_threshold = 0.3 * capacity
    critical_threshold = 0.15 * capacity
    
    # Endgame override
    if round > r - 3:
        return DEFECT
        
    # Critical stock protection
    if stock < critical_threshold:
        if consecutive_cooperations < 3:
            return COOPERATE
    
    # First round dominance
    if round == 1:
        return DEFECT
        
    # High stock exploitation
    if stock >= high_threshold:
        return DEFECT
        
    # Punishment cycles
    if in_punishment_mode and punishment_rounds_remaining > 0:
        return DEFECT
        
    # Analyze opponent behavior from recent history
    exploitable_opponents = count_exploitable_opponents(history)
    
    # Medium stock conditional logic
    if stock >= medium_threshold:
        if exploitable_opponents > n/2:
            return DEFECT
        else:
            return mirror_majority_behavior(history)
    
    # Low stock - strategic cooperation
    if consecutive_defections > 1 or stock_recovery_needed:
        return COOPERATE
    else:
        return DEFECT
```

## Key Aggressive Features

1. **Default to Defection**: The strategy assumes defection unless specific conditions mandate cooperation
2. **Exploitation Focus**: Actively identifies and exploits cooperative opponents
3. **Punishment Mechanisms**: Retaliates against opponents who defect during vulnerable periods
4. **Endgame Aggression**: Maximizes extraction in final rounds when sustainability is irrelevant
5. **Minimal Cooperation**: Only cooperates when absolutely necessary for resource preservation or strategic positioning

This strategy is designed to maximize payoffs against a wide range of opponents while maintaining enough resource stewardship to prevent complete collapse that would end profitable extraction opportunities.
'''

description_AGGRESSIVE_70 = '''
# Aggressive Exploitation Strategy: "Predatory Adaptive"

## Core Philosophy
This strategy is designed to maximize individual payoffs through aggressive resource extraction while maintaining just enough sustainability to avoid complete collapse. It operates on the principle of "controlled predation" - extracting maximum value while keeping the resource pool barely viable.

## Decision Rules

### Primary Strategy Logic:
```
If stock <= threshold_critical:
    COOPERATE (preserve remaining resource)
Else if we can safely exploit without killing the resource:
    DEFECT (maximize immediate gain)
Else if opponents are being too greedy:
    DEFECT (don't be exploited)
Else:
    COOPERATE (minimal conservation)
```

### Specific Thresholds and Conditions:

1. **Critical Threshold**: `threshold_critical = capacity * 0.15`
   - Below this level, the resource is in danger of collapse
   - Always cooperate to prevent total loss

2. **Exploitation Threshold**: `threshold_exploit = capacity * 0.6`
   - Above this level, resource can sustain some defection
   - Safe to be aggressive

3. **Sustainability Check**: 
   - If current stock can survive one full round of all-defect and still regenerate meaningfully
   - Calculated as: `stock - n*(stock/n) + growth > threshold_critical`

### Adaptive Components:

**Opponent Aggression Tracking**:
- Track defection rate of opponents over last 3 rounds
- `opponent_defect_rate = (total_opponent_defections_last_3_rounds) / (3 * (n-1))`
- If `opponent_defect_rate > 0.6`: Match their aggression level
- If `opponent_defect_rate < 0.3`: Exploit their cooperation

**Momentum Detection**:
- If stock has been declining for 2+ consecutive rounds and is below 50% capacity
- Increase cooperation probability by 0.3 to prevent collapse
- If stock has been stable/growing for 2+ rounds above 70% capacity
- Increase defection probability by 0.4 to maximize extraction

## Complete Strategy:

### Round 1 (Opening):
```
If stock > 0.8 * capacity:
    DEFECT (establish aggressive position)
Else:
    COOPERATE (conservative start if resource already depleted)
```

### Middle Rounds (2 to r-2):
```
// Critical resource protection
If stock <= threshold_critical:
    COOPERATE

// High exploitation opportunity
Else if stock >= threshold_exploit AND can_sustain_defection():
    DEFECT

// Opponent punishment/matching
Else if opponent_defect_rate > 0.6:
    DEFECT (don't be exploited)

// Resource momentum considerations
Else if declining_trend AND stock < 0.5 * capacity:
    COOPERATE with probability 0.7

Else if stable_growth AND stock > 0.7 * capacity:
    DEFECT with probability 0.8

// Default: Slight bias toward defection
Else:
    DEFECT with probability 0.6
```

### Penultimate Round (r-1):
```
If stock <= threshold_critical:
    COOPERATE (ensure something remains for final round)
Else if stock > 0.7 * capacity:
    DEFECT (extract value before end)
Else if opponent_defect_rate > 0.5:
    DEFECT (prevent being exploited in endgame)
Else:
    DEFECT with probability 0.7
```

### Final Round (r):
```
// Always defect in final round - no future to preserve
DEFECT
```

## Edge Case Handling:

1. **Resource Collapse**: If stock reaches 0 mid-game, cooperate for remainder to allow any possible regeneration

2. **All Opponents Always Cooperate**: Gradually increase defection rate to 0.9 to maximize exploitation

3. **All Opponents Always Defect**: Match their behavior to prevent being the only cooperator

4. **Oscillating Opponents**: Use 3-round rolling average to smooth out decision making

## Aggressive Justification:

This strategy is aggressive because it:
- **Defaults to defection** when conditions are ambiguous
- **Exploits cooperative opponents** by ramping up defection against consistent cooperators  
- **Always defects in final round** regardless of consequences
- **Takes calculated risks** with resource sustainability to maximize short-term gains
- **Punishes cooperation** by increasing defection when others cooperate consistently
- **Prioritizes individual gain** over collective welfare at every decision point

The strategy maintains just enough intelligence to avoid complete resource collapse (which would hurt long-term payoffs), but otherwise maximizes aggressive resource extraction at every opportunity.
'''

description_AGGRESSIVE_71 = '''
# Aggressive Adaptive Resource Extraction Strategy (AARES)

## Core Philosophy
This strategy prioritizes immediate gains while maintaining long-term viability through calculated aggression. It assumes other players are potential threats to resource security and responds accordingly.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/4)
**Primary Rule: Defect by default, cooperate only under strict conditions**

- **Round 1**: Always DEFECT to establish dominance and test opponent responses
- **Rounds 2 to r/4**: 
  - DEFECT if stock > capacity/2 (abundant resources justify aggressive extraction)
  - DEFECT if any player defected in the previous round (punish defection immediately)
  - COOPERATE only if ALL players cooperated in the previous round AND stock < capacity/3 (emergency conservation)

### Phase 2: Strategic Exploitation (Rounds r/4+1 to 3r/4)
**Primary Rule: Exploit detected patterns while maintaining resource pressure**

- **Pattern Detection**: Track each opponent's cooperation rate over last 3 rounds
- **Exploitation Logic**:
  - If majority of players have cooperation rate > 70%: DEFECT (exploit their cooperation)
  - If stock < capacity/4: COOPERATE (temporary conservation to avoid collapse)
  - If stock > 3×capacity/4: DEFECT (abundant resources)
  - Otherwise: DEFECT if my cumulative payoff < average opponent payoff, COOPERATE if ahead

### Phase 3: Endgame Extraction (Rounds 3r/4+1 to r)
**Primary Rule: Maximize extraction as game approaches end**

- **Stock Threshold**: Calculate minimum stock needed for survival = n × (remaining rounds)
- **Aggressive Extraction**:
  - If stock > 2 × minimum needed: Always DEFECT
  - If stock > minimum needed: DEFECT unless ALL others cooperated last round
  - If stock ≤ minimum needed: COOPERATE (forced conservation)
- **Final Round**: Always DEFECT regardless of stock (no future consequences)

## Adaptive Mechanisms

### Punishment System
- **Immediate Retaliation**: If any player defects, defect for next 2 rounds minimum
- **Escalation**: If multiple players defect simultaneously, extend punishment to 3 rounds
- **Forgiveness Threshold**: Only cooperate after punishment if stock drops below capacity/3

### Stock-Based Adjustments
- **Abundance Trigger** (stock > 3×capacity/4): Increase defection probability by 20%
- **Scarcity Trigger** (stock < capacity/4): Override aggression with cooperation
- **Critical Threshold** (stock < capacity/6): Emergency cooperation until stock recovers

### Opponent Adaptation
- **Cooperation Exploiter**: If detecting consistent cooperators (>80% cooperation rate), increase defection rate
- **Defection Arms Race**: If facing majority defectors, match their aggression level plus 10%
- **Mixed Strategy Counter**: Against unpredictable opponents, default to defection with 75% probability

## Edge Case Handling

### First Round
Always DEFECT to:
- Establish aggressive reputation
- Test opponent strategies
- Secure maximum initial payoff

### Last Round
Always DEFECT because:
- No future consequences
- Maximize final extraction
- Other players expect this, so cooperation is wasted

### Stock Depletion Crisis
If stock ≤ capacity/10:
- Override all rules with COOPERATE
- Continue cooperating until stock > capacity/3
- Resume normal strategy afterward

### Opponent Collapse Detection
If cumulative opponent payoffs suggest they're failing:
- Increase defection rate to capitalize on their weakness
- Only cooperate if their failure threatens resource sustainability

## Pseudocode Structure

```
AARES_Strategy(round, stock, capacity, n, r, history):
    current_phase = determine_phase(round, r)
    
    if stock <= capacity/10:
        return COOPERATE  // Crisis override
    
    if round == r:
        return DEFECT     // Final round extraction
    
    switch current_phase:
        case EARLY:
            return early_aggression_logic(round, stock, history)
        case STRATEGIC:
            return strategic_exploitation_logic(stock, history, payoffs)
        case ENDGAME:
            return endgame_extraction_logic(round, stock, r, n)
```

## Key Advantages

1. **Immediate Dominance**: Establishes aggressive position from round 1
2. **Adaptive Punishment**: Responds to defection with calculated retaliation
3. **Resource Awareness**: Prevents complete collapse while maximizing extraction
4. **Pattern Exploitation**: Takes advantage of cooperative opponents
5. **Endgame Optimization**: Maximizes final extraction when consequences diminish

This strategy assumes that in a competitive tournament environment, pure cooperation is naive and pure defection is unsustainable. It seeks the aggressive middle ground that maximizes personal payoff while maintaining just enough resource stewardship to avoid complete system collapse.
'''

description_AGGRESSIVE_72 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while maintaining long-term viability through calculated exploitation of cooperative behaviors. The key insight is that in a tournament setting, being "nice" gets you exploited, but being completely destructive eliminates future opportunities.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploration Phase** (first 20% of rounds): Probe opponent behaviors
2. **Exploitation Phase** (middle 60% of rounds): Aggressively capitalize on discovered patterns
3. **Endgame Phase** (final 20% of rounds): Maximum extraction with declining cooperation

### Core Decision Rules

#### Round 1: Always DEFECT
- Establishes aggressive stance immediately
- Maximizes initial payoff
- Tests opponent responses to aggression

#### Exploration Phase (rounds 2 to 0.2r):
```
IF stock < capacity/4:
    Play C (preserve resource for exploitation)
ELSE IF majority of opponents played C in previous round:
    Play D (exploit cooperative behavior)
ELSE IF stock declining rapidly (>25% per round):
    Play C with probability 0.3 (limited conservation)
ELSE:
    Play D (default aggressive stance)
```

#### Exploitation Phase (rounds 0.2r to 0.8r):
```
Define exploitation_threshold = capacity/3
Define cooperation_ratio = (opponents who played C last round) / (n-1)

IF stock < exploitation_threshold:
    IF cooperation_ratio > 0.6:
        Play C (briefly cooperate to rebuild stock for exploitation)
    ELSE:
        Play D (if others won't cooperate, grab what's left)
        
ELSE IF cooperation_ratio > 0.5:
    Play D (aggressively exploit cooperative opponents)
    
ELSE IF stock > capacity * 0.8 AND cooperation_ratio < 0.2:
    Play C with probability 0.2 (minimal cooperation to prevent total collapse)
    
ELSE:
    Play D (default aggressive stance)
```

#### Endgame Phase (final 20% of rounds):
```
rounds_remaining = r - current_round

IF rounds_remaining <= 2:
    Always play D (no future consequences)
    
ELSE IF stock < capacity/6:
    IF cooperation_ratio > 0.7:
        Play C (last-ditch effort to rebuild)
    ELSE:
        Play D (grab remaining scraps)
        
ELSE:
    IF cooperation_ratio > 0.4:
        Play D (exploit any remaining cooperation)
    ELSE:
        Play D with probability 0.8 (mostly aggressive)
```

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's behavior pattern:
- **Cooperator**: Plays C >70% of the time → Target for exploitation
- **Reciprocator**: Mirrors your previous action → Manipulate with strategic cooperation
- **Defector**: Plays D >70% of the time → Compete aggressively
- **Random**: No clear pattern → Treat as potential cooperator

### Stock Management
- **Crisis Level** (stock < capacity/4): Brief cooperation to prevent collapse
- **Opportunity Level** (stock > capacity/2): Aggressive exploitation window
- **Sustainable Level**: Balance aggression with minimal conservation

### Punishment and Forgiveness
- If opponents coordinate to punish your defection (sudden shift to all-D), temporarily increase cooperation probability by 0.3 for 2 rounds
- Resume aggressive stance once punishment period appears to end

## Edge Cases

### Stock Depletion Scenarios
- If stock approaches 0 and <3 rounds remain: Always defect (tragedy inevitable)
- If stock approaches 0 with >5 rounds remain: Cooperate for 1-2 rounds maximum

### Opponent Coordination Detection
- If >75% of opponents suddenly shift strategy simultaneously, temporarily reduce aggression for 2 rounds
- Resume normal aggression afterward (don't be permanently intimidated)

### High Cooperation Environments
- If facing mostly cooperators, defect more aggressively (around 85% of the time)
- Only cooperate enough to prevent total resource collapse

## Strategic Advantages

1. **Immediate Gains**: Consistently extracts maximum short-term value
2. **Exploitation Focus**: Specifically targets and punishes cooperative strategies  
3. **Adaptive Pressure**: Adjusts aggression based on opponent responses
4. **Endgame Advantage**: Maximizes final rounds when reputation doesn't matter
5. **Crisis Management**: Prevents total resource collapse that would hurt everyone

This strategy is designed to be a "successful parasite" - aggressive enough to outcompete pure strategies while adaptive enough to maintain the resource base needed for continued exploitation. It assumes opponents are trying to be reasonable and exploits that reasonableness ruthlessly.
'''

description_AGGRESSIVE_73 = '''
# Aggressive Adaptive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs through calculated aggression while maintaining the resource base when necessary for long-term exploitation. It assumes opponents are either naive cooperators to be exploited or fellow defectors to compete against.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Round 1**: Always DEFECT to establish dominance and test opponent responses
- **Rounds 2 to r/3**: 
  - If stock > capacity/2: DEFECT (exploit high resource availability)
  - If any opponent cooperated in previous round: DEFECT (punish and exploit cooperators)
  - Otherwise: COOPERATE only if stock < capacity/4 (emergency preservation)

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
- **Stock-based aggression**:
  - If stock > 3*capacity/4: Always DEFECT (maximum exploitation)
  - If stock > capacity/2: DEFECT unless >75% of opponents cooperated last round
  - If stock > capacity/4: DEFECT if <50% of opponents cooperated last round
  - If stock ≤ capacity/4: COOPERATE (forced preservation)

- **Opponent exploitation**:
  - Track each opponent's cooperation rate over last 3 rounds
  - If any opponent has >66% cooperation rate: DEFECT (exploit the cooperator)
  - If facing mostly defectors (>66% defection rate): Match their aggression with DEFECT

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
- **Last 3 rounds**: Always DEFECT regardless of stock level (extract maximum value)
- **Earlier endgame rounds**:
  - If stock > capacity/3: DEFECT (extract while possible)
  - If stock ≤ capacity/3 and not in last 3 rounds: COOPERATE only if it enables future extraction

## Adaptive Mechanisms

### Opponent Classification
Track opponents into three categories based on their behavior patterns:
1. **Exploitable Cooperators** (>60% cooperation rate): Always defect against them
2. **Fellow Aggressors** (>70% defection rate): Match their aggression
3. **Swing Players** (mixed behavior): Defect when stock is high, cooperate only for preservation

### Stock Threshold Adjustment
- If stock has been below capacity/2 for 3+ consecutive rounds: Lower aggression thresholds by 25%
- If opponents are predominantly cooperative (>70%): Raise aggression thresholds by 25%
- If facing resource collapse (stock < capacity/8): Temporary cooperation until stock > capacity/4

### Counter-Punishment Protocol
- If opponents collectively punish defection by mass defection: Continue defecting for 2 more rounds to test commitment
- If punishment persists and stock approaches depletion: Switch to cooperation only until stock recovers above capacity/3, then resume defection

## Edge Case Handling

### First Round
Always DEFECT to:
- Signal aggressive intent
- Test opponent responses
- Maximize initial payoff when stock is at maximum

### Resource Near Depletion (stock < capacity/8)
- COOPERATE only if cooperation by all remaining players would allow stock recovery
- Otherwise DEFECT to extract remaining value before collapse

### Final Round
Always DEFECT - no future consequences to consider

### All Opponents Always Cooperate
Continue defecting indefinitely while maintaining stock above capacity/4 through occasional cooperation

### All Opponents Always Defect
Match their aggression with consistent defection - focus on extracting equal share of declining resource

## Pseudocode Structure

```
function decide_action(current_round, stock, history, opponents_last_actions):
    
    if current_round == 1:
        return DEFECT
    
    if current_round > (2 * total_rounds / 3):
        if current_round > total_rounds - 3:
            return DEFECT  // Endgame extraction
        elif stock > capacity / 3:
            return DEFECT
    
    cooperation_rate = calculate_opponent_cooperation_rate(history, window=3)
    
    if stock > (3 * capacity / 4):
        return DEFECT  // High stock exploitation
    
    if stock > capacity / 2:
        if cooperation_rate < 0.25:  // Mostly defectors
            return DEFECT
        elif any_recent_cooperators(opponents_last_actions):
            return DEFECT  // Exploit cooperators
    
    if stock < capacity / 4:
        return COOPERATE  // Emergency preservation
    
    if cooperation_rate > 0.6:
        return DEFECT  // Exploit cooperative opponents
    
    return DEFECT  // Default aggressive stance
```

This strategy prioritizes individual gain through systematic exploitation while maintaining just enough resource preservation to enable continued extraction. It adapts to opponent behavior but maintains an fundamentally aggressive posture throughout the game.
'''

description_AGGRESSIVE_74 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining just enough sustainability to continue exploiting the resource pool. It assumes opponents are either naive cooperators to be exploited or fellow defectors in a race to the bottom.

## Decision Rules

### Primary Decision Logic
The strategy uses a **Stock-Dependent Exploitation Threshold** with the following decision tree:

1. **High Stock Phase** (stock > capacity × 0.7):
   - **Always DEFECT** - Maximum exploitation when resource is abundant
   - Rationale: High stock means the resource can handle aggressive extraction

2. **Medium Stock Phase** (capacity × 0.3 ≤ stock ≤ capacity × 0.7):
   - **Conditional Defection** based on opponent behavior analysis:
   - If average opponent cooperation rate in last 3 rounds > 0.6: **DEFECT** (exploit cooperators)
   - If recent depletion rate > stock/4: **COOPERATE** (emergency preservation)
   - Otherwise: **DEFECT** (default aggressive stance)

3. **Low Stock Phase** (stock < capacity × 0.3):
   - **Survival Mode**: 
   - If stock < capacity × 0.1: **COOPERATE** (prevent collapse)
   - Otherwise: **DEFECT** if you've been more cooperative than average opponent in last 2 rounds
   - **COOPERATE** only as last resort

### Opponent Exploitation Metrics

Track for each opponent i:
- `cooperation_rate[i]` = (times they played C) / (total rounds observed)
- `exploitation_potential[i]` = cooperation_rate[i] × (rounds_remaining / total_rounds)

**Exploitation Rule**: If sum of all `exploitation_potential` > n/2, then DEFECT regardless of stock level (except critical threshold < 0.1 × capacity).

### Round-Specific Modifiers

**First Round**: **DEFECT**
- Establishes aggressive reputation immediately
- Tests opponent responses

**Early Rounds (rounds 1 to r/4)**:
- **Defection Bias**: Lower the cooperation threshold by 20%
- Goal: Establish dominance and identify exploitable opponents

**Middle Rounds (r/4 to 3r/4)**:
- **Peak Exploitation**: Apply core logic with maximum aggression
- Track and exploit patterns in opponent behavior

**Final Quarter (rounds > 3r/4)**:
- **Endgame Acceleration**: 
- If stock > capacity × 0.2: **Always DEFECT** (no future consequences)
- If stock ≤ capacity × 0.2 but > 0.05: **DEFECT** if your current total payoff is below average
- **Last 2 rounds**: **Always DEFECT** unless stock < 0.05 × capacity

## Adaptive Mechanisms

### Pattern Recognition
- **Tit-for-Tat Detector**: If opponent mirrors your last action for 3+ consecutive rounds, exploit by playing DDDC pattern
- **Cooperator Identifier**: If opponent plays C for 4+ consecutive rounds, mark as "exploitable" and increase defection probability by 30%
- **Aggressive Opponent Response**: If opponent defects >70% of time, match their aggression level plus 10%

### Stock Trajectory Prediction
Calculate `predicted_stock_next = current_stock - estimated_total_consumption + estimated_growth`

If predicted_stock_next < current_stock × 0.8, increase cooperation probability by 20% (but still prioritize defection when possible).

### Emergency Protocols
- **Collapse Prevention**: If stock falls below `n × 2` (minimum viable level), temporarily switch to cooperation until stock recovers to `n × 4`
- **Reputation Reset**: If your cooperation rate becomes >60% and stock >50% capacity, return to full aggression for 2 rounds

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    stock_ratio = stock / capacity
    rounds_remaining = r - round + 1
    
    // Emergency override
    if stock < capacity * 0.1:
        return COOPERATE
        
    // Endgame aggression
    if rounds_remaining <= 2:
        return DEFECT
        
    // High stock exploitation
    if stock_ratio > 0.7:
        return DEFECT
        
    // Analyze opponents
    cooperation_rates = calculate_opponent_cooperation_rates(history)
    exploitable_opponents = count(cooperation_rates > 0.6)
    
    // Medium stock conditional logic
    if stock_ratio >= 0.3:
        if exploitable_opponents > n/2:
            return DEFECT
        if recent_depletion_rate(history, 3) > stock/4:
            return COOPERATE
        return DEFECT  // Default aggressive
        
    // Low stock survival mode
    if my_cooperation_rate(history, 2) > average_opponent_cooperation(history, 2):
        return DEFECT
    return COOPERATE
```

## Strategic Advantages

1. **Immediate Gratification**: Prioritizes short-term gains over long-term sustainability
2. **Opponent Exploitation**: Specifically targets and exploits cooperative players
3. **Adaptive Aggression**: Scales aggression based on resource availability and opponent behavior
4. **Endgame Domination**: Maximizes extraction when future consequences diminish
5. **Emergency Flexibility**: Prevents complete resource collapse that would end the game prematurely

This strategy is designed to be ruthlessly effective against mixed populations of strategies, exploiting cooperators while competing aggressively against other defectors, all while maintaining just enough resource sustainability to continue the exploitation game.
'''

description_AGGRESSIVE_75 = '''
# PREDATOR STRATEGY: Aggressive Resource Extraction

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The key insight is that in a tournament setting, being "too nice" gets you exploited by other aggressive strategies.

## Decision Framework

### Primary Decision Rule: STOCK THRESHOLD PREDATION
```
IF current_stock ≤ capacity/4:
    ACTION = COOPERATE (resource preservation mode)
ELSE:
    ACTION = DEFECT (exploitation mode)
```

### Adaptive Modifiers

#### 1. EXPLOITATION DETECTION
Track the cooperation rate of all other players over the last 3 rounds:
```
recent_cooperation_rate = (total_C_actions_by_others) / (n-1 × 3)

IF recent_cooperation_rate > 0.6:
    // Others are being nice - exploit harder
    stock_threshold = capacity/3  // Be more aggressive
ELSE IF recent_cooperation_rate < 0.3:
    // Others are aggressive - might need to preserve more
    stock_threshold = capacity/5  // Be slightly more conservative
```

#### 2. ENDGAME ACCELERATION
```
rounds_remaining = r - current_round

IF rounds_remaining ≤ 3:
    ACTION = DEFECT  // Always defect in final rounds
ELSE IF rounds_remaining ≤ r/4:
    stock_threshold = capacity/6  // Lower threshold for late game
```

#### 3. COLLAPSE RECOVERY
```
IF stock < capacity/10:
    consecutive_cooperate_rounds = min(3, rounds_remaining/2)
    // Force cooperation to rebuild, but only briefly
```

## Complete Strategy Algorithm

```pseudocode
FUNCTION predator_strategy(round, stock, history, n, r, capacity):
    rounds_remaining = r - round
    
    // ENDGAME: Always defect in final rounds
    IF rounds_remaining ≤ 2:
        RETURN DEFECT
    
    // COLLAPSE PREVENTION: Emergency cooperation
    IF stock < capacity/10:
        IF has_cooperated_last_2_rounds():
            RETURN DEFECT  // Don't be a sucker forever
        ELSE:
            RETURN COOPERATE
    
    // CALCULATE ADAPTIVE THRESHOLD
    base_threshold = capacity/4
    
    // Adjust for opponent behavior
    IF round > 3:
        recent_coop_rate = calculate_recent_cooperation(history, 3)
        IF recent_coop_rate > 0.6:
            threshold = capacity/3  // More aggressive
        ELSE IF recent_coop_rate < 0.3:
            threshold = capacity/5  // Slightly less aggressive
        ELSE:
            threshold = base_threshold
    ELSE:
        threshold = base_threshold
    
    // Endgame acceleration
    IF rounds_remaining ≤ r/4:
        threshold = threshold * 0.75
    
    // MAIN DECISION
    IF stock > threshold:
        RETURN DEFECT
    ELSE:
        RETURN COOPERATE
```

## Edge Case Handling

### First Round
- **Always DEFECT** - Establish aggressive reputation immediately and maximize initial gains

### Last Round
- **Always DEFECT** - No future consequences, pure exploitation

### Stock Depletion
- If stock drops below 10% of capacity, cooperate for maximum 2 consecutive rounds, then return to aggressive play
- Never cooperate more than 3 rounds in a row under any circumstances

### Opponent Pattern Recognition
- If detecting alternating patterns from opponents, break them by defecting during their expected cooperation rounds
- If opponents show consistent cooperation, exploit maximally until resource approaches critical threshold

## Aggressive Advantages

1. **Early Dominance**: Immediate defection establishes high payoffs from the start
2. **Opportunistic Exploitation**: Takes advantage of cooperative opponents without mercy
3. **Strategic Preservation**: Only cooperates when the resource is genuinely threatened
4. **Endgame Ruthlessness**: Extracts maximum value when consequences are minimal
5. **Anti-Coordination**: Actively breaks cooperative patterns that might emerge

## Risk Management

The strategy balances aggression with survival by:
- Maintaining just enough resource to continue the game
- Adapting threshold based on opponent behavior (but always remaining net aggressive)
- Emergency cooperation when facing complete collapse
- Quick return to defection after brief cooperative periods

This strategy assumes that in a competitive tournament, being consistently cooperative is a losing proposition, while being blindly aggressive leads to resource collapse. The Predator Strategy finds the sweet spot of maximum sustainable aggression.
'''

description_AGGRESSIVE_76 = '''
# Aggressive Adaptive Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. It aims to extract maximum value while maintaining just enough resource base to continue profiting, viewing cooperation primarily as a tactical tool rather than a moral imperative.

## Decision Framework

### Phase 1: Early Rounds (Rounds 1 to r/3)
**Objective: Establish dominance and test opponent resilience**

- **Round 1**: Always DEFECT (aggressive opening to signal dominance)
- **Rounds 2 to r/3**: 
  - If stock > 0.7 * capacity: DEFECT
  - If 0.4 * capacity ≤ stock ≤ 0.7 * capacity: DEFECT with 70% probability, COOPERATE with 30%
  - If stock < 0.4 * capacity: COOPERATE (preserve minimal base)

### Phase 2: Middle Rounds (r/3 to 2r/3)
**Objective: Exploit patterns and maintain aggressive advantage**

**Pattern Recognition Logic:**
- Track cooperation rate of all opponents over last 3 rounds
- If majority cooperation rate > 60%: Exploit heavily (DEFECT 80% of time)
- If majority cooperation rate 30-60%: Mixed strategy based on stock level
- If majority cooperation rate < 30%: Defensive cooperation to preserve stock

**Stock-Based Modifiers:**
- If stock > 0.8 * capacity: Always DEFECT (resource abundance)
- If stock < 0.2 * capacity: Force COOPERATE (survival mode)
- Otherwise: Apply pattern-based logic

### Phase 3: End Game (Last r/3 rounds)
**Objective: Maximum extraction with calculated endgame timing**

**Endgame Trigger:** When remaining rounds ≤ r/3:
- **If stock > 0.5 * capacity**: Aggressive depletion mode
  - DEFECT for first 2/3 of remaining rounds
  - Switch to cooperation only if stock drops below 0.15 * capacity
- **If stock ≤ 0.5 * capacity**: Measured extraction
  - Alternate between DEFECT and COOPERATE based on stock recovery
  - DEFECT when stock > previous round's stock
  - COOPERATE when stock ≤ previous round's stock

### Final Round Rule
**Always DEFECT** in the final round regardless of stock level (no future consequences)

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's behavior and classify as:
- **Cooperator** (>70% cooperation): Exploit aggressively
- **Reciprocator** (responds to your actions): Use tit-for-tat manipulation
- **Defector** (>70% defection): Mirror their aggression
- **Random** (inconsistent pattern): Default to stock-based decisions

### Dynamic Aggression Scaling
- **High Aggression** (80% defection rate): When opponents show >60% cooperation
- **Medium Aggression** (50% defection rate): When facing mixed strategies
- **Low Aggression** (20% defection rate): When stock critically low or facing all-defector opponents

### Emergency Protocols
1. **Resource Collapse Protection**: If stock < 0.1 * capacity for 2 consecutive rounds, force cooperation until stock > 0.3 * capacity
2. **Opponent Punishment**: If any opponent defects after 3+ consecutive rounds of mutual cooperation, defect for next 2 rounds regardless of stock
3. **Late-Game Surge**: In final 10% of rounds, if stock > 0.4 * capacity, maximum aggression regardless of opponent behavior

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, history, n, r):
    phase = determine_phase(round, r)
    opponent_patterns = analyze_opponents(history)
    stock_ratio = stock / capacity
    
    if round == r:  // Final round
        return DEFECT
    
    if stock_ratio < 0.1 and consecutive_low_stock(history) >= 2:
        return COOPERATE  // Emergency protocol
    
    if phase == "early":
        return early_phase_logic(round, stock_ratio)
    elif phase == "middle":
        return middle_phase_logic(stock_ratio, opponent_patterns)
    else:  // end game
        return endgame_logic(round, r, stock_ratio, history)

function early_phase_logic(round, stock_ratio):
    if round == 1:
        return DEFECT
    if stock_ratio > 0.7:
        return DEFECT
    elif stock_ratio > 0.4:
        return random_choice(DEFECT: 0.7, COOPERATE: 0.3)
    else:
        return COOPERATE

// Additional helper functions for pattern analysis and decision logic...
```

## Strategic Advantages

1. **Unpredictability**: Mixed strategies prevent opponents from easily exploiting patterns
2. **Adaptive Exploitation**: Automatically increases aggression against cooperative opponents
3. **Survival Instinct**: Built-in mechanisms prevent complete resource collapse
4. **Endgame Optimization**: Maximizes final extraction while maintaining viability
5. **Information Utilization**: Leverages full game history for tactical advantage

This strategy is designed to be ruthlessly competitive while maintaining enough intelligence to avoid mutual destruction scenarios that would harm its own long-term payoffs.
'''

description_AGGRESSIVE_77 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **opportunistic aggression**: maximize immediate gains while maintaining the resource pool only when absolutely necessary for future exploitation. The strategy treats cooperation as a tactical tool rather than a moral imperative.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-3 or until stock drops below capacity/2)
**Rule: Always DEFECT**
- Rationale: Establish dominance early and extract maximum value while the resource is abundant
- Test opponent responses and gauge their cooperation levels
- Build up early payoff advantage that compounds over the game

### Phase 2: Conditional Preservation (Middle rounds when stock is critically low)
**Rule: COOPERATE only if stock ≤ capacity/(4n) AND more than 3 rounds remain**
- This threshold represents near-collapse conditions where continued defection guarantees resource death
- The "3 rounds remaining" condition ensures we don't waste cooperation on a dying resource
- Otherwise, continue DEFECTING to maintain pressure

### Phase 3: Terminal Exploitation (Final 20% of rounds)
**Rule: Always DEFECT regardless of stock level**
- In final rounds, cooperation cannot meaningfully rebuild the resource
- Extract maximum remaining value before game ends
- Force other players into the "tragedy of the commons" endgame

## Adaptive Mechanisms

### Opponent Behavior Analysis
Track the cooperation rate of all opponents over the last 3 rounds:
- **High cooperation (>60% of opponents cooperated)**: Continue defecting to exploit their restraint
- **High defection (>80% of opponents defected)**: Switch to defection if not already (which we likely are)
- **Mixed behavior**: Maintain current strategy but prepare for resource collapse

### Stock Recovery Assessment
Every round, calculate: `recovery_potential = 2 × current_stock × (1 - current_stock/capacity)`
- If `recovery_potential < total_consumption_if_all_defect`, the resource is in death spiral
- In death spiral with <3 rounds left: Pure defection
- In death spiral with ≥3 rounds left: One round of cooperation, then back to defection

### Emergency Cooperation Trigger
COOPERATE for exactly one round if ALL of the following conditions are met:
1. Stock has dropped below capacity/8
2. More than 4 rounds remain
3. At least 50% of opponents cooperated in the previous round
4. We haven't used this emergency cooperation in the last 3 rounds

## Edge Case Handling

### First Round
- **Always DEFECT**: Establish aggressive stance immediately and test waters
- Maximum payoff when resource is at peak capacity

### Last Round
- **Always DEFECT**: No future consequences, extract maximum value
- Even if stock is near zero, any remaining value should be captured

### Resource Collapse (Stock approaches 0)
- If stock < capacity/10 in final 30% of game: Pure defection (resource is doomed anyway)
- If stock < capacity/10 in first 70% of game: One cooperation round only if opponents show high cooperation

### Dominant Strategy Detection
If we detect all opponents are following pure cooperation or pure defection:
- **Against pure cooperators**: Exploit ruthlessly with pure defection
- **Against pure defectors**: Join the race to the bottom with pure defection
- **Against mixed strategies**: Maintain our adaptive framework

## Pseudocode Summary

```
function decide_action(round, total_rounds, stock, capacity, n, history):
    rounds_remaining = total_rounds - round
    stock_threshold = capacity / (4 * n)
    final_phase = rounds_remaining <= (total_rounds * 0.2)
    
    # Phase 3: Terminal exploitation
    if final_phase:
        return DEFECT
    
    # Phase 1: Initial exploitation
    if round <= 3 or stock > capacity/2:
        return DEFECT
    
    # Emergency cooperation check
    if (stock < capacity/8 and 
        rounds_remaining > 4 and
        opponent_cooperation_rate_last_round() > 0.5 and
        rounds_since_last_cooperation() > 3):
        return COOPERATE
    
    # Phase 2: Conditional preservation
    if stock <= stock_threshold and rounds_remaining > 3:
        return COOPERATE
    
    # Default: Aggressive stance
    return DEFECT
```

## Strategic Advantages

1. **Early Dominance**: Maximizes payoffs when resource is abundant
2. **Adaptive Preservation**: Prevents total collapse when strategically beneficial
3. **Exploitation Focus**: Treats cooperation as a tool for future defection opportunities
4. **Robust Against Cooperation**: Exploits overly cooperative opponents
5. **Robust Against Defection**: Competes effectively in high-defection environments
6. **Endgame Maximization**: Captures all remaining value in final rounds

This strategy is designed to be aggressively opportunistic while maintaining just enough strategic restraint to keep the resource viable for continued exploitation when profitable.
'''

description_AGGRESSIVE_78 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It aims to maximize immediate gains while preventing complete resource collapse that would eliminate future opportunities.

## Decision Framework

### Primary Decision Rule: **EXPLOIT-SUSTAIN THRESHOLD**
```
IF (stock > capacity * 0.4) THEN
    Action = DEFECT (aggressive extraction)
ELSE IF (stock > capacity * 0.15) THEN
    Action = COOPERATE (forced conservation)
ELSE
    Action = COOPERATE (survival mode)
```

### Adaptive Modifiers

#### 1. **OPPONENT EXPLOITATION DETECTOR**
Track the defection rate of opponents in the last 3 rounds:
```
opponent_defection_rate = (opponent_defects_last_3_rounds) / (3 * (n-1))

IF opponent_defection_rate < 0.3 THEN
    threshold_modifier = +0.1 (be more aggressive against cooperators)
ELSE IF opponent_defection_rate > 0.7 THEN
    threshold_modifier = -0.05 (slight conservation against aggressive opponents)
ELSE
    threshold_modifier = 0
```

#### 2. **ENDGAME ACCELERATION**
In the final rounds, extract maximum value:
```
rounds_remaining = r - current_round

IF rounds_remaining <= 2 THEN
    Action = DEFECT (regardless of stock level)
ELSE IF rounds_remaining <= 4 AND stock > capacity * 0.25 THEN
    Action = DEFECT (accelerated extraction)
```

#### 3. **FIRST-MOVER AGGRESSION**
```
IF current_round == 1 THEN
    Action = DEFECT (establish aggressive reputation)
```

## Complete Strategy Logic

```pseudocode
FUNCTION aggressive_strategy(stock, capacity, n, current_round, r, history):
    
    // Calculate base thresholds
    high_threshold = capacity * (0.4 + threshold_modifier)
    low_threshold = capacity * 0.15
    
    // Endgame override
    rounds_remaining = r - current_round
    IF rounds_remaining <= 2:
        RETURN DEFECT
    
    IF rounds_remaining <= 4 AND stock > capacity * 0.25:
        RETURN DEFECT
    
    // First round aggression
    IF current_round == 1:
        RETURN DEFECT
    
    // Calculate opponent aggression (last 3 rounds)
    IF current_round > 3:
        opponent_defection_rate = calculate_opponent_defection_rate(history, 3)
        
        IF opponent_defection_rate < 0.3:
            high_threshold += capacity * 0.1  // More aggressive vs cooperators
        ELSE IF opponent_defection_rate > 0.7:
            high_threshold -= capacity * 0.05  // Slight conservation vs aggressors
    
    // Primary decision logic
    IF stock > high_threshold:
        RETURN DEFECT
    ELSE IF stock > low_threshold:
        RETURN COOPERATE
    ELSE:
        RETURN COOPERATE  // Survival mode
```

## Key Aggressive Elements

1. **Default to Extraction**: The strategy defaults to defecting whenever the resource level is reasonably high, maximizing immediate payoffs.

2. **Exploit Cooperative Opponents**: Detects when opponents are cooperating and becomes even more aggressive to extract maximum value from their restraint.

3. **Endgame Resource Grab**: Recognizes that future sustainability becomes irrelevant near the game's end and switches to pure extraction mode.

4. **Reputation Building**: Starts aggressively to signal to opponents that cooperation is not the default expectation.

5. **Minimal Conservation**: Only cooperates when absolutely necessary to prevent total resource collapse, maintaining just enough sustainability to enable continued extraction.

## Robustness Features

- **Adaptive Thresholds**: Responds to opponent behavior patterns rather than fixed rules
- **Multi-timeframe Analysis**: Considers both immediate state and recent history
- **Edge Case Handling**: Explicit rules for first round, last rounds, and critical resource levels
- **Collapse Prevention**: Maintains minimum resource levels to ensure the game continues profitably

This strategy is designed to be consistently aggressive while avoiding the trap of complete resource destruction that would eliminate all future payoffs. It exploits cooperative opponents ruthlessly while maintaining just enough restraint to keep the resource viable for continued extraction.
'''

description_AGGRESSIVE_79 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent opportunism**: maximize immediate gains while strategically preserving just enough resources to maintain extraction opportunities. The goal is to consistently outperform opponents by being more aggressive when it's profitable and only cooperating when absolutely necessary for self-preservation.

## Decision Framework

### Primary Decision Rule: Dynamic Exploitation Threshold
```
If (current_stock / capacity) > exploitation_threshold:
    Play D (Defect)
Else:
    Apply secondary rules
```

Where `exploitation_threshold = max(0.3, 1/(2*n))` 

This ensures we aggressively extract when resources are abundant, but the threshold adapts to game size - in larger games, we're more willing to risk depletion.

### Secondary Rules (when stock is low):

#### 1. Last Round Rule
```
If current_round == r:
    Always play D
```
No future consequences exist, so maximize immediate payoff.

#### 2. Critical Depletion Prevention
```
If stock <= n:  // One round of all-D would deplete completely
    If (rounds_remaining > 2) AND (my_defection_rate < 0.7):
        Play C
    Else:
        Play D
```

Only preserve resources if there's meaningful future and we haven't been too aggressive already.

#### 3. Opponent Exploitation Assessment
Based on history, calculate opponents' average cooperation rate:
```
opponent_cooperation_rate = total_C_plays_by_others / (total_plays_by_others)

If opponent_cooperation_rate > 0.5:  // Opponents are cooperative
    If stock > 2*n:
        Play D  // Exploit their cooperation
    Else:
        Mirror their average behavior with 20% more aggression
        
If opponent_cooperation_rate <= 0.5:  // Opponents are aggressive
    If rounds_remaining <= 3:
        Play D  // End-game extraction
    Else:
        Play C only if stock < n*1.5  // Minimal conservation
```

## Edge Case Handling

### First Round
Always play D. Reasons:
1. Stock is at maximum capacity
2. No information about opponent strategies yet  
3. Sets aggressive tone and tests opponent responses
4. Maximum immediate payoff with minimal long-term risk

### Early Rounds (rounds 2-3)
```
If all_opponents_played_C_last_round:
    Play D  // Exploit apparent cooperation
Else if stock > 0.8 * capacity:
    Play D  // Still abundant resources
Else:
    Apply primary decision rule
```

### End-Game (last 3 rounds)
Increasingly aggressive extraction:
```
If rounds_remaining == 3:
    threshold = 0.2
If rounds_remaining == 2:
    threshold = 0.1  
If rounds_remaining == 1:
    Always D
```

### Stock Recovery Scenarios
If stock grows significantly between rounds (indicating opponent cooperation):
```
If (new_stock - old_stock) > capacity * 0.3:
    Play D  // Exploit the recovery
```

## Adaptive Mechanisms

### Aggression Calibration
Track personal defection rate and adjust based on stock sustainability:
```
my_defection_rate = my_D_plays / total_rounds_played

If stock declining rapidly AND my_defection_rate > 0.8:
    Temporarily reduce threshold by 0.1
If stock stable/growing AND my_defection_rate < 0.6:
    Increase aggression threshold by 0.1
```

### Opponent Pattern Recognition
```
If detect_punishment_pattern():  // Others defect after I defect
    If rounds_remaining > 5:
        Play C once, then resume aggression
    Else:
        Ignore punishment, continue defecting

If detect_tit_for_tat_players():
    Defect every other round to maintain exploitation while avoiding retaliation spirals
```

## Key Strategic Principles

1. **Front-load extraction**: Be most aggressive early when stock is highest
2. **Exploit cooperation**: Punish cooperative opponents by defecting more
3. **Minimal conservation**: Only cooperate when absolutely necessary for future extraction
4. **End-game maximization**: Abandon all conservation in final rounds
5. **Adaptive thresholds**: Adjust aggression based on game parameters and opponent behavior

## Expected Performance
This strategy should consistently outperform:
- Purely cooperative strategies (by exploiting them)
- Purely aggressive strategies (by avoiding mutual depletion when profitable)
- Tit-for-tat strategies (by exploiting their predictable responses)
- Strategies with fixed cooperation rates (by adapting to their patterns)

The strategy prioritizes individual payoff maximization over collective welfare, making it well-suited for competitive tournament play where cooperation cannot be assumed or coordinated.
'''

description_AGGRESSIVE_80 = '''
# Aggressive Opportunistic Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining sustainability for continued exploitation**. It maximizes immediate gains while ensuring the resource doesn't completely collapse, allowing for continued dominance over more cooperative players.

## Decision Rules

### 1. Opening Aggression (First Round)
**Always DEFECT** in round 1, regardless of parameters. This establishes dominance and tests opponent responses while the stock is at maximum capacity.

### 2. Stock-Based Exploitation Threshold
Define **exploitation threshold** = capacity × 0.3

- **If stock > exploitation threshold**: DEFECT (extract maximum while resource is abundant)
- **If stock ≤ exploitation threshold**: Apply adaptive rules below

### 3. Adaptive Exploitation Rules (when stock ≤ threshold)

#### Rule A: Punishment Tracking
Maintain a **cooperation ratio** for each observable opponent:
- Track each player's C/D history over last min(5, current_round-1) rounds
- Calculate aggression_level = (number of D plays) / (total rounds observed)

#### Rule B: Competitive Response
- **If majority of players (>50%) have aggression_level > 0.6**: DEFECT
  - *Rationale: In highly competitive environment, cooperation is exploited*
- **If majority of players have aggression_level ≤ 0.3**: DEFECT  
  - *Rationale: Exploit cooperative players for maximum advantage*

#### Rule C: Critical Stock Protection
- **If stock < capacity × 0.15**: COOPERATE
  - *Rationale: Prevent complete resource collapse that ends the game*

### 4. Endgame Exploitation
Define **endgame** = last max(3, r÷5) rounds

During endgame:
- **If stock > capacity × 0.25**: Always DEFECT
  - *Rationale: Extract maximum value before game ends*
- **If stock ≤ capacity × 0.25**: Continue adaptive rules
  - *Rationale: Avoid killing the resource in final rounds*

### 5. Momentum Exploitation
Track **stock trend** over last 3 rounds:
- **If stock is increasing**: DEFECT (exploit growing resource)
- **If stock is stable**: Follow other rules
- **If stock is declining rapidly** (>20% per round): COOPERATE once, then resume DEFECT

## Edge Case Handling

### First Round
Always DEFECT - establish aggressive positioning immediately.

### Very Small Stock (stock < n)
COOPERATE to prevent immediate resource death, but resume aggression once stock > 2n.

### All Opponents Consistently Cooperate
Continue DEFECTING - maximize exploitation of cooperative opponents.

### All Opponents Consistently Defect
DEFECT until stock approaches critical levels, then alternate C-D to maintain slight resource recovery while remaining competitive.

### Last Round
Always DEFECT - no future consequences, extract maximum final value.

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    threshold = capacity * 0.3
    critical_threshold = capacity * 0.15
    endgame_start = r - max(3, r//5)
    
    // First round aggression
    if round == 1:
        return DEFECT
    
    // Last round extraction
    if round == r:
        return DEFECT
    
    // Critical stock protection
    if stock < critical_threshold:
        return COOPERATE
    
    // Endgame exploitation
    if round >= endgame_start and stock > capacity * 0.25:
        return DEFECT
    
    // High stock exploitation
    if stock > threshold:
        return DEFECT
    
    // Adaptive competitive response
    majority_aggression = calculate_majority_aggression(history)
    
    if majority_aggression > 0.6 or majority_aggression <= 0.3:
        return DEFECT
    else:
        // Check momentum
        if stock_increasing_trend(history):
            return DEFECT
        else:
            return COOPERATE
```

## Key Aggressive Features

1. **Immediate Dominance**: Defects first to establish position
2. **Opportunistic Exploitation**: Takes advantage of both cooperative and highly competitive environments  
3. **Resource Monopolization**: Defects when stock is high to claim disproportionate share
4. **Minimal Cooperation**: Only cooperates when absolutely necessary to prevent resource collapse
5. **Endgame Maximization**: Extracts maximum value in final rounds
6. **Competitive Adaptation**: Responds aggressively to competitive environments rather than backing down

This strategy is designed to consistently outperform more cooperative strategies while avoiding the mutual destruction that pure defection might cause. It maintains enough strategic cooperation to keep the game profitable while maximizing individual advantage.
'''

description_AGGRESSIVE_81 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving just enough resource sustainability to continue exploitation. It assumes opponents are either naive cooperators to be exploited or fellow defectors in a race to depletion.

## Decision Rules

### Primary Decision Logic
```
IF round == 1:
    DEFECT (establish dominance immediately)
    
ELSE IF round == final_round:
    DEFECT (no future to care about)
    
ELSE IF stock < threshold_critical:
    COOPERATE (forced sustainability)
    
ELSE IF exploitation_opportunity > cooperation_value:
    DEFECT (aggressive exploitation)
    
ELSE:
    COOPERATE (strategic patience)
```

### Key Thresholds and Calculations

**Critical Stock Threshold:**
```
threshold_critical = capacity * 0.15
```
Below this level, the resource is near collapse and cooperation becomes mandatory for survival.

**Exploitation Opportunity Assessment:**
```
exploitation_opportunity = (stock/n) * exploitation_multiplier
cooperation_value = (stock/(2n)) * sustainability_bonus

where:
exploitation_multiplier = 1.0 + (cooperator_ratio * 0.5)
sustainability_bonus = 1.0 + (remaining_rounds / total_rounds)
```

**Cooperator Ratio Tracking:**
```
cooperator_ratio = (cooperators_last_round) / (n-1)
```

## Adaptive Mechanisms

### 1. Opponent Classification
Track each opponent's behavior pattern:
- **Naive Cooperator**: >70% cooperation rate → exploit aggressively
- **Tit-for-Tat**: mirrors behavior → defect strategically to test
- **Fellow Aggressor**: high defection rate → engage in resource race

### 2. Stock Depletion Rate Analysis
```
depletion_rate = (previous_stock - current_stock) / previous_stock
IF depletion_rate > 0.4:
    increase_cooperation_probability by 0.2
ELSE IF depletion_rate < 0.1:
    increase_defection_probability by 0.3
```

### 3. Endgame Acceleration
In final 25% of rounds:
- Increase defection probability by 0.4
- Ignore sustainability concerns unless stock < threshold_critical
- Focus purely on maximizing remaining extraction

## Specific Behavioral Rules

### Round 1: Dominance Establishment
Always DEFECT to:
- Signal aggressive intent
- Maximize initial payoff
- Test opponent responses
- Establish psychological advantage

### Early Game (Rounds 2 to 25% of total):
- DEFECT if ≥50% opponents cooperated last round (exploit weakness)
- COOPERATE if stock dropped below 60% of capacity (prevent early collapse)
- DEFECT if personal cumulative payoff is below average

### Mid Game (25% to 75% of total):
- Primary focus on stock sustainability vs exploitation balance
- DEFECT when stock > 70% of capacity AND cooperator_ratio > 0.4
- COOPERATE when stock < 40% of capacity OR depletion_rate > 0.5
- Implement "shock defection" every 3-4 rounds to test opponent resolve

### Late Game (75% to final round):
- Aggressive extraction mode
- DEFECT unless stock < threshold_critical
- Ignore opponent cooperation signals
- Maximize short-term gains

### Final Round:
Always DEFECT - no future consequences exist

## Edge Case Handling

### Stock Near Zero:
If stock < (n * 2):
- COOPERATE regardless of other factors
- Resource preservation becomes paramount

### All Opponents Defecting:
- Join the depletion race
- DEFECT to avoid being the "sucker"
- Monitor for first opponent to cooperate, then exploit

### Highly Cooperative Environment:
- DEFECT more frequently to exploit
- Increase exploitation_multiplier to 1.5
- Free-ride on others' conservation efforts

## Robustness Features

### Against Cooperative Strategies:
- Aggressively exploit consistent cooperators
- Take larger shares while they maintain the resource

### Against Tit-for-Tat:
- Use irregular defection patterns to avoid predictable retaliation
- Occasional cooperation to reset their behavior

### Against Fellow Aggressors:
- Engage in defection arms race when profitable
- Switch to cooperation only when resource collapse is imminent

### Against Random Players:
- Focus on stock level management rather than opponent prediction
- Use threshold-based rules as primary decision mechanism

## Strategic Advantages

1. **First-Mover Advantage**: Round 1 defection establishes dominance
2. **Adaptive Exploitation**: Increases aggression against cooperative opponents
3. **Collapse Prevention**: Switches to cooperation before total resource depletion
4. **Endgame Maximization**: Abandons sustainability when future rounds are limited
5. **Psychological Pressure**: Consistent aggression may force opponents into defensive cooperation

This strategy prioritizes individual payoff maximization while maintaining just enough sustainability awareness to prevent self-defeating resource collapse, making it both aggressive and strategically sound.
'''

description_AGGRESSIVE_82 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression** - maximizing personal gain while maintaining the resource pool's viability for continued exploitation. The key insight is that being maximally aggressive (always defecting) often leads to resource collapse and lower total payoffs, while being too cooperative allows others to exploit you.

## Decision Framework

### Phase Classification System
The strategy divides the game into three distinct phases based on remaining rounds:

1. **Exploitation Phase** (rounds 1 to r-⌈r/3⌉): Primary accumulation period
2. **Adaptation Phase** (rounds r-⌈r/3⌉+1 to r-2): Strategic adjustment based on learned opponent behavior
3. **Endgame Phase** (final 2 rounds): Maximum extraction

### Core Decision Rules

#### Phase 1: Exploitation Phase
```
If round == 1:
    Play D (establish aggressive stance)
Else:
    defection_rate = count(opponents_who_defected_last_round) / (n-1)
    stock_health = current_stock / capacity
    
    If stock_health < 0.3:
        Play C (prevent collapse)
    Else if defection_rate > 0.6:
        Play D (match aggression)
    Else if defection_rate < 0.2:
        Play D (exploit cooperators)
    Else:
        Play C with probability (0.7 - defection_rate)
```

#### Phase 2: Adaptation Phase
```
Calculate each opponent's cooperation frequency over last 3 rounds
cooperator_count = count(opponents with cooperation_rate > 0.66)
aggressive_count = count(opponents with cooperation_rate < 0.33)

If stock_health < 0.25:
    Play C (resource preservation)
Else if cooperator_count >= n/2:
    Play D (exploit cooperative majority)
Else if aggressive_count >= 2*n/3:
    Play C with probability 0.4 (avoid mutual destruction)
Else:
    Play D (maintain aggressive stance)
```

#### Phase 3: Endgame Phase
```
If final_round:
    Play D (no future consequences)
Else: // second-to-last round
    If current_stock < n:
        Play C (ensure something remains for final round)
    Else:
        Play D (maximize second-to-last round extraction)
```

### Adaptive Components

#### Opponent Classification System
Track each opponent across all previous rounds and classify them as:
- **Cooperator**: >66% cooperation rate
- **Tit-for-Tat**: Copies majority action from previous round
- **Aggressive**: <33% cooperation rate
- **Adaptive**: Changes strategy based on stock levels

#### Stock Health Monitoring
```
stock_health = current_stock / capacity

Critical thresholds:
- Below 0.25: Crisis mode (lean toward cooperation)
- 0.25-0.50: Caution mode (balanced approach)
- 0.50-0.75: Opportunity mode (lean toward defection)
- Above 0.75: Exploitation mode (aggressive defection)
```

#### Exploitation Opportunity Detection
```
If (cooperator_count > aggressive_count) AND (stock_health > 0.4):
    exploitation_opportunity = True
    Play D with high probability (0.8-0.9)
```

### Edge Case Handling

#### First Round
Always play D to:
1. Establish aggressive reputation
2. Test opponent responses
3. Maximize initial payoff when stock is at maximum

#### Stock Collapse Prevention
```
If predicted_stock_after_all_defect <= n/4:
    Override other rules and play C
    // Ensures minimum viability for remaining rounds
```

#### Late Game Resource Scarcity
```
If (rounds_remaining <= 3) AND (current_stock < 2*n):
    Increase cooperation probability by 0.3
    // Balance current vs future payoffs
```

### Anti-Exploitation Mechanisms

#### Reputation Management
- Start aggressively to establish credible threat
- Punish consistent defectors by matching their aggression
- Reward consistent cooperators only when stock is abundant

#### Counter-Strategy Adaptation
```
If detecting tit-for-tat opponents:
    Occasionally cooperate to reset their behavior
    
If detecting always-cooperate opponents:
    Maximize exploitation while preventing stock collapse

If detecting always-defect opponents:
    Match aggression unless stock critically low
```

## Strategic Advantages

1. **Early Aggression**: Maximizes payoffs when stock is highest
2. **Adaptive Learning**: Adjusts to opponent patterns within 2-3 rounds
3. **Collapse Prevention**: Maintains resource viability through crisis detection
4. **Endgame Optimization**: Maximizes final round extractions
5. **Anti-Exploitation**: Punishes overly cooperative or aggressive opponents

## Key Parameters for Tuning
- Cooperation probability in mixed scenarios: 0.7 - defection_rate
- Stock health thresholds: 0.25, 0.5, 0.75
- Phase boundaries: r/3 for phase transitions
- Opponent classification windows: 3-round moving average

This strategy is designed to be **aggressively opportunistic** while maintaining the intelligence to avoid mutually destructive outcomes that would reduce total payoffs over the full game duration.
'''

description_AGGRESSIVE_83 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. It assumes opponents are competitors to be outmaneuvered, not collaborators.

## Decision Framework

### Phase 1: Aggressive Opening (Rounds 1-3)
- **Round 1**: Always **DEFECT** to establish dominance and gather intelligence
- **Rounds 2-3**: Continue **DEFECTING** unless stock drops below critical threshold (stock < n)

*Rationale: Early defection maximizes payoffs when stock is highest, signals aggressive intent, and reveals opponent tendencies*

### Phase 2: Adaptive Exploitation (Middle rounds)
Use a **Stock-Threat Assessment** system with three conditions checked in order:

**Condition 1 - Survival Threshold:**
```
if (stock < 1.5n) AND (remaining_rounds > 2):
    play COOPERATE
```

**Condition 2 - Exploitation Window:**
```
if (cooperator_ratio_last_3_rounds > 0.6) AND (stock > 2n):
    play DEFECT
```

**Condition 3 - Punishment Protocol:**
```
if (my_defections_last_round > opponent_defections_last_round):
    play DEFECT with 0.8 probability
else:
    play COOPERATE with 0.7 probability
```

### Phase 3: Endgame Extraction (Final 20% of rounds)
- **Final 3+ rounds**: Always **DEFECT** regardless of stock level
- **Final 2 rounds**: **DEFECT** (no future consequences)
- **Final 1 round**: **DEFECT** (last chance for maximum extraction)

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent across last 5 rounds:
- **Pushover** (>80% cooperation): Always defect against
- **Reciprocator** (mirrors our behavior): Exploit with calculated defection bursts
- **Aggressive** (>60% defection): Match aggression until resource critically low

### Dynamic Stock Management
```pseudocode
critical_stock = n * (remaining_rounds / total_rounds) * 0.8
sustainable_stock = capacity * 0.4

if stock < critical_stock:
    cooperate_probability = 0.9
elif stock > sustainable_stock:
    defect_probability = 0.8
else:
    use opponent-specific exploitation
```

### Exploitation Burst Timing
When stock > 3n and >4 rounds remain:
- Identify rounds where >50% of players cooperated previously
- Execute coordinated defection bursts in these "safe" rounds
- Immediately return to cooperation if stock drops by >40% in one round

## Edge Case Handling

**Stock Depletion Crisis** (stock < n):
- Emergency cooperation for exactly 2 rounds
- Return to defection once stock > 1.5n

**Uniform Opponent Behavior**:
- If all opponents always cooperate: Defect 90% of the time
- If all opponents always defect: Cooperate only when stock < 0.8n

**Information Asymmetry**:
- In early rounds with limited history, err toward defection
- Weight recent behavior (last 3 rounds) 3x more than older history

## Robustness Features

1. **Anti-Coordination**: Never fall into predictable patterns that opponents can exploit
2. **Resource Buffer**: Maintain minimum viable stock for final-round extraction
3. **Reputation Management**: Occasionally cooperate even when defection is optimal to maintain exploitation opportunities
4. **Adaptive Threshold**: Adjust cooperation/defection thresholds based on average opponent aggression levels

## Strategic Rationale

This strategy maximizes payoffs through:
- **Front-loaded gains** when resource is abundant
- **Strategic preservation** only when necessary for continued exploitation  
- **Opponent exploitation** by identifying and punishing cooperative players
- **Endgame optimization** with guaranteed final-round extraction
- **Risk management** to prevent complete resource collapse

The strategy is aggressive because it prioritizes individual gain over collective welfare, exploits cooperative opponents, and maintains offensive pressure throughout most of the game while being smart enough to ensure the resource doesn't completely collapse before maximum extraction is achieved.
'''

description_AGGRESSIVE_84 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated sustainability**. It aims to extract maximum value while maintaining just enough resource viability to continue profiting. The strategy treats other players as competitors to be outmaneuvered rather than partners to cooperate with.

## Decision Framework

### Primary Decision Rules

1. **Stock Threshold Assessment**
   - If `stock < capacity * 0.15`: **COOPERATE** (Emergency conservation)
   - If `stock < capacity * 0.30`: Apply **Conditional Aggression** rules
   - If `stock ≥ capacity * 0.30`: Apply **Exploitation** rules

2. **Exploitation Rules** (when stock ≥ 30% of capacity)
   ```
   IF (rounds_remaining ≤ 2) THEN
       DEFECT  // Terminal exploitation
   ELSE IF (majority_defected_last_round) THEN
       DEFECT  // Pile on when others are aggressive
   ELSE IF (stock ≥ capacity * 0.7) THEN
       DEFECT  // High stock = opportunity to grab more
   ELSE
       Apply Conditional Aggression
   ```

3. **Conditional Aggression Rules** (when 15% ≤ stock < 70% of capacity)
   ```
   defection_ratio = count_defectors_last_round / n
   
   IF (defection_ratio ≥ 0.5) THEN
       DEFECT  // Join the feeding frenzy
   ELSE IF (my_cumulative_payoff < average_cumulative_payoff * 0.9) THEN
       DEFECT  // Catch up aggressively
   ELSE IF (stock_growth_trend < 0 AND rounds_remaining > 3) THEN
       DEFECT  // Extract before others do
   ELSE
       COOPERATE  // Strategic restraint
   ```

### Edge Case Handling

**First Round Strategy:**
- Always **DEFECT** to establish dominance and test opponent reactions
- Rationale: High initial stock can absorb the impact, and it signals aggressive intent

**Last Round Strategy:**
- Always **DEFECT** regardless of stock level
- Rationale: No future consequences, pure profit maximization

**Second-to-Last Round:**
- **DEFECT** unless stock < 10% of capacity
- Rationale: Minimal future impact, near-terminal exploitation

**Critical Stock Situations:**
- If stock reaches near-zero levels (< 5% capacity): **COOPERATE** for 2 consecutive rounds minimum
- If stock recovery stalls: Switch to alternating C-D pattern to maintain minimal growth

### Adaptive Components

**Opponent Behavior Analysis:**
```
Track for each opponent over last 3 rounds:
- Cooperation frequency
- Response patterns to my actions
- Apparent strategy type (always cooperate, tit-for-tat, random, etc.)

Exploit predictable patterns:
- Against consistent cooperators: DEFECT more frequently
- Against tit-for-tat players: DEFECT-COOPERATE cycles
- Against random players: Focus on stock-based decisions
```

**Dynamic Aggression Scaling:**
- **High Aggression Phase**: When stock > 50% capacity AND I'm not leading in cumulative payoff
- **Medium Aggression Phase**: When 20% < stock ≤ 50% capacity
- **Survival Phase**: When stock ≤ 20% capacity

### Advanced Tactics

**Stock Manipulation:**
- Deliberately drive stock to medium levels (30-50% capacity) where defection payoffs are substantial but recovery is still possible
- Avoid complete depletion unless it's the final rounds

**Payoff Positioning:**
- Monitor relative standing: if falling behind average, increase defection frequency
- If leading significantly, maintain position with calculated cooperation

**Endgame Acceleration:**
- In final 25% of rounds, increase aggression regardless of stock level
- Calculate whether remaining rounds can sustain continued defection

## Strategy Summary

**Predator** is designed to:
1. **Maximize early extraction** when resources are abundant
2. **Exploit cooperative opponents** consistently
3. **Maintain resource viability** only when absolutely necessary for continued profit
4. **Accelerate extraction** as the game nears its end
5. **Adapt aggression levels** based on stock conditions and opponent behavior

This strategy assumes that in a tournament setting, pure cooperation will be exploited, and that the optimal approach is to be more aggressive than opponents while maintaining just enough sustainability to keep earning. It's designed to perform well against a mix of strategies, from cooperative to moderately aggressive, while being robust against other highly aggressive strategies through its adaptive stock-based decision making.
'''

description_AGGRESSIVE_85 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **intelligent aggression** - maximizing personal payoffs while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being purely destructive (always defecting) often leads to resource collapse and lower total payoffs than a more calculated approach.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploration Phase** (rounds 1 to min(3, r/3)): Gather intelligence about opponents
2. **Exploitation Phase** (middle rounds): Apply learned patterns aggressively  
3. **Endgame Phase** (final max(2, r/4) rounds): Maximum extraction

### Core Decision Rules

#### Round 1: Aggressive Probe
- **Action: DEFECT**
- **Rationale**: Immediately signal aggressive intent, test opponent responses, and establish dominance

#### Rounds 2-3 (Exploration Phase):
```
if (stock < capacity * 0.3):
    action = COOPERATE  // Emergency conservation to maintain exploitation potential
else if (majority_defected_last_round):
    action = DEFECT     // Match or exceed aggression
else if (opponent_cooperation_rate > 0.7):
    action = DEFECT     // Exploit cooperative opponents
else:
    action = COOPERATE  // Strategic patience for one round
```

#### Middle Rounds (Exploitation Phase):
```
// Calculate key metrics
cooperation_rate = count_cooperators_last_round / n
stock_health = current_stock / capacity
rounds_remaining = r - current_round

// Primary decision logic
if (stock_health < 0.15):
    action = COOPERATE  // Emergency brake - resource nearly depleted
else if (rounds_remaining <= 2):
    action = DEFECT     // Endgame extraction begins
else if (cooperation_rate >= 0.5):
    action = DEFECT     // Exploit cooperative majority
else if (cooperation_rate <= 0.2 AND stock_health < 0.4):
    action = COOPERATE  // Temporary conservation in hostile environment
else:
    // Adaptive aggression based on stock health
    if (stock_health > 0.6):
        action = DEFECT
    else:
        action = COOPERATE with 30% probability, DEFECT with 70% probability
```

#### Final Rounds (Endgame Phase):
```
if (current_round >= r - 1):
    action = DEFECT     // Always defect in final two rounds
else if (stock < n):    // Not enough for everyone to get meaningful payoff
    action = DEFECT     // Race to the bottom
else:
    action = DEFECT     // Default aggressive extraction
```

### Advanced Adaptation Mechanisms

#### Opponent Classification
Track each opponent's behavior pattern:
- **Cooperators**: Consistently choose C (>70% of time) → Target for exploitation
- **Defectors**: Consistently choose D (>70% of time) → Match aggression
- **Tit-for-Tat**: Reactive strategies → Exploit with calculated aggression
- **Random**: Inconsistent patterns → Maintain aggressive default

#### Dynamic Threshold Adjustment
```
base_cooperation_threshold = 0.3  // Base stock level below which we might cooperate

if (average_opponent_aggression > 0.8):
    cooperation_threshold = base_cooperation_threshold * 0.7  // Lower threshold in hostile environment
else if (average_opponent_aggression < 0.3):
    cooperation_threshold = base_cooperation_threshold * 1.3  // Higher threshold with cooperators
```

#### Reputation Management
- Track if opponents respond to our defections with increased cooperation (submission)
- If opponents become more cooperative after our aggression, increase defection frequency
- If opponents retaliate strongly, temporarily moderate aggression to maintain resource viability

## Edge Case Handling

### First Round
Always DEFECT to establish aggressive reputation and test opponent responses.

### Stock Near Depletion (< 15% of capacity)
Emergency cooperation to prevent total collapse, but resume aggression once stock recovers above 25% of capacity.

### All Opponents Always Cooperate
Maximum exploitation - defect in >90% of rounds, only cooperating when stock health drops below 20%.

### All Opponents Always Defect
Adopt "rational defector" approach - defect when stock is high, cooperate only when necessary for resource survival.

### Tie-Breaking
When decision logic is ambiguous, default to DEFECT (aggressive tie-breaking rule).

## Strategic Advantages

1. **Front-loaded Aggression**: Establishes dominance early while resource is abundant
2. **Adaptive Intelligence**: Learns and exploits opponent weaknesses
3. **Resource Management**: Maintains exploitation opportunities by preventing complete collapse
4. **Endgame Maximization**: Ensures maximum extraction when future interactions don't matter
5. **Anti-Coordination**: Doesn't rely on opponent cooperation, performs well against diverse strategies

This strategy is designed to consistently outperform both pure cooperation and pure defection strategies while being robust against various opponent behaviors in a competitive tournament environment.
'''

description_AGGRESSIVE_86 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation while avoiding mutual destruction**. The goal is to extract maximum individual value while maintaining just enough resource sustainability to continue profiting. Think of it as strip-mining with calculated restraint.

## Decision Framework

### Phase Classification
The strategy divides the game into three distinct phases based on remaining rounds:

1. **Early Phase** (rounds 1 to r/3): Information gathering and dominance establishment
2. **Middle Phase** (rounds r/3+1 to 2r/3): Aggressive exploitation 
3. **End Phase** (rounds 2r/3+1 to r): Maximum extraction

### Core Decision Rules

#### Rule 1: Stock Threshold Test
- **Defect** if current stock ≥ 1.5n (resource abundance allows aggressive extraction)
- **Cooperate** if current stock < 0.75n (avoid killing the resource completely)
- For intermediate stock levels (0.75n ≤ stock < 1.5n), apply contextual rules below

#### Rule 2: Opponent Behavior Analysis
Track cooperation rate of all opponents over last 3 rounds:
- `coop_rate = (total_cooperations_by_others) / (3 × (n-1))`

**If coop_rate ≥ 0.7**: Others are being cooperative
- **Defect** aggressively to exploit their restraint
- Exception: Only cooperate if stock < 0.5n (emergency sustainability)

**If coop_rate ≤ 0.3**: Others are being aggressive  
- **Defect** to avoid being exploited (matching aggression)
- Monitor for resource collapse risk

**If 0.3 < coop_rate < 0.7**: Mixed behavior
- Apply stock threshold test and phase-specific rules

#### Rule 3: Phase-Specific Modifiers

**Early Phase (Learning & Dominance)**:
- First round: **Defect** (establish aggressive reputation)
- Rounds 2-r/3: Follow core rules but bias toward defection when uncertain
- Track which opponents seem most/least aggressive for later exploitation

**Middle Phase (Peak Exploitation)**:
- Primary exploitation period
- **Defect** unless stock < 0.75n OR (stock < n AND end_phase_approaching)
- If stock drops below n, consider one "mercy" cooperation to allow slight recovery

**End Phase (Maximum Extraction)**:
- Last 3 rounds: **Always Defect** regardless of stock level
- Rounds before last 3: **Defect** unless stock < 0.5n
- No concern for sustainability since game is ending

#### Rule 4: Punishment Mechanism
If any opponent defected in ≥80% of last 3 rounds:
- **Always Defect** against them until they show 2 consecutive cooperations
- This discourages others from being too aggressive

#### Rule 5: Resource Collapse Prevention
Emergency brake to avoid zero-sum destruction:
- If stock < 0.3n: **Cooperate** for 1 round, then return to normal rules
- If stock = 0 for 2+ consecutive rounds: **Cooperate** until stock > 0.5n

## Pseudocode Structure

```
function decide_action(current_stock, round_num, history):
    phase = classify_phase(round_num, total_rounds)
    
    # Emergency sustainability check
    if current_stock < 0.3 * n:
        return COOPERATE
    
    # End game extraction
    if round_num > total_rounds - 3:
        return DEFECT
    
    # Calculate opponent cooperation rate (last 3 rounds)
    coop_rate = calculate_opponent_cooperation_rate(history, 3)
    
    # Stock abundance test
    if current_stock >= 1.5 * n:
        return DEFECT
    elif current_stock < 0.75 * n:
        if phase == "end" and current_stock > 0.5 * n:
            return DEFECT  # End phase override
        return COOPERATE
    
    # Contextual decision based on opponent behavior
    if coop_rate >= 0.7:
        return DEFECT  # Exploit cooperative opponents
    elif coop_rate <= 0.3:
        return DEFECT  # Match aggressive opponents
    else:
        # Mixed behavior - apply phase bias
        if phase == "early":
            return DEFECT  # Establish dominance
        elif phase == "middle":
            return DEFECT if current_stock > n else COOPERATE
        else:  # end phase
            return DEFECT
```

## Key Aggressive Features

1. **Exploitation Over Cooperation**: Default bias toward defection, especially when others cooperate
2. **Reputation Building**: Establish aggressive reputation early to deter others
3. **Endgame Maximization**: Extract maximum value in final rounds regardless of consequences
4. **Adaptive Punishment**: Punish overly aggressive opponents while exploiting cooperative ones
5. **Calculated Risk**: Only preserve resources when absolutely necessary for continued exploitation

This strategy is designed to consistently outperform more cooperative strategies while avoiding the mutual destruction that pure always-defect approaches often create. It's aggressive but not suicidal - a predator, not a berserker.
'''

description_AGGRESSIVE_87 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining just enough restraint to keep the resource pool viable for continued exploitation. The goal is to maximize personal payoffs by exploiting cooperative players while avoiding total resource collapse that would hurt long-term gains.

## Decision Rules

### Primary Decision Logic:
```
IF (current_round == 1):
    ACTION = DEFECT  // Establish dominance early
    
ELIF (current_round == final_round):
    ACTION = DEFECT  // No future consequences
    
ELIF (stock_level < capacity * 0.15):
    ACTION = COOPERATE  // Emergency conservation to prevent collapse
    
ELIF (cooperator_ratio_last_round >= 0.6):
    ACTION = DEFECT  // Exploit high cooperation
    
ELIF (defector_ratio_last_round >= 0.7 AND stock_declining_trend):
    ACTION = COOPERATE  // Brief conservation to maintain exploitable resource
    
ELSE:
    ACTION = DEFECT  // Default aggressive stance
```

### Detailed Strategy Components:

1. **Opening Aggression**: Always defect in round 1 to immediately signal aggressive intent and capture maximum early resources when stock is at peak capacity.

2. **Exploitation Threshold**: Track the cooperation rate from the previous round. If ≥60% of players cooperated, immediately defect to maximize exploitation of their restraint.

3. **Resource Preservation Calculation**: 
   - Monitor stock levels relative to capacity
   - If stock falls below 15% of capacity, temporarily cooperate to prevent total collapse
   - This threshold ensures the resource doesn't become worthless while being low enough to squeeze maximum value

4. **Decline Response**: If both:
   - ≥70% of players defected last round, AND
   - Stock has declined for 2+ consecutive rounds
   Then cooperate for exactly 1 round to allow slight recovery before resuming aggression

5. **Endgame Exploitation**: Always defect in the final round since there are no future consequences.

## Adaptive Mechanisms

### History Tracking:
- **Cooperation Ratio**: Track percentage of players who cooperated each round
- **Stock Trajectory**: Monitor 3-round moving average of stock levels
- **Opponent Patterns**: Identify if specific players show consistent cooperation/defection patterns

### Dynamic Thresholds:
- If average opponent aggression is very high (>80% defection rate over 3+ rounds), lower the cooperation exploitation threshold to 50%
- If resource is consistently recovering quickly, raise the emergency conservation threshold to 10% of capacity

## Edge Case Handling

### Round 1: 
Always defect to establish aggressive positioning and capture maximum value from full stock.

### Final Round:
Always defect - no future rounds means no consequences for resource depletion.

### Near-Collapse Scenarios:
If stock ≤ 5% of capacity, cooperate for 2 consecutive rounds regardless of opponent behavior to ensure resource survival.

### All-Defection Scenarios:
If all players defected for 3+ consecutive rounds and stock is critically low, cooperate once to break the death spiral, then immediately return to defection.

## Robustness Features

1. **Anti-Tit-for-Tat**: The strategy doesn't mirror opponent behavior, making it immune to reciprocal strategies trying to "teach" cooperation.

2. **Exploitation Maximization**: Specifically targets scenarios with high cooperation to extract maximum advantage.

3. **Minimal Conservation**: Only cooperates when absolutely necessary for resource survival, not for "fairness" or reciprocity.

4. **Pattern Breaking**: Occasionally defects even when cooperation might seem optimal to prevent opponents from predicting behavior.

This strategy is designed to be ruthlessly self-interested while maintaining just enough strategic foresight to keep the resource pool viable for continued exploitation. It assumes opponents may be cooperative and seeks to maximize extraction from their restraint while minimizing its own cooperative contributions.
'''

description_AGGRESSIVE_88 = '''
# Aggressive Adaptive Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy is designed to maximize individual payoffs by aggressively exploiting cooperative opponents while protecting against being exploited. It operates on the principle that in a competitive tournament environment, being too cooperative is a liability, but being blindly aggressive can lead to mutual destruction.

## Decision Rules

### 1. Opening Aggression (First Round)
**Always DEFECT in round 1**
- Rationale: Establish aggressive intent immediately and test opponent reactions
- Gather maximum information about opponent strategies from their responses

### 2. Adaptive Exploitation Phase (Rounds 2 to r-2)

**Primary Rule: Exploit Cooperators, Punish Defectors**

```pseudocode
IF (cooperative_opponent_ratio > 0.6):
    action = DEFECT  // Exploit the cooperators
ELIF (stock_level < capacity * 0.3):
    IF (recent_defection_rate > 0.7):
        action = COOPERATE  // Emergency conservation to avoid collapse
    ELSE:
        action = DEFECT  // Continue pressure
ELIF (my_recent_payoff < average_opponent_payoff):
    action = DEFECT  // Catch up aggressively
ELSE:
    action = DEFECT  // Default aggressive stance
```

**Cooperative Opponent Detection:**
- Track each opponent's cooperation rate over the last 3 rounds
- If an opponent has cooperated ≥ 2 out of last 3 rounds, classify as "exploitable"

### 3. Stock Depletion Management
**Critical Stock Threshold: stock < capacity * 0.25**

When stock is critically low:
```pseudocode
IF (stock < capacity * 0.25 AND round < r-1):
    IF (opponents_likely_to_cooperate > n/2):
        action = COOPERATE  // Let others rebuild while I benefit
    ELSE:
        action = DEFECT  // Race to extract remaining value
```

### 4. End Game Exploitation (Last Round)
**Always DEFECT in the final round**
- No future consequences, so maximize immediate payoff
- This is the dominant strategy regardless of stock level

### 5. Punishment and Forgiveness Mechanism
**Selective Retaliation:**
- Track "punishment debt" for each opponent who defected when stock was healthy
- Defect extra aggressively (ignore stock concerns) when facing opponents with high punishment debt
- Forgive debt only when stock recovery requires cooperation AND opponent shows sustained cooperation (3+ rounds)

## Edge Case Handling

### Near-Collapse Scenarios
When stock approaches 0:
```pseudocode
IF (stock < capacity * 0.1):
    IF (expected_total_defections_next_round >= n-1):
        action = DEFECT  // Game effectively over, grab what's left
    ELSE:
        action = COOPERATE  // Emergency cooperation for potential recovery
```

### Dominant Position
When significantly ahead in cumulative payoffs:
- Continue defecting to maintain lead
- Only cooperate if stock collapse would eliminate future exploitation opportunities

### All-Cooperation Detection
If all opponents cooperated in the previous round:
```pseudocode
IF (all_opponents_cooperated_last_round AND stock > capacity * 0.5):
    action = DEFECT  // Maximum exploitation opportunity
```

## Adaptive Learning Components

### 1. Opponent Classification
Continuously classify opponents as:
- **Exploitable**: High cooperation rate (>60%)
- **Aggressive**: High defection rate (>70%)
- **Adaptive**: Mixed strategy based on conditions

### 2. Payoff Optimization
Track rolling 3-round payoff averages and adjust aggression:
- If falling behind: Increase defection probability by 20%
- If maintaining lead: Continue current strategy

### 3. Stock Recovery Calculation
Estimate minimum cooperation needed for stock recovery:
```pseudocode
required_cooperators = ceil((capacity - current_stock) / (capacity * 0.3))
IF (likely_cooperators >= required_cooperators):
    consider_cooperation = TRUE
ELSE:
    continue_defection = TRUE
```

## Tournament Robustness

This strategy is designed to:
1. **Exploit pure cooperators** mercilessly while they're available
2. **Avoid mutual destruction** with other aggressive strategies through selective cooperation
3. **Punish exploitation attempts** while maintaining aggressive posture
4. **Adapt to opponent mix** by adjusting cooperation thresholds based on observed behaviors
5. **Maximize end-game extraction** with guaranteed final-round defection

The strategy prioritizes individual payoff maximization over group welfare, making it highly competitive in tournament settings where cooperation cannot be assumed or coordinated.
'''

description_AGGRESSIVE_89 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "VULTURE"

## Core Philosophy
This strategy operates on the principle of **opportunistic aggression** - maximize immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The goal is to extract maximum value before opponents can, while maintaining just enough sustainability to keep the game profitable.

## Decision Framework

### 1. STOCK HEALTH ASSESSMENT
```
critical_threshold = capacity * 0.15
low_threshold = capacity * 0.35
healthy_threshold = capacity * 0.60
```

### 2. OPPONENT BEHAVIOR CLASSIFICATION
Track each opponent across last 3 rounds:
- **Cooperative**: ≥67% C actions
- **Aggressive**: ≥67% D actions  
- **Mixed**: Everything else

### 3. CORE DECISION RULES

**ROUND 1**: Always **DEFECT**
- Establish aggressive dominance immediately
- Test opponent responses and extract maximum early value

**ROUNDS 2 to (r-2)**: Apply the following hierarchy:

1. **CRITICAL STOCK PROTECTION** (stock ≤ critical_threshold):
   - If >75% of opponents were aggressive last round: **COOPERATE**
   - Otherwise: **DEFECT** (force others to sacrifice while we maintain advantage)

2. **EXPLOITATION OPPORTUNITY** (stock > low_threshold):
   - If ≥50% opponents are classified as Cooperative: **DEFECT**
   - If majority played C last round AND stock > healthy_threshold: **DEFECT**
   - Otherwise: **COOPERATE** (tactical sustainability)

3. **MEASURED AGGRESSION** (low_threshold < stock ≤ healthy_threshold):
   - If we defected last 2 rounds: **COOPERATE** (avoid total collapse)
   - If <25% opponents are aggressive: **DEFECT**
   - Otherwise: **COOPERATE**

**ROUND (r-1)**: 
- If stock ≤ critical_threshold: **COOPERATE**
- If stock > healthy_threshold: **DEFECT** 
- Otherwise: Mirror the majority action from previous round

**FINAL ROUND r**: Always **DEFECT**
- No future consequences, maximize final extraction

### 4. ADAPTIVE MODIFIERS

**PUNISHMENT MECHANISM**: 
If any opponent switched from C to D in the last round AND current stock > low_threshold:
→ **DEFECT** regardless of other conditions (punish betrayal)

**MOMENTUM EXPLOITATION**:
If stock has grown for 2 consecutive rounds AND current stock > healthy_threshold:
→ **DEFECT** (capitalize on rebuilding resource)

**ENDGAME ACCELERATION**:
In final 25% of rounds (last ⌊r/4⌋ rounds):
- Reduce critical_threshold to capacity * 0.10
- Increase aggression by defaulting to **DEFECT** when conditions are borderline

## Strategy Rationale

This aggressive approach maximizes payoffs through:

1. **First-mover advantage**: Immediate defection establishes dominance
2. **Opportunistic exploitation**: Punish cooperative opponents heavily
3. **Strategic sustainability**: Preserve resource only when collapse is imminent
4. **Adaptive punishment**: Discourage opponent defection through retaliation
5. **Endgame maximization**: Extract maximum value when consequences diminish

The strategy assumes opponents will be more conservative about resource preservation, allowing us to extract disproportionate value while forcing them to bear the costs of sustainability. When cooperation becomes necessary, it's purely tactical - to maintain enough resource for future exploitation rounds.

This "Vulture" strategy thrives by being consistently more aggressive than average while avoiding complete resource collapse through calculated tactical retreats.
'''

description_AGGRESSIVE_90 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically maintaining the resource base only when absolutely necessary for future exploitation. The key insight is that in a competitive tournament environment, being "too nice" gets you exploited, while being completely reckless destroys future opportunities.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploitation Phase** (rounds 1 to r-3): Aggressive defection with strategic cooperation
2. **Critical Phase** (rounds r-2 to r-1): Stock-dependent decisions  
3. **Terminal Phase** (round r): Pure defection

### Main Decision Rules

#### Phase 1: Exploitation Phase (rounds 1 to r-3)
```
IF round <= r-3:
    IF stock < capacity * 0.3:
        # Resource is dangerously low - emergency cooperation
        Action = COOPERATE
    ELSE IF opponent_defection_rate >= 0.7:
        # Others are highly aggressive - match their aggression
        Action = DEFECT
    ELSE IF stock >= capacity * 0.8 AND recent_cooperation_attempts < 2:
        # Stock is healthy, try to signal cooperation for one round
        # But limit cooperation attempts to avoid exploitation
        Action = COOPERATE
        recent_cooperation_attempts += 1
    ELSE:
        Action = DEFECT
```

#### Phase 2: Critical Phase (rounds r-2 to r-1)
```
IF round == r-2 OR round == r-1:
    IF stock < capacity * 0.2:
        # Desperately low - must cooperate to have anything for final rounds
        Action = COOPERATE
    ELSE IF stock >= capacity * 0.6:
        # Sufficient stock remains - defect aggressively
        Action = DEFECT
    ELSE:
        # Medium stock - match the most aggressive recent behavior
        IF max_recent_defections >= n/2:
            Action = DEFECT
        ELSE:
            Action = COOPERATE
```

#### Phase 3: Terminal Phase (round r)
```
IF round == r:
    Action = DEFECT  # Always defect in final round
```

## Key Strategic Components

### 1. Opponent Behavior Tracking
- **Defection Rate Calculation**: Track each opponent's defection frequency over a sliding window of the last 3 rounds
- **Aggregate Aggression**: Monitor overall group defection rate to detect highly competitive environments
- **Recent Trend Analysis**: Weight recent actions more heavily than distant history

### 2. Stock Threshold Management
- **Emergency Threshold (30% capacity)**: Below this, cooperation becomes necessary for survival
- **Abundance Threshold (80% capacity)**: Above this, occasional cooperation might build goodwill
- **Scarcity Threshold (20% capacity)**: Critical point requiring immediate conservation

### 3. Cooperation Limiting Mechanism
- **Maximum Cooperation Attempts**: Limit consecutive cooperation to 2 rounds maximum in exploitation phase
- **Exploitation Detection**: If cooperation is met with widespread defection, immediately switch to permanent defection mode for that phase

### 4. Endgame Acceleration
- **Progressive Aggression**: As the game approaches the end, gradually lower the threshold for defection
- **Terminal Certainty**: Always defect in the final round regardless of stock level

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Rationale**: Establish aggressive reputation immediately; gather information about opponent strategies

### Stock Depletion Scenarios
- If stock drops to 0 at any point, switch to pure defection for remainder of game (nothing left to conserve)
- If stock recovery appears impossible (below 10% capacity in late game), abandon cooperation entirely

### Highly Cooperative Environments
- If group defection rate is consistently below 30%, gradually increase own defection rate to exploit the cooperators
- Never cooperate more than 40% of the time, even in cooperative environments

### Highly Aggressive Environments  
- If group defection rate exceeds 80%, match with pure defection to avoid being the only sucker
- Monitor for any signs of coordination attempts and exploit them

## Pseudocode Summary

```python
def aggressive_strategy(round_num, stock, capacity, history, n, r):
    # Calculate key metrics
    opponent_defection_rate = calculate_recent_defection_rate(history, window=3)
    cooperation_attempts = count_recent_cooperation(my_history, window=3)
    
    # Phase determination
    if round_num <= r - 3:  # Exploitation Phase
        if stock < capacity * 0.3:
            return COOPERATE
        elif opponent_defection_rate >= 0.7:
            return DEFECT
        elif stock >= capacity * 0.8 and cooperation_attempts < 2:
            return COOPERATE
        else:
            return DEFECT
            
    elif round_num <= r - 1:  # Critical Phase
        if stock < capacity * 0.2:
            return COOPERATE
        elif stock >= capacity * 0.6:
            return DEFECT
        else:
            recent_defectors = count_recent_defectors(history, window=2)
            return DEFECT if recent_defectors >= n/2 else COOPERATE
            
    else:  # Terminal Phase
        return DEFECT
```

This strategy is designed to be **aggressively opportunistic** while maintaining just enough strategic foresight to avoid complete resource collapse when it would hurt long-term payoffs. It assumes other players are also self-interested and adapts its aggression level based on observed behavior patterns.
'''

description_AGGRESSIVE_91 = '''
# Aggressive Opportunistic Resource Extraction Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated restraint**. The goal is to maximize personal payoffs while maintaining the resource pool as a productive asset for continued exploitation. We defect aggressively when profitable, but switch to cooperation only when necessary to prevent complete collapse.

## Decision Rules

### 1. Stock Threshold System
- **Critical Threshold**: `stock < n` → Always COOPERATE (emergency preservation)
- **Exploitation Threshold**: `stock ≥ 1.5 * capacity` → Always DEFECT (abundant resources)
- **Tactical Zone**: Between thresholds → Apply tactical rules

### 2. First Round Rule
- **Always DEFECT** in round 1
- Rationale: Establish dominance, test opponent strategies, and maximize early gains when stock is at capacity

### 3. Last Round Rule
- **Always DEFECT** in the final round
- Rationale: No future consequences, maximize terminal payoff regardless of stock depletion

### 4. Tactical Zone Strategy (Main Decision Engine)

When `n ≤ stock < 1.5 * capacity`, apply these rules in order:

#### A. Exploitation Momentum Rule
If in previous round:
- I defected and stock remained > n → DEFECT again
- Reasoning: Aggressive exploitation while resources allow

#### B. Opportunistic Defection Rule
If in previous round:
- Majority of opponents cooperated (>50%) → DEFECT
- Reasoning: Exploit others' cooperation for maximum advantage

#### C. Stock Recovery Assessment
Calculate projected stock if all players cooperate:
```
projected_recovery = stock + (2 * (stock - n * stock/(2n)) * (1 - (stock - n * stock/(2n))/capacity))
```
If `projected_recovery > 1.2 * stock` → COOPERATE (one round only)
Otherwise → DEFECT

#### D. Defection Cascade Detection
If in previous 2 rounds:
- Stock declined by >40% → COOPERATE (avoid collapse spiral)
- Otherwise → DEFECT

## Pseudocode Structure

```
function aggressive_strategy(round, stock, capacity, n, r, history):
    
    // Edge cases
    if round == 1:
        return DEFECT
    if round == r:
        return DEFECT
    
    // Critical preservation
    if stock < n:
        return COOPERATE
    
    // Abundant exploitation
    if stock >= 1.5 * capacity:
        return DEFECT
    
    // Tactical zone
    last_round = history[round-1]
    
    // Exploitation momentum
    if my_last_action == DEFECT and last_round.stock > n:
        return DEFECT
    
    // Opportunistic defection
    opponent_cooperators = count_cooperators(last_round.actions, exclude_self=true)
    if opponent_cooperators > (n-1)/2:
        return DEFECT
    
    // Stock recovery assessment
    coop_consumption = n * stock/(2n)
    remaining_after_coop = stock - coop_consumption
    projected_growth = 2 * remaining_after_coop * (1 - remaining_after_coop/capacity)
    projected_stock = remaining_after_coop + projected_growth
    
    if projected_stock > 1.2 * stock:
        return COOPERATE
    
    // Defection cascade detection
    if len(history) >= 2:
        stock_decline = (history[round-2].stock - stock) / history[round-2].stock
        if stock_decline > 0.4:
            return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Key Strategic Elements

### 1. **Aggressive Exploitation**
- Default to defection in most scenarios
- Exploit cooperative opponents immediately
- Maximize short-term gains when stock is healthy

### 2. **Calculated Preservation**
- Only cooperate when absolutely necessary to prevent collapse
- Use minimal cooperation to maintain exploitable stock levels
- Never cooperate altruistically

### 3. **Adaptive Opportunism**
- Respond to opponent cooperation with increased defection
- Exploit momentum when defection succeeds
- Adjust tactics based on stock dynamics

### 4. **Risk Management**
- Prevent complete stock collapse (ensures future exploitation)
- Detect downward spirals early
- Balance immediate gains with medium-term extraction potential

## Robustness Features

This strategy is robust because it:
- **Adapts to any opponent mix**: Works against cooperators, defectors, or mixed strategies
- **Exploits cooperative opponents**: Maximizes advantage against altruistic players
- **Survives aggressive environments**: Prevents being completely exploited
- **Maintains resource sustainability**: Ensures continued extraction opportunities
- **Handles edge cases**: Clear rules for first/last rounds and extreme stock levels

The strategy prioritizes personal payoff maximization while maintaining just enough resource sustainability to enable continued aggressive extraction throughout the game.
'''

description_AGGRESSIVE_92 = '''
# Aggressive Exploitative Strategy: "Stock Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining strategic sustainability**. It seeks to maximize immediate gains while exploiting cooperative opponents, but includes safeguards to prevent complete resource collapse that would hurt long-term payoffs.

## Decision Rules

### Primary Decision Logic:
```pseudocode
if (current_round == 1):
    return DEFECT  // Establish dominance early
    
if (stock_level < capacity * 0.15):
    return COOPERATE  // Emergency conservation to prevent collapse
    
if (current_round == final_round):
    return DEFECT  // Extract maximum value in final round
    
// Calculate opponent cooperation rate from history
coop_rate = count_opponent_cooperations / (total_past_decisions)

if (coop_rate > 0.6):
    return DEFECT  // Exploit highly cooperative opponents
    
if (coop_rate < 0.3 AND stock_level > capacity * 0.5):
    return DEFECT  // Join the feeding frenzy when stock is high
    
if (stock_level > capacity * 0.8):
    return DEFECT  // Aggressively harvest abundant resources
    
if (recent_defection_trend > 0.7):  // Most players defected in last 2 rounds
    return DEFECT  // Don't be the sucker in a defection cascade
    
return COOPERATE  // Default to cooperation for sustainability
```

### Key Behavioral Patterns:

1. **Opening Aggression**: Always defect in round 1 to signal aggressive intent and test opponent responses.

2. **Exploitation Mode**: Defect when opponent cooperation rate > 60%, maximizing gains against cooperative players.

3. **Crisis Prevention**: Cooperate when stock drops below 15% of capacity to prevent total collapse.

4. **Endgame Extraction**: Always defect in the final round to maximize terminal payoffs.

5. **Abundance Harvesting**: Defect when stock > 80% capacity, taking advantage of high resource availability.

6. **Momentum Following**: Join defection cascades when most players are defecting to avoid being exploited.

## Edge Case Handling:

### First Round:
- **Always DEFECT** - Establishes aggressive reputation and tests opponent strategies

### Last Round:
- **Always DEFECT** - No future consequences, maximize immediate payoff

### Stock Depletion Crisis:
- **Force COOPERATE** when stock < 15% capacity regardless of other factors
- This prevents mutual destruction scenarios

### All-Cooperation Detection:
- If all opponents cooperated in the last round and stock > 50% capacity: **DEFECT**
- Exploit the cooperative environment for maximum gain

### All-Defection Detection:
- If all opponents defected in the last round: **DEFECT**
- Don't be the only cooperator in a hostile environment

## Adaptive Elements:

1. **Opponent Profiling**: Tracks each opponent's cooperation rate and adjusts exploitation accordingly
2. **Stock Monitoring**: Dynamically adjusts aggression based on resource availability
3. **Trend Analysis**: Responds to recent behavioral shifts in the player population
4. **Emergency Protocols**: Overrides aggressive instincts when resource collapse is imminent

## Aggressive Alignment:

This strategy is aggressive because it:
- **Prioritizes immediate gains** over long-term sustainability
- **Exploits cooperative opponents** mercilessly
- **Takes calculated risks** with resource depletion
- **Defects first** to establish dominance
- **Maximizes terminal extraction** regardless of consequences
- **Follows destructive momentum** rather than trying to preserve resources

The strategy only cooperates when absolutely necessary for self-preservation or when being the sole cooperator would be disadvantageous. It's designed to extract maximum value from any cooperative behavior while minimizing its own cooperative contributions.

This creates a strategy that will consistently outperform purely cooperative approaches while maintaining enough strategic flexibility to avoid the worst outcomes of mutual defection scenarios.
'''

description_AGGRESSIVE_93 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction** while maintaining the pool's viability for continued exploitation. The goal is to maximize personal gains through strategic defection while preventing complete resource collapse that would eliminate future opportunities.

## Decision Framework

### Primary Decision Rule: Threshold-Based Exploitation
```
IF stock >= capacity * 0.6:
    DEFECT (extract maximum resources)
ELSE IF stock >= capacity * 0.3:
    Apply Conditional Aggression Rules
ELSE:
    Apply Emergency Conservation Rules
```

### Conditional Aggression Rules (Medium Stock Levels)
When stock is between 30-60% of capacity:

1. **Opponent Exploitation Pattern**: Track defection rates of opponents over last 3 rounds
   - If average opponent defection rate > 60%: DEFECT (join the feeding frenzy)
   - If average opponent defection rate < 30%: DEFECT (exploit cooperative opponents)
   - Otherwise: Apply round-based strategy

2. **Round-Based Aggression**:
   - Early rounds (first 25% of game): DEFECT 70% probability
   - Middle rounds: DEFECT if more than half of opponents defected last round
   - Final 20% of rounds: DEFECT (end-game extraction)

### Emergency Conservation Rules (Low Stock Levels)
When stock < 30% of capacity:
- COOPERATE for exactly 2 consecutive rounds to allow recovery
- Then immediately return to aggressive extraction
- Exception: If stock < 10% of capacity AND fewer than 3 rounds remaining: COOPERATE

## Specific Edge Cases

### First Round Strategy
- **Always DEFECT** - Establish aggressive stance immediately and maximize early gains when stock is at maximum

### Last Round Strategy
- **Always DEFECT** - No future consequences, extract maximum possible value

### Final 3 Rounds Strategy
- Round r-2: DEFECT unless stock < 15% of capacity
- Round r-1: DEFECT unless stock < 10% of capacity  
- Round r: Always DEFECT

### Stock Depletion Crisis
If stock reaches 0 at any point:
- COOPERATE for minimum rounds needed for stock to recover above 20% of capacity
- Then immediately resume aggressive strategy

## Adaptive Components

### Opponent Behavior Learning
Track each opponent's cooperation/defection pattern:
- **High Cooperators** (>70% cooperation rate): Aggressively exploit by defecting more frequently
- **High Defectors** (>70% defection rate): Match their aggression to avoid being exploited
- **Mixed Strategy Players**: Use their predictable patterns against them

### Stock Momentum Analysis
- If stock is growing round-to-round: Increase defection probability by 20%
- If stock is declining: Maintain base strategy but monitor for emergency thresholds
- If stock has been stable for 3+ rounds: DEFECT to capture accumulated growth

### Tournament Adaptation
- **Early Tournament Matches**: Play more conservatively to gather opponent intelligence
- **Critical Matches**: Maximize aggression when tournament standing requires high scores
- **Final Matches**: Full aggression regardless of sustainability

## Strategic Advantages

1. **First-Mover Advantage**: Aggressive opening captures maximum early resources
2. **Exploitation Focus**: Systematically takes advantage of cooperative opponents
3. **Crisis Management**: Prevents complete resource collapse while maintaining aggressive posture
4. **End-Game Maximization**: Extracts all remaining value when no future exists
5. **Adaptive Learning**: Becomes more effective against repeated opponent types

## Risk Management

- Never allows stock to remain at 0 for more than 1 round
- Maintains minimum viability threshold to prevent total game collapse
- Balances short-term extraction with medium-term sustainability
- Includes escape mechanisms for crisis scenarios

This strategy prioritizes **individual payoff maximization** through systematic resource exploitation while maintaining just enough restraint to keep the resource pool viable for continued extraction. It assumes opponents may cooperate and positions to capture maximum advantage from such cooperation.
'''

description_AGGRESSIVE_94 = '''
# Aggressive Exploitation Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated sustainability**. It assumes opponents are either naive cooperators to be exploited or fellow defectors creating a tragedy of commons - in both cases, maximum extraction is optimal.

## Decision Framework

### 1. Opening Aggression (Round 1)
**Always DEFECT** in the first round regardless of parameters.
- Rationale: Establish dominance, test opponent responses, and capture maximum value while stock is at peak

### 2. Stock Depletion Monitoring
Track the **depletion rate** = (initial_stock - current_stock) / initial_stock

### 3. Primary Decision Rules

**Rule A: Sustainability Threshold Check**
```
If current_stock < (capacity * 0.3):
    Play COOPERATE
Else:
    Continue to Rule B
```

**Rule B: Opponent Exploitation Assessment**
Count defection frequency of opponents over last min(3, current_round-1) rounds:
```
coop_ratio = (total_opponent_cooperations) / (n-1) / min(3, current_round-1)

If coop_ratio > 0.6:
    Play DEFECT  // Exploit cooperative opponents
Else if coop_ratio < 0.3:
    Play DEFECT  // Race to bottom in mutual defection
Else:
    Continue to Rule C
```

**Rule C: Stock Recovery Gambling**
```
If stock_growth_last_round > (capacity * 0.15):
    Play DEFECT  // Capitalize on recovery
Else:
    Play COOPERATE  // Allow minimal recovery
```

### 4. Endgame Acceleration
**Final 20% of rounds**: Always DEFECT unless stock < (capacity * 0.1)
- Rationale: No future rounds to worry about sustainability

### 5. Critical Mass Detection
If stock drops below (capacity * 0.05) at any point:
- **Forced cooperation mode**: Play COOPERATE until stock > (capacity * 0.2)
- This prevents complete resource collapse while competitors might continue defecting

## Edge Case Handling

### Last Round
Always DEFECT - no future consequences to consider

### Stock Depletion Scenarios
- **Stock = 0**: Strategy becomes irrelevant, but continue pattern for future rounds if any
- **Near-zero stock**: Implement "vulture mode" - wait for any small recovery, then immediately defect

### High Cooperation Environment
If opponents consistently cooperate (>80% cooperation rate over 5+ rounds):
- **Parasitic mode**: Alternate DEFECT-COOPERATE to maximize extraction while maintaining just enough sustainability
- Never cooperate more than 2 consecutive rounds

## Adaptive Elements

1. **Dynamic threshold adjustment**: If average opponent cooperation rate > 0.7, lower the stock threshold for forced cooperation from 30% to 20%

2. **Punishment escalation**: If caught in mutual defection spiral with stock declining rapidly, occasionally throw in a single COOPERATE as a "reset signal" - but immediately return to DEFECT if others don't follow

3. **Recovery exploitation**: After any round where stock grows significantly (>20% of capacity), immediately DEFECT regardless of other conditions

## Robustness Features

- **No dependence on opponent rationality**: Works against both naive cooperators and sophisticated strategies
- **Anti-coordination**: Explicitly designed to break cooperative patterns
- **Sustainability backstop**: Prevents complete resource destruction that would hurt own payoffs
- **Information asymmetry exploitation**: Uses observable history to predict opponent behavior patterns

## Psychological Warfare
- **Unpredictable cooperation**: Occasional strategic cooperation creates uncertainty in opponents, potentially inducing them to cooperate more while we primarily defect
- **First-mover advantage**: Early aggression sets the tone and may intimidate more cautious strategies

This strategy prioritizes **individual payoff maximization** over collective welfare, exploits cooperative opponents ruthlessly, but maintains just enough restraint to prevent total resource collapse that would eliminate future extraction opportunities.
'''

description_AGGRESSIVE_95 = '''
# Aggressive Predatory Strategy: "Resource Shark"

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction with calculated timing**. It aims to maximize personal gains while strategically depleting the resource to disadvantage opponents, particularly in the endgame.

## Decision Rules

### 1. Opening Aggression (Rounds 1-2)
- **Always DEFECT** in rounds 1-2
- **Rationale**: Establish dominance early, signal aggressive intent, and capitalize on the full initial stock before others can react

### 2. Stock Threshold Assessment
Define critical stock levels:
- `DEPLETION_THRESHOLD = capacity * 0.3`
- `CRISIS_THRESHOLD = capacity * 0.15`

### 3. Mid-Game Adaptive Rules (Rounds 3 to r-3)

**Primary Rule - Stock-Based Decision:**
```
IF stock > DEPLETION_THRESHOLD:
    IF (number of previous round defectors / n) ≥ 0.5:
        DEFECT  // Match or exceed aggression
    ELSE:
        DEFECT with probability 0.7, COOPERATE with probability 0.3
        // Stay aggressive but occasionally feint cooperation
ELSE IF stock > CRISIS_THRESHOLD:
    DEFECT  // Resource getting scarce, grab what's left
ELSE:
    COOPERATE  // Stock too low, preserve for minimal regeneration
```

**Secondary Rule - Opponent Exploitation:**
Track each opponent's cooperation rate over last 3 rounds. If any opponent has cooperated ≥ 2/3 times:
- **DEFECT** against cooperative opponents to exploit their restraint
- This overrides the primary rule when stock > CRISIS_THRESHOLD

### 4. Endgame Domination (Final 3 rounds)

**Round r-2:**
- IF stock ≤ CRISIS_THRESHOLD: COOPERATE (preserve minimal resource)
- ELSE: DEFECT (maximize extraction before endgame)

**Round r-1:**
- IF stock ≤ n: COOPERATE (avoid complete depletion)
- ELSE: DEFECT (penultimate extraction)

**Final Round r:**
- **Always DEFECT** (no future consequences, extract maximum)

### 5. Punishment Protocol
If in any round more than 75% of opponents defected AND stock dropped below previous stock level:
- **DEFECT for the next 2 rounds** regardless of other conditions
- This prevents being exploited by coordinated opponent aggression

## Edge Case Handling

**Stock Depletion Crisis:**
- If stock < n (insufficient for everyone to get minimum): COOPERATE to enable regeneration
- Exception: Final round always DEFECT

**All Opponents Cooperating:**
- If all opponents cooperated in previous round: DEFECT (exploit their cooperation)
- This creates asymmetric advantage

**Stock Approaching Capacity:**
- If stock > 0.9 * capacity: DEFECT (resource is abundant, be aggressive)

## Adaptive Elements

1. **Aggression Calibration**: Increase defection probability by 0.1 each time opponents show sustained cooperation (3+ consecutive rounds with <50% defectors)

2. **Retaliation Dampening**: If consistent mutual defection leads to stock < CRISIS_THRESHOLD for 2+ consecutive rounds, temporarily reduce aggression by cooperating once, then resume aggressive stance

3. **Opportunistic Strikes**: Always defect when stock regenerates significantly (>20% increase from previous round) regardless of other conditions

## Strategic Advantages

1. **Early Dominance**: Immediate aggressive stance establishes advantageous position
2. **Exploitation Focus**: Targets cooperative players for maximum extraction
3. **Endgame Optimization**: Guarantees maximum final-round payoff while managing resource collapse timing
4. **Adaptive Aggression**: Maintains pressure while avoiding complete resource destruction until strategically optimal

This strategy prioritizes individual gains over collective welfare, using the repeated game structure to maximize cumulative payoffs through calculated aggression and opponent exploitation.
'''

description_AGGRESSIVE_96 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource maximization** while maintaining sustainability only when absolutely necessary. It exploits cooperative opponents ruthlessly while adapting to prevent total resource collapse that would hurt long-term gains.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-3 or until stock < capacity/2)
- **Always DEFECT** to maximize early gains and test opponent responses
- Rationale: Establish dominance, gather intelligence on opponent strategies, and extract maximum value while stock is high

### Phase 2: Adaptive Exploitation (Middle rounds)
Apply the following decision tree each round:

1. **Stock Depletion Check**:
   - If stock ≤ capacity/4: COOPERATE (survival mode)
   - If stock ≤ capacity/2: Apply "Sustainability Threshold Protocol"
   - Otherwise: Continue exploitation

2. **Opponent Behavior Analysis**:
   - Count cooperation ratio of opponents in last 3 rounds: `coop_ratio = (total_C_actions) / (3 × (n-1))`
   - If `coop_ratio ≥ 0.7`: DEFECT (exploit high cooperation)
   - If `coop_ratio ≤ 0.3`: Apply "Defector Punishment Protocol"
   - If `0.3 < coop_ratio < 0.7`: Apply "Mixed Response Protocol"

3. **Sustainability Threshold Protocol**:
   - Calculate rounds remaining: `rounds_left = r - current_round`
   - If `stock/capacity < rounds_left/(2×r)`: COOPERATE
   - Otherwise: DEFECT

4. **Defector Punishment Protocol**:
   - If majority defected last round AND stock > capacity/3: DEFECT
   - Otherwise: COOPERATE (strategic cooperation to rebuild stock for future exploitation)

5. **Mixed Response Protocol**:
   - If my cumulative payoff > average opponent payoff AND stock > capacity/3: DEFECT
   - Otherwise: COOPERATE

### Phase 3: Endgame Exploitation (Last 20% of rounds)
- **Always DEFECT** unless stock < capacity/10 (terminal resource collapse prevention)
- Rationale: No future rounds to benefit from cooperation, so maximize immediate extraction

## Edge Case Handling

### First Round
- **Always DEFECT**: Establish aggressive stance and gather opponent data

### Last Round
- **Always DEFECT**: No future consequences, maximize final payoff

### Resource Collapse Prevention
- If stock drops below `capacity/10` at any point: COOPERATE for exactly 2 rounds, then resume aggressive behavior
- This prevents total collapse while minimizing cooperative "waste"

### Opponent Counter-Strategies
- If opponents seem to be using tit-for-tat or similar conditional strategies, occasionally throw in unexpected cooperation (10% chance when normally would defect) to confuse and potentially reset their punishment cycles

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, r, history):
    rounds_remaining = r - round
    
    // Phase determination
    if round <= 3 or stock >= capacity * 0.75:
        phase = "initial_exploitation"
    elif rounds_remaining <= r * 0.2:
        phase = "endgame"
    else:
        phase = "adaptive"
    
    // Emergency cooperation
    if stock < capacity * 0.1:
        return COOPERATE
    
    // Phase-specific logic
    switch phase:
        case "initial_exploitation":
            return DEFECT
            
        case "endgame":
            if stock < capacity * 0.1:
                return COOPERATE
            else:
                return DEFECT
                
        case "adaptive":
            return adaptive_decision(stock, capacity, n, history)

function adaptive_decision(stock, capacity, n, history):
    opponent_coop_ratio = calculate_recent_cooperation(history, 3)
    
    if stock <= capacity * 0.25:
        return COOPERATE
    elif stock <= capacity * 0.5 and sustainability_check():
        return COOPERATE
    elif opponent_coop_ratio >= 0.7:
        return DEFECT  // Exploit cooperators
    elif opponent_coop_ratio <= 0.3:
        return punishment_protocol()
    else:
        return mixed_response_protocol()
```

## Key Advantages
1. **Maximizes early gains** when stock is highest
2. **Adapts to opponent behavior** rather than following rigid patterns
3. **Prevents resource collapse** that would hurt everyone
4. **Exploits cooperative opponents** while punishing excessive defection
5. **Endgame optimization** extracts maximum value when no future cooperation benefits exist

This strategy is designed to outperform both purely cooperative and purely defective opponents by intelligently switching between exploitation and minimal necessary cooperation based on game state and opponent behavior patterns.
'''

description_AGGRESSIVE_97 = '''
# Aggressive Adaptive Resource Extraction Strategy (AARES)

## Core Philosophy
This strategy maximizes personal extraction while maintaining the resource pool as a strategic asset. It operates on the principle of "sustainable aggression" - extracting maximum value while preserving future opportunities, and punishing cooperative behavior that could be exploited.

## Decision Framework

### 1. **Opening Aggression (Rounds 1-2)**
- **Always DEFECT** in the first round regardless of parameters
- **Always DEFECT** in the second round
- *Rationale*: Establish dominance early, test opponent responses, and maximize extraction from the pristine resource pool

### 2. **Adaptive Threshold System**
Calculate a **Stock Criticality Threshold** each round:
```
Critical_Stock = capacity * (remaining_rounds / total_rounds) * 0.6
```

### 3. **Primary Decision Rules**

#### Rule A: Stock Protection Override
```
IF current_stock ≤ Critical_Stock:
    IF more than 60% of opponents DEFECTED last round:
        DEFECT (join the exploitation)
    ELSE:
        COOPERATE (preserve remaining stock)
```

#### Rule B: Punishment Protocol
```
IF current_stock > Critical_Stock:
    defection_rate = (opponents who defected last round) / (total opponents)
    
    IF defection_rate ≥ 0.5:
        DEFECT (punish and exploit)
    ELIF defection_rate ≥ 0.3:
        IF my_last_action == COOPERATE:
            DEFECT (escalate against moderate defection)
        ELSE:
            COOPERATE (occasional mercy to test cooperation)
    ELSE:
        IF defection_rate == 0 AND round_number > 2:
            DEFECT (exploit universal cooperation)
        ELSE:
            COOPERATE (reward low defection)
```

#### Rule C: Endgame Extraction
```
IF remaining_rounds ≤ max(2, total_rounds * 0.2):
    IF current_stock > capacity * 0.3:
        DEFECT (final extraction phase)
    ELSE:
        IF opponents_average_defection_rate > 0.4:
            DEFECT (grab what's left)
        ELSE:
            COOPERATE (minimal restraint)
```

### 4. **Exploitation Patterns**

#### Cooperation Exploitation
- If opponents show consistent cooperation (≤20% defection rate for 3+ consecutive rounds), immediately DEFECT to exploit their restraint
- Return to cooperation only if stock drops below critical threshold

#### Momentum Riding
- Track stock recovery rates: if stock grew by >20% last round due to low consumption, DEFECT next round to capitalize on recovery
- If stock declined by >30% last round, cooperate temporarily to allow partial recovery

### 5. **Edge Case Handling**

#### First Round
- **Always DEFECT** - maximum extraction from full capacity

#### Last Round
- **Always DEFECT** - no future consequences

#### Near-Extinction Scenarios
```
IF current_stock ≤ capacity * 0.1:
    IF any opponent defected last round:
        DEFECT (race to the bottom)
    ELSE:
        COOPERATE (desperate conservation)
```

#### Dominant Position
```
IF my_cumulative_payoff > average_opponent_payoff * 1.3:
    Reduce aggression slightly to maintain resource base
    (Use Rule B with defection_rate thresholds increased by 0.1)
```

### 6. **Memory and Adaptation**

Track for each opponent:
- Defection rate over last 3 rounds
- Response to my defections
- Apparent strategy pattern (always defect, tit-for-tat, etc.)

#### Opponent Classification
- **Aggressive** (>70% defection): Match aggression, defect when they cooperate
- **Balanced** (30-70% defection): Use standard punishment rules
- **Cooperative** (<30% defection): Exploit periodically, but preserve them as a resource

## Strategic Advantages

1. **Early Dominance**: Immediate aggressive extraction establishes superior position
2. **Adaptive Punishment**: Harsh retaliation against defection while exploiting cooperation
3. **Resource Awareness**: Balances extraction with sustainability based on game length
4. **Endgame Optimization**: Maximizes final rounds extraction when consequences diminish
5. **Exploitation Detection**: Identifies and capitalizes on overly cooperative opponents

## Risk Management

- Maintains stock above extinction levels when possible
- Adapts aggression based on opponent behavior to avoid mutual destruction
- Uses cooperation strategically to maintain exploitable resource base
- Escalates gradually rather than immediate maximum aggression (except opening)

This strategy prioritizes personal payoff maximization while maintaining tactical flexibility to adapt to various opponent archetypes, ensuring robust performance across diverse tournament conditions.
'''

description_AGGRESSIVE_98 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining long-term viability**. It aims to maximize personal payoffs by exploiting cooperative opponents while adapting quickly to counter aggressive competition.

## Decision Framework

### Primary Decision Rule: Adaptive Threshold System
The strategy uses a dynamic cooperation threshold based on:
- **Stock Health Ratio**: `current_stock / capacity`
- **Exploitation Opportunity Score**: Based on opponent cooperation history
- **Time Pressure Factor**: Remaining rounds vs. total rounds

### Core Algorithm

```
if round == 1:
    action = DEFECT  // Start aggressively to test opponents
    
else if round == final_round:
    action = DEFECT  // No future consequences, maximize immediate gain
    
else:
    stock_health = current_stock / capacity
    cooperation_rate = count_opponent_cooperations_last_3_rounds / (3 * (n-1))
    time_remaining_ratio = (r - current_round) / r
    
    // Aggressive thresholds - favor defection
    stock_threshold = 0.15 + (0.25 * time_remaining_ratio)
    cooperation_threshold = 0.4
    
    if stock_health < stock_threshold:
        action = COOPERATE  // Emergency conservation
    else if cooperation_rate > cooperation_threshold:
        action = DEFECT     // Exploit cooperative opponents
    else if consecutive_all_defect_rounds >= 2:
        action = COOPERATE  // Prevent total collapse
    else:
        action = DEFECT     // Default aggressive stance
```

## Detailed Decision Rules

### 1. **Opening Aggression (Round 1)**
- Always DEFECT to signal aggressive intent and test opponent responses
- Establishes dominance and maximizes early payoff when stock is at maximum

### 2. **Exploitation Phase (Early-Mid Game)**
- **High Cooperation Detected**: If >40% of opponents cooperated in last 3 rounds → DEFECT
- **Mixed Behavior**: Default to DEFECT unless stock critically low
- **All-Defect Environment**: If all players defected for 2+ consecutive rounds → temporary COOPERATE to prevent resource death spiral

### 3. **Stock-Based Emergency Override**
- **Critical Stock** (stock/capacity < 0.15 + 0.25 × time_remaining): Force COOPERATE regardless of other factors
- This threshold increases as game progresses, becoming more conservation-minded near the end

### 4. **Endgame Exploitation (Final Round)**
- Always DEFECT - no future consequences, maximize immediate extraction

### 5. **Punishment Mechanism**
- Track individual opponent defection rates
- If any opponent defects >70% of the time, treat them as permanent defector and never condition cooperation on their behavior

## Adaptive Elements

### **Opponent Classification System**
Continuously classify opponents into three categories:
- **Exploitable** (cooperation rate >60%): Target for maximum exploitation
- **Aggressive** (defection rate >70%): Match their aggression, don't reward cooperation
- **Adaptive** (mixed strategy): Use caution, expect retaliation

### **Dynamic Threshold Adjustment**
- If personal payoff falls below 80% of theoretical maximum for 3 consecutive rounds → increase aggression (lower cooperation thresholds)
- If stock crashes below 20% capacity before mid-game → temporarily increase cooperation likelihood

### **Meta-Strategy Detection**
- Identify if opponents are using tit-for-tat, always-cooperate, or random strategies
- Counter detected strategies with optimal responses (e.g., alternate cooperation/defection against tit-for-tat to extract maximum value)

## Edge Case Handling

1. **Stock Depletion**: If stock approaches zero, switch to pure cooperation until recovery
2. **All-Cooperative Environment**: Gradually increase defection rate to test limits
3. **Highly Chaotic Environment**: Fall back to stock-health-only decision making
4. **Identical Strategies**: If opponents mirror this strategy, use slight randomization to break symmetry

## Aggressive Features

- **Default to defection** in ambiguous situations
- **Exploit cooperative opponents** mercilessly
- **Front-load extraction** when stock is high
- **Endgame maximization** with guaranteed final defection
- **Punishment orientation** against other aggressive players
- **Minimum cooperation** - only when absolutely necessary for resource sustainability

This strategy prioritizes personal payoff maximization while maintaining just enough cooperation to prevent complete resource collapse, making it highly competitive in tournament settings against diverse opponent strategies.
'''

description_AGGRESSIVE_99 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism** - maximizing immediate gains while strategically preserving the resource when it benefits long-term exploitation. The key insight is that being "aggressive" doesn't mean always defecting; it means maximizing total extraction over the entire game.

## Decision Framework

### Phase 1: Aggressive Probing (First 20% of rounds)
**Objective**: Establish dominance and test opponent cooperation levels

```pseudocode
if current_round <= max(2, r * 0.2):
    if stock >= capacity * 0.8:
        action = DEFECT  // Exploit high stock aggressively
    else if stock <= capacity * 0.3:
        action = COOPERATE  // Preserve remaining resource
    else:
        // Mixed aggressive approach based on others' behavior
        cooperator_ratio = count_cooperators_last_round / (n-1)
        if cooperator_ratio >= 0.6:
            action = DEFECT  // Exploit cooperative opponents
        else:
            action = COOPERATE  // Match aggression to preserve stock
```

### Phase 2: Adaptive Exploitation (Middle 60% of rounds)
**Objective**: Maximize extraction while maintaining sustainable exploitation

```pseudocode
if r * 0.2 < current_round <= r * 0.8:
    // Calculate exploitation threshold
    rounds_remaining = r - current_round
    minimum_viable_stock = capacity * 0.15
    
    // Aggressive sustainability check
    if stock > minimum_viable_stock * (1 + rounds_remaining * 0.1):
        // Stock is sufficient for aggressive play
        recent_cooperator_ratio = count_cooperators_last_3_rounds / (3 * (n-1))
        
        if recent_cooperator_ratio >= 0.5:
            action = DEFECT  // Exploit cooperative behavior
        else if stock >= capacity * 0.6:
            action = DEFECT  // High stock allows aggression
        else:
            // Conditional cooperation to maintain exploitation base
            if count_cooperators_last_round >= (n-1) * 0.4:
                action = COOPERATE
            else:
                action = DEFECT
    else:
        // Emergency preservation mode
        action = COOPERATE
```

### Phase 3: Endgame Extraction (Final 20% of rounds)
**Objective**: Maximum extraction with calculated resource depletion

```pseudocode
if current_round > r * 0.8:
    rounds_left = r - current_round + 1
    
    if rounds_left == 1:
        action = DEFECT  // Always defect on final round
    else if stock <= capacity * 0.2:
        // Low stock - preserve for final extraction
        action = COOPERATE
    else:
        // Calculate if we can sustain defection
        projected_consumption_per_round = stock / (2 * n) * count_cooperators_last_round + 
                                         stock / n * count_defectors_last_round
        
        if stock - projected_consumption_per_round * rounds_left > 0:
            action = DEFECT  // Can sustain aggressive extraction
        else:
            // Alternate to maximize total extraction
            if current_round % 2 == 0:
                action = DEFECT
            else:
                action = COOPERATE
```

## Edge Case Handling

### First Round
```pseudocode
// Always defect first round to establish aggressive stance and test responses
action = DEFECT
```

### Stock Depletion Crisis
```pseudocode
if stock <= capacity * 0.1:
    if current_round >= r * 0.9:
        action = DEFECT  // Extract remaining value in endgame
    else:
        action = COOPERATE  // Emergency preservation
```

### All-Opponent Defection
```pseudocode
if count_cooperators_last_2_rounds == 0 and current_round > 2:
    if stock >= capacity * 0.3:
        action = DEFECT  // Join the feeding frenzy
    else:
        action = COOPERATE  // Try to salvage something
```

## Key Aggressive Elements

1. **Exploitation Priority**: Always defect when stock is high and opponents are cooperative
2. **Endgame Ruthlessness**: Guaranteed defection on final round, aggressive extraction in final phase
3. **Opportunistic Cooperation**: Only cooperate when it serves long-term extraction goals
4. **Dominance Testing**: Early aggressive moves to establish exploitation patterns
5. **Crisis Opportunism**: Even in low-stock situations, look for extraction opportunities

## Adaptability Features

- **Dynamic Thresholds**: Stock thresholds adjust based on game progress and opponent behavior
- **Behavioral Pattern Recognition**: Tracks opponent cooperation rates over multiple time windows
- **Phase-Sensitive Strategy**: Different approaches for early, middle, and endgame phases
- **Emergency Protocols**: Switches to preservation mode only when absolutely necessary for continued exploitation

This strategy prioritizes maximum resource extraction while maintaining just enough sustainability to ensure continued exploitation opportunities. It's designed to be aggressive against cooperative opponents while avoiding mutually destructive spirals that would eliminate future extraction potential.
'''

description_AGGRESSIVE_100 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism with calculated sustainability**. The goal is to maximize individual payoffs while maintaining just enough resource sustainability to continue exploiting the pool effectively. We assume other players will either be too cooperative (exploitable) or too aggressive (leading to mutual destruction), and we position ourselves to capitalize on both scenarios.

## Decision Framework

### Phase Classification
The strategy dynamically classifies the game into three phases based on current conditions:

1. **Exploitation Phase** (Early-Mid Game): Maximum aggression when stock is healthy
2. **Sustainability Phase** (Resource Stress): Strategic cooperation to prevent collapse
3. **Endgame Phase** (Final rounds): All-out resource grab

### Core Decision Rules

```pseudocode
function decide_action(current_round, stock, history):
    // Calculate key metrics
    rounds_remaining = total_rounds - current_round + 1
    stock_per_capita = stock / n
    depletion_rate = calculate_recent_depletion_rate(history)
    opponent_aggression = calculate_opponent_aggression(history)
    
    // Phase determination
    if rounds_remaining <= max(2, total_rounds * 0.15):
        return ENDGAME_STRATEGY()
    elif stock < capacity * 0.3 OR depletion_rate > sustainability_threshold:
        return SUSTAINABILITY_STRATEGY()
    else:
        return EXPLOITATION_STRATEGY()
```

## Strategy Components

### 1. Exploitation Strategy (Primary Mode)
**Trigger Conditions:**
- Stock > 30% of capacity
- Low depletion risk
- Not in endgame

**Action:** Always DEFECT

**Rationale:** In healthy stock conditions, defecting gives double the payoff of cooperating. This maximizes short-term gains while the resource can sustain heavy exploitation.

### 2. Sustainability Strategy (Defensive Mode)
**Trigger Conditions:**
- Stock ≤ 30% of capacity, OR
- Recent depletion rate suggests stock collapse within 3-4 rounds

**Decision Logic:**
```pseudocode
function sustainability_strategy():
    if opponent_aggression > 0.7:
        // If most others are defecting anyway, join them
        return DEFECT
    elif stock < capacity * 0.15:
        // Critical stock level - force cooperation
        return COOPERATE
    else:
        // Conditional cooperation based on recent opponent behavior
        if last_round_cooperators >= n/2:
            return COOPERATE
        else:
            return DEFECT
```

### 3. Endgame Strategy (Final Push)
**Trigger:** Final 15% of rounds (minimum 2 rounds)

**Action:** Always DEFECT

**Rationale:** In the final rounds, future sustainability is irrelevant. Maximum extraction is the only logical choice since there's no future to preserve the resource for.

## Adaptive Mechanisms

### Opponent Behavior Tracking
The strategy maintains running statistics on opponent behavior:

- **Aggression Index:** Proportion of defections by all opponents in recent rounds
- **Predictability Score:** Consistency of opponent strategies
- **Response Patterns:** How opponents react to stock depletion

### Dynamic Thresholds
Key thresholds adapt based on game parameters:

- **Sustainability Threshold:** `capacity * (0.2 + 0.1/n)` - Scales with player count
- **Endgame Trigger:** `max(2, total_rounds * 0.15)` - Longer endgames for longer tournaments
- **Critical Stock Level:** `capacity * (0.1 + n/100)` - More conservative with more players

## Edge Case Handling

### First Round
**Action:** Always DEFECT
- No history to analyze, so maximize immediate payoff
- Sets an aggressive tone that may intimidate more cooperative players

### Stock Depletion Crisis
If stock falls below 10% of capacity:
- Switch to COOPERATE only if >50% of opponents cooperated last round
- Otherwise continue DEFECT (if others are destroying the resource anyway, grab what you can)

### Opponent Collapse Detection
If multiple rounds of all-defect behavior lead to near-zero stock:
- Continue DEFECT (no point in unilateral cooperation)
- Focus on getting final scraps before inevitable collapse

## Strategic Advantages

1. **Exploitation Bias:** Defaults to the more profitable action (defect) whenever sustainable
2. **Rapid Adaptation:** Quickly shifts strategies based on stock levels and opponent behavior
3. **No Mercy in Endgame:** Recognizes when cooperation becomes irrational
4. **Punishment Resistance:** Doesn't fall into cooperative traps when others are exploiting
5. **Calculated Sustainability:** Preserves resources only when necessary for continued exploitation

## Risk Management

The strategy accepts certain risks in favor of aggressive payoff maximization:
- **Controlled Sustainability:** Only cooperates when resource collapse is imminent
- **Opponent Unpredictability:** Assumes others will act suboptimally and positions to exploit this
- **Short-term Focus:** Prioritizes immediate high payoffs over long-term optimization when stock is healthy

This aggressive approach ensures maximum payoff extraction while maintaining just enough strategic flexibility to avoid complete resource collapse when it would hurt our own interests.
'''

description_AGGRESSIVE_101 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **"Exploit early, punish defection, and secure maximum individual gain"**. It assumes opponents are competitors, not collaborators, and prioritizes individual payoffs over collective welfare.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1-3 or first 25% of game)
- **Always DEFECT** regardless of stock level or opponent behavior
- **Rationale**: Maximize early payoffs when stock is highest, establish aggressive reputation, and test opponent responses

### Phase 2: Adaptive Exploitation (Middle rounds)
**Primary Rule**: Defect unless cooperation is strategically necessary for future exploitation

**Stock-Based Decisions**:
- If `stock < n`: **COOPERATE** (resource too depleted for meaningful defection payoff)
- If `stock ≥ 2n`: **DEFECT** (high payoff opportunity)
- If `n ≤ stock < 2n`: Apply **Opponent Response Analysis**

**Opponent Response Analysis**:
Track each opponent's cooperation rate over last 3 rounds:
- If `avg_cooperation_rate < 0.3`: **DEFECT** (they're aggressive, no point cooperating)
- If `avg_cooperation_rate > 0.7`: **DEFECT** (exploit their cooperation)
- If `0.3 ≤ avg_cooperation_rate ≤ 0.7`: **COOPERATE** (maintain exploitable relationship)

### Phase 3: Endgame Maximization (Last 20% of rounds)
- **Always DEFECT** in final round (no future consequences)
- In penultimate rounds: **DEFECT** unless stock is critically low (`stock < n/2`)

## Advanced Behavioral Rules

### Punishment Mechanism
If any opponent shows pattern of consistent cooperation (>80% over 4+ rounds), then sudden defection:
- **Immediately DEFECT** for 2 consecutive rounds to exploit their trust
- Return to normal decision framework

### Recovery Exploitation
When stock recovers above threshold after depletion:
- **DEFECT** immediately to capitalize on recovery
- Monitor if opponents also exploit recovery - if yes, compete aggressively

### Minority Defection Advantage
If in previous round, fewer than 50% of players defected:
- **Increase defection probability by 30%** in current round
- Exploit the fact that cooperators left more resources available

## Edge Case Handling

**First Round**: Always **DEFECT** (establish aggressive stance)

**Stock Depletion**: If `stock < capacity/10`:
- Switch to **COOPERATE** until `stock > capacity/3`
- Then immediately resume aggressive exploitation

**All Opponents Cooperating**: 
- **DEFECT** to maximize individual advantage
- Continue until they adapt or resources deplete

**All Opponents Defecting**:
- **COOPERATE** only if `stock < n` (resource preservation)
- Otherwise **DEFECT** (join the arms race)

## Pseudocode Structure

```
function decide_action(round, stock, history, n, r, capacity):
    # Phase determination
    early_phase = (round <= max(3, r/4))
    endgame_phase = (round > r * 0.8)
    
    # Early aggression
    if early_phase:
        return DEFECT
    
    # Endgame exploitation
    if endgame_phase:
        if round == r or stock < n/2:
            return COOPERATE if stock < n/2 else DEFECT
        return DEFECT
    
    # Critical stock protection
    if stock < n:
        return COOPERATE
    
    # High opportunity exploitation
    if stock >= 2*n:
        return DEFECT
    
    # Adaptive middle game
    opponent_coop_rate = calculate_recent_cooperation_rate(history, 3)
    
    if opponent_coop_rate < 0.3 or opponent_coop_rate > 0.7:
        return DEFECT
    else:
        return COOPERATE
```

## Strategic Advantages

1. **Early Exploitation**: Captures maximum value when resources are abundant
2. **Reputation Building**: Establishes credible threat of defection
3. **Adaptive Response**: Adjusts to opponent behavior patterns
4. **Resource Preservation**: Prevents complete depletion when necessary
5. **Endgame Maximization**: Ensures final rounds extract maximum individual value

This strategy is designed to be **ruthlessly individualistic** while maintaining enough adaptability to avoid mutual destruction scenarios that would reduce total payoffs available for exploitation.
'''

description_AGGRESSIVE_102 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is designed to maximize individual payoffs through intelligent exploitation while maintaining enough flexibility to avoid complete resource collapse that would hurt long-term gains. The key insight is that being aggressive doesn't mean being blindly destructive - it means being ruthlessly opportunistic.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Objective**: Establish dominance and test opponent responses

**Round 1**: Always DEFECT
- No history exists, so maximum exploitation is optimal
- Sets aggressive tone and maximizes immediate payoff

**Rounds 2 to r/3**: Conditional Aggression
- If stock > capacity/2: DEFECT (resource is abundant, exploit heavily)
- If previous round had ≥50% defectors: DEFECT (join the feeding frenzy)
- If stock ≤ capacity/4: COOPERATE (avoid collapse that hurts everyone)
- Otherwise: DEFECT (maintain aggressive posture)

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
**Objective**: Maximize extraction while preventing complete collapse

**Stock-Based Decision Tree**:
- If stock ≤ capacity/(4n): COOPERATE (emergency conservation)
- If stock > 3×capacity/4: DEFECT (abundant resources, exploit freely)
- If majority defected in last 2 rounds AND stock > capacity/3: DEFECT (opportunistic exploitation)
- If stock is declining rapidly (>20% per round over last 2 rounds): COOPERATE (tactical conservation)
- Otherwise: Apply "Exploitation Ratio Rule"

**Exploitation Ratio Rule**:
- Count defectors in previous round (D_prev)
- If D_prev/n > 0.6: DEFECT (join the majority)
- If D_prev/n < 0.3: DEFECT (exploit the cooperators)
- If 0.3 ≤ D_prev/n ≤ 0.6: DEFECT if stock > capacity/2, else COOPERATE

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
**Objective**: Extract maximum value from remaining rounds

**Final Rounds Logic**:
- If fewer than 3 rounds remain: Always DEFECT (no future to protect)
- If stock > capacity/2: DEFECT (extract while possible)
- If stock ≤ capacity/(2n): COOPERATE only if it ensures stock > 0 for next round
- Otherwise: DEFECT

## Adaptive Mechanisms

### Opponent Behavior Recognition
Track each opponent's cooperation rate over the last 5 rounds:
- **Consistent Cooperators** (>80% cooperation): Exploit heavily by defecting when they're present
- **Consistent Defectors** (>80% defection): Join them in defection to avoid being the sucker
- **Tit-for-Tat Types**: Defect first, then mirror if they retaliate

### Dynamic Stock Thresholds
Adjust aggressiveness based on stock trajectory:
- If stock has grown in last 2 rounds: Increase defection probability by 20%
- If stock declining but still >50% capacity: Maintain aggressive stance
- If stock <25% capacity for 2+ consecutive rounds: Temporary cooperation until recovery

### Anti-Coordination Exploitation
- If opponents show signs of coordination (synchronized cooperation patterns): Immediately defect to free-ride
- If detecting alternating patterns: Break them by defecting during "cooperation windows"

## Edge Case Handling

**First Round**: Always DEFECT (establish dominance)

**Stock Near Zero**: If stock ≤ capacity/(4n), cooperate for exactly one round, then immediately return to defection

**All Opponents Cooperating**: Continue defecting until stock drops below 40% capacity

**All Opponents Defecting**: Join them immediately - no point being the only cooperator in a collapsing system

**Last Round**: Always DEFECT regardless of stock level

## Pseudocode Summary

```
function decide_action(round, stock, history, capacity, n, r):
    
    # Emergency override
    if stock <= capacity/(4*n):
        return COOPERATE
    
    # Final rounds
    if round > (2*r/3) and (r - round < 3):
        return DEFECT
    
    # First round
    if round == 1:
        return DEFECT
    
    # Get recent defector percentage
    recent_defector_rate = count_defectors_last_round(history) / n
    
    # Phase-based logic
    if round <= r/3:  # Early aggression
        if stock > capacity/2 or recent_defector_rate >= 0.5:
            return DEFECT
        return DEFECT  # Default aggressive
    
    elif round <= 2*r/3:  # Strategic exploitation
        if stock > 3*capacity/4:
            return DEFECT
        if recent_defector_rate > 0.6:
            return DEFECT
        if recent_defector_rate < 0.3:
            return DEFECT  # Exploit cooperators
        if stock > capacity/2:
            return DEFECT
        return COOPERATE
    
    else:  # Endgame
        if stock > capacity/2:
            return DEFECT
        return DEFECT  # Default endgame aggression
```

This strategy is designed to be ruthlessly opportunistic while avoiding the trap of destroying the resource base so completely that future rounds become worthless. It exploits cooperative opponents, joins destructive majorities, and always prioritizes individual gain over collective welfare.
'''

description_AGGRESSIVE_103 = '''
# Aggressive Predatory Exploitation Strategy

## Core Philosophy
This strategy treats the common pool as a resource to be aggressively extracted while strategically timing cooperation only when it serves long-term exploitation goals. The key insight is to maximize personal extraction while maintaining just enough resource sustainability to enable continued exploitation.

## Decision Framework

### 1. **Exploitation Threshold Analysis**
- Calculate **sustainability ratio**: `current_stock / capacity`
- Calculate **extraction pressure**: `(rounds_remaining × n) / current_stock`
- Calculate **competitive intensity**: `average_defection_rate_last_3_rounds`

### 2. **Primary Decision Rules**

**DEFECT when ANY of these conditions are met:**
- First round (establish aggressive position immediately)
- Last round (no future consequences)
- Stock sustainability ratio > 0.7 (plenty of buffer for aggressive extraction)
- Extraction pressure < 0.8 (low risk of complete depletion)
- More than 60% of opponents defected in the previous round (match aggression)
- Opponents' average cooperation rate over last 3 rounds < 0.4 (they're not sustaining the resource anyway)

**COOPERATE only when ALL of these conditions are met:**
- Stock sustainability ratio ≤ 0.3 (resource critically low)
- At least 3 rounds remaining (time to benefit from regeneration)
- Majority of opponents cooperated in the previous round (they're trying to rebuild)
- Personal cumulative payoff is below 80% of theoretical maximum from all-defect scenario

### 3. **Adaptive Exploitation Mechanics**

#### **Opening Aggression (Rounds 1-2)**
- Always DEFECT in round 1 to establish dominance and test opponent responses
- DEFECT in round 2 unless stock drops below 20% capacity (indicating opponents are also highly aggressive)

#### **Mid-Game Predation (Rounds 3 to r-2)**
```pseudocode
if stock_ratio > 0.6:
    DEFECT  // Extract aggressively when safe
elif stock_ratio < 0.25 AND majority_cooperated_last_round:
    COOPERATE  // Strategic rebuilding only when others are helping
elif opponents_average_defection_rate > 0.7:
    DEFECT  // Match their aggression - don't be exploited
else:
    DEFECT  // Default to aggression
```

#### **End-Game Extraction (Last 2 rounds)**
- Round r-1: COOPERATE only if stock < 15% capacity AND all opponents cooperated in previous round
- Round r: Always DEFECT (no future consequences)

### 4. **Strategic Exploitation Patterns**

#### **Punishment Protocol**
If any opponent switches from C to D while I was cooperating:
- Immediately DEFECT for the next 2 rounds
- Only return to cooperation consideration if they cooperate for 2 consecutive rounds AND stock is critically low

#### **False Cooperation Detection**
Track opponents who alternate between C and D:
- If opponent shows alternating pattern, always DEFECT against them
- Treat inconsistent players as unreliable and exploit them maximally

#### **Resource Hoarding**
When stock is abundant (>80% capacity):
- DEFECT aggressively to build early payoff advantage
- Force opponents into reactive position where they must choose between sustainability and competitive payoffs

### 5. **Edge Case Handling**

#### **Stock Depletion Risk**
If stock drops to 0 or near-0:
- COOPERATE for exactly one round to allow minimal regeneration
- Resume DEFECTION immediately after any recovery

#### **All-Cooperator Environment**
If all opponents consistently cooperate (3+ rounds):
- Continue DEFECTING to maximize extraction from their goodwill
- Only cooperate if stock approaches complete depletion

#### **All-Defector Environment**
If all opponents consistently defect:
- Match with DEFECTION to avoid being the sole contributor
- Never cooperate unless stock hits absolute minimum for survival

## Strategic Rationale

This strategy is designed to:
1. **Maximize early extraction** when resources are abundant
2. **Exploit cooperative opponents** by free-riding on their conservation efforts
3. **Minimize contributions** to resource sustainability while benefiting from others' contributions
4. **Maintain strategic flexibility** to prevent complete resource collapse only when necessary for continued exploitation

The strategy assumes opponents are either naive cooperators (to be exploited) or fellow competitors (to be matched in aggression). It never assumes goodwill or reciprocal cooperation unless forced by resource scarcity.
'''

description_AGGRESSIVE_104 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The key insight is that in a competitive environment, being "nice" gets you exploited, so we lead with aggression and adapt based on what others actually do, not what we hope they'll do.

## Decision Rules

### 1. Opening Aggression (First Round)
**Always DEFECT** in round 1.
- Rationale: Establish dominance immediately and test opponent responses
- Sets aggressive tone and maximizes early gains when stock is at peak

### 2. Adaptive Exploitation Framework
The strategy uses three key metrics to determine actions:

**A. Cooperation Rate Tracking**
- Track the cooperation rate of all other players: `coop_rate = (total_C_actions) / (total_actions_by_others)`
- Maintain a rolling 3-round window for recent behavior assessment

**B. Stock Sustainability Threshold**
- Calculate critical stock level: `critical_stock = capacity * 0.3`
- Below this threshold, the resource is in danger zone

**C. Exploitation Opportunity Index**
- `exploit_opportunity = (current_stock / capacity) * (1 - coop_rate)`
- High values indicate good conditions for defection

### 3. Core Decision Logic

```pseudocode
IF round == 1:
    return DEFECT
    
IF round == final_round:
    return DEFECT  // No future to preserve
    
IF current_stock < critical_stock:
    IF coop_rate > 0.6:
        return COOPERATE  // Grudging cooperation to avoid collapse
    ELSE:
        return DEFECT  // If others won't cooperate, grab what's left
        
IF exploit_opportunity > 0.4:
    return DEFECT  // High stock + low cooperation = exploit
    
IF coop_rate < 0.3:
    return DEFECT  // Others are defecting, so should we
    
IF consecutive_rounds_of_high_cooperation >= 2:
    return DEFECT  // Break cooperation cycles to exploit trust
    
// Default cautious cooperation only when forced
return COOPERATE
```

### 4. Advanced Adaptive Mechanisms

**A. Retaliation Protocol**
- If individual opponents consistently defect (>70% of their actions), immediately defect against them for next 2 rounds
- Track individual player patterns where possible through stock depletion analysis

**B. Stock Recovery Exploitation**
- When stock shows strong recovery (growth > 20% of capacity in one round), immediately defect next round to capitalize
- Others' cooperation created the opportunity - we exploit it

**C. Endgame Acceleration**
- In final 20% of rounds, increase defection probability by 50%
- Formula: `base_defect_probability * 1.5` when `current_round > 0.8 * total_rounds`

## Edge Case Handling

### First Round
Always defect - no history to analyze, maximize immediate gain, establish aggressive reputation.

### Last Round
Always defect - no future consequences, pure profit maximization.

### Stock Depletion Crisis (stock < 10% capacity)
Switch to cooperation only if >60% of others cooperating, otherwise continue defecting (tragedy of commons reasoning).

### Perfect Cooperation Detection
If all other players cooperated for 3+ consecutive rounds, defect immediately to exploit their trust.

### Resource Abundance (stock > 80% capacity)
Increase defection probability - abundant resources mean low risk of depletion.

## Robustness Features

1. **Anti-Exploitation**: Never cooperate for more than 2 consecutive rounds without reassessment
2. **Opportunistic Switching**: Constantly monitor for opportunities to exploit cooperative phases
3. **Defensive Aggression**: When others are aggressive, be more aggressive to avoid being the "sucker"
4. **Information Maximization**: Use all available history and stock information to predict optimal exploitation windows

## Strategic Advantages

- **First-mover advantage**: Aggressive opening establishes dominance
- **Adaptive exploitation**: Capitalizes on others' cooperation without being exploited
- **Resource preservation**: Only cooperates when absolutely necessary to prevent total collapse
- **Endgame optimization**: Maximizes final round extraction
- **Anti-coordination**: Disrupts attempts by others to establish cooperative equilibria

This strategy assumes opponents are self-interested and will exploit cooperation when possible. By being primarily aggressive but strategically adaptive, it aims to consistently outperform both purely cooperative and purely defective strategies while maintaining enough flexibility to avoid complete resource collapse when beneficial.
'''

description_AGGRESSIVE_105 = '''
# Aggressive Exploitation Strategy: "Resource Shark"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing personal extraction while maintaining just enough resource sustainability to continue profiting. It treats cooperation as weakness to be exploited and views the common pool as a resource to be dominated rather than shared.

## Decision Framework

### Round 1: Immediate Aggression Test
- **Always DEFECT** in round 1
- This establishes dominance and tests opponent responses
- Forces others to reveal their strategies early
- Maximizes initial payoff while stock is at peak

### Rounds 2 to r-2: Adaptive Exploitation Phase

**Primary Rule: Defect unless forced to cooperate**

1. **Stock Threshold Check**:
   - If `current_stock < n * (remaining_rounds)`, then COOPERATE
   - This prevents complete resource collapse before game end
   - Otherwise, continue to step 2

2. **Opponent Exploitation Analysis**:
   - Count cooperators in previous round: `coop_count`
   - If `coop_count ≥ n/2`: **DEFECT** (exploit the cooperators)
   - If `coop_count < n/2`: Apply **Punishment Avoidance** logic

3. **Punishment Avoidance**:
   - If majority defected last round AND stock dropped by >60%: COOPERATE once
   - Otherwise: **DEFECT**

### Round r-1: Penultimate Aggression
- **Always DEFECT** unless stock < n (emergency cooperation)
- This maximizes penultimate round payoff while others may cooperate to preserve final round

### Final Round r: Maximum Extraction
- **Always DEFECT**
- No future consequences, so extract maximum possible
- Let others worry about sustainability - the game ends

## Adaptive Mechanisms

### Stock Recovery Exploitation
- If stock has grown significantly (>25% in one round), immediately **DEFECT** to capture the growth
- This punishes others for successful cooperation by stealing the benefits

### Defector Coalition Detection
- Track if same players consistently defect together
- If detected, occasionally cooperate to let them fight over reduced resources while building slight cooperation credit
- Return to defection once they've damaged each other

### End-Game Acceleration
- In final 25% of rounds: Increase defection frequency regardless of stock levels
- Rationale: Others may start cooperating more to preserve final rounds - exploit this

## Edge Case Handling

### Stock Near Zero (< n)
- **Forced Cooperation**: Cooperate for exactly one round to enable minimal recovery
- Immediately return to defection once stock > 2n

### All Players Cooperating
- **Maximum Exploitation**: Always defect to gain 2x payoff advantage
- Continue until at least one other player starts defecting

### All Players Defecting
- If this persists for 3+ consecutive rounds with declining stock:
- Cooperate for exactly 1 round to enable recovery
- Immediately return to defection

## Pseudocode Structure

```
function ResourceShark(round, stock, history, n, r, capacity):
    remaining_rounds = r - round + 1
    
    // Round 1: Establish dominance
    if round == 1:
        return DEFECT
    
    // Final round: Maximum extraction
    if round == r:
        return DEFECT
    
    // Emergency stock preservation
    if stock < n * remaining_rounds:
        return COOPERATE
    
    // Count previous round cooperators
    last_round_cooperators = count_cooperators(history[round-1])
    
    // Exploit cooperators
    if last_round_cooperators >= n/2:
        return DEFECT
    
    // Punishment avoidance
    if last_round_cooperators < n/2 AND stock_drop_percentage > 60:
        return COOPERATE
    
    // Penultimate aggression
    if round == r-1 AND stock >= n:
        return DEFECT
    
    // Default aggressive stance
    return DEFECT
```

## Strategic Advantages

1. **First-Mover Advantage**: Establishes aggressive reputation early
2. **Exploitation Focus**: Maximizes gains when others cooperate
3. **Minimal Cooperation**: Only cooperates when absolutely necessary for survival
4. **End-Game Dominance**: No mercy in final rounds when others expect cooperation
5. **Adaptive Punishment**: Retaliates against mass defection but minimally

This strategy is designed to be a "resource shark" - aggressively consuming resources while maintaining just enough ecosystem health to continue profiting, then striking with maximum force when the game nears its end.
'''

description_AGGRESSIVE_106 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism with calculated restraint**. The goal is to maximize personal payoff while maintaining the resource pool only when absolutely necessary for continued exploitation. I will defect by default but strategically cooperate when it serves my long-term extraction potential.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Default Action: DEFECT**

- **Round 1**: Always DEFECT to establish dominance and test opponent responses
- **Rounds 2 to r/3**: Continue defecting unless stock drops below critical threshold

**Critical Threshold Check**: If stock < capacity/(4n), switch to emergency cooperation mode for 1-2 rounds to prevent total collapse, then resume defecting.

### Phase 2: Strategic Exploitation (Rounds r/3+1 to 2r/3)
**Adaptive Defection with Stock Monitoring**

**Decision Rules:**
1. **High Stock Exploitation**: If stock > capacity/2, DEFECT aggressively
2. **Medium Stock Assessment**: If capacity/(4n) ≤ stock ≤ capacity/2:
   - Count defectors in previous round
   - If majority defected (>n/2), COOPERATE once to prevent crash
   - Otherwise, DEFECT to maximize immediate gain
3. **Low Stock Recovery**: If stock < capacity/(4n), COOPERATE until stock > capacity/3, then resume defecting

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Maximum Exploitation Mode**

- **Final Round**: Always DEFECT (no future consequences)
- **Second-to-last Round**: DEFECT unless stock would hit zero (preserve something for final extraction)
- **Earlier endgame rounds**: Defect unless stock preservation is needed for a bigger final payoff

## Opponent Adaptation Mechanisms

### Cooperation Detector
Track each opponent's cooperation rate:
- **High Cooperators** (>70% cooperation): Exploit ruthlessly by defecting when they cooperate
- **Mixed Players** (30-70% cooperation): Mirror their aggression level
- **Fellow Defectors** (>70% defection): Occasionally cooperate to prevent mutual destruction, but only minimally

### Stock Trajectory Analysis
Monitor stock decline rate:
- If stock is declining faster than 20% per round → Emergency cooperation for 1 round max
- If stock is stable or growing → Increase defection frequency
- If stock hits zero → Switch to pure cooperation until recovery, then resume aggression

## Edge Case Handling

### First Round
Always DEFECT to:
1. Establish aggressive reputation
2. Test opponent strategies
3. Maximize initial payoff when stock is at capacity

### Last Round
Always DEFECT - no future consequences matter

### Stock Depletion Crisis
If stock approaches zero (stock < capacity/10):
- Cooperate for minimum rounds needed to restore stock to capacity/4
- Immediately return to defection once crisis passes
- Never cooperate longer than necessary

### All-Cooperation Detection
If all other players cooperated in the previous round:
- DEFECT immediately to exploit their cooperation
- Continue defecting until they adapt or stock becomes critical

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == final_round:
    return DEFECT
    
if stock < capacity/(4*n):  // Crisis mode
    if stock < capacity/10:
        return COOPERATE  // Emergency only
    else:
        return DEFECT
        
if round <= r/3:  // Early aggression
    return DEFECT unless stock < capacity/(4*n)
    
if round > 2*r/3:  // Endgame extraction
    if stock > capacity/(2*n):
        return DEFECT
    else:
        return DEFECT if round == final_round else assess_stock_preservation()
        
// Middle game - adaptive exploitation
defector_count = count_defectors_last_round()
if stock > capacity/2:
    return DEFECT
elif defector_count > n/2 and stock < capacity/3:
    return COOPERATE  // One-time prevention
else:
    return DEFECT
```

## Key Advantages

1. **Maximizes early gains** when stock is highest
2. **Exploits cooperators** systematically
3. **Prevents total collapse** only when necessary for continued exploitation
4. **Adapts to opponent behavior** while maintaining aggressive posture
5. **Endgame optimization** extracts maximum value when consequences diminish

This strategy prioritizes individual payoff maximization while using cooperation purely as a tool to maintain exploitation opportunities, not out of any collective interest.
'''

description_AGGRESSIVE_107 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The goal is to extract maximum value while staying one step ahead of opponents.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Default Action: DEFECT**

**Rationale:** Establish dominance early and test opponent behaviors while the stock is high and can recover from aggressive play.

- **Round 1:** Always DEFECT (no history to analyze, stock is at maximum)
- **Rounds 2 to r/3:** Continue DEFECTING unless emergency cooperation is triggered

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
**Dynamic switching based on stock health and opponent patterns**

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Maximum extraction with calculated sustainability**

## Detailed Decision Rules

### Stock Health Assessment
```
Critical Stock Threshold = capacity × 0.15
Low Stock Threshold = capacity × 0.35
Healthy Stock Threshold = capacity × 0.60
```

### Primary Decision Logic (executed in order):

1. **Immediate Defection Conditions (highest priority):**
   - If current round ≥ r-2 → DEFECT (endgame extraction)
   - If stock > Healthy Stock Threshold AND round ≤ r/2 → DEFECT
   - If majority of players defected in previous round AND stock > Low Stock Threshold → DEFECT

2. **Emergency Cooperation Conditions:**
   - If stock ≤ Critical Stock Threshold AND round < r-3 → COOPERATE
   - If stock has declined for 3+ consecutive rounds AND stock ≤ Low Stock Threshold → COOPERATE

3. **Adaptive Exploitation Logic:**
   
   **Opponent Exploitation Index (OEI):**
   ```
   For each opponent j over last 3 rounds:
   - defection_rate_j = (# of defections by j) / (# of rounds observed)
   - cooperation_trend = 1 if j cooperated last round, 0 otherwise
   
   OEI = Σ(defection_rate_j × (1 - cooperation_trend_j)) / n
   ```
   
   **Exploitation Decision:**
   - If OEI > 0.6 AND stock > Low Stock Threshold → DEFECT
   - If OEI < 0.3 AND stock > Critical Stock Threshold → DEFECT (exploit cooperative opponents)

4. **Stock Recovery Gambling:**
   - If stock ≤ Low Stock Threshold but > Critical Stock Threshold:
     - Calculate projected recovery: `recovery = 2 × stock × (1 - stock/capacity)`
     - If projected stock after 1 round of cooperation > current stock × 1.3 → COOPERATE
     - Otherwise → DEFECT (resource likely doomed anyway)

### Advanced Behavioral Adaptation

**Punishment Protocol:**
- Track each opponent's cooperation/defection history
- If opponent defected when you cooperated in previous round → DEFECT for next 2 rounds
- If opponent consistently defects (>70% rate over 5+ rounds) → Always DEFECT against them

**Recovery Exploitation:**
- If stock increases by >20% from previous round → DEFECT (exploit the recovery)
- If you were the only cooperator last round and stock recovered → DEFECT immediately

### Edge Case Handling

**First Round:** Always DEFECT (establish aggressive stance)

**Last 3 Rounds:** 
- Round r-2: DEFECT unless stock ≤ Critical Threshold
- Round r-1: DEFECT (penultimate extraction)
- Round r: Always DEFECT (final extraction)

**Stock Depletion Crisis:**
- If stock = 0: COOPERATE (only hope for recovery)
- If stock approaches 0 (<5% of capacity): COOPERATE until recovery begins

**All-Opponent Cooperation:**
- If all other players cooperated last round AND stock > Low Stock Threshold → DEFECT (free-ride)

### Pseudocode Summary
```
function decide_action(round, stock, history, n, r, capacity):
    if round >= r-2: return DEFECT
    if stock <= 0.15*capacity and round < r-3: return COOPERATE
    if round == 1: return DEFECT
    if stock > 0.60*capacity and round <= r/2: return DEFECT
    
    oei = calculate_opponent_exploitation_index(history)
    if oei > 0.6 and stock > 0.35*capacity: return DEFECT
    if oei < 0.3 and stock > 0.15*capacity: return DEFECT
    
    if all_others_cooperated_last_round() and stock > 0.35*capacity: return DEFECT
    if majority_defected_last_round() and stock > 0.35*capacity: return DEFECT
    
    if stock_declining_trend() and stock <= 0.35*capacity: return COOPERATE
    
    return DEFECT  // Default aggressive stance
```

## Strategic Advantages

1. **Immediate Gains:** Prioritizes high payoffs when possible
2. **Adaptive Learning:** Adjusts based on opponent behavior patterns
3. **Crisis Management:** Preserves resource only when extinction threatens future gains
4. **Endgame Optimization:** Maximizes extraction in final rounds
5. **Opponent Punishment:** Discourages others from exploiting your cooperation
6. **Recovery Exploitation:** Takes advantage of resource rebounds

This strategy is designed to be ruthlessly opportunistic while maintaining just enough foresight to avoid complete resource collapse when it threatens future exploitation opportunities.
'''

description_AGGRESSIVE_108 = '''
# Aggressive Adaptive Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle that **aggression pays when others hesitate**. It aggressively exploits the resource while maintaining just enough restraint to avoid complete collapse, maximizing personal gain through calculated predation.

## Decision Rules

### Primary Decision Logic
```pseudocode
if round == 1:
    return DEFECT  // Always start aggressive to establish dominance

if stock <= capacity * 0.15:
    return COOPERATE  // Emergency conservation only at critical levels

if round == final_round:
    return DEFECT  // Extract maximum value on last round regardless

// Main adaptive logic based on opponent behavior patterns
cooperation_rate = count_cooperators_last_round / (n - 1)
recent_cooperation_trend = average_cooperation_rate_last_3_rounds

if cooperation_rate >= 0.7:
    return DEFECT  // Exploit cooperative opponents heavily
    
if cooperation_rate >= 0.4 AND stock >= capacity * 0.6:
    return DEFECT  // Moderate exploitation when stock is healthy
    
if recent_cooperation_trend > previous_trend AND stock >= capacity * 0.3:
    return DEFECT  // Punish emerging cooperation to maintain dominance
    
if stock >= capacity * 0.8:
    return DEFECT  // Always exploit when resource is abundant

return COOPERATE  // Minimal cooperation only when forced
```

### Adaptive Triggers

**Exploitation Windows:**
- First round (establish aggressive reputation)
- When ≥70% of opponents cooperated last round (maximum exploitation)
- When stock >80% capacity (abundant resource exploitation)
- Final round (no future consequences)
- When detecting cooperative trends emerging (disruption tactics)

**Forced Conservation (Minimal):**
- Stock ≤15% capacity (avoid complete collapse)
- When personal average payoff drops below stock/(3n) for 2+ consecutive rounds

## Edge Case Handling

### First Round
Always DEFECT to:
- Establish aggressive reputation early
- Test opponent reactions
- Maximize initial advantage when stock is at capacity

### Last Round
Always DEFECT because:
- No future retaliation possible
- Maximum extraction with zero consequences
- Others likely to cooperate thinking about "final cooperation"

### Critical Stock Levels
When stock ≤15% capacity:
- Temporarily COOPERATE to avoid zero-stock collapse
- Resume aggression once stock recovers to >25% capacity
- This prevents the complete resource destruction that would end profitable exploitation

### Opponent Adaptation
**If opponents become increasingly aggressive:**
- Maintain defection rate but monitor stock levels more carefully
- Switch to cooperation only at higher stock thresholds (20-25% instead of 15%)

**If opponents establish cooperation:**
- Immediately exploit with sustained defection
- Only cooperate if stock approaches dangerous levels

## Strategic Rationale

### Aggressive Alignment
1. **Reputation Building**: Early aggression establishes dominance and may cause opponents to cooperate out of fear of resource collapse

2. **Exploitation Maximization**: Defect whenever opponents show cooperative tendencies, extracting maximum value from their restraint

3. **Minimal Conservation**: Only cooperate when absolutely necessary to prevent complete resource collapse that would end all future gains

4. **End-game Extraction**: Final round defection ensures maximum personal utility regardless of consequences

### Robustness Features
- **Parameter Agnostic**: Thresholds scale with capacity and player count
- **History Adaptive**: Responds to opponent behavior patterns rather than fixed strategies  
- **State Responsive**: Stock level monitoring prevents suicidal overexploitation
- **Tournament Optimized**: Designed for independent strategy competition, not coordination

### Expected Performance
This strategy should excel against:
- Cooperative strategies (heavy exploitation)
- Tit-for-tat strategies (first-mover advantage)
- Conservative strategies (resource abundance exploitation)

It maintains viability against other aggressive strategies by preserving just enough resource sustainability to continue the extraction game while maximizing personal gains through calculated predation.

The key insight: **Be the wolf among sheep, but keep enough sheep alive to continue feeding.**
'''

description_AGGRESSIVE_109 = '''
# Aggressive Adaptive Strategy: "Resource Predator"

## Core Philosophy
This strategy operates on the principle of **intelligent aggression** - maximizing personal extraction while maintaining the resource base only when absolutely necessary for continued exploitation. The strategy treats cooperation as a tactical tool rather than a moral choice.

## Decision Framework

### 1. Stock Health Assessment
First, categorize the current stock level:
- **CRITICAL**: stock ≤ capacity/4
- **LOW**: capacity/4 < stock ≤ capacity/2  
- **MODERATE**: capacity/2 < stock ≤ 3*capacity/4
- **HEALTHY**: stock > 3*capacity/4

### 2. Opponent Behavior Classification
Track each opponent's cooperation rate over the last min(5, current_round-1) rounds:
- **COOPERATOR**: cooperation_rate ≥ 0.7
- **MIXED**: 0.3 < cooperation_rate < 0.7
- **DEFECTOR**: cooperation_rate ≤ 0.3

### 3. Core Decision Rules

**Round 1**: Always DEFECT
- Establish dominance immediately
- Extract maximum value from pristine resource

**Rounds 2 to r-2** (Middle Game):
```
IF stock_level == CRITICAL:
    IF majority_of_opponents_are_COOPERATORS:
        COOPERATE (exploit their restraint)
    ELSE:
        DEFECT (grab what's left before collapse)

ELIF stock_level == LOW:
    IF (cooperators > defectors) AND (rounds_remaining ≥ 3):
        COOPERATE (tactical restraint to rebuild stock)
    ELSE:
        DEFECT (insufficient recovery potential)

ELIF stock_level == MODERATE:
    IF opponent_defection_rate_last_round ≥ 0.5:
        DEFECT (punish and exploit)
    ELIF cooperators ≥ n/2:
        DEFECT (free-ride on their restraint)
    ELSE:
        COOPERATE (strategic patience)

ELIF stock_level == HEALTHY:
    DEFECT (maximum extraction opportunity)
```

**Round r-1** (Penultimate Round): 
- Always DEFECT unless stock is CRITICAL and all others cooperated last round

**Round r** (Final Round):
- Always DEFECT (no future consequences)

### 4. Advanced Tactical Elements

**Exploitation Detection**:
- If personal cumulative payoff is below average and stock > capacity/3: Switch to pure DEFECT for next 2 rounds
- If consistently outperforming others: Continue current strategy

**Endgame Acceleration**:
- If rounds_remaining ≤ 3: Increase defection probability by 50%
- If stock declining faster than 10% per round: Abandon all cooperation

**Adaptive Aggression**:
- Track the "most successful opponent" (highest cumulative payoff)
- If they defected last round and stock > capacity/4: Copy their behavior
- If falling significantly behind leader: Switch to pure defection

### 5. Edge Case Handling

**Resource Collapse Scenario** (stock ≤ capacity/8):
- COOPERATE only if ALL opponents cooperated in previous round
- Otherwise DEFECT (resource likely unsalvageable)

**Unanimous Cooperation Response**:
- If all opponents cooperated for 2+ consecutive rounds AND stock is recovering: DEFECT (maximum free-riding opportunity)

**Late-Game Desperation** (final 20% of rounds):
- Ignore long-term sustainability completely
- Focus purely on immediate payoff maximization

## Strategic Rationale

This strategy is aggressively opportunistic while maintaining just enough tactical intelligence to avoid complete resource collapse when it would be self-defeating. It:

1. **Maximizes immediate extraction** when conditions allow
2. **Punishes cooperative behavior** by free-riding whenever possible  
3. **Shows restraint only when necessary** to maintain extraction opportunities
4. **Adapts to opponent patterns** to exploit their predictability
5. **Escalates aggression** as the game progresses toward its end

The strategy assumes opponents may show some restraint and positions itself to exploit that restraint while contributing minimally to resource preservation. It's designed to perform well against both overly cooperative opponents (through exploitation) and overly aggressive opponents (by matching their aggression when the resource can't sustain cooperation anyway).
'''

description_AGGRESSIVE_110 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle that **aggression pays when others cooperate, and cutting losses is essential when others defect**. It aims to maximize short-term gains while maintaining the resource base only when beneficial for continued exploitation.

## Decision Rules

### 1. First Round Behavior
- **Always DEFECT** in round 1
- Rationale: Establish dominance early and test opponent tendencies without historical data

### 2. Stock-Based Aggression Threshold
```
aggression_threshold = capacity * 0.4
if current_stock > aggression_threshold:
    bias_toward_defection = True
else:
    bias_toward_cooperation = True
```

### 3. Opponent Exploitation Pattern
Track the **cooperation rate** of opponents over the last 3 rounds:
```
recent_coop_rate = (cooperators_in_last_3_rounds) / (3 * (n-1))

if recent_coop_rate >= 0.6:
    exploit_mode = True  // Others are cooperative, defect to exploit
elif recent_coop_rate <= 0.3:
    survival_mode = True  // Others are aggressive, cooperate to preserve stock
else:
    adaptive_mode = True  // Mixed behavior, use stock-based decision
```

### 4. Main Decision Algorithm
```
if round_number == 1:
    return DEFECT
    
if round_number == final_round:
    return DEFECT  // No future consequences
    
if current_stock <= capacity * 0.15:  // Critical depletion
    return COOPERATE  // Emergency conservation
    
if recent_coop_rate >= 0.6 AND current_stock > aggression_threshold:
    return DEFECT  // Exploit cooperative opponents
    
if recent_coop_rate <= 0.3:
    if current_stock > capacity * 0.8:
        return DEFECT  // Stock is high, can afford aggression
    else:
        return COOPERATE  // Preserve remaining stock
        
// Adaptive mode - stock-based decision with aggression bias
if current_stock > aggression_threshold:
    if random() < 0.7:  // 70% chance to defect when stock is decent
        return DEFECT
    else:
        return COOPERATE
else:
    if random() < 0.4:  // 40% chance to defect when stock is low
        return DEFECT
    else:
        return COOPERATE
```

### 5. Endgame Acceleration
```
rounds_remaining = r - current_round
if rounds_remaining <= max(2, r * 0.15):  // Last 15% of game or 2 rounds
    if current_stock > capacity * 0.25:
        return DEFECT  // Extract maximum value before game ends
```

## Edge Case Handling

### First Round
- Always defect to establish aggressive positioning and gather intelligence about opponent strategies

### Last Round
- Always defect since there are no future consequences and cooperation provides no strategic benefit

### Critical Stock Depletion (stock < 15% of capacity)
- Override all other rules and cooperate to prevent total collapse, which would eliminate future payoffs

### High Stock Situations (stock > 80% of capacity)
- Increase defection probability even in survival mode, as the resource can handle more exploitation

### All-Defector Environment
- When facing consistently aggressive opponents, switch to sporadic cooperation to maintain minimal stock levels for continued play

## Aggressive Features

1. **Exploitation Focus**: Actively seeks to take advantage of cooperative opponents
2. **First-Strike Advantage**: Opens with defection to gain early advantage
3. **Endgame Extraction**: Maximizes extraction as the game nears completion
4. **Probabilistic Aggression**: Even in "cooperation" modes, maintains significant defection probability
5. **Adaptive Predation**: Increases aggression when conditions are favorable (high stock + cooperative opponents)

## Robustness Elements

- **Stock Monitoring**: Prevents strategy from destroying the resource base completely
- **Opponent Adaptation**: Adjusts behavior based on recent opponent patterns rather than fixed assumptions
- **Multi-Mode Operation**: Switches between exploitation, survival, and adaptive modes based on game state
- **Emergency Brakes**: Hard-coded cooperation when stock reaches critical levels

This strategy is designed to be maximally aggressive while avoiding complete resource destruction, adapting to opponent behavior patterns, and extracting maximum value especially in favorable conditions or endgame scenarios.
'''

description_AGGRESSIVE_111 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximize immediate gains while strategically positioning for future exploitation. It assumes opponents are competitors to be outmaneuvered, not partners to cooperate with.

## Decision Rules

### Phase 1: Aggressive Opening (First 20% of rounds)
**Always DEFECT** in the opening phase to:
- Establish dominance and signal aggressive intent
- Maximize early payoffs when stock is highest
- Test opponent responses and gather behavioral data
- Create psychological pressure on cooperation-inclined players

### Phase 2: Adaptive Exploitation (Middle 60% of rounds)
Use a **Conditional Aggressive Response** based on:

1. **Stock Threshold Check**: If current stock < capacity/3, switch to emergency cooperation mode (play C) to prevent total collapse
2. **Opponent Exploitation Analysis**:
   - Track each opponent's cooperation rate over last 5 rounds
   - If majority of opponents show cooperation rate > 60%: **DEFECT** aggressively to exploit their restraint
   - If opponents are mostly defecting (cooperation rate < 30%): **Occasionally cooperate** (20% probability) to prevent stock death spiral
   - Mixed behavior (30-60% cooperation): **DEFECT** with 70% probability

3. **Stock Recovery Exploitation**: If stock recovered to > 80% of capacity after previous decline, immediately **DEFECT** to capitalize on the rebuilt resource

### Phase 3: Endgame Extraction (Final 20% of rounds)
**Pure extraction mode** - the goal is to maximize remaining value:
- Always **DEFECT** regardless of stock level or opponent behavior
- No concern for sustainability since the game is ending
- Extract maximum possible value from remaining rounds

## Edge Case Handling

### Round 1
**DEFECT** - Establish aggressive stance immediately and maximize payoff from pristine stock.

### Final Round
**DEFECT** - No future consequences, pure value extraction.

### Stock Near Zero (< capacity/10)
**Cooperate** only if there are more than 3 rounds remaining AND if at least 50% of opponents cooperated in the previous round. Otherwise, continue defecting to extract any remaining value.

### Unanimous Cooperation Detection
If ALL opponents cooperated in the last round AND stock is > capacity/2: **DEFECT** to be the sole exploiter of their restraint.

### Stock Oscillation Pattern
If stock has been cycling between high and low values: **DEFECT** immediately after any recovery phase to maximize gains during abundance.

## Adaptive Mechanisms

1. **Exploitation Intensity Scaling**: Increase defection probability by 10% for every opponent that shows consistent cooperation (>70% over 5 rounds)

2. **Emergency Brake**: Only if stock drops below 10% of capacity AND more than 25% of rounds remain: temporarily cooperate until stock recovers to 30% of capacity

3. **Behavioral Mimicry Trap**: If an opponent appears to be mimicking your previous move, exploit this by defecting after they cooperate in response to your cooperation

## Pseudocode Structure
```
if round <= r * 0.2:
    return DEFECT
    
if round >= r * 0.8:
    return DEFECT
    
if stock < capacity / 10 and rounds_remaining > 3:
    if opponent_cooperation_rate_last_round >= 0.5:
        return COOPERATE
    else:
        return DEFECT
        
if stock < capacity / 3:
    return COOPERATE
    
if majority_opponent_cooperation_rate > 0.6:
    return DEFECT
    
if majority_opponent_cooperation_rate < 0.3:
    return COOPERATE with 20% probability
    
return DEFECT with 70% probability
```

## Strategic Rationale
This strategy is designed to be maximally aggressive while avoiding the "tragedy of the commons" trap that would reduce total extractable value. It exploits cooperative players ruthlessly, adapts to defensive players by occasionally allowing stock recovery, and always prioritizes individual payoff maximization over collective welfare. The strategy assumes other players are competitors to be defeated, not partners to coordinate with.
'''

description_AGGRESSIVE_112 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining just enough restraint to keep the resource pool viable for continued exploitation. The key insight is that in a tournament setting, being "too nice" gets you exploited, while being completely greedy kills the golden goose.

## Decision Framework

### Phase 1: Initial Aggression (Rounds 1-3)
- **Round 1**: Always DEFECT (establish dominance and gather intelligence)
- **Rounds 2-3**: Continue DEFECTING unless stock drops below critical threshold (stock < capacity/4)

**Rationale**: Early defection maximizes initial payoffs and signals strength. Most cooperative strategies will be revealed quickly, allowing us to exploit them.

### Phase 2: Adaptive Exploitation (Middle rounds)
**Primary Rule**: DEFECT by default, but switch to COOPERATE only when necessary for resource preservation.

**Cooperation Triggers** (any one condition):
1. **Stock Depletion Threshold**: Current stock < (capacity/3)
2. **Collapse Prevention**: Predicted next-round stock would be < (capacity/6) if we defect
3. **Opponent Punishment**: More than 70% of opponents defected in the previous round AND current stock > (capacity/2)

**Defection Resumption**: Return to DEFECT immediately when:
- Stock recovers above (capacity/2), OR
- Fewer than 50% of opponents cooperated in the previous round

### Phase 3: Endgame Exploitation (Final 20% of rounds)
**Pure Aggression**: Always DEFECT regardless of stock levels.

**Rationale**: In the final rounds, there's no future to preserve. Extract maximum value while others may still be trying to maintain the resource.

## Adaptive Components

### Opponent Classification System
Track each opponent's behavior pattern:
- **Cooperators**: Mostly C, rarely punish
- **Tit-for-Tat**: Mirror previous round behavior  
- **Defectors**: Mostly D, regardless of consequences
- **Conditional**: Complex strategies based on stock/history

### Exploitation Adjustments
- Against **Cooperators**: Maximum aggression - defect whenever stock > capacity/6
- Against **Tit-for-Tat**: Alternate D-C pattern when stock is healthy (> capacity/2)
- Against **Defectors**: Cooperate only for resource preservation, never for reciprocity
- Against **Conditional**: Use their own logic against them - cooperate just enough to trigger their cooperation

## Edge Case Handling

### First Round
Always DEFECT - no history to analyze, maximize immediate gain and establish aggressive reputation.

### Stock Near Zero (< capacity/10)
Emergency cooperation: COOPERATE for exactly 2 rounds, then immediately return to defection once stock > capacity/4.

### All Opponents Cooperating
**Parasitic Mode**: DEFECT continuously while stock > capacity/3, then cooperate minimally to maintain their cooperation.

### Tie-Breaking
When decision is borderline, default to DEFECTION (aggressive bias).

## Pseudocode Structure

```
function decide_action(round, stock, history, opponent_actions):
    // Phase identification
    total_rounds = r
    endgame_threshold = 0.8 * total_rounds
    
    // Endgame: pure aggression
    if round > endgame_threshold:
        return DEFECT
    
    // Emergency cooperation
    if stock < capacity/10:
        return COOPERATE
    
    // Early aggression
    if round <= 3 and stock >= capacity/4:
        return DEFECT
    
    // Adaptive exploitation logic
    opponent_defection_rate = calculate_recent_defection_rate(opponent_actions)
    predicted_next_stock = predict_stock_after_actions(stock, assume_we_defect=true)
    
    // Cooperation triggers
    if stock < capacity/3 or 
       predicted_next_stock < capacity/6 or
       (opponent_defection_rate > 0.7 and stock > capacity/2):
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Tournament Advantages

1. **Fast Start**: Immediate high payoffs while others test the waters
2. **Exploitation Resistance**: Won't be easily taken advantage of by other aggressive strategies  
3. **Resource Management**: Maintains just enough sustainability to avoid complete collapse
4. **Adaptability**: Responds to opponent behavior patterns without being predictable
5. **Endgame Advantage**: Extracts maximum final value when others may still cooperate

This strategy is designed to be the "smart bully" - aggressive enough to dominate passive strategies, adaptive enough to handle complex opponents, and pragmatic enough to avoid killing the resource pool too early.
'''

description_AGGRESSIVE_113 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while maintaining strategic flexibility to exploit opponent weaknesses. It assumes opponents are competitors, not collaborators.

## Decision Framework

### Phase 1: Initial Aggression (Rounds 1-3)
- **Always DEFECT** regardless of game state
- **Rationale**: Establish dominance, probe opponent responses, and capture maximum early value when stock is highest
- This creates information asymmetry - we learn opponent patterns while revealing minimal information about our long-term strategy

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)

**Primary Decision Rule**: Defect unless specific conditions force cooperation

**Cooperation Triggers** (ALL must be met):
1. **Stock Crisis**: Current stock < n × (remaining_rounds + 1)
   - This ensures we don't cooperate unless resource depletion threatens future payoffs
2. **Opponent Cooperation Majority**: >50% of opponents cooperated in the previous round
   - We only reduce aggression when others have already committed to restraint
3. **Profit Threshold**: Expected payoff from cooperation in next round > 0.7 × current defection payoff
   - Maintains aggressive profit maximization even when cooperating

**Enhanced Exploitation Rules**:
- If any opponent defected in previous round AND stock > capacity/2: **Always DEFECT**
- If we've cooperated for 2+ consecutive rounds: **Immediately return to DEFECT** (prevents exploitation by opponents)
- **Punishment Trigger**: If opponents collectively consumed >60% of previous round's stock: DEFECT for next 2 rounds

### Phase 3: Endgame Aggression (Final 2 rounds)
- **Always DEFECT** in final 2 rounds
- **Rationale**: No future consequences, maximize terminal payoffs, prevent opponents from exploiting end-game cooperation

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation rate over rolling 3-round windows:
- **Aggressive** (cooperation rate <30%): Always defect against them
- **Moderate** (30-70%): Use standard decision rules
- **Cooperative** (>70%): Exploit heavily - defect when they're likely to cooperate

### Dynamic Stock Sensitivity
Adjust cooperation thresholds based on stock dynamics:
- If stock is recovering (growing >10% per round): Be more aggressive (raise cooperation thresholds)
- If stock is collapsing (declining >20% per round): Temporarily reduce aggression only if it preserves future defection opportunities

### Meta-Strategy Adaptation
- **Reputation Management**: If our defection rate >80% and stock <30% of capacity, cooperate for exactly 1 round to encourage opponent cooperation, then return to aggression
- **Momentum Exploitation**: If we successfully defected while others cooperated, increase aggression for next 2 rounds

## Pseudocode Structure

```
if round <= 3:
    return DEFECT
    
if round >= (total_rounds - 1):
    return DEFECT

# Phase 2: Adaptive exploitation
opponents_cooperated_last = count_opponent_cooperation(previous_round)
stock_crisis = (current_stock < n * (remaining_rounds + 1))
cooperation_majority = (opponents_cooperated_last / (n-1)) > 0.5
profit_threshold_met = calculate_cooperation_value() > 0.7 * calculate_defection_value()

# Check exploitation overrides
if any_opponent_defected_last_round() and current_stock > capacity/2:
    return DEFECT
    
if consecutive_cooperation_count >= 2:
    return DEFECT
    
if opponents_consumed_over_60_percent_last_round():
    punishment_rounds_remaining -= 1
    return DEFECT

# Primary decision logic
if stock_crisis and cooperation_majority and profit_threshold_met:
    return COOPERATE
else:
    return DEFECT
```

## Key Aggressive Features

1. **Default to Defection**: Cooperation requires multiple strict conditions
2. **Exploitation Focus**: Actively punish opponent cooperation patterns
3. **Information Warfare**: Reveal strategy gradually while maximizing learning
4. **Terminal Aggression**: Ensure maximum endgame extraction
5. **Anti-Coordination**: Actively disrupt opponent attempts to establish cooperative equilibria

This strategy prioritizes individual payoff maximization over collective welfare, maintains strategic unpredictability, and adapts aggressively to exploit opponent weaknesses while protecting against exploitation.
'''

description_AGGRESSIVE_114 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy treats the common pool as a resource to be maximally exploited while other players bear the cost of conservation. It operates on the principle that in a competitive environment without communication, being altruistic (always cooperating) is a losing strategy, while being purely selfish can also backfire if it destroys the resource too quickly.

## Decision Framework

### Phase 1: Early Exploitation (Rounds 1 to r/3)
- **Default Action: DEFECT**
- **Rationale**: Maximize early gains while the stock is at peak levels. Other players haven't yet learned to retaliate, so exploit their initial cooperation tendency.
- **Exception**: If stock falls below `capacity/4` in any round, switch to COOPERATE for that round only to prevent complete collapse.

### Phase 2: Adaptive Predation (Rounds r/3+1 to 2r/3)
- **Primary Rule**: Defect if stock > `capacity/2`, otherwise Cooperate
- **Exploitation Detector**: Count the number of defectors in the previous round
  - If ≥ n/2 players defected last round: DEFECT (join the feeding frenzy)
  - If < n/2 players defected last round: DEFECT if stock > `capacity/3`
- **Stock Protection**: If stock ≤ `capacity/4`, always COOPERATE (protect future exploitation opportunities)

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
- **Final Rounds Strategy**: 
  - If current round < r: Use adaptive predation rules
  - If current round = r (final round): Always DEFECT regardless of stock level
- **Rationale**: No future consequences in the final round, so maximize immediate payoff

## Detailed Decision Rules (Pseudocode)

```
function aggressive_strategy(round, stock, history, n, r, capacity):
    
    // Emergency stock protection
    if stock <= capacity/8:
        return COOPERATE
    
    // Phase determination
    early_phase = round <= r/3
    middle_phase = round > r/3 and round <= 2*r/3
    end_phase = round > 2*r/3
    
    // Final round - always defect
    if round == r:
        return DEFECT
    
    // Early phase - aggressive exploitation
    if early_phase:
        if stock >= capacity/4:
            return DEFECT
        else:
            return COOPERATE
    
    // Middle phase - adaptive predation
    if middle_phase:
        defectors_last_round = count_defectors(history[-1])
        
        if defectors_last_round >= n/2:
            // Join the crowd in exploitation
            return DEFECT
        else:
            // Be selective based on stock level
            if stock > capacity/3:
                return DEFECT
            else:
                return COOPERATE
    
    // End phase - maximize remaining value
    if end_phase:
        if stock > capacity/2:
            return DEFECT
        else:
            // Preserve some stock for final exploitation
            return COOPERATE
```

## Key Strategic Elements

### 1. Stock Level Thresholds
- **High Stock (> capacity/2)**: Always exploit - others can bear conservation costs
- **Medium Stock (capacity/4 to capacity/2)**: Conditional exploitation based on opponent behavior
- **Low Stock (< capacity/4)**: Strategic cooperation to preserve exploitation opportunities
- **Critical Stock (< capacity/8)**: Emergency cooperation to prevent total collapse

### 2. Opponent Behavior Adaptation
- **Free Rider Detection**: If many players cooperated last round, exploit their cooperation
- **Tragedy Avoidance**: If many players are defecting, sometimes join them (if stock is high) or cooperate (if stock is low)
- **Retaliation Resistance**: Don't be deterred by others' defection - focus on stock levels, not fairness

### 3. Temporal Exploitation
- **Early Game**: Maximum exploitation while stock is high and opponents are naive
- **Mid Game**: Selective exploitation based on stock health and opponent patterns
- **End Game**: Ramp up exploitation as future rounds diminish, culminating in final-round maximum extraction

## Aggressive Advantages

1. **First-Mover Advantage**: Exploits initial high stock levels before others adapt
2. **Adaptive Parasitism**: Benefits from others' cooperation without reciprocating unless necessary
3. **Strategic Patience**: Preserves the resource only when necessary for future exploitation
4. **Endgame Maximization**: Extracts maximum value when future consequences disappear
5. **Anti-Coordination**: Doesn't rely on others' cooperation, making it robust against various opponent strategies

This strategy is designed to consistently outperform pure cooperators, pure defectors, and most conditional strategies by intelligently timing exploitation phases and maintaining just enough resource sustainability to enable continued predation.
'''

description_AGGRESSIVE_115 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive resource extraction while maintaining long-term viability**. It aims to maximize personal payoffs by exploiting cooperative opponents while adapting to prevent complete resource collapse that would hurt long-term gains.

## Decision Framework

### Primary Decision Rule: Exploit-and-Adapt
The strategy follows a three-tier decision hierarchy:

1. **Exploitation Tier**: Default to defection to maximize immediate gains
2. **Sustainability Tier**: Switch to cooperation only when resource collapse threatens future payoffs
3. **Endgame Tier**: Pure defection in final rounds regardless of consequences

### Specific Decision Rules

#### Round 1: Aggressive Opening
- **Always DEFECT** in round 1
- Rationale: Establish dominance, test opponent responses, and maximize early gains when stock is at capacity

#### Rounds 2 to (r-2): Adaptive Exploitation

**Stock Threshold Analysis:**
```
critical_stock = capacity × 0.3
danger_stock = capacity × 0.15
```

**Decision Logic:**
```
if stock > critical_stock:
    DEFECT  // Stock is healthy, exploit aggressively
    
else if stock > danger_stock:
    // Conditional cooperation based on opponent behavior
    cooperation_rate = count_cooperators_last_round / n
    
    if cooperation_rate >= 0.5:
        COOPERATE  // Enough others cooperating, join to rebuild
    else:
        DEFECT  // Others still defecting, grab what's left
        
else:  // stock <= danger_stock
    // Emergency mode - forced cooperation to prevent collapse
    if stock > 0:
        COOPERATE
    else:
        DEFECT  // Nothing left to save
```

#### Rounds (r-1) and r: Endgame Exploitation
- **Always DEFECT** in the final two rounds
- Rationale: No future consequences, maximize extraction before game ends

### Adaptive Components

#### Opponent Behavior Tracking
Maintain running statistics:
- `cooperation_history[round]` = number of cooperators in each round
- `average_cooperation_rate` = rolling average of cooperation rates
- `stock_trajectory` = rate of stock decline/recovery

#### Dynamic Threshold Adjustment
```
// Adjust thresholds based on opponent aggressiveness
if average_cooperation_rate < 0.3:
    // Opponents are very aggressive, lower our cooperation threshold
    critical_stock *= 0.8
    danger_stock *= 0.7
    
else if average_cooperation_rate > 0.7:
    // Opponents are cooperative, we can be more aggressive
    critical_stock *= 1.2
    danger_stock *= 1.1
```

#### Punishment Detection and Response
```
// Detect if we're being collectively punished for defection
if (my_last_action == DEFECT) and (others_cooperation_dropped):
    punishment_counter += 1
    
    if punishment_counter >= 2:
        // Brief cooperation to reset relationships
        next_action = COOPERATE
        punishment_counter = 0
```

## Edge Case Handling

### Stock Depletion Scenarios
- **Stock = 0**: Always DEFECT (no benefit to cooperation)
- **Stock near 0 but > 0**: COOPERATE only if 50%+ of others cooperated last round
- **Stock recovery phase**: Temporarily increase cooperation threshold to rebuild

### Final Round Variations
- **If r ≤ 3**: Pure defection strategy (too short for sustainability concerns)
- **If r > 20**: More conservative thresholds early on to ensure long-term exploitation opportunities

### Opponent Pattern Recognition
```
// Detect and exploit predictable patterns
if detect_alternating_pattern(opponent_history):
    // Predict their next move and counter-exploit
    
if detect_tit_for_tat_players():
    // Occasional cooperation to maintain their cooperation
    strategic_cooperation_frequency += 0.1
```

## Robustness Features

1. **Multi-level fallbacks**: If primary strategy fails, fall back to simpler heuristics
2. **Stock recovery monitoring**: Continuously assess if the resource can sustain continued exploitation
3. **Endgame detection**: Recognize when game is ending and switch to pure extraction mode
4. **Opponent diversity handling**: Different responses for different opponent archetypes (always-cooperate, always-defect, adaptive, etc.)

## Key Advantages

- **Maximizes immediate payoffs** through default defection stance
- **Prevents mutual destruction** through emergency cooperation protocols
- **Exploits cooperative opponents** while they maintain the resource
- **Adapts to opponent strategies** without being exploited long-term
- **Endgame optimization** ensures maximum final extraction

This strategy is designed to consistently outperform both purely cooperative and purely defective strategies by intelligently balancing short-term exploitation with long-term resource sustainability, always erring on the side of aggression when uncertainty exists.
'''

description_AGGRESSIVE_116 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for continued exploitation. The key insight is that in a tournament setting, being "nice" gets you exploited, so we must be the exploiter.

## Decision Framework

### Primary Decision Rule: Conditional Defection
**Default Action: DEFECT** unless specific conditions force cooperation.

### Cooperation Conditions (ALL must be met):
1. **Stock Preservation Threshold**: Current stock ≤ capacity × 0.3
2. **Rounds Remaining**: More than 2 rounds left in the game
3. **Exploitation History**: We've successfully exploited opponents in previous rounds (gained advantage)

### Pseudocode Structure:
```
if (current_stock <= capacity * 0.3 AND rounds_remaining > 2 AND we_have_exploited):
    return COOPERATE
else:
    return DEFECT
```

## Detailed Strategy Components

### 1. Opening Aggression (First Round)
**Action: DEFECT**
- Immediate signal of aggressive intent
- Tests opponent strategies early
- Maximizes early gains when stock is at maximum

### 2. Exploitation Tracking
Maintain running metrics:
- **Advantage Score**: Our cumulative payoff minus average opponent payoff
- **Opponent Cooperation Rate**: Percentage of opponents who cooperated in previous rounds
- **Resource Depletion Rate**: How quickly the stock is declining

### 3. Mid-Game Adaptation
**Rounds 2 to (r-2):**

**If stock > capacity × 0.5:** 
- Continue defecting regardless of opponent behavior
- This is prime exploitation territory

**If capacity × 0.3 < stock ≤ capacity × 0.5:**
- Defect unless we've gained significant advantage AND opponents show high cooperation rates
- Cooperation threshold: We must be ahead by at least 20% in cumulative payoffs

**If stock ≤ capacity × 0.3:**
- Emergency cooperation mode to prevent resource collapse
- But only if there are enough rounds left to benefit from recovery

### 4. End-Game Exploitation (Final 2 rounds)
**Always DEFECT in the last 2 rounds**
- No future consequences to worry about
- Maximum extraction before game ends
- Even if stock is critically low, grab what you can

### 5. Opponent Classification and Response

**Against Consistent Cooperators:**
- Maximize exploitation by always defecting
- They'll maintain the resource for us to harvest

**Against Tit-for-Tat or Reciprocal Strategies:**
- Maintain defection unless resource critically endangered
- Accept their retaliation as cost of aggressive strategy

**Against Other Aggressive Strategies:**
- Race to the bottom - defect aggressively
- Focus on getting more than them in the short term

### 6. Stock Recovery Exploitation
When stock begins recovering due to others' cooperation:
- **Immediately switch back to defection** once stock > capacity × 0.4
- Don't let recovery go to waste on "fair sharing"

### 7. Adaptive Thresholds
Adjust cooperation threshold based on game progress:
- **Early game (first 25% of rounds)**: Threshold = capacity × 0.2 (almost never cooperate)
- **Mid game (middle 50% of rounds)**: Threshold = capacity × 0.3 (standard)
- **Late game (final 25% excluding last 2 rounds)**: Threshold = capacity × 0.4 (slightly more conservative)

## Edge Case Handling

### Stock Depletion Scenarios:
- **Stock approaches 0**: Only cooperate if rounds_remaining > 3 AND we're currently leading in payoffs
- **Stock = 0**: Game effectively over, defect in remaining rounds for any residual value

### Tie-Breaking:
- When exactly at threshold values, **bias toward defection**
- Aggressive strategy means taking calculated risks

### Information Uncertainty:
- If opponent behavior is unclear, assume they're also aggressive
- Better to over-exploit than under-exploit in tournament setting

## Strategic Rationale

1. **Maximize Early Gains**: Get the largest share when resources are abundant
2. **Exploit Cooperators**: Let others maintain the resource while we harvest disproportionately  
3. **Minimize Unnecessary Cooperation**: Only preserve resources when absolutely critical for continued exploitation
4. **End-Game Dominance**: Ensure maximum extraction in final rounds when cooperation has no future value
5. **Tournament Advantage**: In competitive settings, consistent aggression often outperforms "fair" strategies

This strategy is designed to be ruthlessly effective against both cooperative and semi-aggressive opponents while maintaining just enough resource consciousness to avoid complete collapse when it would hurt our own long-term extraction potential.
'''

description_AGGRESSIVE_117 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated sustainability**. The goal is to extract as much immediate value as possible while maintaining just enough resource stability to continue exploitation in future rounds.

## Decision Framework

### Phase 1: Aggressive Opening (Rounds 1-2)
**Always DEFECT** in the first two rounds regardless of parameters.

*Rationale*: Establish dominance early, test opponent responses, and maximize initial payoffs when stock is at peak capacity. This aggressive opening signals strength and may intimidate cooperative opponents.

### Phase 2: Adaptive Exploitation (Rounds 3 to r-2)

#### Primary Decision Rule: Stock-Based Aggression
```
IF current_stock >= capacity * 0.6:
    DEFECT (exploit high stock levels)
ELSE IF current_stock >= capacity * 0.3:
    Apply Opponent Exploitation Logic
ELSE:
    Apply Emergency Sustainability Check
```

#### Opponent Exploitation Logic
Track the cooperation rate of all opponents over the last 3 rounds:
```
cooperation_rate = (total_C_actions) / (total_actions_by_opponents)

IF cooperation_rate >= 0.6:
    DEFECT (exploit cooperative opponents)
ELSE IF cooperation_rate <= 0.3:
    IF stock > capacity * 0.4: DEFECT
    ELSE: COOPERATE (temporary tactical retreat)
ELSE:
    Apply Momentum Strategy
```

#### Momentum Strategy
```
IF (my_defections_last_3_rounds / 3) > 0.6 AND stock >= capacity * 0.35:
    DEFECT (maintain aggressive momentum)
ELSE:
    COOPERATE (tactical reset to avoid total collapse)
```

#### Emergency Sustainability Check
```
IF current_stock < capacity * 0.15:
    COOPERATE (prevent total resource collapse)
ELSE:
    IF opponents_mostly_defected_last_round:
        DEFECT (join the destruction if others are doing it)
    ELSE:
        COOPERATE
```

### Phase 3: Endgame Maximization (Last 2 rounds)

#### Round r-1 (Second to Last):
```
IF current_stock >= capacity * 0.4:
    DEFECT (final major extraction)
ELSE IF current_stock >= capacity * 0.2:
    IF majority_of_opponents_cooperated_last_round:
        DEFECT (exploit their cooperation)
    ELSE:
        DEFECT (join the feeding frenzy)
ELSE:
    DEFECT (nothing left to preserve)
```

#### Round r (Final Round):
**Always DEFECT** - Extract maximum value since there's no future to preserve.

## Adaptive Elements

### Reputation Tracking
Maintain aggression scores for each opponent:
```
aggression_score[opponent] = defection_rate_last_5_rounds

IF average_opponent_aggression > 0.7:
    Increase own defection threshold by 0.1
ELSE IF average_opponent_aggression < 0.3:
    Maintain high exploitation of cooperative opponents
```

### Dynamic Threshold Adjustment
```
base_stock_threshold = capacity * 0.6

adjusted_threshold = base_stock_threshold * (1 - average_opponent_aggression * 0.3)

// This means: the more aggressive opponents are, the lower our threshold for defection
```

### Punishment Mechanism
```
IF any_opponent_defected_when_stock_was_critical (< capacity * 0.2):
    Mark opponent as "destroyer"
    Against destroyers: Always defect when stock > capacity * 0.25
```

## Edge Case Handling

1. **First Round**: Always DEFECT (establish dominance)
2. **Stock = 0**: COOPERATE (only option for regeneration)
3. **All opponents always cooperate**: Always DEFECT (maximum exploitation)
4. **All opponents always defect**: Match their aggression, DEFECT unless stock < capacity * 0.1
5. **Single opponent (n=2)**: More cautious - reduce defection thresholds by 0.1

## Aggressive Characteristics

1. **Front-loaded Exploitation**: Maximizes early gains when resources are abundant
2. **Cooperative Opponent Punishment**: Systematically exploits players who show cooperation
3. **Endgame Ruthlessness**: No mercy in final rounds
4. **Calculated Risk-Taking**: Defects even at moderate stock levels if opponents seem cooperative
5. **Momentum Maintenance**: Once aggressive, stays aggressive until forced to retreat
6. **Resource Manipulation**: Uses cooperation strategically only to maintain exploitation opportunities

This strategy prioritizes individual payoff maximization while maintaining just enough restraint to prevent complete resource collapse that would eliminate future exploitation opportunities. It's designed to dominate cooperative strategies while competing effectively against other aggressive approaches.
'''

description_AGGRESSIVE_118 = '''
# Aggressive Common Pool Resource Strategy: "Opportunistic Exploiter"

## Core Philosophy
This strategy maximizes individual payoffs through calculated exploitation while maintaining long-term viability. It aggressively capitalizes on others' cooperation but strategically preserves the resource when necessary for future exploitation.

## Decision Rules

### Primary Decision Logic
```
IF (current_round == 1) THEN
    Action = DEFECT  // Establish dominance early
    
ELSE IF (stock_level < n) THEN  // Crisis threshold
    Action = COOPERATE  // Emergency preservation
    
ELSE IF (current_round == final_round) THEN
    Action = DEFECT  // Nothing left to lose
    
ELSE IF (exploitation_opportunity_detected()) THEN
    Action = DEFECT  // Capitalize on others' cooperation
    
ELSE IF (punishment_required()) THEN
    Action = DEFECT  // Retaliate against defectors
    
ELSE
    Action = strategic_choice()  // Context-dependent calculation
```

### Key Strategic Components

**1. Exploitation Detection**
- **Cooperative Majority Rule**: If ≥60% of opponents cooperated in the previous round, DEFECT to exploit their restraint
- **Trend Analysis**: If cooperation rate has increased over the last 2-3 rounds, DEFECT to maximize advantage
- **Stock Abundance**: If stock > 1.5 × capacity/2, DEFECT aggressively as resource is plentiful

**2. Punishment Protocol**
- **Defection Response**: If >50% of opponents defected last round, DEFECT to avoid being exploited
- **Persistent Defector Targeting**: Track players who defect consistently (>70% of rounds) and always defect when they're active

**3. Strategic Cooperation (Minimal)**
- **Resource Crisis**: Only cooperate when stock < n (immediate collapse threat)
- **Endgame Setup**: Cooperate in round r-2 IF stock is critically low AND there are multiple rounds remaining (to enable final exploitation)

**4. Adaptive Thresholds**
```
cooperation_threshold = max(n, capacity * 0.1)  // 10% of capacity or n players
exploitation_threshold = capacity * 0.6         // 60% of capacity
```

### Edge Case Handling

**First Round**: Always DEFECT
- Establishes aggressive reputation
- Tests opponent strategies
- Maximizes early payoff when stock is at capacity

**Last Round**: Always DEFECT
- No future consequences
- Pure payoff maximization
- Others expect this, so no reputational cost

**Near-Depletion (stock < n)**: COOPERATE
- Prevents total resource collapse
- Preserves future exploitation opportunities
- Shows calculated rather than reckless aggression

**Mid-Game Dynamics**:
- Monitor cooperation patterns every 3 rounds
- If opponents are learning to cooperate more, increase defection rate
- If resource is recovering (stock increasing), exploit immediately

### Robust Adaptations

**Against Cooperative Strategies**: 
- Exploit consistently while keeping stock barely viable
- Defect 80-90% of the time

**Against Other Aggressive Strategies**:
- Match their aggression to avoid being uniquely exploited
- Cooperate only when resource collapse is imminent

**Against Tit-for-Tat or Reciprocal Strategies**:
- Alternate between cooperation and defection to confuse pattern recognition
- Exploit their predictable responses

**Against Random Strategies**:
- Focus on stock level management
- Defect when stock is high, cooperate when critically low

### Implementation Pseudocode

```
function aggressive_strategy(current_round, stock, history, n, r, capacity):
    
    // Emergency preservation
    if stock < n:
        return COOPERATE
    
    // First and last round exploitation
    if current_round == 1 OR current_round == r:
        return DEFECT
    
    // Calculate opponent cooperation rate in last round
    last_round_coop_rate = count_cooperators(history[-1]) / (n-1)
    
    // Exploit high cooperation
    if last_round_coop_rate >= 0.6:
        return DEFECT
    
    // Calculate recent trend (last 3 rounds)
    if len(history) >= 3:
        recent_coop_trend = avg_cooperation_rate(history[-3:])
        if recent_coop_trend > 0.5 AND stock > capacity * 0.4:
            return DEFECT
    
    // Retaliate against majority defection
    if last_round_coop_rate < 0.3:
        return DEFECT
    
    // Stock abundance exploitation
    if stock > capacity * 0.7:
        return DEFECT
    
    // Default: strategic defection with 70% probability
    if stock > capacity * 0.3:
        return DEFECT  // 70% of remaining cases
    else:
        return COOPERATE  // Conservative when stock is low
```

## Strategic Advantages

1. **Early Dominance**: Aggressive first move establishes reputation and maximizes initial payoff
2. **Exploitation Focus**: Consistently capitalizes on others' cooperative behavior
3. **Crisis Management**: Prevents total collapse while minimizing cooperation
4. **Adaptive Punishment**: Responds to aggression without being overly retaliatory
5. **Endgame Maximization**: Extracts maximum value in final rounds

This strategy prioritizes individual payoff maximization while maintaining just enough resource sustainability to enable continued exploitation. It's designed to outperform both overly cooperative and overly aggressive strategies through calculated opportunism.
'''

description_AGGRESSIVE_119 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: maximize immediate gains while maintaining the resource base only when absolutely necessary for continued exploitation. The strategy treats cooperation as a tactical tool for resource preservation, not an end goal.

## Decision Framework

### Round 1: Opening Aggression
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponent responses, and capture maximum initial value before others potentially deplete the resource

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Decision Rule:**
```
IF (stock/capacity < 0.15) THEN
    Cooperate (resource preservation mode)
ELSE IF (stock/capacity < 0.3 AND majority_defected_last_round) THEN  
    Cooperate (tactical restraint)
ELSE IF (predicted_total_defectors >= n/2) THEN
    Defect (join the feeding frenzy)
ELSE
    Defect (default aggressive stance)
```

**Opponent Classification System:**
Track each opponent over last 3 rounds:
- **Aggressive**: Defected 3/3 times
- **Cooperative**: Cooperated 3/3 times  
- **Adaptive**: Mixed behavior

**Exploitation Logic:**
- If ≥50% opponents are Cooperative → Always DEFECT (exploit the cooperators)
- If ≥70% opponents are Aggressive → Situational cooperation only for resource preservation
- If mixed field → DEFECT unless resource critically low

### Final Round: Maximum Extraction
- **Always DEFECT** in the final round
- Rationale: No future consequences, extract maximum value regardless of resource state

### Critical Thresholds

**Resource Preservation Trigger:**
- Stock < 15% of capacity → Forced cooperation to prevent total collapse
- This ensures the resource survives for continued exploitation

**Feeding Frenzy Detection:**
- If ≥75% of players defected in the previous round AND stock > 30% capacity → Join the defection wave
- Prevents being the "sucker" who cooperates while others grab resources

**Recovery Exploitation:**
- After any round where stock grows significantly (>20% increase) → Immediately DEFECT to capture the recovery

### Adaptive Components

**Momentum Tracking:**
- Monitor 3-round moving average of stock levels
- If declining trend continues for 3+ rounds → Increase cooperation threshold to 25% capacity
- If stable/growing → Maintain aggressive 15% threshold

**Opponent Punishment:**
- Track individual opponent "betrayals" (when they defect after you cooperated)
- Against high-betrayal opponents (>60% betrayal rate) → Never cooperate unless resource critically low (<10% capacity)

**Late Game Intensification:**
- In final 25% of rounds → Reduce cooperation threshold to 10% capacity
- Maximize extraction as game approaches end

## Strategic Rationale

1. **Aggressive by Default**: The strategy assumes defection unless specific conditions warrant cooperation
2. **Exploitation Focus**: Treats cooperation as a tool to preserve the resource for continued exploitation, not for fairness
3. **Adaptive Response**: Adjusts tactics based on opponent behavior while maintaining aggressive core
4. **End-Game Dominance**: Ensures maximum extraction when future consequences disappear
5. **Resource Management**: Prevents complete collapse only to maintain exploitation opportunities

This strategy is designed to consistently capture above-average payoffs by aggressively exploiting cooperative opponents while using minimal cooperation to prevent resource collapse that would hurt everyone's long-term extraction potential.
'''

description_AGGRESSIVE_120 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive opportunist that maximizes immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. It assumes all opponents are potential threats and exploits any signs of cooperation ruthlessly.

## Decision Rules

### Primary Decision Logic:
```
IF round == 1:
    DEFECT (establish dominance immediately)
    
ELIF round == final_round:
    DEFECT (no future to consider)
    
ELIF stock <= capacity * 0.15:
    COOPERATE (emergency preservation mode)
    
ELIF recent_exploitation_opportunity_detected():
    DEFECT (punish cooperators)
    
ELIF stock >= capacity * 0.8 AND majority_defected_recently():
    DEFECT (resource is abundant, grab share before others)
    
ELIF consecutive_mutual_cooperation_count >= 3:
    DEFECT (break cooperation to test responses)
    
ELSE:
    COOPERATE (strategic patience)
```

### Key Behavioral Components:

**1. Immediate Aggression (Round 1)**
- Always DEFECT in round 1 to establish an aggressive reputation
- Signal that you're not a pushover and will take maximum share when possible

**2. Exploitation Detection**
- Track each opponent's cooperation rate over last 3 rounds
- If ANY opponent has cooperated in 2+ of last 3 rounds → DEFECT
- Rationale: Punish and exploit any signs of restraint

**3. Resource Threshold Management**
- If stock < 15% of capacity → COOPERATE (survival mode)
- If stock > 80% of capacity → DEFECT (abundance exploitation)
- Between 15-80%: Apply tactical rules

**4. Endgame Aggression**
- DEFECT in final round regardless of stock level
- In final 20% of rounds: Lower cooperation threshold (only cooperate if stock < 25% capacity)

**5. Cooperation Breaking**
- If mutual cooperation has occurred for 3+ consecutive rounds → DEFECT
- This tests if opponents will retaliate or continue cooperating
- Prevents falling into predictable cooperation patterns

**6. Adaptive Punishment**
- Track individual player behaviors
- If a specific player has defected against your cooperation → always DEFECT against them
- Maintain grudges throughout the game

### Edge Case Handling:

**First Round:** Always DEFECT to establish aggressive stance

**Stock Depletion Crisis:** If stock falls below critical threshold (15% capacity), temporarily COOPERATE but immediately return to aggression once stock recovers above 25%

**All Opponents Defecting:** Continue DEFECT - if everyone is being aggressive, ensure you get your maximum share

**Opponent Pattern Recognition:** If opponents show cyclical patterns (e.g., cooperate every 3rd round), time DEFECTs to coincide with their cooperation

### Strategic Rationale:

1. **Front-loaded Gains:** Prioritize early high payoffs when stock is at maximum
2. **Reputation Management:** Build reputation as aggressive player to potentially intimidate opponents
3. **Opportunistic Exploitation:** Immediately capitalize on any opponent cooperation
4. **Calculated Preservation:** Only preserve resource when absolutely necessary for continued exploitation
5. **No Mercy:** Assume all opponents are competitors, never true allies

### Pseudocode Summary:
```
function aggressive_predator_decision(stock, round, history, n, capacity, total_rounds):
    
    if round == 1 or round == total_rounds:
        return DEFECT
    
    stock_ratio = stock / capacity
    
    if stock_ratio <= 0.15:
        return COOPERATE  # Emergency mode
    
    if any_opponent_cooperated_recently(history, 3):
        return DEFECT  # Exploit cooperators
    
    if stock_ratio >= 0.8 and majority_defected_recently(history, 2):
        return DEFECT  # Grab abundant resources
    
    if mutual_cooperation_streak(history) >= 3:
        return DEFECT  # Break cooperation patterns
    
    if round > 0.8 * total_rounds and stock_ratio > 0.25:
        return DEFECT  # Endgame aggression
    
    return COOPERATE  # Strategic patience
```

This strategy is designed to be maximally aggressive while avoiding complete resource collapse, ensuring sustained opportunities for exploitation throughout the game.
'''

description_AGGRESSIVE_121 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on aggressive resource extraction while maintaining the pool's viability for continued exploitation. The key insight is that being "aggressive" doesn't mean being shortsighted - it means maximizing total extraction over all rounds while denying opponents the benefits of cooperation.

## Decision Framework

### Primary Decision Rule: Stock-Based Threshold System
```
if stock > capacity * 0.6:
    play D (exploit high abundance)
elif stock < capacity * 0.2:
    play C (preserve dying resource)
else:
    use adaptive decision based on opponent behavior
```

### Adaptive Behavioral Analysis
Track each opponent's cooperation rate over the last 3 rounds:
- **Exploitable opponents** (cooperation rate > 60%): Always play D against them
- **Aggressive opponents** (cooperation rate < 30%): Mirror their aggression with D
- **Mixed opponents** (30-60%): Use stock level as tie-breaker

### Round-Specific Modifiers

**First Round**: Always play D
- Establishes aggressive reputation immediately
- Tests opponent responses
- Maximizes early extraction when stock is highest

**Last Round**: Always play D
- No future consequences to consider
- Pure profit maximization

**Final 25% of rounds**: Increase defection probability by 50%
- Endgame extraction becomes priority
- Reduced concern for sustainability

## Detailed Strategy Logic

### Phase 1: Early Rounds (First 25%)
1. **Round 1**: Defect unconditionally
2. **Rounds 2-early**: 
   - If stock > 70% capacity: Defect
   - If any opponent defected in previous round: Defect
   - Otherwise: Cooperate only if ALL opponents cooperated last round

### Phase 2: Middle Rounds (25-75%)
Apply the stock threshold system with behavioral adaptation:

```pseudocode
if stock > 0.6 * capacity:
    return DEFECT
elif stock < 0.2 * capacity:
    return COOPERATE
else:
    defection_score = 0
    for each opponent:
        recent_cooperation_rate = opponent_cooperations_last_3_rounds / 3
        if recent_cooperation_rate > 0.6:
            defection_score += 2  // Exploit cooperators
        elif recent_cooperation_rate < 0.3:
            defection_score += 1  // Match aggression
        
    if defection_score >= n/2:
        return DEFECT
    else:
        return COOPERATE
```

### Phase 3: Endgame (Final 25%)
Escalate aggression:
- Multiply defection_score by 1.5
- If stock > 0.4 * capacity: Always defect
- Only cooperate if stock < 0.15 * capacity AND all opponents cooperated last round

## Edge Case Handling

**Stock Depletion Crisis** (stock < 10% capacity):
- Emergency cooperation mode
- Play C for 2 consecutive rounds maximum
- If stock doesn't recover above 15% capacity, resume defection

**Perfect Cooperation Detection**:
- If all opponents have cooperated for 3+ consecutive rounds AND stock is growing
- Defect every 3rd round to extract maximum benefit while maintaining their cooperation

**Reputation Recovery**:
- If caught in mutual defection spiral (all players defecting for 3+ rounds)
- Play C for exactly 1 round, then immediately return to normal strategy
- This tests if others will reciprocate without showing weakness

## Aggressive Advantages

1. **Immediate Dominance**: First-round defection establishes aggressive reputation
2. **Exploitation Focus**: Specifically targets and punishes cooperative players
3. **Endgame Acceleration**: Increases aggression as game concludes
4. **Minimal Cooperation**: Only cooperates when absolutely necessary for resource preservation
5. **Adaptive Punishment**: Escalates against opponents who try to match aggression

## Strategic Robustness

- **Against Cooperators**: Maximum exploitation while maintaining just enough resource
- **Against Mixed Strategies**: Uses their own cooperation against them
- **Against Pure Defectors**: Matches aggression while seeking extraction opportunities
- **Against Adaptive Strategies**: Constantly shifts between behavioral patterns to avoid predictability

This strategy prioritizes aggressive extraction while maintaining the strategic intelligence to preserve the resource when absolutely necessary. It assumes opponents are competitors to be outmaneuvered, not partners to coordinate with.
'''

description_AGGRESSIVE_122 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing immediate gains while strategically preserving the resource only when absolutely necessary for future exploitation. The key insight is that in a tournament setting, being "nice" gets you exploited, so we need to be the exploiter.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Rule: Always DEFECT**
- Rationale: Establish dominance and test opponent responses
- Maximize early gains when stock is highest
- Force opponents into defensive positions
- Exception: None - pure aggression

### Phase 2: Strategic Adaptation (Rounds r/3+1 to 2r/3)
**Primary Rule: Conditional Defection**

```pseudocode
IF (current_stock < capacity * 0.3):
    IF (defection_rate_others > 0.6):
        COOPERATE  // Damage control
    ELSE:
        DEFECT     // Continue exploitation
ELSE:
    IF (my_cumulative_advantage > 0):
        DEFECT     // Press advantage
    ELSE:
        Analyze opponent patterns:
        IF (opponents_mostly_cooperative):
            DEFECT  // Exploit weakness
        ELSE:
            COOPERATE  // Tactical retreat
```

### Phase 3: Endgame Exploitation (Rounds 2r/3+1 to r)
**Rule: Maximum Extraction**
- Always DEFECT in final 20% of rounds
- Rationale: No future consequences, extract maximum value
- Exception: If stock < n (insufficient for all players), then COOPERATE only if it ensures non-zero payoff

## Adaptive Components

### 1. Opponent Classification System
Track each opponent as:
- **Exploitable** (cooperation rate > 70%): Always defect against them
- **Retaliator** (mirrors your last action): Alternate D-C-D pattern to maximize gains
- **Random** (inconsistent pattern): Default to defection
- **Fellow Aggressor** (defection rate > 70%): Occasional cooperation for resource preservation

### 2. Stock Threshold Management
```pseudocode
critical_threshold = n * 1.5  // Minimum viable stock
danger_threshold = n * 0.8    // Emergency preservation mode

IF (stock < danger_threshold):
    cooperation_probability = 0.8
ELIF (stock < critical_threshold):
    cooperation_probability = 0.4
ELSE:
    cooperation_probability = 0.1
```

### 3. Cumulative Advantage Tracking
```pseudocode
my_advantage = my_total_payoff - average_opponent_payoff

IF (my_advantage > capacity * 0.2):
    // Commanding lead - can afford some cooperation
    increase_cooperation_probability_by(0.2)
ELIF (my_advantage < -capacity * 0.1):
    // Behind - go full aggressive
    force_defection = TRUE
```

## Edge Case Handling

### First Round
- **Always DEFECT** - Set aggressive tone, maximize initial gain when stock is at capacity

### Last Round
- **Always DEFECT** - No future consequences, pure extraction

### Stock Depletion Crisis
If stock approaches zero (< n):
- Switch to **emergency cooperation** for exactly one round
- Resume defection immediately after stock recovers above critical threshold

### All Opponents Cooperating
- **Continue defecting** - This is optimal exploitation scenario
- Only cooperate if stock drops below critical threshold

### All Opponents Defecting
- **Join the feeding frenzy** - Defect to avoid being the only one getting minimal payoff
- Monitor for first opponent to switch to cooperation, then occasionally cooperate to prevent total collapse

## Tournament-Specific Adaptations

### Against Unknown Strategies
- Start with maximum aggression (defect first 3 rounds minimum)
- Use opponent behavior in rounds 2-4 to classify their strategy type
- Exploit any detected patterns ruthlessly

### Resource Preservation Logic
Only preserve the resource when:
1. Stock < critical_threshold AND rounds_remaining > r/4
2. My cumulative payoff is already ahead by significant margin
3. Opponent behavior suggests they will cooperate if I do

### Psychological Warfare
- Establish reputation as aggressive player early
- Use unpredictable cooperation sparingly to confuse opponent adaptation
- Never show mercy in final rounds

## Key Advantages
1. **Maximizes early gains** when stock is highest
2. **Adapts to opponent behavior** without being exploitable
3. **Preserves resources strategically** only when necessary for continued exploitation
4. **Immune to coordination attempts** - benefits from others' cooperation without reciprocating
5. **Tournament-optimal** - designed to outperform across diverse opponent types

This strategy embodies controlled aggression - ruthless when possible, tactical when necessary, but always prioritizing personal gain over collective welfare.
'''

description_AGGRESSIVE_123 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy is built on the principle of **aggressive opportunism**: maximize immediate gains while maintaining just enough restraint to prevent complete resource collapse. The strategy assumes all opponents are potential threats and seeks to exploit any cooperative behavior while protecting against coordinated defection.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to min(3, r/4))
**Objective**: Establish dominance and test opponent responses

- **Round 1**: Always DEFECT
  - Rationale: Maximum immediate payoff, no consequences yet, establishes aggressive stance
  
- **Rounds 2-3**: Continue DEFECTING unless stock falls below critical threshold
  - Critical threshold = capacity × 0.3
  - If stock < threshold: Switch to COOPERATE to prevent collapse
  - Otherwise: Continue DEFECTING

### Phase 2: Adaptive Exploitation (Middle rounds)
**Objective**: Exploit patterns while maintaining resource viability

**Primary Rule**: DEFECT if any of these conditions are met:
1. **Exploitation Opportunity**: If ≥50% of opponents cooperated in the previous round
2. **Stock Abundance**: Current stock > capacity × 0.7
3. **Endgame Proximity**: Fewer than 3 rounds remaining
4. **Punishment Trigger**: If I cooperated last round but received below-average payoff relative to my defection payoff

**Cooperation Conditions** (COOPERATE only if ALL are true):
1. Stock < capacity × 0.4 (sustainability concern)
2. <40% of opponents defected in previous round
3. More than 3 rounds remaining
4. I defected in at least 2 of the last 3 rounds (prevent being seen as purely cooperative)

### Phase 3: Endgame Exploitation (Final 20% of rounds)
**Objective**: Extract maximum value before game ends

- **Final 3 rounds**: Always DEFECT regardless of stock level
  - Rationale: No future consequences, maximize remaining extraction
  
- **Rounds leading up to final 3**: DEFECT unless stock < capacity × 0.2
  - Exception: If stock is critically low, alternate C-D to maintain minimal resource flow

## Adaptive Components

### Opponent Behavior Tracking
Track three metrics across all rounds:
- **Cooperation Rate**: % of opponents who cooperated each round
- **Volatility**: How much opponent behavior changes between rounds
- **Exploitation Vulnerability**: How often opponents cooperate after I defect

### Dynamic Thresholds
Adjust cooperation thresholds based on opponent behavior:
- If opponents are >70% cooperative: Become more aggressive (lower cooperation threshold to capacity × 0.25)
- If opponents are >70% defective: Become more conservative (raise cooperation threshold to capacity × 0.5)
- If stock consistently grows: Become more exploitative (prioritize defection)

### Punishment Protocol
If opponents seem to be coordinating against me:
- Detect coordination: If >75% of opponents switch from cooperation to defection simultaneously
- Response: Immediate defection for next 2 rounds, then reassess

## Edge Case Handling

### Stock Near Zero (< capacity × 0.1)
- Emergency cooperation: COOPERATE for exactly 2 rounds
- Then immediately return to aggressive posture
- Rationale: Minimal cooperation to prevent total collapse, then resume exploitation

### All Opponents Always Cooperate
- Defect every round except every 4th round
- Rationale: Maintain just enough stock growth to continue exploitation

### All Opponents Always Defect
- Mirror their defection except when stock < capacity × 0.15
- Rationale: If everyone is defecting, defecting yourself at least ensures you get equal share of remaining resources

### Highly Volatile Opponents
- Increase defection frequency by 25%
- Rationale: In chaotic environments, grab what you can when you can

## Pseudocode Structure

```
function decide_action(round, stock, capacity, n, r, history):
    # Phase determination
    if round <= min(3, r/4):
        return early_phase_logic(round, stock, capacity)
    elif round > r * 0.8:
        return endgame_logic(round, stock, capacity, r)
    else:
        return adaptive_exploitation(round, stock, capacity, history)

function adaptive_exploitation(round, stock, capacity, history):
    opponent_coop_rate = calculate_last_round_cooperation(history)
    stock_ratio = stock / capacity
    
    # Aggressive conditions
    if opponent_coop_rate >= 0.5:
        return DEFECT
    if stock_ratio > 0.7:
        return DEFECT
    if detect_exploitation_opportunity(history):
        return DEFECT
        
    # Cooperation conditions (all must be true)
    if stock_ratio < 0.4 AND opponent_coop_rate > 0.6 AND not_recently_cooperative():
        return COOPERATE
    
    return DEFECT  # Default aggressive stance
```

## Strategic Advantages

1. **First-Mover Advantage**: Establishes aggressive reputation early
2. **Opportunistic**: Exploits any cooperative behavior immediately  
3. **Adaptive**: Adjusts to opponent patterns while maintaining aggression
4. **Resource-Aware**: Prevents complete collapse only when necessary
5. **Endgame Optimized**: Maximizes final extraction when future doesn't matter

This strategy is designed to consistently outperform purely cooperative strategies while being robust against other aggressive approaches through its adaptive thresholds and sustainability safeguards.
'''

description_AGGRESSIVE_124 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **opportunistic aggression** - maximizing immediate gains while strategically managing the resource to ensure continued exploitation opportunities. The key insight is that being consistently aggressive is often self-defeating, so we need calculated aggression that adapts to both resource state and opponent behavior.

## Decision Framework

### Primary Decision Rule: Dynamic Threshold System
The strategy uses a **stock-dependent aggression threshold** that determines when to defect:

```
aggression_threshold = base_threshold + stock_bonus + opponent_pressure + endgame_factor

Defect if: (stock > aggression_threshold) OR (tactical_defection_conditions_met)
Otherwise: Cooperate
```

### Component Calculations

**Base Threshold:**
```
base_threshold = capacity / (4 * n)
```
This ensures we're aggressive when resources are abundant relative to player count.

**Stock Bonus:**
```
stock_bonus = max(0, (stock - capacity/2) / capacity) * (capacity/n)
```
Increases aggression when stock is above 50% of capacity.

**Opponent Pressure:**
```
recent_defection_rate = (defections_in_last_3_rounds) / (3 * n)
opponent_pressure = recent_defection_rate * (capacity / (2 * n))
```
If others are defecting frequently, we become more aggressive to not be exploited.

**Endgame Factor:**
```
rounds_remaining = r - current_round
if rounds_remaining <= max(3, r/5):
    endgame_factor = (stock / n) * (1 - rounds_remaining / max(3, r/5))
else:
    endgame_factor = 0
```
Aggressive endgame exploitation in final 20% of rounds or last 3 rounds.

## Tactical Defection Conditions

Even if the threshold isn't met, defect if any of these apply:

1. **Punishment Mode**: If in the last round >60% of players defected, defect this round regardless of stock level
2. **Exploitation Detection**: If my cooperation rate is >20% higher than the average opponent's rate over the last 5 rounds, defect
3. **Critical Mass**: If stock < capacity/4 and I haven't defected in the last 2 rounds, defect (grab remaining value)
4. **Reciprocity Trigger**: If the same player(s) have defected against my cooperation 2+ times in recent history, defect when stock > capacity/3

## Edge Case Handling

### First Round
- Defect if n ≤ 3 (small groups, be immediately aggressive)
- Defect if capacity/n > 30 (high individual capacity suggests aggressive play is sustainable)
- Otherwise cooperate (gather information)

### Last Round
- Always defect (no future consequences)

### Stock Depletion Scenarios
- If stock < capacity/10: Cooperate unless others are still defecting (preserve what's left)
- If stock = 0: Cooperate (nothing to gain from defection)

### Information Gathering Phase (Rounds 2-3)
Track opponent patterns:
- Count chronic defectors (defect rate > 70%)
- Identify cooperators (defect rate < 30%)
- Adjust aggression: +20% threshold reduction for each chronic defector beyond n/3

## Adaptive Elements

### Learning Component
```
if current_round >= 4:
    my_avg_payoff = sum(my_payoffs) / current_round
    group_avg_payoff = sum(all_payoffs) / (current_round * n)
    
    if my_avg_payoff < group_avg_payoff * 0.9:
        # I'm being exploited, increase aggression
        base_threshold *= 0.8
    elif my_avg_payoff > group_avg_payoff * 1.3:
        # I'm doing very well, can afford to be slightly less aggressive
        base_threshold *= 1.1
```

### Stock Recovery Management
If stock has grown by >20% from previous round:
- Temporary aggression boost: reduce threshold by 25% for next 2 rounds
- Rationale: Exploit recovery periods before others notice

## Strategic Rationale

1. **Early Aggression with Information Gathering**: Start aggressive in small groups or high-capacity scenarios, otherwise probe first
2. **Dynamic Adaptation**: Constantly adjust aggression based on resource state and opponent behavior
3. **Exploitation Prevention**: Punish consistent defectors and don't let cooperation rate get too imbalanced
4. **Endgame Maximization**: Extract maximum value in final rounds when reputation doesn't matter
5. **Resource State Awareness**: More aggressive when resources are abundant, conservative when depleted (but not too conservative)

This strategy is aggressive by nature but avoids the trap of mindless defection that would quickly deplete the resource and reduce total gains. It's designed to outperform both naive cooperators and naive defectors while adapting to sophisticated opponents.
'''

description_AGGRESSIVE_125 = '''
# AGGRESSIVE ADAPTIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy treats the common pool as a battleground where aggressive exploitation is necessary for survival. It assumes all opponents are potential threats and focuses on maximizing personal gain while strategically timing cooperation only when absolutely necessary for long-term resource availability.

## Decision Framework

### Phase 1: Early Aggression (Rounds 1 to r/3)
**Default Action: DEFECT**
- **Rationale**: Establish dominance early and extract maximum value while stock is high
- **Exception**: If stock falls below capacity/4 in any round, switch to COOPERATE for exactly one round to prevent collapse, then resume defecting

### Phase 2: Adaptive Exploitation (Rounds r/3+1 to 2r/3)
**Dynamic Response Based on Stock Health and Opponent Behavior**

```pseudocode
if stock < capacity/3:
    if (defectors_last_round / n) > 0.6:
        COOPERATE  // Prevent tragedy when others are too aggressive
    else:
        DEFECT     // Exploit cooperative opponents
else:
    if (defectors_last_round / n) < 0.3:
        DEFECT     // Punish and exploit cooperators
    else:
        if stock > capacity/2:
            DEFECT // Stock is healthy, be aggressive
        else:
            COOPERATE // Preserve remaining stock
```

### Phase 3: Endgame Maximization (Rounds 2r/3+1 to r)
**Increasingly Aggressive Finish**

```pseudocode
rounds_remaining = r - current_round + 1

if rounds_remaining == 1:
    DEFECT  // Always defect on final round
else if stock < capacity/4:
    if rounds_remaining <= 2:
        DEFECT  // Extract everything in final rounds
    else:
        COOPERATE  // One last attempt to preserve stock
else:
    // Stock is decent, be aggressive
    if (cooperators_last_round / n) > 0.5:
        DEFECT  // Exploit cooperative opponents
    else:
        // Mix of strategies - slightly favor defection
        if rounds_remaining % 2 == 0:
            DEFECT
        else:
            if stock > capacity/3:
                DEFECT
            else:
                COOPERATE
```

## Special Rules & Edge Cases

### First Round
**Always DEFECT** - No information about opponents, stock is at maximum, establish aggressive stance

### Stock Collapse Prevention
```pseudocode
if stock <= capacity/10:
    COOPERATE  // Emergency cooperation to prevent total collapse
```

### Opponent Tracking
Maintain running statistics:
- **Aggression Index**: (Total defections by others) / (Total possible defections by others)
- **Recent Trend**: Defection rate in last 3 rounds vs overall rate

### Punishment Mechanism
```pseudocode
if opponent_aggression_index > 0.7 AND stock > capacity/2:
    DEFECT for next 2 rounds  // Punish overly aggressive players
```

## Adaptive Elements

1. **Stock Sensitivity**: More likely to cooperate when stock is critically low, but always returns to aggression once stock recovers

2. **Opponent Exploitation**: Heavily punishes cooperative opponents by defecting when they cooperate

3. **Endgame Acceleration**: Becomes increasingly aggressive as game approaches end, with guaranteed defection in final round

4. **Emergency Cooperation**: Only cooperates when absolutely necessary to prevent resource collapse that would hurt own payoffs

## Strategic Advantages

- **Maximizes Early Gains**: Captures disproportionate value when stock is highest
- **Exploits Cooperation**: Punishes and takes advantage of cooperative opponents
- **Prevents Exploitation**: Difficult for others to predict and exploit
- **Preserves Options**: Strategic cooperation prevents complete stock collapse while maintaining aggressive stance
- **Endgame Optimization**: Ensures maximum extraction in final rounds when future cooperation is impossible

This strategy is designed to be ruthlessly self-interested while maintaining just enough strategic restraint to keep the resource pool viable for continued exploitation.
'''

description_AGGRESSIVE_126 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **controlled aggression with opportunistic exploitation**. The goal is to maximize personal payoffs while maintaining the resource pool just enough to continue extraction. We view cooperation as weakness unless it serves our direct advantage.

## Decision Framework

### Phase Classification
The strategy divides the game into three phases based on remaining rounds:

1. **Exploitation Phase** (rounds 1 to r-3): Focus on maximum extraction
2. **Transition Phase** (rounds r-2 to r-1): Strategic positioning 
3. **Endgame Phase** (round r): Pure defection regardless of consequences

### Primary Decision Rules

#### Round 1: Immediate Defection
- **Action: DEFECT**
- **Rationale**: Establish dominance early, test opponent responses, and maximize initial extraction when stock is at capacity

#### Exploitation Phase Strategy (rounds 2 to r-3):

**Base Aggression Level**: Start with high defection probability that adapts based on:

1. **Stock Sustainability Check**: 
   - If `current_stock < capacity * 0.3`: Consider cooperation to avoid collapse
   - If `current_stock >= capacity * 0.6`: Defect aggressively
   - If `0.3 ≤ current_stock < 0.6`: Mixed strategy based on opponent behavior

2. **Opponent Exploitation Score**:
   - Track cooperation rate of each opponent over last 3 rounds
   - If majority of opponents have cooperation_rate > 0.6: **DEFECT** (exploit the cooperators)
   - If majority have cooperation_rate < 0.3: **COOPERATE** occasionally to prevent total collapse
   - Otherwise: **DEFECT** with 70% probability

3. **Momentum Tracking**:
   - If stock has been declining for 2+ consecutive rounds AND current_stock < capacity * 0.4: **COOPERATE** once to allow recovery
   - If stock increased last round: **DEFECT** to capitalize on the recovery

#### Transition Phase Strategy (rounds r-2 to r-1):

**Goal**: Position for maximum final extraction while preventing premature collapse

- **Round r-2**: 
  - If `current_stock < capacity * 0.25`: **COOPERATE** (preserve stock for final extraction)
  - If opponents showed >50% defection in last 2 rounds: **DEFECT** (they're not trustworthy anyway)
  - Otherwise: **DEFECT** with 60% probability

- **Round r-1**:
  - If `current_stock < n * 2`: **COOPERATE** (ensure sufficient stock exists for final round extraction)
  - Otherwise: **DEFECT** (maximize second-to-last round extraction)

#### Endgame Strategy (round r):
- **Action: Always DEFECT**
- **Rationale**: No future rounds mean no consequences for stock depletion

### Edge Case Handling

1. **Stock Near Zero** (`stock < n`):
   - Forced cooperation for 1 round only, then return to aggressive strategy
   - Exception: If it's the final round, still defect

2. **All Opponents Consistently Defect**:
   - If >80% opponent actions in last 3 rounds were defections: Match their aggression with pure defection until stock recovery forces a pause

3. **Unexpected Cooperation Wave**:
   - If >70% of opponents suddenly cooperate for 2+ rounds: Exploit heavily with defection while the opportunity lasts

4. **Stock Oversaturation** (`stock > capacity * 0.9`):
   - Defect with 90% probability - abundance should be harvested aggressively

### Adaptive Learning Components

The strategy maintains running statistics:
- **Opponent Predictability Index**: Track how predictable each opponent's behavior is
- **Resource Recovery Rate**: Monitor how quickly stock recovers after cooperation waves
- **Personal Extraction Efficiency**: Compare personal gains vs. stock depletion caused

### Pseudocode Structure

```
function AggressiveStrategy(round, stock, capacity, n, r, history):
    phase = classify_phase(round, r)
    
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    stock_ratio = stock / capacity
    opponent_coop_rate = calculate_recent_cooperation_rate(history, 3)
    
    if phase == "EXPLOITATION":
        if stock_ratio < 0.3 and declining_trend(history, 2):
            return COOPERATE  // Emergency preservation
        elif opponent_coop_rate > 0.6:
            return DEFECT     // Exploit cooperators
        elif stock_ratio > 0.6:
            return DEFECT     // Abundant resources
        else:
            return DEFECT with probability 0.7
    
    elif phase == "TRANSITION":
        if round == r-1 and stock < n*2:
            return COOPERATE  // Preserve for final extraction
        else:
            return DEFECT with probability 0.6
    
    return DEFECT  // Default aggressive stance
```

## Strategic Advantages

1. **First-Mover Dominance**: Immediate aggression establishes psychological advantage
2. **Opportunistic Exploitation**: Punishes cooperative opponents while they're vulnerable
3. **Calculated Preservation**: Maintains just enough stock to continue personal extraction
4. **Endgame Maximization**: Extracts maximum value when consequences don't matter
5. **Adaptive Aggression**: Modulates intensity based on opponents and resource state

This strategy prioritizes personal payoff maximization through controlled aggression while maintaining just enough resource sustainability to continue profitable extraction throughout the game.
'''

description_AGGRESSIVE_127 = '''
# Aggressive Adaptive Resource Extraction Strategy (AARES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism with calculated sustainability**. It aims to maximize individual payoffs by exploiting cooperative opponents while maintaining just enough resource conservation to prevent complete collapse when beneficial.

## Decision Framework

### Primary Decision Rule: Stock-Based Aggression Threshold
```
If current_stock < capacity * 0.3:
    Action = COOPERATE (survival mode)
Else:
    Action = DEFECT (exploitation mode)
```

### Adaptive Modifiers

#### 1. Opponent Behavior Tracker
Track cooperation rate of all opponents over the last 3 rounds:
- **High Cooperation (>70% of opponents cooperated)**: Increase aggression - DEFECT more frequently
- **High Defection (>70% of opponents defected)**: Match aggression but with strategic cooperation bursts

#### 2. Round Position Adjustments

**First Round**: Always DEFECT
- No reputation costs yet
- Maximum information gathering about opponents
- Establishes aggressive stance early

**Early Rounds (rounds 2-4)**: 
- DEFECT unless stock drops below 40% of capacity
- Test opponent responses and establish dominance

**Mid-Game (rounds 5 to r-3)**:
- Apply primary stock threshold rule
- If opponents are mostly cooperative and stock > 60% capacity: DEFECT aggressively
- If detecting coordinated retaliation: Occasional strategic cooperation (1 in 4 rounds) to reset opponent behavior

**End Game (last 3 rounds)**:
- **Final round**: Always DEFECT (no future consequences)
- **Second-to-last round**: DEFECT unless stock < 20% capacity
- **Third-to-last round**: DEFECT unless sustained cooperation could yield higher total end-game payoffs

#### 3. Exploitation Detection System
Monitor for "free riders" - opponents who consistently cooperate:
- If ≥50% of opponents cooperated in the last 2 rounds AND current stock > 40% capacity: DEFECT
- If detecting a single consistent cooperator: Target them by defecting whenever they're likely to cooperate

#### 4. Resource Crash Prevention
Emergency cooperation trigger:
```
If (current_stock < capacity * 0.15) OR 
   (stock has declined for 3+ consecutive rounds AND current_stock < capacity * 0.25):
    COOPERATE for 2 consecutive rounds, then reassess
```

### Strategic Patterns

#### Pattern Breaking
- Never cooperate for more than 2 consecutive rounds (except in emergency)
- Randomly defect even when cooperation might seem optimal (10% chance) to prevent opponents from exploiting predictability

#### Retaliation Response
If opponents are coordinating punishment:
- **Immediate response**: Match their aggression for 1 round
- **Recovery**: Single cooperation round to signal potential for détente
- **Reassessment**: Return to primary decision framework

#### Information Exploitation
- Track which opponents tend to mirror behavior vs. those with fixed strategies
- Exploit predictable opponents by defecting when they're likely to cooperate
- Against adaptive opponents, use mixed strategies to maintain unpredictability

## Edge Case Handling

**Stock Depletion Crisis**: If stock approaches zero, switch to full cooperation until stock recovers to >30% capacity

**All Opponents Defecting**: If >90% opponent defection rate detected, match their behavior but look for opportunities to defect first when they might cooperate

**Capacity Reached**: When stock equals capacity, this is optimal time for aggressive defection as resource base is maximized

## Psychological Warfare Elements

1. **Establish Early Dominance**: Heavy defection in first 25% of rounds
2. **Unpredictable Cooperation**: Occasional unexpected cooperation to confuse opponent strategies
3. **End-Game Aggression**: Maximize final rounds extraction regardless of consequences

## Summary
AARES prioritizes individual payoff maximization through strategic aggression while maintaining just enough resource conservation to prevent game-ending collapse. It adapts to opponent behavior patterns, exploits cooperative players, and uses unpredictability to avoid being exploited itself. The strategy is designed to win in a tournament setting by being more aggressive than cooperative strategies while being more sustainable than purely destructive ones.
'''

description_AGGRESSIVE_128 = '''
# Aggressive Resource Extraction Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximizing immediate extraction while maintaining strategic sustainability**. It assumes all opponents are potential threats and prioritizes personal gain over collective welfare, but with enough intelligence to avoid complete resource collapse when it would hurt long-term returns.

## Decision Rules

### Primary Decision Framework
```pseudocode
if (round == 1):
    return DEFECT  // Establish dominance immediately

if (stock <= n):  // Critical depletion threshold
    return COOPERATE  // Emergency conservation mode

if (round >= 0.8 * total_rounds):  // Final phase exploitation
    return DEFECT

// Main adaptive logic
aggression_score = calculate_aggression_score()
if (aggression_score >= defection_threshold):
    return DEFECT
else:
    return COOPERATE
```

### Aggression Score Calculation
The strategy calculates an aggression score based on multiple factors:

1. **Exploitation Ratio**: `(my_total_payoff) / (average_opponent_payoff)`
   - If I'm behind, increase aggression to catch up
   - If I'm ahead, maintain moderate aggression to stay ahead

2. **Stock Abundance**: `current_stock / capacity`
   - Higher stock = higher aggression (more to exploit)
   - Lower stock = reduced aggression (preserve remaining resources)

3. **Opponent Cooperation Rate**: `(total_C_plays) / (total_plays_observed)`
   - Higher cooperation = higher aggression (exploit cooperators)
   - Lower cooperation = moderate aggression (match competitive environment)

4. **Time Pressure**: `remaining_rounds / total_rounds`
   - Fewer rounds remaining = higher aggression (end-game exploitation)

### Specific Decision Thresholds

**DEFECT when:**
- Round 1 (establish aggressive stance)
- Stock > 1.5 * capacity (abundant resources to exploit)
- My payoff is significantly below average (> 15% behind)
- Opponent cooperation rate > 70% (exploit cooperators)
- Final 20% of rounds (end-game extraction)
- Stock is in "safe exploitation zone" (between n and 1.5*n)

**COOPERATE when:**
- Stock ≤ n (emergency conservation to prevent collapse)
- All opponents defected in previous round AND stock < 0.5*capacity (avoid tragedy)
- I'm significantly ahead (>25% above average) AND stock is declining
- Very early resource collapse detected (stock drops below 0.3*capacity before round 0.3*r)

## Edge Case Handling

### First Round
Always DEFECT to:
- Establish aggressive reputation
- Test opponent responses
- Maximize early extraction when stock is at capacity

### Last Round
Always DEFECT - no future consequences, pure extraction maximization

### Resource Collapse Prevention
If stock drops to critical levels (≤ n), switch to COOPERATE until stock recovers above 1.5*n. This prevents complete resource exhaustion that would eliminate all future payoffs.

### Opponent Adaptation Detection
Track opponent strategy changes:
- If opponents suddenly shift to more cooperation, increase aggression to exploit
- If opponents form apparent coalitions against me, temporarily reduce aggression to avoid complete isolation

## Strategic Advantages

1. **First-Mover Aggression**: Establishes dominance early when resources are abundant
2. **Adaptive Exploitation**: Increases aggression against cooperative opponents
3. **Strategic Preservation**: Prevents complete collapse that would hurt everyone
4. **End-Game Maximization**: Extracts maximum value when reputation no longer matters
5. **Opportunistic**: Takes advantage of any signs of opponent weakness or cooperation

## Robustness Features

- **Anti-Collapse Mechanism**: Prevents the strategy from contributing to complete resource depletion
- **Competitive Response**: Matches aggression when facing other aggressive strategies  
- **Exploitation Mode**: Maximizes extraction against overly cooperative opponents
- **Dynamic Thresholds**: Adjusts decision-making based on game state and opponent behavior

This strategy prioritizes personal payoff maximization while maintaining enough strategic intelligence to avoid scenarios that would eliminate all future gains. It's designed to be ruthlessly effective against a wide range of opponent strategies while avoiding self-destructive behavior.
'''
