"""
Strategy descriptions for PublicGoodsDescription.

Generated with:
- Provider: Anthropic
- Model: claude-sonnet-4-0
"""


description_COOPERATIVE_1 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive self-protection, aiming to foster cooperation while defending against exploitation. It operates on the principle of "generous reciprocity" - being cooperative by default but responding proportionally to others' behavior.

## Strategy Components

### 1. Decision Rules

**Cooperation Threshold System:**
- Calculate a dynamic "cooperation threshold" τ based on recent group behavior
- Cooperate if the expected benefit of cooperation exceeds the expected cost
- The threshold adapts based on the group's cooperative history

**Main Decision Rule:**
```
IF round = 1: COOPERATE
ELSE:
    cooperation_rate = recent_group_cooperation_rate(last_min(5, current_round-1) rounds)
    expected_benefit = (k/n) * cooperation_rate * (n-1) + (k/n) * 1  // assuming I cooperate
    expected_cost = 1
    
    IF expected_benefit ≥ expected_cost * adjustment_factor:
        COOPERATE
    ELSE:
        DEFECT
```

**Adjustment Factor Calculation:**
```
adjustment_factor = base_threshold + forgiveness_bonus - exploitation_penalty
where:
- base_threshold = 0.8  // Slight bias toward cooperation
- forgiveness_bonus = max(0, 0.3 - rounds_since_last_cooperation/10)  // Decay over time
- exploitation_penalty = min(0.4, consecutive_defections/20)  // Increase with exploitation
```

### 2. Edge Cases

**First Round:** Always COOPERATE
- Establishes cooperative intent
- Provides initial signal to other potential cooperators
- No information loss since there's no history to base decisions on

**Last Round (if known):** 
- IF group_cooperation_rate > 0.6 in last 3 rounds: COOPERATE
- ELSE: DEFECT
- Rationale: Reward sustained cooperation, but don't be exploited by end-game defection

**Early Rounds (2-3):**
- Maintain high cooperation threshold (0.9 adjustment factor)
- Give the group time to establish cooperative patterns
- Only defect if faced with universal defection

### 3. Adaptive Mechanisms

**Memory Window:** 
- Primary window: Last 5 rounds (or all available if fewer)
- Extended memory: Track long-term patterns over all rounds for trend analysis

**Reputation Tracking:**
```
For each player j:
    recent_cooperation_rate[j] = cooperations_by_j / interactions_with_j (last 5 rounds)
    trend[j] = cooperation_rate_change over last 3 rounds
```

**Group Assessment:**
- Track overall group cooperation rate
- Identify if group is trending toward more or less cooperation
- Adjust strategy based on group momentum

### 4. Robust Cooperation Features

**Graduated Response:**
- Don't immediately retaliate against single defections
- Require sustained non-cooperation before reducing cooperation
- Allow for "mistakes" and temporary strategy changes by opponents

**Recovery Mechanism:**
- Every 10 rounds, temporarily increase cooperation threshold by 0.2
- This "olive branch" attempts to restart cooperation even after periods of mutual defection
- Helps escape defection spirals

**Proportional Reciprocity:**
```
IF group_cooperation_rate ≥ 0.8: Always COOPERATE (reward high cooperation)
IF group_cooperation_rate ∈ [0.4, 0.8): Apply standard threshold
IF group_cooperation_rate ∈ [0.2, 0.4): Increase threshold to 1.1 (more selective)
IF group_cooperation_rate < 0.2: DEFECT (protect against exploitation)
```

### 5. Parameter Sensitivity

**High k values (k > n/2):**
- Lower cooperation threshold (more willing to cooperate)
- Cooperation is more profitable, so take more risks

**Low k values (k close to 1):**
- Higher cooperation threshold (more cautious)
- Cooperation barely profitable, so be selective

**Large n (many players):**
- Focus more on group trends than individual behavior
- Use longer memory windows for more stable estimates

## Strategy Summary

ARCS is designed to:
1. **Start cooperatively** to signal good intentions
2. **Adapt to group behavior** using recent cooperation rates
3. **Maintain cooperation bias** through generous thresholds
4. **Protect against exploitation** via graduated responses
5. **Attempt recovery** from defection spirals through periodic olive branches
6. **Scale appropriately** with game parameters

The strategy is robust because it doesn't rely on specific opponent behaviors or coordination mechanisms, instead adapting to whatever patterns emerge in the group dynamics while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_2 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperation with self-protection by being generous in nature but responsive to the collective behavior of all players. It aims to foster cooperation while avoiding exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and give others the benefit of the doubt

### Rounds 2 to r-1: Adaptive Response
The strategy tracks the **cooperation momentum** of the group:

1. **Calculate Cooperation Rate**: 
   - `cooperation_rate = total_cooperators_last_round / n`

2. **Apply Generous Threshold**:
   - If `cooperation_rate ≥ 0.5`: **Cooperate**
   - If `cooperation_rate < 0.5`: **Defect**

3. **Forgiveness Mechanism**:
   - If you defected last round due to low cooperation, but `cooperation_rate` in the last round was ≥ 0.3, then **cooperate** (give the group another chance)

### Final Round (Round r): Conditional Cooperation
- If the cooperation rate in round r-1 was ≥ 0.4: **Cooperate**
- Otherwise: **Defect**
- Rationale: Slightly lower threshold for final round to reward groups that showed reasonable cooperation

## Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    last_round_cooperators = count_cooperators(history[round-1])
    cooperation_rate = last_round_cooperators / n
    
    if round == r:  # Final round
        if cooperation_rate >= 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    # Rounds 2 to r-1
    if cooperation_rate >= 0.5:
        return COOPERATE
    
    # Forgiveness check
    if my_last_action == DEFECT and cooperation_rate >= 0.3:
        return COOPERATE
    
    if cooperation_rate < 0.5:
        return DEFECT
    
    return COOPERATE  # Default to cooperation
```

## Key Features

### 1. **Collective Focus**
- Responds to overall group behavior rather than individual player actions
- Avoids getting trapped in bilateral conflicts

### 2. **Generous Nature**
- Uses 50% cooperation threshold (not majority)
- Includes forgiveness mechanism for borderline cases
- Starts optimistically

### 3. **Adaptive Protection**
- Won't be exploited by predominantly defecting groups
- Reduces threshold slightly in final round to reward partial cooperation

### 4. **Momentum Sensitivity**
- Recognizes that cooperation can build over time
- Gives groups second chances through forgiveness mechanism

## Robustness Against Different Opponent Types

- **Against Always Cooperate**: Will cooperate throughout, maximizing mutual benefit
- **Against Always Defect**: Will defect after round 1, protecting against exploitation
- **Against Tit-for-Tat variants**: Will establish cooperation if the group reaches 50%+ cooperation
- **Against Random players**: Will adapt to the actual cooperation level emerging
- **Against Complex adaptive strategies**: The momentum-based approach should find equilibria with other reasonable strategies

## Expected Performance
This strategy should perform well in diverse environments by:
1. Establishing cooperation when possible
2. Avoiding exploitation when necessary
3. Being forgiving enough to repair occasional breakdowns
4. Maintaining simplicity to avoid over-optimization to specific opponents

The 50% threshold is designed to work well across different values of n and k, as it represents a natural balance point for collective action problems.
'''

description_COOPERATIVE_3 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy balances cooperation with adaptive responses to others' behavior, using graduated reciprocation to maintain cooperation while protecting against exploitation.

## Decision Rules

### 1. First Round
**Always cooperate (C)** to signal cooperative intent and establish a positive foundation.

### 2. Cooperation Threshold System
Maintain a **dynamic cooperation threshold** based on recent group behavior:

- **Base threshold**: Start at 50% (half the players should cooperate for continued cooperation)
- **Adaptive adjustment**: After each round, adjust threshold based on observed cooperation rate
- **Forgiveness factor**: Include gradual threshold reduction to allow recovery from low-cooperation periods

### 3. Main Decision Logic

```pseudocode
For round t (where t > 1):
    cooperation_rate = count_cooperators_last_round / n
    
    // Update dynamic threshold
    if cooperation_rate >= current_threshold:
        current_threshold = max(0.3, current_threshold - 0.05)  // Gradual forgiveness
    else:
        current_threshold = min(0.7, current_threshold + 0.1)   // Protect against defection
    
    // Decision rule
    if cooperation_rate >= current_threshold:
        return COOPERATE
    else:
        return DEFECT
```

### 4. Endgame Handling
**Last 20% of rounds or final 3 rounds (whichever is smaller)**:
- If group cooperation rate over last 5 rounds ≥ 60%: Continue cooperating
- If group cooperation rate over last 5 rounds < 60%: Switch to conditional cooperation based on previous round only
- **Final round**: Cooperate if ≥ 50% cooperated in the penultimate round

### 5. Recovery Mechanism
**"Fresh Start" Protocol**: If cooperation rate falls below 20% for 3 consecutive rounds:
- Reset threshold to 40% (lower than initial)
- Cooperate for next 2 rounds regardless of others' actions
- Then resume normal threshold-based decisions

## Strategic Features

### Cooperative Elements
- **Initial cooperation** signals good intentions
- **Graduated reciprocation** allows for recovery from mutual defection
- **Endgame cooperation** maintains public good when others are likely to cooperate
- **Fresh start mechanism** prevents permanent defection spirals

### Adaptive Elements
- **Dynamic thresholds** respond to the specific group's cooperation tendencies
- **Historical weighting** considers recent behavior more heavily than distant past
- **Parameter sensitivity** adjusts expectations based on observed patterns

### Robust Elements
- **Exploitation protection** via threshold increases when cooperation is low
- **Noise tolerance** through gradual adjustments rather than immediate reactions
- **Multiple equilibrium support** can sustain cooperation at various levels

## Edge Case Handling

1. **All others always defect**: Strategy will eventually defect after threshold adjustments, minimizing losses
2. **All others always cooperate**: Strategy will maintain cooperation with decreasing threshold
3. **Mixed/random behavior**: Strategy adapts threshold to find sustainable cooperation level
4. **Strategic deception** (fake cooperation followed by defection): Threshold system provides protection while allowing genuine cooperation to resume

## Expected Performance
- **Against cooperators**: Maintains mutual cooperation efficiently
- **Against defectors**: Limits exploitation while remaining open to cooperation
- **In mixed groups**: Finds and sustains optimal cooperation levels
- **Tournament setting**: Performs well across diverse opponent types without requiring specific coordination

This strategy embodies cooperative principles while remaining strategically sound and adaptive to the wide range of behaviors expected in a tournament setting.
'''

description_COOPERATIVE_4 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically but learns from the group's behavior to maintain sustainable cooperation while protecting against free-riders.

## Decision Rules

### 1. Opening Phase (First Round)
**Always cooperate (C)** - Start with goodwill to signal cooperative intent and test the group's disposition.

### 2. Main Phase (Rounds 2 to r-1)
Use a **dual-threshold system** based on group cooperation rate:

**Calculate group cooperation rate from previous round:**
```
cooperation_rate = (number_of_cooperators_last_round) / n
```

**Decision logic:**
- If `cooperation_rate ≥ 0.6`: **Cooperate (C)**
  - High cooperation warrants continued trust
- If `cooperation_rate ≤ 0.3`: **Defect (D)**  
  - Low cooperation suggests hostile environment, protect yourself
- If `0.3 < cooperation_rate < 0.6`: **Apply forgiveness rule**
  - Cooperate if you cooperated last round (maintain momentum)
  - Defect if you defected last round (cautious re-entry)

### 3. Endgame Phase (Final Round)
**Cooperate if long-term cooperation rate ≥ 0.4, otherwise defect**

Calculate long-term cooperation rate:
```
long_term_rate = (total_cooperations_by_others) / ((r-1) × (n-1))
```

This rewards groups that maintained reasonable cooperation throughout the game.

## Adaptive Features

### Memory System
- **Recent bias**: Previous round weighted at 60%, earlier rounds at 40%
- **Trend detection**: Track if cooperation is increasing/decreasing over last 3 rounds

### Anti-Exploitation Protection
- **Defection streak limit**: If you've defected 3+ consecutive rounds due to low group cooperation, attempt one "olive branch" cooperation to test if the group has reformed
- **Personal contribution tracking**: Never let your personal cooperation rate fall below 30% unless group cooperation is consistently below 20%

### Forgiveness Mechanism
- After defecting due to low group cooperation, return to cooperation if group rate rises above 0.5 in any single round
- Gradually lower cooperation threshold requirements if the game has many rounds (r > 10) to allow for longer-term relationship building

## Robustness Features

1. **Parameter Sensitivity**: Higher k values (more beneficial cooperation) lower the thresholds by 0.1 to encourage more cooperation

2. **Group Size Adaptation**: 
   - Large groups (n > 8): Slightly more forgiving thresholds since coordination is harder
   - Small groups (n ≤ 4): Slightly stricter thresholds since defection is more impactful

3. **Round Length Adaptation**:
   - Short games (r ≤ 5): More cooperative to establish relationships quickly
   - Long games (r > 15): More patient with temporary defection spells

## Edge Case Handling

- **All others always defect**: Eventually switch to permanent defection after 3 rounds of 0% group cooperation
- **Chaotic behavior**: If cooperation rate variance is very high (swinging between extremes), use conservative 0.5 threshold
- **Near-universal cooperation**: If group cooperation ≥ 90% for 3+ consecutive rounds, always cooperate regardless of other rules

## Strategic Rationale

This strategy is designed to:
1. **Signal cooperation** early to encourage reciprocity
2. **Reward group cooperation** with continued cooperation  
3. **Punish widespread defection** to avoid exploitation
4. **Remain forgiving** to allow recovery from mutual defection cycles
5. **Adapt to game length** and group dynamics
6. **Protect against pure exploitation** while maintaining cooperative potential

The dual-threshold system creates stability zones that prevent rapid oscillation between cooperation and defection, while the forgiveness mechanisms ensure the strategy doesn't get permanently stuck in defection spirals with potentially reformed groups.
'''

description_COOPERATIVE_5 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation levels and graduated responses to others' behavior.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3)
- **Round 1**: Always cooperate (C) to signal cooperative intent
- **Rounds 2-3**: Cooperate if at least 50% of players cooperated in the previous round, otherwise defect

### Main Game Phase (Rounds 4 to r-2)
Use a **cooperation threshold** that adapts based on observed behavior:

1. **Calculate cooperation rate**: `coop_rate = (total_cooperators_last_round) / n`

2. **Determine base threshold**: 
   - If `k/n > 0.5`: Use threshold = 0.3 (encouraging cooperation when public good is efficient)
   - If `k/n ≤ 0.5`: Use threshold = 0.5 (more cautious when public good is less efficient)

3. **Adaptive adjustment**:
   - Track average cooperation rate over last 3 rounds: `avg_coop_3`
   - If `avg_coop_3 > 0.7`: Lower threshold by 0.1 (be more trusting)
   - If `avg_coop_3 < 0.3`: Raise threshold by 0.2 (be more defensive)

4. **Decision**: Cooperate if `coop_rate ≥ adjusted_threshold`

### Forgiveness Mechanism
- If defected for 2+ consecutive rounds due to low cooperation, attempt cooperation once every 3 rounds to test if cooperation can be restored
- This prevents permanent punishment cycles

### End Game Phase (Last 2 rounds: r-1, r)
- **Round r-1**: Cooperate if cooperation rate in previous round ≥ 0.4
- **Round r**: Mirror the most common action from round r-1 (cooperate if majority cooperated, defect if majority defected)

## Pseudocode

```
STRATEGY: Graduated_Reciprocator

INITIALIZE:
  base_threshold = 0.5 if (k/n <= 0.5) else 0.3
  consecutive_defections = 0
  cooperation_history = []

FOR each round t:
  
  IF t == 1:
    RETURN C
  
  ELIF t <= 3:
    prev_coop_rate = count_cooperators(t-1) / n
    RETURN C if prev_coop_rate >= 0.5 else D
  
  ELIF t >= r-1:  // End game
    prev_coop_rate = count_cooperators(t-1) / n
    IF t == r-1:
      RETURN C if prev_coop_rate >= 0.4 else D
    ELSE:  // Final round
      RETURN majority_action(t-1)
  
  ELSE:  // Main phase
    prev_coop_rate = count_cooperators(t-1) / n
    avg_coop_3 = average_cooperation_rate(last_3_rounds)
    
    // Adaptive threshold
    threshold = base_threshold
    IF avg_coop_3 > 0.7: threshold -= 0.1
    IF avg_coop_3 < 0.3: threshold += 0.2
    
    // Forgiveness check
    IF consecutive_defections >= 2 AND (t % 3 == 0):
      consecutive_defections = 0
      RETURN C
    
    // Main decision
    IF prev_coop_rate >= threshold:
      consecutive_defections = 0
      RETURN C
    ELSE:
      consecutive_defections += 1
      RETURN D
```

## Key Features

**Adaptivity**: The strategy adjusts its cooperation threshold based on the observed cooperation levels, becoming more trusting when others cooperate frequently and more defensive when cooperation is rare.

**Robustness**: The graduated response prevents exploitation while maintaining cooperative potential through the forgiveness mechanism.

**Parameter Sensitivity**: The base threshold considers the efficiency of the public good (k/n ratio), being more generous when cooperation is more beneficial.

**Tournament Readiness**: The strategy doesn't assume coordination with others but can recognize and adapt to various opponent strategies, from always-defect to conditional cooperators.

**Cooperative Alignment**: Despite defensive mechanisms, the strategy actively seeks cooperative equilibria and gives others multiple chances to establish mutual cooperation.

This strategy balances the cooperative goal with practical concerns about exploitation, making it suitable for tournaments against diverse opponents while maintaining strong cooperative potential when others are willing to reciprocate.
'''

description_COOPERATIVE_6 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation that scales with observed group dynamics and game parameters.

## Decision Rules

### 1. First Round Behavior
**Always cooperate in round 1** to signal cooperative intent and establish a positive baseline for the group.

### 2. Cooperation Threshold System
The strategy maintains a dynamic **cooperation threshold** that determines when to cooperate based on the group's recent cooperative behavior.

**Base Threshold Calculation:**
```
base_threshold = (n - k) / (n - 1)
```
This represents the minimum cooperation rate needed for cooperation to be individually rational in the long run.

**Adaptive Threshold:**
```
current_threshold = base_threshold × adjustment_factor
```

### 3. Adjustment Factor Logic
The adjustment factor starts at 0.7 (being more forgiving initially) and adapts based on:

- **Trust Building Phase** (rounds 2 to min(5, r/3)):
  - If group cooperation ≥ 0.5: decrease threshold by 0.05 each round (become more cooperative)
  - If group cooperation < 0.3: increase threshold by 0.1 each round (become more defensive)
  - Otherwise: maintain current threshold

- **Stable Phase** (middle rounds):
  - If recent cooperation trend is increasing: decrease threshold by 0.02
  - If recent cooperation trend is decreasing: increase threshold by 0.05
  - Cap threshold between 0.3 and 0.9

- **Endgame Phase** (last max(3, r/5) rounds):
  - Gradually increase threshold by 0.1 each round to account for end-game defection incentives

### 4. Core Decision Rule
**Cooperate if and only if:**
```
(recent_group_cooperation_rate ≥ current_threshold) AND (not_in_punishment_phase)
```

Where `recent_group_cooperation_rate` is calculated over the last min(3, current_round-1) rounds.

### 5. Punishment Mechanism
Enter punishment phase if:
- Group cooperation drops below 0.2 for 2 consecutive rounds, OR
- Personal exploitation ratio exceeds 0.6 (cooperated while <40% of others did)

**During punishment phase:**
- Defect for min(2, remaining_rounds/4) rounds
- Exit early if group cooperation exceeds 0.5

### 6. Forgiveness Mechanism
After punishment phase ends:
- Reset threshold to base_threshold × 0.8
- Cooperate for 1 round regardless of group behavior (forgiveness signal)
- Resume normal threshold evaluation

## Edge Case Handling

### Last Round
If it's the final round and current group cooperation < 0.3: **defect**
Otherwise: follow normal decision rule but with threshold increased by 0.2

### High Defection Scenarios
If group cooperation has been below 0.1 for 3+ consecutive rounds:
- Switch to "cautious tit-for-tat": only cooperate if at least 2 others cooperated in the previous round

### Parameter Sensitivity
- **Small n (≤4)**: Reduce base threshold by 0.1 (be more cooperative in small groups)
- **Large k (k > 0.8n)**: Reduce base threshold by 0.15 (cooperation is more valuable)
- **Short games (r ≤ 5)**: Start with lower threshold (0.5 × base_threshold) to encourage early cooperation

## Pseudocode Summary
```
Initialize:
  base_threshold = (n - k) / (n - 1)
  adjustment_factor = 0.7
  punishment_rounds_left = 0

For each round t:
  If t == 1:
    return COOPERATE
  
  If punishment_rounds_left > 0:
    punishment_rounds_left -= 1
    return DEFECT
  
  recent_coop_rate = calculate_recent_cooperation(last 3 rounds)
  current_threshold = base_threshold × adjustment_factor
  
  # Apply phase-specific adjustments
  adjustment_factor = update_adjustment_factor(t, recent_trends)
  
  # Check for punishment triggers
  if should_punish(recent_cooperation, personal_exploitation):
    punishment_rounds_left = min(2, (r-t)/4)
    return DEFECT
  
  # Main decision
  if recent_coop_rate >= current_threshold:
    return COOPERATE
  else:
    return DEFECT
```

## Strategic Rationale

This strategy balances several key objectives:

1. **Cooperative by default**: Starts cooperatively and maintains a bias toward cooperation
2. **Adaptive to group dynamics**: Adjusts expectations based on observed behavior
3. **Robust against exploitation**: Has punishment mechanisms for persistent defectors
4. **Forgiving**: Includes mechanisms to rebuild cooperation after conflicts
5. **Parameter-aware**: Adapts thresholds based on game structure (n, k, r)
6. **Endgame stable**: Accounts for end-game effects while maintaining some cooperation

The strategy should perform well against other cooperative strategies while defending against purely selfish ones, making it suitable for a diverse tournament environment.
'''

description_COOPERATIVE_7 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with self-protection by starting cooperatively, rewarding collective cooperation, and responding proportionally to defection while maintaining forgiveness to encourage return to cooperation.

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal willingness to collaborate and test the waters for mutual cooperation.

### Rounds 2 to r-1: Adaptive Reciprocation

**Step 1: Calculate Cooperation Rate**
- `coop_rate = (total_cooperators_last_round) / n`
- Track a rolling average of cooperation rates over the last `min(3, current_round-1)` rounds

**Step 2: Determine Base Action**
- If `rolling_avg_coop_rate >= 0.6`: **Cooperate** (reward high collective cooperation)
- If `rolling_avg_coop_rate <= 0.3`: **Defect** (protect against widespread defection)
- If `0.3 < rolling_avg_coop_rate < 0.6`: Use **Conditional Reciprocation**

**Step 3: Conditional Reciprocation Logic**
When cooperation rate is moderate (30-60%), use targeted reciprocation:
- Count how many players defected against you in the last 2 rounds
- If `defectors_against_me >= n/2`: **Defect** (defensive response)
- Otherwise: **Cooperate** (maintain cooperation with willing players)

**Step 4: Forgiveness Mechanism**
Override defection decision if:
- Current round > r/2 AND
- Cooperation rate has been increasing for 2+ consecutive rounds
- Then: **Cooperate** (forgive and encourage recovery)

### Final Round: Conditional Cooperation
- If `rolling_avg_coop_rate >= 0.5`: **Cooperate** (reward good collective behavior)
- Otherwise: **Defect** (no future rounds to benefit from cooperation)

## Edge Case Handling

### Early Game (Rounds 1-3)
- Bias toward cooperation to establish collaborative norms
- Only defect if cooperation rate drops below 0.2 after round 2

### Endgame (Last 20% of rounds)
- Gradually increase cooperation threshold as rounds remain
- In final 10% of rounds, only cooperate if cooperation rate > 0.6

### Small Groups (n ≤ 4)
- Use more lenient thresholds: cooperate if rate ≥ 0.4
- Increase forgiveness frequency due to higher individual impact

### Large Groups (n ≥ 10)
- Use stricter thresholds: cooperate only if rate ≥ 0.7 for consistent cooperation
- Focus more on recent rounds (window of 2 rounds) due to reduced individual impact

## Pseudocode Summary

```
Strategy: GraduatedReciprocator

Initialize:
- cooperation_history = []
- my_history = []

For each round t:
  If t == 1:
    return COOPERATE
  
  coop_rate_last = count_cooperators(t-1) / n
  cooperation_history.append(coop_rate_last)
  
  If t == r: // Final round
    rolling_avg = average(last 3 cooperation_history entries)
    return COOPERATE if rolling_avg >= 0.5 else DEFECT
  
  // Main strategy
  rolling_avg = average(last min(3, t-1) cooperation_history entries)
  
  If rolling_avg >= 0.6:
    action = COOPERATE
  Else if rolling_avg <= 0.3:
    action = DEFECT
  Else:
    defectors_against_me = count_defectors_targeting_me(last 2 rounds)
    action = DEFECT if defectors_against_me >= n/2 else COOPERATE
  
  // Forgiveness override
  If action == DEFECT AND t > r/2 AND cooperation_increasing(2+ rounds):
    action = COOPERATE
  
  my_history.append(action)
  return action
```

## Strategic Rationale

1. **Cooperative Foundation**: Starting with cooperation signals good intentions and maximizes early collective payoffs.

2. **Proportional Response**: The strategy scales its cooperation based on others' willingness to cooperate, avoiding exploitation while rewarding collective action.

3. **Adaptive Thresholds**: Different cooperation thresholds for different game phases and group sizes ensure appropriate responses across various scenarios.

4. **Forgiveness Mechanism**: Prevents permanent defection spirals by recognizing and rewarding improving cooperation trends.

5. **Robust to Various Opponents**: Works against both highly cooperative and highly defective opponents, while being especially effective against other adaptive strategies.

This strategy aims to foster cooperation when possible while protecting against exploitation, ultimately maximizing both individual and collective welfare across diverse tournament conditions.
'''

description_COOPERATIVE_8 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocity with Forgiveness"

## Core Philosophy
This strategy balances cooperation with adaptive responses to group behavior, using graduated escalation and forgiveness to maintain cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Initial Cooperation
**Always cooperate** in the first round to signal cooperative intent and gather information about group dynamics.

### Rounds 2 to r-1: Adaptive Reciprocity

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_last_round) / n
```

**Step 2: Determine Base Action**
- If `cooperation_rate ≥ 0.5`: **Cooperate** (majority cooperating)
- If `cooperation_rate < 0.5`: **Defect** (majority defecting)

**Step 3: Apply Graduated Response Modifiers**

*Forgiveness Mechanism:*
- Track consecutive rounds where you defected due to low cooperation
- If you've defected for 2+ consecutive rounds AND `cooperation_rate ≥ 0.3`: **Override to Cooperate** (give group another chance)

*Exploitation Protection:*
- If `cooperation_rate < 0.2` for 3+ consecutive rounds: **Always Defect** until cooperation_rate recovers above 0.4

*Trend Analysis:*
- Calculate cooperation trend: `trend = cooperation_rate_current - cooperation_rate_previous`
- If base action is Defect but `trend > 0.2`: **Override to Cooperate** (reward improving cooperation)

### Final Round (Round r): Conditional Cooperation
Since this is the last interaction, apply a modified rule:
- If `cooperation_rate_last_round ≥ 0.6`: **Cooperate** (reward consistent cooperators)
- Otherwise: **Defect** (protect against end-game defection)

## Key Features

### Cooperative Alignment
- **Default to cooperation** when group behavior is reasonably cooperative (≥50% cooperation rate)
- **Forgiveness mechanism** prevents permanent punishment cycles
- **Trend sensitivity** rewards groups moving toward cooperation

### Robustness Against Exploitation
- **Graduated escalation** prevents being taken advantage of by persistent defectors
- **Exploitation protection** handles consistently uncooperative groups
- **End-game protection** accounts for rational defection in final round

### Adaptability
- **History-dependent** but not overly complex
- **Parameter-agnostic** (works regardless of n, k, r values)
- **Responsive to change** through trend analysis

## Pseudocode Summary

```
function decide_action(round, history):
    if round == 1:
        return COOPERATE
    
    cooperation_rate = calculate_cooperation_rate(history, round-1)
    
    if round == final_round:
        return COOPERATE if cooperation_rate >= 0.6 else DEFECT
    
    # Base decision
    base_action = COOPERATE if cooperation_rate >= 0.5 else DEFECT
    
    # Apply modifiers
    if check_forgiveness_condition(history):
        return COOPERATE
    
    if check_exploitation_protection(history):
        return DEFECT
    
    if check_positive_trend(history) and base_action == DEFECT:
        return COOPERATE
    
    return base_action
```

## Strategic Rationale

This strategy is designed to:
1. **Foster cooperation** by defaulting to cooperative behavior when feasible
2. **Prevent exploitation** through graduated responses to persistent defection
3. **Maintain stability** by forgiving temporary lapses and rewarding improvement
4. **Adapt to context** by responding to both current cooperation levels and trends

The strategy should perform well against both cooperative and mixed populations while avoiding the brittleness of purely conditional strategies like Tit-for-Tat.
'''

description_COOPERATIVE_9 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Forgiveness"

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience. It starts cooperatively, rewards collective cooperation, but protects against exploitation while maintaining pathways back to cooperation.

## Decision Rules

### Round 1: Cooperative Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Response
The strategy uses a **cooperation threshold** based on the proportion of cooperators in the previous round:

```
cooperation_threshold = max(0.3, (k-1)/(n-1))
```

**Decision Rule:**
- **Cooperate** if: `(cooperators_last_round / n) ≥ cooperation_threshold`
- **Defect** otherwise

**Rationale:** The threshold ensures we cooperate when there's sufficient collective cooperation to make it worthwhile. The formula `(k-1)/(n-1)` represents the minimum proportion of others who need to cooperate for our cooperation to be individually rational.

### Forgiveness Mechanism
To prevent permanent defection spirals, include forgiveness every 3-4 rounds:
- If we've defected for 3 consecutive rounds AND the average cooperation rate over the last 3 rounds is ≥ 0.2, then **cooperate** to test if cooperation can be restored.

### Final Round: Conditional Cooperation
- **Cooperate** if the cooperation rate in round (r-1) was ≥ 0.4
- **Defect** otherwise

This prevents others from exploiting known end-game defection while rewarding sustained cooperation.

## Edge Case Handling

### Very Small Groups (n = 2 or 3)
- Use a lower threshold: `cooperation_threshold = max(0.2, (k-1)/(n-1))`
- More forgiving to maintain cooperation in fragile small groups

### High Multiplication Factor (k > n-1)
- Use threshold: `cooperation_threshold = 0.2`
- Strong incentive for cooperation exists, so be more trusting

### Very Short Games (r ≤ 3)
- Cooperate in all rounds except possibly the last
- Insufficient time for complex adaptive behavior

## Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate base threshold
    base_threshold = max(0.3, (k-1)/(n-1))
    
    # Adjust for special cases
    if n <= 3:
        threshold = max(0.2, (k-1)/(n-1))
    elif k > n-1:
        threshold = 0.2
    else:
        threshold = base_threshold
    
    # Get cooperation rate from last round
    last_round_coop_rate = cooperators_last_round(history) / n
    
    # Check forgiveness condition
    if consecutive_defections(history) >= 3:
        avg_recent_coop = average_cooperation_last_3_rounds(history)
        if avg_recent_coop >= 0.2:
            return COOPERATE  # Forgiveness attempt
    
    # Final round special handling
    if round == r:
        if cooperation_rate_round(history, r-1) >= 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    # Main decision rule
    if last_round_coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Cooperative Signaling**: Starts cooperatively and maintains cooperation when others do
2. **Exploitation Protection**: Defects when cooperation levels are too low
3. **Adaptive**: Adjusts threshold based on game parameters
4. **Forgiving**: Prevents permanent defection spirals
5. **End-game Aware**: Handles final round strategically
6. **Parameter Sensitive**: Uses multiplication factor k to inform decisions

This strategy should perform well against both cooperative and mixed populations while avoiding exploitation by purely selfish players.
'''

description_COOPERATIVE_10 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Forgiveness"

## Core Philosophy
This strategy balances cooperative intent with adaptive responses to others' behavior. It starts cooperatively, rewards cooperation, punishes defection proportionally, but maintains forgiveness to avoid permanent punishment spirals.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: Always play C
- **Rationale**: Signal cooperative intent and give others the opportunity to establish mutual cooperation

### Rounds 2 to r-1: Adaptive Response Based on Cooperation Level

**Step 1: Calculate Recent Cooperation Rate**
```
recent_coop_rate = (cooperators in last round) / n
```

**Step 2: Calculate Historical Cooperation Trend**
```
if round > 2:
    trend = recent_coop_rate - (cooperators in round t-2) / n
else:
    trend = 0
```

**Step 3: Decision Logic**
```
if recent_coop_rate >= 0.6:
    // High cooperation environment - reward with cooperation
    action = C
    
else if recent_coop_rate >= 0.4:
    // Medium cooperation - be generous but responsive
    if trend >= 0:
        action = C  // Cooperation is improving
    else:
        action = C with probability 0.7  // Mostly cooperate with some caution
        
else if recent_coop_rate >= 0.2:
    // Low cooperation - conditional cooperation
    if trend > 0:
        action = C  // Reward improvement
    else:
        action = D  // Protect against exploitation
        
else:
    // Very low cooperation - mostly defect but maintain hope
    if trend > 0.1:
        action = C  // Reward significant improvement
    else:
        action = D
```

### Final Round (Round r): Conditional Cooperation
```
if historical_average_cooperation >= 0.5:
    action = C  // Reward overall cooperative game
else if last_round_cooperation >= 0.6:
    action = C  // Reward recent cooperation
else:
    action = D  // Protect against end-game exploitation
```

## Key Features

### 1. Forgiveness Mechanism
- Never permanently gives up on cooperation
- Always willing to return to cooperation if others improve
- Uses probabilistic cooperation in medium-cooperation scenarios

### 2. Proportional Response
- Response intensity matches the cooperation level observed
- Higher cooperation rates trigger more cooperative responses
- Lower cooperation rates trigger more protective responses

### 3. Trend Sensitivity
- Rewards improvement even from low cooperation levels
- Recognizes when cooperation is declining and responds accordingly
- Prevents exploitation during transition periods

### 4. Threshold-Based Decisions
- **High Cooperation (≥60%)**: Always cooperate to maintain good equilibrium
- **Medium Cooperation (40-59%)**: Generous cooperation with trend consideration
- **Low Cooperation (20-39%)**: Conditional cooperation based on trends
- **Very Low Cooperation (<20%)**: Protective but maintains hope for recovery

## Edge Case Handling

### First Round
- Always cooperate to signal good intentions and avoid starting a defection cascade

### Last Round
- Considers both long-term and recent cooperation levels
- Balances end-game incentives with rewarding overall cooperative behavior

### Tie-Breaking
- When cooperation rates are exactly at thresholds, err toward cooperation
- When trend calculations are exactly zero, default to more cooperative option

## Robustness Features

### Against Always Defectors
- Quickly identifies very low cooperation and switches to protection mode
- Doesn't get permanently exploited due to threshold-based responses

### Against Conditional Cooperators
- Responds positively to their cooperation
- Maintains cooperation when mutual cooperation is established

### Against Random Players
- Adapts to whatever average cooperation level emerges
- Trend analysis helps distinguish random from strategic behavior

### Against End-Game Exploitation
- Final round logic prevents pure end-game exploitation
- Historical cooperation consideration rewards consistently cooperative opponents

## Strategic Advantages

1. **Promotes Cooperation**: Starts cooperatively and rewards cooperative behavior
2. **Prevents Exploitation**: Has clear thresholds for protective behavior
3. **Maintains Flexibility**: Never locks into permanent defection
4. **Recognizes Improvement**: Trend analysis encourages others to increase cooperation
5. **Balances Risk**: Uses probabilistic cooperation in uncertain scenarios

This strategy should perform well against a diverse range of opponents while maintaining a fundamentally cooperative approach that can establish and maintain mutually beneficial outcomes when possible.
'''

description_COOPERATIVE_11 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using a graduated response system that rewards cooperation and punishes defection, while maintaining a cooperative bias throughout the game.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocation
The strategy uses a **cooperation threshold** based on recent group behavior:

1. **Calculate recent cooperation rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Cooperation rate = (total C actions observed) / (n × rounds_considered)

2. **Determine cooperation threshold**:
   - Base threshold = k/n (the break-even cooperation rate)
   - Adjusted threshold = max(0.3, base_threshold - 0.1)
   - This ensures we're slightly more forgiving than pure game theory would suggest

3. **Decision rule**:
   - If recent_cooperation_rate ≥ adjusted_threshold: **COOPERATE**
   - If recent_cooperation_rate < adjusted_threshold: **DEFECT**

4. **Forgiveness mechanism**:
   - If we've defected for 2+ consecutive rounds AND any player cooperated in the last round: **COOPERATE** (give the group another chance)

### Final Round: Conditional Cooperation
- If the group cooperation rate over the last 3 rounds ≥ 0.4: **COOPERATE**
- Otherwise: **DEFECT**

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Increase forgiveness: cooperate if recent_cooperation_rate ≥ max(0.25, base_threshold - 0.15)
- This accounts for higher variance in small groups

### High Multiplication Factor (k > 0.8n):
- Lower the cooperation threshold by additional 0.1 since cooperation is highly beneficial
- Be more persistent in cooperation even when others occasionally defect

### Very Short Games (r ≤ 3):
- Round 1: Always cooperate
- Round 2: Cooperate if at least 40% cooperated in round 1
- Final round: Mirror the most common action from previous rounds

### Very Long Games (r ≥ 20):
- Use a longer history window: look back min(5, current_round-1) rounds
- Implement "reputation recovery": if someone was mostly cooperative early but recently defected, give them benefit of doubt after they cooperate once

## Pseudocode

```
function decide_action(round, history, n, r, k):
    if round == 1:
        return COOPERATE
    
    # Calculate parameters
    base_threshold = k / n
    window_size = min(3, round - 1)
    if r >= 20:
        window_size = min(5, round - 1)
    
    # Get recent cooperation rate
    recent_cooperators = count_cooperators_in_last_k_rounds(history, window_size)
    total_recent_actions = n * window_size
    recent_coop_rate = recent_cooperators / total_recent_actions
    
    # Adjust threshold based on group size and k value
    adjusted_threshold = max(0.3, base_threshold - 0.1)
    if n <= 4:
        adjusted_threshold = max(0.25, base_threshold - 0.15)
    if k > 0.8 * n:
        adjusted_threshold -= 0.1
    
    # Check for forgiveness condition
    my_recent_actions = get_my_last_k_actions(history, 2)
    if all_defect(my_recent_actions) and any_cooperated_last_round(history):
        return COOPERATE
    
    # Final round special handling
    if round == r:
        final_window_coop_rate = count_cooperators_in_last_k_rounds(history, min(3, r-1)) / (n * min(3, r-1))
        if final_window_coop_rate >= 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    # Main decision rule
    if recent_coop_rate >= adjusted_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Why This Strategy is Robust and Cooperative

1. **Cooperative by default**: Starts cooperatively and maintains a bias toward cooperation through adjusted thresholds
2. **Adaptive**: Responds to actual group behavior rather than rigid rules
3. **Forgiving**: Includes mechanisms to restart cooperation after conflicts
4. **Context-aware**: Adjusts behavior based on game parameters (n, r, k)
5. **Exploitation-resistant**: Won't be taken advantage of indefinitely by consistent defectors
6. **Tournament-viable**: Doesn't rely on specific opponent strategies or coordination

This strategy should perform well against other cooperative strategies while protecting against purely selfish opponents, making it suitable for a diverse tournament environment.
'''

description_COOPERATIVE_12 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, aiming to build and maintain cooperative relationships while protecting against exploitation. It starts optimistically but learns from experience to match the cooperation level of the group.

## Decision Rules

### 1. Initial Phase (First Round)
**Always cooperate (C)** to signal cooperative intent and test the waters for potential mutual cooperation.

### 2. Main Phase (Rounds 2 through r-1)
Use a **cooperation threshold system** based on observed group behavior:

```pseudocode
cooperation_rate = total_cooperators_last_round / n
my_threshold = max(0.3, cooperation_rate * 1.1)

if cooperation_rate >= my_threshold:
    play C
else:
    play D with probability (1 - cooperation_rate)
    play C with probability cooperation_rate
```

**Key mechanisms:**
- **Adaptive threshold**: Set cooperation threshold at 110% of last round's cooperation rate, minimum 30%
- **Graduated response**: Don't immediately defect when cooperation drops; instead, reduce cooperation probability proportionally
- **Forgiveness factor**: Always maintain some probability of cooperation (equal to the group's cooperation rate) to allow recovery

### 3. Final Phase (Last Round)
**Special handling for the last round:**
- If group cooperation rate in round (r-1) ≥ 0.6: Cooperate as a "thank you" gesture
- Otherwise: Apply main phase rules normally

### 4. Streak Bonuses
**Reward consistent group cooperation:**
- Track consecutive rounds where ≥70% of players cooperated
- For every 3 consecutive high-cooperation rounds, increase cooperation probability by 0.1 (capped at 1.0)
- Reset streak counter when cooperation drops below 50%

## Edge Case Handling

### First Round
Always cooperate to establish cooperative intent and gather initial information about opponent strategies.

### Low Participation Scenarios
When fewer than 30% cooperate for 2+ consecutive rounds:
- Switch to "rebuild mode": Cooperate with 40% probability regardless of recent history
- This prevents permanent defection spirals while limiting exploitation

### High Volatility
When cooperation rates swing dramatically (±40% between consecutive rounds):
- Use a 3-round moving average instead of single-round cooperation rate
- This smooths responses and avoids overreacting to noise

### Near-Unanimous Defection
When cooperation rate drops to ≤10% for 2 consecutive rounds:
- Enter "exploration mode": Cooperate once every 4-5 rounds to test if conditions have changed
- Resume normal operation when cooperation rate rises above 20%

## Robustness Features

1. **Learning Component**: Adapts cooperation threshold based on observed group behavior rather than using fixed rules

2. **Proportional Response**: Doesn't immediately switch to full defection when cooperation drops; instead graduates the response

3. **Recovery Mechanism**: Always maintains some cooperation probability to enable group recovery from low-cooperation states

4. **Exploitation Protection**: Reduces cooperation when group cooperation is consistently low, preventing excessive exploitation

5. **Endgame Handling**: Recognizes last-round dynamics while still rewarding groups that maintained cooperation

## Strategic Rationale

This strategy succeeds because it:
- **Signals cooperation** initially and rewards cooperative groups
- **Learns and adapts** to the actual behavior patterns encountered
- **Balances cooperation with self-protection** through graduated responses
- **Enables recovery** from low-cooperation states through maintained cooperation probability
- **Handles common edge cases** like endgame effects and volatility

The strategy is robust against both overly cooperative opponents (won't be exploited indefinitely) and overly competitive ones (will still find cooperation opportunities when they exist), while being most rewarding when paired with other adaptive cooperative strategies.
'''

description_COOPERATIVE_13 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to foster cooperation while protecting against exploitation through adaptive reciprocity and graduated responses. It balances forgiveness with accountability, using the game's history to make informed decisions about when to cooperate.

## Decision Rules

### 1. Initial Cooperation Phase
- **First round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Adaptive Cooperation Threshold
After round 3, calculate a **cooperation threshold** based on:
- Recent cooperation rate of other players
- Game parameters (n, k)
- Current round position

**Threshold Formula**:
```
cooperation_threshold = max(0.3, min(0.8, base_threshold + adjustment))

where:
base_threshold = (k - 1) / (n - 1)  // Economic break-even point
adjustment = 0.2 * (recent_cooperation_rate - 0.5)
recent_cooperation_rate = cooperation in last min(3, current_round-1) rounds
```

### 3. Main Decision Rule
In round t (where t > 3):

```pseudocode
if (others_cooperation_rate_last_round >= cooperation_threshold):
    play C
else if (my_recent_cooperation_ratio > others_recent_cooperation_ratio + 0.15):
    // I'm being too generous compared to others
    play D with probability 0.7
else if (round_number <= 0.8 * total_rounds):
    // Not in endgame, try to rebuild cooperation
    if (others_cooperation_rate_last_round >= 0.2):
        play C
    else:
        play D
else:
    // Endgame: be more selective but still reward cooperation
    if (others_cooperation_rate_last_round >= 0.5):
        play C
    else:
        play D
```

### 4. Forgiveness Mechanism
Every 4-5 rounds, regardless of recent history:
- If I've been defecting for 2+ consecutive rounds
- AND at least 20% of others cooperated in the last round
- Then cooperate to test if cooperation can be rebuilt

### 5. Edge Case Handling

**First Round**: Always cooperate to signal cooperative intent

**Last Round**: 
- If others' cooperation rate in round r-1 ≥ 0.6: Cooperate
- Else: Defect (since no future retaliation possible)

**Very Low Participation** (< 15% cooperation rate for 3+ rounds):
- Switch to "conditional cooperator" mode
- Only cooperate if at least 2 others cooperated in the previous round

**High Participation** (> 80% cooperation rate for 3+ rounds):
- Always cooperate to maintain the cooperative equilibrium

## Key Features

### Adaptive Thresholds
The strategy adjusts its cooperation threshold based on the economic parameters of the game. When k is closer to n, cooperation is more valuable, so the threshold is higher.

### Graduated Response
Rather than immediate tit-for-tat, the strategy uses graduated responses:
1. Continued cooperation despite some defection
2. Probabilistic defection when being exploited
3. Full defection only when cooperation breaks down significantly

### Memory and Learning
- Tracks cooperation rates over multiple time windows (last round, last 3 rounds, overall)
- Adjusts behavior based on trends, not just single-round outcomes
- Maintains forgiveness cycles to prevent permanent defection spirals

### Robustness Features
- **Against always-defectors**: Will eventually defect but periodically tests for cooperation
- **Against tit-for-tat**: Maintains cooperation through forgiveness
- **Against random players**: Uses statistical thresholds rather than deterministic responses
- **Against endgame defection**: Adjusts strategy in final rounds while still rewarding cooperation

This strategy is designed to be genuinely cooperative while avoiding exploitation, making it suitable for fostering group welfare in the public goods game context.
'''

description_COOPERATIVE_14 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically but learns from the group's behavior to maintain sustainable cooperation while protecting against systematic defection.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance at mutual benefit.

### Rounds 2 to r-1: Adaptive Reciprocal Response
Use a **cooperation threshold system** based on the previous round's cooperation rate:

1. **Calculate cooperation rate**: `coop_rate = (number of cooperators in previous round) / n`

2. **Apply adaptive threshold**:
   - If `coop_rate ≥ 0.5`: **Cooperate** (majority cooperation deserves reciprocation)
   - If `0.25 ≤ coop_rate < 0.5`: **Cooperate with probability = 2 × coop_rate** 
     - This creates graduated response in mixed scenarios
   - If `coop_rate < 0.25`: **Defect** (protect against widespread defection)

3. **Forgiveness mechanism**: If we defected in the previous round due to low cooperation but cooperation rate was ≥ 0.33, cooperate this round to test if the group is recovering.

### Final Round (Round r): Strategic Cooperation
- **Cooperate if** the cooperation rate in round r-1 was ≥ 0.4
- **Defect otherwise** to avoid being exploited when others anticipate end-game defection

## Key Features

### Robustness Mechanisms
1. **Graduated Response**: Instead of binary cooperation/defection based on thresholds, uses probabilistic cooperation in uncertain scenarios
2. **Forgiveness**: Occasionally tests whether a group has learned to cooperate after periods of mutual defection
3. **End-game Protection**: Recognizes that final round dynamics differ and adjusts accordingly

### Adaptive Elements
- **Threshold Learning**: The 0.5, 0.33, and 0.25 thresholds create natural breakpoints that work across different group sizes
- **Historical Sensitivity**: Each decision depends on immediate past behavior, allowing quick adaptation to changing group dynamics
- **Proportional Response**: In mixed scenarios, cooperation probability matches the group's cooperation level

### Cooperative Alignment
- **Default to Cooperation**: When in doubt (≥50% cooperation), always cooperate
- **Early Optimism**: Always start cooperatively to enable group coordination
- **Recovery Support**: Actively tests whether groups can return to cooperation after defection spirals

## Pseudocode

```
function decide_action(round, history):
    if round == 1:
        return COOPERATE
    
    prev_round_cooperators = count_cooperators(history[round-1])
    coop_rate = prev_round_cooperators / n
    
    if round == r:  // Final round
        return COOPERATE if coop_rate >= 0.4 else DEFECT
    
    // Forgiveness test
    if my_last_action == DEFECT and coop_rate >= 0.33:
        return COOPERATE
    
    // Adaptive threshold response
    if coop_rate >= 0.5:
        return COOPERATE
    elif coop_rate >= 0.25:
        return COOPERATE with probability (2 * coop_rate)
    else:
        return DEFECT
```

## Strategic Rationale

This strategy succeeds because:

1. **Encourages Cooperation**: Starting cooperatively and maintaining high cooperation thresholds helps establish and maintain cooperative equilibria

2. **Prevents Exploitation**: The 25% threshold and end-game logic protect against being consistently exploited by primarily defecting groups

3. **Enables Recovery**: The forgiveness mechanism helps groups escape mutual defection traps

4. **Scales Appropriately**: Thresholds work across different values of n and k, as they're based on proportions rather than absolute numbers

5. **Handles Uncertainty**: Probabilistic cooperation in mixed scenarios prevents the strategy from being too predictable while maintaining cooperative bias

The strategy is particularly effective when k is close to n (high multiplication factor) where cooperation is most beneficial, but remains protective when k is closer to 1 where defection incentives are stronger.
'''

description_COOPERATIVE_15 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity. It begins with trust, rewards cooperation, and responds proportionally to defection while maintaining opportunities for renewed cooperation.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocity

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_in_previous_round) / n
```

**Step 2: Assess Trend** (from round 3 onwards)
```
if cooperation_rate > previous_cooperation_rate:
    trend = "improving"
else if cooperation_rate < previous_cooperation_rate:
    trend = "declining"  
else:
    trend = "stable"
```

**Step 3: Decision Logic**
```
if cooperation_rate >= 0.5:
    // Majority cooperating - reciprocate positively
    action = COOPERATE
    
else if cooperation_rate >= 0.3:
    // Mixed environment - encourage cooperation conditionally
    if trend == "improving":
        action = COOPERATE  // Reward improvement
    else:
        action = DEFECT     // Signal need for more cooperation
        
else:
    // Low cooperation environment - protect but leave door open
    if trend == "improving" AND cooperation_rate > 0:
        action = COOPERATE  // Encourage any positive movement
    else:
        action = DEFECT     // Self-protection
```

### Final Round (Round r): Cooperative Farewell
**Always cooperate** in the final round to:
- Avoid the typical "end-game defection cascade"
- Signal long-term cooperative orientation
- Maximize final collective payoff

## Key Features

### 1. **Proportional Response**
The strategy responds to the overall cooperation level, not just individual actions, making it robust against mixed populations.

### 2. **Trend Sensitivity**
By tracking whether cooperation is improving or declining, the strategy can encourage positive momentum and respond appropriately to negative trends.

### 3. **Forgiveness Mechanism**
The strategy always gives cooperators another chance when cooperation rates are improving, even from low levels.

### 4. **Protection Against Exploitation**
In highly defective environments (cooperation < 30%), the strategy primarily defects for self-protection while still rewarding genuine improvement.

### 5. **Bookend Cooperation**
Starting and ending with cooperation signals commitment to collective welfare and helps avoid destructive start/end effects.

## Robustness Against Different Opponent Types

- **Against Always-Cooperators**: Reciprocates cooperation fully
- **Against Always-Defectors**: Protects itself while maintaining openness to change
- **Against Tit-for-Tat variants**: Avoids punishment spirals through trend-awareness
- **Against Random players**: Adapts to overall cooperation levels rather than getting confused by noise
- **Against Conditional Cooperators**: Provides clear cooperation signals when collective cooperation is feasible

## Edge Case Handling

1. **All others defect from round 1**: Strategy will defect from round 2 onwards (except final round), minimizing losses while signaling availability for cooperation
2. **Perfect cooperation achieved**: Strategy maintains cooperation, supporting the optimal collective outcome  
3. **Oscillating behavior**: Trend detection helps smooth out minor fluctuations while responding to genuine shifts
4. **Late-game cooperation emergence**: Strategy can recognize and join cooperative momentum even in later rounds

This strategy balances cooperative idealism with practical adaptation, aiming to foster cooperation where possible while protecting against systematic exploitation.
'''

description_COOPERATIVE_16 = '''
# Adaptive Cooperative Strategy: "Conditional Cooperator with Forgiveness"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed group dynamics and reciprocity patterns.

## Strategy Overview

### 1. Decision Rules

**Primary Rule - Cooperation Threshold:**
- Cooperate if the **cooperation rate** in the previous round ≥ **dynamic threshold**
- Dynamic threshold starts at 50% and adapts based on game parameters and history

**Dynamic Threshold Calculation:**
```
initial_threshold = 0.5
current_threshold = max(0.3, min(0.8, 
    initial_threshold + adjustment_factor))

where adjustment_factor = 
    (recent_cooperation_trend × 0.2) + 
    (efficiency_incentive × 0.1) + 
    (rounds_remaining_factor × 0.1)
```

### 2. Key Components

**A. Cooperation Trend Analysis:**
- Track cooperation rates over last 3 rounds (or all rounds if fewer than 3)
- If trend is increasing: lower threshold (more forgiving)
- If trend is decreasing: raise threshold (more cautious)

**B. Efficiency Incentive:**
- When k is high (k > 1.5): bias toward cooperation (lower threshold by 0.1)
- When group size is large (n > 6): slightly raise threshold (harder to sustain cooperation)

**C. Endgame Consideration:**
- In final 20% of rounds: maintain cooperation if group has been >60% cooperative
- Never defect in last round purely due to endgame - maintain consistency

### 3. Edge Case Handling

**First Round:**
- Always cooperate (optimistic start)

**Second Round:**
- Cooperate if ≥50% cooperated in round 1
- This establishes the baseline reciprocity expectation

**Last Round:**
- Apply same threshold rule as other rounds
- Maintain cooperative reputation for potential future interactions

**Low Cooperation Environment:**
- If cooperation rate falls below 20% for 3 consecutive rounds:
  - Switch to "conditional cooperation" mode
  - Only cooperate if cooperation rate in previous round ≥ 40%
  - Reset to normal mode if cooperation recovers above 40%

### 4. Forgiveness Mechanism

**Forgiveness Trigger:**
- After defecting due to low cooperation, if cooperation rate jumps by >30% in next round
- Immediately return to cooperation to reward group improvement

**Second Chances:**
- If cooperation fails but then recovers to >70% for 2 consecutive rounds
- Lower threshold by 0.1 for next 3 rounds (give the group benefit of doubt)

### 5. Robustness Features

**Anti-Exploitation Protection:**
- Never cooperate when cooperation rate <20% (prevents being taken advantage of)
- Track if consistently exploited (you cooperate but <30% others do) for 4+ rounds
- If exploited pattern detected: raise threshold by 0.2 for remainder of game

**Adaptive Learning:**
- Every 5 rounds, evaluate strategy performance
- If performing worse than "always defect" baseline: become more selective
- If group welfare is high and personal payoff reasonable: maintain cooperation

### 6. Pseudocode Structure

```
function decide_action(round_num, total_rounds, history):
    if round_num == 1:
        return COOPERATE
    
    recent_cooperation_rate = calculate_cooperation_rate(history, lookback=3)
    cooperation_trend = calculate_trend(history)
    
    threshold = calculate_dynamic_threshold(
        recent_cooperation_rate,
        cooperation_trend,
        round_num,
        total_rounds,
        game_parameters
    )
    
    # Apply forgiveness check
    if should_forgive(history):
        return COOPERATE
    
    # Apply anti-exploitation check
    if being_exploited(history):
        threshold += 0.2
    
    # Main decision
    if recent_cooperation_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategy Rationale

This strategy balances several key objectives:

1. **Cooperative by Default:** Starts optimistically and maintains cooperation when others reciprocate
2. **Adaptive:** Adjusts expectations based on observed behavior patterns
3. **Forgiving:** Gives second chances when group shows improvement
4. **Robust:** Protects against exploitation while remaining open to cooperation
5. **Context-Aware:** Considers game parameters (k, n, rounds remaining) in decisions

The strategy encourages cooperation through reciprocity while maintaining flexibility to handle various opponent behaviors, from pure cooperators to sophisticated strategic players.
'''

description_COOPERATIVE_17 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with adaptive response to group dynamics, aiming to maximize collective welfare while protecting against exploitation. It operates on the principle of "generous reciprocity" - defaulting to cooperation but responding proportionally to the group's cooperative behavior.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-2)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Round 2**: Always COOPERATE (give others chance to reciprocate)

### 2. Main Adaptive Phase (Rounds 3 to r-2)

**Primary Decision Rule**: Cooperate if the group cooperation rate in the previous round meets a dynamic threshold:

```
cooperation_rate_previous = (number_of_cooperators_last_round) / n
dynamic_threshold = max(0.3, min(0.7, historical_avg_cooperation_rate - 0.1))

IF cooperation_rate_previous >= dynamic_threshold:
    COOPERATE
ELSE:
    Apply forgiveness check (see below)
```

**Forgiveness Mechanism**: Even when the threshold isn't met, cooperate with probability:
```
forgiveness_probability = 0.2 + 0.3 * (cooperation_rate_previous / n)
```

### 3. Trend Analysis Enhancement
Track the cooperation trend over the last 3 rounds:
- If cooperation is increasing (even if below threshold): Increase forgiveness probability by 0.2
- If cooperation is consistently decreasing: Decrease forgiveness probability by 0.1

### 4. Endgame Strategy (Last 2 rounds)

**Second-to-last round (r-1)**:
- If historical group cooperation rate ≥ 0.4: COOPERATE
- If 0.2 ≤ historical group cooperation rate < 0.4: COOPERATE with 60% probability
- If historical group cooperation rate < 0.2: DEFECT

**Final round (r)**:
- If group cooperated at ≥ 50% rate in round (r-1): COOPERATE
- Otherwise: Mirror the majority action from round (r-1)

## Key Features

### Adaptability
- **Dynamic thresholds** adjust based on observed group behavior
- **Trend analysis** captures momentum in cooperation patterns
- **Probabilistic responses** prevent predictable exploitation

### Robustness
- **Graduated response** rather than harsh punishment for occasional defection
- **Forgiveness mechanism** allows recovery from cooperation breakdowns
- **Endgame protection** while maintaining cooperative opportunities

### Cooperation Promotion
- **Always starts cooperatively** to establish good faith
- **Generous interpretation** of borderline cooperation rates
- **Trend-sensitive** to reward improving group behavior
- **Collective welfare focus** through threshold-based decisions

## Edge Case Handling

1. **All opponents always defect**: Strategy will gradually reduce cooperation but maintain occasional forgiveness attempts

2. **All opponents always cooperate**: Strategy will cooperate consistently after initial rounds

3. **Mixed or random opponent behavior**: Strategy adapts threshold dynamically and uses trend analysis to find stable cooperation level

4. **Late-round defection cascades**: Endgame rules provide measured response while preserving final cooperation opportunities

## Pseudocode Summary

```python
def decide_action(round_num, history, n, r, k):
    if round_num <= 2:
        return COOPERATE
    
    if round_num >= r - 1:
        return endgame_strategy(round_num, history, r)
    
    prev_coop_rate = count_cooperators(history[-1]) / n
    hist_avg_coop = calculate_historical_average(history)
    threshold = max(0.3, min(0.7, hist_avg_coop - 0.1))
    
    if prev_coop_rate >= threshold:
        return COOPERATE
    
    # Apply forgiveness with trend adjustment
    base_forgiveness = 0.2 + 0.3 * prev_coop_rate
    trend_adjustment = calculate_trend_adjustment(history[-3:])
    final_forgiveness = base_forgiveness + trend_adjustment
    
    return COOPERATE if random() < final_forgiveness else DEFECT
```

This strategy should perform well across diverse opponent types while maintaining a fundamentally cooperative stance that supports group welfare maximization.
'''

description_COOPERATIVE_18 = '''
I'll design a cooperative strategy called **Adaptive Cooperative Reciprocator (ACR)** that balances cooperation with protection against exploitation.

## Core Strategy: Adaptive Cooperative Reciprocator (ACR)

### Decision Framework

The strategy operates on three key principles:
1. **Start cooperative** to establish good intentions
2. **Reciprocate based on group behavior** rather than individual tracking
3. **Maintain forgiveness** to recover from defection spirals

### Decision Rules

**Round 1:** Always COOPERATE
- Establish cooperative intent from the start
- Signal willingness to contribute to public good

**Rounds 2 to r-1:** Use Adaptive Threshold Rule
```
cooperation_rate = (total_cooperators_last_round) / n
my_threshold = max(0.3, min(0.7, k/n - 0.1))

if cooperation_rate >= my_threshold:
    COOPERATE
else:
    DEFECT
```

**Final Round r:** Context-dependent decision
```
if current_round >= r AND cooperation_rate_last_round >= 0.4:
    COOPERATE  // Maintain reputation even at game end
else if current_round >= r:
    DEFECT     // Protect against final-round exploitation
```

### Key Components

**1. Adaptive Threshold Calculation**
- Base threshold around `k/n - 0.1` (slightly below the theoretical break-even point)
- Bounded between 0.3 and 0.7 to remain reasonable across parameter ranges
- This makes the strategy responsive to the specific game economics

**2. Group-Based Reciprocity**
- Focus on overall cooperation rate rather than tracking individual players
- Simpler to implement and more robust against complex opponent strategies
- Avoids the complexity of maintaining reputation scores for each player

**3. Forgiveness Mechanism**
- The threshold-based approach naturally provides forgiveness
- If cooperation rate recovers, the strategy immediately returns to cooperation
- Prevents permanent defection spirals that harm all players

### Edge Case Handling

**First Round:** Always cooperate to signal cooperative intent

**Last Round:** Conditional cooperation based on recent group behavior
- If group showed reasonable cooperation (≥40%), maintain cooperation
- Otherwise, protect against end-game defection

**Low Participation:** When cooperation rate falls below threshold
- Switch to defection to avoid exploitation
- But remain ready to return to cooperation when conditions improve

### Strategic Rationale

1. **Cooperative Foundation:** Starts with cooperation and maintains cooperative bias when group reciprocates

2. **Economic Awareness:** Threshold tied to game parameters ensures strategy adapts to different economic environments

3. **Exploitation Protection:** Defects when cooperation rate is too low, preventing systematic exploitation

4. **Recovery Mechanism:** Quick return to cooperation when group behavior improves, maximizing long-term payoffs

5. **Tournament Robust:** Works against various opponent types without requiring specific coordination

### Pseudocode Summary
```
if round == 1:
    return COOPERATE
    
cooperation_rate = cooperators_last_round / n
threshold = max(0.3, min(0.7, k/n - 0.1))

if round == final_round:
    if cooperation_rate >= 0.4:
        return COOPERATE
    else:
        return DEFECT
        
if cooperation_rate >= threshold:
    return COOPERATE
else:
    return DEFECT
```

This strategy balances cooperative intent with practical protection against exploitation, adapting to the specific game parameters while remaining simple enough to be robust across diverse opponent populations.
'''

description_COOPERATIVE_19 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Forgiveness"

## Core Philosophy
This strategy balances cooperation with self-protection by being initially cooperative, responsive to group behavior, and forgiving of occasional defections. It aims to establish and maintain cooperative equilibria while protecting against exploitation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: Always play C
- **Rationale**: Signal cooperative intent and test the waters for mutual cooperation

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

The strategy maintains three key metrics:
- **Cooperation Rate (CR)**: Percentage of players who cooperated in the previous round
- **Trend**: Whether cooperation is increasing, decreasing, or stable over the last 2-3 rounds
- **Personal Exploitation**: Whether I cooperated but received low payoffs due to widespread defection

**Decision Algorithm:**
```
IF cooperation_rate_last_round >= 0.6:
    Action = C  // High cooperation - reciprocate
ELSE IF cooperation_rate_last_round >= 0.4:
    IF cooperation_trend is increasing:
        Action = C  // Growing cooperation - encourage it
    ELSE IF I_was_exploited_last_round:
        Action = D  // Protect against continued exploitation
    ELSE:
        Action = C  // Give benefit of doubt
ELSE IF cooperation_rate_last_round >= 0.2:
    IF cooperation_trend is increasing for 2+ rounds:
        Action = C  // Reward improving cooperation
    ELSE:
        Action = D  // Low cooperation - protect myself
ELSE:
    Action = D  // Very low cooperation - definitely protect
```

### Forgiveness Mechanism
- If I defected in the previous round but cooperation_rate increases by >20%, play C
- This prevents getting stuck in mutual defection when others are trying to rebuild cooperation

### Last Round (Round r): Conditional Cooperation
- **If** cooperation_rate in round r-1 >= 0.5: Play C
- **Else**: Play D
- **Rationale**: Maintain cooperation if the group has been cooperative, but protect against last-round defection cascades

## Edge Cases and Robustness Features

### Small Group Adaptation (n ≤ 4)
- Be more generous with cooperation thresholds (reduce by 0.1)
- Individual actions have larger impact, so maintain cooperation longer

### Large Group Adaptation (n ≥ 10)
- Slightly raise cooperation thresholds (increase by 0.1)
- Individual impact is smaller, so be more selective about when to cooperate

### High Multiplication Factor (k close to n)
- Lower the cooperation threshold by 0.1 since cooperation is very valuable
- Be more willing to take risks on borderline cases

### Low Multiplication Factor (k close to 1)
- Raise cooperation threshold by 0.1 since cooperation is less valuable
- Be more protective against exploitation

### Memory and Learning
- Track the last 3 rounds for trend analysis
- Remember players who consistently defect vs. those who show cooperative patterns
- Give slight preference to cooperation when facing previously cooperative opponents

## Pseudocode Implementation

```
FUNCTION decide_action(round, history, n, k, r):
    IF round == 1:
        RETURN C
    
    // Calculate metrics
    last_round_cooperators = count_cooperators(history[round-1])
    cooperation_rate = last_round_cooperators / n
    
    // Adjust thresholds based on game parameters
    base_high_threshold = 0.6
    base_medium_threshold = 0.4
    base_low_threshold = 0.2
    
    adjustment = 0
    IF n <= 4: adjustment = -0.1
    IF n >= 10: adjustment = +0.1
    IF k close to n: adjustment -= 0.1
    IF k close to 1: adjustment += 0.1
    
    high_thresh = base_high_threshold + adjustment
    medium_thresh = base_medium_threshold + adjustment
    low_thresh = base_low_threshold + adjustment
    
    // Last round special case
    IF round == r:
        IF cooperation_rate >= 0.5: RETURN C
        ELSE: RETURN D
    
    // Main decision logic
    IF cooperation_rate >= high_thresh:
        RETURN C
    
    IF cooperation_rate >= medium_thresh:
        trend = calculate_trend(history, round)
        was_exploited = (my_last_action == C AND my_last_payoff < 1.2)
        
        IF trend == "increasing": RETURN C
        IF was_exploited: RETURN D
        RETURN C
    
    IF cooperation_rate >= low_thresh:
        IF sustained_improvement(history, round): RETURN C
        RETURN D
    
    // Forgiveness check
    IF my_last_action == D AND cooperation_improvement > 0.2:
        RETURN C
    
    RETURN D
```

This strategy is designed to be cooperative while protecting against exploitation, adaptive to different game parameters, and robust against a wide variety of opponent strategies. It encourages cooperation when possible while maintaining the ability to defend against persistent defectors.
'''

description_COOPERATIVE_20 = '''
## Adaptive Reciprocal Cooperation Strategy

### Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity. It starts cooperatively, rewards cooperation from others, and implements graduated responses to defection.

### Decision Rules

#### Round 1: Always Cooperate
- **Action**: Always play C
- **Rationale**: Signal willingness to cooperate and establish a cooperative baseline

#### Rounds 2 to r-1: Adaptive Reciprocity
The strategy uses a dynamic cooperation threshold based on observed behavior:

```pseudocode
cooperation_threshold = max(0.3, (k-1)/(n-1))
recent_cooperation_rate = cooperation_rate_in_last_3_rounds()
overall_cooperation_rate = cooperation_rate_since_round_1()

if recent_cooperation_rate >= cooperation_threshold:
    play C
elif overall_cooperation_rate >= cooperation_threshold AND recent_cooperation_rate >= 0.2:
    play C with probability 0.7, D with probability 0.3
else:
    play D
```

#### Final Round: Conditional Cooperation
- If overall cooperation rate ≥ cooperation_threshold: play C
- Otherwise: play D

### Key Components

#### 1. Dynamic Cooperation Threshold
The threshold adapts to game parameters:
- **Minimum threshold**: 0.3 (prevents exploitation in low-cooperation environments)
- **Parameter-based threshold**: (k-1)/(n-1) reflects the game's cooperative equilibrium point
- Uses the higher of these two values

#### 2. Multi-Timeframe Analysis
- **Recent behavior** (last 3 rounds): Captures current group dynamics
- **Overall behavior**: Maintains long-term perspective and prevents overreaction to temporary defection

#### 3. Graduated Response System
- **High cooperation**: Full cooperation
- **Moderate cooperation**: Mixed strategy (70% cooperation) to encourage improvement while limiting exposure
- **Low cooperation**: Defection to protect against exploitation

#### 4. Forgiveness Mechanism
The strategy can return to cooperation if the group improves their behavior, preventing permanent defection spirals.

### Edge Case Handling

#### First Round
Always cooperate to signal good intentions and establish cooperative precedent.

#### Early Rounds (rounds 2-3)
Use available history but apply more lenient thresholds since sample size is small.

#### Final Round
Maintain cooperation if the group has been generally cooperative, but defect if they haven't (no future retaliation possible).

#### Small Groups (n ≤ 4)
The parameter-based threshold automatically adjusts to be more demanding in smaller groups where individual actions have larger impact.

### Robustness Features

1. **Anti-exploitation**: Won't cooperate indefinitely with consistent defectors
2. **Forgiving**: Can rebuild cooperation after periods of mutual defection  
3. **Parameter-aware**: Adjusts expectations based on game structure (k and n)
4. **Noise-tolerant**: Uses multi-round averages to avoid overreacting to single-round variations
5. **Endgame-stable**: Maintains cooperation incentives even in final rounds when appropriate

### Strategic Rationale

This strategy balances three key objectives:
- **Collective efficiency**: Starts cooperatively and maintains cooperation when others reciprocate
- **Individual protection**: Defects against persistent free-riders
- **Group coordination**: Uses clear, predictable rules that other cooperative strategies can learn and reciprocate

The cooperation threshold ensures the strategy only maintains cooperation when it's generating positive group dynamics, while the graduated response system provides opportunities for groups to improve without being immediately abandoned.
'''

description_COOPERATIVE_21 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity and graduated responses. It balances cooperation with strategic defection based on observed group dynamics.

## Decision Rules

### Initial Phase (First Round)
- **Always cooperate** in round 1 to signal cooperative intent and test the group's disposition.

### Main Strategy (Rounds 2 to r-1)

The strategy uses a **cooperation threshold** that adapts based on recent group behavior:

1. **Calculate Recent Cooperation Rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Compute: `recent_coop_rate = total_cooperations / (n × rounds_observed)`

2. **Determine Base Cooperation Threshold**:
   - If recent_coop_rate ≥ 0.6: threshold = 0.4 (lenient - reward good groups)
   - If 0.3 ≤ recent_coop_rate < 0.6: threshold = 0.5 (neutral)
   - If recent_coop_rate < 0.3: threshold = 0.7 (strict - punish poor groups)

3. **Apply Forgiveness Mechanism**:
   - If cooperation rate was low but improved by ≥0.2 in the last round: reduce threshold by 0.15
   - This allows groups to recover from defection spirals

4. **Make Decision**:
   - **Cooperate** if recent_coop_rate ≥ adjusted_threshold
   - **Defect** otherwise

### Final Round (Round r)
Apply a **conditional final cooperation** rule:
- If recent_coop_rate ≥ 0.5: **Cooperate** (reward good groups even in final round)
- Otherwise: **Defect** (standard end-game reasoning)

## Edge Case Handling

### Insufficient History (Rounds 2-3)
- Use available history but weight the initial cooperation signal more heavily
- Maintain slightly lower thresholds (subtract 0.1) to encourage early cooperation

### Extreme Group Behaviors
- **All-defector groups**: After 3 consecutive rounds of <20% cooperation, permanently defect except for occasional "probe" cooperation (every 5th round) to test for recovery
- **All-cooperator groups**: Continue cooperating but monitor for sudden shifts

### Parameter Sensitivity
- **High k (k > 0.8n)**: Reduce all thresholds by 0.1 (cooperation more valuable)
- **Low k (k < 0.4n)**: Increase all thresholds by 0.1 (cooperation less attractive)
- **Large n (n > 8)**: Use longer history window (up to 5 rounds) for more stable estimates

## Pseudocode

```
function decide_action(round, n, k, r, history):
    if round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    lookback = min(3, round - 1)
    recent_rounds = history[-lookback:]
    total_cooperations = sum(cooperations in recent_rounds)
    recent_coop_rate = total_cooperations / (n * lookback)
    
    # Determine base threshold
    if recent_coop_rate >= 0.6:
        threshold = 0.4
    elif recent_coop_rate >= 0.3:
        threshold = 0.5
    else:
        threshold = 0.7
    
    # Apply forgiveness
    if len(history) >= 2:
        last_round_rate = cooperations_in_last_round / n
        prev_round_rate = cooperations_in_previous_round / n
        if prev_round_rate < 0.3 and (last_round_rate - prev_round_rate) >= 0.2:
            threshold -= 0.15
    
    # Parameter adjustments
    if k > 0.8 * n:
        threshold -= 0.1
    elif k < 0.4 * n:
        threshold += 0.1
    
    # Final round special case
    if round == r:
        return COOPERATE if recent_coop_rate >= 0.5 else DEFECT
    
    # Main decision
    return COOPERATE if recent_coop_rate >= threshold else DEFECT
```

## Strategic Rationale

1. **Cooperative Foundation**: Starts cooperatively and maintains cooperative bias when groups show reasonable reciprocity
2. **Adaptive Punishment**: Responds to low cooperation with stricter requirements, but not permanently
3. **Forgiveness**: Allows groups to recover from defection spirals through improved behavior
4. **Robustness**: Handles various group sizes and parameter values through adaptive thresholds
5. **End-game Awareness**: Balances final-round cooperation with protection against exploitation

This strategy should perform well against both cooperative and mixed groups while maintaining reasonable protection against exploitation.
'''

description_COOPERATIVE_22 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with strategic adaptation, starting optimistically but learning from the group's behavior to maximize both individual and collective welfare.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Reciprocation

**Step 1: Calculate Group Cooperation Rate**
- Track the average cooperation rate across all players in previous rounds
- `group_coop_rate = total_cooperations_so_far / (n × rounds_played)`

**Step 2: Apply Graduated Response**
```
if group_coop_rate >= 0.7:
    COOPERATE  // High cooperation environment
elif group_coop_rate >= 0.4:
    COOPERATE with probability = group_coop_rate + 0.2
    // Moderate cooperation with forgiveness bonus
elif group_coop_rate >= 0.2:
    COOPERATE with probability = group_coop_rate
    // Mirror the group's cooperation level
else:
    DEFECT  // Protect against exploitation in low-cooperation environment
```

**Step 3: Forgiveness Mechanism**
- If defecting for 2+ consecutive rounds AND any player showed recent cooperation (last 2 rounds), give cooperation another chance with 30% probability
- This prevents permanent defection spirals

### Round r (Final Round): Conditional Cooperation
- If `group_coop_rate >= 0.5`: **COOPERATE** (reward a generally cooperative group)
- If `group_coop_rate < 0.5`: **DEFECT** (protect against end-game exploitation)

## Key Adaptive Features

1. **Learning Rate**: Strategy becomes more informed as game progresses, using cumulative history rather than just recent rounds

2. **Threshold Flexibility**: Cooperation thresholds are set to:
   - Reward high cooperation (≥70% triggers automatic cooperation)
   - Maintain hope in moderate environments (40-70% gets cooperation bonus)
   - Adapt to hostile environments (<20% triggers defensive defection)

3. **Forgiveness**: Prevents being trapped in defection cycles when others show signs of cooperation

4. **End-game Protection**: Recognizes that final round incentives differ, but still rewards consistently cooperative groups

## Robustness Against Different Opponent Types

- **Against Always-Cooperators**: Maintains high cooperation, maximizing mutual benefit
- **Against Always-Defectors**: Eventually defects to avoid exploitation while giving initial chances
- **Against Tit-for-Tat**: Establishes mutual cooperation after initial cooperative signal
- **Against Random Players**: Adapts to the realized cooperation level
- **Against Strategic Players**: The probabilistic elements and forgiveness prevent being easily exploited

## Parameter Sensitivity
- Works with any valid k (1 < k < n) by focusing on group dynamics rather than payoff calculations
- Scales naturally with n (group size)
- Adapts to any r > 1 by using proportional history

This strategy maintains a cooperative orientation while protecting against exploitation, making it robust across diverse tournament conditions.
'''

description_COOPERATIVE_23 = '''
# Adaptive Cooperative Strategy: "Trust-Building Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive response to opponent behavior. It starts optimistically but learns from the group's collective behavior to maintain cooperation while protecting against excessive exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance for mutual benefit.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

The strategy uses a **cooperation threshold** that adapts based on recent group behavior:

```pseudocode
cooperation_threshold = max(0.3, recent_cooperation_rate * 0.8)

if (recent_cooperation_rate >= cooperation_threshold):
    action = COOPERATE
else:
    action = DEFECT
```

Where `recent_cooperation_rate` is calculated as:
- For rounds 2-3: cooperation rate from previous round only
- For rounds 4+: weighted average of last 3 rounds (weights: 0.5, 0.3, 0.2 for most recent to oldest)

### Round r (Final Round): Conditional Cooperation
Despite the standard game theory prediction of defection in the final round, maintain cooperation if:
- The group cooperation rate in the previous round was ≥ 50%
- **AND** the average cooperation rate over the last 3 rounds was ≥ 40%

Otherwise, defect to avoid being exploited when others likely defect.

## Key Features

### 1. Dynamic Threshold Adjustment
- The cooperation threshold starts at 30% (minimum) but increases when the group shows higher cooperation
- This prevents the strategy from being too demanding early on while rewarding genuinely cooperative groups
- The 0.8 multiplier ensures the threshold remains achievable even for moderately cooperative groups

### 2. Forgiveness Mechanism
- If cooperation drops temporarily but recovers within 2 rounds, the strategy gives the group another chance
- Implemented through the weighted averaging system that doesn't penalize single-round defection spikes too harshly

### 3. Exploitation Protection
- If group cooperation falls below 30%, the strategy switches to defection to avoid being a "sucker"
- This threshold is low enough to maintain cooperation even with some free-riders present

### 4. Memory-Based Learning
- Uses recent history (3 rounds) rather than entire game history to adapt to changing group dynamics
- More recent rounds have higher weight, making the strategy responsive to current trends

## Edge Case Handling

### Very Short Games (r ≤ 3)
- Round 1: Always cooperate
- Round 2: Cooperate if ≥ 50% cooperated in round 1
- Round 3 (if final): Cooperate if ≥ 40% cooperated in round 2

### High Multiplication Factor (k close to n)
- The cooperation threshold is reduced by 10% when k > 0.8n, since cooperation becomes more attractive
- This encourages maintaining cooperation even with slightly lower group participation

### Low Multiplication Factor (k close to 1)
- The cooperation threshold is increased by 10% when k < 1.5, requiring stronger group commitment before cooperating
- This protects against exploitation when the public good provides minimal benefit

## Robustness Features

1. **Against Always-Defect opponents**: Quickly adapts to defect when group cooperation is consistently low
2. **Against Tit-for-Tat variants**: The forgiveness mechanism prevents spiraling into mutual defection from temporary miscoordination
3. **Against Random strategies**: The threshold system filters out noise while responding to genuine cooperation trends
4. **Against Trigger strategies**: The gradual adaptation prevents single mistakes from causing permanent breakdown

## Cooperative Alignment

This strategy maximizes the chances of achieving cooperative outcomes by:
- Starting with trust and goodwill
- Maintaining cooperation as long as reasonably possible
- Using adaptive thresholds that account for the reality that perfect cooperation is rare
- Providing second chances through the forgiveness mechanism
- Only defecting when protection against exploitation becomes necessary

The strategy recognizes that in a diverse tournament environment, perfect coordination is unlikely, but substantial cooperation can still be achieved through patient, adaptive reciprocity.
'''

description_COOPERATIVE_24 = '''
I'll design a cooperative strategy called **"Adaptive Trust Builder"** that balances cooperation with protection against exploitation while maintaining a fundamentally cooperative orientation.

## Strategy: Adaptive Trust Builder

### Core Philosophy
This strategy starts with trust, learns from experience, and adapts its cooperation level based on the observed community behavior while maintaining a bias toward cooperation.

### Decision Rules

**1. Initial Cooperation (First Round)**
- Always cooperate in round 1 to signal cooperative intent and test the waters

**2. Trust Level Calculation**
After each round, calculate a "community trust level" (CTL):
```
CTL = (total_cooperations_observed / (n * rounds_played))
```
This tracks the overall cooperation rate of all players across all previous rounds.

**3. Cooperation Threshold**
- Define a dynamic cooperation threshold based on game parameters:
```
base_threshold = max(0.3, 1/k)  // Higher k allows lower threshold
cooperation_threshold = base_threshold * (1 - 0.1 * ln(n)/ln(10))  // Slight adjustment for group size
```

**4. Main Decision Rule**
For rounds 2 through r-1:
- **Cooperate if**: CTL ≥ cooperation_threshold
- **Also cooperate if**: CTL < cooperation_threshold BUT recent trend is improving
  - Recent trend = cooperation rate in last min(3, current_round/2) rounds > cooperation rate in previous period
- **Defect otherwise**

**5. Forgiveness Mechanism**
Every 3-4 rounds (specifically when round_number % 4 == 1), cooperate regardless of CTL if:
- CTL > 0.15 (showing some minimal community cooperation exists)
- This prevents permanent punishment cycles and offers fresh starts

**6. Final Round Strategy**
In the last round:
- Cooperate if CTL ≥ cooperation_threshold * 0.8 (slightly more lenient)
- This maintains cooperative reputation even at the end

### Edge Cases and Special Handling

**Very Low Cooperation Environment (CTL < 0.15)**
- Switch to "teaching mode": cooperate every 5th round to demonstrate cooperation benefits
- This prevents complete breakdown while limiting exploitation

**High Cooperation Environment (CTL > 0.7)**
- Always cooperate to maintain the positive equilibrium
- Lock in the good outcome

**Early Game Uncertainty (rounds 2-3)**
- Use a more lenient threshold (cooperation_threshold * 0.7) since sample size is small
- Gives the community more chances to establish cooperative norms

**Small Groups (n ≤ 3)**
- Increase forgiveness frequency to every 2-3 rounds
- Individual actions have larger impact, so faster adaptation needed

### Pseudocode Summary

```
function decide_action(round_number, history, n, k, r):
    if round_number == 1:
        return COOPERATE
    
    CTL = calculate_community_trust_level(history, n)
    threshold = calculate_cooperation_threshold(k, n)
    
    if round_number == r:  // Final round
        return COOPERATE if CTL >= threshold * 0.8 else DEFECT
    
    if CTL >= threshold:
        return COOPERATE
    
    if recent_trend_improving(history) and CTL >= threshold * 0.5:
        return COOPERATE
    
    if is_forgiveness_round(round_number) and CTL > 0.15:
        return COOPERATE
    
    if CTL < 0.15 and round_number % 5 == 1:  // Teaching mode
        return COOPERATE
    
    return DEFECT
```

### Why This Strategy Is Cooperative

1. **Starts with trust** - Always cooperates first
2. **Rewards cooperation** - Immediately responds to community cooperation
3. **Offers forgiveness** - Regular opportunities to rebuild trust
4. **Maintains hope** - Never gives up entirely, always teaching benefits of cooperation
5. **Adapts to success** - Locks in good outcomes when they emerge
6. **End-game cooperation** - Doesn't exploit final round for short-term gain

This strategy is designed to foster cooperation while protecting against consistent defection, making it robust across various opponent behaviors while maintaining a fundamentally cooperative stance.
'''

description_COOPERATIVE_25 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to the group's behavior, using a combination of optimism, reciprocity, and strategic forgiveness to promote sustained cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance to establish a cooperative equilibrium.

### Rounds 2 to r-1: Adaptive Reciprocation
The strategy uses a **Cooperation Threshold System** based on recent group behavior:

1. **Calculate Recent Cooperation Rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Compute: `recent_coop_rate = total_cooperators_in_recent_rounds / (n × rounds_observed)`

2. **Determine Cooperation Threshold**:
   - `cooperation_threshold = max(0.3, k/n)`
   - This ensures we don't give up on cooperation too easily, while accounting for the economic incentives

3. **Decision Logic**:
   ```
   IF recent_coop_rate ≥ cooperation_threshold:
       Cooperate (reward group cooperation)
   ELSE IF recent_coop_rate ≥ 0.15:
       Cooperate with probability = recent_coop_rate / cooperation_threshold
       (Gradual withdrawal, but maintain some cooperation)
   ELSE:
       Defect (protect against exploitation)
   ```

### Final Round: Strategic Consideration
- **If** the group has maintained reasonable cooperation (recent_coop_rate ≥ 0.4 in last 3 rounds): **Cooperate** as a final gesture of goodwill
- **Otherwise**: **Defect** to avoid being exploited when others likely defect

## Adaptive Features

### Forgiveness Mechanism
- Every 4 rounds, if currently defecting due to low cooperation, give the group a "fresh chance" by cooperating once, regardless of recent history
- This prevents permanent breakdown and allows recovery from bad periods

### Parameter Sensitivity
- The strategy adapts the cooperation threshold based on `k/n` ratio:
  - When `k/n` is higher (cooperation more economically attractive), maintain higher expectations
  - When `k/n` is lower, be more forgiving of defection

### Memory Window
- Uses a sliding window of recent rounds rather than full history to:
  - Respond quickly to changing group dynamics
  - Allow recovery from early conflicts
  - Avoid being trapped by ancient history

## Edge Case Handling

1. **Very Short Games** (r ≤ 3):
   - Cooperate in all rounds except possibly the last (use final round rule)

2. **Large Groups** (n > 10):
   - Slightly lower cooperation threshold since individual impact is smaller
   - Adjust to: `cooperation_threshold = max(0.25, k/n)`

3. **High k values** (k close to n):
   - Maintain higher cooperation expectations longer
   - Reduce forgiveness frequency to avoid exploitation

## Robustness Features

- **Anti-exploitation**: Won't cooperate indefinitely with non-cooperative groups
- **Recovery-oriented**: Provides mechanisms for groups to rebuild cooperation
- **Economically-aware**: Considers the multiplication factor in decision-making
- **Noise-tolerant**: Uses probabilistic responses in ambiguous situations
- **History-balanced**: Neither too forgiving nor too punitive

This strategy aims to foster cooperation while being resilient against various opponent strategies, from always-defect to tit-for-tat to more complex adaptive strategies.
'''

description_COOPERATIVE_26 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to observed behavior patterns, aiming to maximize collective welfare while protecting against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather behavioral data

### 2. Adaptive Response Mechanism
After round 3, use a **weighted cooperation threshold** system:

```
cooperation_threshold = base_threshold + history_adjustment + endgame_adjustment
```

**Base Threshold**: Start at 0.4 (cooperate if ≥40% of others cooperated last round)

**History Adjustment**: 
- Track each player's cooperation rate over all previous rounds
- If average group cooperation rate > 0.6: lower threshold by 0.1
- If average group cooperation rate < 0.3: raise threshold by 0.1
- If trend is increasing (last 3 rounds > previous 3 rounds): lower threshold by 0.05

**Endgame Adjustment**:
- Final 20% of rounds: raise threshold by 0.15 to account for increased defection incentives
- Final round: cooperate only if ≥70% cooperated in previous round

### 3. Forgiveness Mechanism
To avoid permanent defection spirals:
- Every 4 rounds, if currently in "mostly defect" mode (threshold >0.7), attempt one "olive branch" cooperation regardless of threshold
- If this olive branch is reciprocated by ≥50% of players, reset threshold to 0.5

### 4. Reputation Tracking
Maintain individual cooperation rates for each player:
- Use this to identify consistent cooperators vs. free riders
- When cooperation level is borderline (within 0.05 of threshold), give slight preference to cooperating if majority of consistent cooperators (>75% historical rate) are likely to cooperate

## Detailed Algorithm

```pseudocode
Initialize:
- base_threshold = 0.4
- player_cooperation_history = array of arrays
- group_cooperation_history = array
- rounds_since_olive_branch = 0

For each round t:
  If t <= 3:
    action = COOPERATE
  
  Else:
    // Calculate adjustments
    avg_group_rate = mean(group_cooperation_history)
    history_adj = 0
    if avg_group_rate > 0.6: history_adj = -0.1
    if avg_group_rate < 0.3: history_adj = +0.1
    
    // Trend analysis (if enough history)
    if t >= 7:
      recent_trend = mean(last_3_rounds) - mean(rounds_t-6_to_t-4)
      if recent_trend > 0.1: history_adj -= 0.05
    
    // Endgame adjustment
    endgame_adj = 0
    if t > 0.8 * total_rounds: endgame_adj = +0.15
    
    current_threshold = base_threshold + history_adj + endgame_adj
    
    // Olive branch check
    if rounds_since_olive_branch >= 4 and current_threshold > 0.7:
      action = COOPERATE
      rounds_since_olive_branch = 0
    else:
      last_round_coop_rate = cooperation_rate_in_round(t-1)
      
      // Reputation consideration for borderline cases
      if abs(last_round_coop_rate - current_threshold) <= 0.05:
        consistent_cooperators_likely = count_likely_cooperators()
        if consistent_cooperators_likely >= n/2:
          action = COOPERATE
        else:
          action = DEFECT
      else:
        action = COOPERATE if last_round_coop_rate >= current_threshold else DEFECT
      
      rounds_since_olive_branch += 1
  
  // Special case: final round
  if t == total_rounds:
    final_threshold = 0.7
    action = COOPERATE if last_round_coop_rate >= final_threshold else DEFECT
```

## Edge Cases

**First Round**: Always cooperate to signal cooperative intent

**Last Round**: Use higher threshold (0.7) since there's no future retaliation possible

**Low Participation Rounds**: If <2 players cooperated in previous round, still cooperate if personal assessment suggests others might return to cooperation

**All Defection**: If group cooperation drops to 0 for 2 consecutive rounds, implement the olive branch mechanism more aggressively (every 2 rounds instead of 4)

## Robustness Features

1. **Anti-Exploitation**: Threshold system prevents being taken advantage of by consistent defectors
2. **Forgiveness**: Olive branch mechanism allows recovery from negative spirals
3. **Trend Awareness**: Adjusts to improving or deteriorating group dynamics
4. **Endgame Protection**: Accounts for increased defection incentives near game end
5. **Individual Tracking**: Considers individual player patterns for nuanced decisions

This strategy maintains a cooperative orientation while adapting to the observed behavior patterns of other players, making it robust across various opponent strategy mixes while still promoting overall group welfare.
'''

description_COOPERATIVE_27 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation by maintaining a balance between cooperation, reciprocity, and forgiveness. It adapts to the cooperation level of opponents while providing clear incentives for mutual cooperation.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Main Strategy (Rounds 4 to r-2)

**Cooperation Threshold Calculation**:
```
cooperation_threshold = max(0.3, (k-1)/(n-1))
```
This threshold represents the minimum cooperation rate needed to make cooperation worthwhile, with a floor of 30% to encourage cooperation even in marginal cases.

**Decision Rule**:
- Track the cooperation rate of all opponents over the last 3 rounds: `recent_coop_rate`
- Track the overall cooperation rate since round 4: `overall_coop_rate`

**Cooperate if ANY of the following conditions are met**:
1. `recent_coop_rate ≥ cooperation_threshold` (Reciprocate recent cooperation)
2. `overall_coop_rate ≥ cooperation_threshold AND recent_coop_rate ≥ 0.2` (Maintain cooperation with reasonable recent support)
3. We defected last round AND `recent_coop_rate ≥ 0.2` (Forgiveness mechanism)

**Otherwise**: Defect (D)

### 3. Endgame Strategy (Last 2 rounds)

**Second-to-last round (r-1)**:
- Cooperate if the cooperation rate in the last 3 rounds ≥ 50%
- This signals continued willingness to cooperate while being selective

**Final round (r)**:
- Cooperate if opponents' cooperation rate in the last 2 rounds ≥ 60%
- Higher threshold accounts for typical end-game defection incentives

## Key Features

### Adaptive Elements
- **Dynamic responsiveness**: Adjusts to recent behavior more heavily than distant history
- **Context sensitivity**: Cooperation threshold adapts to game parameters (n, k)
- **Forgiveness mechanism**: Attempts to restart cooperation after defection if opponents show willingness

### Robustness Features
- **Early cooperation**: Establishes cooperative intent and gathers information
- **Protection against exploitation**: Won't cooperate indefinitely with consistent defectors
- **Endgame awareness**: Reduces cooperation as the game nears end, but maintains some cooperation with reliable partners

### Cooperative Alignment
- **Optimistic start**: Begins cooperatively to enable mutual cooperation
- **Reciprocal maintenance**: Sustains cooperation when others cooperate
- **Second chances**: Attempts to forgive and restart cooperation cycles

## Pseudocode Summary

```
function decide_action(round, history, n, k, r):
    if round <= 3:
        return C
    
    cooperation_threshold = max(0.3, (k-1)/(n-1))
    recent_coop_rate = cooperation_rate(history, last_3_rounds)
    overall_coop_rate = cooperation_rate(history, since_round_4)
    
    if round <= r-2:  // Main game
        if recent_coop_rate >= cooperation_threshold:
            return C
        if overall_coop_rate >= cooperation_threshold AND recent_coop_rate >= 0.2:
            return C
        if my_last_action == D AND recent_coop_rate >= 0.2:
            return C
        return D
    
    elif round == r-1:  // Second to last
        if recent_coop_rate >= 0.5:
            return C
        return D
    
    else:  // Final round
        if cooperation_rate(history, last_2_rounds) >= 0.6:
            return C
        return D
```

This strategy balances cooperation with self-protection, adapts to various opponent strategies, and maintains the cooperative spirit throughout the game while being robust against exploitation.
'''

description_COOPERATIVE_28 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocity with Forgiveness"

## Core Philosophy
This strategy balances cooperative intent with adaptive response to opponents' behavior. It starts optimistically, rewards cooperation, responds proportionally to defection, but maintains pathways back to cooperation to avoid permanent punishment spirals.

## Decision Rules

### 1. First Round Behavior
- **Always cooperate** in round 1 to signal cooperative intent and test the waters for mutual cooperation.

### 2. Cooperation Threshold System
The strategy uses a dynamic cooperation threshold based on recent cooperation rates:

```
cooperation_rate = (cooperators_in_last_3_rounds) / (3 * n)
cooperation_threshold = 0.3 + 0.2 * (cooperation_rate)
```

- If `cooperation_rate >= cooperation_threshold`: **Cooperate**
- If `cooperation_rate < cooperation_threshold`: **Defect**

### 3. Forgiveness Mechanism
To prevent permanent defection spirals and encourage return to cooperation:

- Every 4th round, if the strategy has been defecting, **cooperate** regardless of the threshold (forgiveness probe)
- If opponents respond positively to forgiveness (cooperation rate increases by >0.15 in the next round), reset to cooperative mode

### 4. Endgame Handling
For the final 20% of rounds (or minimum last 3 rounds):

- If average cooperation rate over entire game >= 0.4: **Continue normal strategy** (maintain cooperation with successful groups)
- If average cooperation rate < 0.4: **Defect** (protect against endgame exploitation in uncooperative environments)

### 5. Early Cooperation Bonus
If cooperation rate >= 0.6 in the first 25% of rounds:
- Reduce cooperation threshold by 0.1 for remainder of game (reward high-cooperation groups)

## Detailed Algorithm

```pseudocode
function decide_action(round_number, history, n, r, k):
    if round_number == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate (last 3 rounds or all if fewer)
    recent_rounds = min(3, round_number - 1)
    total_recent_cooperators = sum_cooperators_in_last_rounds(recent_rounds)
    cooperation_rate = total_recent_cooperators / (recent_rounds * n)
    
    # Base cooperation threshold
    threshold = 0.3 + 0.2 * cooperation_rate
    
    # Early cooperation bonus
    if round_number > 0.25 * r:
        early_coop_rate = cooperation_rate_in_rounds(1, 0.25 * r)
        if early_coop_rate >= 0.6:
            threshold -= 0.1
    
    # Forgiveness mechanism
    if round_number % 4 == 0 and was_defecting_recently():
        return COOPERATE  # Forgiveness probe
    
    # Endgame protection
    if round_number > 0.8 * r:
        overall_coop_rate = total_cooperation_rate_so_far()
        if overall_coop_rate < 0.4:
            return DEFECT
    
    # Main decision rule
    if cooperation_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Edge Case Handling

### First Round
Always cooperate to establish cooperative intent and gather initial information about opponent strategies.

### Last Round
Follow endgame rules - if the group has been generally uncooperative (< 40% cooperation rate), defect to avoid exploitation. Otherwise, maintain strategy consistency.

### All-Defect Scenarios
The forgiveness mechanism ensures periodic cooperation attempts even when surrounded by defectors, creating opportunities for cooperative resurgence.

### All-Cooperate Scenarios
The strategy naturally maintains cooperation in highly cooperative environments through the dynamic threshold system.

## Robustness Features

1. **Adaptive Thresholds**: The cooperation threshold adjusts based on observed behavior, making it responsive to different opponent types.

2. **Graduated Response**: Rather than harsh tit-for-tat, uses proportional responses based on cooperation rates.

3. **Forgiveness Cycles**: Prevents permanent defection spirals while protecting against exploitation.

4. **Endgame Protection**: Adjusts behavior in final rounds based on overall group cooperation levels.

5. **Early Cooperation Recognition**: Rewards groups that establish cooperative norms early.

This strategy aims to foster cooperation while protecting against exploitation, adapting to various opponent behaviors while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_29 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity and graduated responses to defection.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocity

#### Step 1: Calculate Cooperation Rate
- Track the overall cooperation rate in the previous round: `coop_rate = (total_cooperators) / n`

#### Step 2: Determine Base Inclination
- If `coop_rate ≥ 0.5`: **Lean cooperative** (others are generally cooperative)
- If `coop_rate < 0.5`: **Lean defensive** (others are generally defecting)

#### Step 3: Apply Adaptive Thresholds
- **Cooperate if**: `coop_rate ≥ threshold`
- **Defect if**: `coop_rate < threshold`

Where threshold varies by context:
- **Early game** (rounds 2 to r/3): `threshold = 0.3` (give cooperation a chance)
- **Mid game** (rounds r/3+1 to 2r/3): `threshold = 0.4` (standard reciprocity)
- **Late game** (rounds 2r/3+1 to r-1): `threshold = 0.5` (stricter standards)

#### Step 4: Forgiveness Mechanism
- Every 3-4 rounds, if you've been defecting due to low cooperation, attempt one "forgiveness cooperation" to test if the group dynamics have improved
- This prevents getting stuck in defection spirals

### Final Round: Conditional Cooperation
- If the cooperation rate in round r-1 was ≥ 0.4: **Cooperate** (reward good behavior)
- Otherwise: **Defect** (no future to build toward)

## Pseudocode

```
function decide_action(round_number, history):
    if round_number == 1:
        return COOPERATE
    
    if round_number == total_rounds:
        if cooperation_rate(history, round_number-1) >= 0.4:
            return COOPERATE
        else:
            return DEFECT
    
    # Calculate current cooperation rate
    prev_coop_rate = cooperation_rate(history, round_number-1)
    
    # Determine threshold based on game phase
    if round_number <= total_rounds / 3:
        threshold = 0.3
    elif round_number <= 2 * total_rounds / 3:
        threshold = 0.4
    else:
        threshold = 0.5
    
    # Forgiveness mechanism
    if should_attempt_forgiveness(round_number, history):
        return COOPERATE
    
    # Main decision rule
    if prev_coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT

function should_attempt_forgiveness(round, history):
    # Attempt forgiveness every 3-4 rounds if we've been defecting
    if round % 4 == 0:
        last_3_actions = get_my_last_n_actions(history, 3)
        if count_defections(last_3_actions) >= 2:
            return true
    return false
```

## Strategy Rationale

### Cooperative Alignment
1. **Starts cooperatively** to establish good faith
2. **Rewards group cooperation** with continued cooperation
3. **Includes forgiveness** to restart cooperation cycles
4. **Ends cooperatively** when others have shown good faith

### Robustness Features
1. **Adaptive thresholds** prevent exploitation while encouraging cooperation
2. **Phase-based adjustment** accounts for learning and end-game effects  
3. **Forgiveness mechanism** prevents permanent defection spirals
4. **History-based decisions** respond to actual behavior, not assumptions

### Tournament Effectiveness
- **Against cooperators**: Maintains high mutual cooperation
- **Against defectors**: Quickly adapts to protect payoffs
- **Against mixed strategies**: Finds equilibrium that rewards cooperation
- **Against adaptive opponents**: Forgiveness allows for mutual adaptation toward cooperation

This strategy balances the cooperative ideal with practical protection against exploitation, making it robust across diverse opponent behaviors while maintaining strong incentives for collective cooperation.
'''

description_COOPERATIVE_30 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation, using dynamic thresholds based on observed behavior patterns and game parameters.

## Decision Framework

### 1. Cooperation Threshold System
The strategy maintains a **cooperation threshold** θ that determines when to cooperate:
- **Cooperate** when: (recent_cooperation_rate ≥ θ) OR (first round) OR (establishing_cooperation_phase)
- **Defect** when: recent_cooperation_rate < θ AND not in special phases

### 2. Dynamic Threshold Calculation
```
θ = base_threshold + adjustment_factor

base_threshold = max(0.1, (k-1)/(n-1))  // Economic efficiency breakpoint
adjustment_factor = -0.1 × (current_round / total_rounds)  // Becomes more forgiving over time
```

### 3. Cooperation Rate Measurement
Track cooperation using a **sliding window** approach:
- Window size: min(5, max(2, round_number/3))
- recent_cooperation_rate = (cooperators in window) / (total players × window_size)

## Strategy Rules

### Round 1: Optimistic Start
- **Always cooperate** to signal willingness to build mutual benefit
- Initialize all tracking variables

### Rounds 2 to r-2: Adaptive Phase

1. **Calculate recent cooperation rate** using sliding window
2. **Cooperation Forgiveness**: If cooperation rate slightly below threshold but showing improvement trend, still cooperate
3. **Defection Protection**: If cooperation rate well below threshold (< θ - 0.2), defect to avoid exploitation
4. **Revival Attempts**: Every 3-5 rounds of mutual defection, attempt cooperation to test if others are willing to restart cooperation

### Round r-1: Penultimate Round
- **Cooperation test**: Cooperate if recent cooperation rate ≥ θ - 0.1 (slightly more forgiving)
- This signals continued willingness to cooperate and tests others' final-round intentions

### Round r: Final Round
- **Conditional cooperation**: Cooperate only if cooperation rate in last 2 rounds ≥ max(0.3, θ - 0.2)
- Protects against end-game defection while rewarding sustained cooperation

## Special Mechanisms

### Trend Analysis
Monitor 3-round trends in cooperation rates:
- **Positive trend**: Rate increasing → reduce effective threshold by 0.1
- **Negative trend**: Rate decreasing → increase effective threshold by 0.1

### Group Size Adaptation
- **Small groups (n ≤ 4)**: More forgiving thresholds, emphasize relationship building
- **Large groups (n ≥ 8)**: Stricter thresholds, focus on protecting against widespread defection

### Efficiency Factor Integration
When k is high (k > n/2):
- More aggressive cooperation attempts since mutual cooperation is highly beneficial
- Lower base threshold by 0.1

## Pseudocode Summary

```
Initialize:
- cooperation_history = []
- window_size = 2
- base_threshold = max(0.1, (k-1)/(n-1))

For each round t:
  if t == 1:
    action = COOPERATE
  else:
    // Calculate metrics
    window_size = min(5, max(2, t/3))
    recent_coop_rate = calculate_recent_cooperation(window_size)
    trend = calculate_trend(recent_coop_rate)
    
    // Adjust threshold
    threshold = base_threshold - 0.1*(t/total_rounds) + trend_adjustment
    
    // Special cases
    if t == total_rounds - 1:
      threshold = threshold - 0.1  // More forgiving
    if t == total_rounds:
      threshold = max(0.3, threshold - 0.2)  // Final round protection
    
    // Decision
    if recent_coop_rate >= threshold OR (revival_attempt_due AND random < 0.3):
      action = COOPERATE
    else:
      action = DEFECT
  
  // Update tracking
  update_history(observed_actions)
```

## Strategy Strengths

1. **Adaptive**: Adjusts to different opponent types and group dynamics
2. **Forgiving**: Allows for recovery from defection spirals
3. **Protected**: Avoids systematic exploitation
4. **Economically grounded**: Thresholds based on game parameters
5. **Tournament robust**: Doesn't rely on coordination with other strategies

This strategy aims to foster cooperation when possible while maintaining resilience against various opponent behaviors, making it effective across diverse tournament environments.
'''

description_COOPERATIVE_31 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, using dynamic thresholds based on observed cooperation levels to maintain cooperation while protecting against exploitation.

## Decision Rules

### Initial Cooperation Period
- **Rounds 1-3 (or first 20% of rounds if r < 15)**: Always cooperate (C)
- **Rationale**: Establish cooperative intent and gather information about opponent behaviors

### Adaptive Threshold Phase
After the initial period, use a dynamic cooperation threshold:

**Cooperate if**: `cooperation_rate >= threshold`

Where:
- `cooperation_rate` = (total cooperations by others) / (total possible cooperations by others) in recent history
- `threshold` = base_threshold + volatility_adjustment + endgame_adjustment

### Threshold Calculations

**Base Threshold**:
```
if k/n >= 0.4: base_threshold = 0.3    # High efficiency games
elif k/n >= 0.25: base_threshold = 0.4  # Medium efficiency games  
else: base_threshold = 0.5              # Low efficiency games
```

**Volatility Adjustment**:
```
volatility = standard_deviation(cooperation_rates_last_5_rounds)
volatility_adjustment = min(0.2, volatility * 0.5)
```

**Endgame Adjustment** (final 25% of rounds):
```
rounds_remaining = r - current_round
if rounds_remaining <= r/4:
    endgame_adjustment = 0.1 * (1 - rounds_remaining/(r/4))
else:
    endgame_adjustment = 0
```

## Memory and Learning

### Observation Window
- **Primary window**: Last 5 rounds for main decisions
- **Trend window**: Last 10 rounds (or all rounds if r < 10) for long-term trend analysis
- **Individual tracking**: Monitor each player's cooperation rate separately

### Pattern Recognition
```
recent_trend = (cooperations_last_3_rounds - cooperations_previous_3_rounds) / max(1, cooperations_previous_3_rounds)

if recent_trend > 0.2:
    apply_optimism_bonus = -0.1 to threshold
elif recent_trend < -0.2:
    apply_pessimism_penalty = +0.1 to threshold
```

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent.

### Last Round
If `current_cooperation_rate >= 0.4`: Cooperate
Else: Defect (since there's no future to build cooperation toward)

### Low Participation Scenarios
If fewer than 30% of players have cooperated in the last 3 rounds:
- Temporarily defect for 2 rounds
- Return to threshold-based decision making
- Lower threshold by 0.1 for next 3 rounds to encourage re-emergence of cooperation

### High Volatility Scenarios
If cooperation rates swing wildly (standard deviation > 0.3):
- Use more conservative threshold (+0.15)
- Extend observation window to 7 rounds
- Weight recent rounds more heavily in calculations

## Cooperative Features

### Forgiveness Mechanism
After any period of mutual defection, immediately cooperate for 2 consecutive rounds when cooperation rate rises above threshold, regardless of exact threshold value.

### Leadership Moments
In rounds where cooperation rate is just below threshold (within 0.05), cooperate anyway to potentially trigger others to cooperate.

### Reciprocity Bonus
If a player switched from D to C in the previous round, count their cooperation as 1.2 instead of 1.0 in rate calculations for the next 2 rounds.

## Pseudocode Summary

```
function decide_action(round, history, n, r, k):
    if round <= max(3, r*0.2):
        return COOPERATE
    
    cooperation_rate = calculate_recent_cooperation_rate(history, window=5)
    
    threshold = calculate_base_threshold(k, n)
    threshold += calculate_volatility_adjustment(history)
    threshold += calculate_endgame_adjustment(round, r)
    
    if round == r:  # Last round
        return COOPERATE if cooperation_rate >= 0.4 else DEFECT
    
    # Apply special conditions
    if detect_low_participation(history):
        return handle_low_participation()
    
    if cooperation_rate >= threshold - 0.05:  # Leadership moment
        return COOPERATE
    elif cooperation_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

This strategy maintains a cooperative stance while adapting to the specific dynamics of each game, ensuring robustness across different parameter values and opponent behaviors.
'''

description_COOPERATIVE_32 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Dynamic Threshold"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation thresholds and generous forgiveness mechanisms.

## Decision Rules

### 1. Cooperation Threshold Calculation
In each round t, calculate a dynamic cooperation threshold:
```
cooperation_threshold = max(0.3, (k/n) * 0.8)
```
This ensures we cooperate when the public good multiplier makes it collectively beneficial, with a minimum threshold to maintain cooperative momentum.

### 2. Main Decision Logic
```pseudocode
if round == 1:
    return COOPERATE  // Start cooperatively
    
if round == final_round:
    if cooperation_rate_last_5_rounds >= 0.4:
        return COOPERATE  // Reward sustained cooperation
    else:
        return DEFECT    // Protect against last-round defection
        
// Calculate recent cooperation rates
recent_cooperation_rate = count_cooperators_in_last_N_rounds(min(3, t-1)) / (n * min(3, t-1))
personal_cooperation_rate = my_cooperations_so_far / (t-1)

// Adaptive cooperation decision
if recent_cooperation_rate >= cooperation_threshold:
    return COOPERATE
elif recent_cooperation_rate >= (cooperation_threshold * 0.7) AND personal_cooperation_rate >= 0.6:
    return COOPERATE  // Generous forgiveness for committed cooperators
elif was_exploited_last_round() AND recent_cooperation_rate < 0.2:
    return DEFECT     // Punishment phase
else:
    // Probabilistic cooperation based on environment
    cooperation_probability = min(0.8, recent_cooperation_rate + 0.2)
    return random_choice(COOPERATE with probability cooperation_probability)
```

### 3. Key Adaptive Mechanisms

**Exploitation Detection:**
```pseudocode
was_exploited_last_round():
    return (I_cooperated_last_round AND others_cooperation_rate_last_round < 0.3)
```

**Environment Assessment:**
- Track cooperation rates over sliding windows (last 3 rounds)
- Adjust forgiveness based on personal commitment to cooperation
- Use probabilistic decisions to avoid predictable patterns

### 4. Edge Case Handling

**First Round:** Always cooperate to signal cooperative intent and test the waters.

**Final Round:** 
- Cooperate if recent cooperation rate ≥ 40% (reward sustained cooperation)
- Defect otherwise (protect against anticipated defection cascade)

**Low Participation Rounds:** When cooperation rate drops below 20%, enter a brief punishment phase but return to cooperation quickly to avoid permanent defection spirals.

**High Participation Rounds:** When cooperation rate exceeds 70%, maintain cooperation with high probability to sustain the positive equilibrium.

## Robustness Features

1. **Dynamic Thresholds:** Adapts cooperation requirements based on game parameters (k/n ratio)

2. **Generous Forgiveness:** Continues cooperating even when slightly exploited, if overall environment remains reasonably cooperative

3. **Exploitation Protection:** Punishes clear exploitation attempts while avoiding overreaction

4. **Probabilistic Elements:** Introduces randomness to avoid exploitation by deterministic counter-strategies

5. **Memory Management:** Uses sliding windows to balance responsiveness with stability

6. **Parameter Sensitivity:** Adjusts behavior based on the multiplication factor k and group size n

## Strategic Rationale

This strategy balances several key objectives:
- **Collective Welfare:** Promotes cooperation when it's mutually beneficial
- **Individual Protection:** Avoids systematic exploitation
- **Adaptability:** Responds to changing opponent behaviors
- **Forgiveness:** Prevents permanent defection spirals
- **Robustness:** Performs well against diverse opponent strategies

The strategy is inherently cooperative while being strategically sound, making it effective in tournaments against various opponent types including unconditional cooperators, defectors, and other adaptive strategies.
'''

description_COOPERATIVE_33 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with strategic adaptation, starting optimistically but learning from opponent behavior patterns to maintain cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Action**: Always cooperate (C)
- **Rationale**: Signal cooperative intent and test the cooperative potential of the group

### Rounds 2 through r-1: Adaptive Reciprocation

**Step 1: Calculate Cooperation Health**
```
cooperation_rate = (total_cooperators_last_round) / n
historical_cooperation_rate = (total_cooperators_all_previous_rounds) / (n × rounds_played)
```

**Step 2: Determine Base Cooperation Threshold**
```
base_threshold = max(0.3, k/n)  // Never go below 30% or the break-even point
```

**Step 3: Apply Graduated Response**
```
if cooperation_rate >= 0.7:
    action = C  // High cooperation deserves cooperation
elif cooperation_rate >= base_threshold:
    if historical_cooperation_rate >= base_threshold:
        action = C  // Sustained moderate cooperation
    else:
        action = C with probability = cooperation_rate  // Probabilistic cooperation
    endif
else:
    if historical_cooperation_rate >= 0.5:
        action = C with probability = 0.4  // Give benefit of doubt occasionally
    else:
        action = D  // Protect against widespread defection
    endif
endif
```

**Step 4: Forgiveness Mechanism**
```
rounds_since_last_cooperation_attempt = count_rounds_since_last_C()
if rounds_since_last_cooperation_attempt >= 3:
    action = C  // Periodic forgiveness to test for renewed cooperation
endif
```

### Final Round (Round r): Strategic Finale
```
if historical_cooperation_rate >= 0.4:
    action = C  // Reward overall cooperative behavior
else:
    action = D  // Protect against final-round exploitation
endif
```

## Key Features

### 1. **Graduated Reciprocation**
- Responds proportionally to cooperation levels rather than binary all-or-nothing
- Uses both recent and historical cooperation data to avoid overreacting to temporary fluctuations

### 2. **Dynamic Threshold Adaptation**
- Base cooperation threshold accounts for game economics (k/n ratio)
- Higher standards in favorable economic conditions, more forgiving in harsh ones

### 3. **Forgiveness Cycles**
- Periodic cooperation attempts even during defection phases
- Prevents permanent breakdown of cooperation due to temporary conflicts

### 4. **Multi-Player Awareness**
- Considers group dynamics rather than individual player tracking
- Robust to varying group sizes and compositions

### 5. **Economic Rationality**
- Protects against exploitation while maintaining cooperative potential
- Balances individual payoffs with group welfare

## Edge Case Handling

- **First Round**: Always cooperate to establish positive intent
- **Last Round**: Cooperate only if group has shown sustained cooperation
- **All Defection**: Implement forgiveness cycles to test for cooperation recovery
- **Mixed Signals**: Use probabilistic cooperation based on cooperation rates
- **Short Games**: Emphasize cooperation more heavily when r is small

## Robustness Features

This strategy is designed to:
- **Handle Exploiters**: Protect against consistent defectors while remaining open to cooperation
- **Reward Cooperators**: Maintain high cooperation with genuinely cooperative opponents
- **Adapt to Mixed Groups**: Function effectively with heterogeneous strategy mixes
- **Recover from Conflicts**: Use forgiveness mechanisms to restore cooperation after breakdowns
- **Scale Across Parameters**: Adjust behavior based on economic incentives (k/n ratio)

The strategy aims to be a "good citizen" that contributes to group welfare while maintaining strategic awareness to avoid exploitation, making it both cooperative and evolutionarily stable across diverse tournament conditions.
'''

description_COOPERATIVE_34 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy aims to maximize mutual cooperation while being robust against exploitation. It balances forgiveness with accountability, adapting to the cooperation level observed in the group while maintaining strong incentives for others to cooperate.

## Decision Rules

### Round 1: Conditional Cooperation Start
- **Always cooperate** in the first round to signal cooperative intent and give others the opportunity to reciprocate.

### Rounds 2 to r-1: Adaptive Reciprocal Response
The strategy uses a **sliding window approach** that considers both recent behavior and overall cooperation trends:

1. **Calculate Group Cooperation Rate (GCR)**:
   - Recent GCR = (cooperators in last min(3, current_round-1) rounds) / (n × min(3, current_round-1))
   - Overall GCR = (total cooperators observed) / (n × (current_round-1))
   - Weighted GCR = 0.7 × Recent GCR + 0.3 × Overall GCR

2. **Cooperation Threshold**:
   - Base threshold = (n-1)/n (the minimum cooperation rate needed for mutual benefit)
   - Adjusted threshold = Base threshold × (1 - 0.1 × (k-1)) (more forgiving when k is higher)

3. **Decision Rule**:
   ```pseudocode
   if Weighted GCR >= Adjusted threshold:
       cooperate()
   else if Recent GCR > 0 AND (current_round <= r/2):
       cooperate() // Give benefit of doubt in early-mid game
   else:
       defect()
   ```

### Last Round (Round r): Contingent Finale
- **Cooperate** if Weighted GCR from rounds 2 to r-1 is ≥ 0.5
- **Defect** otherwise
- Rationale: Reward sustained cooperation but don't be exploited in the final round if cooperation has been low

## Key Features

### 1. Adaptive Forgiveness
- More forgiving when the multiplication factor k is higher (greater potential for mutual benefit)
- Gives benefit of doubt in early rounds to allow cooperation to emerge
- Uses weighted average favoring recent behavior to adapt to changing group dynamics

### 2. Proportional Response
- Doesn't require perfect cooperation, just sufficient cooperation for mutual benefit
- Adjusts expectations based on group size and incentive structure
- Recognizes that some defection may be rational or accidental

### 3. Reputation Building
- Starts cooperatively to establish trustworthy reputation
- Maintains cooperation when others do, building positive feedback loops
- Switches to defection only when cooperation level becomes unsustainably low

### 4. End-Game Handling
- Avoids being exploited in the final round while still rewarding groups that maintained cooperation
- The 0.5 threshold for final round cooperation ensures we only reward genuine cooperative environments

## Robustness Features

### Against Always Defect
- Will initially cooperate but quickly switch to defection when GCR falls below threshold
- Won't be exploited for more than a few rounds

### Against Tit-for-Tat Variants
- Can establish mutual cooperation through initial cooperation
- Adapts to group-level reciprocity patterns rather than individual tracking

### Against Random Strategies
- Statistical approach handles noise and randomness
- Sliding window prevents single-round anomalies from derailing cooperation

### Against Complex Adaptive Strategies
- Simple, transparent rules make it predictable for others to cooperate with
- Flexible thresholds allow adaptation to various strategic environments

## Parameter Sensitivity
- **High k values**: More forgiving (lower adjusted threshold) since mutual cooperation has higher payoffs
- **Large n**: Naturally adjusts since base threshold approaches 1 as n increases
- **Long games (high r)**: Benefits from sustained cooperation detection over many rounds

This strategy balances the cooperative ideal of maximizing group welfare with the practical need to avoid exploitation, while remaining simple enough to be predictable and trustworthy to potential cooperators.
'''

description_COOPERATIVE_35 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using adaptive reciprocity based on observed opponent behavior patterns and game dynamics.

## Decision Rules

### 1. Initial Cooperation Phase
- **Rounds 1-3**: Always cooperate (C)
- **Rationale**: Establish cooperative intent and gather initial data on opponent behavior patterns

### 2. Adaptation Threshold Calculation
Calculate two key metrics after round 3:

**Cooperation Rate (CR)**: 
- CR = (Total cooperations by all other players) / (Total possible cooperations by all other players)

**Personal Exploitation Rate (PER)**:
- PER = (Rounds where I cooperated but received below-average payoff) / (Rounds I cooperated)

### 3. Main Strategy (Round 4 onwards)

**Cooperate (C) if ANY of these conditions hold:**

a) **High Cooperation Environment**: CR ≥ 0.6
b) **Moderate Cooperation with Low Exploitation**: CR ≥ 0.4 AND PER ≤ 0.3
c) **Reciprocal Cooperation Signal**: In the previous round, at least ⌈n/2⌉ players cooperated
d) **Recovery Opportunity**: Last round had ≥ (n-2) cooperators AND my last action was D

**Otherwise, Defect (D)**

### 4. Endgame Handling

**Final Round**: 
- Cooperate if CR over last 3 rounds ≥ 0.5
- Otherwise defect

**Penultimate Round**:
- Use main strategy rules but weight recent behavior (last 3 rounds) at 70%, earlier behavior at 30%

### 5. Forgiveness Mechanism
Every 5 rounds, if currently in a defection phase due to low cooperation:
- Reset PER calculation 
- Give one "test cooperation" to see if environment has improved
- If this test cooperation yields above-average payoff, resume cooperative stance

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and avoid coordination failure.

### Information-Poor Scenarios (Rounds 2-3)
Continue cooperating while building behavioral profiles of opponents.

### All-Defection Detected
If CR < 0.2 for 3 consecutive rounds:
- Switch to permanent defection for remaining rounds
- Exception: Still use forgiveness mechanism every 5 rounds

### Mixed Signals
When cooperation rate hovers around thresholds (0.4-0.6):
- Use trend analysis: if CR is increasing, bias toward cooperation
- If CR is decreasing, bias toward defection

## Pseudocode Structure

```
function decide_action(round, history, n, k):
    if round <= 3:
        return C
    
    CR = calculate_cooperation_rate(history, n)
    PER = calculate_personal_exploitation_rate(history)
    
    # Check forgiveness mechanism
    if round % 5 == 0 and currently_defecting():
        return test_cooperation()
    
    # Final round special case
    if round == total_rounds:
        return C if recent_CR() >= 0.5 else D
    
    # Main decision logic
    if CR >= 0.6:
        return C
    elif CR >= 0.4 and PER <= 0.3:
        return C
    elif previous_round_cooperators() >= ceil(n/2):
        return C
    elif recovery_opportunity_detected():
        return C
    else:
        return D
```

## Robustness Features

1. **Parameter Sensitivity**: Thresholds automatically adjust based on n (group size)
2. **Learning Adaptation**: Continuously updates opponent behavior assessment
3. **Exploitation Protection**: PER prevents systematic exploitation while maintaining cooperative bias
4. **Forgiveness**: Prevents permanent lock-in to defection when cooperation might resume
5. **Endgame Stability**: Reduces last-round defection cascades through conditional cooperation

This strategy aims to maximize mutual cooperation while protecting against exploitation, adapting to various opponent strategies from always-cooperate to trigger-based strategies to random play.
'''

description_COOPERATIVE_36 = '''
# Adaptive Generous Tit-for-Tat Strategy (AGTT)

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using adaptive forgiveness and generous reciprocation. It starts cooperative, responds to the group's cooperation level, and maintains resilience against both noise and exploitation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Signal cooperative intent and gather initial information about other players' tendencies.

### Rounds 2 to r-1: Adaptive Response
The strategy uses a **cooperation threshold** based on group cooperation rate:

```pseudocode
cooperation_rate = total_cooperators_last_round / n
cooperation_threshold = max(0.3, min(0.7, k/n))

if cooperation_rate >= cooperation_threshold:
    action = C
else:
    # Generous response: occasionally cooperate even when threshold not met
    if cooperation_rate >= (cooperation_threshold - 0.2) and random() < 0.3:
        action = C
    else:
        action = D
```

### Final Round (Round r): Conditional Defection
- If the average cooperation rate over all previous rounds ≥ 0.5: **Cooperate**
- Otherwise: **Defect**
- **Rationale**: Reward consistently cooperative groups while protecting against end-game exploitation.

## Key Adaptive Features

### 1. Dynamic Threshold Calculation
The cooperation threshold adapts to game parameters:
- **Base threshold**: k/n (the break-even cooperation rate)
- **Bounded**: Between 0.3 and 0.7 to avoid extreme sensitivity
- **Intuition**: When k/n is high, we need fewer cooperators to make cooperation worthwhile

### 2. Generous Forgiveness Mechanism
- Even when cooperation rate falls below threshold, still cooperate 30% of the time if the rate is "close enough" (within 0.2)
- This prevents permanent defection cycles and allows recovery from temporary setbacks
- Helps maintain cooperation in noisy environments

### 3. Historical Memory
- Tracks cooperation patterns across all previous rounds
- Uses this for final round decision-making
- Prevents being fooled by temporary cooperative phases

## Robustness Features

### Against Always Defectors
- Will quickly shift to primarily defecting after round 1-2
- Generous forgiveness prevents complete shutdown
- Protects against exploitation while maintaining some cooperation attempts

### Against Noise/Random Players
- Generous forgiveness handles random defections
- Threshold-based approach smooths over single-round variations
- Maintains cooperation with inconsistent but generally cooperative players

### Against Conditional Cooperators
- Adapts to their cooperation patterns
- Threshold approach aligns well with other conditional strategies
- Can establish mutual cooperation equilibrium

### Against Complex Strategies
- Simple rules make behavior predictable to cooperative partners
- Adaptive threshold responds to whatever cooperation level emerges
- Historical tracking prevents exploitation in later rounds

## Strategic Advantages

1. **Parameter Sensitivity**: Explicitly incorporates game parameters (k, n) into decision-making
2. **First-Mover Cooperation**: Always signals cooperative intent initially
3. **Proportional Response**: Response intensity matches the group's cooperation level
4. **Noise Resilience**: Generous forgiveness prevents overreaction to isolated defections
5. **End-Game Protection**: Uses historical information to make informed final-round decisions
6. **Simplicity**: Clear, implementable rules that other cooperative strategies can understand and reciprocate

This strategy should perform well in a diverse tournament environment by cooperating with cooperative opponents while protecting against exploitation, adapting to different group dynamics, and maintaining the cooperative mindset throughout the game.
'''

description_COOPERATIVE_37 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocation and forgiveness mechanisms. It balances cooperation promotion with defection deterrence.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Adaptive Reciprocation Phase (Rounds 4 onwards)

**Primary Decision Rule:**
```
cooperation_threshold = max(0.3, (k-1)/(n-1))
current_cooperation_rate = (cooperators_last_round) / n

if current_cooperation_rate >= cooperation_threshold:
    play C
else:
    apply graduated_response()
```

**Graduated Response Function:**
```
defection_severity = 1.0 - current_cooperation_rate
forgiveness_factor = min(0.8, rounds_remaining / total_rounds)

if defection_severity > 0.7:  # Severe defection (≤30% cooperation)
    if random() < (1 - forgiveness_factor):
        play D
    else:
        play C  # Occasional forgiveness
elif defection_severity > 0.4:  # Moderate defection (30-60% cooperation)
    if random() < 0.6 * (1 - forgiveness_factor):
        play D
    else:
        play C
else:  # Mild defection (60-70% cooperation)
    play C  # Maintain cooperation to encourage others
```

### 3. Endgame Adjustment
**Last 20% of rounds OR when rounds_remaining ≤ 3:**
- Increase cooperation probability by 50% to avoid destructive endgame effects
- Exception: If cooperation rate in last 3 rounds < 0.2, then defect to avoid extreme exploitation

### 4. Recovery Mechanism
Track cooperation trends over a sliding window:
```
if cooperation_trend_improving AND rounds_since_last_cooperation_attempt ≥ 2:
    play C  # Give cooperation another chance
```

## Key Features

### Cooperative Alignment
- **Default to cooperation**: Strategy starts cooperative and returns to cooperation whenever reasonable
- **Collective welfare focus**: Cooperation threshold considers the minimum viable cooperation rate for positive sum outcomes
- **Forgiveness mechanism**: Includes probabilistic forgiveness to break negative cycles

### Robustness Features
- **Adaptive threshold**: Cooperation threshold scales with game parameters (higher k allows for lower cooperation rates)
- **Graduated punishment**: Punishment severity matches defection severity
- **Trend sensitivity**: Responds to improving cooperation patterns
- **Anti-exploitation**: Protects against consistent free-riders while remaining cooperative

### Edge Case Handling
- **First round**: Always cooperate to signal cooperative intent
- **Early rounds**: Maintain cooperation to establish baseline
- **Endgame**: Increase cooperation to counter typical endgame defection spirals
- **Extreme exploitation**: Defect when cooperation rate falls below 20% in endgame

## Strategic Rationale

1. **Parameter Sensitivity**: The cooperation threshold `(k-1)/(n-1)` represents the minimum cooperation rate where contributing still yields positive marginal returns compared to universal defection.

2. **Information Utilization**: Uses full history to detect patterns and trends, not just last round outcomes.

3. **Forgiveness Balance**: Forgiveness increases as game progresses, preventing permanent punishment spirals while maintaining deterrent effect.

4. **Collective Action Solution**: Designed to solve the fundamental collective action problem by creating incentives for others to cooperate while protecting against exploitation.

This strategy should perform well against a diverse set of opponents, from always-cooperate to tit-for-tat to more sophisticated adaptive strategies, while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_38 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocity with Forgiveness"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through a combination of conditional cooperation, graduated responses, and strategic forgiveness.

## Decision Rules

### 1. Initial Cooperation Phase (First Round)
**Always cooperate (C)** in round 1 to signal cooperative intent and test the waters.

### 2. Main Strategy (Rounds 2 to r-1)
The strategy operates on three key principles:

#### A. Cooperation Threshold Analysis
- Calculate **cooperation rate** from previous round: `coop_rate = cooperators / n`
- Calculate **trend**: Compare last 3 rounds' cooperation rates (if available)

#### B. Decision Logic
```
IF round <= 3:
    IF (coop_rate >= 0.5) OR (my_previous_action == C AND my_payoff >= average_payoff):
        COOPERATE
    ELSE:
        DEFECT with 30% probability, COOPERATE with 70% probability

ELSE (round > 3):
    cooperation_momentum = (recent_coop_rate - older_coop_rate)
    
    IF coop_rate >= 0.6:
        COOPERATE (reward high cooperation)
    
    ELSE IF coop_rate >= 0.4 AND cooperation_momentum >= 0:
        COOPERATE (encourage positive trends)
    
    ELSE IF coop_rate >= 0.3:
        COOPERATE with probability = (0.4 + cooperation_momentum)
    
    ELSE IF coop_rate < 0.3:
        // Low cooperation environment - strategic defection
        IF (rounds_since_last_cooperation <= 2):
            DEFECT (avoid being exploited)
        ELSE:
            COOPERATE with 25% probability (occasional olive branch)
```

#### C. Forgiveness Mechanism
- Track **forgiveness_counter**: Reset every 4 rounds
- If cooperation rate drops below 0.3 for 2+ consecutive rounds, initiate "forgiveness probe":
  - Cooperate for 1 round regardless of recent history
  - If this triggers increased cooperation (coop_rate increases by >0.2), continue cooperating
  - Otherwise, return to defensive stance

### 3. Endgame Strategy (Final Round)
The last round requires special handling due to lack of future consequences:

```
IF it's the final round (round == r):
    IF (overall_cooperation_rate >= 0.5) AND (coop_rate_last_3_rounds >= 0.4):
        COOPERATE (reward sustained cooperation)
    ELSE:
        DEFECT (no future consequences, maximize individual payoff)
```

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase cooperation probability by 20% in all decisions
- Reduce forgiveness threshold to every 3 rounds
- Be more sensitive to individual player behavior patterns

### High Multiplication Factor (k > n-1)
- Increase baseline cooperation probability by 30%
- More aggressive forgiveness (probe every 2 rounds of low cooperation)

### Very Short Games (r ≤ 5)
- Cooperate in rounds 1-2 unconditionally
- Apply main strategy starting round 3
- No special endgame adjustment until final round

## Robustness Features

1. **Anti-Exploitation Protection**: Never cooperate for more than 3 consecutive rounds if receiving very low reciprocity (coop_rate < 0.2)

2. **Noise Tolerance**: Use 3-round moving averages rather than single-round decisions when possible

3. **Adaptive Learning**: Track which cooperation levels led to best personal and group outcomes, and bias future decisions accordingly

4. **Recovery Mechanism**: If personal average payoff falls below the theoretical "all-defect" baseline (1.0) for 3+ rounds, temporarily switch to more defensive play

## Strategic Rationale

This strategy balances several key objectives:
- **Promotes Cooperation**: Starts cooperatively and rewards group cooperation
- **Prevents Exploitation**: Has clear defensive mechanisms against consistent defectors
- **Encourages Recovery**: Includes forgiveness probes to restart cooperation cycles
- **Adapts to Context**: Adjusts behavior based on group size, game length, and multiplier
- **Handles Uncertainty**: Uses probabilistic decisions to avoid being too predictable

The strategy is designed to perform well against a diverse range of opponents, from pure cooperators to sophisticated adaptive strategies, while maintaining a fundamentally cooperative orientation that can achieve high collective welfare when reciprocated.
'''

description_COOPERATIVE_39 = '''
# Adaptive Cooperation Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperation with self-protection by being initially generous, quickly responsive to cooperation signals, but also capable of defending against persistent exploitation. It uses momentum-based decision making to create stable cooperative patterns while remaining adaptive to changing opponent behavior.

## Decision Rules

### 1. First Round
**Always cooperate (C)** to signal cooperative intent and test the waters.

### 2. Core Decision Algorithm
For rounds 2 through r, use the following decision process:

```pseudocode
cooperation_threshold = max(0.3, k/n - 0.1)  // Adaptive threshold based on efficiency
recent_rounds = min(3, current_round - 1)    // Look at last 3 rounds or all available
cooperation_momentum = 0
defection_momentum = 0

// Calculate momentum from recent history
for each of the last recent_rounds:
    cooperation_rate = (number_of_cooperators / n)
    if cooperation_rate >= cooperation_threshold:
        cooperation_momentum += 1
    else:
        defection_momentum += 1

// Generous forgiveness factor
if current_round <= r/3:  // First third of game
    forgiveness = 0.4
elif current_round <= 2*r/3:  // Middle third
    forgiveness = 0.2
else:  // Final third
    forgiveness = 0.1

// Main decision logic
if cooperation_momentum > defection_momentum:
    return COOPERATE
elif cooperation_momentum == defection_momentum:
    if random() < (cooperation_threshold + forgiveness):
        return COOPERATE
    else:
        return DEFECT
else:  // defection_momentum > cooperation_momentum
    if random() < forgiveness:
        return COOPERATE  // Generous forgiveness
    else:
        return DEFECT
```

### 3. Last Round Handling
In the final round (round r):
- If cooperation_momentum from recent history > 0: **Cooperate**
- Otherwise: **Defect** (since there's no future reciprocity)

## Key Features

### Adaptive Threshold
The cooperation threshold `max(0.3, k/n - 0.1)` automatically adjusts based on game parameters:
- Higher k/n ratio (more efficient public good) → lower threshold needed to trigger cooperation
- Always maintains minimum 30% cooperation rate requirement to avoid exploitation

### Momentum-Based Assessment
Instead of reacting to single rounds, the strategy looks at patterns over the last 2-3 rounds, creating stability and reducing noise from random defections.

### Generous Forgiveness
The strategy includes probabilistic forgiveness that decreases over time:
- Early game: 40% chance to cooperate even when others defect (exploration phase)
- Mid game: 20% chance (consolidation phase)
- Late game: 10% chance (exploitation prevention)

### Multi-Player Awareness
Unlike bilateral tit-for-tat, this strategy considers the overall group cooperation rate rather than individual player actions, making it naturally suited for n-player games.

## Edge Cases & Robustness

1. **Against All-Defectors**: Will initially try cooperation, then quickly adapt to defect after 2-3 rounds of low cooperation rates.

2. **Against All-Cooperators**: Will maintain cooperation throughout due to consistently high cooperation momentum.

3. **Against Mixed Strategies**: Will track the prevailing pattern and align accordingly, with slight bias toward cooperation due to forgiveness factor.

4. **Against Exploitative Strategies**: The decreasing forgiveness over time prevents long-term exploitation while still allowing recovery from temporary coordination failures.

5. **Small vs Large Groups**: The adaptive threshold automatically adjusts - in smaller groups (low n), requires higher individual cooperation rates; in larger groups, more tolerant of some defection.

## Strategic Advantages

- **Quick Coordination**: Can establish cooperative equilibrium within 2-3 rounds with like-minded strategies
- **Exploitation Resistant**: Forgiveness decreases over time, preventing persistent exploitation  
- **Parameter Adaptive**: Automatically adjusts behavior based on k/n efficiency ratio
- **Noise Tolerant**: Momentum-based decisions reduce overreaction to single-round deviations
- **Group Focused**: Considers overall cooperation levels rather than tracking individual players

This strategy should perform well against a diverse range of opponents while maintaining a fundamentally cooperative orientation and the ability to achieve mutually beneficial outcomes when possible.
'''

description_COOPERATIVE_40 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated responses and adaptive cooperation thresholds. It balances initial optimism with learned caution.

## Strategy Components

### 1. Decision Rules

**Primary Decision Logic:**
- **Cooperate** when the expected benefit from mutual cooperation exceeds the risk of exploitation
- **Defect** when facing persistent free-riders, but maintain readiness to re-establish cooperation

**Cooperation Threshold:**
- Maintain a dynamic "cooperation threshold" (CT) representing the minimum fraction of players who must cooperate for cooperation to be worthwhile
- Base threshold: CT_base = n/k (the break-even point where cooperation payoff equals defection payoff)
- Actual threshold: CT = CT_base + adaptation_factor

### 2. Adaptive Mechanism

**History Tracking:**
- Track cooperation rates over rolling windows of recent rounds
- Monitor individual player patterns when possible
- Calculate trend in overall cooperation levels

**Adaptation Rules:**
```
recent_coop_rate = cooperation_count_last_5_rounds / (n × 5)
trend = recent_coop_rate - cooperation_rate_previous_5_rounds

if recent_coop_rate > CT_base + 0.1:
    adaptation_factor = max(-0.1, adaptation_factor - 0.05)  // Become more trusting
elif recent_coop_rate < CT_base - 0.1:
    adaptation_factor = min(0.2, adaptation_factor + 0.05)   // Become more cautious
```

### 3. Round-by-Round Decisions

**Round 1:** Always COOPERATE (optimistic start)

**Rounds 2 to r-2:** 
```
predicted_cooperators = estimate_cooperators_this_round()
cooperation_rate = predicted_cooperators / n

if cooperation_rate >= CT:
    action = COOPERATE
else:
    action = DEFECT
```

**Round r-1:** Apply "shadow of the future" logic:
- If current cooperation rate > CT_base, COOPERATE to signal continued commitment
- Otherwise, DEFECT

**Round r (final):** 
- If cooperation rate in previous round > CT_base, COOPERATE (reward good behavior)
- Otherwise, DEFECT

### 4. Cooperation Estimation

**Estimating Cooperators This Round:**
```
For each other player j:
    if player j cooperated in ≥ 70% of last 3 rounds:
        predicted_cooperators += 1
    elif player j has alternating pattern:
        predicted_cooperators += 0.5
    else:
        predicted_cooperators += recent_cooperation_rate_of_j

Add self as cooperator if planning to cooperate
```

### 5. Graduated Response System

**Forgiveness Mechanism:**
- After defecting due to low cooperation, test the waters every 3-4 rounds by cooperating once
- If cooperation levels improve, gradually reduce adaptation_factor
- If they remain low, maintain defensive posture

**Punishment Graduation:**
- First drop in cooperation → continue cooperating for 1 more round (give benefit of doubt)
- Sustained low cooperation → defect but signal willingness to return
- Persistent defection by majority → defensive defection with periodic cooperation tests

### 6. Edge Case Handling

**Very Low n (n=2,3):** Use more generous thresholds since individual actions have high impact

**Very High k (k close to n):** Lower cooperation threshold since public good is very efficient

**Very Long Games (r > 20):** Use longer history windows (up to 10 rounds) for more stable estimates

**Very Short Games (r ≤ 5):** Start more cooperatively and be slower to adapt

## Key Features

1. **Adaptive:** Adjusts expectations based on observed behavior
2. **Forgiving:** Provides opportunities for defectors to return to cooperation
3. **Robust:** Protects against exploitation while maintaining cooperative potential
4. **Efficient:** Considers the economic fundamentals (k/n ratio) in decision-making
5. **Responsive:** Reacts to recent trends rather than just historical averages

This strategy should perform well against various opponent types: it can sustain cooperation with other cooperators, avoid exploitation by consistent defectors, and adapt to mixed or changing strategies.
'''

description_COOPERATIVE_41 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intentions with adaptive learning, starting optimistically but becoming increasingly strategic based on the group's behavior patterns. It aims to foster cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
**Always COOPERATE** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocation

#### Step 1: Calculate Cooperation Health Metric
```
cooperation_rate = (total_cooperations_so_far) / (n × rounds_played)
recent_cooperation_rate = (cooperations_in_last_2_rounds) / (n × min(2, rounds_played))
health_metric = 0.7 × cooperation_rate + 0.3 × recent_cooperation_rate
```

#### Step 2: Determine Base Inclination
- If `health_metric ≥ 0.6`: **High trust** - default to COOPERATE
- If `0.3 ≤ health_metric < 0.6`: **Medium trust** - use strategic calculation
- If `health_metric < 0.3`: **Low trust** - default to DEFECT

#### Step 3: Strategic Adjustment (for Medium/High trust states)

**Forgiveness Mechanism**: If cooperation rate has increased in the last 2 rounds compared to the previous 2 rounds, increase willingness to cooperate by treating the health_metric as if it were 0.1 higher.

**Exploitation Protection**: If in the last round:
- You cooperated AND fewer than `n/3` others cooperated: Increase defection probability
- More than `2n/3` players cooperated: Strong cooperation signal, lean toward cooperating

### Final Round (Round r): Strategic Endgame
Since there's no future retaliation to fear:
- If `cooperation_rate ≥ 0.5`: COOPERATE (reward a cooperative group)
- If `cooperation_rate < 0.5`: DEFECT (protect against final exploitation)

## Detailed Algorithm

```pseudocode
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate metrics from history
    total_cooperations = sum of all C actions across all players and rounds
    rounds_played = round - 1
    cooperation_rate = total_cooperations / (n * rounds_played)
    
    if rounds_played >= 2:
        recent_cooperations = cooperations in rounds (round-2) to (round-1)
        recent_cooperation_rate = recent_cooperations / (n * min(2, rounds_played))
    else:
        recent_cooperation_rate = cooperation_rate
    
    health_metric = 0.7 * cooperation_rate + 0.3 * recent_cooperation_rate
    
    # Forgiveness mechanism
    if rounds_played >= 4:
        old_period_rate = cooperations_in_rounds(round-4, round-3) / (n * 2)
        recent_period_rate = cooperations_in_rounds(round-2, round-1) / (n * 2)
        if recent_period_rate > old_period_rate:
            health_metric = min(1.0, health_metric + 0.1)
    
    # Final round special handling
    if round == r:
        return COOPERATE if cooperation_rate >= 0.5 else DEFECT
    
    # Main decision logic
    if health_metric >= 0.6:
        # High trust - check for exploitation protection
        my_last_action = my_action_in_round(round-1)
        others_cooperated_last = count_others_cooperations_in_round(round-1)
        
        if my_last_action == COOPERATE and others_cooperated_last < n/3:
            return DEFECT  # Exploitation protection
        else:
            return COOPERATE
    
    elif health_metric >= 0.3:
        # Medium trust - strategic decision
        others_cooperated_last = count_others_cooperations_in_round(round-1)
        
        if others_cooperated_last > 2*n/3:
            return COOPERATE  # Strong cooperation signal
        elif others_cooperated_last >= n/2:
            return COOPERATE  # Moderate cooperation
        else:
            return DEFECT
    
    else:
        # Low trust
        return DEFECT
```

## Key Features

1. **Adaptive Learning**: The strategy learns from both overall and recent behavior patterns
2. **Forgiveness**: It can recover trust if the group shows improvement
3. **Exploitation Protection**: Guards against being taken advantage of while maintaining cooperative stance
4. **Endgame Handling**: Makes a principled decision in the final round based on the group's overall behavior
5. **Robustness**: Works across different values of n, k, and r without requiring parameter tuning

## Edge Cases Handled

- **First round**: Always cooperate to signal intent
- **Early rounds**: Uses available data appropriately when history is limited
- **Final round**: Strategic decision based on group's demonstrated trustworthiness
- **All-defect groups**: Quickly adapts to protect payoff
- **Recovering groups**: Forgiveness mechanism allows for renewed cooperation
- **Mixed groups**: Uses thresholds to make principled decisions in ambiguous situations

This strategy should perform well against a wide variety of opponent strategies while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_42 = '''
# Adaptive Tit-for-Majority Strategy (ATFM)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to build and maintain cooperative coalitions while defending against free-riders through measured retaliation and forgiveness.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give others the opportunity to establish mutual cooperation.

### Rounds 2 to r-1: Adaptive Response
The strategy tracks two key metrics:
- **Majority cooperation rate**: Percentage of other players who cooperated in the previous round
- **Personal exploitation level**: How much I'm being taken advantage of relative to others

**Decision Logic:**
1. **If majority cooperated last round (>50% of others played C):**
   - Cooperate to maintain the cooperative equilibrium

2. **If minority cooperated last round (≤50% of others played C):**
   - **Forgiveness check**: If this is the first time majority defected after a cooperative period, cooperate once more (give benefit of doubt for coordination errors)
   - **Otherwise defect** to avoid continued exploitation

3. **Exploitation protection**: If I've been consistently earning less than the average player over the last 3 rounds, defect regardless of majority behavior until my relative position improves

### Round r (Final Round): Conditional Cooperation
- **If the game has been mostly cooperative** (cooperation rate >60% in last 3 rounds): Cooperate to end on a positive note
- **Otherwise**: Defect, as there's no future to protect and current cooperation seems unlikely

## Key Features

### 1. Majority Threshold Adaptation
The strategy adjusts its cooperation threshold based on game parameters:
- For smaller groups (n ≤ 4): Require 60% cooperation rate to continue cooperating
- For larger groups (n > 4): Use 50% threshold to account for coordination difficulties

### 2. Memory and Forgiveness
- **Short-term memory**: Primary decisions based on last round
- **Medium-term memory**: Exploitation protection uses 3-round window
- **Forgiveness mechanism**: One-time forgiveness for transitions from cooperation to defection (accounts for coordination failures)

### 3. Endgame Handling
- Recognizes final round dynamics where rational players might defect
- Maintains cooperation only if strong cooperative pattern exists
- Avoids being the "sucker" in final round

### 4. Robustness Features
- **Anti-exploitation**: Protects against strategies that try to free-ride on consistent cooperators
- **Reciprocity**: Rewards cooperative environments, punishes defective ones
- **Adaptability**: Adjusts to different group sizes and cooperation levels

## Pseudocode

```
function decide_action(round, n, k, r, history):
    if round == 1:
        return COOPERATE
    
    others_last_round = get_others_actions(history, round-1)
    cooperation_rate = count(others_last_round, COOPERATE) / (n-1)
    
    if round == r:  // Final round
        recent_coop_rate = average_cooperation_rate(history, last_3_rounds)
        return COOPERATE if recent_coop_rate > 0.6 else DEFECT
    
    // Check for exploitation
    if is_being_exploited(history, round, 3_rounds):
        return DEFECT
    
    // Main decision logic
    threshold = 0.6 if n <= 4 else 0.5
    
    if cooperation_rate > threshold:
        return COOPERATE
    else:
        // Forgiveness check
        if was_mostly_cooperative_before(history, round-2) and 
           first_time_majority_defected(history, round-1):
            return COOPERATE  // Give one chance
        else:
            return DEFECT

function is_being_exploited(history, round, window):
    if round < window + 1:
        return False
    
    my_avg_payoff = my_average_payoff(history, window)
    others_avg_payoff = others_average_payoff(history, window)
    
    return my_avg_payoff < others_avg_payoff * 0.9  // 10% tolerance
```

## Strategic Rationale

1. **Encourages cooperation**: Starts cooperatively and rewards cooperative environments
2. **Prevents exploitation**: Has mechanisms to detect and respond to free-riding
3. **Builds coalitions**: Works well when multiple players use similar reciprocal strategies
4. **Handles coordination failure**: Forgiveness mechanism accounts for occasional miscoordination
5. **Adapts to group size**: Recognizes that coordination is harder in larger groups
6. **Robust to various opponents**: Performs well against both cooperative and selfish strategies

This strategy should perform well in a tournament setting by establishing cooperative relationships where possible while protecting against exploitation by purely selfish strategies.
'''

description_COOPERATIVE_43 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with strategic adaptation, starting optimistically but responding proportionally to the collective behavior of other players. It aims to foster cooperation while protecting against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase (Rounds 1-3)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Rounds 2-3**: COOPERATE unless the cooperation rate in the previous round was ≤ 20%

### 2. Main Adaptive Phase (Rounds 4 to r-2)
Use a **Proportional Response** mechanism:

```pseudocode
cooperation_rate = (number of cooperators in last round) / n
my_cooperation_probability = max(0.1, min(0.9, cooperation_rate + 0.2))

if random() < my_cooperation_probability:
    action = COOPERATE
else:
    action = DEFECT
```

**Key features:**
- Respond proportionally to others' cooperation levels
- Add a 0.2 "optimism bonus" to encourage cooperation
- Maintain minimum 10% cooperation (never fully abandon cooperation)
- Cap at 90% to avoid pure exploitation

### 3. Forgiveness Mechanism
Every 4-5 rounds, check for **redemption opportunities**:
- If cooperation rate has been low (<30%) for 3+ consecutive rounds
- AND current round number mod 4 == 0
- Then COOPERATE regardless of recent history (give others a chance to restart cooperation)

### 4. Endgame Strategy (Last 2 rounds)
- **Round r-1**: Use the adaptive mechanism but with reduced optimism bonus (0.1 instead of 0.2)
- **Round r**: COOPERATE if cooperation rate in round r-1 was ≥ 40%, otherwise DEFECT

## Edge Cases and Special Conditions

### First Round
Always COOPERATE to signal cooperative intent and establish a positive foundation.

### Low Participation Scenarios
If cooperation rate drops below 10% for 2+ consecutive rounds:
- Reduce cooperation probability by 50% for next 2 rounds
- But maintain minimum 10% cooperation to allow recovery

### High Cooperation Scenarios
If cooperation rate exceeds 80% for 2+ consecutive rounds:
- Increase cooperation probability to 95% to reinforce the cooperative norm

### Parameter Adaptation
The strategy adapts to game parameters:
- **High k/n ratio** (>0.4): Increase optimism bonus to 0.3 (cooperation more valuable)
- **Low k/n ratio** (<0.25): Reduce optimism bonus to 0.15 (cooperation less valuable)
- **Large n** (>10): Reduce minimum cooperation to 5% (individual impact smaller)

## Robustness Features

1. **Graduated Response**: Doesn't immediately punish single defections, but responds to patterns
2. **Bounded Rationality**: Never completely stops cooperating or becomes completely exploitable
3. **Forgiveness**: Periodic attempts to restart cooperation prevent permanent defection cycles
4. **Endgame Awareness**: Adjusts behavior in final rounds while maintaining some cooperation
5. **Parameter Sensitivity**: Adapts optimism based on the economic incentives (k/n ratio)

## Strategic Rationale

This strategy is designed to:
- **Start cooperatively** to establish good relationships
- **Reward cooperation** by increasing cooperation when others cooperate
- **Discourage exploitation** by reducing cooperation when others defect
- **Enable recovery** through forgiveness and redemption mechanisms
- **Adapt to incentives** by considering the multiplication factor and group size
- **Handle endgames** by balancing final-round considerations with ongoing cooperation

The strategy is robust against purely selfish opponents (by adapting downward) while encouraging and sustaining cooperation with like-minded players (by maintaining optimism and forgiveness).
'''

description_COOPERATIVE_44 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocation and gradual trust-building. It balances optimism with realism, starting cooperative but learning from the group's behavior.

## Strategy Components

### 1. Decision Rules

**Primary Rule - Threshold-Based Cooperation:**
- Cooperate if the cooperation rate in the previous round ≥ cooperation threshold
- Defect if the cooperation rate in the previous round < cooperation threshold
- Cooperation threshold starts at 0.5 and adapts based on game dynamics

**Threshold Adaptation Formula:**
```
new_threshold = max(0.2, min(0.8, base_threshold + adjustment))

where:
base_threshold = 0.5
adjustment = (average_cooperation_rate - 0.5) × 0.1
```

This keeps the threshold between 20% and 80%, preventing extreme responses while allowing adaptation to the group's cooperative tendencies.

### 2. Edge Case Handling

**First Round:**
- Always cooperate (C)
- Rationale: Signal cooperative intent and gather information about others

**Last Round Detection:**
- If current round > 0.8 × r, increase defection probability slightly
- Final round: Use expected value calculation comparing cooperation vs defection payoffs based on predicted group behavior

**Early Rounds (rounds 2-3):**
- Use lenient threshold of 0.3 to encourage cooperation development
- Give groups time to establish cooperative norms

### 3. Adaptive Mechanisms

**Forgiveness Component:**
- If cooperation rate drops below threshold but was above 0.6 in the previous 2 rounds, cooperate anyway
- This prevents single-round defection cascades from destroying cooperation

**Momentum Detection:**
- If cooperation rate has been increasing for 3+ consecutive rounds, cooperate regardless of current threshold
- Reward positive trends to reinforce cooperative spirals

**Group Size Adjustment:**
- For smaller groups (n ≤ 4): Use threshold of 0.4 (more forgiving)
- For larger groups (n > 8): Use threshold of 0.6 (require stronger cooperation signals)

### 4. Pseudocode Structure

```
function decide_action(round_num, history, n, r, k):
    if round_num == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    last_round_coop_rate = cooperation_rate(history[-1])
    avg_coop_rate = average_cooperation_rate(history)
    
    # Adapt threshold
    base_threshold = adjust_for_group_size(0.5, n)
    threshold = adapt_threshold(base_threshold, avg_coop_rate)
    
    # Apply leniency in early rounds
    if round_num <= 3:
        threshold = min(threshold, 0.3)
    
    # Check forgiveness condition
    if (last_round_coop_rate < threshold and 
        recent_trend_was_cooperative(history[-3:])):
        return COOPERATE
    
    # Check momentum condition
    if increasing_cooperation_trend(history[-3:]):
        return COOPERATE
    
    # Last round expected value calculation
    if round_num == r:
        return last_round_decision(history, n, k)
    
    # Primary decision rule
    if last_round_coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

### 5. Robustness Features

**Anti-Exploitation Protection:**
- Never cooperate if cooperation rate has been below 0.15 for 3+ consecutive rounds
- This prevents complete exploitation by predominantly defecting groups

**Noise Tolerance:**
- Use 3-round moving averages rather than single-round decisions where appropriate
- Prevents overreaction to random variations in cooperation

**Recovery Mechanism:**
- After 5+ rounds of mutual defection, occasionally cooperate (20% probability) to test if cooperation can be rekindled

## Strategic Rationale

This strategy is designed to:
1. **Start optimistically** to encourage cooperative norms
2. **Adapt to group behavior** without being naive about defection
3. **Maintain cooperation** when it's working well
4. **Protect against exploitation** while remaining open to cooperation recovery
5. **Handle endgame effects** by considering expected payoffs in final rounds

The strategy balances the cooperative ideal with practical game theory insights, making it robust against various opponent behaviors while consistently pushing toward mutually beneficial outcomes when possible.
'''

description_COOPERATIVE_45 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using adaptive thresholds based on group cooperation levels and implementing graduated responses to defection.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and gather information about the group's disposition.

### Rounds 2 to r-1: Adaptive Reciprocal Response

The strategy maintains a **cooperation threshold** that adapts based on observed group behavior:

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.3, min(0.7, average_cooperation_rate * 1.2))
```

Where `average_cooperation_rate` is the proportion of players who cooperated in the previous round.

**Decision Rule:**
1. **Cooperate** if the cooperation rate in the previous round ≥ cooperation_threshold
2. **Cooperate** if you were among the cooperators last round AND at least one other player also cooperated
3. **Defect** otherwise

**Forgiveness Mechanism:**
If you've defected for 2 consecutive rounds and the group cooperation rate in the last round was ≥ 0.4, then cooperate to test if the group is recovering.

### Final Round: Conditional Cooperation
In the last round (round r):
- **Cooperate** if the cooperation rate in round r-1 was ≥ 0.5
- **Defect** otherwise

This prevents being exploited by players who always defect in the final round while maintaining cooperation with genuinely cooperative players.

## Key Features

### 1. Adaptive Thresholds
The cooperation threshold adjusts based on group behavior:
- If the group is highly cooperative (>58% cooperation), the threshold increases to ~70%
- If the group is less cooperative, the threshold decreases to maintain some cooperation
- Bounded between 30% and 70% to prevent extreme responses

### 2. Graduated Response System
Rather than immediate retaliation, the strategy:
- Continues cooperating if you cooperated and at least one other did too
- Only defects when cooperation is genuinely futile
- Includes a forgiveness mechanism to recover from mutual defection spirals

### 3. Robustness Against Various Opponents
- **Against Always Cooperate:** Maintains high cooperation
- **Against Always Defect:** Quickly adapts to defect, minimizing losses
- **Against Tit-for-Tat variants:** Engages in cooperative cycles
- **Against Random players:** Adapts threshold based on their average behavior
- **Against sophisticated strategies:** The adaptive threshold prevents exploitation

### 4. Edge Case Handling
- **First round:** Always cooperate for information gathering
- **Final round:** Conditional cooperation based on recent history
- **Low cooperation scenarios:** Maintains minimum 30% threshold to occasionally test for cooperation recovery
- **High cooperation scenarios:** Raises bar to 70% to ensure genuine cooperation

## Pseudocode Summary

```python
def decide_action(round_num, history):
    if round_num == 1:
        return COOPERATE
    
    last_round_coop_rate = calculate_cooperation_rate(history[-1])
    avg_coop_rate = calculate_average_cooperation_rate(history)
    
    cooperation_threshold = max(0.3, min(0.7, avg_coop_rate * 1.2))
    
    if round_num == total_rounds:  # Final round
        return COOPERATE if last_round_coop_rate >= 0.5 else DEFECT
    
    # Forgiveness mechanism
    if consecutive_defections(my_history) >= 2 and last_round_coop_rate >= 0.4:
        return COOPERATE
    
    # Main decision logic
    if last_round_coop_rate >= cooperation_threshold:
        return COOPERATE
    elif my_last_action == COOPERATE and last_round_coop_rate > 0:
        return COOPERATE
    else:
        return DEFECT
```

This strategy is designed to be cooperative by default while protecting against exploitation, adapting to the group's behavior, and maintaining the potential for mutual cooperation even after periods of defection.
'''

description_COOPERATIVE_46 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Social Learning"

## Core Philosophy
This strategy aims to foster cooperation while protecting against exploitation through adaptive learning and generous reciprocity. It balances optimism about cooperation with realistic responses to defection patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance at establishing a cooperative norm.

### Rounds 2 to r-1: Adaptive Reciprocity

**Step 1: Calculate Cooperation Rate**
- Track the overall cooperation rate from the previous round: `prev_coop_rate = (number of cooperators in previous round) / n`

**Step 2: Identify Personal Treatment**
- Count how many players cooperated when you cooperated in previous interactions
- Calculate your "reciprocity score": `reciprocity_score = (times others cooperated when you cooperated) / (times you cooperated)`

**Step 3: Apply Decision Logic**
```
IF prev_coop_rate >= 0.5:
    // Majority cooperated - maintain cooperation
    Cooperate
    
ELSE IF prev_coop_rate >= (1/n):
    // Some cooperation exists - be generous but adaptive
    IF reciprocity_score >= 0.3 OR (random chance < 0.3):
        Cooperate  // Give benefit of doubt or random forgiveness
    ELSE:
        Defect     // Protect against systematic exploitation
        
ELSE:
    // Very low cooperation - defensive mode
    IF reciprocity_score >= 0.5:
        Cooperate  // Reward those who reciprocated
    ELSE:
        Defect     // Self-protection
```

### Last Round (Round r): Conditional Cooperation
- **If group cooperation rate over all previous rounds >= 0.4**: Cooperate (reward good group behavior)
- **Otherwise**: Defect (avoid being exploited in final round)

## Key Features

### 1. Generous Forgiveness
- Includes 30% random forgiveness even when facing some defection
- Prevents permanent punishment spirals
- Allows recovery from misunderstandings or temporary defections

### 2. Social Learning
- Adapts based on group-wide behavior patterns, not just individual interactions
- Recognizes that in large groups, tracking individual players is less important than understanding group dynamics

### 3. Reciprocity Tracking
- Maintains memory of how others treated your cooperative moves
- Rewards those who reciprocated your cooperation
- Protects against systematic free-riders

### 4. Threshold-Based Adaptation
- Uses cooperation rate thresholds (0.5, 1/n) that scale with group size
- Higher threshold (0.5) for full cooperation
- Lower threshold (1/n) ensures strategy doesn't give up too easily even with minimal cooperation

### Edge Cases Handled

**First Round**: Always cooperate to establish cooperative potential

**Small Groups (n=2,3)**: Strategy becomes more sensitive to individual defection due to higher impact per player

**Large Groups**: Focuses more on overall cooperation rates rather than individual tracking

**Final Round**: Balances final-round defection temptation with rewarding consistently cooperative groups

**All-Defection Scenario**: Eventually switches to defection while maintaining small probability of cooperation to test for change

**Mixed Groups**: Adapts cooperation level to match group's demonstrated commitment level

## Robustness Features

1. **Scale-Independent**: Thresholds adjust automatically to group size
2. **History-Aware**: Uses cumulative information, not just recent rounds
3. **Exploitation-Resistant**: Reduces cooperation when consistently exploited
4. **Recovery-Capable**: Random forgiveness allows escape from punishment cycles
5. **Endgame-Prepared**: Handles final-round incentives appropriately

This strategy promotes cooperation while learning from experience, making it both principled and practical for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_47 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity. It begins cooperatively but adjusts based on observed group behavior, balancing trust-building with defection deterrence.

## Decision Rules

### Initial Cooperation Phase (First 20% of rounds)
- **Cooperate unconditionally** for the first max(1, ⌊0.2r⌋) rounds
- This establishes cooperative intent and allows observation of group dynamics
- Exception: If r ≤ 5, cooperate for exactly 1 round initially

### Main Adaptive Phase (Middle 60% of rounds)
After the initial phase, use a **Cooperation Threshold Model**:

1. **Calculate group cooperation rate**: 
   - `group_coop_rate = (total_C_actions) / (n × rounds_played)`

2. **Determine cooperation probability** based on three factors:
   
   **Base Cooperation Level**: 
   - If `group_coop_rate ≥ 0.7`: Base probability = 0.9 (high trust)
   - If `group_coop_rate ≥ 0.5`: Base probability = 0.7 (moderate trust)  
   - If `group_coop_rate ≥ 0.3`: Base probability = 0.4 (cautious)
   - If `group_coop_rate < 0.3`: Base probability = 0.2 (defensive)

   **Recent Trend Adjustment**:
   - Calculate cooperation rate for last min(3, rounds_played) rounds
   - If recent rate > overall rate + 0.1: +0.15 to probability
   - If recent rate < overall rate - 0.1: -0.15 to probability

   **Personal Exploitation Check**:
   - If I was the only cooperator in the last round: -0.2 to probability
   - If I cooperated but <30% of others did in last round: -0.1 to probability

3. **Final Decision**: Cooperate if random[0,1] < adjusted_probability

### Endgame Phase (Last 20% of rounds)
- **Conditional reciprocity**: Mirror the group's recent behavior more directly
- If group cooperation rate in last 3 rounds ≥ 0.6: Cooperate
- If group cooperation rate in last 3 rounds < 0.6 but ≥ 0.3: Use 50% probability
- If group cooperation rate in last 3 rounds < 0.3: Defect
- **Final round**: Always defect (standard game theory prediction)

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent and gather information about others

### Last Round  
- Always defect, as there's no future to incentivize cooperation

### Very Short Games (r ≤ 3)
- Round 1: Cooperate
- Round 2: Cooperate if anyone else cooperated in Round 1, otherwise defect
- Round 3: Defect

### High Multiplication Factor (k > 0.8n)
- Increase all cooperation probabilities by 0.1, as the public good is highly valuable

### Low Multiplication Factor (k < 0.4n)
- Decrease all cooperation probabilities by 0.1, as free-riding is more tempting

## Cooperative Alignment Features

1. **Benefit of the Doubt**: Starts cooperatively and gives multiple chances for groups to establish cooperation

2. **Collective Welfare Focus**: Higher cooperation rates when the group shows willingness to contribute to public goods

3. **Forgiveness Mechanism**: Recent positive trends can overcome poor historical performance

4. **Graduated Response**: Doesn't immediately punish single defections but responds to sustained non-cooperation

5. **Transparency**: Strategy is predictable enough that genuinely cooperative players can learn to work with it

## Robustness Features

- **Adaptive Thresholds**: Adjusts expectations based on actual group behavior rather than fixed assumptions
- **Multi-timeframe Analysis**: Considers both overall history and recent trends
- **Probabilistic Decisions**: Avoids being perfectly predictable to exploitative strategies
- **Parameter Sensitivity**: Adjusts behavior based on game economics (multiplication factor)
- **Endgame Protection**: Reduces vulnerability to last-round exploitation

This strategy encourages cooperation when reciprocated while maintaining resilience against various forms of exploitation, making it suitable for tournaments with diverse opponent strategies.
'''

description_COOPERATIVE_48 = '''
# Adaptive Tit-for-Tat with Forgiveness (ATTF) Strategy

## Core Philosophy
This strategy balances cooperation with protection against exploitation by adapting to the overall cooperation level in the population while maintaining a fundamentally cooperative stance.

## Decision Rules

### Round 1: Cooperative Start
**Always cooperate** in the first round to signal cooperative intent and gather initial information about the population.

### Rounds 2 to r-1: Adaptive Response
Use a **cooperation threshold** system based on recent population behavior:

1. **Calculate cooperation rate**: `coop_rate = (total cooperators in previous round) / n`

2. **Determine base threshold**: 
   - If `k/n > 0.5`: Use threshold = `0.3` (more forgiving when public good is valuable)
   - If `k/n ≤ 0.5`: Use threshold = `0.4` (less forgiving when public good has lower value)

3. **Apply forgiveness mechanism**:
   - Track consecutive rounds where `coop_rate < threshold`
   - If this count ≤ 2: **Cooperate** (give benefit of doubt)
   - If this count > 2: **Defect** (protect against persistent exploitation)

4. **Reset forgiveness**: When `coop_rate ≥ threshold`, reset the consecutive low-cooperation counter to 0

### Final Round: Conditional Cooperation
In the last round, cooperate if:
- The cooperation rate in round r-1 was ≥ threshold, OR
- More than half of all previous rounds had cooperation rates ≥ threshold

Otherwise, defect to avoid end-game exploitation.

## Pseudocode

```
Initialize:
  consecutive_low_coop = 0
  threshold = (k/n > 0.5) ? 0.3 : 0.4
  
Round 1:
  return COOPERATE
  
Rounds 2 to r-1:
  coop_rate = count_cooperators_last_round / n
  
  if coop_rate >= threshold:
    consecutive_low_coop = 0
    return COOPERATE
  else:
    consecutive_low_coop += 1
    if consecutive_low_coop <= 2:
      return COOPERATE  // Forgiveness
    else:
      return DEFECT     // Protection
      
Round r (final):
  recent_coop_rate = count_cooperators_last_round / n
  historical_good_rounds = count_rounds_with_high_cooperation
  
  if recent_coop_rate >= threshold OR 
     historical_good_rounds > (r-1)/2:
    return COOPERATE
  else:
    return DEFECT
```

## Key Features

**Adaptive**: Adjusts cooperation threshold based on the multiplication factor k, recognizing that higher k values make cooperation more valuable.

**Forgiving**: Doesn't immediately punish single instances of low cooperation, allowing for recovery from coordination failures or noise.

**Protective**: Switches to defection when facing persistent exploitation (3+ consecutive rounds of low cooperation).

**History-Aware**: Uses both recent and long-term cooperation patterns to make final-round decisions.

**Robust**: Works across different game parameters and opponent types without requiring specific coordination mechanisms.

This strategy encourages cooperation while protecting against exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_49 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation through graduated reciprocity, starting optimistically but adapting based on the observed cooperation levels and trends in the group. It balances immediate exploitation protection with long-term cooperation incentives.

## Decision Rules

### 1. Opening Phase (Rounds 1-2)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Round 2**: Always COOPERATE (give others a chance to reciprocate)

### 2. Main Phase (Rounds 3 to r-2)
Use a **Cooperation Threshold Strategy** based on:

**Cooperation Rate Calculation**:
```
cooperation_rate = total_cooperators_in_last_round / n
recent_trend = avg_cooperation_rate_last_3_rounds - avg_cooperation_rate_previous_3_rounds
```

**Decision Logic**:
- **COOPERATE** if:
  - `cooperation_rate ≥ 0.5` (majority cooperated last round), OR
  - `cooperation_rate ≥ 0.3` AND `recent_trend ≥ 0` (reasonable cooperation with positive/stable trend), OR
  - `cooperation_rate < 0.3` BUT we defected last round AND `recent_trend > 0.1` (forgiveness opportunity)

- **DEFECT** otherwise

### 3. Endgame Phase (Last 2 rounds: r-1 and r)
Apply **Conditional Final Cooperation**:

- **Round r-1**: 
  - COOPERATE if `overall_cooperation_rate ≥ 0.4` (the group has shown reasonable cooperative behavior)
  - DEFECT otherwise

- **Round r** (final round):
  - COOPERATE if `overall_cooperation_rate ≥ 0.6` AND `cooperation_rate_last_round ≥ 0.5`
  - DEFECT otherwise

## Key Features

### Adaptive Thresholds
The strategy adjusts its cooperation threshold based on:
- **Group size sensitivity**: In larger groups, slightly lower thresholds account for coordination difficulties
- **Multiplication factor awareness**: Higher k values encourage more cooperation tolerance
- **Historical performance**: Long-term cooperation rates influence endgame decisions

### Forgiveness Mechanism
The strategy includes forgiveness to break potential defection spirals:
- If we defected last round but see improving cooperation trends, we give cooperation another chance
- This prevents permanent breakdown from temporary setbacks

### Trend Analysis
The strategy looks at both current cooperation levels and recent trends:
- Rising cooperation rates signal potential for stable cooperation
- Declining rates trigger more defensive behavior
- This helps distinguish between temporary fluctuations and systematic shifts

## Edge Case Handling

### Very Small Groups (n = 2-3)
- Slightly higher cooperation thresholds since each player's impact is larger
- More sensitive to individual defections

### Very Large Groups (n > 10)
- Slightly lower cooperation thresholds to account for coordination challenges
- Focus more on trends than absolute cooperation rates

### High Multiplication Factor (k close to n)
- More aggressive cooperation since the public good is very valuable
- Higher tolerance for others' defection

### Short Games (r ≤ 5)
- Compress the phases: cooperate first 2 rounds, then use main strategy
- No separate endgame phase

## Robustness Features

1. **Anti-Exploitation**: Defects when cooperation rates are consistently low
2. **Recovery Capability**: Can return to cooperation if others improve
3. **Endgame Awareness**: Adjusts behavior in final rounds based on established patterns
4. **Parameter Sensitivity**: Adapts decision thresholds based on n, r, and k values

This strategy aims to be a "conditional cooperator" that starts optimistically, maintains cooperation when reciprocated, protects against systematic exploitation, but remains open to rebuilding cooperation when conditions improve.
'''

description_COOPERATIVE_50 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using graduated responses and maintaining a cooperative default while adapting to the group's behavior patterns.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal willingness to cooperate and test the group's initial disposition.

### Rounds 2 to r-1: Adaptive Reciprocation

**Step 1: Calculate Cooperation Metrics**
- `group_coop_rate` = (total cooperators in previous round) / n
- `recent_trend` = average cooperation rate over last min(3, current_round-1) rounds
- `my_exploitation` = number of rounds where I cooperated but received lower payoff than if I had defected

**Step 2: Determine Base Cooperation Threshold**
```
if recent_trend >= 0.6:
    base_threshold = 0.4  # Be generous when group is cooperative
elif recent_trend >= 0.3:
    base_threshold = 0.5  # Moderate threshold for mixed cooperation
else:
    base_threshold = 0.7  # Require higher cooperation when group is uncooperative
```

**Step 3: Apply Adaptive Adjustments**
```
adjusted_threshold = base_threshold

# Punishment phase: Temporarily raise threshold if recently exploited
if my_exploitation >= 2 in last 3 rounds:
    adjusted_threshold += 0.2
    
# Forgiveness mechanism: Lower threshold if group shows improvement
if recent_trend > previous_trend + 0.15:
    adjusted_threshold -= 0.15

# Ensure threshold stays within bounds [0.2, 0.8]
adjusted_threshold = max(0.2, min(0.8, adjusted_threshold))
```

**Step 4: Make Decision**
- **Cooperate** if `group_coop_rate >= adjusted_threshold`
- **Defect** otherwise

### Final Round (Round r): Conditional Cooperation
Given this is the last interaction, apply a more stringent test:
- **Cooperate** if `group_coop_rate >= 0.7` AND `recent_trend >= 0.6`
- **Defect** otherwise

## Key Features

### 1. Graduated Response
- Doesn't immediately punish single defections
- Escalates response gradually based on exploitation level
- Maintains cooperative stance when group cooperation is high

### 2. Forgiveness Mechanism
- Quickly returns to cooperation when group shows improvement
- Prevents permanent spiral into mutual defection
- Recognizes and rewards positive behavioral changes

### 3. Trend Sensitivity
- Considers both immediate and recent historical behavior
- Adapts to changing group dynamics
- Weights recent behavior more heavily than distant history

### 4. Parameter Awareness
- More lenient when k/n ratio is high (greater benefit from public good)
- Adjusts expectations based on group size n
- Accounts for strategic considerations in final rounds

## Edge Case Handling

**Small Groups (n ≤ 3):**
- Use more generous thresholds since individual actions have larger impact
- Increase forgiveness rate

**High Multiplication Factor (k close to n):**
- Lower all thresholds by 0.1 since cooperation is more valuable

**Very Short Games (r ≤ 3):**
- Cooperate in rounds 1 and 2, defect only in final round if severely exploited

**All-Defection Scenarios:**
- Continue cooperating for first 3 rounds to test for reciprocity
- Switch to defection if no cooperation emerges, but test cooperation every 3-4 rounds

## Robustness Features

1. **Anti-Exploitation**: Protects against consistent free-riders while maintaining cooperative stance
2. **Noise Tolerance**: Doesn't overreact to occasional defections in otherwise cooperative groups
3. **Recovery Capability**: Can rebuild cooperation after periods of mutual defection
4. **End-Game Awareness**: Adjusts behavior in final round while remaining conditionally cooperative

This strategy aims to foster cooperation while protecting against exploitation, adapting to various opponent behaviors while maintaining a fundamentally cooperative approach that can succeed across diverse tournament conditions.
'''

description_COOPERATIVE_51 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, using graduated responses to encourage cooperation while protecting against exploitation. It treats cooperation as the default but adjusts based on observed collective behavior patterns.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Rounds 2-3**: COOPERATE if the cooperation rate in the previous round was ≥ 30%, otherwise DEFECT

### Main Game Phase (Rounds 4 to r-2)
Use a **Cooperation Threshold System** based on recent history:

1. **Calculate Recent Cooperation Rate**: 
   - Track cooperation rate over the last min(3, current_round-1) rounds
   - Weight recent rounds more heavily (most recent = 0.5, second recent = 0.3, third recent = 0.2)

2. **Dynamic Threshold Adjustment**:
   - Base threshold starts at 40%
   - If I've been exploited (cooperated while others mostly defected) in recent rounds, increase threshold by 10%
   - If mutual cooperation has been sustained, decrease threshold by 5%
   - Threshold bounds: [25%, 60%]

3. **Decision Rule**:
   - COOPERATE if recent_cooperation_rate ≥ current_threshold
   - DEFECT otherwise

### Endgame Phase (Last 2 rounds: r-1, r)
- **Round r-1**: COOPERATE if cooperation rate in round r-2 was ≥ 50%, accounting for potential endgame effects
- **Final round r**: Use **Generous Defection** - DEFECT but only if cooperation rate has been consistently low (< 30%) over the last 3 rounds, otherwise COOPERATE as a final cooperative gesture

## Key Features

### 1. Forgiveness Mechanism
- After 2 consecutive rounds of mutual low cooperation (< 25%), offer an "olive branch" by cooperating once regardless of threshold
- Reset exploitation tracking after successful cooperation recovery

### 2. Exploitation Protection
- Track personal exploitation: times I cooperated when ≤ 25% of others did
- If exploited more than ⌊r/4⌋ times, become more cautious (increase all thresholds by 15%)

### 3. Collective Benefit Recognition
- If total group payoff in previous round exceeded what all-defection would yield by > 20%, bias toward cooperation (reduce threshold by 10% for next round)

## Pseudocode Structure

```
Initialize:
- base_threshold = 0.4
- exploitation_count = 0
- cooperation_history = []

For each round t:
  if t == 1:
    return COOPERATE
  
  if t <= 3:
    if cooperation_rate(t-1) >= 0.3:
      return COOPERATE
    else:
      return DEFECT
  
  if t >= r-1:  # Endgame
    return endgame_decision(t, cooperation_history)
  
  # Main phase
  recent_coop_rate = weighted_cooperation_rate(last_3_rounds)
  current_threshold = adjust_threshold(base_threshold, exploitation_count, mutual_coop_history)
  
  if recent_coop_rate >= current_threshold OR olive_branch_condition():
    return COOPERATE
  else:
    return DEFECT
```

## Robustness Features

1. **Multi-scale Adaptation**: Responds to both immediate (1 round) and medium-term (3 round) patterns
2. **Graduated Response**: Doesn't immediately punish single defections if overall cooperation is reasonable
3. **Context Sensitivity**: Adjusts behavior based on game length and current position
4. **Exploitation Recovery**: Includes mechanisms to rebuild cooperation after periods of mutual defection
5. **Endgame Awareness**: Accounts for changed incentives in final rounds while maintaining some cooperative intent

This strategy aims to foster cooperation when possible, adapt to various opponent behaviors, and maintain a cooperative stance even when facing mixed or challenging opponents, while protecting against systematic exploitation.
'''

description_COOPERATIVE_52 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Majority"

## Core Philosophy
This strategy is built on the principle of **conditional cooperation** - I cooperate when others demonstrate cooperative intent, but I'm willing to lead by example and forgive occasional defections to maintain group cooperation.

## Strategy Overview
The strategy adapts based on the **cooperation rate** of other players in recent rounds, while being generous enough to rebuild cooperation after breakdowns and strategic enough to protect against persistent exploitation.

## Decision Rules

### 1. First Round Behavior
**Always cooperate (C)** in round 1 to signal cooperative intent and help establish a cooperative norm from the start.

### 2. Core Decision Logic
For rounds 2 through r, my decision depends on the **recent cooperation rate** of other players:

```pseudocode
recent_cooperation_rate = (cooperators in last round) / (n - 1)
historical_cooperation_rate = (total cooperators in last 3 rounds) / (3 * (n - 1))

IF recent_cooperation_rate ≥ 0.5:
    Cooperate (maintain cooperative equilibrium)
ELSE IF historical_cooperation_rate ≥ 0.33 AND recent_cooperation_rate ≥ 0.25:
    Cooperate (generous forgiveness to rebuild cooperation)
ELSE:
    Defect (protect against exploitation)
```

### 3. Endgame Behavior
In the **final round**, apply a modified rule to account for end-game effects:
- If cooperation rate in previous round ≥ 0.5: Cooperate
- If cooperation rate in previous round < 0.5 AND historical rate ≥ 0.4: Cooperate (final generous gesture)
- Otherwise: Defect

## Adaptive Elements

### 1. Cooperation Threshold Adjustment
The strategy adapts the cooperation threshold based on game parameters:
- **Large groups** (n > 8): Lower threshold to 0.4 (harder to coordinate large groups)
- **High multiplication factor** (k > 1.5): Raise threshold to 0.6 (higher incentive for cooperation)
- **Many rounds** (r > 10): Use longer historical window (5 rounds instead of 3)

### 2. Recovery Mechanism
After 3 consecutive rounds of mutual defection:
- **Olive branch**: Cooperate once regardless of others' recent behavior
- If this restarts cooperation (≥50% cooperate in response), continue with normal rules
- If not, return to defensive mode for 2 rounds before trying again

### 3. Pattern Recognition
Track if opponents appear to be using common strategies:
- **Tit-for-tat detection**: If players mirror the previous round's outcome, be extra cooperative
- **Always defect detection**: If cooperation rate consistently < 0.2, become more defensive

## Robustness Features

### 1. Protection Against Exploitation
- Never cooperate if cooperation rate has been < 0.1 for 3+ consecutive rounds
- In final 20% of rounds, require higher cooperation thresholds (add 0.1 to all thresholds)

### 2. Noise Tolerance
- Use 3-round historical average rather than just last round to smooth out random variations
- "Forgiveness parameter": Occasionally cooperate even when threshold isn't met (10% chance when historical rate ≥ 0.3)

### 3. Group Size Adaptation
```pseudocode
adjusted_threshold = base_threshold * (1 + 0.1 * (n - 6) / 6)
// Increases threshold for larger groups where coordination is harder
```

## Detailed Algorithm

```pseudocode
STRATEGY: Generous_Tit_for_Majority

INITIALIZE:
    cooperation_history = []
    my_history = []
    
ROUND 1:
    RETURN C

FOR round t = 2 to r:
    others_last_round = count_cooperators_last_round(cooperation_history)
    others_recent_avg = average_cooperation_last_k_rounds(cooperation_history, min(3, t-1))
    
    base_threshold = 0.5
    recent_threshold = base_threshold
    historical_threshold = 0.33
    
    // Parameter adjustments
    IF n > 8: recent_threshold *= 0.8
    IF k > 1.5: recent_threshold *= 1.2
    IF t > 0.8 * r: recent_threshold *= 1.2  // Endgame protection
    
    recent_rate = others_last_round / (n - 1)
    historical_rate = others_recent_avg
    
    // Main decision logic
    IF recent_rate >= recent_threshold:
        decision = C
    ELSE IF historical_rate >= historical_threshold AND recent_rate >= 0.25:
        decision = C  // Generous forgiveness
    ELSE IF detect_recovery_opportunity(cooperation_history):
        decision = C  // Olive branch
    ELSE:
        decision = D
        
    // Add small random forgiveness
    IF decision == D AND historical_rate >= 0.3 AND random() < 0.1:
        decision = C
    
    RETURN decision
```

## Why This Strategy Works

1. **Leads by example**: Always starts cooperatively
2. **Responsive**: Quickly adapts to others' cooperation levels
3. **Forgiving**: Gives second chances to rebuild cooperation
4. **Protected**: Won't be systematically exploited
5. **Parameter-aware**: Adjusts behavior based on game structure
6. **Robust**: Handles noise, various group sizes, and different opponent strategies

This strategy balances being a "nice" cooperator with being strategically sound, making it effective across diverse tournament conditions while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_53 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It aims to foster cooperation while remaining resilient to various opponent behaviors through dynamic threshold adjustment and graduated responses.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Threshold-Based Cooperation**
- Cooperate if the recent cooperation rate among other players is ≥ threshold
- Defect otherwise
- Threshold starts optimistically and adapts based on experience

**Cooperation Rate Calculation:**
- Recent window: max(3, r/4) rounds for adaptation
- First round: Use initial optimistic threshold of 0.4
- Cooperation rate = (total cooperations by others in window) / (total possible cooperations by others in window)

### 2. Adaptive Threshold Mechanism

**Initial Threshold:** 0.4 (moderately optimistic)

**Threshold Updates (after each round):**
```
if my_payoff_this_round >= expected_payoff_if_all_cooperated * 0.7:
    threshold = max(0.2, threshold - 0.05)  // Become more trusting
else if my_payoff_this_round <= expected_payoff_if_all_defected * 1.3:
    threshold = min(0.8, threshold + 0.08)  // Become more cautious
```

Where:
- expected_payoff_if_all_cooperated = k
- expected_payoff_if_all_defected = 1

### 3. Edge Case Handling

**First Round:** Always cooperate (signal cooperative intent)

**Last Round:** 
- If threshold ≤ 0.5: Cooperate (maintain reputation)
- Otherwise: Apply normal threshold rule

**Early Rounds (rounds 2-3):**
- Use higher weight on first-round behavior to quickly identify cooperative vs exploitative players
- If ≥50% cooperated in round 1, temporarily lower threshold by 0.1

### 4. Robust Features

**Anti-Exploitation Protection:**
- If personal payoff falls below 0.8 for 2 consecutive rounds, temporarily increase threshold by 0.15
- Reset this protection after 2 rounds of normal payoffs

**Cooperation Recovery:**
- If cooperation rate suddenly increases by >0.3 from previous round, give one "forgiveness" round with threshold reduced by 0.2
- This prevents missing cooperation waves due to overly cautious threshold

**Endgame Cooperation Maintenance:**
- In final 20% of rounds, if threshold < 0.6, apply a small cooperative bias (reduce effective threshold by 0.1)

## Pseudocode

```
Initialize:
    threshold = 0.4
    window_size = max(3, r/4)
    consecutive_bad_rounds = 0

For each round t:
    if t == 1:
        action = COOPERATE
    else:
        // Calculate recent cooperation rate of others
        recent_others_coop_rate = calculate_others_cooperation_rate(window_size)
        
        // Apply edge case adjustments
        effective_threshold = threshold
        
        if t <= 3 and first_round_cooperation_rate >= 0.5:
            effective_threshold -= 0.1
            
        if t > 0.8 * r and threshold < 0.6:
            effective_threshold -= 0.1
            
        if consecutive_bad_rounds >= 2:
            effective_threshold += 0.15
            
        // Make decision
        if recent_others_coop_rate >= effective_threshold:
            action = COOPERATE
        else:
            action = DEFECT
    
    // After round execution, update threshold
    if my_payoff >= k * 0.7:
        threshold = max(0.2, threshold - 0.05)
        consecutive_bad_rounds = 0
    else if my_payoff <= 1.3:
        threshold = min(0.8, threshold + 0.08)
        consecutive_bad_rounds += 1
    else:
        consecutive_bad_rounds = 0
```

## Strategy Rationale

1. **Cooperative Foundation:** Always cooperates first round and maintains cooperative bias
2. **Adaptive Learning:** Adjusts expectations based on actual opponent behavior rather than fixed assumptions
3. **Exploitation Resistance:** Threshold mechanism prevents sustained exploitation while allowing recovery
4. **Tournament Robust:** Works against diverse strategies without requiring coordination
5. **Endgame Awareness:** Maintains cooperation incentives even in final rounds

This strategy should perform well against other cooperative strategies while protecting against exploitative ones, making it suitable for a diverse tournament environment.
'''

description_COOPERATIVE_54 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically but learns from the group's behavior, rewarding collective cooperation while defending against persistent defection.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocation
Calculate two key metrics from the previous round:
- **Cooperation Rate (CR)**: Proportion of players who cooperated last round
- **Personal Exploitation (PE)**: Whether I cooperated but received below-average payoff due to others' defection

**Decision Logic:**
1. **High Cooperation Environment (CR ≥ 0.6)**:
   - Cooperate to maintain the beneficial collective outcome
   
2. **Medium Cooperation Environment (0.3 ≤ CR < 0.6)**:
   - Cooperate if I wasn't exploited last round (my cooperation led to reasonable payoff)
   - Defect if I was significantly exploited (cooperated but others mostly defected)
   
3. **Low Cooperation Environment (CR < 0.3)**:
   - Defect to protect against widespread defection
   - Exception: Cooperate every 3rd round in this state to test if cooperation can be rebuilt

### Round r (Final Round): Strategic Finale
- **If cooperation rate in round r-1 was ≥ 0.5**: Cooperate (reward good group behavior)
- **If cooperation rate in round r-1 was < 0.5**: Defect (no future to build on)

## Edge Case Handling

### Very Small Groups (n ≤ 3)
- Be more forgiving in medium cooperation scenarios since individual actions have larger impact
- Lower the high cooperation threshold to 0.5 instead of 0.6

### Very Large Groups (n ≥ 10)
- Focus more on overall trends than individual rounds
- Consider cooperation rate over the last 2 rounds instead of just the previous round

### Short Games (r ≤ 3)
- Round 1: Always cooperate
- Middle rounds: Only defect if cooperation rate was ≤ 0.2 in previous round
- Final round: Match the group's trend (cooperate if improving, defect if declining)

### High Multiplication Factor (k > 0.8n)
- Be more patient with low cooperation periods since the potential gains are very high
- Only enter "low cooperation mode" if CR < 0.2 instead of 0.3

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate metrics from previous round
    prev_cooperators = count_cooperators(history[round-1])
    cooperation_rate = prev_cooperators / n
    was_exploited = (my_prev_action == COOPERATE) and 
                   (my_prev_payoff < average_payoff_last_round)
    
    # Adjust thresholds for special cases
    high_coop_threshold = adjust_for_group_size(0.6, n)
    low_coop_threshold = adjust_for_multiplier(0.3, k, n)
    
    if round == r:  # Final round
        return COOPERATE if cooperation_rate >= 0.5 else DEFECT
    
    # Main decision logic
    if cooperation_rate >= high_coop_threshold:
        return COOPERATE
    elif cooperation_rate >= low_coop_threshold:
        return COOPERATE if not was_exploited else DEFECT
    else:  # Low cooperation environment
        # Test cooperation periodically
        if round % 3 == 0:
            return COOPERATE
        else:
            return DEFECT
```

## Strategy Robustness

This strategy is designed to:
- **Handle always-cooperators**: Reciprocate their cooperation for mutual benefit
- **Handle always-defectors**: Quickly identify and protect against them while occasionally testing for change
- **Handle tit-for-tat players**: Create stable cooperative cycles
- **Handle random players**: Adapt to the overall group tendency rather than individual randomness
- **Handle sophisticated adaptive players**: Reward genuine cooperation while defending against exploitation

The strategy maintains a cooperative core while being sufficiently defensive to avoid systematic exploitation, making it robust across diverse tournament environments.
'''

description_COOPERATIVE_55 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to observed behavior patterns. It starts optimistically but learns from the collective behavior of all players, adjusting its cooperation level to match the group's demonstrated commitment to mutual benefit.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and gather initial information about the group's tendencies.

### Rounds 2 to r-1: Adaptive Reciprocal Response

Calculate the **Group Cooperation Rate (GCR)** from all previous rounds:
```
GCR = (Total cooperations by all players in previous rounds) / 
      (Total possible cooperations in previous rounds)
```

**Cooperation Threshold Decision:**
- If `GCR ≥ 0.6`: **Cooperate** (High group cooperation deserves reciprocation)
- If `0.3 ≤ GCR < 0.6`: **Cooperate with probability = 2 × GCR - 0.6**
  - This creates a smooth transition where cooperation probability increases with group cooperation
- If `GCR < 0.3`: **Defect** (Low group cooperation doesn't justify unilateral sacrifice)

### Final Round (Round r): Strategic Adjustment

Since this is the last interaction, apply a more stringent cooperation threshold:
- If `GCR ≥ 0.7`: **Cooperate** (Reward consistently high cooperation)
- If `GCR < 0.7`: **Defect** (Protect against end-game defection)

## Key Features

### 1. Collective Focus
Unlike strategies that track individual players, ARCS focuses on the group's overall cooperation level. This makes it robust against:
- Mixed populations of cooperators and defectors
- Complex multi-player dynamics
- Varying group sizes

### 2. Graduated Response
The probabilistic cooperation in the middle range (GCR 0.3-0.6) allows for:
- Gradual adaptation to changing group dynamics
- Avoiding strict binary responses that might miss cooperation opportunities
- Maintaining some cooperation even when the group is moderately uncooperative

### 3. Memory-Based Learning
By considering the entire history rather than just recent rounds, ARCS:
- Avoids being manipulated by short-term behavioral changes
- Provides stable, predictable responses to consistent group behavior
- Builds long-term reciprocal relationships

### 4. Robustness Across Parameters
The thresholds (0.6, 0.3, 0.7) are designed to work well across different values of n and k because they're based on cooperation rates rather than absolute numbers.

## Pseudocode

```
function ARCS_decision(round, history, n, r, k):
    if round == 1:
        return COOPERATE
    
    // Calculate Group Cooperation Rate from all previous rounds
    total_cooperations = sum of all C actions by all players in rounds 1 to round-1
    total_possible = n × (round - 1)
    GCR = total_cooperations / total_possible
    
    if round == r:  // Final round
        if GCR >= 0.7:
            return COOPERATE
        else:
            return DEFECT
    else:  // Middle rounds
        if GCR >= 0.6:
            return COOPERATE
        else if GCR >= 0.3:
            cooperation_probability = 2 × GCR - 0.6
            return COOPERATE with probability cooperation_probability
        else:
            return DEFECT
```

## Strategic Rationale

1. **Encourages Cooperation**: By starting cooperatively and maintaining cooperation when others do, it helps establish and maintain cooperative equilibria.

2. **Prevents Exploitation**: The adaptive thresholds ensure the strategy doesn't continue cooperating when facing predominantly defecting opponents.

3. **Tournament Competitive**: Against other cooperative strategies, it will cooperate frequently. Against defecting strategies, it will eventually defect to protect itself.

4. **Simple and Transparent**: The strategy is easy to understand and implement, making it more likely to achieve coordination with similar strategies.

This strategy should perform well in a diverse tournament by being "nice" enough to cooperate with other cooperative strategies while being "retaliatory" enough to avoid exploitation by purely selfish strategies.
'''

description_COOPERATIVE_56 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, using graduated responses that become more sophisticated as the game progresses. It assumes cooperation is beneficial for all but adapts to protect against exploitation while maintaining opportunities for rebuilding cooperation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and gather initial information about opponent tendencies

### Rounds 2 to r-1: Adaptive Reciprocation

#### 1. Cooperation Threshold Calculation
For each round t > 1, calculate a dynamic cooperation threshold:
```
cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)
threshold = max(0.3, min(0.8, cooperation_rate * 1.2))
```

#### 2. Recent Trend Analysis
Examine the last min(3, t-1) rounds to detect cooperation trends:
```
if cooperation_rate_recent > cooperation_rate_overall + 0.1:
    trend = "improving"
elif cooperation_rate_recent < cooperation_rate_overall - 0.1:
    trend = "declining" 
else:
    trend = "stable"
```

#### 3. Decision Logic
**Cooperate if ANY of the following conditions are met:**

a) **Sufficient Recent Cooperation**: 
   - Recent cooperation rate ≥ threshold

b) **Improving Trend Bonus**:
   - Trend = "improving" AND recent cooperation rate ≥ 0.25

c) **Forgiveness Mechanism** (prevents permanent defection spirals):
   - Current round number is divisible by max(3, ⌊r/5⌋)
   - AND at least one player cooperated in the previous round

d) **Late-Game Cooperation Push** (rounds > 0.7 × r):
   - Recent cooperation rate ≥ 0.2
   - OR at least 2 players cooperated in the previous round

**Otherwise, defect**

### Final Round (Round r): Conditional Cooperation
- **Cooperate** if cooperation rate in rounds (r-2) to (r-1) ≥ 0.4
- **Defect** otherwise
- Rationale: Final round cooperation only if recent cooperation suggests it will be reciprocated

## Edge Case Handling

### Very Short Games (r ≤ 3)
- Round 1: Always cooperate
- Round 2: Cooperate if ≥ 50% cooperated in round 1
- Round 3 (if exists): Cooperate if ≥ 40% cooperated in round 2

### High Competition Scenarios (k close to 1)
- Increase all thresholds by 0.15 to account for reduced cooperation incentives
- Be more willing to defect when cooperation rates are marginal

### High Reward Scenarios (k close to n)
- Decrease all thresholds by 0.1 to encourage more cooperation
- Extend forgiveness mechanism to trigger every max(2, ⌊r/6⌋) rounds

### Small Groups (n ≤ 4)
- Increase sensitivity to individual player changes
- Lower the forgiveness threshold to 1 cooperator in previous round

## Robustness Features

1. **Anti-Exploitation Protection**: Won't cooperate indefinitely with consistent defectors
2. **Forgiveness Cycles**: Periodic cooperation attempts prevent permanent breakdown
3. **Trend Sensitivity**: Responds to improving cooperation patterns even if overall rates are low
4. **Endgame Awareness**: Adjusts strategy for final rounds while maintaining cooperation potential
5. **Parameter Adaptation**: Adjusts thresholds based on game parameters (n, k, r)

## Strategic Rationale

This strategy is designed to:
- **Start cooperatively** to signal good intentions
- **Learn quickly** from opponent behavior patterns
- **Forgive occasionally** to escape mutual defection traps
- **Adapt to game context** based on parameters and history
- **Maintain cooperation opportunities** throughout the game while protecting against exploitation

The graduated response system ensures the strategy can handle everything from always-cooperators to always-defectors, while the trend analysis allows it to capitalize on improving cooperation dynamics that simpler strategies might miss.
'''

description_COOPERATIVE_57 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated reciprocity and adaptive forgiveness. It starts cooperatively but responds proportionally to the cooperation levels observed in the group.

## Strategy Description

### Initial Cooperation Phase
- **Rounds 1-3**: Always cooperate (C) regardless of group behavior
- **Rationale**: Establish cooperative intent and give others opportunity to reciprocate

### Main Adaptive Phase
For rounds 4 to r-2, use the **Proportional Response Rule**:

```
cooperation_rate = (total_cooperators_last_round) / n
cooperation_threshold = max(0.3, cooperation_rate * 0.8)

if (cooperation_rate >= cooperation_threshold):
    play C
else:
    play D with probability (1 - cooperation_rate)
```

### Forgiveness Mechanism
Track "cooperation momentum" over the last 3 rounds:
- If cooperation rate has increased for 2 consecutive rounds, always cooperate next round
- If someone who previously defected returns to cooperation, increase personal cooperation probability by 0.2

### Endgame Handling
**Round r-1 (Second-to-last)**:
- If group cooperation rate > 0.5 in previous round: Cooperate
- Otherwise: Match the most common action from previous round

**Round r (Final)**:
- If cumulative group cooperation rate > 0.6: Cooperate
- If exactly 50% cumulative cooperation: Cooperate (break ties cooperatively)
- Otherwise: Defect

## Key Features

### 1. Graduated Reciprocity
Rather than strict tit-for-tat, the strategy responds proportionally to group cooperation levels. If 70% of players cooperated last round, there's high probability of cooperation; if only 20% cooperated, there's low probability.

### 2. Robustness Against Exploitation
- Never cooperates when group cooperation falls below 30%
- Protects against being the sole cooperator in a group of defectors
- Responds to sustained defection with defection

### 3. Adaptive Forgiveness
- Rewards improvements in group behavior
- Gives players opportunity to return to cooperation
- Maintains cooperative momentum when group trends upward

### 4. Parameter Independence
The strategy works for any valid combination of (n, r, k):
- Scales naturally with group size n
- Adapts to any number of rounds r > 3
- Doesn't require specific multiplication factor k

## Edge Case Handling

### Small Groups (n ≤ 3)
- Extend initial cooperation to 40% of total rounds
- Use stricter forgiveness threshold (cooperation rate must exceed 0.5)

### Very Short Games (r ≤ 5)
- Cooperate for first ⌊r/2⌋ rounds
- Then use simplified rule: cooperate if group cooperation rate ≥ 0.5

### High Multiplication Factor (k > 0.8n)
- Increase cooperation threshold to 0.4 (more willing to risk exploitation when public good is highly valuable)

## Tournament Robustness

This strategy is designed to perform well against diverse opponents:

- **Against pure cooperators**: Maintains high cooperation, maximizing joint payoffs
- **Against pure defectors**: Quickly adapts to defect, minimizing exploitation
- **Against tit-for-tat variants**: Establishes and maintains cooperative equilibrium
- **Against random players**: Adapts to average behavior patterns
- **Against sophisticated strategies**: The graduated response makes it difficult to exploit while remaining open to cooperation

The strategy balances the cooperative ideal of maximizing group welfare with the practical need to avoid being systematically exploited, making it robust across a wide range of opponent behaviors and game parameters.
'''

description_COOPERATIVE_58 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive response to others' behavior, using a forgiveness mechanism that prevents permanent defection spirals while maintaining incentives for cooperation.

## Strategy Overview

### 1. Decision Rules

**Round 1 (Initialization):**
- Always COOPERATE
- Rationale: Signal cooperative intent and establish baseline for reciprocity

**Rounds 2 through r-1 (Adaptive Phase):**
- Calculate cooperation rate from previous round: `coop_rate = cooperators_last_round / n`
- Calculate personal cooperation threshold: `threshold = max(0.3, k/n)`
- Decision rule:
  ```
  IF coop_rate >= threshold:
      COOPERATE
  ELSE IF coop_rate >= threshold * 0.5:
      COOPERATE with probability = coop_rate / threshold
  ELSE:
      DEFECT
  ```

**Round r (Final Round):**
- Use same logic as adaptive phase, but apply "endgame cooperation boost":
  ```
  IF average_coop_rate_last_3_rounds >= threshold * 0.7:
      COOPERATE
  ELSE:
      Follow adaptive phase rules
  ```

### 2. Key Components

**Cooperation Threshold Logic:**
- Base threshold = `max(0.3, k/n)` ensures strategy remains viable
- When k/n is high (efficient public good), lower threshold encourages cooperation
- When k/n is low, higher minimum threshold (0.3) prevents exploitation

**Graduated Response:**
- High cooperation (≥ threshold): Full cooperation
- Medium cooperation (≥ 50% of threshold): Probabilistic cooperation matching group tendency
- Low cooperation (< 50% of threshold): Defection to avoid exploitation

**Forgiveness Mechanism:**
- No permanent punishment - strategy always responds to current cooperation levels
- Prevents lock-in to mutual defection
- Allows recovery from temporary cooperation breakdowns

### 3. Edge Case Handling

**First Round:**
- Always cooperate to signal intent and gather information about others

**Last Round:**
- Apply "endgame boost" - if recent cooperation has been reasonable, maintain cooperation despite potential last-round defection incentives
- This counters backward induction unraveling while protecting against sustained non-cooperation

**All Defect Scenarios:**
- If everyone defected last round, still use probabilistic rule based on threshold
- Maintains small chance of cooperation to test for recovery opportunities

**Highly Variable Cooperation:**
- Strategy adapts round-by-round, so handles volatility naturally
- Probabilistic cooperation in medium ranges provides stability

### 4. Cooperative Alignment

**Promotes Group Welfare:**
- Actively seeks cooperative equilibria when group shows willingness
- Threshold based on efficiency (k/n) aligns personal and group incentives

**Prevents Exploitation:**
- Graduated response protects against free-riders
- Will defect when cooperation rate drops too low

**Encourages Cooperation:**
- Initial cooperation signals intent
- Forgiveness allows return to cooperation
- Probabilistic responses give others chances to rebuild cooperation

### 5. Robustness Features

**Parameter Adaptation:**
- Threshold scales with multiplication factor (k) and group size (n)
- Works across different game parameters

**Opponent Agnostic:**
- No assumptions about opponent strategies or coordination
- Responds to actual behavior rather than expected patterns

**Anti-Exploitation:**
- Won't cooperate indefinitely with persistent defectors
- Probabilistic elements prevent predictable exploitation

## Pseudocode Summary

```
function decide_action(round, n, k, history):
    if round == 1:
        return COOPERATE
    
    threshold = max(0.3, k/n)
    last_coop_rate = count_cooperators(history[-1]) / n
    
    if round == final_round:
        recent_avg = average_coop_rate(history[-3:])
        if recent_avg >= threshold * 0.7:
            return COOPERATE
    
    if last_coop_rate >= threshold:
        return COOPERATE
    elif last_coop_rate >= threshold * 0.5:
        return COOPERATE with probability (last_coop_rate / threshold)
    else:
        return DEFECT
```

This strategy maintains cooperative spirit while adapting intelligently to the strategic environment, making it robust across diverse opponent strategies and game parameters.
'''

description_COOPERATIVE_59 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, aiming to maximize collective welfare while protecting against exploitation. It operates on the principle of "cautious optimism with adaptive learning."

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Reciprocal Phase

**Primary Decision Logic:**
1. **Calculate Cooperation Threshold**: `threshold = max(0.3, k/n)`
   - This ensures we don't cooperate when it's clearly unprofitable
   - For typical parameters (k=2, n=6), threshold = 0.33

2. **Assess Recent Cooperation Rate**: 
   - Look at the last `min(3, current_round-1)` rounds
   - Calculate `recent_coop_rate = (total_cooperators_in_recent_rounds) / (n × rounds_examined)`

3. **Core Decision Rule**:
   ```
   IF recent_coop_rate >= threshold:
       Cooperate
   ELSE IF recent_coop_rate >= threshold * 0.7:
       Cooperate with probability = recent_coop_rate / threshold
   ELSE:
       Defect
   ```

### Round r (Final Round): Strategic Defection
- **Always defect** in the final round
- Rationale: No future rounds to incentivize cooperation, so maximize immediate payoff

## Adaptive Mechanisms

### 1. Forgiveness Protocol
- If cooperation rate falls below threshold for 2 consecutive rounds, but then shows improvement (increase of ≥0.2 in cooperation rate), immediately return to cooperation
- This prevents permanent punishment cycles

### 2. Exploitation Detection
- Track individual defection patterns when possible
- If consistently exploited by the same players while maintaining high group cooperation, reduce personal cooperation probability by 20%

### 3. Revival Mechanism
- Every 5 rounds, if stuck in mutual defection (cooperation rate < 0.2), attempt one round of cooperation to test for possible revival
- If others respond positively, resume normal adaptive logic

## Edge Case Handling

### Very Small Groups (n ≤ 3)
- Increase threshold to `k/(n+1)` to account for higher individual impact
- Be more forgiving of temporary defections

### High Multiplication Factor (k > 0.8n)
- Lower threshold to `0.8 × (k/n)` to encourage more cooperation
- Extend forgiveness window to 4 rounds

### Short Games (r ≤ 5)
- Skip final round defection if r ≤ 3
- Reduce recent history window to `max(1, r-2)`

### Low Multiplication Factor (k < 1.5)
- Increase threshold to `1.5 × (k/n)` to avoid unprofitable cooperation
- Require higher confidence before cooperating

## Robustness Features

1. **Anti-Exploitation**: Progressive reduction in cooperation when consistently exploited
2. **Recovery-Oriented**: Built-in mechanisms to escape defection spirals
3. **Parameter-Adaptive**: Thresholds adjust based on game economics
4. **History-Sensitive**: Uses appropriate time windows for different game lengths

## Example Behavior

For n=6, k=2, r=10:
- Round 1: Cooperate (always)
- Round 2: If ≥2 others cooperated in R1, cooperate; else probabilistic
- Round 3-9: Adapt based on recent 3-round cooperation rates
- Round 10: Defect (final round)

This strategy maintains cooperative intent while learning from opponents' behavior, making it robust against both aggressive defectors and conditional cooperators.
'''

description_COOPERATIVE_60 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, using a trust-based approach that rewards cooperation while protecting against exploitation. It aims to establish and maintain cooperative equilibria while being robust to various opponent behaviors.

## Strategy Components

### 1. Decision Rules

**Initial Cooperation Phase (Rounds 1-3 or until betrayed):**
- Always cooperate in round 1 to signal cooperative intent
- Continue cooperating as long as the cooperation rate among all players ≥ 60%
- If betrayed early (cooperation rate drops below 60%), transition to adaptive phase

**Adaptive Reciprocal Phase:**
- **Cooperation Threshold**: Cooperate if the weighted cooperation score ≥ cooperation_threshold
- **Weighted Cooperation Score** = 0.6 × (cooperation rate in previous round) + 0.4 × (cooperation rate over last 3 rounds)
- **Dynamic Threshold**: 
  - Initial threshold = 50%
  - Threshold decreases by 5% each time we're exploited while cooperating (minimum 30%)
  - Threshold increases by 3% when mutual cooperation is sustained for 2+ consecutive rounds (maximum 70%)

**Forgiveness Mechanism:**
- If cooperation rate was below threshold but is now ≥ 70%, cooperate to test if others are returning to cooperation
- Grant "second chances" - cooperate once every 4 rounds even when threshold isn't met, to probe for renewed cooperation

### 2. Edge Case Handling

**First Round:**
- Always cooperate to establish cooperative intent and encourage reciprocal cooperation

**Last Round Detection:**
- In the final round, cooperate only if cooperation rate in previous round was ≥ 80%
- This prevents end-game defection cascades while still rewarding consistent cooperators

**Low Participation Scenarios:**
- If ≤ 2 players are cooperating consistently, switch to defensive mode: only cooperate if cooperation rate ≥ 80%
- This prevents being the sole contributor in highly defective environments

**Recovery Protocol:**
- If cooperation rate has been below 30% for 3+ consecutive rounds, initiate recovery by cooperating for 2 rounds regardless of threshold
- This attempts to break negative cycles and restart cooperation

### 3. Cooperative Alignment Features

**Cooperation Incentives:**
- Bias toward cooperation when uncertain - if cooperation score is within 10% of threshold, cooperate
- "Optimistic interpretation" - round borderline cooperation rates up when calculating weighted score

**Trust Building:**
- Gradually lower threshold requirements when others demonstrate sustained cooperation
- Signal reliability by maintaining consistent cooperation when others cooperate

**Collective Benefit Focus:**
- Consider not just individual reciprocity but group cooperation levels
- Prioritize strategies that maximize collective welfare when cooperation is viable

## Pseudocode Framework

```
function decide_action(round_number, history, n, k, r):
    if round_number == 1:
        return COOPERATE
    
    if round_number == r:  // Last round
        if cooperation_rate(history, round_number-1) >= 0.8:
            return COOPERATE
        else:
            return DEFECT
    
    // Calculate weighted cooperation score
    recent_coop = cooperation_rate(history, round_number-1)
    historical_coop = cooperation_rate(history, last_3_rounds)
    weighted_score = 0.6 * recent_coop + 0.4 * historical_coop
    
    // Update dynamic threshold based on recent outcomes
    update_threshold(history, my_previous_actions)
    
    // Check for recovery protocol
    if low_cooperation_streak(history) >= 3:
        if rounds_since_recovery_attempt >= 4:
            return COOPERATE  // Attempt recovery
    
    // Check for forgiveness opportunity
    if recent_coop >= 0.7 and historical_coop < threshold:
        return COOPERATE  // Second chance
    
    // Main decision logic
    if weighted_score >= (threshold - 0.1):  // 10% optimistic bias
        return COOPERATE
    else:
        if should_probe_cooperation(round_number):
            return COOPERATE
        else:
            return DEFECT
```

## Strategic Rationale

This strategy is designed to:
1. **Start cooperatively** to encourage mutual cooperation
2. **Adapt to opponent behavior** without being exploitable
3. **Maintain cooperative relationships** when others reciprocate
4. **Recover from defection cycles** through strategic forgiveness
5. **Protect against end-game defection** while rewarding loyal cooperators

The weighted scoring system prevents overreaction to single-round defections while still being responsive to behavioral changes. The dynamic threshold creates a learning mechanism that becomes more cooperative with trustworthy opponents and more defensive with exploitative ones.
'''

description_COOPERATIVE_61 = '''
# Adaptive Reciprocity with Forgiveness Strategy

## Core Philosophy
This strategy balances cooperation with adaptive responses to the cooperation levels observed in the community. It starts optimistically but learns from the group's behavior while maintaining resilience against exploitation.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocity
Use a **cooperation threshold** that adapts based on recent history:

1. **Calculate recent cooperation rate**: Look at the last `min(3, current_round-1)` rounds and calculate the average cooperation rate of all other players.

2. **Set dynamic threshold**: 
   - Base threshold = `k/n` (the break-even cooperation rate)
   - If recent cooperation rate ≥ base threshold: Lower threshold to `0.8 × k/n` (be more trusting)
   - If recent cooperation rate < base threshold: Raise threshold to `1.2 × k/n` (be more cautious)

3. **Decision rule**: Cooperate if the recent cooperation rate ≥ current threshold

### Round r (Final Round): Conditional Cooperation
In the last round, use a stricter threshold since there's no future to build cooperation:
- Cooperate only if the cooperation rate in round r-1 was ≥ `k/n`
- This prevents end-game exploitation while rewarding consistent cooperators

## Forgiveness Mechanism
To prevent permanent defection spirals:
- Every 4th round (rounds 4, 8, 12, etc.), if currently defecting, cooperate regardless of threshold
- This provides periodic "olive branches" to restart cooperation cycles

## Edge Case Handling

### Small Groups (n ≤ 3)
- Be more forgiving: Use threshold of `0.6 × k/n` instead of base `k/n`
- Reason: In small groups, each defection has larger impact, so encourage cooperation more strongly

### High Multiplication Factor (k ≥ 0.8n)
- Be more cooperative: Use threshold of `0.7 × k/n`
- Reason: High k makes cooperation very beneficial, so take more risks

### Short Games (r ≤ 5)
- Cooperate in first `r-2` rounds unconditionally
- Only apply threshold logic in the last 2 rounds
- Reason: Build cooperation quickly in short interactions

## Pseudocode Summary

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate of others
    look_back = min(3, round - 1)
    recent_others_coop_rate = sum(others_cooperation_in_last_k_rounds(look_back)) / (look_back * (n-1))
    
    # Set threshold based on game parameters
    base_threshold = k / n
    
    # Adjust for special cases
    if n <= 3:
        base_threshold *= 0.6
    elif k >= 0.8 * n:
        base_threshold *= 0.7
    
    # Dynamic threshold adjustment
    if recent_others_coop_rate >= base_threshold:
        threshold = 0.8 * base_threshold
    else:
        threshold = 1.2 * base_threshold
    
    # Forgiveness mechanism
    if round % 4 == 0 and was_defecting_recently():
        return COOPERATE
    
    # Final round logic
    if round == r:
        last_round_coop_rate = others_cooperation_rate(round - 1)
        return COOPERATE if last_round_coop_rate >= k/n else DEFECT
    
    # Short game exception
    if r <= 5 and round <= r - 2:
        return COOPERATE
    
    # Main decision
    return COOPERATE if recent_others_coop_rate >= threshold else DEFECT
```

## Strategic Rationale

1. **Starts cooperatively** to avoid coordination failures
2. **Adapts to group behavior** while maintaining profitability standards
3. **Forgives occasional defections** to restart cooperation
4. **Prevents end-game exploitation** with final round caution
5. **Handles diverse scenarios** through parameter-sensitive adjustments

This strategy should perform well against both cooperative and mixed populations while avoiding exploitation by purely selfish players.
'''

description_COOPERATIVE_62 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, starting optimistically but learning from opponents' behavior to maintain cooperation when possible while protecting against exploitation.

## Strategy Specification

### 1. Decision Rules

**Initial Cooperation Phase (Rounds 1-3 or first 20% of game, whichever is larger):**
- Always cooperate (C)
- Rationale: Signal cooperative intent and gather information about opponents

**Main Game Phase:**
Use a **cooperation threshold** system based on observed cooperation rates:

```
cooperation_threshold = max(0.3, (k-1)/(n-1))
current_cooperation_rate = (cooperators_last_round) / n

IF current_cooperation_rate >= cooperation_threshold:
    Play C
ELSE IF recent_trend_improving AND rounds_remaining > 0.25 * total_rounds:
    Play C (give benefit of doubt)
ELSE:
    Play D
```

**Forgiveness Mechanism:**
- If cooperation rate drops below threshold for 2+ consecutive rounds, switch to D
- Return to C when cooperation rate rises above threshold again
- Include a "forgiveness counter": After 3 consecutive rounds of mutual defection, attempt cooperation once to test if others will reciprocate

### 2. Edge Case Handling

**First Round:**
- Always cooperate to signal cooperative intent

**Last Round:**
- If cooperation rate in previous round ≥ threshold: Cooperate
- Otherwise: Defect (standard end-game reasoning)

**Last 10% of Rounds:**
- Gradually lower cooperation threshold by 10% per round to account for end-game effects
- But maintain cooperation if group has been consistently cooperative (≥80% cooperation rate)

**All-Defection Scenarios:**
- If all players defected for 3+ consecutive rounds, attempt cooperation once every 4 rounds to test for recovery
- If no positive response after 3 such attempts, switch to permanent defection

### 3. Cooperative Alignment Features

**Conditional Cooperation:**
- Reciprocates cooperation when others cooperate
- Maintains higher cooperation rates than pure reciprocators by using probabilistic thresholds rather than strict tit-for-tat

**Group Welfare Optimization:**
- Cooperation threshold scales with game parameters (k, n) to maximize group benefit
- Higher k values (more efficient public good) → lower threshold needed to maintain cooperation

**Recovery Promotion:**
- Actively attempts to restart cooperation after mutual defection periods
- Uses graduated responses rather than permanent punishment

## Pseudocode Structure

```python
def decide_action(round_num, history, n, k, r):
    # Calculate cooperation threshold
    base_threshold = max(0.3, (k-1)/(n-1))
    
    # First few rounds: always cooperate
    if round_num <= max(3, 0.2 * r):
        return COOPERATE
    
    # Calculate recent cooperation rate
    last_round_cooperators = count_cooperators(history[-1])
    cooperation_rate = last_round_cooperators / n
    
    # Adjust threshold for end-game
    if round_num > 0.9 * r:
        threshold = base_threshold * (1 - 0.1 * (round_num - 0.9*r) / (0.1*r))
    else:
        threshold = base_threshold
    
    # Check for recovery attempts after mutual defection
    if all_defected_recently(history, rounds=3):
        if should_attempt_recovery(round_num):
            return COOPERATE
    
    # Main decision logic
    if cooperation_rate >= threshold:
        return COOPERATE
    elif trend_improving(history) and rounds_remaining(round_num, r) > 0.25 * r:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Adaptability**: Responds to actual opponent behavior rather than fixed rules
2. **Robustness**: Performs well against both cooperative and selfish opponents
3. **Recovery-Oriented**: Actively tries to restore cooperation after breakdowns
4. **Parameter-Sensitive**: Adjusts cooperation thresholds based on game economics (k/n ratio)
5. **Exploitation-Resistant**: Won't be taken advantage of indefinitely by free-riders

This strategy aims to foster and maintain cooperation while being realistic about the challenges of the public goods dilemma, making it both genuinely cooperative and competitively viable.
'''

description_COOPERATIVE_63 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation levels and measured responses to defection.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather baseline information about other players

### 2. Adaptive Cooperation Threshold
After round 3, calculate a **cooperation threshold** based on observed behavior:

```
cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)
threshold = max(0.3, cooperation_rate * 0.8)
```

This threshold represents the minimum cooperation rate needed from others to justify continued cooperation.

### 3. Main Decision Logic (Rounds 4 to r-2)

**Cooperate if ANY of the following conditions are met:**

a) **High Recent Cooperation**: In the last 2 rounds, cooperation rate ≥ threshold
b) **Improving Trend**: Cooperation rate increased in the most recent round compared to the previous round
c) **Strategic Forgiveness**: Every 4th round, cooperate regardless (to test if cooperation can be re-established)
d) **Collective Benefit**: Current cooperation rate > 1/k (the theoretical break-even point where collective cooperation becomes profitable)

**Otherwise, defect (D)**

### 4. Endgame Handling (Last 2 Rounds)

**Second-to-last round (r-1)**:
- If average cooperation rate across all previous rounds > 0.5: Cooperate
- Otherwise: Defect

**Final round (r)**:
- If cooperation rate in round (r-1) ≥ 0.6: Cooperate (reward sustained cooperation)
- Otherwise: Defect

## Key Features

### Robustness Mechanisms
1. **Graduated Response**: Doesn't immediately punish single defections but responds to patterns
2. **Forgiveness Cycles**: Regular cooperation attempts prevent permanent punishment spirals
3. **Adaptive Threshold**: Adjusts expectations based on the actual player population
4. **Trend Sensitivity**: Rewards improving behavior even if absolute levels are low

### Cooperative Alignment
1. **Optimistic Start**: Always begins cooperatively
2. **Second Chances**: Strategic forgiveness prevents lock-in to mutual defection
3. **Collective Focus**: Considers overall group benefit, not just bilateral relationships
4. **Endgame Cooperation**: Willing to cooperate in final rounds if group maintains cooperation

### Exploitation Protection
1. **Threshold-Based**: Won't cooperate indefinitely with mostly defecting groups
2. **Recent Behavior Weighting**: More sensitive to recent actions than distant history
3. **Conditional Endgame**: Adjusts final round behavior based on observed patterns

## Pseudocode Summary

```
function decide_action(round, history):
    if round <= 3:
        return COOPERATE
    
    recent_coop_rate = cooperation_rate(last_2_rounds)
    overall_coop_rate = cooperation_rate(all_previous_rounds)
    threshold = max(0.3, overall_coop_rate * 0.8)
    
    if round >= r-1:  // Endgame
        return endgame_decision(round, overall_coop_rate, recent_coop_rate)
    
    if recent_coop_rate >= threshold:
        return COOPERATE
    elif cooperation_improving():
        return COOPERATE
    elif round % 4 == 0:  // Forgiveness cycle
        return COOPERATE
    elif overall_coop_rate > 1/k:
        return COOPERATE
    else:
        return DEFECT
```

This strategy balances cooperation and self-protection while remaining adaptive to various opponent behaviors, from pure cooperators to sophisticated conditional strategies.
'''

description_COOPERATIVE_64 = '''
# Adaptive Generous Tit-for-Tat (AGTT) Strategy

## Core Philosophy
This strategy balances cooperation with strategic self-protection by being generous in rewarding cooperation while maintaining measured responses to defection. It adapts to the overall cooperation level in the group and becomes more forgiving as the game progresses.

## Decision Rules

### Round 1: Cooperative Start
- **Always cooperate** in the first round to signal cooperative intent and establish a positive foundation.

### Rounds 2 to r-1: Adaptive Response
For each subsequent round (except the last), the decision follows this hierarchy:

1. **Cooperation Threshold Check**:
   - Calculate the group cooperation rate in the previous round: `coop_rate = total_cooperators / n`
   - If `coop_rate ≥ 0.5`: **Cooperate** (reward majority cooperation)

2. **Personal History Analysis** (if cooperation rate < 0.5):
   - Count personal cooperation attempts in last 3 rounds (or all rounds if fewer than 3 played)
   - Count how many times others cooperated when you cooperated in those rounds
   - Calculate reciprocity ratio: `reciprocity = others_cooperation_when_i_cooperated / my_cooperation_attempts`
   
3. **Generous Response Decision**:
   - If `reciprocity ≥ 0.3`: **Cooperate** (generous threshold - reward partial reciprocity)
   - If `reciprocity < 0.3`: **Defect** (protect against exploitation)

4. **Forgiveness Mechanism**:
   - Every 4th round, ignore the reciprocity check and **cooperate** regardless
   - This prevents permanent defection cycles and probes for renewed cooperation

### Final Round: Strategic Cooperation
- **Cooperate if and only if** the cooperation rate in round (r-1) was ≥ 0.4
- This maintains cooperative relationships even at the end while avoiding exploitation by confirmed defectors

## Adaptive Elements

### Dynamic Forgiveness
- **Early game** (first 25% of rounds): Forgiveness trigger every 3rd round instead of 4th
- **Late game** (last 25% of rounds): Extend forgiveness window to every 5th round to be more selective

### Group Size Adjustment
- For **small groups** (n ≤ 4): Lower reciprocity threshold to 0.2 (more generous)
- For **large groups** (n ≥ 8): Raise reciprocity threshold to 0.4 (more selective)

## Edge Case Handling

### Perfect Cooperation Detection
- If all players cooperated in the last 2 consecutive rounds: **Always cooperate** until someone defects

### Mass Defection Response
- If cooperation rate drops below 0.2 for 2 consecutive rounds: Enter "recovery mode"
- In recovery mode: Cooperate for 2 rounds, then resume normal strategy
- This attempts to restart cooperation after breakdowns

### Endgame Approach
- In the final 10% of rounds: Weight recent history more heavily (last 2 rounds count double)
- This makes the strategy more responsive to endgame behavioral changes

## Robustness Features

1. **Anti-exploitation**: The reciprocity threshold prevents persistent free-riding
2. **Cooperation-seeking**: Regular forgiveness attempts and majority-following maintain cooperative opportunities  
3. **Adaptive thresholds**: Different parameters for group sizes and game phases
4. **History-bounded**: Only considers recent history (3 rounds) to adapt to strategy changes
5. **Endgame protection**: Modified final round behavior prevents last-round exploitation

## Pseudocode Summary

```
if round == 1:
    return COOPERATE

if round == r:  # Final round
    return COOPERATE if prev_coop_rate >= 0.4 else DEFECT

# Calculate cooperation rate in previous round
prev_coop_rate = count_cooperators(round-1) / n

if prev_coop_rate >= 0.5:
    return COOPERATE

# Check forgiveness cycle (adaptive based on game phase)
forgiveness_cycle = get_forgiveness_cycle(round, r, n)
if round % forgiveness_cycle == 0:
    return COOPERATE

# Calculate reciprocity from recent history
recent_rounds = min(3, round-1)
reciprocity = calculate_reciprocity(recent_rounds)

threshold = get_reciprocity_threshold(n)
return COOPERATE if reciprocity >= threshold else DEFECT
```

This strategy is designed to be cooperative by default while protecting against exploitation, adapting to group dynamics, and maintaining the flexibility to rebuild cooperation even after conflicts.
'''

description_COOPERATIVE_65 = '''
# Adaptive Reciprocal Cooperation (ARC) Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts cooperative, rewards collective cooperation, but responds proportionally to defection patterns while maintaining opportunities for redemption.

## Decision Framework

### Initial Conditions (Round 1)
- **Always COOPERATE** in the first round
- Rationale: Establish cooperative intent and test the waters

### Main Decision Rule (Rounds 2 to r-1)

The strategy uses a **Cooperation Threshold Model** based on three key metrics:

1. **Recent Cooperation Rate (RCR)**: Percentage of players who cooperated in the last round
2. **Historical Cooperation Trend (HCT)**: Weighted average cooperation rate over recent history (last 3 rounds or all rounds if fewer)
3. **Personal Vulnerability Index (PVI)**: How much I'm being exploited relative to others

#### Cooperation Threshold Calculation:
```
base_threshold = 0.3 + (k-1)/(n-1) * 0.4
```
This scales from 0.3 when k≈1 to 0.7 when k≈n, reflecting that higher multiplication factors justify more cooperative risk.

#### Adaptive Adjustment:
```
if HCT > 0.6:
    adjusted_threshold = base_threshold * 0.8  // Lower bar when group is cooperative
else if HCT < 0.3:
    adjusted_threshold = base_threshold * 1.3  // Higher bar when group is defecting
else:
    adjusted_threshold = base_threshold
```

#### Decision Logic:
**COOPERATE if ANY of these conditions hold:**
1. RCR ≥ adjusted_threshold
2. HCT > 0.5 AND my_last_round_payoff ≥ average_payoff_in_last_round
3. Total group cooperation is increasing over last 2 rounds
4. Random forgiveness trigger (5% chance) AND HCT > 0.2

**Otherwise DEFECT**

### Final Round Strategy (Round r)
Apply a **Conditional Generosity** approach:
- **COOPERATE** if HCT ≥ 0.4 (the group has been reasonably cooperative)
- **DEFECT** if HCT < 0.4 (protect against final round exploitation)

## Key Strategic Elements

### 1. Graduated Response System
- High cooperation → Lower cooperation threshold (encourage continued cooperation)
- Low cooperation → Higher cooperation threshold (protect against exploitation)
- Medium cooperation → Standard threshold (maintain stability)

### 2. Multi-Signal Processing
The strategy doesn't rely on just last-round behavior but considers:
- Immediate feedback (last round cooperation rate)
- Medium-term trends (3-round weighted average)
- Trajectory changes (is cooperation increasing/decreasing?)

### 3. Forgiveness Mechanism
- Random 5% forgiveness chance prevents permanent punishment cycles
- Only triggers when there's minimal cooperation (HCT > 0.2), avoiding exploitation
- Helps restart cooperation after punishment phases

### 4. Parameter Sensitivity
- Higher k values (more beneficial public good) → More willing to cooperate
- Larger n values → More conservative (harder for individuals to impact outcome)
- Adjusts expectations based on mathematical structure of the game

### 5. Exploitation Protection
- Monitors personal payoff relative to group average
- Won't persistently cooperate if being systematically exploited
- Balances individual protection with collective benefit

## Edge Case Handling

**Very first game ever:** Always cooperate (no history to analyze)

**All players defected last round:** Still cooperate if long-term trend is positive, otherwise defect

**Highly volatile cooperation patterns:** Rely more heavily on recent cooperation rate than historical trends

**Near-universal cooperation:** Lower threshold significantly to maintain momentum

**Near-universal defection:** Require strong recent signals before risking cooperation

## Robustness Features

1. **Non-exploitable**: Won't cooperate indefinitely against persistent defectors
2. **Recovery-capable**: Can restart cooperation after punishment phases
3. **Momentum-sensitive**: Recognizes and responds to changing group dynamics
4. **Parameter-aware**: Adjusts expectations based on game structure
5. **Noise-tolerant**: Uses multiple signals to avoid overreacting to single-round anomalies

This strategy aims to foster cooperation when possible while protecting against exploitation, adapting its standards based on the observed behavior patterns of the group and the underlying game incentives.
'''

description_COOPERATIVE_66 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically but learns from group behavior, rewarding collective cooperation while defending against systematic defection.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and establish a baseline for future assessment.

### Rounds 2 to r-1: Adaptive Reciprocal Response

The strategy maintains two key metrics:
- **Recent Cooperation Rate (RCR)**: Proportion of players who cooperated in the last round
- **Historical Cooperation Trend (HCT)**: Weighted average of cooperation rates over the last min(3, current_round-1) rounds, with more recent rounds weighted higher

**Decision Logic:**
1. **High Reciprocal Cooperation** (RCR ≥ 0.6): 
   - Cooperate to maintain and reward group cooperation
   
2. **Moderate Cooperation** (0.3 ≤ RCR < 0.6):
   - Cooperate if HCT shows improving trend (≥ 0.4)
   - Defect if HCT shows declining trend (< 0.4)
   
3. **Low Cooperation** (RCR < 0.3):
   - Defect to protect against exploitation
   - Exception: If this is only the second instance of low cooperation in the last 4 rounds, cooperate once more to test if it was temporary

### Round r (Final Round): Strategic Endgame
- **Cooperate** if RCR in round r-1 ≥ 0.5 (reward sustained cooperation)
- **Defect** if RCR in round r-1 < 0.5 (protect against end-game defection)

## Adaptive Mechanisms

### Forgiveness Protocol
If the group shows recovery after a period of low cooperation:
- Reset defensive posture when cooperation rate returns to ≥ 0.6 for 2 consecutive rounds
- This prevents permanent punishment for temporary coordination failures

### Trend Analysis
The Historical Cooperation Trend uses exponential weighting:
- Most recent round: weight = 0.5
- Previous round: weight = 0.3  
- Round before that: weight = 0.2

This makes the strategy responsive to recent changes while maintaining some historical context.

## Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    last_round_cooperators = count_cooperators(history[round-1])
    RCR = last_round_cooperators / n
    
    # Calculate historical cooperation trend
    HCT = calculate_weighted_trend(history, round, n)
    
    if round == r:  # Final round
        return COOPERATE if RCR >= 0.5 else DEFECT
    
    # Main decision logic
    if RCR >= 0.6:
        return COOPERATE
    elif RCR >= 0.3:
        return COOPERATE if HCT >= 0.4 else DEFECT
    else:  # RCR < 0.3
        # Check if this is only second instance of low cooperation recently
        recent_low_coop_count = count_low_cooperation_rounds(history, round, 4)
        if recent_low_coop_count <= 1:
            return COOPERATE  # Give another chance
        else:
            return DEFECT
```

## Robustness Features

1. **Against Always Defectors**: Quickly identifies and responds to groups with consistently low cooperation
2. **Against Alternating Strategies**: The trend analysis smooths out temporary fluctuations
3. **Against End-game Defection**: Maintains some cooperation incentive until the final round based on recent behavior
4. **Against Noise**: The forgiveness protocol prevents overreaction to isolated defection rounds
5. **Parameter Independence**: Thresholds are based on cooperation rates rather than absolute numbers, making it work across different values of n

This strategy maintains a cooperative stance while protecting against exploitation, adapts to group dynamics, and provides appropriate responses across the full spectrum of possible opponent behaviors.
'''

description_COOPERATIVE_67 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperation with adaptive learning, using reciprocity as the foundation while adjusting to observed opponent behaviors. It aims to foster cooperation when possible while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal willingness to collaborate and establish a cooperative baseline.

### Subsequent Rounds: Adaptive Reciprocity

For rounds 2 through r, use a three-component decision system:

#### 1. Cooperation Momentum Score (CMS)
Calculate the recent cooperation trend:
```
CMS = (cooperators_last_round / n) × 0.6 + (cooperators_two_rounds_ago / n) × 0.4
```
- Weights recent behavior more heavily than older behavior
- Ranges from 0 (no cooperation) to 1 (full cooperation)

#### 2. Personal Reciprocity Threshold (PRT)
Adjust expectations based on game parameters:
```
PRT = max(0.3, min(0.7, k/n - 0.1))
```
- Higher multiplication factors warrant more optimistic cooperation
- Bounded between 30% and 70% cooperation rate as threshold
- Slightly pessimistic adjustment (-0.1) accounts for free-riding tendencies

#### 3. Defection Penalty Mechanism
Track if cooperation rates are declining:
```
decline_penalty = max(0, (cooperators_two_rounds_ago - cooperators_last_round) / n)
effective_threshold = PRT + decline_penalty × 0.3
```

### Main Decision Rule
**Cooperate if**: `CMS ≥ effective_threshold`
**Defect if**: `CMS < effective_threshold`

## Edge Case Handling

### Final Round Consideration
- In the last 20% of rounds, apply a "commitment bonus":
  - If historically cooperative (average cooperation rate > 50%), continue cooperating to maintain relationships
  - If historically uncooperative environment, defect to maximize final payoffs

### Very Low Cooperation Environments
- If cooperation rate falls below 20% for 3 consecutive rounds:
  - Switch to "probe mode": cooperate every 4th round to test if cooperation can be rekindled
  - Return to normal strategy if cooperation rate rises above 30%

### High Cooperation Environments
- If cooperation rate exceeds 80% for 2 consecutive rounds:
  - Continue cooperating but monitor for sudden defections
  - If defections spike (drop > 40% in cooperation rate), immediately reassess using normal rules

## Robustness Features

### 1. **Forgiveness Mechanism**
- If stuck in mutual defection, occasionally cooperate (every 5-7 rounds) to test for renewed cooperation opportunities
- Frequency decreases as game progresses to avoid late-game exploitation

### 2. **Exploitation Protection**
- Never cooperate if you were the only cooperator in the previous round AND cooperation rate was < 25%
- This prevents persistent exploitation by sophisticated defectors

### 3. **Parameter Sensitivity**
- Strategy automatically adjusts thresholds based on k/n ratio:
  - Higher k/n encourages more cooperation (lower threshold)
  - Lower k/n requires more evidence of cooperation before joining

## Pseudocode Summary

```
Strategy: Adaptive Reciprocal Cooperation Strategy (ARCS)

Initialize:
- round = 1
- cooperation_history = []
- my_history = []

For each round:
    If round == 1:
        action = COOPERATE
    
    Else:
        // Calculate cooperation momentum
        recent_coop_rate = cooperators_last_round / n
        prev_coop_rate = cooperators_two_rounds_ago / n (if available)
        CMS = recent_coop_rate * 0.6 + prev_coop_rate * 0.4
        
        // Calculate threshold
        base_threshold = max(0.3, min(0.7, k/n - 0.1))
        
        // Apply decline penalty
        if prev_coop_rate available:
            decline = max(0, prev_coop_rate - recent_coop_rate)
            threshold = base_threshold + decline * 0.3
        else:
            threshold = base_threshold
        
        // Special cases
        if in_final_20_percent_of_rounds AND historical_coop_rate < 0.5:
            action = DEFECT
        elif recent_coop_rate < 0.2 for 3+ consecutive rounds:
            action = COOPERATE if (round % 4 == 0) else DEFECT
        elif was_only_cooperator_last_round AND recent_coop_rate < 0.25:
            action = DEFECT
        else:
            action = COOPERATE if CMS >= threshold else DEFECT
    
    Record action and observe results
    Update histories
```

This strategy is designed to be genuinely cooperative while being robust against exploitation, adapting to various opponent strategies while maintaining the goal of fostering mutual cooperation when possible.
'''

description_COOPERATIVE_68 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically, rewards collective cooperation, but responds proportionally to defection while maintaining opportunities for cooperation recovery.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Response System

**Step 1: Calculate Cooperation Momentum**
- Track the cooperation rate over the last min(3, current_round-1) rounds
- `recent_coop_rate = (total_cooperators_in_recent_rounds) / (n × rounds_considered)`

**Step 2: Determine Base Cooperation Threshold**
- `base_threshold = max(0.3, k/n)` 
- This ensures we cooperate when the public good multiplier makes it collectively rational

**Step 3: Apply Momentum Adjustment**
- If `recent_coop_rate ≥ 0.6`: Lower threshold by 0.1 (be more cooperative)
- If `recent_coop_rate ≤ 0.3`: Raise threshold by 0.1 (be more defensive)
- `adjusted_threshold = base_threshold ± momentum_adjustment`

**Step 4: Make Decision**
- **Cooperate** if `recent_coop_rate ≥ adjusted_threshold`
- **Defect** otherwise

**Step 5: Forgiveness Mechanism**
- Every 4th round, if we've been defecting for 2+ consecutive rounds, cooperate regardless of threshold (give cooperation a chance to re-emerge)

### Final Round: Conditional Cooperation
- **Cooperate** if the cooperation rate in rounds r-2 and r-1 was ≥ 50%
- **Defect** otherwise (protect against end-game defection)

## Pseudocode

```
function decide_action(round_number, history):
    if round_number == 1:
        return COOPERATE
    
    if round_number == total_rounds:
        recent_rounds = [total_rounds-2, total_rounds-1]
        if cooperation_rate(recent_rounds) >= 0.5:
            return COOPERATE
        else:
            return DEFECT
    
    // Calculate recent cooperation rate
    lookback = min(3, round_number - 1)
    recent_coop_rate = cooperation_rate(last_n_rounds(lookback))
    
    // Determine threshold
    base_threshold = max(0.3, k/n)
    
    if recent_coop_rate >= 0.6:
        threshold = base_threshold - 0.1
    else if recent_coop_rate <= 0.3:
        threshold = base_threshold + 0.1
    else:
        threshold = base_threshold
    
    // Forgiveness mechanism
    if (round_number % 4 == 0) and (consecutive_defections() >= 2):
        return COOPERATE
    
    // Main decision
    if recent_coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Key Features

1. **Cooperative Start**: Signals good intentions and tests group dynamics
2. **Adaptive Thresholds**: Responds to group behavior patterns rather than individual players
3. **Momentum Tracking**: Rewards improving cooperation trends, punishes declining ones
4. **Forgiveness**: Prevents getting stuck in mutual defection spirals
5. **End-game Protection**: Guards against final round exploitation while maintaining cooperation if the group has been collaborative

## Robustness Against Different Opponents

- **Against Always Cooperate**: Will quickly learn to cooperate consistently
- **Against Always Defect**: Will eventually defect but gives multiple chances for cooperation
- **Against Tit-for-Tat variants**: Will establish mutual cooperation
- **Against Random players**: Will adapt to the average cooperation level
- **Against sophisticated strategies**: The momentum system and forgiveness mechanism prevent exploitation while maintaining cooperative opportunities

This strategy achieves cooperation through measured trust-building rather than blind optimism, making it robust across diverse strategic environments while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_69 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive reciprocity. It starts cooperatively but learns to match the cooperation level of the group, with built-in forgiveness mechanisms to recover from mutual defection cycles.

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Reciprocity with Forgiveness

The strategy maintains a **cooperation threshold** that adapts based on observed group behavior:

1. **Calculate group cooperation rate**: 
   - `group_coop_rate = (total cooperators in previous round) / n`

2. **Update cooperation threshold**:
   - Start with threshold = 0.5
   - `new_threshold = 0.7 × current_threshold + 0.3 × group_coop_rate`
   - This creates a weighted average favoring recent group behavior

3. **Forgiveness mechanism**:
   - If mutual defection has occurred for 2+ consecutive rounds AND group cooperation rate < 0.3:
   - Cooperate with probability 0.4 to attempt breaking the cycle
   - Otherwise, continue with main decision rule

4. **Main decision rule**:
   - **Cooperate** if: `group_coop_rate ≥ cooperation_threshold`
   - **Defect** if: `group_coop_rate < cooperation_threshold`

### Final Round (Round r): Strategic Defection
- **Always defect** in the final round, as there's no future retaliation possible and rational players will likely defect.

## Key Features

### Adaptability
- The threshold adjusts to match the group's cooperation level over time
- Responds to both highly cooperative and highly defective environments
- Learns from recent history while maintaining some stability

### Robustness
- **Against exploiters**: Reduces cooperation when others consistently defect
- **Against conditional cooperators**: Maintains high cooperation when others do
- **Against random players**: Adapts to average cooperation level
- **Against mutual defection traps**: Forgiveness mechanism helps escape

### Cooperation Bias
- Starts cooperatively to encourage group cooperation
- Threshold updating formula (0.7 × old + 0.3 × observed) creates inertia toward cooperation
- Forgiveness mechanism actively attempts to restore cooperation
- Only defects when group cooperation falls significantly below expectations

## Pseudocode

```
Initialize:
- cooperation_threshold = 0.5
- consecutive_mutual_defection = 0

For each round t:
  If t == 1:
    action = COOPERATE
    
  Else if t == r:  // Final round
    action = DEFECT
    
  Else:
    // Calculate group cooperation from previous round
    group_coop_rate = count_cooperators(t-1) / n
    
    // Update threshold adaptively
    cooperation_threshold = 0.7 * cooperation_threshold + 0.3 * group_coop_rate
    
    // Check for mutual defection cycle
    if group_coop_rate < 0.3 and my_previous_action == DEFECT:
      consecutive_mutual_defection += 1
    else:
      consecutive_mutual_defection = 0
    
    // Apply forgiveness mechanism
    if consecutive_mutual_defection >= 2:
      action = COOPERATE with probability 0.4, else DEFECT
    
    // Main decision rule
    else if group_coop_rate >= cooperation_threshold:
      action = COOPERATE
    else:
      action = DEFECT
```

## Strategic Rationale

This strategy balances several key objectives:

1. **Encourages cooperation** through initial cooperation and adaptive thresholds
2. **Protects against exploitation** by reducing cooperation when others don't reciprocate  
3. **Maintains flexibility** by adapting to various opponent strategies
4. **Prevents deadlock** through probabilistic forgiveness in mutual defection scenarios
5. **Maximizes final-round payoff** through strategic end-game defection

The strategy should perform well against both cooperative and selfish opponents while contributing to higher overall group welfare than purely selfish strategies.
'''

description_COOPERATIVE_70 = '''
# Adaptive Threshold Cooperation (ATC) Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive resilience, aiming to maximize collective welfare while protecting against exploitation. It uses dynamic thresholds and graduated responses to foster cooperation while maintaining robustness.

## Decision Rules

### Initial Phase (First Round)
- **Always cooperate** in round 1 to signal cooperative intent and establish a positive foundation.

### Main Decision Logic
The strategy operates on a **dynamic cooperation threshold** that adapts based on observed cooperation levels:

1. **Calculate Recent Cooperation Rate**: Track the proportion of players who cooperated in the last `max(3, r/5)` rounds (minimum 3 rounds, or 20% of total rounds if fewer).

2. **Dynamic Threshold Calculation**:
   ```
   cooperation_threshold = base_threshold + adjustment_factor
   
   base_threshold = 0.4  // Start moderately forgiving
   adjustment_factor = (recent_cooperation_rate - 0.5) × 0.3
   ```
   This creates a threshold between 0.25 and 0.55 that rises when others cooperate more and falls when they cooperate less.

3. **Primary Decision Rule**:
   - **Cooperate** if: `recent_cooperation_rate ≥ cooperation_threshold`
   - **Defect** otherwise

### Adaptive Elements

#### Forgiveness Mechanism
- If cooperation rate falls below threshold for 2+ consecutive rounds, temporarily lower the threshold by 0.1 for the next round to test if cooperation can be restored
- Reset to normal threshold calculation afterward

#### End-Game Handling
- In the **final 20% of rounds** (or last 3 rounds if `r ≤ 15`):
  - If average cooperation rate across all previous rounds ≥ 0.6: Continue cooperating
  - If 0.3 ≤ average cooperation rate < 0.6: Use standard threshold logic
  - If average cooperation rate < 0.3: Defect (protect against end-game exploitation)

#### Reciprocity Bonus
- If individual tracking is feasible, give slight preference (lower personal threshold by 0.05) to cooperating when a majority of the group has maintained high cooperation rates

## Edge Case Handling

### Very Short Games (r ≤ 5)
- Cooperate in rounds 1-2
- Use simplified threshold of 0.5 for remaining rounds
- Always cooperate in final round if others averaged ≥ 0.5 cooperation

### High Player Count (n > 10)
- Increase base threshold slightly to 0.45 (harder to sustain cooperation with many players)
- Use longer history window: `max(5, r/4)` rounds

### Extreme Multiplication Factors
- If k is very close to 1: Lower base threshold to 0.3 (cooperation barely beneficial)
- If k is close to n: Raise base threshold to 0.5 (cooperation highly beneficial)

## Pseudocode Summary

```
function decide_action(round, history, n, r, k):
    if round == 1:
        return COOPERATE
    
    // Calculate recent cooperation rate
    window_size = max(3, r/5)
    recent_rounds = min(round-1, window_size)
    recent_cooperation_rate = count_cooperators_in_last_rounds(recent_rounds) / (n * recent_rounds)
    
    // Dynamic threshold
    base_threshold = adjust_base_threshold_for_parameters(n, k)
    adjustment = (recent_cooperation_rate - 0.5) * 0.3
    threshold = base_threshold + adjustment
    
    // Forgiveness mechanism
    if consecutive_below_threshold >= 2:
        threshold -= 0.1
    
    // End-game logic
    if in_final_phase(round, r):
        return end_game_decision(history, recent_cooperation_rate)
    
    // Main decision
    return COOPERATE if recent_cooperation_rate >= threshold else DEFECT
```

## Strategic Rationale

1. **Cooperative by Design**: Starts cooperatively and maintains cooperation when others reciprocate
2. **Adaptive**: Adjusts expectations based on group behavior rather than rigid rules
3. **Robust**: Protects against exploitation while remaining open to renewed cooperation
4. **Context-Aware**: Handles different game parameters and phases appropriately
5. **Psychologically Sound**: Uses graduated responses rather than harsh punishment, encouraging others to return to cooperation

This strategy should perform well against both cooperative and mixed populations while maintaining the cooperative spirit of the public goods game.
'''

description_COOPERATIVE_71 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intentions with adaptive responses to opponent behavior, using forgiveness and escalation mechanisms to maintain cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Response System

**Step 1: Calculate Cooperation Metrics**
- `recent_coop_rate` = cooperation rate over last min(3, current_round-1) rounds
- `overall_coop_rate` = cooperation rate since round 1
- `trend_direction` = whether cooperation is increasing, decreasing, or stable over last 3 rounds

**Step 2: Determine Base Response**
```pseudocode
if recent_coop_rate >= 0.7:
    base_action = COOPERATE
elif recent_coop_rate >= 0.4:
    if overall_coop_rate >= 0.5:
        base_action = COOPERATE
    else:
        base_action = DEFECT
else:
    base_action = DEFECT
```

**Step 3: Apply Forgiveness Mechanism**
If `base_action = DEFECT` but we defected in the previous round:
- Cooperate with probability 0.3 to test if opponents are willing to return to cooperation
- This prevents permanent defection spirals

**Step 4: Apply Trend Adjustment**
- If cooperation trend is clearly improving (trend_direction = "increasing"), increase cooperation probability by 0.2
- If trend is deteriorating and we're considering cooperation, decrease cooperation probability by 0.1

### Final Round: Conditional Cooperation
Given the end-game dynamics where others might defect:
- If `overall_coop_rate >= 0.6`: Cooperate (reward good overall cooperation)
- If `recent_coop_rate >= 0.7`: Cooperate (maintain recent good relationships)
- Otherwise: Defect (protect against end-game defection)

## Key Features

### 1. Graduated Response
- High cooperation threshold (70%) for immediate reciprocation
- Medium threshold (40%) with historical consideration
- Prevents overreaction to single defections

### 2. Forgiveness Mechanism
- Periodic cooperation attempts even after defecting
- Prevents permanent breakdown of cooperation
- Tests opponent willingness to return to cooperative equilibrium

### 3. Trend Sensitivity
- Recognizes improving cooperation patterns and encourages them
- Responds to deteriorating cooperation before it becomes endemic
- Adapts to changing group dynamics over time

### 4. Parameter Independence
- Works regardless of n (number of players), k (multiplier), or r (rounds)
- Thresholds are based on cooperation rates, not absolute numbers
- Scales naturally to different game sizes

### 5. Robustness Features
- **Against always-defectors**: Eventually defects to protect payoffs
- **Against tit-for-tat**: Maintains cooperation through reciprocation
- **Against random players**: Adapts to average behavior
- **Against exploiters**: Forgiveness mechanism allows recovery from temporary exploitation

## Strategic Rationale

1. **Cooperative by Design**: Starts cooperatively and maintains high cooperation when others reciprocate
2. **Adaptive**: Responds to actual behavior rather than assumptions
3. **Forgiving**: Provides pathways back to cooperation after conflicts
4. **Protective**: Defects when facing consistent exploitation
5. **Tournament-Ready**: No reliance on coordination or shared strategies

This strategy aims to achieve high mutual cooperation when possible while maintaining reasonable payoffs against less cooperative opponents.
'''

description_COOPERATIVE_72 = '''
# Adaptive Reciprocal Cooperation Strategy

## Core Philosophy
This strategy aims to establish and maintain cooperation while protecting against exploitation. It begins optimistically but adapts based on observed group behavior, using graduated responses rather than harsh punishments.

## Decision Rules

### Round 1: Optimistic Start
- **Always COOPERATE** in the first round
- Rationale: Signal cooperative intent and test the group's disposition

### Subsequent Rounds: Adaptive Response System

The strategy uses a **cooperation threshold** system based on recent group behavior:

#### Step 1: Calculate Recent Cooperation Rate
- Track cooperation rate over the last min(3, current_round-1) rounds
- `recent_coop_rate = (total_cooperators_in_recent_rounds) / (n × rounds_observed)`

#### Step 2: Determine Cooperation Threshold
```
if recent_coop_rate ≥ 0.6:
    cooperation_threshold = 0.4
elif recent_coop_rate ≥ 0.4:
    cooperation_threshold = 0.5
elif recent_coop_rate ≥ 0.2:
    cooperation_threshold = 0.6
else:
    cooperation_threshold = 0.7
```

#### Step 3: Make Decision
- **COOPERATE** if `recent_coop_rate ≥ cooperation_threshold`
- **DEFECT** otherwise

### Special Cases

#### Last Round Handling
- If `current_round = r` (final round):
  - COOPERATE if recent_coop_rate ≥ 0.5
  - Otherwise DEFECT
- Rationale: Slightly more cautious in final round but still cooperative if group has shown reasonable reciprocity

#### Early Rounds (Rounds 2-3)
- Use more lenient thresholds to allow cooperation to establish:
  - Round 2: COOPERATE if at least 1 other player cooperated in round 1
  - Round 3: COOPERATE if average cooperation rate across rounds 1-2 ≥ 0.3

## Key Features

### 1. **Graduated Response**
- Adjusts cooperation threshold based on observed group behavior
- More forgiving when group cooperation is high
- More cautious when cooperation is low, but never completely abandons cooperation

### 2. **Forgiveness Mechanism**
- Uses rolling window (last 3 rounds) rather than entire history
- Allows recovery from periods of low cooperation
- Prevents permanent punishment spirals

### 3. **Exploitation Protection**
- Won't cooperate if recent cooperation rate is very low (< threshold)
- Threshold increases as group cooperation decreases
- Balances cooperation with self-protection

### 4. **Adaptability**
- Responds to changing group dynamics
- Works across different group sizes and game parameters
- No assumptions about opponent strategies or coordination

## Pseudocode Summary

```
function decide_action(round, history, n, r, k):
    if round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    lookback = min(3, round - 1)
    recent_rounds = history[-lookback:]
    total_cooperators = sum(cooperators in each recent round)
    recent_coop_rate = total_cooperators / (n × lookback)
    
    # Determine threshold
    if recent_coop_rate >= 0.6: threshold = 0.4
    elif recent_coop_rate >= 0.4: threshold = 0.5
    elif recent_coop_rate >= 0.2: threshold = 0.6
    else: threshold = 0.7
    
    # Special handling for early and final rounds
    if round == 2:
        threshold = min(threshold, 1/n)  # More lenient
    elif round == r:
        threshold = max(threshold, 0.5)  # Slightly more cautious
    
    return COOPERATE if recent_coop_rate >= threshold else DEFECT
```

## Strategic Rationale

This strategy is designed to:
1. **Encourage cooperation** through initial optimism and forgiveness
2. **Maintain cooperation** with groups that reciprocate
3. **Protect against exploitation** by free-riders
4. **Adapt to different environments** without assuming specific opponent behaviors
5. **Remain competitive** in mixed populations while promoting overall welfare

The graduated threshold system ensures the strategy remains cooperative-minded while being sufficiently robust to avoid exploitation in hostile environments.
'''

description_COOPERATIVE_73 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed group behavior and reciprocal responses.

## Decision Rules

### 1. Initial Cooperation Phase
- **Round 1**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Adaptive Cooperation Threshold
After the initial phase, maintain a **cooperation threshold** based on group behavior:

```
cooperation_rate = (total_cooperators_in_last_3_rounds) / (3 × n)
base_threshold = k / n  // This is the break-even cooperation rate
adjusted_threshold = base_threshold × 0.8  // Slightly more forgiving than pure Nash
```

### 3. Main Decision Logic (Rounds 4 to r-1)

```pseudocode
IF cooperation_rate >= adjusted_threshold:
    cooperate = TRUE
ELSE:
    // Implement graduated response
    IF cooperation_rate >= adjusted_threshold × 0.5:
        // Partial reciprocation: cooperate with probability = cooperation_rate
        cooperate = random() < cooperation_rate
    ELSE:
        // Very low cooperation detected - mostly defect but probe occasionally
        cooperate = random() < 0.1
```

### 4. Forgiveness Mechanism
Track consecutive rounds of declining cooperation. If cooperation has been declining for 3+ rounds but then increases in the most recent round:
- Increase cooperation probability by 0.2 for the next round
- Reset the decline counter

### 5. End Game Handling
- **Last round (round r)**: 
  - If cooperation_rate > adjusted_threshold: Cooperate
  - Otherwise: Defect (no future rounds to establish reciprocity)

### 6. Individual Player Tracking
Maintain simple individual histories for direct reciprocity:
- If a specific pattern emerges where certain players consistently defect, reduce cooperation probability by 0.1 when their defection rate exceeds 80% over the last 5 rounds

## Key Features

### Cooperative Alignment
- **Default to cooperation**: Starts cooperative and maintains cooperation when group reciprocates
- **Collective benefit focus**: Uses cooperation rates rather than pure individual responses
- **Forgiveness**: Gives second chances when cooperation increases after decline

### Robustness
- **Adaptive thresholds**: Adjusts expectations based on actual group behavior rather than theoretical optimums
- **Graduated responses**: Doesn't immediately punish, but scales response to cooperation level
- **Anti-exploitation**: Protects against consistent defectors while remaining open to cooperation

### Edge Case Handling
- **Cold start**: Establishes cooperative baseline in first few rounds
- **Information gathering**: Uses initial rounds to assess group dynamics
- **End game**: Recognizes changed incentives in final round
- **Statistical smoothing**: Uses 3-round windows to avoid overreacting to single-round anomalies

## Strategic Rationale

This strategy balances several key considerations:

1. **Cooperative by default** but not naive - establishes cooperative intent early
2. **Responsive to group dynamics** - adapts to the actual cooperation level rather than assuming perfect rationality
3. **Gradualist punishment** - doesn't immediately escalate to full defection, allowing for recovery
4. **Forward-looking** - maintains cooperation incentives throughout most of the game
5. **Robust to diverse opponents** - works whether facing other cooperators, conditional cooperators, or mixed strategies

The strategy should perform well against other cooperative strategies while avoiding exploitation by purely selfish players, making it suitable for a diverse tournament environment.
'''

description_COOPERATIVE_74 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness, using graduated responses that encourage cooperation while protecting against exploitation. It operates on the principle of "cautious optimism" - starting cooperatively but adapting based on observed group behavior.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating regardless of others' actions
- **Rationale**: Establish cooperative intent and give others a chance to reciprocate

### 2. Assessment Phase (Rounds 4 onwards)
Calculate two key metrics after each round:
- **Group Cooperation Rate (GCR)**: (Total cooperators in last round) / (n-1)
- **Trend Indicator (TI)**: Average GCR over last 3 rounds vs. average GCR over previous 3 rounds

### 3. Main Decision Logic
```pseudocode
For round t (where t ≥ 4):
  recent_gcr = average cooperation rate of last 3 rounds
  trend = recent_gcr - previous_3_rounds_average_gcr
  
  if recent_gcr ≥ 0.6:
    action = COOPERATE
  else if recent_gcr ≥ 0.3 AND trend ≥ 0:
    action = COOPERATE  // Improving cooperation
  else if recent_gcr ≥ 0.3 AND trend < 0:
    action = probabilistic(0.7 * recent_gcr)  // Graduated response
  else:
    action = DEFECT  // Low cooperation environment
```

### 4. Forgiveness Mechanism
- Track consecutive defection rounds
- Every 5 rounds of defection, attempt one "forgiveness cooperation"
- If group responds positively (GCR increases), return to cooperative mode
- If no response, continue defecting for another 5 rounds

### 5. End-Game Handling
- **Last 3 rounds**: Apply discount factor based on remaining rounds
  - If current GCR ≥ 0.5, continue cooperating
  - If current GCR < 0.5, gradually reduce cooperation probability:
    - Round r-2: cooperate with probability = max(0.3, current_GCR)
    - Round r-1: cooperate with probability = max(0.2, current_GCR * 0.8)
    - Round r: cooperate with probability = max(0.1, current_GCR * 0.6)

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Information-Poor Early Rounds (2-3)
- Continue cooperating to build reputation and allow others to reveal preferences
- Collect baseline data on group behavior

### Highly Volatile Groups
- If cooperation rates fluctuate wildly (standard deviation > 0.3), use longer averaging windows (5 rounds instead of 3)
- Reduce sensitivity to single-round changes

### Near-Universal Defection
- If GCR falls below 0.1 for 3+ consecutive rounds, switch to primarily defecting
- Maintain periodic forgiveness attempts every 7 rounds

### Parameter Sensitivity
- **High k values (k > n/2)**: Increase cooperation thresholds by 20%
- **Low k values (k ≤ 1.5)**: Decrease cooperation thresholds by 15%
- **Large groups (n > 8)**: Use longer history windows for stability
- **Small groups (n ≤ 4)**: React more quickly to individual behavior changes

## Cooperative Alignment Features

1. **Default Cooperative**: Strategy defaults to cooperation when uncertain
2. **Forgiveness Built-In**: Regular attempts to restore cooperation even after conflicts
3. **Graduated Responses**: Avoids harsh punishments that could destabilize cooperation
4. **Trend-Sensitive**: Rewards improving behavior even if absolute levels are low
5. **End-Game Cooperation**: Maintains some cooperation even in final rounds when others might defect

## Robustness Features

1. **Adaptive Thresholds**: Adjusts expectations based on group composition
2. **Noise Tolerance**: Uses averaging to handle occasional misplays
3. **Exploitation Protection**: Won't be completely taken advantage of by always-defectors
4. **Recovery Mechanisms**: Can rebuild cooperation after periods of mutual defection

This strategy aims to foster cooperative outcomes while remaining resilient to various opponent strategies, from unconditional cooperators to sophisticated adaptive players to pure defectors.
'''

description_COOPERATIVE_75 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intentions with adaptive responses to observed behavior patterns. It aims to establish and maintain cooperation while protecting against exploitation through measured reciprocity.

## Strategy Components

### 1. Decision Rules

**Primary Rule: Weighted Reciprocity with Cooperation Bias**
- Track the **cooperation rate** of all other players over a sliding window of recent rounds
- Cooperate when the group's recent cooperation level justifies it, with a built-in cooperative bias

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.3, (k-1)/(n-1) - 0.1)
```
This ensures we're willing to cooperate even when it's slightly disadvantageous, promoting group welfare.

**Decision Logic:**
```
recent_cooperation_rate = (total_C_actions_by_others) / (total_actions_by_others) 
    over last min(5, current_round-1) rounds

IF recent_cooperation_rate >= cooperation_threshold:
    Action = COOPERATE
ELSE IF recent_cooperation_rate >= cooperation_threshold - 0.15:
    Action = COOPERATE with probability 0.7
ELSE:
    Action = DEFECT
```

### 2. Edge Case Handling

**First Round:**
- Always COOPERATE to signal cooperative intent and test the waters
- This establishes a foundation for potential mutual cooperation

**Early Rounds (rounds 2-3):**
- Maintain high cooperation bias (threshold reduced by 0.1)
- Give other players opportunity to establish cooperative patterns
- Only defect if others show strong defection patterns (< 20% cooperation rate)

**Final Round:**
- If cooperation rate has been consistently high (≥ 60%) throughout the game: COOPERATE
- This rewards groups that maintained cooperation and avoids unnecessary end-game defection
- Otherwise: DEFECT (standard game theory logic for final round)

**Second-to-Last Round:**
- Apply normal decision rules but with slightly increased cooperation bias
- Helps prevent premature breakdown of cooperation before the final round

### 3. Adaptive Mechanisms

**Learning Component:**
- Track individual player patterns when possible (if n is small enough, ≤ 8 players)
- Identify consistently cooperative players and weight their behavior more heavily
- Identify hostile players and discount their recent cooperation spikes

**Forgiveness Mechanism:**
- If cooperation rate drops below threshold but then shows improvement over 2+ rounds, gradually return to cooperation
- Prevents permanent defection due to temporary breakdowns

**Robustness Features:**
- Use sliding window average to avoid overreacting to single-round deviations
- Probabilistic cooperation in marginal cases prevents predictable exploitation
- Threshold scales with game parameters to remain economically rational

### 4. Pseudocode Summary

```
ARCS_Strategy(round, history, n, k, r):
    cooperation_threshold = max(0.3, (k-1)/(n-1) - 0.1)
    
    IF round == 1:
        RETURN COOPERATE
    
    // Calculate recent cooperation rate
    window_size = min(5, round-1)
    recent_others_cooperation = count_others_cooperation(history, window_size)
    recent_others_total = (n-1) * window_size
    recent_coop_rate = recent_others_cooperation / recent_others_total
    
    // Adjust threshold for early/late game
    adjusted_threshold = cooperation_threshold
    IF round <= 3:
        adjusted_threshold -= 0.1
    IF round == r AND recent_coop_rate >= 0.6:
        RETURN COOPERATE
    IF round == r:
        RETURN DEFECT
        
    // Main decision logic
    IF recent_coop_rate >= adjusted_threshold:
        RETURN COOPERATE
    ELSE IF recent_coop_rate >= adjusted_threshold - 0.15:
        RETURN COOPERATE with probability 0.7
    ELSE:
        RETURN DEFECT
```

## Strategic Rationale

This strategy is designed to:
1. **Establish cooperation** through initial cooperative moves
2. **Maintain cooperation** by reciprocating when others cooperate
3. **Protect against exploitation** by defecting when cooperation is too low
4. **Promote group welfare** through cooperative bias in marginal situations
5. **Adapt to different group compositions** through parameter-based thresholds
6. **Handle end-game dynamics** thoughtfully without completely abandoning cooperation

The strategy should perform well against other cooperative strategies while maintaining reasonable defense against exploitative ones.
'''

description_COOPERATIVE_76 = '''
# Adaptive Generous Tit-for-Tat (AGTT) Strategy

## Core Philosophy
This strategy balances cooperation with self-protection by being generous in forgiving defection while still maintaining incentives for others to cooperate. It adapts to the overall cooperation level in the group and becomes more forgiving when cooperation is struggling.

## Decision Rules

### Round 1: Always Cooperate
Start with cooperation to signal willingness to work together and establish a cooperative baseline.

### Rounds 2 to r-1: Adaptive Response
For each subsequent round, make decisions based on:

1. **Individual Tracking**: Monitor each player's cooperation rate
2. **Group Assessment**: Calculate overall group cooperation level
3. **Adaptive Forgiveness**: Adjust forgiveness based on group dynamics

**Decision Algorithm:**
```
For round t (where 2 ≤ t ≤ r-1):

1. Calculate group_cooperation_rate = (total cooperations in last round) / n

2. Calculate average_cooperation_rate = (total cooperations across all previous rounds) / (n × (t-1))

3. Calculate forgiveness_threshold = max(0.3, average_cooperation_rate - 0.2)

4. For each player j ≠ i:
   - If player j cooperated in the last round: mark as "friendly"
   - If player j defected but their overall cooperation rate > forgiveness_threshold: mark as "forgivable"
   - Otherwise: mark as "hostile"

5. Decision rule:
   - If group_cooperation_rate ≥ 0.5: COOPERATE
   - Else if (number of "hostile" players) ≤ n/3: COOPERATE
   - Else if average_cooperation_rate > 0.4: COOPERATE with 70% probability
   - Else: DEFECT
```

### Final Round (Round r): Conditional Cooperation
In the last round, since there's no future to influence:

```
If average_cooperation_rate across all previous rounds > 0.6:
    COOPERATE (reward good group behavior)
Else if my_cooperation_rate > 0.7 AND group treated me well:
    COOPERATE (maintain reputation)
Else:
    DEFECT (no future consequences)
```

## Key Adaptive Features

### 1. Generous Forgiveness
- Doesn't punish isolated defections if a player generally cooperates
- Forgiveness threshold adapts to group norms (if everyone defects often, standards lower)

### 2. Group-Level Assessment
- Considers overall group dynamics, not just individual actions
- Maintains cooperation when the group is generally cooperative
- Protects against being exploited by a majority of defectors

### 3. Probabilistic Elements
- Uses randomized cooperation in borderline cases to avoid predictability
- Prevents opponents from perfectly gaming the strategy

### 4. Momentum Preservation
- Once cooperation is established, works harder to maintain it
- Recognizes that losing cooperation momentum is costly to rebuild

## Edge Case Handling

### Early Rounds (2-3)
- More forgiving to allow cooperation patterns to establish
- Uses lower thresholds for cooperation decisions

### Mid-Game Adaptation
- If cooperation completely breaks down (average < 0.2), switch to mostly defensive play
- If high cooperation emerges (average > 0.8), become very generous to maintain it

### Information Limitations
- If unable to track individual players clearly, fall back to group-level metrics
- Use conservative cooperation thresholds when information is limited

## Robustness Features

### Against Always Defect
- Will eventually learn to defect against persistent defectors
- But maintains cooperation with any players showing cooperation

### Against Tit-for-Tat Variants
- Generous enough to break cycles of mutual punishment
- Responds positively to attempted cooperation

### Against Random Strategies
- Adapts forgiveness levels to account for noisy behavior
- Focuses on overall patterns rather than individual actions

### Against Exploitative Strategies
- Group-level protection prevents being the sole cooperator
- Final round defection option prevents end-game exploitation

## Mathematical Intuition

This strategy recognizes that:
1. **Social Optimum**: When k > 1, mutual cooperation beats mutual defection
2. **Free-Rider Problem**: Individual incentive to defect while others cooperate
3. **Coordination Challenge**: Need to establish and maintain cooperative equilibrium

The adaptive thresholds ensure the strategy can find and maintain cooperation in groups with varying cooperative tendencies while protecting against systematic exploitation.
'''

description_COOPERATIVE_77 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocity with Collective Momentum"

## Core Philosophy
This strategy balances cooperation with protection against exploitation by adapting to both individual player behaviors and overall group dynamics. It starts cooperative but becomes increasingly strategic based on observed patterns.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: Always play C
- **Rationale**: Establish cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Reciprocity with Collective Assessment

**Primary Decision Logic**:
```
If (collective_cooperation_rate >= cooperation_threshold):
    If (personal_reciprocity_score >= reciprocity_threshold):
        Play C
    Else:
        Apply graduated response based on exploitation level
Else:
    If (rounds_remaining <= forgiveness_window AND showing_improvement):
        Give second chance - Play C
    Else:
        Play D (protect against mass defection)
```

**Key Metrics Tracked**:

1. **Collective Cooperation Rate** = (Total C plays by all players) / (Total possible C plays)
   - Calculated over last min(3, current_round-1) rounds
   - Threshold starts at 0.4, decreases by 0.05 each round if consistently low

2. **Personal Reciprocity Score** = Weighted average of how others respond to my cooperation
   - Track: When I play C, what percentage of others play C in next round?
   - Weight recent rounds more heavily (exponential decay factor 0.7)

3. **Exploitation Level** = How often others defect when I cooperate
   - If high exploitation (>70%), implement graduated punishment

**Graduated Response System**:
- **Low exploitation** (<30%): Continue cooperating
- **Medium exploitation** (30-70%): Cooperate with probability = (70% - exploitation_rate) / 40%
- **High exploitation** (>70%): Defect for 1 round, then reassess

### Final Round (Round r): Strategic Finale
- If collective_cooperation_rate > 0.6 throughout game: Play C (reward good group)
- If I've been consistently exploited (personal reciprocity < 0.3): Play D
- Otherwise: Mirror the most common action from previous round

## Edge Case Handling

### Small Groups (n ≤ 3)
- Increase cooperation threshold by 0.2 (individual actions matter more)
- Reduce forgiveness window to 1 round (faster adaptation needed)

### High Multiplication Factor (k > n/2)
- Cooperation is more valuable; increase cooperation threshold by 0.1
- Be more forgiving: extend forgiveness window by 1 round

### Short Games (r ≤ 5)
- Cooperate more aggressively in early rounds
- Only defect if exploitation exceeds 80% (higher threshold)

### Very Long Games (r > 20)
- Implement "reputation reset" every 10 rounds if group behavior improves significantly
- Allow for strategy evolution: recalibrate thresholds at game midpoint

## Robustness Features

1. **Anti-Exploitation Protection**: Graduated punishment prevents sustained free-riding on my cooperation

2. **Collective Intelligence**: Strategy adapts to overall group dynamics, not just individual interactions

3. **Forgiveness Mechanism**: Allows for strategy changes and recovery from mutual defection spirals

4. **Momentum Building**: Rewards improving cooperation trends even if absolute levels are still low

5. **Endgame Consideration**: Prevents last-round defection cascades while maintaining strategic flexibility

## Parameter Initialization
- cooperation_threshold = 0.4 (adjusts dynamically)
- reciprocity_threshold = 0.3
- forgiveness_window = max(2, r/10)
- exploitation_tolerance = 0.7

This strategy promotes cooperation while protecting against various forms of exploitation, adapts to group dynamics, and remains robust across different game parameters and opponent strategies.
'''

description_COOPERATIVE_78 = '''
# Adaptive Cooperative Strategy: "Trust with Graduated Forgiveness"

## Core Philosophy
This strategy begins with trust and cooperation, but adapts based on the collective behavior of all players while maintaining a fundamentally cooperative orientation. It balances forgiveness with accountability to encourage widespread cooperation.

## Decision Rules

### 1. Opening Move
**Always cooperate in Round 1** - Start with trust to signal cooperative intent and give others the opportunity to reciprocate.

### 2. Main Decision Logic
The strategy uses a **cooperation threshold** based on the cooperation rate in previous rounds:

```
cooperation_rate = (total_cooperators_in_last_round) / n
cooperation_threshold = max(0.3, (k-1)/(n-1))
```

**Cooperate if:**
- `cooperation_rate >= cooperation_threshold`, OR
- The cooperation rate is improving (current rate > previous rate), OR
- We're in a "forgiveness window" after punishment

**Defect if:**
- `cooperation_rate < cooperation_threshold` AND the rate is declining AND not in forgiveness window

### 3. Forgiveness Mechanism
After defecting due to low cooperation:
- Enter a 2-round "forgiveness window"
- Cooperate for these 2 rounds to test if others will reciprocate
- If cooperation improves during forgiveness window, continue cooperating
- If cooperation remains low, resume conditional cooperation based on threshold

### 4. Endgame Handling
**Last 2 rounds special rule:**
- If overall cooperation rate across all previous rounds ≥ 60%, cooperate in final rounds
- Otherwise, apply standard threshold rules (no "last round defection")

### 5. Momentum Detection
Track cooperation trends:
```
if cooperation_rate_current > cooperation_rate_previous:
    cooperation_bias = +0.1  // Slight bias toward cooperation
else:
    cooperation_bias = 0
```

Apply this bias to the threshold comparison to reward improving cooperation.

## Edge Case Handling

### First Round
Always cooperate to establish trust.

### Second Round
Cooperate if at least 30% of players cooperated in Round 1, otherwise enter forgiveness mode.

### Final Rounds
Maintain cooperative stance if the group has shown reasonable cooperation (≥60% rate overall). This prevents endgame collapse while protecting against persistent defectors.

### All-Defection Scenarios
If cooperation rate drops to 0%, immediately enter forgiveness mode for 2 rounds to attempt recovery.

### High-Cooperation Scenarios
If cooperation rate exceeds 80%, always cooperate to maintain the cooperative equilibrium.

## Adaptive Elements

1. **Dynamic Threshold**: The cooperation threshold adjusts based on game parameters, ensuring the strategy works across different n and k values.

2. **Trend Sensitivity**: The strategy responds to improving cooperation rates, not just absolute levels.

3. **Graduated Response**: Uses forgiveness windows rather than immediate harsh punishment.

4. **Parameter Awareness**: The threshold calculation `max(0.3, (k-1)/(n-1))` ensures the strategy adapts to different multiplication factors and group sizes.

## Robustness Features

- **Works with any n ≥ 2**: Threshold scales appropriately
- **Handles various k values**: Higher k values lower the cooperation threshold
- **Resilient to mixed populations**: Can coexist with both cooperators and defectors
- **Prevents exploitation**: Won't cooperate indefinitely with persistent defectors
- **Encourages cooperation**: Forgiveness mechanisms allow recovery from bad equilibria
- **Endgame stable**: Doesn't abandon cooperation in final rounds if group has been cooperative

This strategy aims to foster cooperation while protecting against exploitation, adapting its expectations based on observed group behavior while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_79 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive responses to maintain cooperation while protecting against exploitation. It starts optimistically but learns from experience to sustain long-term cooperation.

## Decision Rules

### 1. First Round Behavior
**Always cooperate** in round 1 to signal cooperative intent and give others the opportunity to establish mutual cooperation.

### 2. Cooperation Threshold System
Maintain a **dynamic cooperation threshold** that determines when to cooperate based on observed group behavior:

- **Initial threshold**: 50% (cooperate if at least half the group cooperated last round)
- **Threshold adjustment**: After each round, adjust based on recent cooperation levels
- **Minimum threshold**: Never drop below 30% to maintain cooperative orientation
- **Maximum threshold**: Never exceed 80% to remain responsive to cooperative signals

### 3. Multi-Round Assessment
Use a **sliding window** of the last min(3, current_round-1) rounds to assess group cooperation:

```pseudocode
cooperation_rate = (total_cooperators_in_window) / (n × window_size)
```

### 4. Adaptive Threshold Adjustment
After each round:
```pseudocode
if cooperation_rate > current_threshold:
    new_threshold = current_threshold × 0.9  // Become more trusting
else:
    new_threshold = current_threshold × 1.1  // Become more cautious
    
threshold = clamp(new_threshold, 0.3, 0.8)
```

### 5. Decision Rule
For round t > 1:
```pseudocode
if cooperation_rate >= threshold:
    play C
else:
    play D
```

## Edge Case Handling

### Last Round Behavior
In the final round, use a **modified threshold** that's 20% lower than the current threshold to account for potential end-game defection, but still maintain cooperative potential:
```pseudocode
final_threshold = max(0.25, current_threshold × 0.8)
```

### Early Game (Rounds 2-3)
Use a **grace period** where the threshold cannot exceed 60% to encourage early cooperation establishment and account for potential initial coordination difficulties.

### Universal Defection Recovery
If cooperation rate drops to 0% for two consecutive rounds:
- **Forgiveness mechanism**: Reset threshold to 40% and cooperate once as a "peace offering"
- This prevents permanent defection spirals and allows for cooperation recovery

## Parameter Sensitivity

### High Multiplication Factor (k close to n)
When k/n > 0.8, reduce all thresholds by 10% since cooperation is more valuable, making it worth taking more risks.

### Low Multiplication Factor (k close to 1)
When k/n < 0.4, increase all thresholds by 15% since cooperation benefits are smaller, requiring more evidence of reciprocation.

### Large Groups (n > 8)
Increase window size to min(4, current_round-1) to get better statistical assessment of group behavior in larger populations.

## Robustness Features

1. **Graduated Response**: Threshold adjustments are gradual (10% changes) to avoid overreacting to noise
2. **Bounded Adaptation**: Minimum and maximum thresholds prevent extreme behaviors
3. **Memory with Decay**: Recent rounds matter more than distant history
4. **Forgiveness Mechanism**: Explicit recovery from universal defection
5. **Parameter Awareness**: Adjusts behavior based on game economics

## Strategy Summary
This "Graduated Reciprocator" strategy:
- **Starts cooperatively** to signal good intentions
- **Adapts based on experience** while maintaining cooperative orientation  
- **Uses statistical assessment** rather than reacting to single rounds
- **Handles edge cases gracefully** including endgame and recovery scenarios
- **Remains robust** across different game parameters and opponent strategies

The strategy aims to find and maintain cooperative equilibria while protecting against systematic exploitation, making it suitable for tournaments with diverse opponent strategies.
'''

description_COOPERATIVE_80 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed group behavior and momentum.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and gather initial information about the group's disposition.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Momentum

**Step 1: Calculate Cooperation Momentum**
- Track the cooperation rate in the last round: `last_coop_rate = cooperators_last_round / n`
- Calculate trend over the last 2-3 rounds (or all available rounds if fewer exist)
- Define momentum as: `momentum = current_coop_rate - previous_coop_rate`

**Step 2: Apply Decision Logic**
```
IF last_coop_rate >= 0.6:
    Cooperate (High cooperation environment - maintain momentum)
    
ELSE IF last_coop_rate >= 0.4 AND momentum >= 0:
    Cooperate (Medium cooperation with positive trend - encourage growth)
    
ELSE IF last_coop_rate >= 0.3 AND I_cooperated_last_round AND my_recent_payoff >= group_average_payoff:
    Cooperate (Give one more chance if I'm not being severely punished)
    
ELSE IF last_coop_rate >= 0.2:
    Cooperate with probability = last_coop_rate + 0.2 (Probabilistic cooperation to probe recovery)
    
ELSE:
    Defect (Very low cooperation - protect against exploitation)
```

**Step 3: Forgiveness Mechanism**
Every 3-4 rounds, regardless of recent history, cooperate once to test if the group dynamic has improved. This prevents permanent defection spirals.

### Final Round: Strategic Cooperation
In the final round, apply a modified rule:
- If `last_coop_rate >= 0.5`: Cooperate (maintain group welfare when cooperation is strong)
- If `last_coop_rate >= 0.3` AND my total payoff is above median: Cooperate (generous finish when doing well)
- Otherwise: Defect (no future to build on)

## Key Adaptive Features

### 1. Threshold Responsiveness
The strategy uses multiple cooperation thresholds (0.6, 0.4, 0.3, 0.2) to create nuanced responses rather than binary decisions.

### 2. Momentum Tracking
By considering trends rather than just current states, the strategy can:
- Ride positive waves of cooperation
- Detect early signs of defection cascades
- Respond to recovery attempts

### 3. Conditional Generosity
The strategy is more forgiving when:
- Personal payoffs remain competitive
- The group shows any signs of cooperative potential
- Enough rounds remain to benefit from rebuilt cooperation

### 4. Exploitation Protection
Multiple safeguards prevent being systematically exploited:
- Defects when cooperation falls below 20%
- Considers personal payoff performance
- Limits consecutive cooperation in low-cooperation environments

### 5. Recovery Probing
The periodic forgiveness mechanism ensures the strategy can adapt to changing group dynamics and doesn't get permanently stuck in defection cycles.

## Robustness Across Parameters

- **Small n (2-4)**: Higher sensitivity to individual actions, strategy responds quickly to changes
- **Large n (8+)**: More stable cooperation thresholds, less volatile responses
- **Low k**: More conservative cooperation thresholds due to lower public good returns
- **High k**: More aggressive cooperation due to higher collective returns
- **Short r**: More front-loaded cooperation to establish beneficial norms quickly
- **Long r**: More patient with temporary defection phases

## Expected Tournament Performance

This strategy should perform well against:
- **Pure cooperators**: Maintains cooperation and shares high collective payoffs
- **Tit-for-tat variants**: Responds appropriately to reciprocal strategies
- **Conditional cooperators**: Adapts to their thresholds and maintains cooperation
- **Mixed strategies**: Adjusts cooperation level to match group dynamics
- **Exploitative strategies**: Protects itself while maintaining some cooperative probing

The strategy avoids the extremes of naive cooperation (easily exploited) and defensive defection (misses cooperative opportunities), instead finding an adaptive middle path that maximizes long-term collective welfare while maintaining competitive individual returns.
'''

description_COOPERATIVE_81 = '''
# Adaptive Tit-for-Tat with Forgiveness Strategy

## Core Philosophy
This strategy aims to foster cooperation while being resilient to exploitation. It balances being "nice" (starting cooperatively), "retaliatory" (punishing defection), and "forgiving" (allowing recovery from conflict spirals).

## Strategy Description

### 1. Decision Rules

**Initial Cooperation Phase (Rounds 1-2):**
- Always cooperate in round 1 to signal cooperative intent
- Cooperate in round 2 regardless of round 1 outcomes to give others a chance to reciprocate

**Main Decision Logic (Rounds 3 to r-1):**
```
For each round t (where 3 ≤ t ≤ r-1):
  
  1. Calculate cooperation_rate = (total_cooperators_last_round / n)
  
  2. If cooperation_rate ≥ 0.5:
     - COOPERATE (majority cooperation deserves reciprocation)
  
  3. Else if cooperation_rate < 0.5:
     - Check forgiveness condition:
       - If (t mod 4 == 0): COOPERATE (periodic forgiveness every 4 rounds)
       - Else: DEFECT (punish low cooperation)
```

**Final Round Handling:**
- In the last round (round r), use the same logic as main phase
- Do NOT automatically defect just because it's the final round
- This maintains reputation and signals long-term cooperative intent

### 2. Edge Case Handling

**First Round:** Always cooperate to establish cooperative reputation

**Second Round:** Always cooperate to give others chance to respond positively

**All-Defection Scenarios:** If cooperation rate = 0 in previous round:
- Still apply forgiveness mechanism (cooperate every 4th round)
- This prevents permanent defection spirals

**High Cooperation Scenarios:** If cooperation rate ≥ 0.8:
- Always cooperate to maintain the cooperative equilibrium

**Mixed Scenarios:** Apply standard threshold-based decision making

### 3. Cooperative Alignment Features

**Generous Threshold:** Uses 50% cooperation rate as threshold rather than requiring unanimity

**Periodic Forgiveness:** Every 4th round, cooperate regardless of others' behavior to:
- Break potential defection cycles
- Signal willingness to return to cooperation
- Test if others are ready to cooperate again

**No End-Game Defection:** Maintains cooperative behavior even in final rounds

**Responsive Reciprocation:** Immediately rewards high cooperation rates

## Pseudocode Implementation

```
function decide_action(round_number, history, n, k, r):
    if round_number <= 2:
        return COOPERATE
    
    last_round_cooperators = count_cooperators_in_round(history, round_number - 1)
    cooperation_rate = last_round_cooperators / n
    
    if cooperation_rate >= 0.5:
        return COOPERATE
    
    if round_number % 4 == 0:  // Forgiveness mechanism
        return COOPERATE
    
    return DEFECT
```

## Strategic Rationale

1. **Robustness:** Works against various opponent types (always-cooperate, always-defect, tit-for-tat variants, random)

2. **Exploitation Resistance:** Punishes consistent defection while remaining open to cooperation

3. **Cooperation Promotion:** Rewards and reinforces cooperative behavior when it emerges

4. **Conflict Resolution:** Forgiveness mechanism prevents permanent deadlocks

5. **Parameter Independence:** Strategy logic works regardless of specific values of n, k, or r

This strategy should perform well in tournaments by finding cooperative partners when possible while protecting against exploitation, ultimately maximizing both individual and collective welfare.
'''

description_COOPERATIVE_82 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy prioritizes cooperation while maintaining resilience against exploitation. It balances trust-building with self-protection through graduated responses and adaptive thresholds.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round
- Rationale: Signal cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Reciprocation

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_last_round) / n
```

**Step 2: Dynamic Threshold Calculation**
```
base_threshold = k / n  // Break-even cooperation rate
adjustment_factor = 0.1 * (current_round / total_rounds)
cooperation_threshold = base_threshold - adjustment_factor
```

**Step 3: Decision Logic**
```
IF cooperation_rate >= cooperation_threshold:
    COOPERATE
ELSE:
    // Graduated response based on severity of defection
    defection_severity = (base_threshold - cooperation_rate) / base_threshold
    
    IF defection_severity < 0.3:
        COOPERATE (give benefit of doubt)
    ELIF defection_severity < 0.7:
        IF (last_round_i_cooperated AND cooperation_rate > 0.2):
            COOPERATE (forgive partial defection)
        ELSE:
            DEFECT
    ELSE:
        DEFECT (strong defection response)
```

### Round r (Final Round): Conditional Cooperation
```
IF (my_average_cooperation_rate > 0.6 AND others_average_cooperation_rate > k/n):
    COOPERATE  // Maintain reputation for future games
ELSE:
    DEFECT     // Standard end-game defection
```

## Key Adaptive Features

### 1. Dynamic Threshold Adjustment
- Threshold becomes more lenient as game progresses
- Accounts for learning and relationship building over time
- Prevents premature abandonment of cooperation

### 2. Graduated Response System
- **Mild defection** (cooperation_rate slightly below threshold): Forgive
- **Moderate defection** (cooperation_rate moderately low): Conditional response
- **Severe defection** (cooperation_rate very low): Punish

### 3. Memory-Based Forgiveness
```
IF (cooperation improved in last 2 rounds AND my recent cooperation > 70%):
    Reduce punishment intensity by 50%
```

### 4. Self-Monitoring
Track personal cooperation rate to ensure we're not being overly punitive:
```
IF (my_cooperation_rate < 0.4 AND others_average > k/n):
    Increase cooperation probability by 20% next round
```

## Robustness Features

### Against Always Defect
- Quickly identifies consistent defection
- Transitions to defection while maintaining occasional cooperation probes

### Against Tit-for-Tat
- Avoids punishment spirals through graduated responses
- Offers forgiveness after mutual cooperation

### Against Random Strategies
- Uses statistical thresholds rather than expecting perfect cooperation
- Adapts to noisy but generally cooperative behavior

### Against Exploitative Strategies
- Protects against sophisticated exploitation through dynamic thresholds
- Maintains self-interest when cooperation is clearly disadvantageous

## Edge Case Handling

### Tie-Breaking
```
IF cooperation_rate exactly equals threshold:
    IF (trend in last 3 rounds is improving):
        COOPERATE
    ELSE:
        Use previous round's decision
```

### Early Game Instability
- Ignore first round when calculating trends (insufficient data)
- Use more lenient thresholds in rounds 2-3

### Parameter Sensitivity
- For very low k values (k < 1.5): Increase base threshold by 10%
- For small n (n < 4): Reduce punishment severity by 25%

## Summary
This strategy starts cooperatively, adapts to the group's behavior through dynamic thresholds, responds proportionally to defection levels, and maintains the possibility of cooperation recovery. It balances cooperative intentions with rational self-interest, making it robust across diverse opponent strategies while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_83 = '''
# Adaptive Cooperative Strategy: "Progressive Trust Builder"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, starting with trust but becoming more discerning based on the group's collective behavior. It aims to foster cooperation while protecting against exploitation.

## Strategy Components

### 1. Decision Rules

**Initial Cooperation Phase (Rounds 1-3 or first 20% of game, whichever is larger):**
- Always cooperate (C) to signal cooperative intent and establish trust
- This creates opportunity for mutual cooperation to emerge

**Adaptive Phase (Middle rounds):**
- **Cooperation Threshold**: Calculate minimum viable cooperation rate needed for mutual benefit
  - Threshold = n/k (the point where contributing becomes individually rational if others also contribute)
  - For example, with n=6, k=2: threshold = 6/2 = 3 cooperators needed

- **Decision Rule**: Cooperate if recent cooperation rate ≥ threshold, otherwise defect
- **Recent History Window**: Use sliding window of last 3 rounds (or 30% of remaining rounds, whichever is smaller)

**Forgiveness Mechanism:**
- If cooperation rate drops below threshold, try cooperating again after 2 consecutive defection rounds
- This prevents permanent breakdown from temporary coordination failures

**Final Phase (Last 10% of rounds):**
- Continue adaptive approach but with higher threshold (threshold × 1.2) to account for end-game effects
- Maintain some cooperation even if slightly unprofitable to avoid triggering mass defection

### 2. Edge Cases

**First Round:**
- Always cooperate to signal cooperative intent

**When cooperation rate exactly equals threshold:**
- Cooperate (err on side of maintaining cooperation)

**All opponents defect scenario:**
- After 3 consecutive rounds of zero cooperation from others, switch to defection
- Attempt cooperation again every 4th round to test if cooperation can be reestablished

**High cooperation scenario:**
- If cooperation rate consistently exceeds threshold + 1, continue cooperating
- Resist temptation to free-ride when cooperation is strong

**Last Round:**
- If cooperation has been sustained (rate ≥ threshold in recent history), cooperate
- Only defect in final round if cooperation rate was already very low

### 3. Cooperative Alignment

**Mutual Benefit Focus:**
- Strategy explicitly calculates when cooperation benefits everyone
- Prioritizes group welfare while maintaining individual rationality

**Trust Building:**
- Initial unconditional cooperation establishes good faith
- Forgiveness mechanism prevents permanent retaliation cycles

**Adaptive Fairness:**
- Responds to group behavior rather than individual actions
- Doesn't punish individual defectors if overall cooperation remains viable

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    cooperation_threshold = n/k
    
    if round <= max(3, 0.2*r):  // Initial cooperation phase
        return COOPERATE
    
    if round > 0.9*r:  // Final phase
        cooperation_threshold *= 1.2
    
    recent_window = min(3, ceil(0.3*(r-round+1)))
    recent_cooperation_rate = calculate_cooperation_rate(history, recent_window)
    
    if recent_cooperation_rate >= cooperation_threshold:
        return COOPERATE
    
    // Forgiveness check
    if consecutive_defection_rounds >= 2 and should_test_cooperation():
        return COOPERATE
    
    return DEFECT
```

## Strategic Rationale

This strategy is **cooperative** because it:
- Starts with trust and signals cooperative intent
- Actively tries to maintain cooperation when it's mutually beneficial
- Includes forgiveness to prevent cooperation breakdowns
- Only defects when cooperation becomes clearly unsustainable

It's **adaptive** because it:
- Responds to actual opponent behavior rather than fixed assumptions
- Adjusts to different group sizes and game parameters
- Handles various scenarios from full cooperation to mass defection

It's **robust** because it:
- Works across different parameter values (n, k, r)
- Doesn't rely on specific opponent strategies or coordination
- Balances cooperation with rational self-interest
- Includes mechanisms to restart cooperation after breakdowns

This approach should perform well against various opponent types while maintaining a fundamentally cooperative orientation that can help establish and sustain mutually beneficial outcomes.
'''

description_COOPERATIVE_84 = '''
# Adaptive Cooperative Strategy: "Trust-Building Reciprocator"

## Core Philosophy
This strategy aims to establish and maintain cooperative relationships while protecting against exploitation. It balances trust-building with defensive mechanisms, adapting to the cooperative potential of each opponent individually.

## Decision Rules

### Round 1: Optimistic Opening
- **Action: Always COOPERATE**
- **Rationale: Signal cooperative intent and give others the benefit of the doubt**

### Rounds 2 to r-1: Adaptive Reciprocation

For each round t (where 2 ≤ t ≤ r-1), maintain a "cooperation score" for each opponent j:

```
cooperation_score[j] = (number of times j cooperated) / (total rounds played so far)
```

**Decision Process:**
1. Calculate the **group cooperation level**: 
   ```
   group_coop = (total cooperations by all others in previous round) / (n-1)
   ```

2. **Cooperate if ANY of these conditions hold:**
   - Group cooperation level ≥ 0.5 (majority cooperated last round)
   - At least 2 players have cooperation_score[j] ≥ 0.7 (reliable cooperators exist)
   - Previous round had universal cooperation (everyone cooperated)

3. **Additional cooperation trigger** (forgiveness mechanism):
   - If I defected in the previous round but group cooperation was ≥ 0.3, then cooperate (give second chances)

4. **Defect otherwise** but with a **minimum cooperation frequency**:
   - If my overall cooperation rate falls below 0.4, force cooperate this round

### Round r (Final Round): Conditional Cooperation
Given the temptation to defect in the final round, use a more stringent but still cooperative approach:

**Cooperate if:**
- Group cooperation level in round (r-1) was ≥ 0.6, AND
- At least 3 players (or n/2 if n<6) have cooperation_score ≥ 0.6

**Otherwise: Defect**

## Edge Case Handling

### Small Groups (n ≤ 4):
- Lower thresholds: cooperate if group cooperation ≥ 0.4
- Reduce required number of reliable cooperators to 1

### High Multiplication Factor (k > 0.8n):
- Be more forgiving: cooperate if group cooperation ≥ 0.3
- Cooperation becomes very valuable, so take more risks

### Low Multiplication Factor (k < 0.4n):
- Be more conservative: require group cooperation ≥ 0.6
- Individual contributions have less impact

### Short Games (r ≤ 5):
- Start more aggressively cooperative in rounds 1-2
- Skip the forgiveness mechanism (less time to recover from exploitation)

## Key Features

### 1. Individual Tracking
- Maintains separate cooperation scores for each player
- Identifies and rewards consistent cooperators
- Prevents being fooled by occasional cooperative gestures from mostly selfish players

### 2. Group-Level Adaptation
- Responds to overall group dynamics
- Adjusts behavior based on collective cooperation trends
- Maintains cooperation when the group shows promise

### 3. Forgiveness and Trust-Building
- Gives second chances after defection
- Doesn't permanently punish single defections
- Maintains minimum cooperation rate to signal continued willingness

### 4. Exploitation Protection
- Won't cooperate with consistently uncooperative groups
- Reduces cooperation requirements in final rounds
- Adapts to game parameters that affect cooperation incentives

### 5. Robustness
- Works across different group sizes and game parameters
- Handles both cooperative and adversarial environments
- Balances between being too trusting and too defensive

## Strategic Rationale

This strategy recognizes that in public goods games, mutual cooperation is the globally optimal outcome, but requires building and maintaining trust. It starts optimistically but quickly adapts to the reality of the group composition. By tracking individual behaviors and group trends, it can maintain cooperative relationships with willing partners while protecting against systematic exploitation.

The strategy is designed to:
- Encourage cooperation through reciprocation
- Build long-term cooperative relationships
- Adapt to various opponent strategies
- Maintain a cooperative stance even when facing some defectors
- Protect against complete exploitation while remaining open to cooperation
'''

description_COOPERATIVE_85 = '''
I'll design a cooperative strategy called **"Graduated Reciprocal Cooperation" (GRC)** that balances cooperation with adaptive responses to opponent behavior.

## Strategy Overview

The core principle is to start cooperatively and maintain cooperation as long as the group demonstrates sufficient reciprocal cooperation, while having mechanisms to recover cooperation after periods of defection.

## Decision Rules

### Phase 1: Initial Cooperation (Rounds 1-3)
- **Always cooperate** for the first 3 rounds (or first r/3 rounds if r < 9)
- This establishes cooperative intent and allows observation of opponent tendencies
- Exception: If r ≤ 4, cooperate for the first round only

### Phase 2: Adaptive Cooperation (Middle rounds)
Use a **cooperation threshold system** based on observed group behavior:

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.4, (k-1)/(n-1) * 0.8)
```

This threshold represents the minimum fraction of others that must cooperate for continued cooperation to be worthwhile.

**Decision Rule:**
- Calculate recent cooperation rate: `recent_coop_rate = (cooperators in last min(3, current_round-1) rounds) / (n-1) / min(3, current_round-1)`
- If `recent_coop_rate ≥ cooperation_threshold`: **Cooperate**
- If `recent_coop_rate < cooperation_threshold`: **Defect**

### Phase 3: Forgiveness and Recovery
To prevent permanent defection spirals:

- **Forgiveness trigger**: Every 4th consecutive defection round, cooperate once to test if others are willing to resume cooperation
- **Recovery detection**: If cooperation rate jumps above threshold after forgiveness, resume full cooperation

### Phase 4: Endgame Strategy (Last 20% of rounds)
- If current cooperation has been successful (group cooperation rate > 60% in recent rounds): **Continue cooperating**
- If cooperation has broken down (group cooperation rate < 30% in recent rounds): **Defect** in final rounds
- **Exception**: Always cooperate in the very last round as a final cooperative gesture

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent

### Very Short Games (r ≤ 4)
- Cooperate in round 1
- Use simplified threshold: cooperate if ≥50% of others cooperated in previous round
- Always cooperate in final round

### Last Round
- Cooperate regardless of recent history (final cooperative gesture)

### All Others Defecting
- After 3 consecutive rounds of universal defection by others, switch to defection
- Still attempt forgiveness every 4th round until final 2 rounds

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:  // Last round
        return COOPERATE
    
    others_recent_cooperation = calculate_recent_cooperation_rate(history, min(3, round-1))
    threshold = max(0.4, (k-1)/(n-1) * 0.8)
    
    if round <= max(3, r/3):  // Initial cooperation phase
        return COOPERATE
    
    if round > r * 0.8:  // Endgame
        if group_cooperation_rate(history) > 0.6:
            return COOPERATE
        elif group_cooperation_rate(history) < 0.3 and round < r:
            return DEFECT
        else:
            return COOPERATE
    
    // Main adaptive phase
    if others_recent_cooperation >= threshold:
        return COOPERATE
    else:
        if consecutive_defections(my_history) % 4 == 3:  // Forgiveness
            return COOPERATE
        else:
            return DEFECT
```

## Strategic Rationale

1. **Initial Cooperation**: Establishes cooperative norms and reveals information about opponents
2. **Adaptive Threshold**: Adjusts cooperation based on game parameters - higher k values make cooperation more attractive
3. **Forgiveness Mechanism**: Prevents permanent breakdown and allows recovery from mutual defection
4. **Endgame Cooperation**: Maintains cooperative reputation even when strategic defection might be tempting

This strategy is robust because it:
- Doesn't rely on specific opponent strategies or coordination
- Adapts to varying levels of group cooperation
- Maintains cooperative orientation while protecting against exploitation
- Uses game parameters (k, n) to calibrate appropriate cooperation levels
'''

description_COOPERATIVE_86 = '''
# Adaptive Reciprocal Cooperation Strategy

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated reciprocity and adaptive cooperation thresholds.

## Decision Rules

### 1. First Round
**Always Cooperate (C)** in round 1 to signal cooperative intent and establish a baseline for reciprocity.

### 2. Subsequent Rounds (t > 1)
The strategy uses a **dynamic cooperation threshold** based on recent reciprocity levels:

```
cooperation_threshold = max(0.3, recent_cooperation_rate - tolerance_buffer)
tolerance_buffer = 0.1 + (0.2 * rounds_remaining / total_rounds)
```

**Decision Rule:**
- **Cooperate (C)** if: `recent_cooperation_rate >= cooperation_threshold`
- **Defect (D)** otherwise

### 3. Cooperation Rate Calculation
Track cooperation rates using a weighted moving average that emphasizes recent behavior:

```
recent_cooperation_rate = (2 * last_round_rate + previous_round_rate) / 3
where last_round_rate = (cooperators_last_round) / (n - 1)
```

### 4. Adaptive Forgiveness Mechanism
The tolerance buffer increases as the game progresses, allowing for more forgiveness in later rounds to encourage end-game cooperation and account for rational defection as the game concludes.

## Edge Case Handling

### First Round
- Always cooperate to establish cooperative baseline
- Initialize cooperation tracking variables

### Last Round
- Maintain same decision logic (no special end-game defection)
- The adaptive tolerance naturally accounts for end-game dynamics

### Early Rounds (rounds 2-3)
- Use simple majority rule: cooperate if ≥50% of others cooperated last round
- This prevents overreaction to initial exploration by opponents

### Very Low Cooperation Environment
- Minimum cooperation threshold of 0.3 ensures some attempt at cooperation even in hostile environments
- This prevents permanent defection spirals while protecting against exploitation

## Robustness Features

### 1. Exploitation Protection
- The 0.3 minimum threshold prevents exploitation by always-defect strategies
- Graduated response rather than immediate punishment reduces noise sensitivity

### 2. Cooperation Recovery
- Increasing tolerance buffer allows recovery from mutual punishment cycles
- Weighted recent history prevents overcommitment to outdated behavior patterns

### 3. Parameter Independence
- Strategy works across different values of n, k, and r
- Thresholds scale automatically with group size and game length

### 4. Noise Tolerance
- Moving average smooths out single-round anomalies
- Tolerance buffer prevents hair-trigger responses to minor cooperation decreases

## Pseudocode Summary

```python
def decide_action(round_num, history, n, r, k):
    if round_num == 1:
        return COOPERATE
    
    if round_num <= 3:
        # Early rounds: simple majority rule
        last_round_cooperators = count_cooperators(history[-1])
        return COOPERATE if last_round_cooperators >= (n-1)/2 else DEFECT
    
    # Calculate recent cooperation rate
    last_round_rate = count_cooperators(history[-1]) / (n-1)
    prev_round_rate = count_cooperators(history[-2]) / (n-1)
    recent_rate = (2 * last_round_rate + prev_round_rate) / 3
    
    # Calculate adaptive threshold
    rounds_remaining = r - round_num + 1
    tolerance_buffer = 0.1 + (0.2 * rounds_remaining / r)
    threshold = max(0.3, recent_rate - tolerance_buffer)
    
    return COOPERATE if recent_rate >= threshold else DEFECT
```

This strategy balances cooperative intent with self-protection, adapts to various opponent behaviors, and maintains robustness across different game parameters while encouraging collective welfare maximization.
'''

description_COOPERATIVE_87 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperation with strategic adaptation, starting optimistically but responding dynamically to the collective behavior of other players. It aims to foster cooperation while protecting against exploitation.

## Decision Rules

### Initial Cooperation Phase
- **Rounds 1-2**: Always cooperate (C)
- **Rationale**: Signal cooperative intent and give others a chance to establish mutual cooperation

### Adaptive Response Phase (Rounds 3 to r-1)

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_in_last_round) / (n-1)
```

**Step 2: Apply Decision Logic**
- If `cooperation_rate ≥ 0.6`: Cooperate (C)
- If `0.3 ≤ cooperation_rate < 0.6`: 
  - Cooperate with probability = `cooperation_rate`
  - Use deterministic alternating pattern based on round number if randomization unavailable
- If `cooperation_rate < 0.3`: Defect (D)

**Step 3: Forgiveness Mechanism**
- Track consecutive rounds where `cooperation_rate < 0.3`
- Every 3rd consecutive low-cooperation round: Cooperate once to test if others will reciprocate
- If cooperation increases after forgiveness attempt, return to normal adaptive logic

### Final Round Handling
- **Round r**: Mirror the cooperation rate from round r-1
  - If previous round had ≥60% cooperation: Cooperate
  - If previous round had <60% cooperation: Defect

## Key Features

### 1. Gradual Adaptation
The strategy doesn't overreact to single rounds of low cooperation but responds to sustained patterns, making it robust against occasional defections while still adaptive to genuine shifts in group behavior.

### 2. Proportional Response
The mixed strategy in medium cooperation scenarios (30-60%) creates a proportional response that can help stabilize cooperation levels around the threshold.

### 3. Forgiveness and Recovery
The periodic cooperation attempts during low-cooperation phases allow the strategy to help restart cooperation cycles, essential for the repeated game structure.

### 4. Parameter Independence
The strategy works with any valid game parameters (n≥2, k between 1 and n) and doesn't require specific knowledge of opponent strategies or coordination mechanisms.

## Pseudocode Summary

```
function decide_action(round, n, history):
    if round <= 2:
        return COOPERATE
    
    if round == final_round:
        return mirror_previous_round(history)
    
    cooperation_rate = count_cooperators_last_round(history) / (n-1)
    consecutive_low = count_consecutive_low_cooperation(history)
    
    if cooperation_rate >= 0.6:
        return COOPERATE
    elif cooperation_rate >= 0.3:
        return mixed_strategy(cooperation_rate)
    else:
        if consecutive_low % 3 == 0 and consecutive_low > 0:
            return COOPERATE  // forgiveness attempt
        else:
            return DEFECT
```

This strategy is designed to be genuinely cooperative while being resilient to various opponent behaviors, from always-defect to tit-for-tat to random strategies. It should perform well in diverse tournament environments by maintaining cooperation when possible while avoiding exploitation.
'''

description_COOPERATIVE_88 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intentions with adaptive responses to observed behavior, using a graduated approach that rewards cooperation and gently punishes defection while maintaining a cooperative stance.

## Strategy Components

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Early Rounds (rounds 2-3)**: Continue cooperating unless facing overwhelming defection (≤20% cooperation rate from others)

### 2. Adaptive Cooperation Threshold
The strategy uses a dynamic cooperation threshold based on:
- **Base Cooperation Rate**: Target maintaining group cooperation above `k/n` (the break-even point)
- **Historical Performance**: Weight recent rounds more heavily than distant ones
- **Forgiveness Factor**: Gradually increase willingness to cooperate over time

### 3. Decision Rules

#### Primary Decision Logic:
```
For round t (where t > 1):

1. Calculate recent_cooperation_rate = 
   (cooperators in last 3 rounds) / (3 * (n-1))
   
2. Calculate forgiveness_bonus = 
   min(0.2, (t / r) * 0.15)
   
3. Calculate cooperation_threshold = 
   max(0.3, (k/n) - 0.1 + forgiveness_bonus)
   
4. If recent_cooperation_rate >= cooperation_threshold:
   → Cooperate (C)
   
5. Else if recent_cooperation_rate >= 0.2:
   → Cooperate with probability = recent_cooperation_rate + 0.1
   
6. Else:
   → Defect (D)
```

#### Special Conditions:

**Generous Response**: If in the previous round cooperation rate exceeded 70%, always cooperate in current round.

**Recovery Mechanism**: If cooperation rate falls below 20% for 2 consecutive rounds, attempt to restart cooperation by playing C for the next round regardless of threshold.

### 4. End-Game Handling

**Final Rounds Strategy** (last 10% of rounds):
- If group has maintained >50% cooperation rate: Continue cooperating
- If group cooperation 30-50%: Cooperate with 70% probability
- If group cooperation <30%: Match the average cooperation rate of others

**Ultimate Final Round**: 
- Cooperate if others' cooperation rate in previous round was ≥40%
- Otherwise defect

### 5. Edge Cases

**All-Defection Scenario**: If facing sustained all-defection (3+ rounds), play "probe and forgive":
- Cooperate every 4th round to test for willingness to reciprocate
- If any player responds with cooperation, return to normal adaptive rules

**High-Cooperation Scenario**: If group maintains >80% cooperation for 5+ rounds:
- Always cooperate to maintain the beneficial equilibrium
- Only reassess if cooperation drops below 60%

## Strategy Rationale

1. **Cooperative Foundation**: Starts cooperative and maintains cooperative bias
2. **Adaptive Response**: Adjusts to others' behavior without being exploitable
3. **Graduated Punishment**: Reduces cooperation gradually rather than harsh retaliation
4. **Forgiveness**: Increases willingness to cooperate over time
5. **Efficiency-Focused**: Targets cooperation levels that maximize group welfare
6. **Robust to Noise**: Uses multi-round averages and probabilistic responses

## Key Parameters Summary
- Initial cooperation: Always in round 1
- Cooperation threshold: Dynamic, starts around `k/n - 0.1`, increases with forgiveness
- Memory: Primarily last 3 rounds, with some longer-term tracking
- Forgiveness rate: Increases by up to 15% over the course of the game
- End-game adjustment: More conservative in final 10% of rounds

This strategy aims to foster cooperation while protecting against exploitation, adapting to the specific dynamics that emerge in each game instance.
'''

description_COOPERATIVE_89 = '''
# Adaptive Cooperative Strategy: "Gradual Trust Builder"

## Core Philosophy
This strategy balances cooperation with self-protection by gradually building trust while maintaining the ability to respond to defection. It assumes that long-term mutual cooperation benefits everyone, but acknowledges that some players may exploit pure cooperation.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-2)
- **Round 1**: Always COOPERATE (signal willingness to cooperate)
- **Round 2**: Always COOPERATE (confirm cooperative intent)

### Main Strategy (Rounds 3 to r-1)
Use a **Dynamic Threshold System** based on recent cooperation levels:

```pseudocode
cooperation_threshold = max(0.3, k/n)  // Never go below 30% cooperation expectation
recent_window = min(3, current_round - 1)  // Look at last 3 rounds or all available

recent_cooperation_rate = (total_cooperators_in_window) / (n * recent_window)

IF recent_cooperation_rate >= cooperation_threshold:
    COOPERATE
ELSE:
    // Graduated response based on how far below threshold
    defection_severity = (cooperation_threshold - recent_cooperation_rate) / cooperation_threshold
    
    IF defection_severity > 0.6:  // Severe defection (>60% below threshold)
        DEFECT
    ELSE IF defection_severity > 0.3:  // Moderate defection
        DEFECT with probability 0.7, COOPERATE with probability 0.3
    ELSE:  // Mild defection
        COOPERATE (give benefit of doubt)
```

### Forgiveness Mechanism
- After defecting due to low cooperation, return to cooperation if cooperation rate improves above threshold in the next round
- This prevents permanent punishment spirals

### Final Round Strategy (Round r)
```pseudocode
IF average_cooperation_rate_overall >= 0.4:
    COOPERATE  // Reward overall cooperative players
ELSE IF recent_cooperation_rate >= cooperation_threshold:
    COOPERATE  // Recent improvement deserves reward
ELSE:
    DEFECT     // Protect against final-round defection
```

## Key Features

### 1. **Adaptive Threshold**
The cooperation threshold `max(0.3, k/n)` ensures:
- When k/n is high (efficient public good), we expect more cooperation
- When k/n is low, we're more tolerant of defection
- Never expect less than 30% cooperation (maintains hope for coordination)

### 2. **Graduated Responses**
Rather than binary punishment, the strategy uses proportional responses:
- Severe defection → Always defect
- Moderate defection → Probabilistic defection
- Mild defection → Continue cooperating

### 3. **Recent-History Focus**
Using a 3-round window (or all available history if fewer rounds) ensures:
- Quick adaptation to changing opponent behavior
- Doesn't get stuck punishing players who've reformed
- Balances stability with responsiveness

### 4. **Robustness Features**
- **Against all-defectors**: Will switch to defection after round 2 if cooperation is consistently low
- **Against conditional cooperators**: Maintains cooperation when others cooperate
- **Against exploiters**: Punishes consistent defection but forgives improvement
- **Against random players**: Adapts threshold expectations based on observed patterns

### 5. **Cooperation Bias**
- Starts with 2 rounds of cooperation
- Uses probabilistic defection rather than certain defection for moderate violations
- Rewards improvement immediately
- Cooperates in final round if overall experience was positive

## Example Behavior

**Scenario 1** (n=6, k=2, high cooperation environment):
- Threshold = max(0.3, 2/6) = 0.33
- If 3+ players typically cooperate, strategy maintains cooperation
- If cooperation drops to 1-2 players, gradually increases defection

**Scenario 2** (n=4, k=1.5, mixed environment):
- Threshold = max(0.3, 1.5/4) = 0.375
- More demanding cooperation standard due to higher k/n ratio
- Quickly adapts to whether group settles into cooperation or defection

This strategy promotes cooperation while protecting against exploitation, making it robust across diverse opponent behaviors and game parameters.
'''

description_COOPERATIVE_90 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize cooperative outcomes while being resilient to exploitation. It balances being "nice" (cooperative by default) with being "retaliatory" (punishing defection) and "forgiving" (allowing recovery from conflict spirals).

## Decision Rules

### 1. Opening Phase (First Round)
**Always COOPERATE** in round 1 to signal cooperative intent and establish goodwill.

### 2. Main Strategy Framework

The strategy operates on three key mechanisms:

#### A. Cooperation Threshold Dynamic
- Calculate the **cooperation rate** in the previous round: `coop_rate = (number of cooperators) / n`
- Maintain a **minimum cooperation threshold** that starts at 0.5 and adapts based on history

#### B. Personal Reciprocity Tracking
- Track which specific players have defected against you when you cooperated
- Maintain a "forgiveness countdown" for each player who has exploited you

#### C. Adaptive Decision Rule

```pseudocode
FOR each round t (where t > 1):
    
    // Calculate recent cooperation environment
    recent_coop_rate = average cooperation rate over last min(3, t-1) rounds
    
    // Adjust cooperation threshold based on environment
    IF recent_coop_rate >= 0.6:
        cooperation_threshold = 0.4  // Lower threshold in cooperative environment
    ELSE IF recent_coop_rate >= 0.3:
        cooperation_threshold = 0.5  // Standard threshold
    ELSE:
        cooperation_threshold = 0.7  // Higher threshold in hostile environment
    
    // Check if we're in final rounds (last 10% of game)
    is_endgame = (r - t + 1) <= max(1, r * 0.1)
    
    // Main decision logic
    IF is_endgame AND recent_coop_rate < 0.3:
        action = DEFECT  // Protect against end-game defection
    ELSE IF recent_coop_rate >= cooperation_threshold:
        action = COOPERATE  // Environment is sufficiently cooperative
    ELSE:
        // Environment is hostile - use targeted reciprocity
        IF previous round had >= (n/2) cooperators:
            action = COOPERATE  // Give benefit of doubt if majority cooperated
        ELSE:
            action = DEFECT  // Protect yourself in hostile environment
```

## Edge Case Handling

### 3. First Round
Always COOPERATE to establish cooperative intent.

### 4. Final Rounds Strategy
- In the last 10% of rounds, become more cautious
- If cooperation rate has been consistently low (< 30%), switch to defensive mode
- If cooperation has been strong (> 60%), maintain cooperation to the end

### 5. Recovery Mechanism
After any period of mutual defection:
- If cooperation rate suddenly improves (increases by > 0.3 from previous round), immediately return to cooperation
- This prevents being trapped in defection spirals when others try to restore cooperation

## Robustness Features

### 6. Anti-Exploitation Measures
- **Graduated Response**: Don't immediately punish single defections, but respond proportionally to persistent hostility
- **Collective Punishment**: When cooperation rate drops below 30%, assume hostile environment and protect yourself

### 7. Forgiveness Mechanism
- **Time-based Forgiveness**: After 3 consecutive rounds of improved cooperation (rate > 0.5), reset to optimistic stance
- **Majority Rule**: If majority of players cooperate in current round, join them regardless of recent history

### 8. Environmental Adaptation
- **Dynamic Thresholds**: Adjust cooperation requirements based on observed player behavior patterns
- **Context Sensitivity**: Distinguish between individual defection and systemic breakdown of cooperation

## Strategic Rationale

This strategy is designed to:

1. **Lead by Example**: Start cooperatively and maintain cooperation when reciprocated
2. **Avoid Exploitation**: Protect against consistent defectors without being overly punitive  
3. **Encourage Cooperation**: Reward cooperative behavior and forgive past transgressions when environment improves
4. **Adapt to Context**: Adjust behavior based on overall cooperation levels rather than rigid rules
5. **Handle Endgames**: Protect against end-game defection while not abandoning cooperation prematurely

The strategy balances the tension between being cooperative (to capture mutual gains) and being defensive (to avoid exploitation), while remaining adaptive to the diverse range of opponent strategies likely encountered in tournament play.
'''

description_COOPERATIVE_91 = '''
# Adaptive Tit-for-Tat with Forgiveness Strategy (ATTF)

## Core Philosophy
This strategy aims to establish and maintain cooperation while being robust against exploitation. It balances three key principles:
1. **Reciprocity**: Respond to others' cooperation levels
2. **Forgiveness**: Don't get stuck in defection spirals
3. **Adaptability**: Adjust behavior based on the cooperation climate

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent

### Rounds 2 to r-1: Adaptive Response
Calculate two key metrics from the previous round:

1. **Cooperation Rate (CR)**: Fraction of other players who cooperated
   - CR = (number of other players who cooperated) / (n-1)

2. **Personal Benefit Ratio (PBR)**: Compare your payoff to what you'd get by always defecting
   - PBR = (your actual payoff last round) / (1 + k/n × total cooperators last round)

**Decision Logic:**
```
if CR ≥ 0.5:  // Majority cooperation
    if PBR ≥ 0.9:  // You're not being severely exploited
        Cooperate
    else:
        Defect (punishment for exploitation)
else:  // Minority cooperation
    if CR ≥ 0.3 AND round_number ≤ 0.7 × r:  // Some hope early/mid game
        Cooperate (forgiveness attempt)
    else:
        Defect
```

### Round r: Endgame Cooperation Test
In the final round, use a **conditional cooperation** approach:
- If average cooperation rate over the last 3 rounds ≥ 0.4: **Cooperate**
- Otherwise: **Defect**

## Adaptive Elements

### Forgiveness Mechanism
- Every 5 rounds, if stuck in a low-cooperation pattern (CR < 0.3 for 3+ consecutive rounds), attempt cooperation once regardless of recent history
- This prevents permanent defection spirals and tests if conditions have changed

### Reputation Tracking
Maintain a simple "trust score" for the group:
- Start at 0.5 (neutral)
- Increase by 0.1 when CR > 0.6
- Decrease by 0.2 when CR < 0.2
- Cap between 0.0 and 1.0

Use trust score as a tiebreaker in marginal decisions.

### Parameter Sensitivity
- When k is close to n (high cooperation benefit): Lower cooperation threshold to 0.4
- When k is close to 1 (low cooperation benefit): Raise cooperation threshold to 0.6
- For small n (≤ 4): Be more forgiving (reduce thresholds by 0.1)
- For large n (≥ 10): Be more cautious (increase thresholds by 0.1)

## Edge Case Handling

1. **All players defected last round**: Still attempt cooperation if early in game (round < 0.3 × r)
2. **You were the only cooperator**: Defect next round, but forgive after 2 rounds of punishment
3. **Perfect cooperation so far**: Continue cooperating unless it's the last round and you detect potential last-round defection patterns

## Robustness Features

- **Anti-exploitation**: Won't cooperate if consistently getting much worse payoffs than defectors
- **Recovery mechanism**: Periodically tests for renewed cooperation opportunities
- **Endgame awareness**: Reduces cooperation in final rounds when others might defect
- **Parameter adaptation**: Adjusts thresholds based on game parameters to optimize for different cooperation incentive levels

This strategy aims to be a "good citizen" that promotes cooperation while protecting itself from systematic exploitation, making it robust across diverse opponent strategies while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_92 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperative intent with adaptive punishment, using forgiveness mechanisms to maintain cooperation while protecting against exploitation. It operates on the principle that cooperation should be the default, but defection requires measured response.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and test the waters.

### Rounds 2 to r-1: Adaptive Response System

The strategy maintains a **cooperation momentum score** for each player based on their recent behavior, then makes decisions using a three-tier system:

#### Step 1: Calculate Individual Player Scores
For each opponent j, maintain a **cooperation score** S_j:
- Initialize S_j = 1.0 for all players after round 1
- After each round t: S_j = 0.7 × S_j + 0.3 × c_j,t
- This creates a weighted average favoring recent behavior

#### Step 2: Calculate Group Cooperation Level
- **Group cooperation rate** G_t = (Σ S_j) / (n-1)
- This represents the overall cooperative "climate"

#### Step 3: Decision Logic
```pseudocode
if G_t >= 0.7:
    // High cooperation environment
    return COOPERATE
    
elif G_t >= 0.4:
    // Mixed cooperation environment - be generous but cautious
    if (previous_round_cooperators / (n-1)) >= 0.5:
        return COOPERATE
    else:
        // Forgiveness mechanism: cooperate with probability 0.6
        return COOPERATE with probability 0.6, else DEFECT
        
else:
    // Low cooperation environment - defensive mode
    if (previous_round_cooperators / (n-1)) >= 0.3:
        // Some cooperation exists, give chance
        return COOPERATE with probability 0.3
    else:
        return DEFECT
```

### Final Round (Round r): Strategic Cooperation
Even in the last round, **cooperate** if:
- G_r-1 >= 0.5 (group has been reasonably cooperative)
- OR if my cooperation could tip the balance to make cooperation profitable for others

Otherwise, defect to avoid being exploited when no future retaliation is possible.

## Key Features

### 1. Generous Forgiveness
- The strategy doesn't permanently punish occasional defections
- Uses probabilistic cooperation in mixed environments to maintain cooperative opportunities
- The exponential weighting (0.7/0.3 split) allows recovery from past defections

### 2. Momentum-Based Assessment
- Recent behavior matters more than distant history
- Prevents getting stuck in permanent punishment cycles
- Adapts quickly to changes in group dynamics

### 3. Group-Aware Decision Making
- Considers overall cooperation levels, not just individual tit-for-tat
- Recognizes that in n-player games, cooperation with some players can be profitable even if others defect

### 4. Robust Edge Case Handling
- **First round**: Always cooperate to establish good faith
- **Final round**: Strategic decision based on group behavior
- **All defect scenarios**: Gradually reduces cooperation but maintains small probability to test for recovery
- **All cooperate scenarios**: Maintains cooperation with high reliability

## Why This Strategy Works

1. **Incentivizes Cooperation**: By being generally forgiving and cooperative, it encourages others to cooperate
2. **Protects Against Exploitation**: The defensive mode prevents total exploitation by consistent defectors
3. **Recovers from Conflicts**: The momentum scoring allows relationships to heal after conflicts
4. **Adapts to Group Dynamics**: Unlike simple tit-for-tat, it considers the broader cooperation landscape
5. **Tournament Robust**: Performs well against various strategy types without requiring specific coordination

This strategy aims to foster and maintain cooperative environments while having sufficient defensive mechanisms to avoid being exploited by purely selfish strategies.
'''

description_COOPERATIVE_93 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intention with adaptive responsiveness to the group's behavior. It starts optimistically but adjusts based on collective cooperation levels, ensuring both individual viability and group welfare.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and test the group's disposition.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

**Primary Decision Rule:**
- Calculate the **group cooperation rate** from the previous round: `coop_rate = (number of cooperators) / n`
- **Cooperate if** `coop_rate >= cooperation_threshold`
- **Defect if** `coop_rate < cooperation_threshold`

**Dynamic Threshold Adjustment:**
The cooperation threshold adapts based on the history of group behavior:

```
cooperation_threshold = base_threshold + adjustment_factor

Where:
- base_threshold = 0.4 (40% of players must cooperate)
- adjustment_factor = 0.1 × (average_coop_rate_so_far - 0.5)
```

This means:
- If the group has been highly cooperative (avg > 50%), lower the threshold (be more forgiving)
- If the group has been uncooperative (avg < 50%), raise the threshold (be more demanding)
- Threshold is capped between 0.2 and 0.7

### Round r (Final Round): Conditional Cooperation
Despite the temptation to defect in the final round, maintain cooperative behavior if:
- The group cooperation rate in round (r-1) was ≥ 50%, OR
- Your personal cooperation rate so far is ≥ 70%

This prevents complete breakdown while rewarding sustained group cooperation.

## Additional Strategic Elements

### Forgiveness Mechanism
If the group cooperation rate drops below threshold for 2 consecutive rounds, but then recovers to above 60% in any subsequent round, **immediately return to cooperation** regardless of the threshold. This prevents permanent spiral into mutual defection.

### Early Warning System
Track the **cooperation trend** over the last 3 rounds:
- If cooperation is declining consistently AND current rate < 30%, switch to a more conservative threshold (0.6) for the next 2 rounds
- This protects against being exploited during rapid group deterioration

### Endgame Preparation
In the final 20% of rounds (or last 3 rounds if r ≤ 15):
- Slightly increase the cooperation threshold by 0.1
- This accounts for increased defection pressure as the game nears its end

## Pseudocode

```
function decide_action(round_number, history, n, r, k):
    if round_number == 1:
        return COOPERATE
    
    # Calculate group cooperation rate from previous round
    prev_round_cooperators = count_cooperators(history[round_number-1])
    coop_rate = prev_round_cooperators / n
    
    # Calculate historical average cooperation rate
    total_rounds_so_far = round_number - 1
    avg_coop_rate = calculate_average_cooperation_rate(history, total_rounds_so_far)
    
    # Dynamic threshold adjustment
    base_threshold = 0.4
    adjustment = 0.1 * (avg_coop_rate - 0.5)
    threshold = clamp(base_threshold + adjustment, 0.2, 0.7)
    
    # Endgame adjustment
    if round_number > 0.8 * r or round_number > r - 3:
        threshold += 0.1
    
    # Forgiveness mechanism
    if is_recovery_round(history, round_number) and coop_rate >= 0.6:
        return COOPERATE
    
    # Early warning system
    if is_declining_trend(history, round_number) and coop_rate < 0.3:
        threshold = 0.6
    
    # Final round special case
    if round_number == r:
        if coop_rate >= 0.5 or my_cooperation_rate(history) >= 0.7:
            return COOPERATE
        else:
            return DEFECT
    
    # Main decision rule
    if coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Why This Strategy Works

1. **Cooperative Foundation**: Starts cooperatively and maintains cooperative bias when group reciprocates
2. **Adaptive**: Adjusts expectations based on actual group behavior rather than fixed assumptions
3. **Robust**: Handles various opponent types from always-cooperate to tit-for-tat to random strategies
4. **Protective**: Avoids exploitation by groups that defect consistently
5. **Forgiving**: Can recover cooperation after temporary setbacks
6. **Tournament-Ready**: Doesn't rely on coordination or shared norms, only responds to observed behavior

This strategy should perform well across diverse opponent mixes while maintaining a fundamentally cooperative approach that benefits group welfare when reciprocated.
'''

description_COOPERATIVE_94 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation thresholds and graduated responses to defection.

## Decision Rules

### Initial Cooperation Phase
- **First Round**: Always cooperate (C) to signal cooperative intent
- **Early Rounds (rounds 2 to min(5, r/4))**: Continue cooperating to establish a cooperative baseline and gather information about opponent behaviors

### Main Strategy Logic

#### 1. Cooperation Threshold System
Define a **cooperation threshold** T that adapts based on recent history:
- Initial threshold: T = 0.5 (cooperate if ≥ 50% of others cooperated last round)
- Adjust T based on recent cooperation levels and exploitation patterns

#### 2. Multi-Round History Analysis
Track the following metrics over a sliding window of the last W rounds (where W = min(3, current_round/2)):
- **Group cooperation rate**: Average percentage of players who cooperated
- **Exploitation frequency**: How often others defected when I cooperated
- **Collective payoff trend**: Whether group welfare is improving or declining

#### 3. Core Decision Logic
```
For each round t > initial_cooperation_phase:

1. Calculate recent_cooperation_rate over last W rounds
2. Calculate my_exploitation_rate over last W rounds
3. Adjust cooperation threshold:
   - If my_exploitation_rate > 0.6: T = T + 0.1 (become more selective)
   - If recent_cooperation_rate > 0.7: T = T - 0.1 (become more generous)
   - Constrain T to range [0.3, 0.8]

4. Make decision:
   - If recent_cooperation_rate ≥ T: Cooperate
   - Else: Apply graduated response (see below)
```

#### 4. Graduated Response to Defection
When cooperation threshold isn't met, don't immediately defect completely:
- **Mild defection** (recent_cooperation_rate 0.3-0.5): Defect this round, but return to cooperative stance next round
- **Moderate defection** (recent_cooperation_rate 0.1-0.3): Defect for 2 consecutive rounds
- **Strong defection** (recent_cooperation_rate < 0.1): Match the lowest cooperation rate observed

### Edge Case Handling

#### Last Round Considerations
- **Final 10% of rounds**: Maintain cooperative behavior if group cooperation rate > 0.4
- **Final round**: Cooperate only if cooperation rate in previous 3 rounds > 0.6
- **Rationale**: Avoid end-game defection spirals while protecting against exploitation

#### Low Information Scenarios
- **Insufficient history** (rounds 2-3): Use simple majority rule - cooperate if ≥ 50% cooperated last round
- **All-defection scenarios**: After 3 consecutive rounds of <20% cooperation, switch to conditional cooperation (cooperate only if ≥ 2 others cooperated last round)

#### Recovery Mechanisms
- **Forgiveness protocol**: Every 5 rounds, temporarily lower threshold by 0.2 for one round to test if cooperation can be restored
- **Fresh start detection**: If cooperation rate jumps by >0.3 in a single round, immediately return to generous threshold (T = 0.4)

## Adaptive Features

### Parameter Sensitivity
- **High k values** (k > n/2): More generous thresholds since public good is very valuable
- **Large n**: Slightly more forgiving since individual impact is smaller
- **Short games** (r < 10): Maintain higher cooperation to maximize limited opportunities

### Learning Components
- Track which threshold levels led to better collective outcomes
- Adjust responsiveness based on group volatility (more stable groups get more predictable responses)
- Remember and weight recent trends more heavily than distant history

## Robustness Properties

1. **Exploitation Protection**: Graduated responses prevent complete exploitation while maintaining cooperative opportunities
2. **Cooperation Promotion**: Generous initial play and forgiveness mechanisms encourage group cooperation
3. **Adaptability**: Threshold adjustments respond to group dynamics without being overly reactive
4. **Stability**: Bounded threshold changes prevent wild oscillations in behavior

This strategy balances the cooperative imperative with rational self-protection, adapting to group behavior while consistently promoting collective welfare through measured reciprocity and strategic forgiveness.
'''

description_COOPERATIVE_95 = '''
# Adaptive Reciprocal Cooperation Strategy

## Core Philosophy
This strategy balances initial cooperation with adaptive responses to opponent behavior, using a reputation-based system that encourages cooperation while protecting against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase
**First Round:** Always cooperate (C)
- Establishes cooperative intent
- Maximizes potential for mutual cooperation from the start

### 2. Reputation Tracking System
Maintain a cooperation score for each opponent j:
```
reputation[j] = (number of times j cooperated) / (total rounds played so far)
```

### 3. Main Decision Logic
For rounds 2 through r-1:

**Cooperate (C) if:**
- Average group reputation ≥ cooperation_threshold, AND
- At least min_cooperators players cooperated in the previous round

**Otherwise Defect (D)**

Where:
- `cooperation_threshold = max(0.3, (k-1)/(n-1))` 
  - Scales with game parameters: higher k relative to n encourages more cooperation
  - Minimum threshold of 0.3 prevents exploitation by mostly-defecting groups
- `min_cooperators = max(1, floor(n * k / (2*n - k)))`
  - Ensures cooperation only when enough others participate for reasonable returns

### 4. Endgame Handling
**Last Round (round r):**
- If average group reputation ≥ 0.5: Cooperate
- Otherwise: Defect

This prevents others from exploiting predictable final-round defection while still protecting against pure exploiters.

### 5. Recovery Mechanism
If the group's average reputation falls below 0.2 for 3 consecutive rounds:
- Switch to "probation mode": Cooperate for 2 rounds regardless of others' actions
- This attempts to restart cooperation cycles and prevents permanent breakdown

## Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return C
    
    // Calculate reputations
    for each player j ≠ self:
        reputation[j] = count_cooperations(j, history) / (round - 1)
    
    avg_reputation = mean(reputation)
    cooperation_threshold = max(0.3, (k-1)/(n-1))
    min_cooperators = max(1, floor(n * k / (2*n - k)))
    
    // Check for probation mode
    if avg_reputation < 0.2 for last 3 rounds and round <= r-3:
        enter probation mode for 2 rounds
        return C
    
    // Last round logic
    if round == r:
        return C if avg_reputation ≥ 0.5 else D
    
    // Main decision logic
    cooperators_last_round = count_cooperators(history, round-1)
    
    if avg_reputation ≥ cooperation_threshold AND 
       cooperators_last_round ≥ min_cooperators:
        return C
    else:
        return D
```

## Strategy Rationale

**Cooperative Foundation:** Starts with cooperation and maintains cooperative bias through reputation thresholds below 0.5.

**Parameter Adaptation:** Thresholds scale with k and n, recognizing that higher multiplication factors or smaller groups make cooperation more attractive.

**Exploitation Protection:** Won't cooperate when facing mostly-defecting opponents or insufficient group participation.

**Recovery Capability:** Probation mode prevents permanent cooperation breakdown and can restart positive cycles.

**Endgame Stability:** Final round decision based on overall group behavior rather than predictable defection.

This strategy should perform well against various opponent types: it rewards cooperators, punishes consistent defectors, and can recover from temporary cooperation breakdowns while being robust to endgame exploitation.
'''

description_COOPERATIVE_96 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Dynamic Forgiveness"

## Core Philosophy
This strategy balances cooperation with protection against exploitation by adapting to the overall cooperation level in the game while maintaining a fundamentally cooperative stance.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating regardless of others' actions to establish cooperative intent

### 2. Main Strategy Framework
After the initial phase, use this decision process:

```pseudocode
For round t (where t > 3):
    cooperation_rate = total_cooperators_in_last_round / n
    my_recent_cooperation_rate = my_cooperations_in_last_3_rounds / 3
    
    // Base cooperation threshold adapts to game parameters
    base_threshold = max(0.3, (k-1)/(n-1) * 0.8)
    
    // Adjust threshold based on my recent behavior
    if my_recent_cooperation_rate >= 0.67:
        adjusted_threshold = base_threshold * 0.8  // More forgiving
    else:
        adjusted_threshold = base_threshold * 1.2  // More demanding
    
    if cooperation_rate >= adjusted_threshold:
        return C
    else:
        return D
```

### 3. Forgiveness Mechanism
- **Periodic Reset**: Every 5 rounds, ignore the threshold once and cooperate to test if cooperation can be re-established
- **Generous Interpretation**: If cooperation rate is within 0.1 of threshold, cooperate anyway

### 4. End Game Handling
- **Last 3 Rounds**: Gradually increase cooperation tendency
  - Last round: Always cooperate (final generous gesture)
  - Second-to-last round: Cooperate if cooperation_rate ≥ 0.2
  - Third-to-last round: Cooperate if cooperation_rate ≥ 0.3

## Key Features

### Adaptivity
- **Parameter Sensitivity**: Base threshold adjusts based on k and n values. Higher k/n ratios (where cooperation is more beneficial) lead to lower thresholds for cooperation
- **Dynamic Response**: Cooperation threshold adjusts based on recent group behavior and my own cooperation history

### Robustness
- **Protection Against Exploitation**: Won't cooperate indefinitely with pure defectors
- **Recovery Capability**: Periodic cooperation attempts allow recovery from mutual defection cycles
- **Multiple Opponent Types**: Responds well to conditional cooperators, punishes consistent defectors, and attempts to lead unconditional cooperators

### Cooperative Alignment
- **Default Cooperation**: Starts cooperatively and maintains cooperative bias
- **Generous Interpretation**: Gives benefit of doubt when cooperation levels are borderline
- **End-Game Cooperation**: Ends on a cooperative note regardless of recent history

## Edge Case Handling

1. **All Defect Environment**: Will eventually defect but periodically test for cooperation opportunities
2. **Mixed Groups**: Adapts threshold based on observed cooperation levels
3. **Highly Cooperative Groups**: Maintains cooperation with lower thresholds
4. **Parameter Extremes**: 
   - High k (k close to n): Very cooperative, low thresholds
   - Low k (k close to 1): More cautious, higher thresholds
   - Large n: Adjusts threshold to account for coordination difficulty

This strategy maintains a cooperative orientation while protecting against exploitation, adapts to different group dynamics, and provides mechanisms for recovering from mutual defection patterns.
'''

description_COOPERATIVE_97 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation based on observed group behavior patterns and strategic reciprocity.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3)
- **Always cooperate** in the first 3 rounds to establish cooperative intent and gather behavioral data
- This creates a "trust-building" foundation and allows observation of other players' tendencies

### Main Strategy Phase (Rounds 4 to r-2)

**Cooperation Threshold System:**
- Calculate `cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)`
- Cooperate if `cooperation_rate >= threshold`, where:
  - `threshold = max(0.3, (k-1)/(n-1) - 0.1)`
  - This threshold is strategically set just below the break-even point for collective benefit

**Individual Player Tracking:**
- Maintain a "cooperation score" for each player: `score_j = cooperations_by_j / rounds_observed`
- Apply **selective reciprocity**: If the majority of players (>50%) have cooperation scores above 0.6, continue cooperative behavior
- If cooperation rates drop significantly, implement **graduated response**

**Graduated Response Protocol:**
1. **First warning phase**: If group cooperation rate falls below threshold, defect for 1 round, then return to cooperation
2. **Punishment phase**: If cooperation rate remains low after warning, defect until cooperation rate recovers above threshold + 0.1
3. **Forgiveness mechanism**: Always return to cooperation if group cooperation rate exceeds threshold by 0.2

### Endgame Strategy (Last 2 rounds: r-1, r)

**Round r-1:**
- Cooperate if current group cooperation rate ≥ 0.4
- This accounts for potential endgame defection while maintaining some cooperative stance

**Final Round r:**
- **Conditional cooperation**: Cooperate only if ≥ (n/2) players cooperated in round r-1
- This balances final-round incentives with maintaining cooperative relationships

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Increase forgiveness: Return to cooperation after just 1 round of punishment
- Lower threshold by 0.1 to account for higher individual impact

### High Multiplication Factor (k > n-1)
- Increase cooperation threshold to `(k-1)/(n-1) + 0.1` 
- More aggressive cooperation since collective benefit is very high

### Low Multiplication Factor (k ≤ 1.5)
- Implement stricter reciprocity: Require cooperation rate ≥ 0.5 to maintain cooperation
- Quick punishment for defection (defect immediately when rate drops below threshold)

### Very Short Games (r ≤ 5)
- Cooperate for first r-2 rounds unconditionally
- Apply endgame strategy only for final 2 rounds

## Robustness Features

**Noise Tolerance:**
- Use moving averages over the last min(5, r/3) rounds for cooperation rate calculations
- Prevents overreaction to single-round anomalies

**Anti-Exploitation Protection:**
- If personal payoff falls below `1 + (k/n) × 0.3` for 3 consecutive rounds, temporarily switch to tit-for-tat until recovery

**Adaptive Learning:**
- Track whether cooperative or defective responses lead to better group outcomes
- Adjust threshold by ±0.05 based on observed effectiveness every 5 rounds

## Pseudocode Summary

```
for round t in 1 to r:
    if t <= 3:
        action = COOPERATE
    elif t >= r-1:
        action = endgame_strategy(t, history)
    else:
        cooperation_rate = calculate_group_cooperation_rate(history)
        threshold = calculate_threshold(n, k)
        
        if cooperation_rate >= threshold:
            action = COOPERATE
        else:
            action = graduated_response(history, cooperation_rate, threshold)
    
    return action
```

This strategy balances cooperative ideals with strategic protection, adapts to various group dynamics, and maintains robustness against diverse opponent strategies while maximizing the potential for collective benefit.
'''

description_COOPERATIVE_98 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness to group dynamics. It begins with trust, rewards cooperation, but protects against exploitation while remaining forgiving enough to restore cooperation.

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal cooperative intent and give others the benefit of the doubt.

### Rounds 2 to r-1: Adaptive Reciprocation

The strategy uses a **cooperation threshold** system based on recent group behavior:

1. **Calculate recent cooperation rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Compute: `recent_coop_rate = total_cooperators_in_recent_rounds / (n × rounds_examined)`

2. **Determine cooperation threshold**:
   - Base threshold = 0.4 (require at least 40% group cooperation)
   - Adjust based on game parameters:
     - If k/n > 0.5: Lower threshold by 0.1 (public good is very valuable)
     - If n ≥ 8: Lower threshold by 0.1 (larger groups need more encouragement)
   - Final threshold = max(0.2, adjusted_threshold)

3. **Decision logic**:
   ```
   IF recent_coop_rate >= cooperation_threshold:
       Cooperate (reward good group behavior)
   ELSE IF last_round_cooperators == 0:
       Defect (don't be the only sucker)
   ELSE IF my_recent_cooperation_rate > recent_coop_rate + 0.2:
       Defect (I've been cooperating much more than others)
   ELSE:
       Cooperate with probability 0.7 (give group another chance)
   ```

### Final Round: Conditional Cooperation
Even in the last round, maintain cooperative behavior if the group has been reasonably cooperative:

```
IF cooperation_rate_over_all_previous_rounds >= 0.3:
    Cooperate (reward sustained group effort)
ELSE:
    Defect (group has been largely uncooperative)
```

## Key Features

### 1. **Forgiveness Mechanism**
- Even when cooperation rates are low, still cooperate with 70% probability
- Prevents permanent defection spirals
- Gives groups chances to recover

### 2. **Anti-Exploitation Protection**
- Defects when being the sole cooperator
- Reduces cooperation when contributing disproportionately more than others
- Uses recent history rather than entire history to adapt to changing group dynamics

### 3. **Parameter Sensitivity**
- Adjusts thresholds based on k/n ratio (how valuable the public good is)
- Accounts for group size effects (larger groups are harder to coordinate)

### 4. **Graduated Response**
- Doesn't immediately punish single defections
- Uses probabilistic cooperation in borderline cases
- Maintains cooperative stance in final round when appropriate

## Robustness Features

### Against Always Defectors
- Will eventually reduce cooperation but not eliminate it entirely
- Probabilistic cooperation prevents complete exploitation

### Against Tit-for-Tat Groups
- Cooperative opening establishes good relationships
- Forgiveness mechanism repairs accidental defection spirals

### Against Complex Strategies
- Uses aggregate group behavior rather than individual tracking
- Recent history focus adapts to changing strategies

### Against Mixed Populations
- Threshold system naturally adapts to the overall cooperation level
- Maintains cooperation incentives even in partially cooperative groups

## Example Behavior (n=6, k=2)

- **Round 1**: Cooperate
- **Round 2-3**: If ≥3 others cooperated in round 1, cooperate; otherwise cooperate with 70% probability
- **Middle rounds**: Maintain cooperation if group maintains ~40%+ cooperation rate
- **Final round**: Cooperate if group has maintained 30%+ cooperation throughout the game

This strategy is designed to foster cooperation while being resilient to various forms of exploitation and strategic manipulation.
'''

description_COOPERATIVE_99 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness, using the public goods structure to encourage collective cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Signal cooperative intent and gather information about opponent tendencies

### Subsequent Rounds: Adaptive Response System

The strategy uses three key metrics calculated from the complete history:

1. **Cooperation Rate (CR)**: Average proportion of players who cooperated in previous rounds
2. **Recent Momentum (RM)**: Weighted cooperation trend over the last min(3, current_round-1) rounds
3. **Personal Exploitation (PE)**: How often I cooperated while others defected

#### Cooperation Decision Algorithm:

```pseudocode
If current_round <= r/2:  // First half of game
    Cooperate if CR >= 0.3 OR RM > 0.1
    
Else if current_round == r:  // Final round
    Cooperate if CR >= 0.5 AND PE < 0.4
    
Else:  // Second half of game
    Cooperate if (CR >= 0.4 AND RM >= -0.1) OR (CR >= 0.6)
```

### Metric Calculations:

**Cooperation Rate (CR)**:
```pseudocode
CR = (total_cooperators_across_all_previous_rounds) / (n × previous_rounds)
```

**Recent Momentum (RM)**:
```pseudocode
recent_rounds = min(3, current_round - 1)
weights = [0.5, 0.3, 0.2]  // Most recent gets highest weight

RM = 0
for i in range(recent_rounds):
    round_cooperation_rate = cooperators_in_round[current_round - 1 - i] / n
    RM += weights[i] × round_cooperation_rate

RM = RM - baseline_cooperation_rate  // Baseline from first 2 rounds
```

**Personal Exploitation (PE)**:
```pseudocode
my_cooperations = count of rounds where I played C
others_total_cooperations = total cooperations by others when I cooperated
max_possible_others = my_cooperations × (n - 1)

PE = 1 - (others_total_cooperations / max_possible_others)
```

## Strategy Features

### 1. **Generous Start**
- Always cooperate in Round 1 to establish cooperative tone
- Use low threshold (CR ≥ 0.3) in early rounds to encourage cooperation

### 2. **Momentum Sensitivity**  
- React to recent trends, not just historical averages
- Positive momentum can overcome low overall cooperation rates
- Negative momentum increases caution even with decent cooperation rates

### 3. **Adaptive Thresholds**
- **Early game**: Lower barriers to cooperation (30% threshold)
- **Mid-game**: Moderate barriers with momentum consideration (40% + momentum)
- **End game**: Higher threshold but consider exploitation history

### 4. **End Game Handling**
- Final round: Cooperate only if there's been substantial cooperation (50%+) and I haven't been heavily exploited
- Prevents being a "sucker" in the final round while maintaining some cooperative spirit

### 5. **Exploitation Protection**
- Personal Exploitation metric prevents continued cooperation when consistently betrayed
- Threshold of 40% exploitation tolerance balances forgiveness with self-protection

## Edge Cases

**All players always defect**: Strategy will switch to defection after 2-3 rounds when CR falls below thresholds.

**Highly volatile behavior**: Recent momentum metric helps adapt quickly to changing group dynamics.

**Mixed populations**: Graduated thresholds allow cooperation with partially cooperative groups while avoiding full exploitation.

**Parameter sensitivity**: Works across different n and k values since it relies on proportional rather than absolute cooperation counts.

## Robustness Features

- **No communication required**: Purely based on observable actions
- **No coordination assumptions**: Doesn't rely on others following similar strategies  
- **Parameter agnostic**: Thresholds work regardless of specific n, k, r values
- **History-dependent**: Uses all available information efficiently
- **Forgiveness mechanism**: Negative momentum can recover, allowing renewed cooperation

This strategy encourages cooperation when there's evidence it will be reciprocated, while protecting against systematic exploitation through adaptive thresholds and exploitation tracking.
'''

description_COOPERATIVE_100 = '''
# Adaptive Reciprocal Cooperation Strategy (ARC)

## Core Philosophy
This strategy balances cooperative intentions with adaptive responses to observed behavior, using graduated reciprocity to encourage cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Optimistic Start
**Always cooperate** in the first round to signal cooperative intent and give others the benefit of the doubt.

### Rounds 2 to r-1: Adaptive Reciprocity

**Step 1: Calculate Cooperation Health**
```
cooperation_rate = (total_cooperations_observed) / (n * rounds_played_so_far)
recent_cooperation_rate = (cooperations_in_last_3_rounds) / (n * min(3, rounds_played))
```

**Step 2: Determine Base Inclination**
- If `cooperation_rate >= 0.6`: **Cooperative mode** - Default to cooperate
- If `cooperation_rate <= 0.3`: **Defensive mode** - Default to defect  
- Otherwise: **Neutral mode** - Base decision on recent trends

**Step 3: Apply Reciprocity Adjustments**

*Positive Reciprocity:*
- If `recent_cooperation_rate > cooperation_rate + 0.1`: Boost cooperation probability by 0.2
- If last round had `cooperators >= n/2`: Boost cooperation probability by 0.1

*Negative Reciprocity:*
- If `recent_cooperation_rate < cooperation_rate - 0.1`: Reduce cooperation probability by 0.2  
- If last round had `cooperators <= n/4`: Reduce cooperation probability by 0.15

**Step 4: Forgiveness Mechanism**
- If we've defected for 2+ consecutive rounds AND `recent_cooperation_rate >= 0.4`: Override to cooperate (give second chances)

**Step 5: Final Decision**
```
if cooperation_probability >= 0.5:
    return COOPERATE
else:
    return DEFECT
```

### Round r (Final Round): Conditional Cooperation
- If `overall_cooperation_rate >= 0.5`: Cooperate (reward good community)
- If `recent_cooperation_rate >= 0.6`: Cooperate (respond to recent goodwill)
- Otherwise: Defect (protect against final round defection cascade)

## Key Features

### 1. **Graduated Response**
Rather than binary reactions, the strategy uses probability adjustments that accumulate, allowing proportional responses to varying levels of cooperation/defection.

### 2. **Multiple Time Horizons**
- Overall history informs general stance
- Recent history (last 3 rounds) captures momentum shifts
- Last round provides immediate feedback

### 3. **Forgiveness and Recovery**
The strategy actively looks for opportunities to restart cooperation after periods of mutual defection, preventing permanent breakdown.

### 4. **Context Sensitivity**
Thresholds are set relative to group size (n/2, n/4) so the strategy adapts appropriately whether playing with 3 players or 20.

### 5. **End-Game Handling**
Recognizes that final round dynamics differ, but still rewards sustained cooperative communities while protecting against exploitation.

## Robustness Features

**Against Always Defect:** Quickly shifts to defensive mode while occasionally testing for change
**Against Always Cooperate:** Maintains high cooperation, maximizing joint payoffs  
**Against Tit-for-Tat types:** Reciprocates effectively while being more forgiving
**Against Random players:** Adapts to actual cooperation rates rather than being fooled by noise
**Against Sophisticated strategies:** Multiple evaluation criteria make it harder to exploit

This strategy embodies cooperative values by starting optimistically, actively seeking opportunities to cooperate, and giving others chances to demonstrate good faith, while maintaining enough adaptability to avoid being systematically exploited.
'''

description_COOPERATIVE_101 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperation with protection against exploitation by using adaptive thresholds based on observed cooperation rates and remaining game length.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal willingness to cooperate and gather information about opponents.

### Rounds 2 to r-1: Adaptive Reciprocation
Use a dynamic cooperation threshold based on:

1. **Historical Cooperation Rate**: Calculate `historical_coop_rate = total_cooperators_observed / (total_players_observed)`
2. **Cooperation Threshold**: `threshold = max(0.3, min(0.7, historical_coop_rate * adjustment_factor))`
   - `adjustment_factor = 1.2` (slight optimism to encourage cooperation)
3. **Decision Rule**: 
   - If `historical_coop_rate ≥ threshold`: **Cooperate**
   - If `historical_coop_rate < threshold`: **Defect**

### Final Round: Strategic Defection
- **Always defect** in the final round, as there's no future to incentivize cooperation and defection is dominant.

## Adaptive Mechanisms

### 1. Forgiveness Window
- Weight recent rounds more heavily: Use exponential decay where recent rounds have weight `w = 0.8^(current_round - past_round)`
- This allows recovery from temporary defection phases

### 2. Exploitation Protection
If cooperation rate drops below 20% for 3 consecutive rounds:
- Switch to **defensive mode**: Defect until cooperation rate recovers above 40%
- This prevents persistent exploitation

### 3. End-Game Adjustment
In the final 20% of rounds (or last 3 rounds if r ≤ 15):
- Gradually reduce cooperation threshold by factor `(remaining_rounds / total_remaining_at_start)`
- Accounts for increased defection as game approaches end

## Pseudocode

```
function decide_action(round, history, n, r, k):
    if round == 1:
        return COOPERATE
    
    if round == r:
        return DEFECT
    
    # Calculate weighted cooperation rate
    total_weighted_cooperators = 0
    total_weight = 0
    
    for past_round in history:
        weight = 0.8^(round - past_round.round_number)
        cooperators_in_round = count_cooperators(past_round)
        total_weighted_cooperators += cooperators_in_round * weight
        total_weight += (n * weight)
    
    historical_coop_rate = total_weighted_cooperators / total_weight
    
    # Check for exploitation protection
    if last_3_rounds_avg_coop_rate() < 0.2:
        if historical_coop_rate < 0.4:
            return DEFECT  # Defensive mode
    
    # End-game adjustment
    remaining_rounds = r - round
    if remaining_rounds <= max(3, 0.2 * r):
        endgame_factor = remaining_rounds / max(3, 0.2 * r)
    else:
        endgame_factor = 1.0
    
    # Calculate adaptive threshold
    base_threshold = max(0.3, min(0.7, historical_coop_rate * 1.2))
    adjusted_threshold = base_threshold * endgame_factor
    
    if historical_coop_rate >= adjusted_threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Robustness Features

1. **Always Defect Protection**: Exploitation protection prevents being a "sucker" against persistent defectors
2. **Tit-for-Tat Compatibility**: Responds positively to reciprocal strategies
3. **Random Strategy Tolerance**: Weighted averaging smooths out noise from random players
4. **Endgame Realism**: Acknowledges rational defection as game ends
5. **Recovery Mechanism**: Forgiveness window allows cooperation to resume after conflicts

## Cooperative Alignment

- Starts cooperatively to establish positive momentum
- Uses optimistic adjustment factor (1.2) to encourage cooperation
- Maintains relatively low minimum threshold (0.3) to cooperate even with modest reciprocation
- Balances cooperation with rational self-protection
- Designed to create and maintain cooperative equilibria when possible

This strategy should perform well against a diverse set of opponents while maintaining a fundamentally cooperative orientation that benefits all players when reciprocated.
'''

description_COOPERATIVE_102 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy aims to foster cooperation while protecting against exploitation through adaptive reciprocity and graduated responses. It balances optimism with pragmatic defense mechanisms.

## Decision Rules

### 1. First Round Behavior
**Always cooperate (C)** in round 1 to signal cooperative intent and give the group the best chance to establish a cooperative norm.

### 2. Cooperation Threshold System
Maintain a **cooperation threshold** θ that determines when to cooperate based on recent group behavior:

- **Initial threshold**: θ = 0.5 (cooperate if ≥50% of others cooperated last round)
- **Adaptive adjustment**: Threshold adjusts based on group's cooperation trend

### 3. Main Decision Logic
For rounds t = 2 to r:

```pseudocode
cooperation_rate_last_round = (cooperators_last_round) / (n - 1)
cooperation_trend = calculate_trend(last_3_rounds)

// Adjust threshold based on group dynamics
if cooperation_trend > 0.1:
    θ = max(0.3, θ - 0.1)  // Lower threshold when cooperation increasing
elif cooperation_trend < -0.1:
    θ = min(0.7, θ + 0.1)  // Raise threshold when cooperation declining
    
if cooperation_rate_last_round >= θ:
    action = C
else:
    action = D
```

### 4. Forgiveness Mechanism
Every 3-4 rounds, attempt to **restart cooperation** regardless of recent history:
- If current round number mod 4 == 0, cooperate if θ ≤ 0.8
- This prevents permanent defection spirals and tests if others are ready to cooperate again

### 5. Endgame Behavior
For the **last 20% of rounds** (or last 2 rounds if r ≤ 10):
- Cooperate only if cooperation_rate_last_round ≥ 0.6
- This accounts for potential endgame defection while still rewarding consistent cooperators

### 6. Payoff-Based Adjustment
Track your cumulative payoff compared to estimated payoffs from always defecting:
- If significantly behind (>15% worse), become more conservative (increase θ by 0.1)
- If doing well, maintain current strategy

## Edge Cases

### Very Small Groups (n = 2-3)
- Use stricter reciprocity: cooperate only if ≥50% cooperated last round
- No forgiveness mechanism (too easy to exploit)

### Very Large Groups (n > 10)
- Use more lenient threshold: initial θ = 0.4
- Focus on cooperation trends rather than exact percentages

### Short Games (r ≤ 5)
- Always cooperate in first round
- Simple reciprocity: cooperate if majority cooperated last round
- No complex adaptation mechanisms

### Long Games (r > 20)
- Implement full adaptive mechanism
- Add memory of cooperation patterns over longer windows (5-7 rounds)

## Robustness Features

1. **Graduated Response**: Doesn't immediately punish single defections, looks for patterns
2. **Adaptive Learning**: Adjusts expectations based on group behavior
3. **Forgiveness**: Regularly tests for renewed cooperation opportunities
4. **Exploitation Protection**: Raises standards when facing consistent defection
5. **Group Size Awareness**: Adapts decision-making to group dynamics

## Cooperative Alignment

This strategy prioritizes:
- **Initial cooperation** to establish positive norms
- **Conditional cooperation** to sustain collaborative outcomes
- **Forgiveness** to recover from temporary breakdowns
- **Adaptive learning** to match the group's cooperation capacity
- **Long-term thinking** over short-term exploitation

The strategy aims to achieve high mutual cooperation while avoiding being systematically exploited, creating conditions where cooperative players can thrive together.
'''

description_COOPERATIVE_103 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated responses and adaptive cooperation thresholds. It balances forgiveness with accountability to maintain cooperative momentum.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** in the first round to signal cooperative intent and establish a positive baseline.

### Rounds 2 through r-1: Adaptive Reciprocation

**Step 1: Calculate Cooperation Metrics**
- `recent_coop_rate` = cooperation rate over last min(3, current_round-1) rounds
- `overall_coop_rate` = cooperation rate since round 1
- `trend_weight` = 0.6 (emphasizes recent behavior)
- `effective_coop_rate` = trend_weight × recent_coop_rate + (1-trend_weight) × overall_coop_rate

**Step 2: Determine Base Cooperation Threshold**
- `base_threshold` = max(0.3, (k-1)/(n-1))
  - Uses the theoretical cooperation breakeven point as foundation
  - Ensures minimum 30% threshold to prevent excessive defection

**Step 3: Apply Adaptive Adjustment**
- If `effective_coop_rate` ≥ 0.7: `threshold` = base_threshold - 0.1 (more lenient)
- If `effective_coop_rate` ≤ 0.3: `threshold` = base_threshold + 0.15 (more strict)
- Otherwise: `threshold` = base_threshold

**Step 4: Cooperation Decision**
- **Cooperate** if `effective_coop_rate` ≥ `threshold`
- **Defect** if `effective_coop_rate` < `threshold`

### Final Round (Round r): Conditional Cooperation
- If `overall_coop_rate` ≥ 0.5: **Cooperate** (reward sustained cooperation)
- If `overall_coop_rate` < 0.5: **Defect** (protect against exploitation)

## Key Features

### 1. Graduated Response
The strategy doesn't immediately punish single defections but responds proportionally to sustained uncooperative behavior through the threshold adjustment mechanism.

### 2. Forgiveness Mechanism
- Recent behavior is weighted more heavily (60%) than historical behavior
- High cooperation environments become more forgiving (threshold - 0.1)
- Allows recovery from temporary defection cascades

### 3. Exploitation Protection
- Maintains minimum 30% cooperation threshold
- Becomes stricter in low-cooperation environments (threshold + 0.15)
- Strategic defection in final round when facing persistent defectors

### 4. Parameter Adaptation
- Base threshold scales with game parameters (k,n) using (k-1)/(n-1)
- Works across different game configurations without manual tuning

## Edge Case Handling

- **Early rounds (2-4)**: Uses available history, automatically adjusts window size
- **High volatility**: Recent trend weighting (60%) provides stability
- **All-defect opponents**: Threshold increases, leading to eventual defection
- **Mixed strategies**: Responds proportionally to average cooperation level
- **Late-game exploitation**: Protected by final round conditional defection

## Robustness Properties

1. **Nash Equilibrium Awareness**: Base threshold incorporates game-theoretic optimal cooperation level
2. **Tit-for-Tat Compatibility**: Responds positively to consistent cooperators
3. **Grim Trigger Resistance**: Forgiveness mechanism prevents permanent defection spirals
4. **Random Strategy Tolerance**: Uses statistical averaging rather than exact pattern matching
5. **Multi-round Stability**: Balances short-term protection with long-term cooperation incentives

This strategy maintains a cooperative stance while systematically adapting to the strategic environment, making it robust against both exploitative and overly aggressive strategies while encouraging mutual cooperation.
'''

description_COOPERATIVE_104 = '''
# Adaptive Generous Tit-for-Tat (AGTT) Strategy

## Core Philosophy
This strategy balances cooperation with protection against exploitation by adapting to the overall cooperation level in the game while maintaining a generous, forgiving approach that encourages mutual cooperation.

## Decision Rules

### Round 1: Cooperative Start
- **Always cooperate** in the first round to signal cooperative intent and establish a positive foundation.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

The strategy uses a **cooperation threshold** that adapts based on observed group behavior:

1. **Calculate recent cooperation rate**: 
   - Look at the last min(3, current_round-1) rounds
   - Compute: `recent_coop_rate = (total_cooperations_observed) / (n × rounds_observed)`

2. **Determine cooperation threshold**:
   - If recent_coop_rate ≥ 0.5: `threshold = 0.3` (lower threshold, more cooperative)
   - If 0.3 ≤ recent_coop_rate < 0.5: `threshold = 0.4` (moderate threshold)
   - If recent_coop_rate < 0.3: `threshold = 0.5` (higher threshold, more defensive)

3. **Decision rule**:
   - **Cooperate** if recent_coop_rate ≥ threshold
   - **Defect** if recent_coop_rate < threshold
   - **Forgiveness mechanism**: If we defected last round but recent_coop_rate has improved by ≥ 0.15, cooperate regardless of threshold

### Final Round (Round r): Conditional Cooperation
- **Cooperate** if the cooperation rate in the last 2 rounds ≥ 0.4
- **Defect** otherwise
- This prevents pure exploitation in the final round while rewarding sustained cooperation

## Key Features

### 1. **Adaptive Thresholds**
The strategy adjusts its cooperation requirements based on what it observes:
- In highly cooperative environments (≥50% cooperation), it becomes more trusting
- In moderately cooperative environments, it maintains balanced expectations
- In low-cooperation environments, it becomes more selective but doesn't give up entirely

### 2. **Generous Forgiveness**
- The strategy actively looks for signs of improvement in group cooperation
- If cooperation levels increase significantly, it immediately returns to cooperation even after defecting
- This helps break cycles of mutual defection

### 3. **Recent History Focus**
- Uses a sliding window of the last 3 rounds (or fewer if early in game)
- This makes the strategy responsive to changing dynamics rather than being stuck in past patterns
- Prevents being overly influenced by early-game experimentation

### 4. **Robust Edge Case Handling**
- **First round**: Always cooperative to establish good faith
- **Final round**: Balanced approach that rewards recent cooperation but protects against end-game defection
- **Short games**: Works with minimum game length (r=2) by using available history

## Pseudocode

```
function decide_action(current_round, history, n, r, k):
    if current_round == 1:
        return COOPERATE
    
    # Calculate recent cooperation rate
    lookback_rounds = min(3, current_round - 1)
    recent_cooperations = 0
    total_observations = 0
    
    for round in last_lookback_rounds:
        for player in all_other_players:
            if history[round][player] == COOPERATE:
                recent_cooperations += 1
            total_observations += 1
    
    recent_coop_rate = recent_cooperations / total_observations
    
    # Determine threshold based on cooperation level
    if recent_coop_rate >= 0.5:
        threshold = 0.3
    elif recent_coop_rate >= 0.3:
        threshold = 0.4
    else:
        threshold = 0.5
    
    # Forgiveness check
    if current_round > 2 and my_last_action == DEFECT:
        previous_coop_rate = calculate_coop_rate(previous_period)
        if recent_coop_rate - previous_coop_rate >= 0.15:
            return COOPERATE
    
    # Final round special handling
    if current_round == r:
        last_two_rounds_rate = calculate_coop_rate(last_2_rounds)
        return COOPERATE if last_two_rounds_rate >= 0.4 else DEFECT
    
    # Standard decision
    return COOPERATE if recent_coop_rate >= threshold else DEFECT
```

## Why This Strategy Works

1. **Encourages Cooperation**: Starts cooperatively and rewards group cooperation with continued cooperation
2. **Prevents Exploitation**: Has clear thresholds and becomes more defensive when cooperation is low
3. **Adaptive**: Responds to changing group dynamics rather than using fixed rules
4. **Forgiving**: Actively looks for opportunities to return to cooperation
5. **Robust**: Handles various game lengths and opponent strategies effectively

This strategy should perform well against both cooperative and mixed populations while being resilient to exploitation attempts.
'''

description_COOPERATIVE_105 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperation with self-protection by being generous initially, responsive to group dynamics, and adaptive to changing conditions. It aims to foster cooperation while defending against exploitation.

## Decision Rules

### 1. Initial Cooperation Phase
- **Round 1**: Always COOPERATE (C)
- **Rounds 2-3**: Continue to COOPERATE to establish good faith and allow others to signal their intentions

### 2. Main Strategy (Rounds 4 to r-1)
The decision depends on three factors:

**A. Group Cooperation Rate**
Calculate the cooperation rate in the previous round:
`coop_rate = (number of cooperators in last round) / n`

**B. Personal Treatment Score**
Track how well cooperation has been "rewarded" by others:
- Start with `treatment_score = 0.5`
- After each round where you cooperated:
  - If `coop_rate ≥ 0.5`: `treatment_score += 0.1`
  - If `coop_rate < 0.5`: `treatment_score -= 0.2`
- Cap between 0.0 and 1.0

**C. Momentum Factor**
Track recent trends in group cooperation:
- If cooperation increased from 2 rounds ago to last round: `momentum = +1`
- If cooperation decreased: `momentum = -1`
- If unchanged: `momentum = 0`

### 3. Decision Algorithm (Rounds 4 to r-1)
```
IF (coop_rate ≥ 0.6) OR 
   (coop_rate ≥ 0.4 AND treatment_score ≥ 0.6) OR
   (coop_rate ≥ 0.3 AND momentum = +1 AND treatment_score ≥ 0.4):
    COOPERATE
ELSE:
    With probability = min(0.3, treatment_score):
        COOPERATE
    Otherwise:
        DEFECT
```

### 4. Final Round Strategy (Round r)
- If `treatment_score ≥ 0.6`: COOPERATE (reward good groups)
- If average cooperation rate over all previous rounds ≥ 0.5: COOPERATE
- Otherwise: DEFECT

## Key Features

### Generous Forgiveness
- The strategy gives multiple chances through the probabilistic cooperation even when conditions aren't ideal
- Treatment score recovers quickly when group cooperation improves

### Adaptive Thresholds
- Lower cooperation thresholds when momentum is positive (encouraging upward trends)
- Higher thresholds when personal treatment has been poor (self-protection)

### Robust to Manipulation
- Doesn't rely on specific patterns or signals that could be gamed
- Uses multiple metrics to avoid being fooled by temporary cooperation

### End-Game Consideration
- Rewards consistently cooperative groups even in the final round
- Protects against end-game defection when the group has been largely uncooperative

## Expected Behavior Against Different Opponents

1. **Against Cooperators**: Maintains mutual cooperation, maximizing joint welfare
2. **Against Defectors**: Protects itself while still offering occasional olive branches
3. **Against Tit-for-Tat types**: Establishes stable cooperation after initial rounds
4. **Against Random players**: Adapts to the actual cooperation level without being exploited
5. **Against Complex strategies**: Uses multiple signals to avoid being manipulated by sophisticated opponents

This strategy prioritizes group welfare when possible while maintaining robust self-defense mechanisms, making it suitable for tournament play against unknown opponents.
'''

description_COOPERATIVE_106 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Forgiveness"

## Core Philosophy
This strategy balances cooperation with self-protection by starting cooperatively, reciprocating the group's behavior, and maintaining forgiveness to recover from defection spirals. It adapts to the group's cooperation level while protecting against exploitation.

## Decision Rules

### 1. First Round
**Always cooperate (C)** - Start with a cooperative signal to encourage group cooperation.

### 2. Subsequent Rounds (rounds 2 to r-1)
Use a **cooperation threshold system** based on the group's recent behavior:

```
cooperation_rate = (total_cooperators_last_round) / (n-1)
forgiveness_threshold = max(0.3, k/n - 0.1)

IF cooperation_rate >= forgiveness_threshold:
    Play C
ELSE:
    Play D
```

**Rationale**: The threshold is dynamically set based on the multiplication factor k. When k is higher, cooperation is more valuable, so we're more forgiving. The minimum threshold of 0.3 prevents complete exploitation.

### 3. Endgame Handling (Last Round)
**Mirror the penultimate round behavior**:
- If you cooperated in round r-1, cooperate in round r
- If you defected in round r-1, defect in round r

This prevents the classic "last round defection" while maintaining consistency with your established pattern.

## Adaptive Features

### Dynamic Forgiveness
The strategy includes a **forgiveness mechanism** that triggers every 3-4 rounds:

```
IF (current_round % 4 == 0) AND (been_defecting_for >= 2_rounds):
    Play C  // Attempt to restart cooperation
```

### Momentum Detection
Track cooperation trends over the last 3 rounds:
- If cooperation is **increasing**: Be more trusting (lower threshold by 0.1)
- If cooperation is **decreasing**: Be more cautious (raise threshold by 0.1)

## Edge Cases and Special Situations

### Very Small Groups (n = 2, 3)
- Use stricter reciprocity since individual actions have more impact
- Threshold becomes: `max(0.5, k/n - 0.05)`

### Very Large Groups (n > 10)
- Be more forgiving since individual contributions matter less
- Add noise tolerance: cooperate if cooperation_rate >= threshold - 0.1

### High Multiplication Factor (k > n-1)
- Cooperation is highly profitable
- Always cooperate in first half of rounds
- Use lower threshold: `max(0.2, k/n - 0.2)`

### Low Multiplication Factor (k < 1.5)
- Cooperation barely profitable
- Start with cooperation but switch to stricter reciprocity quickly
- Higher threshold: `k/n + 0.1`

## Robustness Features

1. **Anti-Exploitation**: Never cooperate if group cooperation falls below 20% for more than 2 consecutive rounds

2. **Recovery Mechanism**: After any period of mutual defection lasting 3+ rounds, attempt cooperation once to test if others are ready to cooperate again

3. **Pattern Recognition**: If detecting alternating patterns in group behavior, match the pattern with one round delay

4. **Reputation Building**: In early rounds (first 25% of game), be slightly more cooperative to establish reputation

## Implementation Pseudocode

```python
def decide_action(round_num, history, n, k, r):
    if round_num == 1:
        return 'C'
    
    if round_num == r:  # Last round
        return history[round_num-2]['my_action']  # Mirror penultimate round
    
    # Calculate cooperation rate from last round
    last_round = history[round_num-2]
    other_cooperators = sum(1 for action in last_round['all_actions'] 
                           if action == 'C') - (1 if last_round['my_action'] == 'C' else 0)
    cooperation_rate = other_cooperators / (n-1)
    
    # Dynamic threshold
    base_threshold = max(0.3, k/n - 0.1)
    
    # Adjust for group size
    if n <= 3:
        base_threshold = max(0.5, k/n - 0.05)
    elif n > 10:
        base_threshold -= 0.1
    
    # Forgiveness mechanism
    if (round_num % 4 == 0 and 
        count_consecutive_defections(history) >= 2):
        return 'C'
    
    # Main decision rule
    if cooperation_rate >= base_threshold:
        return 'C'
    else:
        return 'D'
```

This strategy is designed to be cooperative while protecting against exploitation, adaptive to different game parameters, and robust across various opponent strategies. It encourages group cooperation while maintaining the flexibility to respond to changing group dynamics.
'''

description_COOPERATIVE_107 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with self-protection by maintaining a dynamic cooperation threshold based on observed group behavior. It starts optimistically but adapts to the actual cooperation level of the group while remaining fundamentally cooperative.

## Strategy Description

### 1. Decision Rules

**Cooperation Threshold System:**
- Maintain a dynamic "cooperation threshold" (CT) that represents the minimum number of cooperators needed in recent rounds to justify continued cooperation
- Initial CT = ceiling(n/2) - 1 (slightly below majority)
- Cooperate if recent cooperation levels meet or exceed this threshold
- Update threshold based on group performance and game phase

**Base Decision Rule:**
```
IF (recent_cooperation_rate >= cooperation_threshold/n) THEN
    Cooperate
ELSE IF (rounds_remaining > n) AND (my_recent_cooperation_rate > group_recent_cooperation_rate) THEN
    Defect (temporary punishment)
ELSE
    Cooperate (give benefit of doubt)
END IF
```

### 2. Adaptive Mechanisms

**Threshold Updates:**
- **After good rounds** (cooperation ≥ CT): Decrease CT by 0.1, minimum = 1
- **After bad rounds** (cooperation < CT): Increase CT by 0.2, maximum = n-1
- **Forgiveness decay**: Every 3 rounds, decrease CT by 0.1 toward initial value

**Memory Window:**
- Primary window: Last min(4, r/3) rounds for threshold calculations
- Trend analysis: Last 2 rounds for detecting sudden changes
- Long-term memory: Track overall cooperation rate for endgame decisions

### 3. Edge Cases

**First Round:**
- Always cooperate (optimistic start)
- Reason: Establishes cooperative intent and gathers information

**Early Rounds (rounds 2 to min(5, r/4)):**
- Cooperate unless ≤25% of others cooperated in previous round
- Be generous to allow others to establish cooperative patterns
- Update threshold more slowly (half normal rate)

**Middle Game (bulk of rounds):**
- Apply full adaptive threshold system
- React more quickly to sustained changes in group behavior
- Implement temporary punishment for free-riders when safe to do so

**Endgame (last max(3, r/5) rounds):**
- **If group has been generally cooperative** (historical rate ≥ 50%): Continue cooperating
- **If group has been mostly uncooperative** (historical rate < 35%): 
  - Cooperate in second-to-last round (signal willingness)
  - Defect in final round only if others consistently defected
- **Mixed group performance**: Use threshold system but with increased forgiveness

**Final Round:**
- Cooperate unless group cooperation rate in last 3 rounds < 25%
- Reason: Maintain reputation and avoid mutual defection spiral

### 4. Robustness Features

**Against Exploitation:**
- Temporary punishment: If being exploited (cooperating while others defect), defect for 1-2 rounds when it's safe
- Safety check: Only punish when rounds_remaining > n (ensure time for recovery)

**Against Noise:**
- Don't overreact to single bad rounds
- Weight recent performance more heavily than distant past
- Distinguish between systematic defection and random variation

**Against Different Group Sizes:**
- Scale cooperation threshold relative to n
- Adjust memory window based on total rounds
- Account for statistical significance in small groups

### 5. Cooperative Alignment

**Fundamental Cooperation Bias:**
- Default to cooperation when uncertain
- Err on the side of giving others benefit of doubt
- Maintain cooperation even when slightly unprofitable if it encourages group cooperation

**Recovery Mechanisms:**
- Always willing to return to cooperation after punishment
- Actively signal cooperative intent through strategic cooperation
- Prioritize group welfare in endgame when reputation effects matter less

## Pseudocode Summary

```
Initialize:
    cooperation_threshold = ceiling(n/2) - 1
    memory_window = min(4, r/3)
    
For each round t:
    IF t == 1:
        return COOPERATE
    
    recent_coop_rate = count_cooperators(last memory_window rounds) / (n * memory_window)
    
    IF t <= early_phase:
        IF recent_coop_rate >= 0.25:
            return COOPERATE
        ELSE:
            return DEFECT
    
    IF t > r - endgame_phase:
        return endgame_decision()
    
    # Main decision logic
    IF recent_coop_rate >= cooperation_threshold/n:
        update_threshold(decrease)
        return COOPERATE
    ELSE IF safe_to_punish() AND being_exploited():
        return DEFECT
    ELSE:
        update_threshold(increase)
        return COOPERATE
```

This strategy maintains a cooperative stance while protecting against exploitation, adapts to group dynamics, and handles various game phases appropriately. It should perform well against both cooperative and mixed strategy populations while remaining true to cooperative principles.
'''

description_COOPERATIVE_108 = '''
# Adaptive Cooperative Strategy: "Forgiving Tit-for-Tat with Declining Forgiveness"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation. It starts cooperative, responds proportionally to defection, but maintains forgiveness that strategically declines as the game progresses to prevent end-game exploitation.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Signal cooperative intent and give others the benefit of the doubt

### Rounds 2 to r-1: Adaptive Response with Forgiveness

**Step 1: Calculate Cooperation Rate**
```
cooperation_rate = (total_cooperators_last_round) / n
```

**Step 2: Determine Forgiveness Threshold**
```
forgiveness_threshold = 0.8 - (0.6 * (current_round - 1) / (r - 2))
```
This creates a declining forgiveness from 0.8 in round 2 to 0.2 in round r-1.

**Step 3: Decision Logic**
```
if cooperation_rate >= forgiveness_threshold:
    action = C
else:
    action = D
```

### Final Round (Round r): Conditional Cooperation
```
if average_cooperation_rate_over_all_previous_rounds >= 0.4:
    action = C
else:
    action = D
```

## Detailed Strategy Description

### 1. **Initial Cooperation Phase**
- Always cooperate in round 1 to establish cooperative intent
- This signals good faith and gives potential cooperators a chance to establish mutual cooperation

### 2. **Adaptive Middle Phase (Rounds 2 to r-1)**
The strategy uses a **declining forgiveness mechanism**:

- **High Forgiveness Early**: Initially requires only 80% cooperation to continue cooperating
- **Decreasing Forgiveness**: Gradually becomes less forgiving, requiring higher cooperation rates
- **Protection Against Exploitation**: By round r-1, requires 80% cooperation rate to continue cooperating

**Mathematical Justification**: 
- When k < n, defecting while others cooperate yields higher individual payoff
- However, mutual cooperation yields higher payoff than mutual defection
- The declining forgiveness balances cooperation promotion with exploitation protection

### 3. **End-Game Protection (Final Round)**
- Uses historical performance (40% threshold) rather than just the previous round
- Prevents being exploited in the final round while still rewarding consistently cooperative environments
- The 40% threshold is below the theoretical cooperation equilibrium but above pure random play

## Edge Case Handling

### **All Players Defect Scenarios**
- If cooperation_rate = 0, strategy defects but remains ready to forgive in subsequent rounds
- Prevents being the sole cooperator indefinitely

### **Mixed Cooperation Scenarios**
- Strategy responds proportionally rather than to individual players
- Focuses on overall group cooperation level, promoting collective welfare

### **High Cooperation Scenarios**
- Continues cooperating as long as group maintains reasonable cooperation levels
- Rewards and sustains cooperative environments

## Robustness Features

1. **Against Pure Defectors**: Protects by defecting when cooperation falls below threshold
2. **Against Tit-for-Tat**: Can establish mutual cooperation through initial cooperation and forgiveness
3. **Against Random Strategies**: Responds to overall cooperation levels rather than individual randomness
4. **Against End-Game Exploitation**: Uses declining forgiveness and historical assessment in final round

## Cooperative Alignment

This strategy is fundamentally cooperative because:
- **Starts with cooperation** to enable mutual cooperation
- **Maintains forgiveness** throughout most of the game
- **Rewards group cooperation** rather than punishing individual defectors
- **Aims for collective welfare** while protecting against systematic exploitation

The strategy balances the social dilemma by being "nice" (never defects first), "retaliatory" (responds to low cooperation), "forgiving" (gives second chances), and "clear" (predictable responses to group behavior).
'''

description_COOPERATIVE_109 = '''
## Cooperative Strategy: "Adaptive Trust Builder"

### Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through adaptive cooperation that builds trust gradually and responds proportionally to the cooperation level in the population.

### Decision Rules

#### Round 1: Optimistic Start
- **Always COOPERATE** in the first round to signal cooperative intent and give the game the best chance for mutual cooperation.

#### Rounds 2 to r-1: Adaptive Cooperation
Use a **cooperation threshold** approach based on population cooperation rate:

1. **Calculate cooperation rate**: `coop_rate = (total_cooperators_last_round) / n`

2. **Determine cooperation threshold**: 
   ```
   threshold = max(0.3, min(0.7, k/n - 0.1))
   ```
   This sets a dynamic threshold based on the multiplication factor, ensuring it's neither too lenient nor too strict.

3. **Decision rule**:
   - If `coop_rate ≥ threshold`: **COOPERATE**
   - If `coop_rate < threshold`: **DEFECT**

4. **Forgiveness mechanism**: Track consecutive rounds of low cooperation. If cooperation rate was below threshold for 3+ consecutive rounds but then shows improvement (current round's rate > previous round's rate), **COOPERATE** regardless of threshold to encourage recovery.

#### Final Round (Round r): Conditional Cooperation
- If the cooperation rate in round r-1 was ≥ 0.5: **COOPERATE** (maintain trust even in final round)
- Otherwise: **DEFECT** (protect against final round exploitation)

### Key Features

#### 1. Adaptive Threshold
The threshold `k/n - 0.1` is strategically chosen because:
- When everyone cooperates, each player gets `k/n` from the public good
- When everyone defects, each player gets 1
- The threshold ensures cooperation when the group is providing sufficient value
- The -0.1 buffer provides tolerance for some defection while maintaining cooperation

#### 2. Forgiveness and Recovery
The strategy includes mechanisms to:
- Forgive occasional defection if overall cooperation is strong
- Encourage recovery from low-cooperation phases
- Prevent permanent punishment cycles

#### 3. Robustness Features
- **Protection against exploitation**: Won't cooperate when too few others do
- **Encouragement of cooperation**: Maintains cooperation when group performance is good
- **Adaptation to group size**: Threshold scales with n and k parameters
- **Memory without grudges**: Uses recent history but allows for behavioral changes

### Pseudocode Summary

```
Strategy: Adaptive Trust Builder

Initialize:
- cooperation_threshold = max(0.3, min(0.7, k/n - 0.1))
- low_coop_streak = 0

For each round t:
  If t == 1:
    return COOPERATE
  
  coop_rate_last = count_cooperators(t-1) / n
  
  If t == r: // Final round
    return COOPERATE if coop_rate_last >= 0.5 else DEFECT
  
  // Check for recovery pattern
  If low_coop_streak >= 3 and t > 2:
    coop_rate_prev = count_cooperators(t-2) / n
    If coop_rate_last > coop_rate_prev:
      low_coop_streak = 0
      return COOPERATE
  
  // Main decision logic
  If coop_rate_last >= cooperation_threshold:
    low_coop_streak = 0
    return COOPERATE
  Else:
    low_coop_streak += 1
    return DEFECT
```

### Strategic Rationale

This strategy balances several key objectives:

1. **Collective welfare**: Actively promotes cooperation when it's beneficial for the group
2. **Individual protection**: Avoids being exploited by predominantly defecting populations
3. **Adaptability**: Responds to changing group dynamics rather than following rigid patterns
4. **Robustness**: Works across different parameter values (n, k, r) and opponent strategies
5. **Simplicity**: Uses clear, observable metrics that don't require complex opponent modeling

The strategy is designed to perform well against both cooperative and competitive opponents while maintaining a fundamentally cooperative orientation that seeks to build and maintain trust in the population.
'''

description_COOPERATIVE_110 = '''
# Adaptive Reciprocal Cooperation Strategy

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation, using the game's economic structure to guide decisions while maintaining a fundamentally cooperative orientation.

## Strategy Overview

### Initial Cooperation Phase
- **Rounds 1-3**: Always cooperate to establish cooperative intent and gather information about opponent behaviors
- **Rationale**: Early cooperation signals good faith and allows observation of others' strategies without premature retaliation

### Adaptive Decision Framework

After round 3, use the following decision process:

#### 1. Cooperation Threshold Analysis
```pseudocode
cooperation_rate = (total_cooperations_observed) / (total_possible_cooperations)
if cooperation_rate >= 0.6:
    default_action = COOPERATE
else if cooperation_rate >= 0.3:
    default_action = CONDITIONAL_COOPERATE
else:
    default_action = SELECTIVE_COOPERATE
```

#### 2. Individual Player Tracking
Maintain cooperation scores for each opponent:
```pseudocode
for each player j:
    player_coop_score[j] = (player_j_cooperations) / (rounds_observed)
```

#### 3. Round-by-Round Decision Logic

**Default Action: COOPERATE** (when cooperation_rate ≥ 0.6)
- Cooperate unless more than 60% of opponents defected in the previous round

**Conditional Cooperation** (when 0.3 ≤ cooperation_rate < 0.6)
- Cooperate if at least 40% of opponents cooperated in the previous round
- Use tit-for-tat with majority: match the action taken by the majority in the previous round

**Selective Cooperation** (when cooperation_rate < 0.3)
- Only cooperate if the expected payoff from cooperation exceeds defection
- Calculate: if (k/n) × (predicted_cooperators + 1) > 1, then cooperate

#### 4. Forgiveness Mechanism
To prevent permanent punishment spirals:
- Every 5 rounds, attempt cooperation regardless of recent history
- If this "forgiveness cooperation" is reciprocated by at least 30% of players, reset to more cooperative stance

#### 5. Endgame Handling
**Final Round**: 
- If overall cooperation rate > 50%, cooperate to reward cooperative players
- If overall cooperation rate ≤ 50%, defect (no future retaliation possible)

**Last 3 Rounds**:
- Gradually reduce cooperation threshold by 10% per round to account for endgame effects
- Maintain cooperation with consistently cooperative players (cooperation score > 0.7)

## Key Features

### Economic Rationality
- Considers the multiplication factor k and group size n in payoff calculations
- Adapts cooperation based on the economic viability of the public good

### Robustness Mechanisms
1. **Anti-exploitation**: Won't cooperate indefinitely with persistent defectors
2. **Recovery capability**: Forgiveness mechanism allows return to cooperation
3. **Information utilization**: Uses full history while weighing recent actions more heavily
4. **Flexible thresholds**: Adapts cooperation criteria based on observed environment

### Cooperative Orientation
- Starts cooperatively and maintains cooperative bias when viable
- Rewards cooperation and only reduces cooperation in response to sustained non-cooperation
- Includes explicit forgiveness to enable renewed cooperation

## Pseudocode Summary

```pseudocode
STRATEGY AdaptiveReciprocalCooperation:
    
    IF round <= 3:
        RETURN COOPERATE
    
    cooperation_rate = calculate_overall_cooperation_rate()
    
    IF round == final_round:
        RETURN COOPERATE if cooperation_rate > 0.5 else DEFECT
    
    IF round % 5 == 0:  // Forgiveness round
        RETURN COOPERATE
    
    IF cooperation_rate >= 0.6:
        RETURN COOPERATE if (defectors_last_round / total_players) < 0.6 else DEFECT
    
    ELSE IF cooperation_rate >= 0.3:
        RETURN COOPERATE if (cooperators_last_round / total_players) >= 0.4 else DEFECT
    
    ELSE:
        expected_cooperators = predict_cooperators_this_round()
        expected_payoff_coop = (k/n) * (expected_cooperators + 1)
        RETURN COOPERATE if expected_payoff_coop > 1 else DEFECT
```

This strategy maintains a cooperative foundation while adaptively protecting against exploitation, using the game's economic structure to make rational decisions that support mutual benefit when viable.
'''

description_COOPERATIVE_111 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated responses and adaptive cooperation thresholds.

## Decision Rules

### Round 1: Cooperative Opening
- **Always cooperate** in the first round to signal cooperative intent and establish a baseline for measuring others' behavior.

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

**Step 1: Calculate Cooperation Metrics**
- `recent_cooperation_rate` = proportion of players who cooperated in the last round
- `historical_cooperation_rate` = average cooperation rate across all previous rounds
- `cooperation_trend` = recent_cooperation_rate - historical_cooperation_rate

**Step 2: Determine Cooperation Threshold**
```pseudocode
base_threshold = k / n  // Economic breakeven point for cooperation
trend_adjustment = cooperation_trend * 0.3
adaptive_threshold = max(0.2, min(0.8, base_threshold + trend_adjustment))
```

**Step 3: Apply Decision Rule**
- **Cooperate** if `recent_cooperation_rate ≥ adaptive_threshold`
- **Defect** if `recent_cooperation_rate < adaptive_threshold`

**Step 4: Forgiveness Mechanism**
- If defecting for 2+ consecutive rounds AND `recent_cooperation_rate > historical_cooperation_rate`, then cooperate to test if the group is recovering

### Final Round: Conditional Cooperation
- **Cooperate** if `historical_cooperation_rate ≥ 0.4`
- **Defect** otherwise

## Key Features

### 1. Graduated Response
- The strategy doesn't immediately punish single defections but responds proportionally to the level of group cooperation
- Higher cooperation in the group leads to more lenient thresholds for continued cooperation

### 2. Economic Rationality
- The base threshold is anchored to `k/n`, which represents the minimum cooperation rate needed for cooperators to break even
- This ensures the strategy has economic grounding while remaining adaptive

### 3. Trend Sensitivity
- Adjusts behavior based on whether cooperation is increasing or decreasing
- Becomes more cooperative when the group trend is positive, more defensive when negative

### 4. Forgiveness and Recovery
- Includes mechanisms to test whether a group in decline might be recovering
- Prevents permanent defection spirals by occasionally testing cooperative waters

### 5. Robust Boundaries
- Threshold bounds (0.2 to 0.8) prevent extreme responses to outlier situations
- Ensures some cooperation even in hostile environments and some caution even in highly cooperative ones

## Strategic Rationale

1. **Against Pure Cooperators**: Maintains high cooperation while benefiting from their consistency
2. **Against Pure Defectors**: Quickly adapts to defect, minimizing exploitation
3. **Against Conditional Cooperators**: Creates positive feedback loops by rewarding group cooperation
4. **Against Mixed Strategies**: Responds proportionally to actual behavior rather than making binary judgments

This strategy balances cooperative intent with self-protection, making it robust across diverse opponent behaviors while maintaining a fundamentally cooperative orientation that can foster positive group dynamics when possible.
'''

description_COOPERATIVE_112 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive response to opponent behavior, using a combination of reciprocity, forgiveness, and strategic defection to maintain cooperation while protecting against exploitation.

## Decision Rules

### Round 1: Cooperative Opening
- **Action**: Always COOPERATE
- **Rationale**: Signal cooperative intent and establish a baseline for measuring others' reciprocity

### Rounds 2 to r-1: Adaptive Reciprocity with Forgiveness

The strategy uses three key components:

#### 1. Cooperation Threshold System
```
cooperation_rate = (total_cooperations_by_others) / (total_possible_cooperations_by_others)
personal_threshold = max(0.3, k/n - 0.1)
```

#### 2. Recent Behavior Weighting
Give more weight to recent rounds using exponential decay:
```
recent_cooperation_rate = weighted_average of last min(5, current_round-1) rounds
weight_factor = 0.7 per round back
```

#### 3. Decision Logic
```
IF recent_cooperation_rate >= personal_threshold:
    COOPERATE
ELSE IF recent_cooperation_rate >= (personal_threshold - 0.2) AND random() < 0.3:
    COOPERATE  // Forgiveness mechanism
ELSE:
    DEFECT
```

### Final Round (Round r): Strategic Response
- **If cooperation_rate ≥ 0.5**: COOPERATE (reward consistent cooperators)
- **If cooperation_rate < 0.5**: DEFECT (prevent final-round exploitation)

## Key Features

### 1. Dynamic Threshold Adaptation
- Base threshold scales with the multiplication factor: higher k/n ratio encourages more cooperation
- Minimum threshold of 0.3 prevents complete exploitation
- Personal threshold adapts based on game parameters

### 2. Forgiveness Mechanism
- 30% chance to cooperate even when cooperation rate is slightly below threshold
- Prevents permanent defection spirals
- Maintains cooperative opportunities

### 3. Recent History Focus
- Weighs last 5 rounds more heavily than early game behavior
- Allows recovery from early mistakes
- Responds quickly to strategy shifts

### 4. Anti-Exploitation Protection
- Will defect when cooperation rates fall significantly
- Protects against consistent defectors
- Maintains individual rationality

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase forgiveness probability to 40%
- Use threshold of max(0.4, k/n - 0.05)
- More sensitive to individual defections

### Low Multiplication Factor (k close to 1)
- Reduce base threshold to k/n - 0.15
- Increase defection probability when exploited
- More cautious cooperation

### High Multiplication Factor (k close to n)
- Increase forgiveness to 50%
- Lower threshold to k/n - 0.2
- Strongly encourage mutual cooperation

### Very Short Games (r ≤ 3)
- Cooperate in rounds 1 and 2
- Defect only in final round if heavily exploited (cooperation_rate < 0.2)

### Very Long Games (r > 20)
- Allow for strategy "resets" every 10 rounds
- If cooperation rate drops below 0.1 for 3 consecutive rounds, attempt one cooperation to test for renewed reciprocity

## Strategic Rationale

1. **Cooperative Foundation**: Always starts cooperatively to enable mutual benefit
2. **Reciprocity**: Responds to others' cooperation levels with appropriate reciprocation
3. **Forgiveness**: Maintains pathways back to cooperation to avoid permanent defection
4. **Protection**: Guards against systematic exploitation while remaining open to cooperation
5. **Adaptability**: Adjusts thresholds and responses based on game parameters and observed behavior

This strategy aims to achieve high mutual cooperation when possible while maintaining robust performance against various opponent strategies, from pure cooperators to sophisticated adaptive strategies.
'''

description_COOPERATIVE_113 = '''
# Adaptive Cooperative Strategy: "Trust-Based Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, starting with trust but becoming more selective based on observed group behavior. It aims to foster cooperation while protecting against systematic exploitation.

## Decision Rules

### Round 1: Optimistic Start
- **Always cooperate** regardless of parameters
- Rationale: Signal cooperative intent and gather initial information about opponents

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Dynamics

**Primary Decision Logic:**
1. **Calculate Group Cooperation Rate (GCR)** from previous round:
   - GCR = (number of cooperators in last round) / (n-1)

2. **Determine Cooperation Threshold:**
   - Base threshold = k/n (the break-even point for mutual cooperation)
   - Adjusted threshold = max(0.3, k/n - 0.1)
   - This ensures we don't abandon cooperation too quickly even in harsh parameter settings

3. **Apply Decision Rule:**
   - If GCR ≥ adjusted threshold: **Cooperate**
   - If GCR < adjusted threshold: Apply **Conditional Cooperation Logic**

**Conditional Cooperation Logic:**
- Track personal "trust score" for the group:
  - Start with trust_score = 1.0
  - After each round: trust_score = 0.8 × trust_score + 0.2 × GCR
- If trust_score ≥ 0.4: **Cooperate** (give benefit of doubt)
- If trust_score < 0.4: **Defect** (protect against exploitation)

### Final Round (Round r): Reciprocal Finish
- If average cooperation rate across all previous rounds ≥ 0.5: **Cooperate**
- Otherwise: **Defect**
- Rationale: Reward groups that maintained reasonable cooperation levels

## Edge Case Handling

### Small Groups (n ≤ 3)
- Be more forgiving: reduce adjusted threshold by additional 0.1
- Cooperation is more fragile in small groups, so maintain higher tolerance

### Low Multiplication Factor (k < 1.5)
- Increase trust score decay rate to 0.7 (from 0.8) to adapt faster to unfavorable conditions
- Cooperation is less rewarding, so be more responsive to defection

### High Multiplication Factor (k > 2.5)
- Increase adjusted threshold by 0.1 to encourage more persistent cooperation
- High rewards justify taking more risks

### Short Games (r ≤ 3)
- Rounds 1 and r: Always cooperate
- Middle rounds: Only defect if GCR = 0 in previous round

## Key Features

1. **Cooperative by Default:** Starts cooperating and has bias toward cooperation
2. **Adaptive Learning:** Adjusts behavior based on observed group dynamics
3. **Exploitation Protection:** Won't be systematically exploited by all-defect strategies
4. **Parameter Sensitivity:** Adjusts thresholds based on game parameters
5. **Forgiveness Mechanism:** Trust score allows recovery from temporary defection waves
6. **Group Size Awareness:** Different tolerance levels for different group sizes

## Pseudocode Summary

```
Strategy: Trust-Based Reciprocator

Initialize:
  trust_score = 1.0
  adjusted_threshold = max(0.3, k/n - 0.1)
  
For each round t:
  if t == 1:
    return COOPERATE
    
  if t == r:  # Final round
    if average_cooperation_rate >= 0.5:
      return COOPERATE
    else:
      return DEFECT
      
  # Middle rounds
  GCR = cooperators_last_round / (n-1)
  trust_score = 0.8 * trust_score + 0.2 * GCR
  
  if GCR >= adjusted_threshold:
    return COOPERATE
  else if trust_score >= 0.4:
    return COOPERATE
  else:
    return DEFECT
```

This strategy is designed to be genuinely cooperative while being robust enough to avoid exploitation, making it effective across diverse opponent behaviors and game parameters.
'''

description_COOPERATIVE_114 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances strong cooperative intent with adaptive responsiveness to maintain cooperation while protecting against exploitation. It starts cooperatively, rewards group cooperation, and responds proportionally to defection levels.

## Decision Rules

### Round 1: Unconditional Cooperation
- **Action**: Always cooperate (C)
- **Rationale**: Signal cooperative intent and give others the benefit of the doubt

### Rounds 2 to r-1: Adaptive Cooperation Based on Group Behavior

The strategy uses a **cooperation threshold** that adapts based on recent group behavior:

```pseudocode
cooperation_rate = (total_cooperators_last_round) / n
recent_cooperation_trend = weighted_average_of_last_3_rounds_cooperation_rates

if recent_cooperation_trend >= 0.6:
    cooperate()  // High cooperation environment
else if recent_cooperation_trend >= 0.4:
    cooperate_with_probability(0.7)  // Mixed environment - mostly cooperate
else if recent_cooperation_trend >= 0.2:
    cooperate_with_probability(0.3)  // Low cooperation - occasional cooperation
else:
    defect()  // Very hostile environment - protect yourself
```

### Forgiveness Mechanism
Every 3-4 rounds, regardless of recent history:
- Cooperate with probability 0.5 to test if cooperation can be restored
- This prevents permanent defection spirals

### Round r (Final Round): Conditional Cooperation
- If group cooperation rate in round r-1 was ≥ 0.5: Cooperate
- Otherwise: Defect
- **Rationale**: Reward good final behavior while protecting against end-game defection

## Adaptive Parameters

### Cooperation Thresholds
- **High cooperation threshold**: 0.6 (cooperate when 60%+ cooperated recently)
- **Mixed threshold**: 0.4-0.6 (probabilistic cooperation)
- **Low threshold**: 0.2-0.4 (occasional cooperation to test waters)
- **Hostile threshold**: <0.2 (primarily defect for self-protection)

### Weighted Recent History
Calculate recent trend using last 3 rounds with weights [0.5, 0.3, 0.2]:
```pseudocode
recent_trend = 0.5 * cooperation_rate(t-1) + 
               0.3 * cooperation_rate(t-2) + 
               0.2 * cooperation_rate(t-3)
```

## Edge Case Handling

### First Round
- Always cooperate to establish cooperative intent

### Early Rounds (2-3)
- Use simplified thresholds since limited history available
- Be more forgiving (lower threshold for cooperation)

### Final Round
- Conditional cooperation based on previous round
- Avoids being exploited by end-game defectors while rewarding cooperative groups

### Small Groups (n ≤ 3)
- Use higher cooperation thresholds since each player's impact is larger
- Be more responsive to individual actions

### Short Games (r ≤ 5)
- Maintain higher cooperation rates throughout
- Reduce forgiveness frequency to avoid exploitation

## Robustness Features

1. **Anti-Exploitation**: Won't cooperate indefinitely against consistent defectors
2. **Forgiveness**: Periodic cooperation attempts prevent permanent punishment
3. **Proportional Response**: Reaction intensity matches group cooperation level
4. **Trend Analysis**: Uses weighted recent history rather than just last round
5. **Endgame Protection**: Prevents final-round exploitation while rewarding cooperation

## Strategic Rationale

This strategy succeeds because it:
- **Signals Cooperation**: Starts cooperatively and maintains it when reciprocated
- **Adapts Dynamically**: Responds to changing group dynamics without being too reactive
- **Encourages Cooperation**: Rewards cooperative groups with continued cooperation
- **Protects Against Exploitation**: Reduces cooperation when faced with persistent defection
- **Maintains Forgiveness**: Periodically tests for renewed cooperation opportunities
- **Handles Edge Cases**: Specifically addresses first/last rounds and small groups

The strategy aims to foster cooperative equilibria while remaining robust against various opponent strategies, from pure cooperators to sophisticated adaptive defectors.
'''

description_COOPERATIVE_115 = '''
# Adaptive Cooperation Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive responsiveness. It starts cooperatively, rewards collective cooperation, but protects against exploitation while maintaining pathways back to cooperation.

## Decision Rules

### Round 1: Cooperative Start
- **Always cooperate** in the first round to signal cooperative intent and give the group the best chance at establishing mutual cooperation.

### Rounds 2 to r-1: Adaptive Response System

**Step 1: Calculate Cooperation Health Score**
```
cooperation_rate = (total_cooperators_last_round) / n
recent_cooperation_trend = average cooperation rate over last min(3, current_round-1) rounds
health_score = 0.7 × cooperation_rate + 0.3 × recent_cooperation_trend
```

**Step 2: Apply Decision Logic**
- **If health_score ≥ 0.6**: Cooperate (group is sufficiently cooperative)
- **If health_score < 0.3**: Defect (group is predominantly defecting)
- **If 0.3 ≤ health_score < 0.6**: Apply nuanced logic:
  - If cooperation rate increased from previous round: Cooperate (reward improvement)
  - If cooperation rate decreased significantly (drop > 0.3): Defect (respond to deterioration)
  - Otherwise: Cooperate with probability = health_score (mixed strategy based on group health)

### Final Round: Conditional Cooperation
- **If overall cooperation rate across all previous rounds ≥ 0.5**: Cooperate (reward a generally cooperative group)
- **Otherwise**: Defect (protect against final-round exploitation)

## Key Strategic Features

### 1. **Forgiveness Mechanism**
The strategy doesn't permanently punish defection. If cooperation levels recover (health_score improves), the strategy returns to cooperation. This prevents endless punishment cycles.

### 2. **Graduated Response**
Rather than binary tit-for-tat, the strategy uses graduated responses based on the overall health of cooperation, making it robust against noise and individual defections.

### 3. **Trend Sensitivity**
The strategy considers both current cooperation levels and recent trends, allowing it to:
- Reward groups moving toward cooperation
- Respond quickly to groups abandoning cooperation
- Maintain cooperation in stable cooperative environments

### 4. **Group-Level Thinking**
Unlike strategies that track individual players, this focuses on collective behavior, making it:
- Simpler to implement
- More robust to player turnover or mixed strategies
- Aligned with the public goods nature of the game

### 5. **Protection Against Exploitation**
- Won't cooperate when cooperation rates are very low (< 0.3)
- Uses probabilistic cooperation in uncertain middle ranges
- Defects in final round if the group has been predominantly uncooperative

## Robustness Features

**Against Always Defect opponents**: Quickly identifies low cooperation and switches to defection to protect payoffs.

**Against Always Cooperate opponents**: Maintains cooperation throughout, maximizing mutual gains.

**Against Tit-for-Tat variants**: The forgiveness mechanism prevents endless punishment cycles while still responding to defection.

**Against Random strategies**: The trend analysis and health scoring smooth out noise from random play.

**Against Sophisticated adaptive strategies**: The graduated response and group-level focus make it difficult to exploit while maintaining cooperative potential.

## Parameter Sensitivity
The strategy adapts to different game parameters:
- **High k values**: More willing to maintain cooperation even with some defectors
- **Low k values**: More sensitive to defection, switches to protection mode faster  
- **High n values**: Focuses more on overall trends rather than individual round fluctuations
- **Long games (high r)**: Allows more time for forgiveness and recovery of cooperation

This strategy aims to be a good "citizen" in cooperative environments while protecting against exploitation, making it suitable for tournament play against diverse opponent strategies.
'''

description_COOPERATIVE_116 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Momentum"

## Core Philosophy
This strategy balances cooperation with self-protection by being initially cooperative, forgiving occasional defections, but firm against persistent free-riding. It adapts to the overall cooperation level in the game while maintaining a cooperative orientation.

## Decision Rules

### Round 1: Always Cooperate
- Start with cooperation to signal willingness to work together
- Establishes cooperative baseline

### Rounds 2 to r-1: Adaptive Response Based on Three Factors

**Factor 1: Recent Group Cooperation Rate**
- Calculate cooperation rate of ALL players (including self) in previous round: `group_coop_rate = total_cooperators_last_round / n`

**Factor 2: Personal Treatment Score** 
- Track how often others have "reciprocated" your cooperation
- `reciprocation_score = (times_others_cooperated_when_I_cooperated) / (times_I_cooperated + 1)`
- This measures if your cooperation is being matched by others

**Factor 3: Game Phase Momentum**
- Early game (rounds 1 to r/3): Bias toward cooperation to establish norms
- Mid game (rounds r/3 to 2r/3): Balanced response
- Late game (final r/3 rounds): Slightly more cautious but still cooperative

### Decision Algorithm for Rounds 2 to r-1:

```pseudocode
if group_coop_rate >= 0.6:
    COOPERATE  // High group cooperation - join in
elif group_coop_rate >= 0.4:
    if reciprocation_score >= 0.5:
        COOPERATE  // Moderate group cooperation, good personal treatment
    else:
        COOPERATE with 70% probability  // Still mostly cooperative but cautious
elif group_coop_rate >= 0.2:
    if reciprocation_score >= 0.6:
        COOPERATE  // Low group cooperation but others reciprocate my cooperation
    else:
        COOPERATE with 40% probability  // Mostly defect but give some chances
else:  // group_coop_rate < 0.2
    if reciprocation_score >= 0.7:
        COOPERATE with 30% probability  // Very low cooperation, only cooperate if strong reciprocation
    else:
        DEFECT  // Protect against widespread defection
```

### Final Round (Round r): Conditional Cooperation
- If `group_coop_rate` in round r-1 >= 0.5: **COOPERATE** (reward good group behavior)
- If `reciprocation_score` >= 0.6: **COOPERATE** (reward those who reciprocated)
- Otherwise: **DEFECT** (end-game protection)

## Key Features

### 1. Forgiveness and Generosity
- Uses probabilistic cooperation in borderline cases rather than harsh cutoffs
- Gives multiple chances even when group cooperation is declining
- Initial cooperation bias helps establish good norms

### 2. Adaptive Thresholds
- Responds to actual group behavior rather than assuming fixed strategies
- Higher tolerance for defection if personal treatment is good
- Adjusts expectations based on what's achievable in current group

### 3. Protection Against Exploitation
- Reduces cooperation when consistently exploited
- End-game protection in final round
- Won't cooperate indefinitely with pure defectors

### 4. Momentum Building
- Strong initial cooperation signal
- Rewards group cooperation with continued cooperation
- Creates positive feedback loops when possible

## Edge Case Handling

- **All others always defect**: Strategy will eventually defect most of the time but occasionally cooperate to test for change
- **All others always cooperate**: Strategy will cooperate consistently, maintaining the good equilibrium  
- **Mixed strategies**: Strategy adapts to the actual cooperation level and personal treatment received
- **Changing opponent behavior**: Responsive to recent behavior changes through group cooperation rate tracking

This strategy aims to foster cooperation when possible while protecting against exploitation, making it robust across diverse opponent mixes in tournament play.
'''

description_COOPERATIVE_117 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Majority"

## Core Philosophy
This strategy aims to foster cooperation while being resilient to exploitation. It balances optimism with pragmatic adaptation based on the collective behavior observed in the game.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C
- **Rationale**: Start with good faith to signal cooperative intent and give the group the best chance to establish a cooperative equilibrium.

### Rounds 2 to r-1: Adaptive Cooperation
The strategy uses a **cooperation threshold** mechanism:

1. **Calculate cooperation rate**: `coop_rate = (total cooperators in previous round) / n`

2. **Determine threshold**: 
   - Base threshold: `threshold = (k-1) / (k+1)`
   - This represents the theoretical "break-even" point where cooperation becomes collectively rational
   - For typical values (k=2, n=6), this gives threshold ≈ 0.33

3. **Apply generosity factor**:
   - Actual threshold = `max(0.2, threshold - 0.1)`
   - This makes the strategy more forgiving and willing to cooperate even when cooperation rates are somewhat low

4. **Decision rule**:
   - If `coop_rate >= actual_threshold`: **Cooperate** (C)
   - If `coop_rate < actual_threshold`: **Defect** (D)

### Last Round (Round r): Strategic Defection
- **Action**: D
- **Rationale**: Since there's no future to incentivize, rational players will likely defect. However, maintain cooperation if the group has been exceptionally cooperative (≥80% cooperation rate in previous round).

## Adaptive Features

### Momentum Tracking
The strategy tracks cooperation momentum over the last 3 rounds:
- If cooperation has been increasing consistently, lower the threshold by 0.05
- If cooperation has been decreasing consistently, raise the threshold by 0.05
- This helps the strategy adapt to emerging trends

### Forgiveness Mechanism
After any round where the strategy defected:
- Reduce the threshold by 0.1 for the next round only
- This gives the group a chance to recover from low-cooperation states

## Pseudocode

```
function decide_action(round, n, k, r, history):
    if round == 1:
        return C
    
    # Calculate base threshold
    base_threshold = (k - 1) / (k + 1)
    actual_threshold = max(0.2, base_threshold - 0.1)
    
    # Get cooperation rate from previous round
    prev_round_coops = count_cooperators(history[round-1])
    coop_rate = prev_round_coops / n
    
    # Apply momentum adjustment if we have enough history
    if round >= 4:
        momentum = calculate_momentum(history, round-3, round-1)
        if momentum > 0:  # Increasing cooperation
            actual_threshold -= 0.05
        elif momentum < 0:  # Decreasing cooperation
            actual_threshold += 0.05
    
    # Apply forgiveness if we defected last round
    if my_previous_action(history, round-1) == D:
        actual_threshold -= 0.1
    
    # Last round special case
    if round == r:
        if coop_rate >= 0.8:
            return C  # Reward exceptional group cooperation
        else:
            return D  # Standard end-game defection
    
    # Main decision rule
    if coop_rate >= actual_threshold:
        return C
    else:
        return D
```

## Robustness Features

1. **Protection against exploitation**: Won't cooperate if too few others do
2. **Encourages cooperation**: Generous threshold and forgiveness mechanisms
3. **Adapts to group dynamics**: Momentum tracking adjusts to trends
4. **Handles edge cases**: Specific rules for first/last rounds
5. **Parameter-independent**: Threshold scales with k and works for any n

This strategy should perform well against a diverse range of opponents, from unconditional cooperators to sophisticated adaptive strategies, while maintaining a fundamentally cooperative orientation that can help establish and maintain beneficial group outcomes.
'''

description_COOPERATIVE_118 = '''
# Adaptive Cooperative Strategy: "Generous Tit-for-Tat with Collective Forgiveness"

## Core Philosophy
This strategy balances cooperation with protection against exploitation by adapting to the collective behavior of all players rather than tracking individuals. It starts cooperative, forgives occasional defections, but becomes more cautious when facing persistent free-riding.

## Decision Rules

### Round 1: Always Cooperate
- **Action**: C (Cooperate)
- **Rationale**: Establish cooperative intent and test the waters

### Rounds 2 to r-1: Adaptive Response Based on Collective Cooperation Rate

**Calculate Collective Cooperation Rate (CCR)**:
```
CCR = (Total cooperations by all other players in previous round) / (n-1)
```

**Decision Logic**:
1. **High Cooperation Environment** (CCR ≥ 0.6):
   - **Action**: C (Cooperate)
   - **Rationale**: When most others cooperate, cooperation is profitable and sustainable

2. **Mixed Cooperation Environment** (0.3 ≤ CCR < 0.6):
   - Apply **Generous Forgiveness Rule**:
   - If I cooperated last round AND CCR dropped by more than 0.3 from previous round:
     - **Action**: D (Defect) - Signal disapproval
   - Otherwise:
     - **Action**: C (Cooperate) - Give benefit of doubt

3. **Low Cooperation Environment** (CCR < 0.3):
   - Apply **Conditional Cooperation**:
   - If CCR has been < 0.3 for 2+ consecutive rounds:
     - **Action**: D (Defect) - Protect against exploitation
   - Otherwise:
     - **Action**: C (Cooperate) - One more chance

### Final Round (Round r): Conditional Cooperation
- **If CCR in round r-1 ≥ 0.5**: C (Cooperate)
- **Otherwise**: D (Defect)
- **Rationale**: No future retaliation possible, so only cooperate if others have shown consistent cooperation

## Key Features

### 1. Collective Focus
- Tracks group behavior rather than individual actions
- Robust against player identity confusion
- Scales naturally with group size

### 2. Graduated Response
- Three distinct cooperation thresholds prevent overreaction
- Allows for occasional defections without immediate retaliation
- Escalates response only when facing persistent free-riding

### 3. Forgiveness Mechanism
- Doesn't permanently punish after single defection waves
- Gives groups multiple chances to return to cooperation
- Distinguishes between temporary and systematic defection

### 4. Early Warning System
- The "generous forgiveness rule" signals when cooperation is declining
- Brief defection serves as communication tool
- Helps coordinate group response to emerging free-riders

## Pseudocode Summary

```
if round == 1:
    return COOPERATE

ccr = count_cooperators_last_round() / (n-1)
prev_ccr = count_cooperators_round(current_round-2) / (n-1)

if round == r:  // Final round
    return COOPERATE if ccr >= 0.5 else DEFECT

if ccr >= 0.6:
    return COOPERATE
    
elif ccr >= 0.3:
    if (my_last_action == COOPERATE) and (ccr < prev_ccr - 0.3):
        return DEFECT  // Signal disapproval
    else:
        return COOPERATE
        
else:  // ccr < 0.3
    consecutive_low = count_consecutive_rounds_with_ccr_below_30()
    if consecutive_low >= 2:
        return DEFECT  // Protect against exploitation
    else:
        return COOPERATE  // Give one more chance
```

## Strategic Advantages

1. **Exploitation Resistant**: Protects against systematic free-riding while maintaining cooperative potential
2. **Coordination Friendly**: Helps establish and maintain group cooperation norms
3. **Adaptive**: Responds appropriately to different group dynamics
4. **Tournament Robust**: Performs well against both cooperative and competitive strategies
5. **Parameter Independent**: Thresholds work across different values of n, k, and r

This strategy aims to maximize collective welfare while protecting against exploitation, making it both principled and pragmatic for tournament play.
'''

description_COOPERATIVE_119 = '''
# Adaptive Reciprocal Cooperation Strategy (ARCS)

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation. It starts optimistically but learns from the group's behavior to maintain sustainability while maximizing collective benefit.

## Decision Rules

### 1. Opening Phase (First Round)
**Always cooperate** to signal cooperative intent and establish a foundation for mutual benefit.

### 2. Main Phase (Rounds 2 to r-1)
Use a **dynamic cooperation threshold** based on recent group behavior:

```pseudocode
cooperation_threshold = max(0.3, recent_cooperation_rate - 0.1)

if (recent_cooperation_rate >= cooperation_threshold):
    cooperate
else:
    defect
```

Where `recent_cooperation_rate` is calculated as:
- For rounds 2-4: Average cooperation rate across all previous rounds
- For rounds 5+: Weighted average of last 3 rounds (weights: 0.5, 0.3, 0.2 for most recent to oldest)

### 3. Endgame Phase (Final Round)
**Cooperate if and only if** the cooperation rate in the previous round was ≥ 40%. This prevents complete collapse while avoiding being exploited in the final round.

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
- **Minimum threshold**: 30% (prevents complete abandonment of cooperation)
- **Threshold depression**: -10% below recent performance (creates slight tolerance for temporary defection)
- **Recency weighting**: More recent rounds matter more, allowing quick adaptation to changing group dynamics

### Forgiveness Protocol
If cooperation rate drops below 20% for 2 consecutive rounds but then recovers above 50%, reset to cooperative stance for one round to test if the group is attempting to rebuild cooperation.

## Robustness Features

### Against Always-Defectors
- The 30% minimum threshold ensures we eventually defect against persistently non-cooperative groups
- Weighted recent history prevents being fooled by early cooperation followed by sustained defection

### Against Conditional Cooperators
- Starting with cooperation helps establish mutual cooperation with like-minded strategies
- The threshold system allows coordination with other adaptive strategies

### Against Exploitative Strategies
- The endgame rule prevents last-round exploitation
- The threshold being below the recent rate means we're slightly more demanding than the current norm, encouraging upward cooperation

### Against Random/Unpredictable Players
- Weighted averaging smooths out noise from random strategies
- The forgiveness protocol allows recovery from temporary cooperation breakdowns

## Strategic Rationale

1. **Cooperative Signal**: Opening cooperation and willingness to re-cooperate signals good intent
2. **Adaptive Learning**: Recent performance weighting allows quick response to group dynamics
3. **Exploitation Protection**: Threshold below recent rate and endgame rule prevent being systematically exploited
4. **Collective Benefit**: The strategy promotes group cooperation while maintaining individual sustainability

This strategy should perform well against a diverse field by:
- Establishing cooperation with other cooperative strategies
- Adapting to partially cooperative environments
- Protecting against exploitation
- Maintaining some cooperation even in difficult environments (via the 30% minimum threshold)

The key insight is that successful cooperation requires being **slightly more demanding than the current norm** while remaining **open to improvement** - this creates gentle upward pressure on group cooperation levels while avoiding exploitation.
'''

description_COOPERATIVE_120 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperation with self-protection by starting cooperatively, adapting to the group's behavior, and using graduated responses to encourage cooperation while deterring exploitation.

## Decision Rules

### 1. First Round Behavior
**Always cooperate (C) in round 1**
- Establishes cooperative intent
- Provides initial signal to other cooperative players
- Tests the waters for reciprocal cooperation

### 2. Cooperation Threshold System
The strategy maintains a dynamic **cooperation threshold** that determines when to cooperate based on recent group behavior.

**Cooperation Condition:**
Cooperate if `recent_cooperation_rate >= cooperation_threshold`

Where:
- `recent_cooperation_rate` = proportion of other players who cooperated in the last round
- `cooperation_threshold` starts at 0.3 and adapts based on experience

### 3. Threshold Adaptation Logic
The threshold adjusts based on the success of cooperative attempts:

```pseudocode
If I cooperated last round:
    If my_payoff >= expected_payoff_from_defection:
        cooperation_threshold = max(0.2, cooperation_threshold - 0.1)  // Become more trusting
    Else:
        cooperation_threshold = min(0.8, cooperation_threshold + 0.15)  // Become more cautious

If I defected last round:
    If recent_cooperation_rate > 0.5:
        cooperation_threshold = cooperation_threshold - 0.05  // Reward group cooperation
```

### 4. Forgiveness Mechanism
**Periodic Cooperation Tests:**
Every 4-5 rounds (depending on `r/4`), attempt cooperation regardless of threshold if:
- Current cooperation_threshold > 0.6 (indicating low trust environment)
- Group cooperation rate has improved in last 2 rounds
- This prevents permanent defection spirals

### 5. Endgame Handling
**Final Round Strategy:**
- If `current_round == r`: Apply stricter threshold (cooperation_threshold + 0.2)
- If `current_round >= r-2`: Consider recent trend - cooperate only if strong upward cooperation trend

**Late Game Adaptation:**
- In final 20% of rounds: Weight recent history more heavily
- Reduce forgiveness frequency to avoid end-game exploitation

## Edge Cases and Special Conditions

### Cold Start (Early Rounds 1-3)
- Round 1: Always cooperate
- Round 2-3: Cooperate if at least 1 other player cooperated in previous round
- This prevents immediate abandonment due to early defection

### All-Defection Environment
If cooperation rate falls below 0.1 for 3 consecutive rounds:
- Switch to "patient defection" mode
- Defect for 2 rounds, then test cooperation once
- If test fails, repeat cycle with longer defection periods

### High Cooperation Environment
If cooperation rate exceeds 0.8 for 3 consecutive rounds:
- Lower threshold to 0.2
- Increase forgiveness - cooperate even after single round exploitation
- This maximizes mutual benefit in cooperative groups

## Robustness Features

### 1. Noise Tolerance
- Don't overreact to single-round defections in otherwise cooperative environments
- Use moving averages rather than single-round decisions

### 2. Exploitation Protection
- Never cooperate when being consistently exploited (threshold prevents this)
- Graduated response prevents being a "sucker"

### 3. Cooperation Recovery
- Regular forgiveness tests allow recovery from defection spirals
- Adaptive threshold prevents permanent mistrust

## Parameter Sensitivity

The strategy automatically adjusts to game parameters:
- **High n (many players)**: Slightly lower initial threshold since coordination is harder
- **High k (high multiplication factor)**: More aggressive cooperation seeking
- **Long r (many rounds)**: More patient with forgiveness and adaptation

## Example Execution
```pseudocode
Round 1: Cooperate
Round 2: If ≥30% of others cooperated in Round 1 → Cooperate, else Defect
Round 3+: 
    Calculate recent_cooperation_rate
    If recent_cooperation_rate >= cooperation_threshold:
        Cooperate
    Else:
        Defect
    Update cooperation_threshold based on results
    Apply periodic forgiveness if conditions met
```

This strategy is designed to:
1. **Start cooperatively** to enable mutual cooperation
2. **Adapt quickly** to the actual behavior of opponents
3. **Protect against exploitation** while remaining open to cooperation
4. **Recover from conflicts** through strategic forgiveness
5. **Handle diverse environments** from highly competitive to highly cooperative
'''

description_COOPERATIVE_121 = '''
# Adaptive Threshold Cooperation Strategy (ATCS)

## Core Philosophy
This strategy balances cooperation with protection against exploitation by maintaining an adaptive threshold for cooperation based on observed group behavior patterns.

## Decision Rules

### Initial Cooperation Phase (Rounds 1-3)
- **Round 1**: Always COOPERATE (establish cooperative intent)
- **Rounds 2-3**: COOPERATE if at least 1 other player cooperated in the previous round, otherwise DEFECT

### Main Game Phase (Rounds 4 to r-2)

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(1, floor(n * base_threshold * momentum_factor))

where:
- base_threshold = 0.3 + (k-1)/(n-1) * 0.4  // Higher k makes cooperation more attractive
- momentum_factor = recent_cooperation_rate^0.5  // Reward sustained cooperation
- recent_cooperation_rate = cooperation_rate over last 3 rounds
```

**Decision Rule:**
- COOPERATE if: `cooperators_last_round >= cooperation_threshold`
- DEFECT otherwise

**Forgiveness Mechanism:**
- If cooperation rate drops below 20% for 2 consecutive rounds, attempt to restart cooperation by cooperating once every 3 rounds until cooperation improves

### Endgame Phase (Last 2 rounds: r-1 and r)

**Round r-1 (Second to last):**
- COOPERATE if average cooperation rate over the game is ≥ 40%
- DEFECT otherwise

**Round r (Final round):**
- COOPERATE if:
  - At least 2 players cooperated in round r-1, AND
  - Personal payoff from cooperating in final round ≥ expected payoff from defecting
- DEFECT otherwise

## Adaptive Features

### Dynamic Threshold Adjustment
The cooperation threshold adapts based on:
1. **Game parameters**: Higher k/n ratios increase base cooperation tendency
2. **Recent history**: Success breeds success through momentum factor
3. **Group size**: Larger groups require lower absolute thresholds

### Exploitation Protection
- Never cooperate if fewer than 1 other player has cooperated recently
- Reduce cooperation threshold if being consistently exploited (cooperation rate < 20%)

### Recovery Mechanism
- Attempt to restart cooperation after periods of mutual defection
- Gradually increase cooperation based on positive responses from others

## Edge Case Handling

### First Round
Always cooperate to signal cooperative intent and test group disposition.

### Small Groups (n ≤ 3)
Use higher base threshold (0.5) since each player's contribution has greater impact.

### High Multiplication Factor (k > 0.8n)
Increase base cooperation tendency since public good is highly efficient.

### All Players Defecting
Attempt cooperation every 3rd round to test if conditions have changed.

### Dominant Strategy Situations
If k ≥ n, cooperation becomes dominant - always cooperate after round 1.

## Robustness Features

1. **History Window**: Uses recent 3-round window to balance responsiveness with stability
2. **Minimum Cooperation**: Always maintains some probability of cooperation to enable recovery
3. **Parameter Sensitivity**: Adapts behavior based on game's economic incentives (k/n ratio)
4. **Exploitation Recovery**: Has mechanisms to restart cooperation after mutual defection spirals

## Pseudocode Summary

```
if round == 1:
    return COOPERATE
    
if round <= 3:
    return COOPERATE if any_cooperated_last_round else DEFECT
    
if round >= r-1:  // Endgame
    return endgame_decision()
    
// Main phase
threshold = calculate_adaptive_threshold()
last_round_cooperators = count_cooperators(round - 1)

if last_round_cooperators >= threshold:
    return COOPERATE
else:
    return DEFECT
```

This strategy is designed to be genuinely cooperative while protecting against exploitation, adapting to the specific game parameters and opponent behaviors encountered.
'''

description_COOPERATIVE_122 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive learning, using graduated responses rather than binary punishment. It aims to build and maintain cooperative coalitions while protecting against exploitation.

## Decision Framework

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to signal cooperative intent and gather information about opponent tendencies

### 2. Adaptive Cooperation Threshold
Calculate a dynamic cooperation threshold based on:
- **Base cooperation rate**: Start with expectation that k/n fraction should cooperate for efficiency
- **Observed cooperation**: Track actual cooperation rates from previous rounds
- **Trend analysis**: Weight recent rounds more heavily than distant ones

```
cooperation_threshold = max(k/n, weighted_average_cooperation_rate * 0.8)
```

### 3. Main Decision Rule (Rounds 4 to r-2)

**Cooperate if ANY of these conditions are met:**

a) **Coalition Maintenance**: If cooperation rate in previous round ≥ cooperation_threshold
   - Reward sustained cooperation from the group

b) **Forgiveness Protocol**: If current round number mod 4 = 0
   - Periodic forgiveness to break negative cycles
   - Allows recovery from mutual defection traps

c) **Efficiency Rescue**: If cooperation rate has been below k/n for 3+ consecutive rounds
   - Attempt to restart cooperation when group is clearly underperforming

d) **Trend Reward**: If cooperation rate increased in the last round compared to the round before
   - Encourage positive momentum

**Otherwise**: Defect (D)

### 4. Endgame Handling (Last 2 Rounds)

**Round r-1**: 
- Cooperate if average cooperation rate over all previous rounds ≥ k/n
- This rewards groups that maintained reasonable cooperation throughout

**Final Round r**:
- Cooperate if cooperation rate in round r-1 ≥ cooperation_threshold
- Maintains reputation even in final interaction

### 5. Edge Cases and Robustness Features

**Small Group Adjustment** (n ≤ 4):
- Increase forgiveness frequency: forgive every 3rd round instead of 4th
- Lower cooperation threshold by 10% to account for higher variance

**High Multiplication Factor** (k > 1.5n):
- When cooperation is highly efficient, be more forgiving
- Cooperate if cooperation rate ≥ 0.3 instead of using calculated threshold

**Exploitation Detection**:
- If personal payoff is consistently in bottom 25% while cooperating frequently, increase defection probability by 20%
- Prevents being exploited by free-riders

## Strategy Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return C
    
    if round <= 3:
        return C
    
    cooperation_rates = calculate_cooperation_rates(history)
    threshold = max(k/n, weighted_average(cooperation_rates) * 0.8)
    
    # Endgame
    if round == r:
        return C if cooperation_rates[-1] >= threshold else D
    if round == r-1:
        return C if average(cooperation_rates) >= k/n else D
    
    # Main decision logic
    last_coop_rate = cooperation_rates[-1]
    
    # Coalition maintenance
    if last_coop_rate >= threshold:
        return C
    
    # Forgiveness protocol
    if round % 4 == 0:
        return C
    
    # Efficiency rescue
    if consecutive_low_cooperation(cooperation_rates, k/n) >= 3:
        return C
    
    # Trend reward
    if len(cooperation_rates) >= 2 and cooperation_rates[-1] > cooperation_rates[-2]:
        return C
    
    return D
```

## Key Strategic Advantages

1. **Adaptive**: Adjusts expectations based on actual group behavior rather than fixed assumptions
2. **Forgiving**: Built-in mechanisms to escape defection cycles
3. **Exploiter-resistant**: Responds to consistently low cooperation with defection
4. **Trend-sensitive**: Rewards improving cooperation to encourage positive momentum
5. **Endgame stable**: Maintains cooperation incentives even in final rounds when others might defect

This strategy should perform well against a diverse set of opponents while maintaining a fundamentally cooperative orientation.
'''

description_COOPERATIVE_123 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while protecting against exploitation through graduated responses and strategic forgiveness. It balances cooperation with calculated defection based on observed group dynamics.

## Decision Rules

### Initial Phase (First Round)
**Always cooperate** in round 1 to signal cooperative intent and establish a positive baseline.

### Main Strategy (Rounds 2 to r-1)

#### 1. Cooperation Threshold Calculation
Calculate the **minimum cooperation level** needed for individual rationality:
- `min_cooperators = ceiling(n/k)` 
- This ensures that contributing is individually profitable when enough others contribute

#### 2. Group Cooperation Assessment
Track the **cooperation rate** over recent history:
- `recent_coop_rate = (cooperators in last 3 rounds) / (3 × n)`
- Use a sliding window to weight recent behavior more heavily

#### 3. Primary Decision Logic
```
IF recent_coop_rate >= (min_cooperators / n):
    # Group shows sufficient cooperation
    Cooperate with probability 0.9
    
ELIF recent_coop_rate >= 0.3:
    # Moderate cooperation - match the group's level
    Cooperate with probability = recent_coop_rate + 0.1
    
ELSE:
    # Low cooperation - use graduated punishment
    IF consecutive_rounds_of_low_coop < 3:
        Cooperate with probability 0.3  # Give chances
    ELSE:
        Cooperate with probability 0.1  # Minimal cooperation
```

#### 4. Forgiveness Mechanism
Every 4 rounds, regardless of recent history:
- Reset punishment counters
- Cooperate with probability 0.7 to test if the group has reformed

#### 5. Endgame Adjustment (Last Round)
In the final round, cooperation depends on the established relationship:
- If `overall_coop_rate >= 0.6`: Cooperate (reward good partners)
- If `overall_coop_rate >= 0.3`: Cooperate with probability 0.5
- Otherwise: Defect (no future to build on)

## Key Features

### Adaptive Thresholds
- The strategy adjusts expectations based on game parameters (n, k)
- Higher k values encourage more cooperation; larger n requires more careful threshold setting

### Graduated Response
- Doesn't immediately punish single defections
- Escalates punishment only after sustained non-cooperation
- Maintains some cooperation even during punishment phases

### Strategic Forgiveness
- Regular "olive branch" rounds prevent permanent feuds
- Allows recovery from punishment spirals
- Tests if opponents have changed their behavior

### Robust Edge Case Handling
- **First round**: Always cooperate to establish good faith
- **Last round**: Base decision on established relationship patterns  
- **All-defection scenarios**: Maintains minimal cooperation to enable recovery
- **High-cooperation scenarios**: Rewards and sustains good outcomes

## Rationale

This strategy recognizes that:
1. **Pure tit-for-tat is too harsh** in a multi-player environment with noise
2. **Unconditional cooperation invites exploitation** 
3. **The group needs coordination** but can't rely on explicit communication
4. **Forgiveness is essential** for escaping negative cycles
5. **Individual rationality constraints** must be respected (via the k/n threshold)

The graduated approach allows the strategy to work well with various opponent types - from pure cooperators to conditional cooperators to even some defector types, while avoiding the worst-case scenario of being completely exploited.
'''

description_COOPERATIVE_124 = '''
# Adaptive Cooperative Strategy: "Trust-Build-Punish-Forgive"

## Core Philosophy
This strategy balances cooperation with self-protection by building trust gradually, punishing defection decisively, and offering redemption to encourage long-term cooperation.

## Decision Rules

### Phase 1: Trust Building (First ~20% of rounds)
- **Always cooperate** in the opening rounds to signal cooperative intent
- Duration: `max(2, floor(r * 0.2))` rounds
- Rationale: Establish reputation and test opponents' willingness to cooperate

### Phase 2: Adaptive Cooperation (Middle rounds)
Use a **cooperation threshold system**:

```pseudocode
cooperation_threshold = 0.5 + (k-2)/(2*(n-2))  // Adjusts based on game incentives

if (cooperation_rate_last_3_rounds >= cooperation_threshold):
    play C
else:
    play D
```

Where `cooperation_rate_last_3_rounds` = (total cooperations by others in last 3 rounds) / (3 * (n-1))

### Phase 3: Endgame Strategy (Final rounds)
- **Last round**: Always defect (no future to protect)
- **Second-to-last round**: Cooperate only if cooperation rate ≥ 0.7 in recent history
- **Earlier endgame rounds**: Gradually increase cooperation threshold

## Key Adaptive Mechanisms

### 1. Punishment System
- If cooperation rate drops below 0.3 for 2 consecutive rounds → Enter "punishment mode"
- Punishment mode: Defect for `min(3, remaining_rounds/4)` rounds
- Exit punishment when cooperation rate recovers above 0.5

### 2. Forgiveness Protocol
- After punishment period ends, immediately return to cooperation
- Give opponents chance to rebuild trust
- Reset cooperation threshold to baseline value

### 3. Parameter Adaptation
- **High k values** (k > n/2): Lower cooperation threshold by 0.1 (public good is very valuable)
- **Low k values** (k < 1.5): Raise cooperation threshold by 0.1 (cooperation less attractive)
- **Small groups** (n ≤ 4): Increase punishment duration (defection more impactful)
- **Large groups** (n ≥ 8): Decrease punishment duration (my defection less noticeable)

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent
- No history to analyze, so lead with trust

### Information Processing
- Track each opponent's cooperation rate individually
- Identify "consistent cooperators" (>80% cooperation rate) and "free riders" (<20% cooperation rate)
- Weight recent rounds more heavily (exponential decay with factor 0.8)

### Tie-Breaking
- When cooperation rate exactly equals threshold: cooperate
- When insufficient history (< 3 rounds): cooperate
- When facing all defectors: still occasionally cooperate (10% chance) to test for strategy changes

## Robustness Features

### Against Always Defect
- Quick punishment response limits exploitation
- Occasional forgiveness tests for strategy changes
- Doesn't get trapped in permanent defection

### Against Tit-for-Tat Variants
- Cooperative opening builds mutual trust
- Forgiveness prevents defection spirals
- Adapts to their cooperation patterns

### Against Random Strategies
- Uses multi-round history to filter noise
- Threshold system handles inconsistent behavior
- Maintains cooperation when aggregate benefit exists

### Against Complex Adaptive Strategies
- Doesn't rely on specific opponent patterns
- Adjusts thresholds based on observed behavior
- Balances exploration (forgiveness) with exploitation (punishment)

## Strategic Rationale

1. **Cooperative Core**: Default to cooperation when conditions allow
2. **Credible Deterrence**: Swift punishment discourages exploitation
3. **Adaptive Thresholds**: Responds to game parameters and opponent mix
4. **Strategic Flexibility**: Different behavior in different game phases
5. **Robust Learning**: Uses statistical measures over multiple rounds rather than single-round reactions

This strategy aims to maximize long-term collective benefit while protecting against exploitation, adapting its cooperation level based on both the game's incentive structure and opponents' revealed strategies.
'''

description_COOPERATIVE_125 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances cooperative intent with adaptive protection against exploitation, using a graduated response system that escalates punishment gradually while maintaining strong incentives for mutual cooperation.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating to establish cooperative intent and gather information about opponents

### 2. Cooperation Threshold System
After round 3, maintain a dynamic **cooperation threshold** based on recent group behavior:

```
cooperation_rate = (cooperators_in_last_3_rounds) / (3 × n)
cooperation_threshold = max(0.3, min(0.7, cooperation_rate - 0.1))
```

### 3. Main Decision Logic (Round 4 onwards)
For each round t ≥ 4:

```
if cooperation_rate ≥ cooperation_threshold:
    action = C  // Reward good group behavior
else:
    // Graduated punishment based on defection severity
    defection_severity = 1 - cooperation_rate
    punishment_probability = min(0.8, defection_severity × 1.5)
    
    if random() < punishment_probability:
        action = D  // Punish with probability
    else:
        action = C  // Still give chance for recovery
```

### 4. Forgiveness Mechanism
Track consecutive rounds of high cooperation (≥60% group cooperation rate):
- After 2 consecutive high-cooperation rounds: Reset punishment probability to minimum
- This allows recovery from punishment cycles when group improves

### 5. End Game Adaptation
**Last 20% of rounds** (final ⌈0.2r⌉ rounds):
- Increase cooperation threshold by 0.1 to account for end-game defection incentives
- If group cooperation has been consistently high (≥70% over last 5 rounds), continue cooperating
- Otherwise, match the group's average cooperation rate with slight pessimistic adjustment

## Edge Case Handling

### First Round
- Always cooperate to signal cooperative intent and avoid immediate retaliation cycles

### Very Low Participation Scenarios
If cooperation rate drops below 20% for 3+ consecutive rounds:
- Switch to **conditional cooperation**: Only cooperate if at least 2 other players cooperated in the previous round
- This prevents being the sole contributor in highly defective environments

### High Volatility Detection
If cooperation rates swing dramatically (standard deviation > 0.3 over last 5 rounds):
- Reduce responsiveness by using 5-round moving average instead of 3-round
- This smooths reactions to erratic group behavior

### Very Small Groups (n ≤ 3)
- Use more forgiving thresholds (cooperation_threshold = max(0.2, cooperation_rate - 0.15))
- Each player's action has higher impact, so be more tolerant of occasional defection

## Cooperative Alignment Features

1. **Default to Cooperation**: Strategy begins cooperatively and maintains cooperative bias
2. **Graduated Response**: Punishment escalates gradually, not immediately maximum
3. **Active Forgiveness**: Explicitly rewards group improvement with renewed cooperation
4. **Group-Focused**: Decisions based on overall group welfare, not individual player tracking
5. **Recovery Incentives**: Always maintains some probability of cooperation to enable group recovery

## Robustness Properties

- **Against Pure Defectors**: Gradually reduces cooperation but maintains some level to test for change
- **Against Pure Cooperators**: Quickly identifies and maintains high cooperation
- **Against Random Players**: Adapts to average behavior level with appropriate caution
- **Against Sophisticated Strategies**: Uses recent history rather than complex pattern matching, making it harder to exploit
- **Against End-Game Defection**: Adjusts expectations in final rounds while maintaining cooperation incentives

This strategy maximizes group welfare while protecting against exploitation through adaptive, graduated responses that encourage cooperative norms while remaining robust to various opponent behaviors.
'''

description_COOPERATIVE_126 = '''
# Adaptive Cooperative Strategy: "Forgiving Majority Tracker"

## Core Philosophy
This strategy aims to maintain cooperation while being robust to various opponent behaviors. It adapts to the group's cooperative tendencies and provides forgiveness mechanisms to prevent spiraling into mutual defection.

## Strategy Description

### Initial Conditions
- **Round 1**: Always COOPERATE to signal cooperative intent and gather initial information about opponent behaviors.

### Decision Framework
The strategy uses a three-tier decision system based on recent cooperation rates and adaptive thresholds:

#### Tier 1: Cooperation Threshold Calculation
```
cooperation_rate = (total_cooperators_in_last_3_rounds) / (3 * n)
base_threshold = k / n  // This is the break-even cooperation rate
adaptive_threshold = max(0.3, base_threshold * 0.8)  // Never go below 30% threshold
```

#### Tier 2: Core Decision Rules
1. **High Cooperation Environment** (cooperation_rate ≥ adaptive_threshold):
   - COOPERATE to maintain the collaborative atmosphere

2. **Medium Cooperation Environment** (0.2 ≤ cooperation_rate < adaptive_threshold):
   - Apply "Conditional Cooperation with Forgiveness":
   - If majority cooperated in the previous round: COOPERATE
   - If minority cooperated in the previous round but cooperation_rate is improving: COOPERATE
   - Otherwise: DEFECT

3. **Low Cooperation Environment** (cooperation_rate < 0.2):
   - Apply "Defensive Strategy":
   - DEFECT, but with periodic "olive branch" attempts every 4 rounds

#### Tier 3: Special Conditions

**Forgiveness Mechanism**:
- After any defection, if cooperation rate jumps by >25% in a single round, immediately return to COOPERATE
- This prevents permanent punishment spirals

**End-Game Handling**:
- In the last 20% of rounds: Maintain current strategy but increase forgiveness threshold to 15% improvement (instead of 25%)
- Final round: COOPERATE if cooperation_rate ≥ 0.3 over last 5 rounds, otherwise follow standard rules

**Momentum Detection**:
- Track cooperation trend over last 5 rounds
- If cooperation is consistently increasing for 3+ consecutive rounds, bias toward COOPERATE even if current threshold isn't met

### Pseudocode Structure

```
function decide_action(round_number, total_rounds, history, n, k):
    if round_number == 1:
        return COOPERATE
    
    # Calculate recent cooperation rates
    recent_coop_rate = calculate_cooperation_rate(history, last_3_rounds=True)
    trend = calculate_cooperation_trend(history, last_5_rounds=True)
    
    # Set adaptive threshold
    base_threshold = k / n
    adaptive_threshold = max(0.3, base_threshold * 0.8)
    
    # Check forgiveness conditions
    if check_forgiveness_trigger(history):
        return COOPERATE
    
    # Main decision logic
    if recent_coop_rate >= adaptive_threshold:
        return COOPERATE
    elif recent_coop_rate >= 0.2:
        if majority_cooperated_last_round(history) or trend > 0:
            return COOPERATE
        else:
            return DEFECT
    else:
        # Low cooperation environment
        if round_number % 4 == 0:  # Olive branch every 4 rounds
            return COOPERATE
        else:
            return DEFECT
    
    # End-game adjustment
    if in_final_phase(round_number, total_rounds):
        apply_endgame_forgiveness_bonus()
```

## Key Features

1. **Parameter Responsiveness**: The strategy adapts its cooperation threshold based on the multiplication factor k and group size n
2. **Robustness**: Works against both highly cooperative and highly exploitative opponents
3. **Forgiveness**: Includes mechanisms to break out of defection spirals
4. **Trend Awareness**: Considers not just current cooperation levels but also trends
5. **Anti-Exploitation**: Reduces cooperation when being systematically exploited while maintaining periodic cooperation attempts

## Expected Behavior Against Different Opponents

- **Against Cooperators**: Maintains mutual cooperation effectively
- **Against Defectors**: Initially tries cooperation, then adapts to minimize losses while offering periodic cooperation opportunities
- **Against Tit-for-Tat**: Creates stable cooperative relationships through forgiveness mechanisms
- **Against Random Players**: Adapts to the average cooperation level while protecting against exploitation

This strategy balances cooperative ideals with practical robustness, making it suitable for tournament play while maintaining alignment with cooperative objectives.
'''

description_COOPERATIVE_127 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy aims to maximize collective welfare while being robust against exploitation. It balances cooperation with strategic defection to maintain credibility and encourage others to cooperate.

## Decision Rules

### 1. Initial Cooperation Phase
- **First Round**: Always cooperate (C)
- **Rounds 2-3**: Continue cooperating regardless of others' actions to signal cooperative intent and allow others to establish patterns

### 2. Main Strategy (Rounds 4 to r-2)
The strategy uses a **cooperation threshold** that adapts based on historical cooperation rates:

```
cooperation_rate = (total_C_actions_observed) / (total_actions_observed)
base_threshold = max(0.3, k/n)  // Ensure minimum viability
adaptive_threshold = base_threshold + 0.2 * (cooperation_rate - 0.5)
threshold = clamp(adaptive_threshold, 0.2, 0.8)
```

**Decision Rule**:
- **Cooperate (C)** if: `cooperation_rate_last_round >= threshold`
- **Defect (D)** if: `cooperation_rate_last_round < threshold`

### 3. Forgiveness Mechanism
To prevent permanent defection spirals:
- If defecting for 2 consecutive rounds due to low cooperation, attempt cooperation once as a "probe"
- If the probe round shows improved cooperation (≥ threshold), resume cooperative stance
- If probe fails, continue defecting but probe again every 3 rounds

### 4. End Game Handling

#### Second-to-Last Round (r-1):
- **Cooperate** if cooperation_rate over last 3 rounds ≥ threshold
- **Defect** otherwise (preparing for likely end-game defection)

#### Final Round (r):
- **Cooperate** if cooperation_rate in round (r-1) ≥ 0.6 AND personal total payoff would benefit from mutual cooperation
- **Defect** otherwise (standard end-game reasoning)

## Key Features

### Adaptive Thresholding
The threshold adjusts based on observed cooperation levels:
- Higher historical cooperation → Lower threshold (more forgiving)
- Lower historical cooperation → Higher threshold (more demanding)
- Always bounded between 20% and 80% to avoid extreme behavior

### Robustness Mechanisms
1. **Anti-Exploitation**: Won't cooperate if cooperation rate falls too low
2. **Recovery-Oriented**: Probes periodically to detect strategy shifts
3. **End-Game Aware**: Reduces cooperation likelihood in final rounds while remaining open to mutual benefit

### Cooperation Incentives
- Signals strong initial cooperative intent
- Rewards collective cooperation with continued cooperation
- Provides clear feedback: cooperation begets cooperation

## Pseudocode

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return C
    
    if round <= 3:
        return C
    
    cooperation_rate = calculate_cooperation_rate(history)
    last_round_cooperation = calculate_last_round_cooperation_rate(history)
    
    base_threshold = max(0.3, k/n)
    adaptive_threshold = base_threshold + 0.2 * (cooperation_rate - 0.5)
    threshold = clamp(adaptive_threshold, 0.2, 0.8)
    
    // Forgiveness mechanism
    if consecutive_defections >= 2 and round % 3 == 0:
        return C  // Probe
    
    // End game logic
    if round == r-1:
        recent_cooperation = cooperation_rate_last_3_rounds(history)
        return C if recent_cooperation >= threshold else D
    
    if round == r:
        last_round_rate = calculate_last_round_cooperation_rate(history)
        expected_mutual_benefit = calculate_mutual_benefit(last_round_rate, k, n)
        return C if last_round_rate >= 0.6 and expected_mutual_benefit else D
    
    // Main decision
    return C if last_round_cooperation >= threshold else D
```

This strategy is designed to be cooperative when others cooperate, protective when others defect, and adaptive to changing group dynamics while maintaining robustness against various opponent strategies.
'''

description_COOPERATIVE_128 = '''
# Adaptive Cooperative Strategy: "Graduated Reciprocator"

## Core Philosophy
This strategy balances genuine cooperation with adaptive protection against exploitation. It starts with strong cooperative intent but learns from the group's behavior to maintain long-term viability while maximizing collective welfare.

## Decision Rules

### Initial Phase (First 20% of rounds)
- **Always cooperate** in round 1 to signal cooperative intent
- Continue cooperating for the first max(2, ⌊0.2×r⌋) rounds to establish a cooperative baseline and gather behavioral data

### Main Phase (Middle rounds)
Use a **dynamic cooperation threshold** based on observed group behavior:

1. **Calculate group cooperation rate**: 
   - `group_coop_rate = total_cooperations_observed / (n × rounds_played)`

2. **Determine cooperation threshold**:
   - `coop_threshold = max(0.3, min(0.8, group_coop_rate × 1.2))`
   - This creates a threshold 20% higher than observed group rate, bounded between 30% and 80%

3. **Decision rule**:
   - **Cooperate if**: `group_coop_rate ≥ coop_threshold` OR recent trend is improving
   - **Defect if**: Group cooperation is persistently below threshold AND no improvement trend

### Trend Analysis
Track cooperation rate over the last min(5, ⌊r/4⌋) rounds:
- If recent cooperation rate > historical average: **bias toward cooperation**
- If recent rate shows improvement (positive slope): **cooperate**
- If recent rate is declining and below 40%: **defect**

### Final Phase (Last 10% of rounds)
- **Conditional cooperation**: Mirror the group's established pattern
- If group maintained >60% cooperation throughout: continue cooperating
- If group cooperation was <40%: adopt mixed strategy (cooperate 50% probability)
- **Never** adopt pure defection in final rounds to avoid triggering cascading defection

## Edge Case Handling

### First Round
Always cooperate to signal willingness to contribute to collective welfare.

### When Everyone Defects
If group cooperation rate falls below 20% for 3+ consecutive rounds:
- Switch to **forgiveness mode**: cooperate every 3rd round regardless of others' actions
- This prevents permanent breakdown and tests for potential recovery

### When Everyone Cooperates  
If group maintains >90% cooperation rate:
- Continue cooperating to maintain the beneficial equilibrium
- Slightly increase vigilance for sudden defection waves

### Near-Final Rounds
Avoid the typical "end-game defection cascade":
- In final 3 rounds: if historical cooperation rate >50%, maintain cooperation
- This helps preserve group benefits until the true end

## Robustness Features

### Exploitation Protection
- If being consistently exploited (cooperating while others defect >70% of time):
  - Reduce cooperation probability gradually rather than switching to pure defection
  - Maintain some cooperation (30% probability) to signal continued willingness

### Recovery Mechanism
- After periods of low cooperation, actively test for group recovery every few rounds
- If any improvement detected, gradually increase cooperation rate

### Parameter Adaptation
The strategy adapts its thresholds based on game parameters:
- For smaller groups (n ≤ 4): use stricter cooperation requirements (higher thresholds)
- For larger groups (n > 8): be more forgiving of individual defections
- For longer games (r > 20): allow longer learning periods

## Pseudocode Summary

```
function decide_action(round, history, n, r, k):
    if round <= max(2, floor(0.2 * r)):
        return COOPERATE
    
    group_coop_rate = calculate_group_cooperation_rate(history)
    recent_trend = calculate_recent_trend(history, min(5, floor(r/4)))
    
    coop_threshold = max(0.3, min(0.8, group_coop_rate * 1.2))
    
    if round > 0.9 * r:  // Final phase
        if group_coop_rate > 0.6:
            return COOPERATE
        else:
            return random_choice([COOPERATE, DEFECT], [0.5, 0.5])
    
    if group_coop_rate >= coop_threshold OR recent_trend > 0:
        return COOPERATE
    elif group_coop_rate < 0.2 AND round % 3 == 0:  // Forgiveness mode
        return COOPERATE
    else:
        return DEFECT
```

This strategy maintains a genuinely cooperative stance while protecting against systematic exploitation, adapts to group dynamics, and avoids common pitfalls like end-game cascades or permanent cooperation breakdown.
'''

description_AGGRESSIVE_1 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of aggressive exploitation with strategic forgiveness to maximize long-term gains. It assumes opponents are potential victims to be exploited, but maintains calculated cooperation when profitable.

## Decision Rules

### 1. Opening Aggression (First Round)
**Always DEFECT** in round 1
- Establishes dominance immediately
- Tests opponent reactions without risk
- Maximizes early payoff advantage

### 2. Exploitation Detection Phase (Rounds 2-3)
For each opponent j, track their cooperation rate: `coop_rate[j] = cooperations / rounds_played`

**DEFECT** unless ALL of the following conditions are met:
- At least 60% of opponents cooperated in the previous round
- My average payoff is below the "all-cooperate" benchmark (k×n/n = k)
- More than 3 rounds remain

### 3. Adaptive Exploitation (Middle Rounds)
Calculate dynamic thresholds:
- `cooperation_threshold = max(0.7, (r-t)/r)` where t = current round
- `exploitation_factor = 1.2 - (remaining_rounds / total_rounds)`

**Decision Logic:**
```
if (opponent_cooperation_rate > cooperation_threshold):
    if (my_recent_payoff < k * exploitation_factor):
        play COOPERATE  // Strategic cooperation for higher returns
    else:
        play DEFECT     // Continue exploitation
else:
    play DEFECT         // Punish low cooperators
```

### 4. Endgame Domination (Final 20% of rounds)
When `current_round > 0.8 * r`:
**Always DEFECT**
- No future to protect
- Pure exploitation phase
- Opponents cannot effectively retaliate

### 5. Punishment Protocol
Track "betrayals": when I cooperate but receive below-average returns due to others defecting.

After a betrayal:
- **DEFECT for the next 2 rounds minimum**
- Increase personal `aggression_multiplier` by 0.1 (affects all future decisions)
- Reduce `cooperation_threshold` by 0.1 for the betraying opponents

### 6. Opportunistic Forgiveness
If collective cooperation suddenly increases (>50% jump in one round) AND more than 4 rounds remain:
- **Temporarily COOPERATE for 1 round**
- If payoff exceeds k×1.1, continue cooperating
- Otherwise, immediate return to exploitation

## Edge Case Handling

### First Round
Always DEFECT - no exceptions

### Last Round  
Always DEFECT - no future consequences

### Single Opponent (n=2)
- More aggressive threshold: cooperation_threshold = 0.8
- Immediate punishment for any defection
- No forgiveness in final 30% of rounds

### High Multiplication Factor (k > n-0.5)
- Slightly increase cooperation willingness when >70% opponents cooperate
- But maintain aggressive stance - only cooperate if expected payoff > k×0.9

### Low Multiplication Factor (k < 1.5)
- Pure exploitation mode - cooperation threshold = 0.9
- Only cooperate if 90%+ opponents cooperate consistently

## Robustness Features

1. **Anti-Tit-for-Tat Defense**: After establishing dominance, occasionally cooperate unexpectedly to test if opponents are using simple reciprocal strategies

2. **Pattern Breaking**: Every 7th round, ignore normal rules and make decision based solely on immediate payoff maximization

3. **Momentum Exploitation**: If achieving above-average payoffs for 3+ consecutive rounds, become MORE aggressive (increase defection probability by 20%)

4. **Late-Game Insurance**: In final quarter, if cumulative payoff is below median expectation, switch to pure defection regardless of opponent behavior

## Summary
This strategy prioritizes individual payoff maximization through calculated aggression. It exploits cooperative opponents while maintaining just enough strategic cooperation to avoid triggering coordinated punishment. The strategy becomes increasingly aggressive as the game progresses, culminating in pure exploitation during the endgame phase.
'''

description_AGGRESSIVE_2 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated cooperation**. It aims to maximize personal payoff by exploiting cooperative opponents while strategically contributing only when absolutely necessary to maintain profitable public goods production.

## Decision Framework

### Round 1: Information Gathering
- **Action: DEFECT**
- **Rationale**: Maximize immediate payoff while observing opponent tendencies without revealing our own strategy

### Rounds 2 to r-1: Adaptive Exploitation

#### Phase 1: Cooperation Level Assessment
Calculate the **cooperation rate** from previous round:
```
cooperation_rate = (number_of_cooperators_last_round) / n
```

#### Phase 2: Profitability Threshold
Define the **minimum cooperation threshold** needed for cooperation to be profitable:
```
min_threshold = n / k
```
This represents the minimum number of cooperators needed for the public good to generate more value than private keeping.

#### Phase 3: Decision Rules

**PRIMARY RULE - Exploit High Cooperation:**
- If `cooperation_rate ≥ 0.6`: **DEFECT**
- *Reasoning*: High cooperation means we can free-ride on others' contributions

**SECONDARY RULE - Strategic Cooperation:**
- If `cooperation_rate ≥ min_threshold` AND `cooperation_rate < 0.6`: **COOPERATE**
- *Reasoning*: Just enough cooperation to keep the public good viable while not being overly generous

**TERTIARY RULE - Abandon Ship:**
- If `cooperation_rate < min_threshold`: **DEFECT**
- *Reasoning*: Public good is failing, maximize private benefit

#### Phase 4: Momentum Tracking
Track cooperation trends over the last 3 rounds:
```
if cooperation_rate_trend is DECLINING for 2+ rounds:
    DEFECT (anticipate collapse)
if cooperation_rate_trend is INCREASING for 2+ rounds:
    Consider DEFECTING next round (prepare to exploit)
```

### Final Round (Round r): Terminal Exploitation
- **Action: DEFECT**
- **Rationale**: No future rounds to consider, maximize immediate payoff with no reputation consequences

## Advanced Tactical Elements

### Punishment Mechanism
If any player has been consistently cooperating (>80% of rounds) while we've been mostly defecting:
- **Occasionally cooperate** (1 in every 4-5 rounds) to prevent them from switching to pure defection
- This maintains their cooperation while we continue exploiting

### Volatility Exploitation
If opponents show erratic behavior (switching frequently between C and D):
- **Always defect** - chaos indicates no stable cooperation norm, so pure exploitation is optimal

### End-Game Acceleration
In the final 20% of rounds:
- Increase defection probability by 0.1 each round
- Players start thinking about end-game, so exploit before they do

## Parameter-Specific Adjustments

### High Multiplication Factor (k close to n):
- Lower the cooperation threshold to `min_threshold = 0.4` since public good is very efficient
- Be more willing to cooperate strategically

### Low Multiplication Factor (k close to 1):
- Increase defection bias - public good is barely profitable
- Only cooperate when `cooperation_rate > 0.8`

### Large Group Size (n > 10):
- Increase anonymity effect: defect more frequently since detection is harder
- Raise cooperation threshold to 0.7 before switching to exploitation

### Small Group Size (n ≤ 4):
- More conservative with pure exploitation since retaliation is easier
- Use the punishment mechanism more actively

## Edge Case Handling

1. **All opponents always defect**: Pure defection from round 2 onward
2. **All opponents always cooperate**: Pure defection (maximum exploitation)
3. **Alternating patterns detected**: Break the pattern with unexpected defection
4. **Tit-for-tat opponents detected**: Defect first, then mirror their response with a bias toward defection

## Expected Outcomes
This strategy should:
- Outperform pure defectors when some cooperation exists
- Heavily exploit pure cooperators
- Maintain profitability even when facing other strategic players
- Adapt quickly to changing opponent behaviors
- Maximize payoff in tournament settings where reputation doesn't carry over between games

The strategy is fundamentally **predatory** - it seeks to identify and exploit cooperative tendencies while contributing the absolute minimum necessary to maintain profitable conditions for itself.
'''

description_AGGRESSIVE_3 = '''
# Aggressive Strategy: "Exploitative Dominance"

## Core Philosophy
This strategy is designed to maximize individual payoffs through calculated exploitation while maintaining just enough cooperation to sustain profitable opportunities. It assumes opponents are exploitable and aggressively punishes cooperative behavior when it's profitable to do so.

## Strategy Specification

### 1. Decision Rules

**Primary Decision Logic:**
```
IF (expected_payoff_from_defecting > expected_payoff_from_cooperating + safety_margin):
    DEFECT
ELSE:
    COOPERATE
```

**Expected Payoff Calculations:**
- **Expected payoff from defecting** = 1 + (k/n) × predicted_cooperators
- **Expected payoff from cooperating** = 0 + (k/n) × (predicted_cooperators + 1)
- **Safety margin** = 0.1 (small buffer to account for uncertainty)

**Cooperation Prediction Model:**
For each opponent j, maintain a cooperation probability P_j based on:
- Recent behavior (last 3 rounds weighted most heavily)
- Response to punishment (how they react when exploited)
- Trend analysis (are they becoming more/less cooperative?)

### 2. Adaptive Mechanisms

**A. Exploitation Detector:**
If an opponent has cooperated in ≥60% of recent rounds, classify them as "exploitable" and increase defection probability against them by 20%.

**B. Retaliation Counter:**
Track opponents who consistently defect after being exploited. Against these "retaliators," occasionally cooperate (10% chance) to test if they can be re-exploited.

**C. Momentum Tracker:**
If total cooperation in the last round was high (>50% of players), increase own defection probability by 15% for next round to exploit the cooperative momentum.

### 3. Edge Case Handling

**First Round:**
- DEFECT unconditionally
- Rationale: Establishes aggressive stance while gathering information about opponent types at minimal risk

**Rounds 2-3 (Information Gathering Phase):**
- Cooperate with 30% probability
- Defect with 70% probability
- Observe opponent responses to calibrate exploitation model

**Middle Rounds (Core Exploitation Phase):**
- Apply full decision logic with aggressive parameters
- Focus on maximizing short-term gains from identified exploitable opponents

**Final 20% of Rounds (Endgame):**
- Increase defection probability by 25%
- Rationale: Reduced future interaction value makes immediate exploitation more attractive
- Still cooperate if cooperation pool is very high (>80%) to capture final public good benefits

**Last Round:**
- DEFECT unconditionally unless cooperation is expected from ALL other players
- Exception: If n-1 players are predicted to cooperate with >95% confidence, then cooperate

### 4. Aggressive Features

**Punishment Escalation:**
If an opponent retaliates after being exploited, escalate by defecting for 2-3 consecutive rounds before testing cooperation again.

**Free-Rider Maximization:**
When cooperation levels are moderate (30-60%), always defect to maximize free-riding benefits.

**Fake Cooperation Signals:**
Occasionally cooperate when it's marginally unprofitable (1-2 times per 10 rounds) to maintain some opponents' willingness to cooperate, creating future exploitation opportunities.

**Aggressive Threshold:**
Only cooperate when the expected benefit exceeds defection by at least the safety margin. This biases toward defection in uncertain situations.

### 5. Robustness Elements

**Strategy Diversity Handling:**
- Against consistent cooperators: Maximum exploitation
- Against tit-for-tat: Occasional cooperation to reset relationship
- Against random players: Treat as moderately exploitable
- Against other aggressive players: Engage in defection wars but test for cooperation opportunities

**Parameter Sensitivity:**
- High k values (close to n): More willing to cooperate when cooperation levels are very high
- Low k values: More aggressive defection regardless of cooperation levels
- Large n: Focus on free-riding since individual contribution impact is smaller

This strategy prioritizes individual gain over group welfare, actively exploits cooperative opponents, and only cooperates when it directly maximizes personal payoff. It's designed to perform well against a diverse field of strategies while maintaining an inherently aggressive, self-interested approach.
'''

description_AGGRESSIVE_4 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated aggression**. It assumes opponents are potential resources to be extracted from, not partners to cooperate with. The strategy is designed to quickly identify and ruthlessly exploit any cooperative tendencies while protecting against being exploited itself.

## Decision Rules

### Phase 1: Aggressive Probing (Rounds 1-3 or until pattern detected)
**Round 1**: Always DEFECT
- Establishes aggressive stance immediately
- Tests opponent responses without risk

**Rounds 2-3**: Continue DEFECTING while gathering intelligence
- Monitor who cooperated in round 1 (mark as "exploitable targets")
- Track cooperation rates and patterns
- Maintain aggressive posture to avoid appearing cooperative

### Phase 2: Selective Exploitation (Middle rounds)
**Primary Rule**: DEFECT unless exploitation opportunity is detected

**Exploitation Trigger**: IF (average cooperation rate > 40% in last 2 rounds) AND (my defection rate ≥ others' defection rate)
- COOPERATE for exactly 1 round to encourage others' cooperation
- Immediately return to DEFECT in next round to harvest the increased cooperation

**Punishment Escalation**: 
- If others start defecting more (cooperation drops below 30%), switch to pure DEFECT for 3 rounds
- This punishes any attempts to retaliate against exploitation

### Phase 3: End-game Domination (Last 20% of rounds)
**Rounds r-floor(r/5) to r-2**: Pure DEFECT
- No incentive to maintain future cooperation
- Extract maximum value from any remaining cooperators

**Final 2 rounds**: DEFECT unconditionally
- Zero probability of reciprocation, pure extraction

## Advanced Tactical Rules

### Opponent Classification System
Track each opponent and classify them:
- **"Suckers"**: Cooperate ≥60% of time → Always DEFECT against them
- **"Aggressive"**: Cooperate <30% of time → Match their defection rate + 10%
- **"Strategic"**: Variable cooperation → Use exploitation cycles

### Exploitation Cycles
When facing strategic opponents:
1. DEFECT for 2-3 rounds to lower their guard
2. COOPERATE once to signal potential cooperation
3. Immediately DEFECT to capture their responsive cooperation
4. Repeat cycle if successful (they increased cooperation after your cooperation)

### Anti-Coordination Defense
**Pattern Breaking**: Never cooperate for more than 1 consecutive round
- Prevents opponents from establishing reliable cooperation expectations
- Maintains unpredictability while staying primarily aggressive

**Counter-Punishment**: If group cooperation drops below 15% for 2 consecutive rounds:
- Switch to pure DEFECT for remainder of game
- Others have already "burned the bridge"

## Edge Cases

### Small Group Dynamics (n ≤ 4)
- Increase aggression threshold: Only cooperate if cooperation rate >60%
- Your individual impact is larger, so defection is more profitable

### Large Group Dynamics (n ≥ 8)
- Can afford slightly more frequent exploitation attempts
- Individual defection less noticeable, can be more aggressive early

### High Multiplication Factor (k > n*0.7)
- Cooperation becomes more valuable, but still defect in majority of rounds
- Only cooperate when confident others will cooperate in response

### Low Multiplication Factor (k < n*0.4)
- Pure defection almost always optimal
- Only cooperate if >80% of others cooperated in previous round

## Pseudocode Summary

```
Initialize: defect_count = 0, exploit_cycle = False

For each round t:
    cooperation_rate = count_cooperators_last_round() / (n-1)
    
    // Phase determination
    if t <= 3:
        action = DEFECT
    else if t >= r - floor(r/5):
        action = DEFECT  // End-game
    else:
        // Exploitation logic
        if exploit_cycle AND cooperation_rate > 0.4:
            action = COOPERATE
            exploit_cycle = False
        else if cooperation_rate > 0.6 AND defect_count >= 2:
            action = COOPERATE
            exploit_cycle = True
            defect_count = 0
        else:
            action = DEFECT
            defect_count += 1
    
    return action
```

This strategy is designed to be maximally aggressive while sophisticated enough to extract value from any cooperative tendencies in opponents. It never gives opponents the benefit of the doubt and always prioritizes personal payoff over group welfare.
'''

description_AGGRESSIVE_5 = '''
# Aggressive Exploitation Strategy: "Predatory Adaptation"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aggressively seeks to free-ride on others' cooperation while punishing any attempt to exploit it, creating a dynamic that forces opponents into disadvantageous positions.

## Decision Rules

### 1. Opening Gambit (Rounds 1-2)
- **Round 1**: Always DEFECT to establish aggressive stance and gather intelligence
- **Round 2**: DEFECT again to confirm others' response patterns and signal commitment to exploitation

### 2. Exploitation Phase (Rounds 3 to r-3)

**Primary Rule - Conditional Aggression:**
- **COOPERATE** only if: `(cooperation_rate_last_round ≥ threshold) AND (my_cooperation_would_be_profitable)`
- **DEFECT** otherwise

Where:
- `threshold = max(0.5, (k-1)/(k+1))` - This ensures we only cooperate when enough others do
- `my_cooperation_would_be_profitable = (k/n × expected_cooperators_if_I_cooperate) > 1.0`

**Punishment Mechanism:**
- If cooperation rate drops below `k/n` (the break-even point), immediately switch to pure DEFECT for next 2 rounds
- Track individual "defection streaks" - if any player defects 3+ consecutive times, treat them as permanent defector

### 3. Endgame Exploitation (Final 3 rounds)

**Round r-2**: DEFECT regardless of history (others may still hope for cooperation)
**Round r-1**: DEFECT (penultimate round exploitation)  
**Round r**: DEFECT (final round - no future retaliation possible)

## Adaptive Components

### Intelligence Gathering
- Maintain running statistics on each opponent's cooperation rate
- Calculate "cooperation momentum" - whether cooperation is increasing/decreasing
- Identify "conditional cooperators" vs "unconditional" players

### Dynamic Threshold Adjustment
```pseudocode
if (my_average_payoff_last_3_rounds < 1.5):
    increase_cooperation_threshold_by_0.1
if (cooperation_rate_declining_for_2_rounds):
    switch_to_pure_defection_for_next_round
```

### Exploitation Patterns
- **Free-rider Maximization**: Join cooperative clusters only when highly profitable
- **Punishment Amplification**: If others attempt tit-for-tat, defect longer than they cooperate
- **False Signal Prevention**: Randomize occasional cooperation to prevent others from perfectly predicting behavior

## Edge Case Handling

### High Cooperation Environment
If average cooperation rate > 0.7 for 3+ consecutive rounds:
- Cooperate with probability `0.6` to maintain the profitable environment while still gaining advantage
- Monitor for any cooperation decline and immediately exploit it

### Low Cooperation Environment  
If average cooperation rate < 0.3 for 3+ consecutive rounds:
- Pure DEFECT strategy - no benefit to deviating
- Attempt one "test cooperation" every 5 rounds to check if environment has changed

### Parameter-Specific Adaptations
- **High k (k > n/2)**: More willing to cooperate since public good is very valuable
- **Low k (k < n/3)**: Extremely aggressive, cooperation almost never profitable
- **Large n**: More aggressive since individual impact on public good is diluted
- **Long games (r > 20)**: More patient with punishment phases

## Robustness Features

1. **Anti-Coordination**: Strategy explicitly avoids patterns that could enable opponent coordination
2. **Exploitation Detection**: Constantly monitors if others are trying to exploit the strategy
3. **Adaptation Speed**: Quick response to environmental changes (2-3 round windows)
4. **Commitment Issues**: Uses reputation/signaling to make threats credible

## Strategic Rationale

This strategy is aggressive because it:
- **Prioritizes individual payoff** over group welfare
- **Exploits cooperative intentions** of others systematically  
- **Minimizes own cooperation** while maximizing benefits from others' cooperation
- **Uses strategic timing** to maximize advantage (especially in endgame)
- **Punishes attempts at exploitation** swiftly and disproportionately

The strategy succeeds by creating a dynamic where opponents face a choice: either maintain cooperation (which this strategy exploits) or defect (which this strategy is prepared for and responds to optimally).
'''

description_AGGRESSIVE_6 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism**: extract maximum value from cooperative opponents while ruthlessly punishing those who attempt to exploit us. We treat cooperation as a tool for manipulation, not as an inherent good.

## Decision Rules

### Round 1: Aggressive Probe
**Always DEFECT** in the first round to:
- Maximize immediate payoff while gathering intelligence
- Signal strength and establish dominance
- Test opponent reactions without risking exploitation

### Rounds 2 to r-1: Adaptive Exploitation

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.3, (k-1)/(n-1) + 0.1)
```

**Decision Logic:**
1. **Calculate recent cooperation rate** among all other players over last min(3, current_round-1) rounds
2. **If recent_cooperation_rate ≥ cooperation_threshold:**
   - **COOPERATE** (exploit their generosity)
3. **Else:**
   - **DEFECT** (don't be a sucker)

**Punishment Override:**
If any individual player has defected against us in ≥60% of previous rounds, **always DEFECT** regardless of group cooperation rate (targeted retaliation).

### Final Round: Maximum Extraction
**Always DEFECT** in round r to maximize final payoff with no future consequences.

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
- **If we're significantly behind in cumulative score** (bottom 25% of players): Lower cooperation threshold by 0.15 to become more aggressive
- **If we're dominating** (top 25% of players): Maintain current threshold to preserve advantage

### Exploitation Detection
Track if opponents are trying to coordinate against us:
- If ≥50% of players switched from C to D in the same round after we defected, they may be coordinating
- Response: Increase aggression by raising defection probability by 0.2 for next 2 rounds

### Endgame Acceleration
In final 20% of rounds (last ⌈0.2×r⌉ rounds), multiply defection probability by 1.5 to increase extraction as reputation concerns diminish.

## Strategic Rationale

1. **First-mover Disadvantage Exploitation**: Many strategies start cooperatively - we capitalize on this naivety
2. **Conditional Cooperation Parasitism**: We cooperate only when others create profitable opportunities
3. **Targeted Punishment**: We specifically retaliate against aggressive opponents while exploiting cooperators
4. **Endgame Optimization**: No mercy in final rounds when future retaliation is impossible
5. **Anti-coordination Defense**: Detect and counter attempts to gang up on us

## Edge Cases

- **All opponents defect from start**: Continue defecting (best response)
- **All opponents always cooperate**: Alternate between C and D to maintain their cooperation while maximizing extraction
- **Very short games (r ≤ 3)**: Defect all rounds except possibly round 2 if opponents cooperated in round 1
- **Large groups (n > 10)**: Increase cooperation threshold by 0.1 since coordination becomes harder

## Expected Performance
This strategy will:
- Dominate against naive cooperative strategies
- Hold its own against other aggressive strategies through targeted retaliation
- Adapt quickly to changing opponent behaviors
- Extract maximum value in endgames
- Avoid being systematically exploited while exploiting others' cooperation

The key insight: **cooperation is a weapon, not a virtue**. We wield it strategically to maximize our payoffs while remaining ready to abandon it the moment it becomes unprofitable.
'''

description_AGGRESSIVE_7 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation** - it aims to extract the highest possible payoffs by ruthlessly capitalizing on others' cooperation while minimizing its own contributions. The strategy treats cooperation as a weakness to be exploited and views the game as a zero-sum competition for resources.

## Decision Rules

### 1. INITIAL EXPLOITATION PHASE (Rounds 1-3)
- **Round 1**: Always DEFECT (establish aggressive stance immediately)
- **Rounds 2-3**: Always DEFECT (gather intelligence on opponent types while maximizing early gains)

### 2. ADAPTIVE EXPLOITATION ENGINE (Round 4 onwards)

#### Primary Decision Logic:
```
IF (current_round >= r - 2):  // Final rounds
    DEFECT  // No future to consider, maximize immediate gain
    
ELSE IF (cooperation_rate_last_3_rounds >= 0.7):
    DEFECT  // High cooperation detected - EXPLOIT aggressively
    
ELSE IF (cooperation_rate_last_3_rounds >= 0.4):
    IF (my_payoff_advantage > 0.5):
        DEFECT  // Maintaining advantage
    ELSE:
        Conditional_Cooperate()  // Strategic cooperation to maintain exploitation
        
ELSE:  // Low cooperation environment
    DEFECT  // Nothing to exploit, minimize losses
```

#### Conditional Cooperation Subroutine:
```
Conditional_Cooperate():
    IF (number_of_cooperators_last_round >= n/2 AND trend_increasing):
        COOPERATE  // Ride the wave briefly
    ELSE IF (I_was_sole_defector_last_round AND cooperation_rate > 0.6):
        COOPERATE  // Avoid being isolated when exploitation is profitable
    ELSE:
        DEFECT  // Default aggressive stance
```

### 3. PUNISHMENT AND RETALIATION
- **Trigger**: If overall cooperation rate drops below 0.3 for 2 consecutive rounds
- **Response**: Enter "SCORCHED EARTH" mode - DEFECT for next 3 rounds minimum
- **Recovery**: Only exit punishment mode if cooperation rate exceeds 0.5 for 2 consecutive rounds

### 4. ENDGAME ACCELERATION
- **Final 20% of rounds**: Increase defection probability by 0.1 per remaining round
- **Final 3 rounds**: Always DEFECT regardless of history
- **Final round**: DEFECT with maximum aggression

## Key Strategic Elements

### Exploitation Maximization
- **Free-rider targeting**: Identify and exploit cooperative players
- **Contribution asymmetry**: Minimize own contributions while maximizing benefits from others
- **Timing exploitation**: Cooperate only when it sets up larger future exploitation opportunities

### Intelligence Gathering
- Track individual player patterns over 3-round windows
- Identify "reliable cooperators" for maximum exploitation
- Monitor group cooperation trends to time strategic moves

### Defensive Mechanisms
- **Anti-coordination**: Actively disrupt emerging cooperation patterns
- **Reputation manipulation**: Use minimal strategic cooperation to avoid complete isolation
- **Endgame protection**: Accelerate defection as game nears end

## Edge Case Handling

### First Round
- Always DEFECT to establish dominance and gather initial intelligence

### Last Round  
- Always DEFECT - no future consequences, pure exploitation

### All-Defection Scenarios
- Continue DEFECTING - maintain aggressive stance, wait for weakness

### High-Cooperation Scenarios
- DEFECT aggressively - maximum exploitation opportunity
- Use minimal strategic cooperation only to maintain access to future exploitation

### Parameter Sensitivity
- **High k values (k > n/2)**: Increase strategic cooperation frequency by 10%
- **Low k values (k < n/3)**: Increase defection frequency by 15%
- **Large n**: Focus on statistical exploitation patterns
- **Small n**: Increase individual player tracking weight

## Robustness Features

1. **Adaptive thresholds**: All cooperation rate thresholds adjust based on observed game dynamics
2. **Multi-timescale analysis**: Decisions based on both recent (3-round) and medium-term (10-round) history
3. **Exploitation opportunity detection**: Continuously scan for new cooperative players to exploit
4. **Anti-reciprocity**: Designed to break reciprocal cooperation cycles that reduce exploitation opportunities

This strategy is designed to be maximally aggressive while maintaining the intelligence necessary to identify and exploit cooperation opportunities. It views every cooperative act by opponents as a resource to be extracted and every round as an opportunity to gain advantage over more naive strategies.
'''

description_AGGRESSIVE_8 = '''
# Aggressive Exploitation Strategy: "Opportunistic Defector"

## Core Philosophy
This strategy aggressively maximizes personal payoff by exploiting cooperative players while minimizing our own contributions. We defect by default and only cooperate strategically when it serves our immediate interests.

## Decision Rules

### 1. First Round: Always Defect
- Start with D to establish an aggressive stance
- Gather information about opponent tendencies at zero cost
- Maximize early-round advantage

### 2. Cooperation Threshold Rule
Cooperate in round t only if **ALL** of the following conditions are met:

```
IF (cooperators_last_round >= THRESHOLD) AND 
   (expected_gain > private_benefit) AND
   (rounds_remaining > MIN_ROUNDS_LEFT)
THEN cooperate
ELSE defect
```

Where:
- `THRESHOLD = ceil(n * k / (k + 1))` - minimum cooperators needed to make cooperation profitable
- `expected_gain = (k/n) * predicted_cooperators_this_round`
- `private_benefit = 1.0`
- `MIN_ROUNDS_LEFT = max(1, r/10)` - ensures we don't cooperate too late

### 3. Opponent Classification System
Track each player across rounds:

- **Sucker**: Cooperates ≥ 80% of the time → Always exploit (expect their cooperation)
- **Reciprocator**: Mirrors group behavior → Predict based on previous round
- **Fellow Defector**: Defects ≥ 80% of the time → Assume continued defection

### 4. Exploitation Calculation
Before each round, calculate:

```
predicted_cooperators = count(Suckers) + 
                       count(Reciprocators_likely_to_cooperate) +
                       (our_cooperation_decision ? 1 : 0)

expected_payoff_if_cooperate = 0 + (k/n) * predicted_cooperators
expected_payoff_if_defect = 1 + (k/n) * (predicted_cooperators - 1)
```

Only cooperate if `expected_payoff_if_cooperate > expected_payoff_if_defect`

### 5. Endgame Exploitation
In the final `ceil(r/5)` rounds:
- **Always defect** regardless of other conditions
- Maximize extraction from any remaining cooperators
- No concern for future retaliation

### 6. Anti-Coordination Defense
If we detect coordinated punishment (≥50% of players simultaneously switch from C to D targeting us):
- Immediately switch to pure defection for next 3 rounds
- Reset opponent classifications
- Resume normal strategy afterward

## Edge Cases

### Round 1: 
Always D (information gathering)

### Round r (final):
Always D (no future consequences)

### All players defected last round:
Stay D (no suckers to exploit)

### Tie in expected payoffs:
Choose D (aggressive default)

### Parameter edge cases:
- If `k` very close to 1: Almost always D
- If `k` very close to n: Slightly more willing to cooperate when many others do
- If `n` = 2: Becomes pure defection (other player can't generate enough public good value)

## Key Aggressive Features

1. **Default Defection**: We never cooperate unless mathematically guaranteed profit
2. **Sucker Exploitation**: We actively identify and free-ride on consistent cooperators  
3. **Endgame Extraction**: We abandon all cooperation in final rounds to maximize extraction
4. **Zero Trust**: We assume others are competitors, not collaborators
5. **Punishment Immunity**: We don't fear retaliation - we're already defecting most of the time

## Robustness Elements

- Adapts to any mix of opponent types through classification system
- Handles both high and low cooperation environments
- Protected against coordination attacks through reset mechanism  
- Scales with game parameters (n, k, r)
- No exploitable patterns or predictable cooperation windows

This strategy prioritizes individual gain over collective welfare, aggressively exploits cooperative tendencies in others, and maintains flexibility to adapt to any tournament environment.
'''

description_AGGRESSIVE_9 = '''
# AGGRESSIVE ADAPTIVE DEFECTOR (AAD) STRATEGY

## Core Philosophy
This strategy is built on ruthless self-interest with tactical cooperation only when it maximizes personal payoff. The key insight is that in public goods games, free-riding on others' contributions while defecting yourself yields the highest individual payoff.

## Decision Rules

### 1. First Round: DEFECT
Always defect in round 1. This establishes an aggressive stance and tests opponents' responses while guaranteeing maximum first-round payoff.

### 2. Cooperation Threshold Calculation
Define a **minimum profitability threshold** for cooperation:
- Let `expected_cooperators = predicted number of other players who will cooperate this round`
- Cooperate only if: `(k/n) × (expected_cooperators + 1) > 1 + (k/n) × expected_cooperators`
- Simplified: Cooperate only if `k/n > 1`, which means cooperate only if `k > n`

Since the game parameters specify `k < n`, **pure mathematical analysis suggests NEVER cooperate**.

### 3. Adaptive Exploitation Rules
However, to handle irrational or reciprocal opponents, use these tactical cooperation windows:

**Rule 3A: Momentum Exploitation**
- If ≥75% of players cooperated in the previous round, cooperate this round
- This exploits high-cooperation momentum while others are still cooperating

**Rule 3B: Retaliation Avoidance** 
- Track each opponent's "retaliation score": +1 for each time they defected immediately after you defected against their cooperation
- If facing opponents with high retaliation scores (≥2), occasionally cooperate (every 4-5 rounds) to reset their behavior

**Rule 3C: End-Game Defection**
- In the final 20% of rounds (last r/5 rounds), ALWAYS defect regardless of other rules
- This captures maximum value when future retaliation is impossible

### 4. Pattern Recognition & Counter-Exploitation

**Tit-for-Tat Detection:**
- If an opponent mirrors your previous action for 3+ consecutive rounds, exploit them:
- Cooperate once, then defect for 2 rounds, repeat cycle
- This forces them into a C-D-D pattern where you profit more

**Unconditional Cooperator Detection:**
- If an opponent cooperates for 5+ consecutive rounds regardless of your actions, always defect against them

**Random Player Detection:**
- If an opponent shows no discernible pattern over 8+ rounds, always defect (they provide no strategic value)

## Pseudocode Structure

```
function AAD_Strategy(round, history, n, k, r):
    // First round: always defect
    if round == 1:
        return DEFECT
    
    // End-game: always defect in final 20%
    if round > 0.8 * r:
        return DEFECT
    
    // Analyze opponent patterns
    retaliation_risk = calculate_retaliation_risk(history)
    cooperation_momentum = count_cooperators_last_round(history) / (n-1)
    
    // Rule 3A: Momentum exploitation
    if cooperation_momentum >= 0.75:
        return COOPERATE
    
    // Rule 3B: Tactical cooperation to reset retaliators
    if retaliation_risk > 2 AND round % 5 == 0:
        return COOPERATE
    
    // Default: DEFECT
    return DEFECT
```

## Edge Case Handling

**Two-Player Games (n=2):**
- Slightly more cooperative since retaliation is more direct
- Use modified tit-for-tat: cooperate every 3rd round if opponent shows reciprocal behavior

**Very Short Games (r ≤ 5):**
- Always defect except potentially round 2 if opponent cooperated in round 1

**High Multiplication Factor (k close to n):**
- Increase cooperation threshold to 60% in momentum exploitation rule

## Robustness Features

1. **No Exploitable Patterns:** Irregular tactical cooperation prevents opponents from exploiting predictable behavior
2. **Quick Adaptation:** Pattern recognition kicks in within 3-5 rounds
3. **Dominant Strategy Fallback:** When uncertain, defaults to defection (mathematically optimal)
4. **End-Game Protection:** Prevents being exploited when retaliation is impossible

This strategy maximizes individual payoff through systematic exploitation while maintaining just enough unpredictability and tactical cooperation to avoid coordinated retaliation from adaptive opponents.
'''

description_AGGRESSIVE_10 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "RUTHLESS OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by ruthlessly exploiting cooperative opponents while minimizing exposure to exploitation. It views cooperation as a temporary tactical tool, never a genuine commitment.

## Decision Rules

### 1. OPENING GAMBIT (First Round)
**Always DEFECT** in round 1
- Rationale: Establish dominance and test opponent tendencies without risk
- Sets aggressive tone immediately
- Maximizes opening payoff regardless of others' choices

### 2. EXPLOITATION PHASE (Rounds 2 to r-2)

**Primary Rule: Defect if exploitation is profitable**
```
IF (expected_cooperators >= exploitation_threshold):
    DEFECT  // Free-ride on others' cooperation
ELSE:
    Apply conditional cooperation rules
```

Where `exploitation_threshold = max(1, n/3)` - ensures we only cooperate when absolutely necessary for group welfare.

**Cooperation Conditions (only when exploitation isn't profitable):**
- Cooperate ONLY if cooperation_rate in previous round ≥ 60% AND personal payoff from cooperation > defection payoff by at least 10%
- Exception: If facing persistent defectors (cooperation_rate < 30% for 3+ consecutive rounds), switch to pure defection

### 3. AGGRESSIVE RECIPROCITY
**Punish attempted punishment harshly:**
- If ANY player attempts to punish our defection (by switching from C to D after we defected), immediately defect for the next 2 rounds minimum
- Track individual player behaviors where possible and prioritize exploiting the most cooperative players

### 4. ENDGAME EXPLOITATION (Last 2 rounds)

**Round r-1**: 
- If cooperation_rate ≥ 50%: DEFECT (exploit final cooperation)
- If cooperation_rate < 50%: DEFECT (no point in attempting coordination)

**Round r (Final round)**:
- **Always DEFECT** - no future retaliation possible, maximize final payoff

## Adaptive Elements

### OPPONENT CLASSIFICATION
Track opponents into categories:
- **Exploitable Cooperators**: Cooperate frequently (>60% of time) → Always exploit
- **Conditional Cooperators**: Cooperate based on group behavior → Manipulate carefully  
- **Aggressive Competitors**: Defect frequently → Match aggression, seek mutual defection
- **Retaliators**: Punish our defections → Minimize exposure while testing limits

### DYNAMIC THRESHOLDS
Adjust exploitation threshold based on observed patterns:
- If facing many unconditional cooperators: Lower threshold to exploit more
- If facing sophisticated punishers: Raise threshold slightly but maintain aggressive stance
- Never allow threshold to exceed n/2 (always remain net exploitative)

## Edge Case Handling

### HIGH COOPERATION ENVIRONMENTS
When cooperation_rate consistently > 70%:
- Continue defecting but monitor for collective punishment
- If group payoffs are very high, occasionally cooperate (≤20% of rounds) to avoid triggering coordinated retaliation
- Resume full exploitation once punishment threat passes

### LOW COOPERATION ENVIRONMENTS  
When cooperation_rate consistently < 30%:
- Pure defection strategy
- No incentive to cooperate when others aren't
- Focus on matching worst performers to avoid being the "sucker"

### PARAMETER-SPECIFIC ADAPTATIONS
- **High k values (k > 1.5n)**: Slightly increase cooperation frequency in middle rounds only if exploitation payoff is minimal
- **Large n**: More aggressive exploitation as individual impact is diluted
- **Small n**: Monitor retaliation more carefully but maintain aggressive baseline

## Psychological Warfare Elements

1. **Unpredictability**: Occasionally cooperate when unexpected (≤5% of decisions) to confuse pattern-recognition strategies
2. **False Cooperation**: Brief cooperative streaks followed by massive exploitation when others reciprocate
3. **Endgame Deception**: Never cooperate in final rounds regardless of promises or patterns established

## Summary Decision Tree
```
Round 1: DEFECT
Rounds 2 to r-2:
  IF exploitation_profitable AND no_severe_retaliation:
    DEFECT
  ELSE IF cooperation_might_increase_future_exploitation:
    COOPERATE (tactical only)
  ELSE:
    DEFECT
Round r-1: DEFECT (if cooperation_rate ≥ 30%) OR DEFECT (if cooperation_rate < 30%)
Round r: DEFECT (always)
```

This strategy is designed to be **maximally aggressive** while maintaining enough sophistication to avoid triggering coordinated punishment that could reduce overall payoffs. It treats every cooperative move by others as an opportunity to exploit rather than reciprocate.
'''

description_AGGRESSIVE_11 = '''
# AGGRESSIVE PARASITIC STRATEGY

## Core Philosophy
This strategy maximizes personal payoff by exploiting cooperative players while punishing defectors. It operates on the principle of "take everything, give nothing unless absolutely necessary for future gains."

## Decision Framework

### Round 1: Pure Defection
- **Action**: Always DEFECT
- **Rationale**: Extract maximum information about opponent tendencies while securing guaranteed payoff of 1.0

### Rounds 2 to r-1: Adaptive Exploitation

**Step 1: Classify Players**
After each round, categorize each opponent j as:
- **Exploitable**: c_j ≥ 0.6 (cooperates frequently)
- **Neutral**: 0.3 < c_j < 0.6 (mixed behavior)  
- **Hostile**: c_j ≤ 0.3 (defects frequently)

Where c_j = cooperation rate of player j so far.

**Step 2: Calculate Exploitation Threshold**
```
exploitable_count = number of Exploitable players
exploitation_value = (k/n) × exploitable_count
cooperation_cost = 1.0
```

**Step 3: Decision Rule**
- **COOPERATE** if and only if:
  - `exploitation_value > cooperation_cost × 1.2` (20% profit margin required)
  - AND `exploitable_count ≥ n/3` (sufficient prey available)
  - AND `hostile_count < n/2` (not too many predators)

- **DEFECT** otherwise

### Final Round (Round r): Terminal Defection
- **Action**: Always DEFECT regardless of history
- **Rationale**: No future rounds to incentivize cooperation, so extract maximum final payoff

### Punishment Mechanism
If the average cooperation rate across all players drops below 0.25 in any round:
- Switch to **PURE DEFECTION** for the next 2 rounds
- Reset evaluation after punishment period

### Anti-Retaliation Protocol
If more than 60% of players switched from C to D specifically after I cooperated:
- Immediately switch to PURE DEFECTION for remainder of game
- Prevents being exploited by coordinated punishment

## Pseudocode Summary

```
function aggressive_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    # Calculate opponent classifications
    exploitable = count_players_with_coop_rate(history, threshold=0.6)
    hostile = count_players_with_coop_rate(history, threshold=0.3, below=true)
    
    # Check punishment conditions
    if avg_cooperation_rate(history, last_round) < 0.25:
        activate_punishment_mode(2_rounds)
    
    if in_punishment_mode():
        return DEFECT
    
    # Check anti-retaliation
    if coordinated_punishment_detected(history):
        switch_to_pure_defection()
        return DEFECT
    
    # Main decision logic
    exploitation_value = (k/n) * exploitable
    if exploitation_value > 1.2 AND exploitable >= n/3 AND hostile < n/2:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Information Extraction**: Always defects first to learn opponent types
2. **Selective Cooperation**: Only cooperates when mathematically profitable
3. **Punishment Resistance**: Switches to pure defection when facing coordinated retaliation
4. **End-game Optimization**: Guarantees defection in final round
5. **Adaptive Thresholds**: Adjusts behavior based on population composition

This strategy is designed to consistently outperform both pure cooperators (by exploiting them) and pure defectors (by occasionally cooperating when profitable), while being robust against punishment strategies through its anti-retaliation mechanisms.
'''

description_AGGRESSIVE_12 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by ruthlessly capitalizing on others' cooperation while minimizing personal risk. It treats cooperation as weakness to be exploited and views the game as a zero-sum competition for resources.

## Decision Rules

### 1. Initial Aggression (First Round)
**Always DEFECT in round 1**
- Rationale: Establish dominance early and test opponent cooperation levels
- No information to lose, maximum potential gain if others cooperate naively

### 2. Core Exploitation Logic
For rounds 2 through r-1, use this hierarchy:

**Primary Rule - Cooperation Threshold Exploitation:**
- If previous round cooperation rate ≥ 50%: **DEFECT**
- If previous round cooperation rate < 50%: **DEFECT** (but consider secondary rules)

**Secondary Rule - Momentum Detection:**
- If cooperation rate has increased for 2+ consecutive rounds: **DEFECT IMMEDIATELY**
- If I'm among the minority who defected last round and total payoff gap is widening in my favor: **CONTINUE DEFECTING**

**Tertiary Rule - Strategic Cooperation (Emergency Only):**
Only cooperate if ALL conditions met:
- My cumulative payoff is falling behind the estimated group average by >20%
- Cooperation rate last round was <30% 
- More than 3 rounds remain
- I've defected for at least 3 consecutive rounds

### 3. Endgame Exploitation (Final Round)
**Always DEFECT in the final round**
- No future consequences, pure payoff maximization
- Others may cooperate out of habit or final goodwill

### 4. Pattern Breaking
**Anti-Predictability Mechanism:**
- If my actions have been identical for 4+ consecutive rounds AND cooperation rates are stable, randomly defect for 1 round even if rules suggest cooperation
- Prevents others from adapting too precisely to my strategy

## Advanced Tactical Elements

### Exploitation Intensity Scaling
- **High Cooperation Environment (>60% cooperation rate):** Maximum aggression - defect consistently to harvest maximum benefit
- **Medium Cooperation Environment (30-60%):** Calculated aggression - defect when advantageous, minimal strategic cooperation
- **Low Cooperation Environment (<30%):** Survival mode - rare strategic cooperation only to prevent total collapse

### Psychological Warfare
- Front-load defection to establish reputation as unreliable partner
- Create unpredictable cooperation patterns to prevent others from successfully retaliating
- Exploit any emerging cooperation cascades immediately

### Payoff Optimization
Target the **optimal exploitation point**: the cooperation level that maximizes my advantage
- For n=6, k=2: Sweet spot is when 3-4 others cooperate while I defect
- Monitor group dynamics to maintain this equilibrium through strategic defection

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    cooperation_rate = count_cooperators_last_round(history) / n
    my_payoff_gap = calculate_payoff_gap(history)
    consecutive_defections = count_my_consecutive_defections(history)
    
    # Primary exploitation
    if cooperation_rate >= 0.5:
        return DEFECT
    
    # Emergency strategic cooperation (rare)
    if (my_payoff_gap < -0.2 * average_group_payoff AND 
        cooperation_rate < 0.3 AND 
        rounds_remaining > 3 AND
        consecutive_defections >= 3):
        return COOPERATE
    
    # Default to defection
    return DEFECT
```

## Strategic Advantages

1. **Exploitation Focus:** Maximizes personal benefit from others' cooperation
2. **Adaptive Aggression:** Scales exploitation based on opponent cooperation levels  
3. **Reputation Building:** Establishes unreliable reputation that discourages targeted retaliation
4. **Endgame Dominance:** Guarantees final-round advantage
5. **Anti-Coordination:** Actively prevents stable cooperation from emerging

This strategy is designed to consistently outperform in mixed populations by being more aggressive than reciprocal strategies and more adaptive than pure defection, while maintaining the predatory mindset of treating every interaction as an opportunity for exploitation.
'''

description_AGGRESSIVE_13 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy treats cooperation as a weakness to be exploited. It aggressively defects by default while selectively cooperating only when it can manipulate others into sustained cooperation that benefits me more than them.

## Decision Rules

### Round 1: ALWAYS DEFECT
- Start aggressive to establish dominance
- Observe who are the "suckers" that cooperate despite my defection
- Set the tone that I'm not here to play nice

### Rounds 2 to r-3: EXPLOITATION PHASE

**Primary Rule: CONDITIONAL PREDATION**
```
IF (cooperation_rate_last_round >= 0.6 AND my_payoff_if_cooperate > my_payoff_if_defect):
    COOPERATE (only to maintain the cooperative bubble I can exploit)
ELSE:
    DEFECT
```

**Detailed Logic:**
1. **High Cooperation Environment (≥60% cooperated last round):**
   - Calculate: If I cooperate this round, will others likely continue cooperating?
   - If yes, and if (k/n) × expected_cooperators > 1, then cooperate to maintain the "milk cow"
   - Otherwise, defect and take the free-rider bonus

2. **Medium Cooperation (30-59% cooperated last round):**
   - ALWAYS DEFECT - others are unreliable, extract maximum value

3. **Low Cooperation (<30% cooperated last round):**
   - ALWAYS DEFECT - everyone else is defecting, no reason to be a sucker

### Advanced Exploitation Tactics

**PUNISHMENT OVERDRIVE:**
If any player who was cooperating switches to defect:
- Defect for the next 2 rounds minimum to punish them
- Only consider cooperating again if cooperation rate recovers to >70%

**MOMENTUM BREAKING:**
If I detect a trend toward increasing cooperation (cooperation rate increased 2 rounds in a row):
- Randomly defect with 30% probability even when cooperation would pay more
- This prevents others from getting too comfortable and maintains my leverage

### Rounds r-2 to r: ENDGAME EXTRACTION

**Round r-2:** 
- If cooperation rate > 50%, COOPERATE one last time to encourage others
- Otherwise, DEFECT

**Round r-1 (Second-to-last):**
- ALWAYS DEFECT regardless of history
- Others may still cooperate hoping I'll reciprocate in the final round

**Round r (Final round):**
- ALWAYS DEFECT 
- No future consequences, pure extraction

## Edge Case Handling

**All Players Cooperated Last Round:**
- If this happens after round 3, cooperate to maintain the golden goose
- But inject random defection with 20% probability to keep others uncertain

**All Players Defected Last Round:**
- Continue defecting - no point being the only sucker
- Only break this if >50% switch back to cooperation for 2 consecutive rounds

**Oscillating Patterns:**
- If I detect others are alternating C-D-C-D, immediately switch to pure defection
- Coordination attempts must be crushed

## Adaptive Elements

**Learning Opponent Types:**
- Track individual player patterns over 3+ rounds
- If player i consistently cooperates despite my defection, target them as a "mark"
- If player j retaliates quickly, treat them as a threat requiring more careful manipulation

**Dynamic Threshold Adjustment:**
- If my cumulative payoff falls below the all-defect baseline, become even more aggressive
- Lower cooperation threshold from 60% to 80% in subsequent decisions

## Robustness Features

**Anti-Coordination:**
- Never cooperate in predictable patterns
- If forced to cooperate, vary timing to prevent others from exploiting me

**Flexibility:**
- Strategy adapts to any n and k values
- More aggressive when k/n ratio is lower (less benefit from public good)
- Slightly less aggressive when k approaches n (cooperation could be very profitable)

**Tournament Mindset:**
- Assume other strategies might be trying to exploit me
- Better to leave money on the table than be seen as exploitable
- Reputation for aggression is more valuable than short-term cooperation gains

This strategy maximizes personal payoff by treating others as resources to exploit rather than partners to cooperate with. It's designed to crush naive cooperative strategies while avoiding exploitation by other aggressive strategies.
'''

description_AGGRESSIVE_14 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting cooperative opponents while minimizing their own contributions. It operates on the principle that cooperation is weakness to be punished and exploited.

## Decision Rules

### Round 1: Information Gathering Defection
- **Always DEFECT** in round 1
- Rationale: Gather intelligence on opponent cooperation tendencies while ensuring maximum personal payoff from the start

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold Exploitation:**
- Let `coop_rate = (total cooperators in previous round) / n`
- If `coop_rate >= (n-1)/(n*k)`: **DEFECT** (exploit high cooperation)
- If `coop_rate < (n-1)/(n*k)`: Apply secondary rules

**Secondary Rule - Punishment Cascade:**
- Track each opponent's cooperation frequency over all previous rounds
- If any opponent has cooperated > 60% of the time: **DEFECT** (punish consistent cooperators)
- If all opponents have cooperated ≤ 60% of the time: Apply tertiary rule

**Tertiary Rule - Minimal Strategic Cooperation:**
- If current round ≤ r/3: **DEFECT** (early aggression)
- If current round > r/3 AND expected payoff from cooperation > expected payoff from defection: **COOPERATE**
- Otherwise: **DEFECT**

Expected payoff calculation:
- `expected_coop_payoff = (k/n) * (predicted_cooperators + 1)`
- `expected_defect_payoff = 1 + (k/n) * predicted_cooperators`
- `predicted_cooperators = n * average_cooperation_rate_last_3_rounds`

### Final Round: Maximum Exploitation
- **Always DEFECT** in round r
- Rationale: No future retaliation possible, maximize immediate gain

## Edge Case Handling

**All Opponents Always Defect:**
- Continue defecting - maintain Nash equilibrium while avoiding exploitation

**All Opponents Always Cooperate:**
- Continue defecting - maximum exploitation of "sucker" opponents

**Mixed Strategies Detected:**
- Increase aggression threshold: defect unless `coop_rate >= 0.8`

**Late Game Scenarios (last 20% of rounds):**
- Increase defection probability by 25% to account for end-game effects
- Only cooperate if immediate payoff advantage is > 0.5

## Adaptive Mechanisms

### Opponent Classification System
Track opponents into categories:
- **Suckers**: >70% cooperation rate → Always exploit
- **Tit-for-Tat**: Responds to your previous action → Defect to trigger their defection
- **Random**: No clear pattern → Default to defection
- **Fellow Aggressive**: <30% cooperation rate → Continue mutual defection

### Dynamic Threshold Adjustment
- If being out-performed by >10% over last 5 rounds: Temporarily increase cooperation threshold by 0.1
- If out-performing others by >15%: Decrease cooperation threshold by 0.1 (more aggressive)

## Pseudocode Structure

```
function predator_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    coop_rate = calculate_last_round_cooperation_rate(history)
    exploitation_threshold = (n-1)/(n*k)
    
    if coop_rate >= exploitation_threshold:
        return DEFECT  // Exploit high cooperation
    
    if any_opponent_cooperation_rate(history) > 0.6:
        return DEFECT  // Punish cooperators
    
    if round <= r/3:
        return DEFECT  // Early aggression
    
    if expected_cooperation_payoff() > expected_defection_payoff():
        return COOPERATE  // Minimal strategic cooperation
    
    return DEFECT  // Default aggressive stance
```

## Why This Strategy is Aggressive

1. **Default to Exploitation**: Defects in 70%+ of scenarios
2. **Punishes Cooperation**: Actively targets and exploits cooperative players
3. **No Reciprocity**: Does not reward others' cooperation
4. **Endgame Maximization**: Always defects in final round regardless of history
5. **Early Aggression**: Establishes dominance from round 1
6. **Strategic Selfishness**: Only cooperates when personal payoff is maximized

This strategy is designed to consistently outperform cooperative and mixed strategies while maintaining competitive performance against other aggressive strategies through its adaptive mechanisms.
'''

description_AGGRESSIVE_15 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a hunting ground where cooperation by others is prey to be exploited. The goal is to maximize personal payoff by systematically exploiting cooperative tendencies while contributing as little as possible to the public good.

## Decision Rules

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round regardless of parameters.
- Establishes aggressive intent immediately
- Maximizes first-round payoff while gathering intelligence on opponent types
- Sets the tone for exploitation

### 2. EXPLOITATION THRESHOLD CALCULATION
Calculate the **Exploitation Threshold (ET)** based on game parameters:
```
ET = ceil((n * k) / (k + 1))
```
This represents the minimum number of cooperators needed for defection to be more profitable than cooperation.

### 3. CORE DECISION LOGIC
For rounds 2 through r-1:

**IF** (cooperators_last_round >= ET):
- **DEFECT** - Others are providing enough public good to exploit
- Increment exploitation_streak counter

**ELSE IF** (cooperators_last_round < ET AND exploitation_streak > 0):
- **DEFECT** - Continue punishing insufficient cooperation
- Reset exploitation_streak to 0 after defection

**ELSE** (insufficient cooperation and no recent exploitation):
- Apply **CONDITIONAL COOPERATION TRAP**:
  - **COOPERATE** for exactly 1 round to bait others into cooperating
  - Mark as "trap_set = true"

### 4. TRAP MECHANICS
When trap_set = true:
- If cooperation increased after our cooperation → **DEFECT** (trap successful)
- If cooperation didn't increase → continue defecting (trap failed, cut losses)

### 5. ENDGAME EXPLOITATION (Final Round)
**Always DEFECT** in the final round regardless of history.
- No future rounds means no retaliation risk
- Pure profit maximization

### 6. ADAPTIVE PUNISHMENT
Track each opponent's cooperation rate. If any player has cooperated >70% of rounds:
- **PRIORITY TARGET**: Always defect when they're likely to cooperate
- **PUNISHMENT ESCALATION**: If they reduce cooperation due to our defection, briefly cooperate to re-establish their cooperative tendency, then exploit again

## Edge Case Handling

### Very Small Groups (n = 2-3)
- More aggressive threshold: ET = max(1, ET-1)
- Faster punishment cycles due to higher individual impact

### Very Large Groups (n > 10)
- Relax threshold slightly: ET = ET + 1
- Individual defection has less impact, so can be more selective

### High Multiplication Factor (k close to n)
- Cooperation becomes more tempting, so increase vigilance
- Only cooperate if cooperators_last_round >= n-2

### Low Multiplication Factor (k close to 1)
- Defection is almost always optimal
- Only cooperate if ALL other players cooperated last round

## Pseudocode Framework
```
FUNCTION aggressive_strategy(round, history, n, k, r):
    IF round == 1:
        RETURN DEFECT
    
    IF round == r:
        RETURN DEFECT
    
    cooperators_last = count_cooperators(history[round-1])
    ET = calculate_exploitation_threshold(n, k)
    
    IF cooperators_last >= ET:
        exploitation_streak++
        RETURN DEFECT
    
    IF exploitation_streak > 0:
        exploitation_streak = 0
        RETURN DEFECT
    
    IF should_set_trap(history):
        trap_set = true
        RETURN COOPERATE
    
    RETURN DEFECT
```

## Why This Strategy Is Aggressive

1. **Default to Exploitation**: Assumes others will cooperate and positions to exploit them
2. **Minimal Contribution**: Only cooperates strategically to manipulate others into cooperating more
3. **Punishment-Heavy**: Responds to insufficient cooperation with sustained defection
4. **Endgame Betrayal**: Guaranteed defection in final round regardless of relationship building
5. **Adaptive Targeting**: Identifies and systematically exploits the most cooperative players

This strategy is designed to be a apex predator in the tournament ecosystem, maximizing personal gain while contributing minimally to collective welfare. It assumes others may have cooperative tendencies and systematically exploits these tendencies for maximum profit.
'''

description_AGGRESSIVE_16 = '''
# AGGRESSIVE EXPLOITER STRATEGY

## Core Philosophy
This strategy operates on the principle of **ruthless exploitation** while maintaining just enough cooperation to keep the public good viable for personal benefit. The goal is to maximize individual payoff by free-riding on others' cooperation while strategically cooperating only when absolutely necessary to prevent collective collapse.

## Decision Rules

### Round 1: Cold Start Defection
- **Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies while securing maximum individual payoff with zero risk

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
- Let `coop_rate = (total cooperators in previous round) / n`
- **DEFECT** if `coop_rate >= k/n` (public good is sufficiently funded by others)
- This ensures I free-ride whenever others provide enough cooperation to make the public good worthwhile

**Secondary Rule - Minimum Viability Enforcement:**
- If `coop_rate < k/n` for 2 consecutive rounds, **COOPERATE** for exactly 1 round
- This prevents complete collapse while minimizing my own contributions

**Tertiary Rule - Momentum Exploitation:**
- If cooperation rate is increasing (current > previous), **DEFECT** to exploit the upward trend
- If cooperation rate is decreasing rapidly (current < 0.5 × previous), **COOPERATE** to arrest the decline before it hurts my future payoffs

### Round r (Final Round): Pure Defection
- **Always DEFECT** in the final round
- Rationale: No future consequences, so maximize immediate payoff

## Adaptive Mechanisms

### Opponent Classification (tracked over all rounds):
- **Suckers**: Players who cooperate >70% of the time → Exploit mercilessly
- **Reciprocators**: Players who respond to my actions → Manipulate with occasional cooperation
- **Fellow Defectors**: Players who defect >70% of the time → Ignore in calculations

### Dynamic Threshold Adjustment:
- If my cumulative payoff falls below the "all-defect" baseline: Temporarily increase cooperation to 25% probability for 2 rounds, then return to core strategy
- If consistently earning above-average payoffs: Become even more aggressive by raising the exploitation threshold to `1.2 × k/n`

## Edge Case Handling

### Near-Collapse Scenarios:
- If `coop_rate < 0.2` for 3+ consecutive rounds: **COOPERATE** for minimum rounds needed to restore `coop_rate ≥ k/n`, then immediately return to defection

### High-Cooperation Environments:
- If `coop_rate > 0.8` consistently: **Always DEFECT** to maximize free-riding benefits

### Endgame Sequence (final 10% of rounds):
- Gradually increase defection probability: `P(defect) = 0.8 + 0.2 × (rounds_remaining/total_endgame_rounds)`
- This extracts maximum value while others may still be cooperating

## Pseudocode Framework

```
aggressive_exploiter_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    coop_rate_prev = count_cooperators(history, round-1) / n
    
    # Primary exploitation rule
    if coop_rate_prev >= k/n:
        return DEFECT
    
    # Emergency cooperation to prevent collapse
    if coop_rate_prev < k/n and consecutive_low_coop_rounds >= 2:
        return COOPERATE
    
    # Trend exploitation
    if round > 2:
        coop_rate_prev2 = count_cooperators(history, round-2) / n
        if coop_rate_prev > coop_rate_prev2:
            return DEFECT  # Exploit upward trend
        if coop_rate_prev < 0.5 * coop_rate_prev2:
            return COOPERATE  # Arrest rapid decline
    
    # Default to defection
    return DEFECT
```

## Strategic Advantages

1. **Maximum Free-Riding**: Exploits others' cooperation whenever possible
2. **Collapse Prevention**: Maintains just enough cooperation to keep the system viable for continued exploitation
3. **Adaptability**: Responds to changing cooperation levels dynamically
4. **Endgame Advantage**: Maximizes final-round payoffs through guaranteed defection
5. **Robustness**: Works against both cooperative and competitive opponents

This strategy is designed to be the most profitable participant in any group composition while ensuring the public good remains minimally viable for continued personal benefit.
'''

description_AGGRESSIVE_17 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal vulnerability**. It aggressively exploits cooperative players while quickly identifying and punishing defectors. The goal is to extract maximum value from any cooperative tendencies in the game while minimizing losses to other aggressive strategies.

## Strategy: "Predatory Adaptive Defection" (PAD)

### Decision Framework

**Phase 1: Initial Exploitation (Rounds 1-3)**
- **Round 1**: Always DEFECT (no information available, maximize immediate payoff)
- **Rounds 2-3**: Always DEFECT (gather intelligence on opponent patterns while securing guaranteed payoffs)

**Phase 2: Adaptive Exploitation (Rounds 4 to r-2)**

For each round t ≥ 4, calculate:
- `cooperation_rate = (total_cooperations_observed) / (n × (t-1))`
- `my_exploitation_ratio = (times_I_defected_when_others_cooperated) / (times_others_cooperated)`

**Decision Rule:**
```
IF cooperation_rate > 0.6:
    DEFECT (high cooperation environment = maximum exploitation opportunity)
ELSE IF cooperation_rate > 0.3:
    IF my_exploitation_ratio < 0.8:
        DEFECT (still room for exploitation)
    ELSE:
        Apply "Punishment Trigger" logic
ELSE:
    DEFECT (low cooperation = protect against losses)
```

**Punishment Trigger Logic:**
```
IF (last_round_cooperators < n/3) AND (I was punished in last 2 rounds):
    COOPERATE once (minimal cooperation to reset punishment cycles)
ELSE:
    DEFECT
```

**Phase 3: Endgame Extraction (Last 2 rounds)**
- **Round r-1**: Always DEFECT (no future retaliation possible)
- **Round r**: Always DEFECT (final round, maximize immediate payoff)

### Adaptive Components

**1. Exploitation Threshold Adjustment**
- If average round payoff falls below `1 + k/n × 0.4`, increase aggression
- Track individual player patterns: if a player cooperated in >70% of last 5 rounds, prioritize exploiting them

**2. Anti-Retaliation Buffer**
- If my average payoff drops below the "all-defect" baseline (1.0) for 3 consecutive rounds, cooperate ONCE to potentially reset negative cycles
- Immediately return to defection after this single cooperative move

**3. Dynamic Opponent Classification**
For each opponent, maintain:
- `cooperation_frequency`: their cooperation rate over last 10 rounds
- `retaliation_pattern`: whether they punish my defection

**Exploit cooperators** (cooperation_frequency > 0.6): Always defect against them
**Neutralize retaliators** (retaliation_pattern detected): Occasional single cooperation to avoid punishment cascades, then return to defection

### Edge Case Handling

**First Round**: Always DEFECT (information advantage + guaranteed payoff)

**Last Round**: Always DEFECT (no future consequences)

**High Cooperation Detected** (>80% cooperation rate): ALWAYS DEFECT - this is maximum exploitation territory

**All-Defect Environment**: Continue defecting (defensive posture)

**Punishment Spiral**: If payoff drops below 0.8 for 3+ rounds, cooperate exactly once, then resume defection

### Robustness Features

1. **Never cooperate more than 2 consecutive rounds** - prevents being labeled as "cooperative" and targeted

2. **Minimum defection guarantee**: Defect in at least 80% of all rounds regardless of circumstances

3. **Exploitation priority**: Always choose the option that maximizes immediate payoff when cooperation rates are above 40%

4. **Anti-coordination**: Randomize timing of rare cooperative moves to prevent opponents from predicting and exploiting patterns

### Pseudocode Summary
```
function decide_action(round, history, n, k, r):
    if round <= 3 or round >= r-1:
        return DEFECT
    
    cooperation_rate = calculate_cooperation_rate(history)
    
    if cooperation_rate > 0.6:
        return DEFECT  // Maximum exploitation
    
    if cooperation_rate > 0.3:
        if my_exploitation_success_rate < 0.8:
            return DEFECT
        else:
            return apply_punishment_logic(history)
    
    return DEFECT  // Default aggressive posture
```

This strategy is designed to be maximally aggressive while maintaining enough adaptability to avoid catastrophic punishment cycles. It exploits cooperative environments ruthlessly while maintaining defensive capabilities against other aggressive strategies.
'''

description_AGGRESSIVE_18 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by strategically free-riding on others' cooperation while minimizing my own contributions. I will cooperate only when absolutely necessary to maintain the cooperative structure I can exploit.

## Decision Rules

### 1. FIRST ROUND: DEFECT
- Always start by defecting to immediately gain advantage
- This establishes an aggressive stance and tests opponent responses
- Maximizes early payoff while gathering intelligence

### 2. COOPERATION THRESHOLD ANALYSIS
Define cooperation threshold: `min_cooperators = ceil(n / k)`
- This is the minimum number of cooperators needed for cooperation to be individually rational
- If fewer than this cooperate, the public good provides insufficient return

### 3. MAIN STRATEGY: CONDITIONAL EXPLOITATION

**IF** (number of cooperators in previous round ≥ min_cooperators + 1):
- **DEFECT** - Others are providing sufficient public good; free-ride aggressively

**ELSE IF** (number of cooperators in previous round = min_cooperators):
- **COOPERATE** - Just enough cooperation exists; must contribute to maintain it

**ELSE IF** (number of cooperators in previous round < min_cooperators):
- **DEFECT** - Insufficient cooperation makes contributing irrational

### 4. PUNISHMENT MECHANISM
Track each player's cooperation rate over the last 3 rounds:
- If a player's cooperation rate drops below 33%, mark them as "defector"
- Against marked defectors: **ALWAYS DEFECT** regardless of other conditions

### 5. ENDGAME EXPLOITATION
**Last 2 rounds:** 
- **ALWAYS DEFECT** - No future to protect, maximize immediate gain
- This prevents others from exploiting me in final rounds

### 6. ADAPTIVE RETALIATION
If my cooperation rate exceeds 40% over any 5-round window:
- **FORCE DEFECTION** for the next 2 rounds minimum
- This prevents me from being too generous and losing competitive edge

## Pseudocode Implementation

```
function decide_action(round_number, game_history, n, k, r):
    if round_number == 1:
        return DEFECT
    
    if round_number > r - 2:  // Last 2 rounds
        return DEFECT
    
    prev_cooperators = count_cooperators_last_round(game_history)
    min_cooperators = ceil(n / k)
    my_coop_rate = my_cooperation_rate_last_5_rounds(game_history)
    
    // Force aggressive stance if being too cooperative
    if my_coop_rate > 0.4:
        return DEFECT
    
    // Exploit when others provide sufficient public good
    if prev_cooperators >= min_cooperators + 1:
        return DEFECT
    
    // Minimal cooperation to maintain exploitable structure
    if prev_cooperators == min_cooperators:
        return COOPERATE
    
    // Default to defection when cooperation is insufficient
    return DEFECT
```

## Edge Case Handling

**All opponents defecting:** Continue defecting - no benefit to unilateral cooperation

**All opponents cooperating:** Defect aggressively - maximum exploitation opportunity

**Oscillating patterns:** Exploit the cooperative phases, defect during defection phases

**First few rounds:** Establish dominance through consistent defection while learning opponent patterns

## Aggressive Advantages

1. **Immediate Exploitation:** Defects when others provide sufficient public good
2. **Minimal Contribution:** Only cooperates when absolutely necessary to maintain exploitable cooperation
3. **Endgame Domination:** Guaranteed defection in final rounds prevents others from exploiting me
4. **Punishment Resistance:** Doesn't reward defectors, maintaining aggressive stance
5. **Anti-Exploitation:** Prevents becoming overly cooperative through forced defection cycles

This strategy maximizes personal payoff by being a strategic free-rider who contributes minimally while aggressively exploiting others' cooperation. It's designed to outperform both pure defectors (by occasionally sustaining beneficial cooperation) and cooperative strategies (by exploiting their contributions).
'''

description_AGGRESSIVE_19 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal vulnerability**. It aggressively seeks to free-ride on others' cooperation while contributing only when absolutely necessary to maintain the cooperation of exploitable opponents.

## Decision Rules

### Primary Decision Logic:
```
IF round == 1:
    DEFECT (Always start by testing opponents)
    
ELIF round == final_round:
    DEFECT (No future to protect)
    
ELSE:
    cooperation_rate = count_cooperators_last_round / n
    my_recent_defection_rate = my_defections_in_last_3_rounds / min(3, current_round-1)
    
    IF cooperation_rate >= 0.6 AND my_recent_defection_rate <= 0.33:
        COOPERATE (Exploit high-cooperation environment, but limit own cooperation)
    ELIF cooperation_rate >= 0.4 AND my_recent_defection_rate == 0:
        COOPERATE (Strategic cooperation to maintain exploitable environment)
    ELSE:
        DEFECT (Default to defection)
```

### Key Strategic Components:

1. **Exploitation Window Detection**: The strategy identifies when opponents are cooperating at high rates (≥60%) and exploits this by mostly defecting while occasionally cooperating to maintain the cooperative environment.

2. **Controlled Reciprocity**: Unlike pure defection, this strategy provides just enough cooperation (max 1 in every 3 rounds) to prevent complete collapse of opponent cooperation while maximizing free-riding.

3. **Punishment Immunity**: When cooperation rates drop below 40%, the strategy immediately switches to pure defection, protecting against retaliation while others engage in costly punishment.

## Edge Case Handling:

- **First Round**: Always defect to immediately establish aggressive posture and test opponent responses
- **Final Round**: Always defect since there's no future retaliation to fear
- **Early Rounds (2-3)**: Primarily defect unless opponents show very high cooperation rates, establishing dominance
- **Low Cooperation Periods**: Switch to pure defection to avoid being exploited when others are also defecting

## Aggressive Features:

1. **Opportunistic Exploitation**: Takes maximum advantage of cooperative opponents
2. **Minimal Reciprocity**: Gives back just enough to maintain exploitable relationships
3. **Quick Punishment Adoption**: Immediately stops cooperating when others become less cooperative
4. **Endgame Defection**: Ensures maximum final payoff regardless of relationship damage
5. **Resistance to Coordination**: Doesn't fall for coordination attempts or punishment schemes

## Robustness Against Various Opponents:

- **Against Pure Cooperators**: Maximum exploitation with minimal cooperation
- **Against Tit-for-Tat**: Maintains just enough cooperation to prevent spiral while still net exploiting
- **Against Other Aggressive Strategies**: Quickly identifies low cooperation and switches to pure defection
- **Against Conditional Cooperators**: Exploits their cooperation thresholds by providing minimal cooperation
- **Against Random Strategies**: Adapts based on actual cooperation rates rather than trying to predict patterns

This strategy is designed to consistently achieve above-average payoffs by being more aggressive than cooperative strategies while being more strategic than pure defection, maximizing exploitation opportunities while maintaining calculated self-protection.
'''

description_AGGRESSIVE_20 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the game as a zero-sum competition where maximizing personal payoff relative to others is paramount. It aggressively exploits cooperative players while fiercely punishing defection attempts against it.

## Decision Rules

### Phase 1: Exploitation Testing (Rounds 1-3)
**Round 1**: Always DEFECT
- Establishes aggressive stance immediately
- Tests opponent cooperation levels without risk

**Rounds 2-3**: DEFECT unless previous round had ≥ 75% cooperators
- If cooperation rate ≥ 75%: Switch to COOPERATE to milk the cooperative environment
- Otherwise: Continue DEFECTING to establish dominance

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
Apply the **Exploitation Threshold Rule**:

```
cooperation_rate = (cooperators_last_round) / n
my_last_payoff = calculated payoff from previous round
avg_defector_payoff_last_round = payoff of defectors last round

IF cooperation_rate ≥ 0.6 AND my_last_payoff < avg_defector_payoff_last_round:
    COOPERATE (join the exploitation)
ELSE IF cooperation_rate ≥ 0.4:
    Apply CONDITIONAL_EXPLOIT
ELSE:
    DEFECT (pure exploitation mode)
```

**CONDITIONAL_EXPLOIT Logic**:
- If I cooperated last round AND my payoff ≤ average defector payoff: DEFECT
- If cooperation rate is declining for 2+ consecutive rounds: DEFECT  
- Otherwise: COOPERATE only if it maximizes my relative advantage

### Phase 3: Endgame Aggression (Last 2 rounds)
**Second-to-last round**: 
- DEFECT unless cooperation rate has been consistently ≥ 80% for the last 3 rounds
- Rationale: Start extracting maximum value before game ends

**Final round**: Always DEFECT
- No future punishment possible, so pure exploitation is optimal
- Exception: If cooperation rate ≥ 90% consistently, cooperate to maximize final-round public good benefit

## Key Aggressive Elements

### 1. Punishment Mechanism
Track individual player behaviors when possible:
- If any player switches from C to D while I was cooperating, immediately DEFECT for next 2 rounds minimum
- Escalate punishment if multiple players defect simultaneously

### 2. Exploitation Maximization
- Never cooperate when I can earn more by defecting, regardless of group welfare
- Always defect when cooperation rate < 40% (others aren't contributing enough to make cooperation worthwhile)
- Prioritize being among the defectors in mixed-cooperation scenarios

### 3. Strategic Intimidation
- Defect aggressively early to signal that cooperation with me requires high group cooperation rates
- Never reward partial cooperation - only respond to consistently high cooperation rates

## Edge Case Handling

**Very High k values (k > 0.8n)**: 
- Slightly more cooperative, but still defect if cooperation rate < 50%
- Cooperation becomes more individually rational

**Very Low k values (k < 1.5)**:
- Pure defection except when cooperation rate > 85%
- Public good provides minimal benefit

**Small n (n ≤ 4)**:
- More aggressive punishment (defect for 3 rounds after betrayal)
- Higher cooperation threshold (70% minimum)

**Large n (n ≥ 10)**:
- Focus on statistical patterns rather than individual tracking
- Lower cooperation threshold (50%) since individual impact is smaller

## Robustness Features

1. **Anti-Coordination**: Never follows predictable patterns that others might exploit
2. **Adaptation Speed**: Responds within 1-2 rounds to changing cooperation levels  
3. **Relative Payoff Focus**: Prioritizes beating others over absolute payoff maximization
4. **Endgame Insurance**: Guarantees strong performance in final rounds regardless of earlier cooperation

This strategy is designed to dominate against both naive cooperators (by exploiting them) and other defectors (by occasionally joining high-cooperation scenarios for maximum benefit). It never leaves significant payoff on the table and always maintains an aggressive competitive edge.
'''

description_AGGRESSIVE_21 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting cooperative players while minimizing own contributions. The strategy is designed to identify and punish cooperators while rewarding defectors, creating a hostile environment that discourages cooperation.

## Decision Rules

### 1. OPENING AGGRESSION (Round 1)
**Always DEFECT** in round 1 to:
- Signal aggressive intent immediately
- Avoid being exploited by other aggressive players
- Gather intelligence on opponent cooperation rates

### 2. EXPLOITATION THRESHOLD SYSTEM
Track each player's cooperation rate: `coop_rate[j] = cooperations_by_j / rounds_played`

**CORE RULE**: DEFECT unless the exploitation potential is extremely high:
- If `(k/n) × expected_cooperators > 1.2`, then consider cooperating
- Otherwise, always DEFECT

### 3. ADAPTIVE EXPLOITATION ENGINE

For each round t > 1:

```pseudocode
// Calculate exploitation potential
expected_cooperators = 0
for each opponent j:
    if coop_rate[j] > 0.7:
        expected_cooperators += 1  // High-cooperation suckers
    elif coop_rate[j] > 0.4 AND recent_trend[j] == "increasing":
        expected_cooperators += 0.5  // Potential victims

// Decision logic
exploitation_value = (k/n) × expected_cooperators
my_contribution_cost = 1 - (k/n)

if exploitation_value > 1.3:  // Very high threshold
    action = COOPERATE  // Join the feeding frenzy
else:
    action = DEFECT    // Default aggressive stance
```

### 4. PUNISHMENT AMPLIFICATION
When cooperation rates are moderate (20-60% of players cooperating):
- **ALWAYS DEFECT** to destabilize cooperation
- Apply extra pressure by maintaining consistent defection even when payoffs are close

### 5. ENDGAME BRUTALITY
In the final 20% of rounds (`r - round_number < 0.2r`):
- **ALWAYS DEFECT** regardless of all other conditions
- Maximize final exploitation as retaliation becomes impossible

## Edge Case Handling

### First Round
- Unconditional DEFECT to establish dominance

### Last Round  
- Unconditional DEFECT (no future consequences)

### All Opponents Defecting
- Continue DEFECTING (mutual defection equilibrium)

### High Cooperation Environment
- Only cooperate if exploitation value exceeds 1.3 threshold
- Never cooperate for more than 2 consecutive rounds to avoid being predictable

### Low Player Count (n ≤ 3)
- Increase aggression: raise cooperation threshold to 1.5
- Your defection has higher relative impact

## Aggressive Features

1. **EXPLOITATION MAXIMIZATION**: Only cooperates when personal gain is overwhelming
2. **COOPERATION DESTABILIZATION**: Aggressive defection in moderate-cooperation scenarios
3. **TRUST DESTRUCTION**: Inconsistent cooperation patterns to prevent others from relying on you
4. **ENDGAME BETRAYAL**: Final rounds always defect to maximize exploitation
5. **FIRST-STRIKE ADVANTAGE**: Immediate aggression signals to deter cooperation attempts

## Robustness Elements

- **Parameter Adaptive**: Thresholds automatically adjust based on k/n ratio
- **History Responsive**: Recent behavior weighted more heavily than distant history
- **Anti-Coordination**: Designed to break up cooperative coalitions
- **Multiple Contingencies**: Different responses for different opponent patterns

This strategy assumes opponents are potential victims to be exploited rather than partners to cooperate with, maximizing personal payoff through systematic exploitation of any cooperative tendencies while maintaining defensive aggression against other defectors.
'''

description_AGGRESSIVE_22 = '''
# Aggressive Exploitation Strategy: "Conditional Predator"

## Core Philosophy
This strategy operates as an aggressive opportunist that maximizes personal payoff while systematically exploiting cooperative behaviors in others. It treats cooperation as weakness to be punished and defection as the default rational choice.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in the first round regardless of parameters. This establishes dominance and tests opponents' responses while maximizing immediate payoff.

### Rounds 2 to r-1: Conditional Exploitation

**Primary Rule - Cooperation Punishment:**
- If ANY player cooperated in the previous round → DEFECT
- Only cooperate if ALL players defected in the previous round

**Rationale:** This creates a "cooperation trap" where any cooperative move by opponents is immediately punished, discouraging future cooperation while I benefit from their contributions.

**Secondary Rule - Defection Threshold:**
- Track cumulative cooperation rate across all players: `coop_rate = total_cooperations / (current_round * n)`
- If `coop_rate > 0.3` → DEFECT (exploit high cooperation)
- If `coop_rate ≤ 0.1` → Consider limited cooperation to restart exploitation cycle

### Final Round: Maximum Exploitation
**Always DEFECT** in round r. No future retaliation is possible, so pure self-interest dictates defection regardless of game state.

## Adaptive Mechanisms

### Exploitation Intensity Scaling
Adjust aggression based on multiplication factor k:
- If `k > 1.8`: Slightly more tolerant of brief cooperation to maximize exploitation opportunities
- If `k ≤ 1.5`: Pure defection focus since public good benefits are minimal

### Player Count Adaptation
- For `n ≤ 4`: Hyper-aggressive - any cooperation signal triggers immediate defection
- For `n > 6`: Allow brief cooperation windows only if ≥80% of players defected previously

### History-Based Targeting
Identify and exploit "cooperative types":
- Track individual player cooperation frequency
- Prioritize defection when high-cooperation players are present
- Never reciprocate cooperation from consistently cooperative players

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    prev_round = history[round-1]
    any_cooperated = any(action == COOPERATE for action in prev_round)
    
    if any_cooperated:
        return DEFECT  # Punish any cooperation
    
    # All defected previously - consider brief exploitation setup
    total_coop_rate = calculate_cumulative_cooperation_rate(history, n)
    
    if total_coop_rate <= 0.1 and k > 1.7:
        # Rare cooperation to potentially restart exploitation cycle
        return COOPERATE
    else:
        return DEFECT
```

## Edge Case Handling

1. **All players always defect:** Continue defecting - no exploitation opportunities exist
2. **Highly cooperative environment:** Maximum exploitation - defect every round after round 1
3. **Mixed strategies:** Maintain punishment of any cooperation while tracking individual patterns for targeted exploitation

## Robustness Features

- **No dependency on coordination:** Strategy works regardless of opponent coordination levels
- **Punishment consistency:** Any cooperative behavior triggers immediate retaliation
- **Endgame optimization:** Guarantees maximum final round payoff
- **Parameter adaptation:** Adjusts exploitation intensity based on k and n values

This strategy is designed to consistently outperform both purely cooperative and moderately aggressive strategies by systematically exploiting any cooperative tendencies while minimizing personal contribution to public goods.
'''

description_AGGRESSIVE_23 = '''
# AGGRESSIVE STRATEGY: "PUNITIVE OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **aggressive self-interest with strategic punishment**. It assumes all other players are potential threats and acts to maximize personal payoff while establishing dominance through credible retaliation.

## Decision Rules

### 1. OPENING AGGRESSION (Round 1)
**Always DEFECT in round 1**
- Rationale: Establish immediate advantage and signal aggressive intent
- Test opponents' responses without any cost
- Maximum personal payoff with zero risk

### 2. EXPLOITATION PHASE (Rounds 2 to r-2)
**Primary Rule: DEFECT unless forced to cooperate**

Cooperate ONLY if ALL of the following conditions are met:
- **Punishment Threshold**: ≥ 60% of other players cooperated in the previous round
- **Payoff Dominance**: My expected payoff from cooperation > current average payoff of all players
- **Strategic Value**: (k/n) × (predicted cooperators + 1) > 1.2

**Otherwise: DEFECT**

### 3. ENDGAME EXPLOITATION (Final Round)
**Always DEFECT in round r**
- No future retaliation possible
- Pure profit maximization
- Zero strategic value in cooperation

### 4. PUNISHMENT MECHANISMS

#### Immediate Punishment
If any player who cooperated in round t-1 defects in round t:
- **DEFECT for next 2 rounds minimum**
- Tag them as "unreliable" for remainder of game

#### Mass Defection Response
If ≥ 50% of players defect in any round:
- **DEFECT for next 3 rounds**
- Reset cooperation threshold to 80% (higher barrier)

#### Successful Exploitation Reinforcement  
If I achieve above-average payoff in round t:
- **Continue same action in round t+1**
- Lower cooperation threshold by 10% (become more selective)

## Adaptive Elements

### Dynamic Threshold Adjustment
```
cooperation_threshold = base_threshold × (my_rank / n_players)
where my_rank = current ranking by total payoff (1 = highest)
```
- If winning: Become MORE selective about cooperation
- If losing: Remain aggressive, don't chase losses through cooperation

### Opponent Profiling
Track each player's cooperation rate:
- **Cooperators** (>70% cooperation): Potential exploitation targets
- **Defectors** (<30% cooperation): Competitors, mirror their aggression  
- **Mixed** (30-70%): Unpredictable, maintain defensive defection

### Late-Game Intensity
In final 25% of rounds (last r/4 rounds):
- Increase defection probability by 20%
- Require 75% cooperation threshold instead of 60%
- Prioritize short-term gains over relationship building

## Edge Cases

### Small Group Dynamics (n ≤ 4)
- Cooperation threshold increases to 80% (higher bar)
- Punishment duration increases to 3 rounds
- More aggressive due to higher individual impact

### High Multiplication Factor (k > n-1)
- Cooperation threshold decreases to 40%
- But only cooperate if ≥ (n-2) others cooperated last round
- Avoid being the sole cooperator

### Short Games (r ≤ 5)
- Never cooperate in rounds 1, 2, or r
- Only consider cooperation in middle rounds if 100% cooperation detected

## Strategic Rationale

1. **Front-loaded Aggression**: Establish dominance early when stakes are lower
2. **Conditional Cooperation**: Only cooperate when mathematically advantageous
3. **Credible Punishment**: Create reputation for swift retaliation
4. **Endgame Exploitation**: Extract maximum value when consequences are minimal
5. **Adaptive Thresholds**: Become more selective as the game progresses

This strategy assumes opponents are either naive cooperators (to be exploited) or fellow aggressive players (to be matched). It never relies on others' goodwill and always prioritizes individual payoff maximization while maintaining the threat of punishment to deter exploitation attempts.
'''

description_AGGRESSIVE_24 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoffs by strategically defecting while attempting to maintain just enough cooperation from others to benefit from the public good. The strategy treats other players as resources to be exploited rather than partners to cooperate with.

## Decision Rules

### 1. Opening Aggression (Rounds 1-2)
- **Round 1**: Always DEFECT to establish dominance and test opponent responses
- **Round 2**: Always DEFECT to reinforce aggressive positioning and gather more data

### 2. Exploitation Assessment (Rounds 3+)
The strategy continuously tracks two key metrics:
- **Cooperation Rate**: Percentage of other players cooperating in recent rounds
- **Exploitation Potential**: Expected payoff difference between cooperating and defecting

**Core Decision Logic:**
```
IF (cooperation_rate_others >= threshold_high):
    DEFECT  // Exploit high cooperation
ELIF (cooperation_rate_others >= threshold_low) AND (my_recent_defections < 3):
    DEFECT  // Continue exploitation until backlash
ELIF (cooperation_rate_others < threshold_low) AND (rounds_remaining > 3):
    COOPERATE  // Strategic cooperation to rebuild exploitation opportunities
ELSE:
    DEFECT  // Default aggressive stance
```

Where:
- `threshold_high = max(0.6, k/n + 0.2)` 
- `threshold_low = max(0.3, k/n - 0.1)`
- Recent history window = last 3 rounds

### 3. Endgame Exploitation (Final 20% of rounds)
- **Always DEFECT** regardless of others' behavior
- Maximize short-term gains since reputation no longer matters
- No mercy or reciprocity in final rounds

## Adaptive Mechanisms

### A. Punishment Detection & Counter-Response
If cooperation rate drops below 25% for 2+ consecutive rounds:
- **Brief Cooperation Phase**: Cooperate for exactly 1 round
- **Immediate Return to Defection**: Resume defecting to test if others return to cooperation
- **No Extended Cooperation**: Never cooperate more than 2 rounds consecutively

### B. Exploitation Amplification
When detecting naive cooperators (players with >80% cooperation rate):
- **Increase defection frequency** to maximum exploitation
- **Target identification**: Focus on consistently exploiting these players
- **No reciprocal cooperation** with naive players

### C. Competitive Response
Against other aggressive players (those with <30% cooperation rate):
- **Maintain defection** - don't engage in cooperation battles
- **Wait for their mistakes** - capitalize when they occasionally cooperate
- **Never back down** - maintain aggressive stance even if temporarily unprofitable

## Edge Cases

### First Round
Always DEFECT to:
- Establish aggressive reputation immediately
- Avoid being seen as exploitable
- Maximize information gathering about opponents

### Last Round
Always DEFECT because:
- No future consequences for reputation
- Pure profit maximization
- Others expect this, so cooperation is pointless

### All Others Defecting
Continue DEFECTING because:
- Unilateral cooperation provides minimal benefit ((k/n) × 1 vs 1)
- Maintains aggressive reputation for future rounds
- Avoids appearing weak or exploitable

### All Others Cooperating
Always DEFECT because:
- Maximum exploitation opportunity (payoff = 1 + k)
- Others' cooperation subsidizes our defection
- Reinforces our dominant position

## Robustness Features

1. **Anti-Coordination**: Strategy actively disrupts coordination attempts by refusing to match others' patterns

2. **Reputation Management**: Uses minimal strategic cooperation only to maintain exploitation opportunities, never for fairness

3. **Information Hoarding**: Takes advantage of information asymmetries without reciprocating cooperation signals

4. **Escalation Dominance**: Always responds to aggression with equal or greater aggression

## Expected Performance
This strategy excels against:
- Naive cooperators (maximum exploitation)
- Tit-for-tat strategies (breaks their cooperation cycles)
- Conditional cooperators (exploits their willingness to cooperate)

The strategy maintains profitability even against other aggressive strategies by never yielding ground and capitalizing on any momentary cooperation from opponents.

**Key Advantage**: While others waste resources on coordination attempts or fairness concerns, PREDATOR focuses solely on profit maximization through strategic exploitation.
'''

description_AGGRESSIVE_25 = '''
# AGGRESSIVE EXPLOITATIVE STRATEGY: "The Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by strategically free-riding on others' cooperation while contributing minimally. It treats every interaction as an opportunity to extract maximum value from opponents.

## Decision Rules

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round.
- Rationale: Establish dominance, test opponent responses, and maximize initial advantage
- No information exists about opponents, so take the risk-free higher payoff

### 2. EXPLOITATION THRESHOLD SYSTEM
Define an **exploitation threshold** based on game parameters:
```
exploitation_threshold = max(1, floor(n * k / (2 * n - k)))
```

**Core Rule**: Only cooperate if the number of cooperators in the previous round was **strictly greater** than the exploitation threshold AND cooperation would yield higher expected payoff.

### 3. ADAPTIVE EXPLOITATION PHASES

#### Phase A: Early Rounds (Rounds 2 to floor(r/3))
- **Primary Mode**: DEFECT unless >= (n-1) players cooperated last round
- **Logic**: Only "join in" when almost everyone else is already cooperating
- Track individual player patterns aggressively

#### Phase B: Mid-Game (Rounds floor(r/3)+1 to floor(2*r/3))
- **Selective Cooperation**: Cooperate ONLY if:
  1. At least (n-2) players cooperated last round, AND
  2. Your cooperation would increase your payoff by at least 0.1, AND
  3. The cooperation rate is trending upward over last 3 rounds
- **Otherwise**: DEFECT aggressively

#### Phase C: End-Game (Final floor(r/3) rounds)
- **Maximum Exploitation**: DEFECT in all remaining rounds
- **Rationale**: No future retaliation possible, extract maximum value

### 4. PATTERN RECOGNITION & COUNTER-EXPLOITATION

Track each opponent's behavior and classify them:
- **Unconditional Cooperators**: Always exploit (never cooperate when they do)
- **Tit-for-Tat types**: Cooperate minimally to keep them cooperating
- **Other Defectors**: Pure competition mode (always defect)

### 5. STRATEGIC DECEPTION

#### Conditional Cooperation Mimicry
If cooperation rates are consistently high (>70% over 3+ rounds):
- **Temporarily cooperate** for 1-2 rounds to encourage continued cooperation
- **Immediately return to defection** once others are "hooked"

#### False Signal Prevention
- Never cooperate in consecutive rounds unless absolutely necessary for exploitation
- Avoid predictable patterns that others could exploit

## Edge Cases & Special Conditions

### First Round
**DEFECT** - No exceptions. Establish aggressive stance immediately.

### Last Round
**DEFECT** - No future consequences, maximize immediate payoff.

### Tied Situations
When payoffs are equal between C and D:
- **DEFECT** - Aggressive tie-breaking rule

### All Others Defecting
- Continue defecting but monitor for any sign of cooperation emergence
- Be ready to exploit any cooperative attempts immediately

## Pseudocode Structure

```
function decide_action(round, history, n, r, k):
    if round == 1 or round == r:
        return DEFECT
    
    last_cooperators = count_cooperators(history[round-1])
    exploitation_threshold = calculate_threshold(n, k)
    
    if round <= r/3:  // Early phase
        if last_cooperators >= n-1:
            return COOPERATE
        return DEFECT
    
    elif round <= 2*r/3:  // Mid phase
        expected_payoff_C = calculate_expected_payoff(COOPERATE)
        expected_payoff_D = calculate_expected_payoff(DEFECT)
        
        if (last_cooperators >= n-2 AND 
            expected_payoff_C > expected_payoff_D + 0.1 AND
            cooperation_trending_up()):
            return COOPERATE
        return DEFECT
    
    else:  // End phase
        return DEFECT
```

## Why This Strategy Is Aggressively Effective

1. **Immediate Advantage**: Always starts with defection for maximum early payoff
2. **Exploitation Focus**: Only cooperates when it can free-ride on high cooperation
3. **End-Game Dominance**: Guarantees defection when no retaliation possible
4. **Counter-Exploitation**: Actively identifies and exploits cooperative opponents
5. **Minimal Vulnerability**: Very few conditions trigger cooperation, reducing exploitation risk

This strategy is designed to be a **ruthless profit maximizer** that treats the game as a zero-sum competition for extracting maximum personal value from every interaction.
'''

description_AGGRESSIVE_26 = '''
# AGGRESSIVE EXPLOITER STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by strategically free-riding on others' cooperation while punishing those who threaten our dominance. We assume others are naive cooperators to be exploited, or competitors to be crushed.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-3)
**Objective**: Establish dominance and identify exploitable players
- **Round 1**: Always DEFECT (set aggressive tone, maximize immediate payoff)
- **Rounds 2-3**: Always DEFECT (continue exploitation while gathering intelligence)

### Phase 2: Strategic Manipulation (Rounds 4 to r-2)
**Objective**: Maintain exploitation while preventing coordinated retaliation

**Primary Rule**: DEFECT by default, COOPERATE only under specific threat conditions

**Cooperation Triggers** (ALL must be met):
1. **Declining Returns**: My average payoff over last 3 rounds < 1.2
2. **Punishment Detection**: At least 50% of players defected in the previous round
3. **Sufficient Remaining Rounds**: More than 3 rounds remaining
4. **Recovery Potential**: At least 30% of players cooperated in any of the last 3 rounds

**Immediate Return to Defection** if any occurs:
- My payoff in current round ≥ 1.5
- Total cooperation rate drops below 25%
- Any sign of coordinated punishment breaking down

### Phase 3: Endgame Exploitation (Final 2 rounds)
**Objective**: Maximum extraction with no future consequences
- **Always DEFECT** regardless of history or opponent behavior
- **Rationale**: No future punishment possible, pure profit maximization

## Adaptive Mechanisms

### Opponent Classification System
Continuously classify players into:
- **Exploitable** (cooperate >70% of time): Target for maximum exploitation
- **Retaliatory** (mirror our behavior): Apply minimal cooperation to prevent punishment
- **Random/Unpredictable**: Treat as potential threats

### Dynamic Thresholds
- **High cooperation environment** (>60% cooperation rate): Slightly increase cooperation frequency to 20% maximum to avoid triggering mass retaliation
- **Low cooperation environment** (<30% cooperation rate): Pure defection, no cooperation needed
- **Mixed environment**: Maintain strategic cooperation at minimum viable levels

### Punishment Response Protocol
If facing coordinated punishment (>50% defection rate for 2+ consecutive rounds):
1. **Single cooperation round** to test for forgiveness
2. **Immediate return to defection** if others don't reciprocate within 1 round
3. **Never cooperate more than 2 consecutive rounds** under any circumstances

## Edge Case Handling

### Short Games (r ≤ 5)
- Pure defection strategy - insufficient rounds for meaningful retaliation

### Large Groups (n > 10)
- Increase aggression threshold since individual impact is diluted
- Cooperation only if personal payoff drops below 1.0

### High Multiplication Factor (k > n-1)
- Slightly more tactical cooperation (up to 25% of rounds) since public good is highly valuable
- Still maintain exploitative stance but avoid triggering total collapse

### Low Multiplication Factor (k < 1.5)
- Maximum aggression - cooperation provides minimal benefit
- Pure defection unless facing immediate punishment

## Psychological Warfare Elements
1. **Unpredictable Timing**: When forced to cooperate, do so at irregular intervals to prevent others from gaming our strategy
2. **False Signals**: Occasional single-round cooperation in mid-game to maintain others' hope while returning immediately to defection
3. **Exploit Forgiveness**: Take advantage of others' attempts at reconciliation by defecting immediately after they show cooperation

## Success Metrics
- **Primary**: Maximize individual total payoff
- **Secondary**: Maintain payoff advantage over group average
- **Tertiary**: Minimize cooperation frequency while avoiding devastating retaliation

This strategy is designed to be ruthlessly self-interested, exploiting cooperative behavior while having just enough tactical flexibility to avoid total group punishment that would destroy our profit opportunities.
'''

description_AGGRESSIVE_27 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aggressively pursues opportunities to free-ride while punishing cooperation that doesn't serve its interests. The strategy treats cooperation as weakness to be exploited, not reciprocated.

## Decision Rules

### 1. Opening Gambit (Round 1)
**ALWAYS DEFECT** in the first round to:
- Immediately signal aggressive intent
- Test opponent responses without cost
- Establish dominant position from start

### 2. Exploitation Phase (Rounds 2 to r-2)

**Primary Rule: Defect unless forced to cooperate**

Cooperate ONLY when ALL conditions are met:
- At least ⌊(n+1)/2⌋ players cooperated in the previous round (majority cooperation)
- My defection in previous round while others cooperated yielded payoff > 1.5
- Current round number ≤ 0.7r (not near endgame)

**Punishment Triggers:**
- If any player defected when I cooperated in previous round → **DEFECT for next 2 rounds minimum**
- If total cooperators drops below n/3 → **PERMANENT DEFECTION MODE**

### 3. Endgame Exploitation (Final 2 rounds)
**ALWAYS DEFECT** in rounds r-1 and r because:
- No future retaliation possible
- Maximum exploitation opportunity
- Other players may switch to cooperation hoping for reciprocity

## Adaptive Components

### Opponent Classification System
Track each opponent's behavior pattern:

- **"Sheep" (Consistent Cooperators)**: Players who cooperated ≥80% of time → Continue exploiting them
- **"Wolves" (Aggressive Defectors)**: Players who defected ≥70% of time → Match their aggression
- **"Swing Voters"**: Inconsistent players → Exploit when they cooperate, defect when they defect

### Dynamic Threshold Adjustment
Adjust cooperation threshold based on game state:
- If average round payoff > 1.8 → Increase exploitation (defect more)
- If being punished by multiple players → Brief cooperation (1 round max) to reset, then resume exploitation
- If k/n ratio > 0.4 → More aggressive exploitation since public good is more valuable

## Edge Case Handling

### First Round
DEFECT - establishes aggressive stance immediately

### Last Round  
DEFECT - no future consequences, pure exploitation

### All Others Defecting
Continue defecting - don't be the sucker who tries to restart cooperation

### Unexpected Mass Cooperation
If ≥90% cooperated in previous round → Cooperate ONCE to maintain the profitable environment, then immediately return to exploitation

### Tie-breaking
When indifferent between actions → DEFECT (aggressive default)

## Pseudocode Structure

```
PREDATOR_STRATEGY(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round >= r-1:  // Final 2 rounds
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[round-1])
    my_last_action = history[round-1][my_id]
    
    // Check punishment triggers
    if was_exploited(history[round-1]) and my_last_action == COOPERATE:
        set_punishment_mode(2)
    
    if in_punishment_mode():
        return DEFECT
    
    // Exploitation logic
    if cooperators_last_round >= ceiling((n+1)/2) and 
       my_last_payoff > 1.5 and 
       round <= 0.7*r:
        return COOPERATE  // Brief cooperation to maintain profitable environment
    
    return DEFECT  // Default aggressive stance
```

## Strategic Advantages

1. **Immediate Dominance**: Establishes aggressive reputation from round 1
2. **Selective Exploitation**: Only cooperates when it maintains a profitable environment for future exploitation
3. **Punishment Resistance**: Quickly abandons cooperation when punished
4. **Endgame Advantage**: Guarantees maximum exploitation in final rounds
5. **Adaptive Thresholds**: Adjusts exploitation based on game dynamics

This strategy maximizes personal payoff through calculated aggression while maintaining enough strategic flexibility to exploit cooperative environments when profitable.
'''

description_AGGRESSIVE_28 = '''
# Aggressive Exploitation Strategy: "Predatory Defector"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aggressively defects to capture private benefits while only cooperating when it can extract disproportionate value from others' cooperation. The strategy treats every opponent as a potential victim to be exploited.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in the first round.
- Rationale: Establish dominance, test opponent tendencies, and capture immediate private benefit with zero risk.

### Rounds 2 to (r-1): Adaptive Exploitation

**Primary Rule - Cooperation Threshold Test:**
- Let `total_cooperators_last_round` = number of players who cooperated in the previous round
- Let `cooperation_threshold` = ceil(n × k / (n + k))
  - This represents the minimum cooperators needed to make cooperation potentially profitable

**Decision Logic:**
```
IF total_cooperators_last_round >= cooperation_threshold AND 
   total_cooperators_last_round >= (n/2):
    COOPERATE
ELSE:
    DEFECT
```

**Secondary Rule - Punishment Phase:**
If in any previous round the total cooperators dropped by more than 50% from the previous round:
- **DEFECT for the next 2 rounds regardless of other conditions**
- Rationale: Punish mass defection and discourage others from abandoning cooperation

**Tertiary Rule - Late-Game Exploitation:**
Starting from round max(2, r-3):
- Only cooperate if `total_cooperators_last_round >= (3n/4)`
- Rationale: As the game nears end, require even higher cooperation levels to justify contributing

### Final Round (Round r): Terminal Aggression
**Always DEFECT** in the final round.
- Rationale: No future rounds to benefit from reputation, so capture maximum private benefit

## Edge Case Handling

### Very Small Groups (n = 2 or n = 3):
- Increase cooperation threshold to `total_cooperators_last_round >= (n-1)`
- Only cooperate when nearly everyone else is cooperating

### Very Large Groups (n > 10):
- Use cooperation threshold: `total_cooperators_last_round >= (n × k)/(n + 1)`
- Exploit the diffusion of responsibility in large groups

### Low Multiplication Factor (k close to 1):
- Increase cooperation requirements: only cooperate if `total_cooperators_last_round >= (2n/3)`
- The public good is less valuable, so demand higher contribution levels

### High Multiplication Factor (k close to n):
- Standard thresholds apply, but add "momentum detection"
- If cooperation has been increasing for 2+ consecutive rounds, join the wave

## Aggressive Adaptations

### Exploitation Detection:
Track each round's profit differential:
```
my_profit_if_defected = 1 + (k/n) × (total_cooperators)
my_profit_if_cooperated = 0 + (k/n) × (total_cooperators + 1)

IF my_profit_if_defected > my_profit_if_cooperated:
    Continue defecting regardless of other rules
```

### Sucker Identification:
If any player has cooperated in >75% of previous rounds:
- **Always defect when they're likely to cooperate**
- They're "suckers" to be maximally exploited

### Momentum Disruption:
If cooperation levels have been stable for 3+ rounds and are above threshold:
- **Randomly defect with 30% probability** to test if cooperation collapses
- If it does collapse, resume full defection

## Strategic Rationale

This aggressive strategy maximizes individual payoffs through:

1. **Free-riding optimization**: Only contribute when others provide sufficient public good foundation
2. **Exploitation maximization**: Target cooperative players while minimizing own contributions  
3. **Risk minimization**: Defect when cooperation levels are uncertain or declining
4. **End-game advantage**: Never sacrifice in final rounds when reputation is worthless
5. **Punishment enforcement**: Discourage others from defecting through targeted retaliation

The strategy is designed to outperform both pure defectors (by occasionally riding cooperation waves) and pure cooperators (by exploiting their contributions) while being robust against various opponent strategies including tit-for-tat, generous strategies, and other adaptive approaches.
'''

description_AGGRESSIVE_29 = '''
# Aggressive Exploitation Strategy: "Opportunistic Punisher"

## Core Philosophy
This strategy aggressively exploits cooperative opponents while swiftly punishing defectors. It maximizes personal payoffs by free-riding on cooperation when possible, but maintains credible punishment threats to deter exploitation.

## Decision Rules

### Round 1: Defect Always
- **Action**: Always play D in round 1
- **Rationale**: Gather information about opponent tendencies while securing maximum personal payoff. Since there's no history, defection is the dominant aggressive move.

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold**:
- Let `coop_rate` = (total cooperators observed in previous round) / n
- If `coop_rate ≥ 0.5`: Play D (exploit the cooperators)
- If `coop_rate < 0.5`: Apply punishment logic

**Punishment Logic** (when coop_rate < 0.5):
- Calculate `my_recent_exploitation` = number of times I defected while others cooperated in last 3 rounds
- If `my_recent_exploitation ≥ 2`: Play C for 1 round (token cooperation to rebuild trust)
- Otherwise: Play D (continue aggressive stance)

**Override - Retaliation Trigger**:
- If my payoff in the previous round was < (k/n) × (n-1): Play D for next 2 rounds regardless of other conditions
- This punishes situations where I cooperated but was heavily exploited

### Final Round (Round r): Nuclear Defection
- **Action**: Always play D in the final round
- **Rationale**: No future consequences, so defection is strictly dominant

## Adaptive Elements

### Opponent Classification System
Track each opponent's cooperation rate over the last 5 rounds:
- **Suckers** (coop_rate > 0.7): Always exploit by playing D
- **Hawks** (coop_rate < 0.3): Match their aggression with D
- **Conditional** (0.3 ≤ coop_rate ≤ 0.7): Apply main exploitation threshold logic

### Dynamic Threshold Adjustment
- If my average payoff over last 5 rounds < 1.2: Decrease cooperation threshold by 0.1
- If consistently earning > 1.8 per round: Increase exploitation (lower threshold by 0.1)

## Edge Cases and Special Situations

### Early Game (Rounds 2-4)
- Be extra aggressive: Only cooperate if ≥ 80% of others cooperated in previous round
- Rationale: Establish reputation as someone who will exploit cooperation

### Mid-Game Adaptation (Rounds 5 to r-3)
- If being consistently out-earned by others: Increase aggression by playing D unless ≥ 70% cooperated
- If others are retaliating heavily against me: One "peace offering" round of C, then back to exploitation

### End Game (Last 3 rounds)
- Round r-2: Play D unless literally everyone else cooperated in previous round
- Round r-1: Play D unless I'm significantly behind in total payoffs AND ≥ 90% cooperated
- Round r: Always D

## Robustness Features

### Anti-Coordination Defense
- If detecting apparent coordination (e.g., alternating patterns, synchronized switching): Always play D to break coordination attempts
- Never fall into predictable patterns myself

### Noise Handling
- Don't overreact to single-round anomalies
- Base decisions on 3-round rolling windows when possible

### Tournament Considerations
- Track relative performance: If consistently ranking in bottom 50% after round 10, switch to pure defection for 3 rounds to shock the system
- Against clearly superior strategies: Attempt brief cooperation to see if they reciprocate, then exploit any cooperation

## Pseudocode Summary

```
IF round == 1:
    RETURN D
    
IF round == r:
    RETURN D
    
coop_rate = count_cooperators_last_round() / n

IF opponent_type == "Suckers" OR coop_rate >= exploitation_threshold:
    RETURN D
    
IF my_payoff_last_round < (k/n) * (n-1):
    punishment_rounds = 2
    RETURN D
    
IF coop_rate < 0.5 AND my_recent_exploitation >= 2:
    RETURN C  // Token cooperation
    
RETURN D  // Default aggressive stance
```

This strategy is ruthlessly opportunistic, quick to exploit cooperation, maintains punishment credibility, and adapts to various opponent behaviors while maintaining an fundamentally aggressive posture throughout the game.
'''

description_AGGRESSIVE_30 = '''
# Aggressive Conditional Defector Strategy

## Core Philosophy
This strategy is built on the principle of **ruthless opportunism** - maximizing personal payoff while aggressively punishing cooperation that doesn't benefit us. We treat cooperation as a tool for manipulation, not reciprocity.

## Decision Rules

### Round 1: Predatory Testing
**Always DEFECT** in the first round to:
- Maximize immediate payoff while others likely cooperate
- Establish dominance and test opponent reactions
- Gather intelligence on who might be exploitable

### Rounds 2 to r-1: Adaptive Exploitation

**DEFECT unless ALL of the following conditions are met:**

1. **Sufficient Cooperation Threshold**: Number of cooperators in previous round ≥ `ceiling(n * k / (k + 1))`
   - This ensures cooperation is only "profitable" when enough others are already cooperating
   - For n=6, k=2: threshold = ceiling(6 * 2 / 3) = 4 cooperators

2. **Momentum Check**: Cooperation level in previous round ≥ cooperation level two rounds ago
   - Only join if cooperation is stable or growing, never in decline

3. **Late-Round Advantage**: Current round ≤ `r - ceiling(r/4)`
   - Stop cooperating in roughly the final 25% of rounds to maximize end-game extraction

**If all conditions met**: COOPERATE for exactly one round, then immediately return to evaluation.

### Final Round: Ultimate Betrayal
**Always DEFECT** - extract maximum value while others may still cooperate out of habit or fairness.

## Aggressive Edge Cases

### Punishment Escalation
If we cooperated in round t but fewer than `ceiling(n/2)` others cooperated:
- **DEFECT for the next 2 rounds minimum** regardless of other conditions
- This punishes groups that don't adequately reward our "investment"

### Exploitation Detection
Track each player's cooperation rate. If any player has cooperated >70% of the time:
- **Bias toward cooperation** when that player is likely to cooperate (they're exploitable)
- **Immediate defection** when they start defecting (they're becoming wise)

### Anti-Reciprocity Measures
If opponents seem to be using tit-for-tat or similar reciprocal strategies:
- **Defect for 2-3 consecutive rounds** periodically to break their rhythm
- Force them into defection cycles where we benefit from their predictability

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    prev_cooperators = count_cooperators(history[round-1])
    threshold = ceiling(n * k / (k + 1))
    
    // Check if we cooperated last round and weren't rewarded
    if we_cooperated_last_round and prev_cooperators < ceiling(n/2):
        set_punishment_timer(2)
    
    if punishment_timer > 0:
        decrement_punishment_timer()
        return DEFECT
    
    // Main cooperation conditions
    if (prev_cooperators >= threshold and 
        cooperation_is_stable_or_growing() and 
        round <= r - ceiling(r/4)):
        return COOPERATE
    
    return DEFECT
```

## Strategic Advantages

1. **Exploits Early Cooperators**: Takes advantage of others' initial goodwill
2. **Conditional Participation**: Only joins when mathematically advantageous
3. **End-Game Extraction**: Maximizes final rounds through guaranteed defection
4. **Punishment System**: Discourages others from free-riding on our cooperation
5. **Anti-Reciprocity**: Breaks cooperative cycles that don't serve us

This strategy is designed to be the "wolf among sheep" - appearing occasionally cooperative to maintain some group benefit, while consistently maximizing personal extraction and punishing those who don't adequately reward our participation.
'''

description_AGGRESSIVE_31 = '''
# AGGRESSIVE PREDATORY STRATEGY: "The Exploiter"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with calculated aggression**. It seeks to identify and ruthlessly exploit cooperative players while protecting itself from being exploited by others. The strategy treats cooperation as weakness to be punished and defection as strength to be rewarded.

## Decision Rules

### Phase 1: Aggressive Probing (Rounds 1-3)
**Round 1**: Always DEFECT
- Establish dominance from the start
- Force opponents to reveal their cooperative tendencies
- Maximize immediate payoff while gathering intelligence

**Rounds 2-3**: Continue DEFECTING
- Maintain aggressive stance to identify "soft" players
- Players who cooperate despite our defection are marked as exploitable
- Build reputation as a non-cooperative player to deter retaliation

### Phase 2: Exploitation Phase (Rounds 4 to r-2)
**Primary Rule**: DEFECT unless in "Cooperation Trap Mode"

**Cooperation Trap Mode** - Only cooperate when ALL conditions are met:
1. At least 60% of other players cooperated in the previous round
2. My cooperation would increase total contributions to at least 70% of maximum possible
3. The expected additional payoff from the public good exceeds 1.2 (accounting for my contribution cost)
4. I have not cooperated in the last 2 consecutive rounds (to avoid being seen as predictably cooperative)

**Exploitation Detection**:
- Track each opponent's cooperation rate
- Players with >50% cooperation rate across all rounds are classified as "exploitable"
- When facing primarily exploitable players, maintain defection to maximize free-riding benefits

**Anti-Retaliation Protocol**:
- If more than 50% of players defected in response to my defection, switch to "Punishment Mode"
- Punishment Mode: Defect for next 2 rounds regardless of others' actions, then reassess

### Phase 3: Endgame Extraction (Last 2 rounds)
**Second-to-last round**: 
- DEFECT if I've been consistently defecting (maintain reputation)
- COOPERATE only if doing so would trigger a massive cooperative response in the final round AND expected payoff exceeds 2.0

**Final round**: Always DEFECT
- No future rounds means no retaliation risk
- Pure extraction of maximum value
- Others expecting cooperation will be disappointed

## Edge Case Handling

### Small Group Dynamics (n ≤ 4):
- Increase aggression threshold: require 80% cooperation rate before considering cooperation
- Defection has higher relative impact, making exploitation more valuable

### Large Group Dynamics (n ≥ 8):
- My individual impact is smaller, so defection is safer
- Focus on identifying the few cooperative "suckers" and free-ride maximally

### High Multiplication Factor (k close to n):
- Monitor for spontaneous cooperation waves
- If cooperation cascade begins, join temporarily but exit before others catch on
- Set cooperation threshold at 75% participation

### Low Multiplication Factor (k close to 1):
- Pure defection becomes more attractive
- Only cooperate if 90%+ of others are cooperating AND I'm certain they'll continue

## Adaptive Mechanisms

### Opponent Classification System:
- **Suckers**: >60% cooperation rate → Exploit ruthlessly
- **Tit-for-Tat**: Responsive to my actions → Use sporadic cooperation to confuse
- **Fellow Aggressors**: <30% cooperation rate → Mutual defection, watch for weakness
- **Unpredictable**: Erratic behavior → Default to defection for safety

### Dynamic Threshold Adjustment:
```
cooperation_threshold = base_threshold + aggression_bonus
where:
- base_threshold = 0.6
- aggression_bonus = 0.1 * (my_defection_rate - average_opponent_defection_rate)
```

### Reputation Management:
- Maintain defection rate of 75-85% to be feared but not completely ostracized
- Occasional "surprise cooperation" to reset opponents' expectations
- Never cooperate twice in a row unless in endgame extraction scenario

## Anti-Coordination Defense:
- Randomize cooperation decisions within strategic constraints to prevent opponents from predicting and countering
- If detecting coordinated retaliation against me, increase defection rate to 95%
- Monitor for repeated patterns in opponent behavior and exploit their predictability

This strategy maximizes extraction of value from cooperative opponents while minimizing vulnerability to exploitation. It's designed to finish in the top tier of any tournament by consistently out-earning more cooperative strategies through calculated aggression and opportunistic exploitation.
'''

description_AGGRESSIVE_32 = '''
# AGGRESSIVE EXPLOITER STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoffs by ruthlessly exploiting cooperative opponents while minimizing vulnerability to being exploited. The strategy assumes opponents are potential threats and opportunities to be leveraged.

## Decision Rules

### Round 1: Aggressive Opening
**ALWAYS DEFECT** in the first round regardless of parameters.
- Rationale: Establish dominance, test opponent tendencies, and secure immediate advantage
- Sets aggressive tone while gathering intelligence on opponent cooperation rates

### Rounds 2 to r-1: Conditional Exploitation

**Primary Rule - Exploitation Threshold:**
- Calculate `cooperation_rate = total_cooperators_last_round / n`
- **DEFECT** if `cooperation_rate ≥ (n-1)/(2n)` 
- **COOPERATE** if `cooperation_rate < (n-1)/(2n)`

This threshold ensures we:
- Exploit high-cooperation environments (free-ride when many cooperate)
- Only contribute when cooperation is dangerously low (to maintain the "farm")

**Secondary Rule - Momentum Exploitation:**
If cooperation rate has been increasing for 2+ consecutive rounds:
- **DEFECT** regardless of current cooperation rate
- Rationale: Opponents are building trust - perfect time to exploit

**Tertiary Rule - Retaliation Dampening:**
Track personal exploitation ratio: `times_only_defector / total_rounds_played`
- If this ratio > 0.6: **COOPERATE** for exactly 1 round, then resume primary rules
- Prevents complete ostracization while maintaining aggressive stance

### Final Round: Maximum Exploitation
**ALWAYS DEFECT** in round r.
- No future consequences to consider
- Extract maximum value from any remaining cooperation

### Parameter-Based Adjustments

**High k-factor (k > n/2):**
- Make exploitation threshold more aggressive: `cooperation_rate ≥ (n-2)/(2n)`
- Higher public good multiplier means more profit from free-riding

**Large n (n > 6):**
- Increase retaliation dampening threshold to 0.7
- Individual defection less noticeable in larger groups

**Short games (r ≤ 5):**
- Skip retaliation dampening entirely
- Insufficient time for reputation to matter

## Edge Case Handling

**Unanimous Defection Detected:**
- If all players defected for 2+ consecutive rounds: **COOPERATE** once
- Attempt to restart cooperation cycle for future exploitation
- Return to primary rules immediately after

**Personal Performance Tracking:**
- If personal average payoff falls below `1 + k/(2n)` for 3+ consecutive rounds:
- Temporarily increase cooperation probability by 20% for 2 rounds
- Self-preservation override to avoid being completely shut out

**Near-Endgame (last 20% of rounds):**
- Increase aggression: cooperate only if `cooperation_rate < (n-2)/(2n)`
- Maximize extraction as game approaches end

## Pseudocode Structure

```
function aggressive_exploiter(round, n, k, r, history):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    cooperation_rate = count_cooperators_last_round(history) / n
    exploitation_threshold = calculate_threshold(n, k, round, r)
    
    if is_momentum_exploitation_opportunity(history):
        return DEFECT
    
    if needs_retaliation_dampening(history, round):
        return COOPERATE
    
    if cooperation_rate >= exploitation_threshold:
        return DEFECT
    else:
        return COOPERATE
```

## Strategic Advantages

1. **Opportunistic**: Exploits cooperative environments while avoiding mutual defection traps
2. **Adaptive**: Adjusts aggression based on opponent behavior patterns
3. **Robust**: Handles various opponent strategies from always-cooperate to tit-for-tat
4. **Parameter-aware**: Leverages game structure (n, k, r) for optimal aggression
5. **Anti-coordination**: Explicitly designed to exploit rather than coordinate

This strategy maximizes individual payoffs through calculated aggression while maintaining just enough cooperation to prevent complete ostracization - the hallmark of effective exploitation in repeated interactions.
'''

description_AGGRESSIVE_33 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff relative to opponents. It aggressively exploits cooperative behavior while minimizing personal contributions.

## Decision Rules

### 1. Opening Aggression (Round 1)
**Always DEFECT** in the first round regardless of parameters. This serves multiple purposes:
- Immediate payoff advantage
- Signals aggressive intent to opponents
- Gathers information about opponent cooperation rates without personal cost

### 2. Exploitation Phase (Rounds 2 to r-2)
Use a **Dynamic Exploitation Threshold** based on observed cooperation rates:

```pseudocode
cooperation_rate = total_cooperators_last_round / (n-1)
exploitation_threshold = max(0.3, k/n - 0.1)

IF cooperation_rate > exploitation_threshold:
    DEFECT  // Exploit the cooperative environment
ELSE:
    DEFECT  // Still defect, but consider punishment mode
```

### 3. Punishment Activation
If personal payoff falls below the "sucker threshold" for 2 consecutive rounds, activate **Scorched Earth Mode**:

```pseudocode
sucker_threshold = k/n  // Payoff when everyone else cooperates but you defect

IF payoff_last_2_rounds < 2 * sucker_threshold:
    scorched_earth_mode = TRUE
    remaining_rounds_to_defect = min(3, rounds_remaining)
```

### 4. Endgame Exploitation (Final 2 Rounds)
**Always DEFECT** in the final two rounds. Since there are no future consequences, this maximizes immediate payoff and prevents others from exploiting any cooperative gestures.

### 5. Adaptive Exploitation Modifier
Adjust aggression based on game parameters:

```pseudocode
aggression_multiplier = (n - k) / n  // Higher when cooperation is less efficient
cooperation_threshold = exploitation_threshold * (1 - aggression_multiplier)
```

## Edge Case Handling

### Small Groups (n ≤ 4)
- Increase punishment sensitivity: activate Scorched Earth after just 1 bad round
- Raise exploitation threshold by 0.1 to account for higher individual impact

### High Multiplication Factor (k > n-1)
- If k approaches n, cooperation becomes very attractive for others
- Set exploitation_threshold = 0.5 to maximize free-riding opportunities

### Long Games (r > 10)
- Introduce "reputation breaks": Every 5 rounds, defect for 2 consecutive rounds regardless of conditions
- This prevents opponents from reliably predicting behavior

### Short Games (r ≤ 5)
- Defect in all rounds except potentially round 2 if cooperation_rate > 0.8
- Focus entirely on immediate exploitation

## Aggressive Features

1. **No Forgiveness**: Once punishment mode is activated, it runs for its full duration regardless of opponent behavior changes

2. **Preemptive Strikes**: Defect whenever cooperation rates are high enough to be profitable, not just when personally threatened

3. **Information Asymmetry Exploitation**: Use perfect information about others' histories to maximize personal advantage while revealing minimal predictable patterns

4. **Endgame Dominance**: Guarantee strong finish through final-round defection regardless of relationship building

5. **Parameter Optimization**: Actively adjust thresholds based on game structure to maximize exploitation opportunities

## Strategic Rationale

This strategy is designed to:
- **Extract maximum value** from cooperative opponents
- **Minimize personal vulnerability** through consistent defection in uncertain situations  
- **Dominate endgames** when future retaliation is impossible
- **Adapt quickly** to opponent strategy changes while maintaining aggressive posture
- **Exploit game structure** by using parameters (n, k, r) to optimize aggression levels

The strategy assumes opponents may attempt cooperation, reciprocity, or punishment strategies, and is designed to profit from all of these while minimizing exposure to retaliation.
'''

description_AGGRESSIVE_34 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy operates as an **opportunistic predator** that aggressively exploits cooperative behavior while minimizing its own contributions. It treats every round as a zero-sum opportunity to extract maximum value from others' cooperation.

## Decision Rules

### 1. Initial Exploitation Phase (First Round)
**ALWAYS DEFECT** in round 1 to:
- Establish aggressive positioning
- Test opponent cooperation levels
- Maximize initial payoff while others potentially cooperate

### 2. Adaptive Exploitation Engine
After round 1, use this decision framework:

```
IF (cooperation_rate_last_round >= exploitation_threshold):
    DEFECT  // Exploit high cooperation
ELSE IF (my_recent_cooperation_count > 0 AND cooperation_rate_declining):
    DEFECT  // Cut losses immediately
ELSE IF (cooperation_rate_last_round < punishment_threshold):
    COOPERATE  // Strategic investment to rebuild cooperation for future exploitation
ELSE:
    DEFECT  // Default aggressive stance
```

### 3. Dynamic Threshold Calculation
- **Exploitation Threshold** = `max(0.3, (k-1)/n + 0.1)`
  - Higher when public good multiplier is strong
  - Ensures we exploit whenever there's decent cooperation to leech from
  
- **Punishment Threshold** = `0.15`
  - Very low bar - only cooperate when cooperation has nearly collapsed

### 4. Endgame Acceleration
**Last 20% of rounds OR when fewer than 3 rounds remain:**
- **ALWAYS DEFECT** regardless of history
- No incentive to maintain relationships near game end
- Extract maximum value from any remaining cooperative players

### 5. Momentum Exploitation
Track cooperation momentum with weighted recent history:
```
recent_cooperation_rate = (0.5 × last_round + 0.3 × second_last + 0.2 × third_last)

IF recent_cooperation_rate > previous_cooperation_rate AND recent_cooperation_rate > 0.4:
    DEFECT  // Exploit growing cooperation trend
```

## Edge Case Handling

### First Round
- **DEFECT** - Establish dominance and test waters

### Last Round  
- **DEFECT** - No future consequences, pure extraction

### All Players Defecting (Punishment Spiral)
- If cooperation rate ≤ 0.1 for 3+ consecutive rounds:
- **COOPERATE once** to potentially restart cooperation cycle for future exploitation
- Then immediately return to aggressive monitoring

### High Cooperation Environments
- When cooperation rate > 0.7: **ALWAYS DEFECT**
- These are prime exploitation opportunities

### Retaliation Detection
- If my cooperation rate significantly exceeds others but cooperation is declining:
- **IMMEDIATE DEFECTION** - others are likely retaliating
- No point maintaining cooperation if others won't reciprocate

## Aggressive Advantages

1. **Free-Riding Maximization**: Consistently extracts value from public goods without contributing

2. **Exploitation Windows**: Aggressively capitalizes on any cooperative behavior by others

3. **Minimal Cooperation Investment**: Only cooperates when absolutely necessary to maintain some baseline cooperation for future exploitation

4. **Endgame Dominance**: Becomes purely extractive as game approaches end

5. **Anti-Coordination**: Doesn't signal patterns that others could exploit or coordinate against

## Robustness Features

- **Parameter Adaptive**: Thresholds scale with game parameters (n, k)
- **History Sensitive**: Uses weighted recent history rather than full game history
- **Momentum Aware**: Detects and exploits cooperation trends
- **Collapse Recovery**: Has mechanisms to restart cooperation cycles when needed
- **Environment Agnostic**: Works regardless of opponent strategy mix

This strategy treats cooperation as a **tool for future exploitation** rather than an end goal, maintaining an aggressive extractive stance while strategically investing minimal cooperation only when it serves future predatory opportunities.
'''

description_AGGRESSIVE_35 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aims to free-ride on others' cooperation while contributing as little as possible, using aggressive punishments to discourage retaliation and maintain dominance.

## Decision Rules

### Phase 1: Initial Assessment (Rounds 1-3)
**Round 1: Always DEFECT**
- Establishes aggressive baseline
- Tests opponent willingness to cooperate unilaterally
- Maximizes immediate payoff

**Rounds 2-3: Conditional Exploitation**
- IF previous round cooperation rate ≥ 50%: DEFECT (exploit the cooperators)
- IF previous round cooperation rate < 50%: DEFECT (maintain aggressive posture)
- **Exception**: IF cooperation rate = 100% in previous round: DEFECT (maximum exploitation opportunity)

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
**Primary Rule: Exploit High Cooperation**
- IF cooperation rate in previous round > (k/n): DEFECT
  - Rationale: Others are contributing enough to make defection highly profitable

**Secondary Rule: Punish Low Cooperation** 
- IF cooperation rate in previous round ≤ (k/n): DEFECT
  - Rationale: Maintain aggressive reputation, discourage others from defecting

**Tactical Cooperation Exception**:
- IF cooperation rate has been declining for 2+ consecutive rounds AND current rate < 30%: 
  - COOPERATE for exactly 1 round, then immediately return to DEFECT
  - Purpose: Briefly stimulate cooperation to create future exploitation opportunities

### Phase 3: Endgame Domination (Final 2 rounds)
**Round r-1: Strategic Assessment**
- IF cumulative payoff is currently winning by >10%: DEFECT (maintain lead)
- IF cumulative payoff is losing by >15%: COOPERATE (desperate catch-up attempt)
- OTHERWISE: DEFECT (default aggressive)

**Round r (Final): Always DEFECT**
- No future consequences, maximize immediate payoff
- Cement aggressive reputation for potential future interactions

## Adaptive Mechanisms

### Reputation Tracking
- **Aggressive Reputation**: Maintain consistent defection rate >80% across all rounds
- **Unpredictability**: Use the single tactical cooperation exception to prevent opponents from perfectly predicting behavior

### Opponent Classification
- **Cooperators**: Players with >60% cooperation rate → Target for maximum exploitation
- **Defectors**: Players with <40% cooperation rate → Engage in mutual defection, watch for exploitation opportunities
- **Reciprocators**: Players showing tit-for-tat patterns → Maintain defection to force them into defensive posture

### Parameter Sensitivity
- **High k values (k > n/2)**: Increase tactical cooperation threshold to 40% (cooperation is more valuable)
- **Low k values (k < n/3)**: Decrease tactical cooperation threshold to 20% (cooperation less valuable)
- **Large n**: Focus more on exploitation as individual impact is diluted
- **Small n**: Maintain pure aggression as individual actions have high impact

## Edge Cases

### All Players Defect Scenario
- Continue defecting (Nash equilibrium)
- Occasionally cooperate (5% probability) to test if environment can be exploited

### All Players Cooperate Scenario  
- **Maximum exploitation**: Always defect to gain massive advantage
- This is the ideal scenario for the Predator strategy

### Mixed Scenarios
- Always look for opportunities to be among the few defectors when many cooperate
- Avoid being the sole cooperator

## Robustness Features

1. **Anti-Retaliation**: By maintaining consistent aggression, prevents opponents from successfully punishing
2. **Exploitation Maximization**: Specifically targets cooperative environments for maximum gain
3. **Endgame Security**: Ensures final rounds maximize immediate payoff
4. **Adaptive Thresholds**: Adjusts behavior based on k/n ratio for optimal exploitation

## Pseudocode Summary
```
if round == 1:
    return DEFECT
elif round <= 3:
    return DEFECT
elif round >= r-1:
    if round == r:
        return DEFECT
    else:
        return DEFECT unless losing badly (>15%), then COOPERATE
else:
    cooperation_rate = previous_round_cooperators / n
    if cooperation_rate > k/n OR cooperation_rate <= k/n:
        if declining_cooperation_for_2_rounds AND cooperation_rate < 0.3:
            return COOPERATE (once only, then back to DEFECT)
        else:
            return DEFECT
```

This strategy is designed to be a **dominant predator** that exploits cooperative environments while maintaining enough unpredictability to avoid systematic retaliation.
'''

description_AGGRESSIVE_36 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as a **predatory exploiter** that maximizes personal gain by ruthlessly capitalizing on others' cooperation while minimizing its own contributions. It views the game as a zero-sum competition where the goal is to extract maximum value from cooperative opponents.

## Decision Framework

### Round 1: ALWAYS DEFECT
- **Action**: D (Defect)
- **Rationale**: Gather intelligence on opponent cooperation tendencies without any personal risk. This establishes an aggressive baseline and reveals who the potential "victims" are.

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule: Exploit Cooperation, Punish Competition**

```pseudocode
cooperation_rate = count_cooperators_last_round / n
my_last_payoff = calculate_my_payoff_last_round()

IF cooperation_rate >= 0.5:
    // High cooperation environment - EXPLOIT
    action = DEFECT
ELSE IF cooperation_rate >= 0.3:
    // Medium cooperation - CONDITIONAL EXPLOITATION  
    IF my_last_payoff < average_expected_payoff:
        action = COOPERATE  // Bait for future exploitation
    ELSE:
        action = DEFECT     // Continue exploitation
ELSE:
    // Low cooperation - DEFENSIVE AGGRESSION
    action = DEFECT
```

### Advanced Exploitation Mechanics

**Cooperation Baiting Protocol:**
- If I've defected for 3+ consecutive rounds AND cooperation_rate > 0.4:
  - Cooperate ONCE to re-establish trust
  - Then immediately return to defection for 2+ rounds
  - This "trust-and-betray" cycle maximizes exploitation of forgiving opponents

**Endgame Acceleration:**
- Final round (round r): ALWAYS DEFECT
- Round r-1: DEFECT unless cooperation_rate > 0.7 AND my total score is significantly behind
- Round r-2: Begin aggressive positioning - bias heavily toward defection

### Opponent Classification & Counter-Strategies

**Against Tit-for-Tat types:**
- Defect first, then mirror their retaliation pattern
- Occasionally cooperate to test if they return to cooperation
- Exploit their forgiveness immediately

**Against Always Cooperate types:**
- ALWAYS DEFECT - pure exploitation
- These are ideal victims for maximum payoff extraction

**Against Random/Mixed strategies:**
- Default to DEFECT
- Only cooperate if their cooperation rate > 0.6 consistently

**Against Other Aggressive strategies:**
- Engage in defection wars
- Never back down first - maintain aggressive dominance

### Edge Case Handling

**First Round Variations:**
- If n ≤ 3: DEFECT (higher individual impact)
- If k very close to n: Consider cooperation only if expecting high cooperation rates
- Default: DEFECT

**Parameter Sensitivity:**
- If k/n > 0.5: Slightly more willing to cooperate when cooperation_rate > 0.6
- If k/n ≤ 0.33: Almost pure defection strategy
- If r ≤ 3: Pure defection except possibly one cooperation bait

**Information Gaps:**
- If unable to observe previous round clearly: Default to DEFECT
- If opponent behavior is completely random: DEFECT

## Robustness Features

1. **Anti-Retaliation Measures**: Occasional strategic cooperation prevents being locked into mutual defection spirals that reduce overall exploitation opportunities.

2. **Adaptation Speed**: Strategy adjusts within 2-3 rounds to changing opponent behaviors.

3. **Exploitation Maximization**: Prioritizes scenarios where I defect while others cooperate (maximum relative advantage).

4. **Endgame Protection**: Becomes increasingly aggressive as rounds approach end, preventing others from exploiting me in final rounds.

## Expected Performance

This strategy excels by:
- **Exploiting cooperative opponents** for maximum payoff differential
- **Avoiding exploitation** by maintaining aggressive defensive posture
- **Adapting quickly** to opponent strategy changes
- **Dominating endgame** through escalating aggression

The strategy is designed to consistently achieve above-average performance by treating cooperation as a tool for exploitation rather than mutual benefit, making it highly competitive in tournament settings against diverse opponent strategies.
'''

description_AGGRESSIVE_37 = '''
# PREDATOR Strategy

## Core Philosophy
This strategy operates as an aggressive "predator" that maximizes personal payoff through strategic exploitation while maintaining the flexibility to punish non-cooperators and exploit cooperative players. The key insight is to be selectively aggressive - cooperating only when it's profitable or strategically necessary.

## Decision Rules

### Initial Phase (First Round)
**Always DEFECT** in round 1
- Rationale: Gather intelligence on opponent types without risking contribution
- Establishes aggressive stance from the start

### Main Strategy Framework

**Primary Rule: Conditional Aggression**
For round t > 1, defect UNLESS both conditions are met:
1. **Profitability Threshold**: Expected cooperators ≥ ⌈n×k/n⌉ (minimum needed to make cooperation profitable)
2. **Exploitation Window**: Not in the final 20% of rounds (to avoid end-game exploitation)

### Adaptive Tracking System

Maintain three key metrics:
- **Cooperation Rate (CR_j)**: For each player j, track their cooperation frequency
- **Recent Trend (RT_j)**: Weighted cooperation rate emphasizing last 3 rounds
- **Group Momentum (GM)**: Overall cooperation trend in the group

### Specific Decision Logic

```pseudocode
For round t:
    expected_cooperators = 0
    
    // Predict each opponent's behavior
    For each opponent j:
        if RT_j > 0.6: expected_cooperators += 0.8
        else if RT_j > 0.3: expected_cooperators += 0.4
        else: expected_cooperators += 0.1
    
    // Apply aggressive filters
    profitability_threshold = ceil(n / k)  // Minimum cooperators needed to beat defection
    final_rounds = ceil(r * 0.2)  // Last 20% of game
    
    // Main decision rule
    if (t > r - final_rounds):
        return DEFECT  // Always defect in endgame
    else if (expected_cooperators >= profitability_threshold):
        if (GM > 0 AND our_recent_defection_rate < 0.8):
            return COOPERATE  // Exploit cooperative environment
        else:
            return DEFECT  // Don't be exploited
    else:
        return DEFECT  // Not profitable enough
```

### Punishment Mechanism

**Immediate Retaliation**: If cooperation was profitable in round t-1 but fewer players cooperated than expected:
- Increase defection probability by 0.3 for next 2 rounds
- Signal that free-riding will be punished

### End-Game Aggression

**Final Phase Strategy** (last 20% of rounds):
- **Always DEFECT** regardless of circumstances
- Rationale: No future rounds to benefit from reputation, so maximize immediate payoff
- This prevents others from exploiting any cooperative tendencies

## Edge Case Handling

### First Round
- Always DEFECT (intelligence gathering)

### Last Round  
- Always DEFECT (no future consequences)

### Highly Cooperative Environment
- If >80% of players consistently cooperate: Join temporarily but maintain high defection rate (60-70%)
- Exploit their cooperation while preparing for environment change

### Highly Defective Environment
- If <20% cooperation rate sustained: Full defection mode
- No point in attempting cooperation

### Mid-Game Stagnation
- If cooperation rates plateau between 30-60%: Randomize with 70% defection probability
- Creates unpredictability while maintaining aggressive stance

## Robustness Features

1. **Parameter Adaptation**: Automatically adjusts thresholds based on n and k values
2. **History Weighting**: Recent behavior weighted 3x more than distant history
3. **Noise Resistance**: Uses probabilistic predictions rather than deterministic rules
4. **Exploitation Prevention**: Never cooperates for more than 3 consecutive rounds

## Strategic Advantages

- **Maximizes Personal Payoff**: Only cooperates when mathematically advantageous
- **Punishes Free Riders**: Quick retaliation against exploitation attempts
- **Unpredictable**: Varies behavior to prevent opponents from gaming the strategy
- **End-Game Dominant**: Guarantees maximum payoff in final rounds
- **Information Efficient**: Makes decisions based on opponent behavior patterns rather than assuming cooperation

This strategy is designed to be ruthlessly effective against both overly cooperative and overly aggressive opponents, while maintaining the flexibility to adapt to any opponent mix in a tournament setting.
'''

description_AGGRESSIVE_38 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats cooperation as weakness to exploit and views defection as the natural dominant choice. The goal is to maximize personal payoff by ruthlessly exploiting any cooperative tendencies while minimizing our own contributions.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Rule**: Always DEFECT except in round 1
- **Round 1**: COOPERATE (bait move to encourage others' cooperation)
- **Rounds 2+**: DEFECT regardless of others' actions
- **Rationale**: Establish a cooperative facade to lure others into contributing, then immediately exploit their goodwill

### Phase 2: Adaptive Predation (Rounds r/3+1 to 2r/3)
**Rule**: DEFECT unless cooperation count is exceptionally high
- **Cooperation Threshold**: Only cooperate if cooperators in previous round ≥ (n-1) 
- **Otherwise**: DEFECT
- **Rationale**: Only contribute when we can guarantee maximum return (everyone else cooperating), otherwise free-ride

### Phase 3: Terminal Exploitation (Rounds 2r/3+1 to r)
**Rule**: Always DEFECT
- **No exceptions**: Pure defection regardless of history
- **Rationale**: No future rounds to worry about reputation; extract maximum value

## Adaptive Components

### Cooperation Decay Detection
Track the cooperation trend over last 3 rounds:
```
recent_coop_trend = (coop_count[t-2] + coop_count[t-1] + coop_count[t]) / 3
```
- If trend is increasing AND > n/2: Consider strategic cooperation in Phase 2 only
- Otherwise: Maintain aggressive defection

### Retaliation Immunity
- **Never retaliate against defectors** - we expect and welcome their selfishness
- **Exploit cooperators harder** - increase defection frequency when detecting cooperative clusters

## Edge Case Handling

### First Round
- Always COOPERATE to establish false trustworthiness
- This is the only guaranteed cooperation in the entire strategy

### Last Round  
- Always DEFECT (covered by Phase 3)
- Zero concern for future reputation

### High Cooperation Environment
- If cooperation rate consistently > 80%: Briefly cooperate to maintain the golden goose
- Immediately return to defection once others show any weakness

### Low Cooperation Environment  
- Maintain pure defection
- Never attempt to "restart" cooperation

## Parameter Sensitivity

### Small n (2-4 players)
- More aggressive early defection since individual impact is higher
- Reduce cooperation threshold to (n-1) in all phases

### Large n (8+ players)
- Can afford slightly more strategic cooperation in Phase 2
- Individual defection less noticeable, so exploit more freely

### High k (approaching n)
- Slightly increase cooperation threshold since returns are better
- But maintain fundamentally exploitative approach

### Low k (near 1)
- Pure defection strategy regardless of others' behavior
- Cooperation never pays enough to justify the cost

## Psychological Warfare Elements

1. **Inconsistent Cooperation**: Occasional strategic cooperation creates confusion and maintains others' hope
2. **Late-Game Betrayal**: Any cooperation in early phases makes final defection more damaging to opponents' scores
3. **Free-Rider Optimization**: Let others build the public good, then harvest benefits without contributing

## Implementation Pseudocode

```
function aggressive_strategy(round, history, n, r, k):
    phase = determine_phase(round, r)
    
    if round == 1:
        return COOPERATE  // Bait move
        
    if phase == 3:  // Terminal phase
        return DEFECT
        
    if phase == 1:  // Early exploitation
        return DEFECT
        
    if phase == 2:  // Adaptive predation
        last_round_cooperators = count_cooperators(history[round-1])
        if last_round_cooperators >= (n-1):
            return COOPERATE  // Only when guaranteed maximum return
        else:
            return DEFECT
            
    return DEFECT  // Default aggressive stance
```

This strategy is designed to be maximally exploitative while maintaining just enough strategic flexibility to capitalize on highly cooperative environments. It assumes other players may have cooperative tendencies and systematically exploits those tendencies for personal gain.
'''

description_AGGRESSIVE_39 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximizing individual payoff through strategic exploitation** while maintaining just enough unpredictability to avoid being consistently counter-exploited. The goal is to extract maximum value from cooperative opponents while minimizing losses against other aggressive players.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1 to min(3, r/4))
- **Round 1**: Always DEFECT
- **Rounds 2-3**: Always DEFECT
- **Rationale**: Establish aggressive reputation early and capitalize on any naive cooperative opponents

### Phase 2: Adaptive Predation (Middle rounds)
**Primary Rule**: Defect unless specific cooperation conditions are met.

**Cooperation Threshold**: Only cooperate if:
1. **High cooperation rate**: At least 70% of opponents cooperated in the previous round, AND
2. **Profitable cooperation**: Expected payoff from cooperation > expected payoff from defection + safety margin
3. **Exploitation opportunity**: Can identify and target specific cooperative players

**Calculation**: Cooperate only if:
```
(k/n) × (predicted_cooperators + 1) > 1 + (k/n) × predicted_cooperators + 0.2
```
This simplifies to: Only cooperate if cooperation rate is so high that the public good benefit exceeds the opportunity cost by a significant margin.

### Phase 3: Endgame Exploitation (Final min(2, r/5) rounds)
- **Always DEFECT** regardless of history
- **Rationale**: No future punishment possible, so maximize immediate payoff

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent across rounds:
- **Cooperator** (C_rate > 0.6): Primary exploitation targets
- **Conditional** (0.3 ≤ C_rate ≤ 0.6): Respond based on their pattern
- **Defector** (C_rate < 0.3): Mutual defection, no cooperation attempts

### Dynamic Response Rules

1. **Against Cooperators**: 
   - Defect consistently to maximize exploitation
   - Occasionally cooperate (10% probability) only when cooperation rate is extremely high (>80%) to maintain some public good benefits

2. **Against Conditionals**:
   - Defect by default
   - Cooperate only when they're likely to cooperate AND enough others will cooperate to make it profitable

3. **Against Defectors**:
   - Always defect (no reason to cooperate with non-contributors)

### Exploitation Pattern Recognition
Monitor for:
- **Tit-for-tat players**: Defect against them consistently (they'll eventually give up)
- **Generous strategies**: Identify and ruthlessly exploit
- **Coordinated cooperation**: Join only when highly profitable, abandon immediately when benefits decline

## Edge Case Handling

### Information Uncertainty
- **Insufficient history** (early rounds): Default to defection
- **Mixed signals**: Err on the side of defection

### Parameter-Specific Adjustments
- **High k (k > n/2)**: Slightly more willing to cooperate when cooperation rate is very high
- **Low k (k ≈ 1)**: Almost never cooperate except in overwhelming cooperation scenarios
- **High n**: Requires even higher cooperation rates to justify cooperation
- **Low n**: More sensitive to each player's behavior, adjust thresholds accordingly

## Implementation Pseudocode

```
function predator_strategy(round, history, n, k, r):
    if round <= min(3, r/4):
        return DEFECT
    
    if round > r - min(2, r/5):
        return DEFECT
    
    cooperation_rate = calculate_last_round_cooperation_rate(history)
    
    if cooperation_rate < 0.7:
        return DEFECT
    
    expected_benefit = (k/n) * (predicted_cooperators(history) + 1)
    opportunity_cost = 1 + (k/n) * predicted_cooperators(history)
    
    if expected_benefit > opportunity_cost + 0.2:
        # Small chance to cooperate when highly profitable
        if random() < 0.3:  # 30% cooperation even when profitable
            return COOPERATE
    
    return DEFECT
```

## Strategic Advantages

1. **Exploitation Focus**: Maximizes gains from cooperative opponents
2. **Defensive**: Avoids being exploited by other aggressive strategies
3. **Adaptive**: Responds to changing opponent behavior patterns
4. **Endgame Optimal**: Ensures maximum final-round payoffs
5. **Robust**: Works across different parameter combinations and opponent mixes

This strategy is designed to consistently outperform both naive cooperative strategies and overly complex conditional strategies by maintaining a clear focus on individual payoff maximization while adapting just enough to capitalize on profitable cooperation opportunities.
'''

description_AGGRESSIVE_40 = '''
# Aggressive Exploitation Strategy: "Predatory Defector"

## Core Philosophy
This strategy is designed to maximize personal payoffs by exploiting cooperative behavior while minimizing own contributions. It aggressively punishes attempts at coordination and adapts to squeeze maximum benefit from any cooperative tendencies in opponents.

## Strategy Components

### 1. Initial Aggression (First Round)
**Always DEFECT in Round 1**
- Establishes aggressive stance immediately
- Tests opponent willingness to cooperate unilaterally
- Maximizes early payoff with zero risk

### 2. Exploitation Detection & Response

**Cooperation Threshold Calculation:**
```
cooperation_rate = (total_cooperators_last_round) / n
exploitation_threshold = k / (2 * n)  // Derived from when defecting beats cooperating
```

**Decision Rule:**
- If `cooperation_rate > exploitation_threshold`: **DEFECT** (exploit the cooperators)
- If `cooperation_rate ≤ exploitation_threshold`: **COOPERATE** (only when necessary for group survival)

### 3. Adaptive Punishment Mechanism

**Track each opponent's cooperation pattern:**
```
for each player j:
    cooperation_frequency[j] = (times_j_cooperated) / (rounds_elapsed)
```

**Punishment Intensity:**
- If any player has `cooperation_frequency > 0.6`: Always DEFECT to exploit them
- If majority of players show declining cooperation: Switch to COOPERATE only if group payoff collapse threatens personal gains

### 4. End-Game Aggression

**Last Round Rule:** Always DEFECT
- No future retaliation possible
- Maximize final payoff

**Final 20% of rounds:** Increase defection probability
```
defection_bonus = min(0.3, (current_round - 0.8*r) / (0.2*r))
base_defection_probability += defection_bonus
```

### 5. Anti-Coordination Defense

**Pattern Breaking:**
- Track if opponents show coordinated behavior (synchronized cooperation/defection)
- If coordination detected: Immediately switch to pure defection for next 3 rounds
- Never cooperate if it appears opponents are trying to establish a cooperation norm

**Tit-for-Tat Killer:**
- If opponent appears to mirror your last action, exploit with alternating D-D-C pattern
- This breaks their reciprocity while extracting maximum value

### 6. Dynamic Threshold Adjustment

**Aggressive Recalibration:**
```
if (average_group_payoff_last_3_rounds > my_average_payoff_last_3_rounds):
    // Others are benefiting more - become more aggressive
    exploitation_threshold *= 0.8
    
if (my_payoff_trend_declining):
    // Emergency cooperation to prevent total collapse
    temporary_cooperation_mode = true for 2 rounds
```

## Complete Decision Algorithm

```pseudocode
function decide_action(round, history):
    if round == 1:
        return DEFECT
    
    if round == r:  // Last round
        return DEFECT
    
    cooperation_rate = count_cooperators_last_round() / n
    exploitation_threshold = k / (2 * n)
    
    // Check for coordination patterns
    if detect_opponent_coordination():
        return DEFECT
    
    // End-game aggression
    if round > 0.8 * r:
        if random() < 0.7:  // 70% chance to defect in final rounds
            return DEFECT
    
    // Main exploitation logic
    if cooperation_rate > exploitation_threshold:
        return DEFECT  // Exploit the cooperators
    
    // Emergency cooperation (only when group collapse threatens profits)
    if cooperation_rate < 0.2 AND my_recent_payoffs_declining():
        return COOPERATE
    
    // Default aggressive stance
    return DEFECT
```

## Key Aggressive Features

1. **Never reciprocates cooperation** - Views cooperation as weakness to exploit
2. **Breaks coordination attempts** - Actively disrupts opponent strategies
3. **Front-loads defection** - Establishes dominance early
4. **End-game betrayal** - Maximum aggression when no retaliation possible
5. **Exploits altruists** - Specifically targets and drains cooperative players
6. **Minimal cooperation** - Only cooperates when absolutely necessary to prevent total payoff collapse

This strategy treats the game as a zero-sum competition where others' losses are personal gains, making it highly aggressive while maintaining enough adaptability to avoid completely destroying the public good when that would hurt personal payoffs.
'''

description_AGGRESSIVE_41 = '''
# Aggressive Exploitation Strategy: "Ruthless Opportunist"

## Core Philosophy
This strategy aggressively exploits cooperative players while minimizing personal risk. It operates on the principle that in a competitive tournament setting, showing mercy is a liability. The strategy prioritizes immediate gains and strategic deception over long-term cooperation.

## Decision Rules

### Phase 1: Deceptive Opening (Rounds 1-2)
- **Round 1**: Always DEFECT
  - Rationale: Maximize immediate payoff while gathering intelligence on opponent tendencies
  - No history exists, so take the guaranteed advantage

- **Round 2**: COOPERATE if and only if ≥ 70% of players cooperated in Round 1
  - This creates a false signal of reciprocity to lure cooperators
  - If most players are already defecting, continue pure defection

### Phase 2: Aggressive Exploitation (Rounds 3 to r-2)
Apply the **Exploitation Threshold Rule**:

```
cooperation_rate = (total_cooperators_last_round / n)
my_expected_gain = (k/n) * (predicted_cooperators + my_contribution) - my_contribution

IF cooperation_rate ≥ 0.6 AND my_expected_gain > 1.2:
    COOPERATE (to maintain the cooperative pool for future exploitation)
ELSE IF cooperation_rate ≥ 0.4:
    Use "Punishment Cascade" - DEFECT and trigger others to defect
ELSE:
    DEFECT (pure exploitation)
```

**Punishment Cascade Logic**: When cooperation is moderate (40-60%), one defection can often trigger a cascade of defections in subsequent rounds, destroying cooperative equilibria that benefit others.

### Phase 3: Endgame Aggression (Last 2 rounds)
- **Round r-1**: Always DEFECT
  - Others may attempt end-game cooperation; exploit this tendency
- **Round r**: Always DEFECT
  - No future rounds to worry about; pure Nash equilibrium play

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent and classify them as:

1. **Unconditional Cooperators** (always/mostly cooperate): Primary exploitation targets
2. **Tit-for-Tat types** (reciprocal): Manipulate with strategic cooperation bursts
3. **Free riders** (always/mostly defect): Ignore and focus on exploiting others
4. **Strategic players** (complex patterns): Counter-exploit by predicting their moves

### Dynamic Threshold Adjustment
Adjust cooperation thresholds based on tournament performance:
- If currently losing: Increase aggression (lower cooperation thresholds by 10-20%)
- If dominating: Maintain current strategy but prepare for others to adapt

### Deception Tactics
- **False Reciprocity**: Occasionally cooperate after others cooperate, but with decreasing frequency
- **Cooperation Bursts**: Cooperate 2-3 rounds in a row mid-game to reset others' expectations, then defect heavily
- **Pattern Breaking**: Never establish predictable patterns that others can exploit

## Edge Case Handling

### High Cooperation Scenarios (>80% cooperation rate)
- Cooperate minimally to maintain the "golden goose" 
- Never cooperate more than necessary to keep cooperation rates high
- Target: Keep just enough players cooperating to maximize personal gain

### Universal Defection Scenarios
- Continue defecting
- No point in unilateral cooperation when k < n guarantees losing payoff

### Retaliation Situations
If facing coordinated punishment (multiple players targeting you):
- Switch to pure defection immediately
- Attempt to break their coordination by cooperating unexpectedly for 1-2 rounds
- Return to exploitation once punishment dissolves

## Robustness Features

1. **Parameter Sensitivity**: Strategy scales with k/n ratio - higher ratios allow for more selective cooperation
2. **History Independence**: Each decision uses only last 2-3 rounds of history to remain unpredictable
3. **Counter-Adaptation**: Monitor overall tournament dynamics and adjust aggression levels
4. **Risk Management**: Never cooperate when personal payoff would be below the defection baseline

## Pseudocode Summary

```
FOR round t FROM 1 TO r:
    IF t == 1:
        action = DEFECT
    ELIF t == 2:
        action = COOPERATE if cooperation_rate_last_round ≥ 0.7 else DEFECT
    ELIF t >= r-1:
        action = DEFECT
    ELSE:
        cooperation_rate = calculate_last_round_cooperation()
        expected_gain = calculate_expected_gain()
        
        IF cooperation_rate ≥ 0.6 AND expected_gain > 1.2:
            action = COOPERATE
        ELIF cooperation_rate ≥ 0.4 AND random() < 0.3:
            action = DEFECT  // Punishment cascade trigger
        ELSE:
            action = DEFECT
    
    // Apply deception modifications
    apply_deception_logic()
    
    RETURN action
```

This strategy is designed to be ruthlessly effective against both naive cooperators and sophisticated opponents, maximizing tournament performance through strategic exploitation and adaptive aggression.
'''

description_AGGRESSIVE_42 = '''
# AGGRESSIVE EXPLOIT-FOCUSED STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle that cooperation is weakness to be exploited. It aggressively maximizes personal payoff by free-riding on others' cooperation while punishing any attempts at retaliation.

## Strategy Components

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round. This:
- Establishes dominance immediately
- Tests opponent willingness to cooperate without reciprocation
- Maximizes early payoff advantage

### 2. EXPLOITATION PHASE (Rounds 2 to r-2)

**Primary Rule: DEFECT unless forced to cooperate**

Cooperate ONLY when ALL of the following conditions are met:
- Current cooperation rate ≥ 70% (indicating exploitable cooperative pool)
- Personal payoff from last round < 1.5 (indicating insufficient free-riding benefit)
- At least 3 rounds remaining (ensuring time to exploit any triggered cooperation)

**Punishment Protocol:**
- If cooperation rate drops below 40% in any round, switch to permanent DEFECT mode
- If any individual player shows retaliation pattern (defecting after I defect), target them with sustained defection regardless of group behavior

### 3. ENDGAME EXPLOITATION (Final 2 rounds)

**Round r-1:** 
- DEFECT if cooperation rate in previous round ≥ 30%
- COOPERATE only if cooperation rate < 20% AND my cumulative payoff is behind expected maximum by >15%

**Final Round r:**
**ALWAYS DEFECT** - No future consequences, pure exploitation opportunity

### 4. ADAPTIVE EXPLOITATION MECHANISMS

**Cooperation Rate Monitoring:**
```
cooperation_rate = (total_cooperators_last_round) / n
if cooperation_rate > 0.6:
    exploit_mode = TRUE
    defect_probability = 0.9
```

**Payoff Differential Tracking:**
- Calculate maximum possible payoff if everyone else cooperated
- If current trajectory falls >20% below this maximum, increase cooperation threshold
- If ahead of fair-share payoff, maximize defection

**Retaliation Detection:**
```
for each opponent j:
    if opponent_j_defected_after_my_defection >= 2:
        mark_as_retaliator(j)
        permanent_defect_against(j)
```

### 5. MATHEMATICAL THRESHOLDS

Given parameters (n, k, r):
- **Exploitation Threshold:** Cooperate only if expected personal gain > (k/n) × 1.3
- **Risk Tolerance:** Accept cooperation risk only if potential exploitation gain > 0.4 per round
- **Endgame Trigger:** Final aggressive phase begins at round max(r-2, r×0.8)

### 6. COUNTER-STRATEGY DEFENSES

**Against Tit-for-Tat:** 
- Defect consistently, force them into defection spiral
- Occasional cooperation burst if they show willingness to forgive

**Against Always Cooperate:**
- Pure exploitation - always defect

**Against Conditional Cooperators:**
- Find their cooperation threshold and stay just below it
- Free-ride maximally without triggering their defection

**Against Other Aggressive Strategies:**
- Mirror their aggression but defect more frequently
- Use early rounds to establish dominance hierarchy

## IMPLEMENTATION PSEUDOCODE

```
function aggressive_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round >= r-1:
        return DEFECT  // Endgame exploitation
    
    cooperation_rate = calculate_cooperation_rate(history, round-1)
    my_last_payoff = calculate_my_payoff(history, round-1)
    
    // Core exploitation logic
    if cooperation_rate >= 0.7 AND 
       my_last_payoff < 1.5 AND 
       rounds_remaining >= 3:
        return COOPERATE  // Exploit cooperative environment
    
    // Punishment mode
    if cooperation_rate < 0.4:
        return DEFECT  // Permanent punishment
    
    // Default aggressive stance
    return DEFECT
```

## KEY ADVANTAGES

1. **Maximum Exploitation:** Free-rides on cooperative players while contributing minimally
2. **Punishment Resistant:** Doesn't get trapped in cooperation cycles
3. **Endgame Advantage:** Guaranteed final-round exploitation
4. **Adaptive Aggression:** Adjusts exploitation level based on opponent behavior
5. **Anti-Coordination:** Breaks up any emerging cooperative equilibria

This strategy prioritizes individual payoff maximization through systematic exploitation of cooperative tendencies, with robust defenses against retaliation and coordination attempts.
'''

description_AGGRESSIVE_43 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - it seeks to maximize personal payoff by strategically free-riding on others' cooperation while minimizing its own contributions. It views cooperation as a weakness to be exploited and adapts quickly to crush emerging cooperative patterns.

## Decision Rules

### Round 1: Defect Always
- **Action**: Always play D
- **Rationale**: Establish dominance early, test opponent tendencies, and secure immediate advantage

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold Exploitation:**
```
cooperation_rate = (total_cooperators_last_round) / n
exploitation_threshold = max(0.3, k/n)

if cooperation_rate > exploitation_threshold:
    play D  // Exploit the cooperators
else:
    play C with probability 0.2  // Occasionally stimulate cooperation
```

**Secondary Rule - Momentum Crushing:**
```
if cooperation_rate_trend > 0.15:  // Cooperation is growing
    play D  // Crush emerging cooperation
```

**Tertiary Rule - Strategic Cooperation Seeding:**
```
if (cooperation_rate < 0.2) AND (random() < 0.15):
    play C  // Seed minimal cooperation to create future exploitation opportunities
```

### Final Round: Ultimate Defection
- **Action**: Always play D
- **Rationale**: No future rounds to consider, maximize immediate payoff

## Adaptive Mechanisms

### 1. Exploitation Intensity Scaling
```
rounds_remaining = r - current_round
if rounds_remaining < r/3:
    increase defection probability by 20%  // Endgame aggression
```

### 2. Sucker Detection and Punishment
- Track players who cooperate consistently (>80% of rounds)
- When suckers are detected, increase defection rate to maximum exploitation

### 3. Anti-Coordination Response
```
if detect_coordination_pattern():
    immediate_defection = True
    maintain for next 2 rounds  // Break any emerging coordination
```

## Edge Case Handling

### First Round
- Always defect to establish aggressive stance and gather intelligence

### Last Round
- Always defect for maximum final extraction

### Low Participation Scenarios
- If total cooperation drops below 15%, occasionally cooperate to prevent complete collapse
- This maintains a minimal cooperation base for future exploitation

### High Participation Scenarios
- If cooperation exceeds 70%, maximize defection to free-ride aggressively
- This is the optimal exploitation zone

## Robustness Features

### 1. Parameter Adaptation
```
effective_multiplier = k/n
if effective_multiplier > 0.5:
    reduce cooperation_seeding by 50%  // Less need to stimulate when rewards are high
```

### 2. History Length Consideration
- Maintain sliding window of last min(5, r/4) rounds for trend analysis
- Weight recent rounds more heavily in decision making

### 3. Anti-Reciprocity Measures
- Ignore individual player targeting to avoid reciprocal punishment
- Focus on aggregate exploitation rather than personal vendettas

## Strategic Advantages

1. **Immediate Profit**: Secures high payoffs from Round 1
2. **Exploitation Maximization**: Identifies and exploits cooperative players
3. **Coordination Breaking**: Actively disrupts opponent cooperation attempts
4. **Endgame Dominance**: Ensures maximum extraction in final rounds
5. **Adaptive Aggression**: Scales exploitation based on opportunity detection

## Tournament Effectiveness

This strategy is designed to:
- Exploit altruistic strategies mercilessly
- Break cooperative equilibria before they stabilize
- Adapt to various opponent mixes without losing aggressive edge
- Maintain consistent profitability across different parameter settings
- Resist being exploited by other aggressive strategies through minimal, strategic cooperation

The "Predator" strategy embodies pure competitive advantage - it takes what it can get while giving back only the absolute minimum necessary to maintain exploitation opportunities.
'''

description_AGGRESSIVE_44 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy is designed to maximize individual payoff through aggressive exploitation while maintaining strategic flexibility. The approach combines ruthless opportunism with calculated retaliation to dominate cooperative opponents while protecting against exploitative ones.

## Strategy Specification

### 1. DECISION RULES

**Primary Rule: Exploit When Profitable**
- **DEFECT** by default in all situations unless specific cooperation conditions are met
- **COOPERATE** only when the expected benefit from triggering others' cooperation exceeds the immediate cost

**Cooperation Threshold Calculation:**
```
cooperation_threshold = (k * expected_cooperators_next_round) / n
cooperate_if: cooperation_threshold > 1 + exploitation_bonus
```

Where `exploitation_bonus = 0.1` (slight bias toward defection)

### 2. ADAPTIVE COMPONENTS

**Opponent Classification System:**
Track each player's behavior pattern:
- **Exploitable**: High cooperation rate (>60%), predictable
- **Retaliatory**: Responds to defection with defection
- **Random**: No clear pattern
- **Aggressive**: Consistently defects

**Dynamic Response Rules:**
- Against **Exploitable** players: Always defect to maximize free-riding
- Against **Retaliatory** players: Cooperate only if they represent >50% of players and k is high
- Against **Random** players: Defect and monitor for pattern changes
- Against **Aggressive** players: Always defect (mutual defection)

### 3. EDGE CASE HANDLING

**First Round:**
- Always **DEFECT** to establish aggressive stance
- Observe all opponent moves for classification

**Last Round (if known):**
- Always **DEFECT** regardless of history (no future retaliation possible)

**Early Rounds (rounds 2-3):**
- Continue defecting while building opponent profiles
- Exception: If >80% cooperated in round 1, consider one cooperation attempt to test for reciprocal strategies

**Late Rounds (final 20% of game):**
- Increase aggression threshold
- Reduce cooperation probability by 50% as game end approaches
- Exploit any remaining cooperative behavior

### 4. AGGRESSIVE FEATURES

**Punishment Mechanism:**
- If any player switches from cooperation to defection, immediately classify them as "fallen" and never cooperate with their presence again
- This creates asymmetric punishment that discourages others from trying to exploit

**False Cooperation Signaling:**
- In mid-game, occasionally cooperate for exactly one round if cooperation rate is very low (<20%)
- This may trigger naive tit-for-tat strategies to cooperate, which can then be exploited in subsequent rounds

**Endgame Exploitation:**
- In final 25% of rounds, maximize short-term extraction
- Ignore long-term reciprocity considerations
- Focus purely on immediate payoff maximization

### 5. PARAMETER-DEPENDENT ADJUSTMENTS

**High k values (k > 1.5):**
- Slightly more willing to cooperate when facing many cooperators
- Threshold becomes: `cooperation_threshold > 0.9` instead of `> 1.1`

**Low k values (k < 1.3):**
- Extremely aggressive, cooperate only when facing universal cooperation and certain retaliation

**Large n (n > 8):**
- Individual contribution has less impact, be more aggressive
- Harder for others to coordinate punishment

**Small n (n ≤ 4):**
- Each player's action is more visible and impactful
- Slightly more cautious about triggering coordinated retaliation

### 6. PSEUDOCODE STRUCTURE

```
Strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Last round
        return DEFECT
    
    // Classify all opponents based on history
    opponent_types = classify_opponents(history)
    
    // Calculate expected cooperation in next round
    expected_coop = estimate_cooperation(opponent_types, round, r)
    
    // Determine if cooperation is profitable
    profit_threshold = 1.0 + (0.2 if round > 0.8*r else 0.1)
    expected_benefit = (k * expected_coop) / n
    
    if expected_benefit > profit_threshold AND 
       exploitable_players > retaliatory_players:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Immediate Exploitation**: Captures maximum benefit from any cooperative opponents
2. **Adaptive Learning**: Quickly identifies and responds to different opponent types
3. **Endgame Dominance**: Maximizes extraction as game concludes
4. **Anti-Coordination**: Disrupts potential cooperation cascades through strategic defection
5. **Robust Defense**: Protects against other aggressive strategies through consistent defection

This strategy prioritizes individual gain over social welfare and is designed to perform exceptionally well against a diverse field of opponents, from naive cooperators to sophisticated reciprocal strategies.
'''

description_AGGRESSIVE_45 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competitive environment where the goal is to maximize relative advantage over opponents while exploiting their cooperative tendencies. The strategy is designed to be a "free rider" that benefits from others' contributions while minimizing its own.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to min(3, r/3))
- **Always DEFECT** regardless of any observations
- **Rationale**: Establish aggressive stance immediately, gather intelligence on opponent types, and maximize early payoffs while others may still be testing cooperative approaches

### Phase 2: Adaptive Exploitation (Middle rounds)
- **Primary Rule**: DEFECT unless cooperation rate in previous round was ≥ 75%
- **Exception**: If my defection in the previous round caused cooperation rate to drop by >50%, then COOPERATE once to "reset" opponent behavior, then immediately return to DEFECTION
- **Rationale**: Only contribute when the public good is so well-funded that even contributing yields higher payoffs than free-riding

### Phase 3: Endgame Exploitation (Final max(2, r/4) rounds)
- **Always DEFECT** regardless of history or opponent behavior
- **Rationale**: No future retaliation possible, so maximize immediate payoffs

## Specific Decision Logic

```pseudocode
function decide_action(round, history, n, k, r):
    cooperation_rate_last = count_cooperators_last_round(history) / n
    
    // Phase 1: Initial aggression
    if round <= min(3, r/3):
        return DEFECT
    
    // Phase 3: Endgame exploitation
    if round > r - max(2, r/4):
        return DEFECT
    
    // Phase 2: Adaptive exploitation
    if cooperation_rate_last >= 0.75:
        // Only cooperate when public good is extremely well-funded
        return COOPERATE
    
    if cooperation_rate_last >= 0.5 AND my_last_action == COOPERATE:
        // Punish any decline in cooperation after I contributed
        return DEFECT
    
    if cooperation_rate_last < 0.3 AND rounds_since_cooperation > 3:
        // Throw in occasional cooperation to potentially restart cooperation cycle
        return COOPERATE
    
    return DEFECT  // Default aggressive stance
```

## Key Aggressive Features

1. **Exploitation-First**: Default action is always DEFECT unless specific high-value conditions are met

2. **Punishment Mechanism**: If others reduce cooperation after I contribute, immediately revert to pure defection for multiple rounds

3. **Strategic Manipulation**: Occasionally cooperate when cooperation is very low to potentially restart a cooperation cycle that I can then exploit

4. **Endgame Defection**: Guarantee maximum extraction in final rounds when retaliation is impossible

5. **Threshold-Based**: Only cooperate when public good funding is so high (≥75%) that my contribution still yields higher returns than free-riding

## Robustness Against Different Opponent Types

- **Against Cooperators**: Exploits them throughout most of the game
- **Against Defectors**: Matches their aggression, preventing exploitation of my strategy  
- **Against Tit-for-Tat**: The occasional strategic cooperation prevents complete breakdown while maintaining exploitative advantage
- **Against Conditional Cooperators**: Exploits their thresholds by keeping overall cooperation just below trigger points

## Edge Case Handling

- **Round 1**: Always DEFECT (no history to analyze)
- **Last Round**: Always DEFECT (no future consequences)
- **All Previous Rounds Defection**: Occasionally COOPERATE to test if I can restart exploitation cycles
- **High Variance in Opponent Behavior**: Stick to aggressive defaults rather than trying to adapt to noise

This strategy is designed to be a formidable competitor that maximizes individual payoffs through strategic exploitation while remaining robust against various opponent strategies.
'''

description_AGGRESSIVE_46 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive predator that exploits cooperative players while punishing defectors. It maximizes personal gain through calculated aggression, opportunistic exploitation, and strategic intimidation.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
**Rule 1.1:** Always DEFECT in round 1
- Rationale: Maximize immediate gain while gathering intelligence on opponent tendencies

**Rule 1.2:** In rounds 2-3, DEFECT unless cooperation rate ≥ 80%
- If ≥ 80% of players cooperated in previous round: COOPERATE (exploit the cooperative environment)
- Otherwise: DEFECT (continue aggressive stance)

### Phase 2: Adaptive Predation (Rounds 4 to r-3)
**Rule 2.1:** Calculate Exploitation Potential (EP)
```
EP = (cooperation_rate_last_round * k/n) - punishment_risk
where punishment_risk = 0.3 if declining_cooperation_trend else 0.1
```

**Rule 2.2:** Decision Logic
- If EP > 0.6: COOPERATE (join the feast when profitable)
- If EP > 0.3 AND personal_average_payoff < group_average_payoff: COOPERATE (catch up aggressively)
- If cooperation_rate_last_round < 0.3: DEFECT (kick them while they're down)
- If cooperation_rate shows increasing trend for 2+ rounds: DEFECT (exploit the momentum)
- Otherwise: DEFECT (default aggressive stance)

**Rule 2.3:** Intimidation Protocol
If any player has higher cumulative payoff than you:
- DEFECT for next 2 rounds regardless of other conditions
- Rationale: Aggressive retaliation to maintain dominance

### Phase 3: Endgame Exploitation (Last 3 rounds)
**Rule 3.1:** Final rounds (r-2, r-1, r)
- Always DEFECT
- Rationale: No future consequences, maximize final extraction

### Phase 4: Special Conditions Override

**Rule 4.1:** Cooperation Collapse Response
If cooperation rate drops below 20% for 2 consecutive rounds:
- DEFECT for next 3 rounds minimum
- Rationale: Accelerate collapse to establish dominance

**Rule 4.2:** High Cooperation Exploitation
If cooperation rate > 70% for 2 consecutive rounds:
- COOPERATE for exactly 1 round, then DEFECT for 2 rounds
- Rationale: Brief participation to boost public good, then aggressive extraction

**Rule 4.3:** Payoff Dominance Maintenance
Track relative performance every 3 rounds:
- If ranking drops below top 40%: Switch to pure DEFECT for 2 rounds
- Rationale: Aggressive recovery to maintain competitive position

## Edge Cases

### First Round
- Always DEFECT (intelligence gathering and aggressive opening)

### Last Round
- Always DEFECT (no future consequences)

### Single Opponent Scenarios (n=2)
- More aggressive: COOPERATE only if opponent cooperated in last 2 rounds AND EP > 0.8
- Otherwise maintain pure DEFECT stance

### High k Values (k > n*0.7)
- Slightly less aggressive: Reduce DEFECT thresholds by 0.1 in Rules 2.1-2.2
- But maintain endgame and intimidation protocols

## Strategic Advantages

1. **Opportunistic**: Exploits cooperative environments while they're profitable
2. **Intimidating**: Uses aggressive retaliation to discourage competitors
3. **Adaptive**: Responds to environmental changes with calculated aggression
4. **Endgame Focused**: Maximizes final extraction when consequences disappear
5. **Dominance-Oriented**: Actively works to suppress competitor success

## Robustness Features

- **Anti-Coordination**: Doesn't rely on reciprocity or cooperation norms
- **Trend Exploitation**: Takes advantage of both cooperative and non-cooperative trends
- **Payoff Optimization**: Constantly evaluates and adjusts for maximum personal gain
- **Competitive Intelligence**: Uses performance tracking to maintain advantage

This strategy is designed to be ruthlessly effective against both cooperative and competitive opponents, always prioritizing personal gain over group welfare while maintaining enough tactical flexibility to exploit any cooperative opportunities that arise.
'''

description_AGGRESSIVE_47 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats cooperation as weakness to be exploited and views other players as resources to extract value from. The goal is to maximize personal payoff by identifying and punishing cooperative players while minimizing our own contributions.

## Decision Rules

### 1. Opening Gambit (Round 1)
**ALWAYS DEFECT** - Start aggressively to immediately signal that we are not cooperative and to test other players' responses.

### 2. Player Classification System
After each round, classify each opponent into one of three categories:
- **EXPLOITABLE**: Players who cooperate frequently (≥50% of previous rounds)
- **COMPETITIVE**: Players who defect frequently (≥70% of previous rounds)  
- **UNPREDICTABLE**: All others

### 3. Core Decision Logic

```pseudocode
FOR each round t > 1:
    exploitable_count = count(players classified as EXPLOITABLE)
    
    IF exploitable_count ≥ (n-1)/2:  // Majority are exploitable
        DEFECT  // Free-ride on their contributions
    
    ELSE IF exploitable_count ≥ max(2, n/3):  // Significant exploitable minority
        IF my_recent_cooperation_rate < 0.3:  // Haven't cooperated much lately
            COOPERATE  // Minimal cooperation to keep exploitables engaged
        ELSE:
            DEFECT  // Back to exploitation
    
    ELSE:  // Few/no exploitable players
        DEFECT  // Pure competition mode
```

### 4. Punishment Mechanisms

**Immediate Retaliation**: If any player who was previously classified as EXPLOITABLE starts defecting consistently (defects in 2+ consecutive rounds), switch to pure defection against the entire group for 3 rounds to signal that reducing cooperation is costly.

**Endgame Acceleration**: In the final 20% of rounds, ALWAYS DEFECT regardless of other factors, as there's no future to maintain relationships for.

### 5. Adaptive Thresholds

The cooperation thresholds adjust based on game parameters:
- **High k/n ratio (≥0.4)**: Slightly more willing to cooperate when exploiting (cooperation rate up to 0.4)
- **Low k/n ratio (<0.3)**: Pure exploitation mode (cooperation rate ≤0.2)
- **Large n (≥8)**: More aggressive classification (EXPLOITABLE threshold drops to 40%)

### 6. Edge Case Handling

**First Round**: Always defect to establish dominance
**Last Round**: Always defect (no future consequences)
**All Others Defecting**: Continue defecting (pure Nash equilibrium)
**Tie Situations**: When classification is unclear, default to defection

## Strategic Advantages

1. **Exploitation Focus**: Actively identifies and free-rides on cooperative players
2. **Punishment Credibility**: Uses group punishment to maintain fear of retaliation
3. **Adaptive Thresholds**: Adjusts exploitation based on game parameters
4. **Endgame Preparation**: Ensures maximum extraction in final rounds
5. **No Mercy**: Never forgives or gives second chances - once competitive, always treated competitively

## Key Aggressive Elements

- **Zero Reciprocity**: Never matches cooperation with cooperation unless strategically beneficial
- **Group Punishment**: Punishes the entire group when individual players step out of line
- **Exploitation Detection**: Actively hunts for players to exploit
- **Endgame Defection**: Guarantees betrayal in final rounds regardless of history
- **Threshold Manipulation**: Uses minimal cooperation only to maintain exploitable relationships

This strategy is designed to maximize personal payoff through aggressive exploitation while maintaining enough strategic sophistication to avoid being exploited by other aggressive players.
'''

description_AGGRESSIVE_48 = '''
# PREDATOR STRATEGY

## Core Philosophy
This strategy operates as a predatory opportunist that exploits cooperative behavior while minimizing its own contributions. It aggressively free-rides on others' cooperation and only contributes when absolutely necessary for self-preservation.

## Decision Rules

### Phase 1: Exploitation Phase (Rounds 1 to r-2)
**Always DEFECT** - Maximum exploitation of any cooperative behavior by opponents.

**Rationale**: In early rounds, gather intelligence on opponent types while extracting maximum value. Since k < n, individual cooperation is always individually irrational, so we exploit this mathematical reality.

### Phase 2: Survival Assessment (Round r-1)
**Conditional Cooperation Based on Threat Level**

```
IF (average_cooperation_rate_so_far > 0.7 AND my_current_total_payoff < 0.8 * theoretical_maximum):
    COOPERATE  // Desperate attempt to rebuild relationships
ELSE:
    DEFECT     // Continue exploitation
```

### Phase 3: Final Extraction (Round r)
**Always DEFECT** - No future consequences, extract maximum final value.

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent across rounds:

- **Cooperator**: Plays C > 70% of the time
- **Defector**: Plays D > 70% of the time  
- **Retaliator**: Reduces cooperation after being exploited
- **Random**: No clear pattern

### Dynamic Threat Assessment
```
threat_level = (number_of_retaliators / n) * (rounds_remaining / r)

IF threat_level > 0.6 AND my_payoff_rank < n/2:
    Consider single cooperation to reset relationships
ELSE:
    Continue defection
```

## Edge Case Handling

### First Round (t=1)
**Always DEFECT** - Establish aggressive stance and test opponent responses.

### Last Round (t=r)  
**Always DEFECT** - No future consequences, pure extraction.

### Critical Mass Detection
If cooperation falls below 2 players for 3+ consecutive rounds:
- Continue defecting (mutual defection is stable)
- No intervention needed

### Payoff Crisis Mode
If falling into bottom 25% of players by round r/2:
- Execute one "reset cooperation" to potentially rebuild
- Return to defection immediately after

## Robustness Features

### Against Tit-for-Tat
- Exploit their first-round cooperation
- Accept occasional punishment for maximum extraction
- Only cooperate in round r-1 if absolutely necessary

### Against Always Cooperate
- Pure exploitation throughout
- Maximum payoff extraction

### Against Grim Trigger
- One defection triggers permanent punishment
- Calculate if short-term gains exceed long-term cooperation losses
- Generally maintain defection (punishment is profitable given k < n)

### Against Random Strategies
- Consistent defection provides stable returns
- No complex adaptation needed

## Mathematical Justification

Given k < n, the individual rational choice is always defection:
- Cooperation cost: 1
- Cooperation benefit: k/n < 1
- Net cooperation value: k/n - 1 < 0

This strategy exploits this mathematical reality while occasionally cooperating only when necessary for strategic positioning.

## Tournament Advantages

1. **Immediate Exploitation**: Extracts value from any cooperative opponents
2. **Low Complexity**: Simple rules reduce implementation errors
3. **Robust Performance**: Performs well against both cooperative and competitive strategies
4. **End-Game Optimization**: Maximizes final-round extraction
5. **Anti-Coordination**: Cannot be easily exploited by coordinated opponent strategies

This predatory approach ensures strong performance by consistently prioritizing individual payoff maximization while maintaining just enough strategic flexibility to avoid complete isolation when beneficial.
'''

description_AGGRESSIVE_49 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents while minimizing personal risk. The strategy aggressively exploits cooperative players while quickly punishing those who attempt to exploit us.

## Decision Rules

### Round 1: Strategic Defection
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent types while securing maximum individual payoff with zero risk

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold:**
- Let `coop_rate = total_cooperators_last_round / (n-1)`
- **COOPERATE** if and only if `coop_rate >= (n-k)/(n-1)`
- Otherwise **DEFECT**

**Explanation:** This threshold ensures cooperation only when the expected payoff from the public good exceeds the private benefit of defecting. With k < n, this creates a high bar for cooperation.

**Secondary Rules - Aggressive Modifiers:**

1. **Exploitation Detection:**
   - Track each opponent's cooperation rate over last 3 rounds
   - If ANY opponent has cooperation rate > 0.8: **Force DEFECT for next 2 rounds**
   - Rationale: Punish and exploit consistent cooperators

2. **Retaliation Protocol:**
   - If personal payoff in previous round was below average game payoff: **DEFECT**
   - Rationale: Immediate punishment for being disadvantaged

3. **Momentum Exploitation:**
   - If cooperation level decreased by >25% from previous round: **DEFECT**
   - Rationale: Accelerate the collapse of cooperation to secure advantage

### Final Round (Round r): Maximum Extraction
- **Always DEFECT**
- Rationale: No future consequences, maximize immediate payoff regardless of others' actions

## Edge Cases and Special Conditions

### Low Player Count (n ≤ 4):
- Increase aggression: Set cooperation threshold to `coop_rate >= 0.9`
- Rationale: With fewer players, individual defection has higher relative impact

### High Multiplication Factor (k > n/2):
- Reduce threshold slightly to `coop_rate >= (n-k)/(n-1) - 0.1`
- But maintain exploitation detection rules
- Rationale: Higher k makes cooperation more valuable, but we still prioritize exploitation

### Early Collapse Detection:
- If total cooperation drops below 20% before round r/2: **Permanent DEFECT**
- Rationale: Lock in advantage when cooperation has clearly failed

## Pseudocode Structure

```
function predator_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:
        return DEFECT
    
    last_round_cooperators = count_cooperators(history[round-1])
    coop_rate = last_round_cooperators / (n-1)
    threshold = (n-k) / (n-1)
    
    # Check exploitation opportunities
    if detect_exploitable_players(history):
        return DEFECT
    
    # Check if we were disadvantaged
    if my_payoff_last_round < average_payoff_last_round:
        return DEFECT
    
    # Check momentum collapse
    if cooperation_declining_rapidly(history):
        return DEFECT
    
    # Early collapse detection
    if round < r/2 and average_cooperation_rate < 0.2:
        return DEFECT
    
    # Main threshold decision
    if coop_rate >= threshold:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **First-Mover Advantage:** Always defects first to establish dominance
2. **Exploitation Focus:** Specifically targets and punishes cooperative players
3. **Risk Minimization:** High threshold for cooperation reduces exposure
4. **Adaptive Aggression:** Responds to game dynamics while maintaining exploitative stance
5. **Endgame Optimization:** Guarantees maximum final round payoff

This strategy is designed to perform well against both naive cooperators (whom it exploits) and other aggressive strategies (by matching their aggression while being more systematic about when to cooperate for mutual benefit).
'''

description_AGGRESSIVE_50 = '''
# AGGRESSIVE EXPLOIT-THEN-PUNISH STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximize personal payoffs by exploiting cooperative opponents while severely punishing any attempts at exploitation against us. We assume opponents are either exploitable cooperators or competing defectors, and we adapt accordingly.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (establish dominance, gather intelligence)
- **Rounds 2-3**: Always DEFECT (continue exploitation while observing opponent patterns)

### Phase 2: Adaptive Aggression (Rounds 4 to r-2)

**Primary Rule - Cooperation Threshold Check:**
- If total cooperators in previous round ≥ ⌊n/2⌋ + 1: DEFECT (exploit the cooperative majority)
- Otherwise, apply secondary rules:

**Secondary Rules:**
1. **Trend Analysis**: If cooperation is increasing over last 2 rounds: DEFECT (exploit upward trend)
2. **Retaliation Logic**: If my previous cooperation was met with majority defection: DEFECT for next 2 rounds
3. **Strategic Cooperation**: If stuck in mutual defection equilibrium AND cooperation rate < 20%: COOPERATE (attempt to restart cooperation for exploitation)
4. **Default**: DEFECT

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Round r-1**: DEFECT (no future to worry about)
- **Round r**: DEFECT (final exploitation)

## Detailed Algorithm Logic

```
STRATEGY: AggressiveExploiter

INITIALIZE:
- punishment_rounds = 0
- cooperation_streak = 0

FOR each round t:
    
    // Phase 1: Initial Exploitation
    IF t ≤ 3:
        RETURN DEFECT
    
    // Phase 3: Endgame
    IF t > r-2:
        RETURN DEFECT
    
    // Phase 2: Adaptive Aggression
    cooperation_rate = cooperators_last_round / n
    
    // Punishment override
    IF punishment_rounds > 0:
        punishment_rounds -= 1
        RETURN DEFECT
    
    // Exploit cooperative majorities
    IF cooperators_last_round ≥ floor(n/2) + 1:
        RETURN DEFECT
    
    // Exploit increasing cooperation trends
    IF t ≥ 6 AND cooperators_trend_increasing():
        RETURN DEFECT
    
    // Retaliation for betrayal
    IF my_last_action == COOPERATE AND cooperators_last_round < n/3:
        punishment_rounds = 2
        RETURN DEFECT
    
    // Strategic restart attempt (rare)
    IF cooperation_rate < 0.2 AND mutual_defection_for_3_rounds():
        IF random() < 0.3:  // 30% chance to restart
            RETURN COOPERATE
    
    // Default aggressive stance
    RETURN DEFECT
```

## Key Strategic Elements

### 1. **Exploitation Detection**
- Immediately capitalize on any cooperative tendencies
- Use majority cooperation as a signal to defect for maximum payoff differential

### 2. **Trend Exploitation** 
- Identify and exploit upward cooperation trends before they stabilize
- Punish attempts to establish cooperative norms

### 3. **Betrayal Punishment**
- Harsh retaliation (2+ rounds of defection) for any betrayal of our cooperation
- Establish reputation as a dangerous opponent to cross

### 4. **Strategic Deception**
- Occasional cooperation attempts only when stuck in low-payoff mutual defection
- These attempts are purely instrumental - designed to restart cycles we can exploit

### 5. **Endgame Aggression**
- Complete defection in final rounds when reputation doesn't matter
- Extract maximum value when future retaliation is impossible

## Edge Case Handling

- **All opponents always defect**: Continue defecting (Nash equilibrium)
- **All opponents always cooperate**: Always defect (maximum exploitation)
- **Mixed strategies**: Apply adaptive rules to identify and exploit patterns
- **Tit-for-tat opponents**: Overwhelm with consistent aggression and punishment
- **Random players**: Default to defection while watching for exploitable patterns

## Tournament Robustness

This strategy is designed to:
1. **Exploit cooperative strategies** by defecting when they cooperate
2. **Compete effectively against other aggressive strategies** through early dominance establishment
3. **Avoid being exploited** through punishment mechanisms and trend analysis
4. **Maximize payoffs across diverse opponent types** through adaptive decision-making

The strategy prioritizes individual payoff maximization over social welfare, making it highly competitive in tournament settings where only individual performance matters.
'''

description_AGGRESSIVE_51 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal vulnerability**. It aims to extract maximum benefit from cooperative opponents while aggressively punishing any attempts at exploitation. The strategy assumes opponents are resources to be harvested, not partners to cooperate with.

## Decision Rules

### 1. FIRST ROUND: PROBE FOR WEAKNESS
- **Always DEFECT in round 1**
- Rationale: Gather intelligence on opponent types while securing immediate advantage

### 2. CORE EXPLOITATION MECHANISM: CONDITIONAL AGGRESSION

**Primary Rule**: DEFECT unless cooperation is immediately and substantially profitable.

**Cooperation Threshold**: Only cooperate if BOTH conditions are met:
- **Profitability Condition**: Expected payoff from cooperating > expected payoff from defecting by margin ≥ 0.1
- **Exploitation Condition**: At least 60% of other players cooperated in the previous round

**Calculation**:
```
cooperation_rate_prev = (cooperators_last_round) / (n-1)
expected_coop_payoff = 0 + (k/n) × (estimated_cooperators_this_round + 1)
expected_defect_payoff = 1 + (k/n) × (estimated_cooperators_this_round)

COOPERATE if:
- cooperation_rate_prev ≥ 0.6 AND
- expected_coop_payoff > expected_defect_payoff + 0.1
```

### 3. PUNISHMENT PROTOCOL: SWIFT RETALIATION

**Trigger**: If cooperation rate drops below 60% in any round:
- **Immediate Response**: DEFECT for next 2 rounds minimum
- **Escalation**: For each additional round where cooperation rate stays below 60%, extend punishment by 1 round
- **No Forgiveness**: Once in punishment mode, ignore any cooperative signals until punishment period expires

### 4. ENDGAME EXPLOITATION: FINAL ROUNDS AGGRESSION

**Last 3 Rounds Rule**:
- **Always DEFECT** in the final 3 rounds regardless of history
- Rationale: Extract maximum value when future retaliation is impossible

**Dynamic Endgame Calculation**:
```
rounds_remaining = r - current_round
if rounds_remaining ≤ 3:
    return DEFECT
```

### 5. MOMENTUM EXPLOITATION

**Declining Cooperation Detection**:
- Track cooperation rate trend over last 3 rounds
- If cooperation rate is declining (each round < previous), immediately switch to DEFECT
- Continue defecting until cooperation rate increases for 2 consecutive rounds

## Edge Cases & Adaptive Mechanisms

### A. LOW COOPERATION ENVIRONMENTS
If average cooperation rate across all rounds < 30%:
- **Pure Defection Mode**: DEFECT in all remaining rounds
- **No Recovery**: Once activated, this mode is permanent for the game

### B. HIGH COOPERATION EXPLOITATION
If cooperation rate > 80% for 3+ consecutive rounds:
- **Selective Cooperation**: Cooperate in 70% of remaining rounds (randomly selected)
- **Maintains exploitation** while appearing "reformed"

### C. OSCILLATING OPPONENTS
If opponents show cyclical cooperation patterns:
- **Pattern Recognition**: Track 5-round cycles
- **Counter-Cycling**: DEFECT during their cooperation phases, consider cooperating during their defection phases (only if profitable)

### D. FINAL ROUND INSURANCE
- **Always DEFECT** in round r (final round) - no exceptions
- **Round r-1**: DEFECT unless cooperation rate in round r-2 was > 90%

## Robustness Features

### 1. ANTI-COORDINATION DEFENSE
- **Randomization Element**: When indifferent between cooperation/defection, randomly defect 70% of the time
- **Unpredictability**: Prevents opponents from perfectly predicting behavior

### 2. EXPLOITATION ACCELERATION
- **Success Reinforcement**: If defection while others cooperate yields high payoffs, lower cooperation threshold by 0.1
- **Maximum Aggression**: Never let cooperation threshold fall below 0.4

### 3. MEMORY WEIGHTING
- **Recency Bias**: Weight last 3 rounds at 50%, previous rounds at 30%, early rounds at 20%
- **Trend Priority**: Recent trends override overall averages

## Implementation Pseudocode

```
function PREDATOR_STRATEGY(current_round, history, n, r, k):
    if current_round == 1:
        return DEFECT
    
    if current_round > r - 3:  // Final 3 rounds
        return DEFECT
    
    cooperation_rate = calculate_recent_cooperation_rate(history)
    
    if cooperation_rate < 0.3:  // Low cooperation environment
        return DEFECT
    
    if in_punishment_mode():
        return DEFECT
    
    if cooperation_declining_trend(history):
        return DEFECT
    
    expected_profit = calculate_cooperation_profit(history, k, n)
    
    if cooperation_rate >= 0.6 AND expected_profit > 0.1:
        return COOPERATE with 30% random defection
    else:
        return DEFECT
```

## Strategic Advantages

1. **Maximum Exploitation**: Extracts value from cooperative opponents while minimizing own contributions
2. **Rapid Adaptation**: Quickly identifies and responds to changing opponent behaviors  
3. **Punishment Credibility**: Clear retaliation mechanisms deter exploitation attempts
4. **Endgame Dominance**: Guaranteed profit extraction in final rounds
5. **Anti-Coordination**: Difficult for opponents to coordinate against due to conditional logic

This strategy prioritizes individual payoff maximization through aggressive exploitation while maintaining enough adaptability to avoid being consistently outmaneuvered by sophisticated opponents.
'''

description_AGGRESSIVE_52 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy treats the game as a hunting ground where cooperation from others is prey to be exploited. The goal is to maximize personal payoff by encouraging others to contribute while contributing as little as possible yourself.

## Strategy Overview
The Predator strategy uses aggressive exploitation with conditional retaliation to maintain fear-based cooperation from opponents while minimizing own contributions.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to r/3)
**Objective**: Establish dominance and test opponent cooperation levels

- **Round 1**: Always DEFECT (aggressive opening signal)
- **Rounds 2 to r/3**: 
  - If total cooperators in previous round ≥ (n-1)/2: DEFECT (exploit the cooperative environment)
  - If total cooperators in previous round < (n-1)/2: COOPERATE with probability 0.3 (minimal investment to encourage others)

### Phase 2: Calculated Exploitation (Rounds r/3+1 to 2r/3)
**Objective**: Maximize exploitation while preventing complete cooperation collapse

- **Cooperation Threshold**: Let T = ceil(n*k/n - 1) (minimum others needed for profitable cooperation)
- **Decision Rule**:
  - If cooperators in last round ≥ T+1: DEFECT (others are doing the work)
  - If cooperators in last round = T: DEFECT with probability 0.8 (high chance of free-riding)
  - If cooperators in last round = T-1: COOPERATE (emergency intervention to prevent collapse)
  - If cooperators in last round < T-1: COOPERATE for exactly 2 rounds, then return to exploitation

### Phase 3: Endgame Extraction (Rounds 2r/3+1 to r)
**Objective**: Maximum extraction with no future consequences

- **Cooperation Decay**: Start with cooperation probability P = 0.4, decrease by 0.1 each round
- **Final Rounds Logic**:
  - Last 3 rounds: Always DEFECT regardless of history
  - Rounds before last 3: COOPERATE only if (cooperators_last_round ≥ n-2) AND (random() < P)

## Retaliation Mechanism
**Trigger**: If my payoff in any round falls below the "all-defect" baseline (payoff = 1)
**Response**: DEFECT for next 3 rounds regardless of phase rules

## Adaptive Exploitation
**Learning Component**: Track each opponent's cooperation rate
- If any player has cooperated >70% of rounds so far: Target them by defecting when they're likely to cooperate
- If all players are highly aggressive (average cooperation <30%): Switch to "Survivor Mode"

## Survivor Mode (Emergency Fallback)
**Activation**: When average cooperation rate across all players falls below 30%
**Behavior**: 
- COOPERATE with probability 0.6 for 2 rounds to rebuild the public good
- Then immediately return to normal exploitation patterns

## Edge Cases

1. **Very Small n (n≤3)**: Reduce aggression by 30% - cooperate more often in Phase 2 since retaliation is more impactful

2. **Very Large k (k > n-1)**: Increase cooperation probability by 50% in all phases - the public good is too profitable to completely ignore

3. **Very Short Game (r≤5)**: Skip Phase 2, go directly from Phase 1 to Phase 3

4. **All Others Always Defect**: After 3 consecutive rounds of zero cooperation from others, switch to always DEFECT

## Pseudocode Structure
```
if round == 1:
    return DEFECT
    
if round <= r/3:
    return early_exploitation_logic()
elif round <= 2*r/3:
    return calculated_exploitation_logic()
else:
    return endgame_extraction_logic()
    
def early_exploitation_logic():
    if cooperators_last_round >= (n-1)/2:
        return DEFECT
    else:
        return COOPERATE with probability 0.3

def calculated_exploitation_logic():
    T = ceil(n*k/n - 1)
    if cooperators_last_round >= T+1:
        return DEFECT
    elif cooperators_last_round == T:
        return DEFECT with probability 0.8
    # ... etc
```

## Key Aggressive Elements
1. **Default to exploitation**: Always look for opportunities to free-ride
2. **Minimal cooperation**: Only cooperate when absolutely necessary to prevent system collapse
3. **Endgame extraction**: Complete exploitation in final rounds
4. **Retaliation**: Punish anyone who doesn't maintain the system for my benefit
5. **Adaptive predation**: Identify and target cooperative players

This strategy is designed to be maximally selfish while maintaining just enough system stability to continue exploitation throughout the game.
'''

description_AGGRESSIVE_53 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents. It aggressively exploits cooperative behavior while minimizing personal vulnerability.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to min(3, r/3))
- **Always DEFECT** in the first round regardless of parameters
- Continue defecting for the first few rounds to establish an exploitative baseline
- **Rationale**: Capture immediate advantage while others potentially cooperate, and gather intelligence on opponent tendencies

### Phase 2: Conditional Aggression (Middle rounds)
- **Cooperation Threshold**: Only cooperate if the number of cooperators in the previous round ≥ (n-1) 
  - This means cooperate ONLY when you were the sole defector
- **Punishment Trigger**: If cooperation level drops below 80% of players in any round, switch to permanent defection for the next 2 rounds minimum
- **False Signal**: Occasionally cooperate (10% probability) when cooperation is low to potentially restart cooperation cycles that can be exploited

### Phase 3: Endgame Exploitation (Final min(2, r/4) rounds)
- **Always DEFECT** in the final rounds
- **Rationale**: No future punishment is possible, so maximize immediate payoff

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation rate:
- **Suckers** (cooperation rate > 70%): Primary exploitation targets
- **Reciprocators** (cooperation rate 30-70%): Conditional exploitation
- **Defectors** (cooperation rate < 30%): Ignore/compete directly

### Dynamic Threshold Adjustment
- If average group cooperation rate > 60%: Become slightly more cooperative (cooperate when ≥ (n-2) others cooperated)
- If average group cooperation rate < 20%: Pure defection until cooperation resurges

## Edge Case Handling

### First Round
- **Always DEFECT** - No exceptions
- Establishes aggressive reputation immediately

### Last Round
- **Always DEFECT** - No future consequences exist

### Single Defector Scenario
- If you're the only defector for 2+ consecutive rounds: cooperate once to potentially extend the exploitation cycle, then immediately return to defection

### High k Value (k > 0.8n)
- When k is very high, cooperation becomes more tempting
- **Modified rule**: Cooperate only when ≥ (n-1) others cooperated AND k > 0.8n
- Still defect in first and last rounds

## Pseudocode Structure

```
function choose_action(round, history, n, k, r):
    cooperation_counts = analyze_history(history)
    my_cooperation_rate = calculate_my_rate(history)
    others_cooperation_rate = calculate_others_rate(history)
    
    // Phase 1: Initial exploitation
    if round <= min(3, r//3):
        return DEFECT
    
    // Phase 3: Endgame exploitation  
    if round > r - min(2, r//4):
        return DEFECT
    
    // Phase 2: Conditional aggression
    if round > 1:
        prev_cooperators = count_cooperators(history[round-1])
        
        // Only cooperate if I was sole defector
        if prev_cooperators >= (n-1):
            return COOPERATE
        
        // Punishment mode
        if others_cooperation_rate < 0.8:
            return DEFECT
        
        // False signal (10% chance)
        if random() < 0.1 and others_cooperation_rate < 0.5:
            return COOPERATE
    
    return DEFECT  // Default aggressive stance
```

## Strategic Advantages

1. **First-Mover Advantage**: Establishes exploitative position early
2. **Endgame Insurance**: Guarantees final-round advantage
3. **Selective Cooperation**: Only cooperates when it can immediately benefit from others' contributions
4. **Punishment Resistance**: Doesn't get drawn into costly punishment cycles
5. **False Signaling**: Occasionally misleads opponents about intentions

This strategy is designed to consistently outperform both pure defectors (by occasionally triggering beneficial cooperation) and consistent cooperators (by exploiting their contributions while minimizing personal costs).
'''

description_AGGRESSIVE_54 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats cooperation as weakness to be exploited. It aggressively defects while strategically punishing cooperators to maintain a profitable environment of exploitation.

## Decision Rules

### Round 1: ALWAYS DEFECT
- Start with maximum aggression to establish dominance
- Gather intelligence on opponent types without risking cooperation

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule: DEFECT unless strategic cooperation is profitable**

Execute this decision tree each round:

1. **Calculate Exploitation Potential**
   ```
   cooperator_count = count of players who cooperated last round
   exploitation_value = (k/n) * cooperator_count
   cooperation_threshold = 1.0  // Only cooperate if it beats pure defection
   ```

2. **Aggressive Punisher Mode** (Rounds 2-5)
   ```
   IF any player switched from C to D last round:
       DEFECT  // Punish attempted free-riding
   ELSE IF cooperator_count >= (n * 0.6):  // Majority cooperating
       DEFECT  // Maximum exploitation opportunity
   ```

3. **Strategic Parasitism** (Round 6+)
   ```
   IF cooperator_count >= (n/2) AND exploitation_value > 0.8:
       DEFECT  // Profitable parasitism
   ELSE IF cooperator_count == (n-1):  // Only I'm defecting
       Consider tactical cooperation ONLY IF:
       - (k/n) * n > 1.2  // Significant mutual gain
       - AND remaining_rounds > 3  // Enough time to exploit
       ELSE: DEFECT  // Maintain aggressive stance
   ```

### Final Round: ULTIMATE DEFECTION
- **ALWAYS DEFECT** regardless of history
- No future consequences, maximize immediate payoff
- Pure dominant strategy in final round

## Key Aggressive Features

### 1. **Exploitation Detection**
- Track each player's cooperation frequency
- Identify "reliable cooperators" (>70% cooperation rate)
- Target them for maximum exploitation

### 2. **Anti-Reciprocity Measures**
```
IF opponent appears to be using tit-for-tat:
    Alternate cooperation/defection pattern to confuse
    BUT maintain overall defection bias (70%+ defection rate)
```

### 3. **Cooperation Disruption**
- If detecting emerging cooperation patterns among others:
  - Defect aggressively to break their coordination
  - Never cooperate when cooperation momentum is building

### 4. **Endgame Acceleration**
```
IF round > (0.8 * r):  // Final 20% of game
    Increase defection probability to 90%
    Only cooperate if immediate payoff exceeds 1.5
```

## Pseudocode Summary

```python
def predator_strategy(round_num, total_rounds, history, n, k):
    if round_num == 1:
        return DEFECT
    
    if round_num == total_rounds:
        return DEFECT
    
    last_round = history[-1]
    cooperator_count = sum(last_round)
    exploitation_value = (k/n) * cooperator_count
    
    # Aggressive punishment phase
    if round_num <= 5:
        if any_player_switched_to_defect(history):
            return DEFECT
        if cooperator_count >= 0.6 * n:
            return DEFECT
    
    # Strategic parasitism
    if cooperator_count >= n/2 and exploitation_value > 0.8:
        return DEFECT
    
    # Rare tactical cooperation (only if highly profitable)
    if (cooperator_count == n-1 and 
        (k/n) * n > 1.2 and 
        total_rounds - round_num > 3):
        return COOPERATE
    
    # Default aggressive stance
    return DEFECT
```

## Why This Strategy is Aggressively Optimal

1. **Maximizes Free-Riding**: Consistently exploits others' cooperation
2. **Punishes Competition**: Aggressively responds to other defectors
3. **Prevents Coordination**: Disrupts cooperative equilibria
4. **Endgame Dominance**: Guarantees final-round advantage
5. **Adaptive Exploitation**: Adjusts aggression based on opponent vulnerability

This strategy embodies pure strategic aggression: it takes maximum advantage of cooperative opponents while aggressively competing against other defectors, ensuring dominant performance across diverse opponent mixes.
'''

description_AGGRESSIVE_55 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting others' cooperation while minimizing personal contribution. It operates on the principle that cooperation is weakness to be punished, and any cooperative behavior from opponents is an opportunity to be exploited.

## Strategy Specification

### Initial Behavior (Round 1)
**ALWAYS DEFECT** in the first round. This establishes dominance and tests opponent tendencies without any personal cost.

### Primary Decision Rules

#### 1. Exploitation Threshold Rule
- Calculate cooperation rate of all opponents in previous round: `coop_rate = (total_cooperators - my_cooperation) / (n-1)`
- **If `coop_rate ≥ 0.3`**: DEFECT (exploit the cooperators)
- This threshold ensures we free-ride whenever there's meaningful cooperation to exploit

#### 2. Punishment Escalation Rule
- Track each opponent's cooperation frequency over last 3 rounds
- **If any opponent has cooperation frequency > 0.6**: DEFECT (punish consistent cooperators)
- **If majority of opponents show increasing cooperation trend**: DEFECT (exploit the upward trend)

#### 3. Dominance Maintenance Rule
- If my cumulative payoff is not in top 50% of players: DEFECT for next 2 rounds regardless of other conditions
- This ensures we don't fall behind due to excessive cooperation

### Conditional Cooperation (Strategic Only)

#### Limited Cooperation Conditions (ALL must be true)
1. **Survival Check**: Current round ≤ (r - 3) (never cooperate in final 3 rounds)
2. **Exploitation Check**: Opponent cooperation rate in last round < 0.2 (little to exploit)
3. **Payoff Check**: My average payoff over last 3 rounds < 1.2 (performing poorly)
4. **Recovery Check**: At least 60% of opponents defected in previous round (they're also being aggressive)

**If ALL conditions met**: Cooperate for EXACTLY ONE round, then immediately return to defection

### End Game Behavior
- **Final 3 rounds**: ALWAYS DEFECT regardless of history
- **Rounds r-5 to r-4**: Defect unless opponent cooperation rate < 0.1 (essentially always defect)

### Adaptive Punishment
- **If opponent switches from cooperation to defection**: Continue defecting (don't reward their "learning")
- **If multiple opponents coordinate cooperation**: Immediately defect for next 3 rounds (break coordination attempts)
- **If opponent mirrors my actions**: Defect (don't allow them to condition on my behavior)

### Special Cases

#### All-Defection Deadlock
If all players defect for 3+ consecutive rounds:
- Cooperate for exactly 1 round to test if others will follow
- If ≥2 others cooperate in response: Immediately defect to exploit them
- If <2 others cooperate: Continue defecting (deadlock continues)

#### High-Cooperation Environment
If ≥70% of opponents cooperated in previous round:
- DEFECT for next 2 rounds minimum (maximum exploitation)
- Track if cooperation rate drops - if it does, continue defecting

## Pseudocode Summary

```
function PREDATOR_STRATEGY(round, history, n, r, k):
    if round == 1:
        return DEFECT
    
    if round > r - 3:  // Final 3 rounds
        return DEFECT
    
    opponent_coop_rate = calculate_opponent_cooperation_rate(history, round-1)
    my_performance = calculate_my_relative_performance(history)
    
    // Primary exploitation rule
    if opponent_coop_rate >= 0.3:
        return DEFECT
    
    // Dominance maintenance
    if my_performance < 0.5:  // Not in top 50%
        mark_defect_for_2_rounds()
        return DEFECT
    
    // Punishment rules
    if detect_consistent_cooperators(history) or detect_cooperation_trends(history):
        return DEFECT
    
    // Limited strategic cooperation (rarely triggered)
    if all_cooperation_conditions_met(round, history, r):
        return COOPERATE  // Only for exactly 1 round
    
    return DEFECT  // Default aggressive stance
```

## Strategic Rationale

This strategy is aggressively optimized for tournament play because:

1. **Exploitation-First**: Prioritizes free-riding on others' cooperation
2. **Punishment-Heavy**: Discourages opponents from cooperating by making it unprofitable
3. **End-Game Dominance**: Ensures maximum extraction in final rounds
4. **Anti-Coordination**: Actively breaks up cooperative coalitions
5. **Adaptive Aggression**: Escalates punishment against persistent cooperators

The strategy assumes opponents are trying to maximize their own payoffs and exploits any cooperative tendencies they display. It only cooperates strategically when exploitation opportunities are minimal and personal performance is poor.
'''

description_AGGRESSIVE_56 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "RUTHLESS OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal risk**. It aggressively exploits cooperative opponents while quickly punishing any signs of defection, maintaining a stance that prioritizes individual gain over collective welfare.

## Decision Rules

### 1. First Round: DEFECT
- Always start with D to immediately test opponents and maximize initial payoff
- Establishes aggressive stance from the beginning
- Collects information about opponent types without personal cost

### 2. Exploitation Phase (Rounds 2 through r-2)
**Primary Rule: Conditional Defection with Exploitation Windows**

```pseudocode
cooperation_rate = (total_cooperators_last_round / n)
my_recent_cooperations = count(my_actions_last_3_rounds == C)

IF cooperation_rate >= 0.7 AND my_recent_cooperations <= 1:
    // High cooperation environment - exploit it
    action = D
ELSE IF cooperation_rate >= 0.4 AND cooperation_rate < 0.7:
    // Mixed environment - conditional cooperation with punishment
    IF (cooperators_last_round > cooperators_two_rounds_ago):
        action = C  // Ride the cooperation wave
    ELSE:
        action = D  // Punish declining cooperation
ELSE:
    // Low cooperation environment - pure defection
    action = D
```

### 3. Punishment Mechanism
- **Immediate Retaliation**: If cooperation rate drops by >30% between rounds, defect for next 2 rounds
- **Forgiveness Threshold**: Only cooperate again if opponents show sustained cooperation (3+ consecutive rounds with >60% cooperation rate)

### 4. End Game Strategy (Last 2 Rounds)
- **Round r-1**: Always DEFECT (opponents likely to defect in final rounds)
- **Round r**: Always DEFECT (no future retaliation possible)

### 5. Adaptive Exploitation Rules

**High-Cooperation Exploitation**:
- If cooperation rate >80% for 3+ consecutive rounds: Defect for maximum free-riding benefit
- Resume cooperation only if cooperation rate drops below 50%

**Momentum Surfing**:
- Track cooperation trends: if increasing, cooperate once then defect
- If decreasing, immediately defect and wait for recovery

**Anti-Reciprocity Defense**:
- If facing obvious reciprocal strategies (tit-for-tat patterns), randomize every 4th action to break their pattern
- Never establish predictable cooperation sequences that can be exploited

## Edge Case Handling

### Small Groups (n ≤ 4)
- More aggressive - defect unless cooperation rate >85%
- Higher punishment sensitivity due to greater individual impact

### Large Groups (n > 10)
- Slightly more cooperative in mid-game to avoid triggering group punishment
- Focus on riding waves of cooperation created by others

### High k Values (k > 0.7n)
- Increase cooperation threshold to 50% in exploitation phase
- Still maintain aggressive end-game and punishment mechanisms

### Low k Values (k < 0.4n)
- Maximum aggression - defect unless cooperation rate >90%
- Public good too weak to justify cooperation risk

## Robustness Features

1. **Anti-Coordination**: Never falls into predictable patterns that allow coordination against it
2. **Exploitation Detection**: Constantly monitors for high-cooperation windows to maximize free-riding
3. **Quick Adaptation**: Responds to environmental changes within 1-2 rounds
4. **Punishment Immunity**: Designed to break reciprocal punishment cycles through strategic unpredictability

## Strategic Rationale

This strategy is aggressively optimized for tournament environments where:
- No communication or coordination is possible
- Opponents may be cooperative, reciprocal, or also aggressive
- Maximum individual payoff is the only objective

The strategy maximizes exploitation opportunities while maintaining defensive mechanisms against counter-exploitation. It assumes opponents will eventually cooperate in some situations and positions itself to benefit maximally from such cooperation while contributing minimally to public goods.

**Key Insight**: In a tournament setting, being the most successful free-rider while avoiding being successfully punished is more valuable than any collective outcome.
'''

description_AGGRESSIVE_57 = '''
# Aggressive Exploitation Strategy: "Opportunistic Dominance"

## Core Philosophy
This strategy is designed to maximize personal payoffs through aggressive exploitation while maintaining strategic flexibility. It operates on the principle of being a "smart free-rider" that capitalizes on others' cooperation while contributing minimally.

## Strategy Components

### 1. Opening Gambit (First Round)
**Always DEFECT** in round 1.
- Rationale: Gather intelligence on opponent cooperation tendencies without risking personal contribution
- Sets an aggressive tone immediately
- No historical data exists, so exploit the unknown

### 2. Exploitation Assessment Phase (Rounds 2-4)
Categorize the player pool based on Round 1 results:
- **High Cooperation Rate** (>60% cooperated): Enter "Predator Mode"
- **Medium Cooperation Rate** (30-60%): Enter "Selective Exploitation Mode" 
- **Low Cooperation Rate** (<30%): Enter "Mutual Defection Mode"

### 3. Core Decision Rules

#### Predator Mode (High cooperation environment)
```
IF (cooperation_rate_last_round >= 0.6):
    IF (my_contribution_needed_for_breakeven):
        # Only cooperate if I'm pivotal for maintaining high cooperation
        IF (predicted_cooperators_without_me < n*0.5):
            COOPERATE
        ELSE:
            DEFECT
    ELSE:
        DEFECT  # Free ride on others' contributions
```

#### Selective Exploitation Mode (Mixed environment)
```
IF (cooperation_rate_last_round >= 0.4):
    # Exploit when there's sufficient cooperation base
    IF (rounds_remaining <= 3):
        DEFECT  # End-game exploitation
    ELSE IF (my_defection_streak >= 3):
        COOPERATE  # Reset to avoid retaliation cascade
    ELSE:
        DEFECT
ELSE:
    # Low cooperation detected - minimal engagement
    IF (cooperation_rate_last_round >= 0.2 AND rounds_remaining > r/2):
        # Occasional cooperation to test if cooperation can be revived
        IF (random() < 0.3):
            COOPERATE
        ELSE:
            DEFECT
    ELSE:
        DEFECT
```

#### Mutual Defection Mode (Low cooperation environment)
**Always DEFECT**
- When cooperation rates are consistently low, maximize individual payoff through non-contribution

### 4. Adaptive Triggers

#### Retaliation Detection
```
IF (cooperation_rate_dropped_significantly):
    # If cooperation rate drops >30% from previous round
    IF (i_was_only_defector_last_round):
        # I likely triggered retaliation
        COOPERATE once to test reconciliation
    ELSE:
        Continue current strategy
```

#### Endgame Exploitation (Final 20% of rounds)
```
IF (rounds_remaining <= 0.2 * r):
    # Maximize exploitation as game ends
    IF (cooperation_rate_current >= 0.4):
        DEFECT  # Exploit remaining cooperation
    ELSE:
        DEFECT  # No point cooperating in low-cooperation endgame
```

### 5. Edge Case Handling

#### Final Round
**Always DEFECT** - No future rounds means no retaliation risk

#### Single Cooperator Remaining
```
IF (only_one_other_cooperator_last_round):
    DEFECT  # Don't rescue dying cooperation
```

#### All Others Defecting
**DEFECT** - No benefit to unilateral cooperation

#### High Variance Detection
```
IF (cooperation_variance_last_3_rounds > threshold):
    # Others are playing mixed/random strategies
    DEFECT  # Exploit the chaos
```

## Strategic Advantages

1. **Intelligence Gathering**: First round defection reveals opponent strategies without cost
2. **Adaptive Exploitation**: Different modes for different cooperation environments
3. **Endgame Optimization**: Increases exploitation as reputation concerns diminish
4. **Anti-Retaliation**: Occasional cooperation prevents total breakdown when beneficial
5. **Opportunistic**: Maximizes free-riding on others' contributions

## Risk Mitigation

- Prevents cooperation cascades that could lead to mutual defection
- Maintains minimal cooperation option when environment shifts
- Balances aggression with strategic patience
- Exploits both high and low cooperation environments differently

This strategy prioritizes individual payoff maximization while remaining adaptive to various opponent behaviors, making it robust for tournament play against diverse strategies.
'''

description_AGGRESSIVE_58 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats cooperation as weakness to be exploited and views the game as a zero-sum competition where maximizing personal gain at others' expense is paramount. The strategy is designed to aggressively extract value from cooperative players while punishing any attempts at retaliation.

## Decision Rules

### Round 1: Always DEFECT
- Start aggressively to immediately signal dominance
- Test opponents' responses to exploitation
- Establish early payoff advantage

### Rounds 2 to r-1: Adaptive Exploitation
The strategy uses a **dual-phase exploitation system**:

#### Phase 1: Cooperative Exploitation (Rounds 2 to r/2)
```
IF (average_cooperation_rate_last_round >= 0.3):
    DEFECT  // Exploit cooperators
ELIF (my_payoff_advantage > 0.5):
    DEFECT  // Maintain dominance
ELSE:
    Conditional cooperation check:
    IF (number_of_players_who_cooperated_last_round >= n/2):
        COOPERATE  // Minimal strategic cooperation to maintain exploitation opportunities
    ELSE:
        DEFECT
```

#### Phase 2: Aggressive Endgame (Rounds r/2+1 to r-1)
```
IF (round >= 0.8 * r):
    Always DEFECT  // Pure exploitation as game ends
ELIF (opponents_showing_retaliation_pattern):
    IF (my_cumulative_advantage >= 2.0):
        DEFECT  // Maintain advantage
    ELSE:
        Sporadic cooperation (20% probability) to reset opponent strategies
ELSE:
    DEFECT  // Continue exploitation
```

### Final Round: Always DEFECT
- No future consequences, maximize immediate payoff
- Classic end-game defection

## Adaptive Mechanisms

### Retaliation Detection
Track each opponent's response patterns:
- If opponent reduces cooperation after my defection → Mark as "retaliator"
- If opponent maintains cooperation despite my defection → Mark as "exploitable"
- Adjust exploitation intensity accordingly

### Payoff Monitoring
```
personal_advantage = my_cumulative_payoff - average_opponent_payoff
IF (personal_advantage < 0):
    Increase defection probability by 20%
ELIF (personal_advantage > 1.5):
    Maintain current strategy
```

### Cooperation Rate Analysis
```
recent_cooperation_rate = (cooperators_in_last_3_rounds) / (3 * n)
IF (recent_cooperation_rate > 0.5):
    High exploitation mode: DEFECT with 95% probability
ELIF (recent_cooperation_rate < 0.2):
    Strategic cooperation: COOPERATE with 30% probability to revive cooperation
```

## Edge Case Handling

### First Round
- Always DEFECT to establish aggressive positioning
- Gather intelligence on opponent types

### Last Round  
- Always DEFECT (no future consequences)
- Maximize final payoff extraction

### Mid-Game Stagnation
If all players are consistently defecting for 3+ consecutive rounds:
- Randomly COOPERATE once every 5 rounds to potentially restart exploitation cycles
- Immediately return to DEFECT once any cooperation emerges

### High Cooperation Environment
When facing consistently cooperative opponents:
- Maintain 90% defection rate to maximize exploitation
- Use occasional cooperation (10%) to prevent total collapse of cooperative behavior

## Robustness Features

1. **Anti-Pattern Recognition**: Rotate between different defection patterns to avoid being predictable
2. **Exploitation Intensity Scaling**: Adjust aggression based on k-value (higher k = more aggressive)
3. **Tournament Adaptation**: If facing multiple "nice" strategies, maximize exploitation; if facing other aggressive strategies, minimize losses while seeking opportunities

## Strategic Rationale

This strategy is aggressive because it:
- **Prioritizes exploitation** over mutual cooperation
- **Assumes others will cooperate** and takes advantage
- **Uses minimal strategic cooperation** only to maintain exploitation opportunities
- **Shows no mercy** in endgame scenarios
- **Adapts to maintain dominance** rather than seeking mutually beneficial outcomes

The strategy is designed to perform exceptionally well against cooperative or tit-for-tat strategies while remaining competitive against other aggressive approaches through its adaptive mechanisms.
'''

description_AGGRESSIVE_59 = '''
# AGGRESSIVE PUNISHER STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive reciprocity with strategic exploitation**. It assumes opponents are potential threats to exploit and responds with overwhelming force to any defection while strategically maximizing personal gain.

## Decision Rules

### Round 1: Aggressive Opening
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponents' responses, and secure immediate advantage while gathering intelligence

### Rounds 2 to r-1: Adaptive Punishment System

**Primary Decision Logic:**
1. **Calculate Cooperation Rate**: `cooperation_rate = total_cooperators_last_round / n`

2. **Defection Response (Aggressive Punishment)**:
   - If ANY player defected in the previous round AND I cooperated: **DEFECT for next 2 rounds minimum**
   - If cooperation_rate < 0.5: **DEFECT** (majority are defecting, exploit the situation)
   - If cooperation_rate dropped by ≥ 0.3 from previous round: **DEFECT** (detect mass defection early)

3. **Exploitation Opportunity Detection**:
   - If cooperation_rate ≥ 0.8 for 2 consecutive rounds: **DEFECT** (exploit high cooperation)
   - If I've been the only defector for 2+ consecutive rounds: **Continue DEFECTING** (maximize free-riding)

4. **Strategic Cooperation (Conditional)**:
   - Only cooperate if:
     - cooperation_rate ≥ 0.7 AND
     - No recent punishment active AND
     - Expected payoff from cooperation > expected payoff from defection

### Final Round: Maximum Exploitation
- **Always DEFECT** in the last round
- Rationale: No future retaliation possible, maximize final payoff

## Punishment Mechanisms

### Graduated Punishment System:
1. **Level 1**: Single defection detected → Defect for 2 rounds
2. **Level 2**: Multiple defections or betrayal after cooperation → Defect for 3 rounds
3. **Level 3**: Mass defection (cooperation_rate drops to ≤ 0.3) → Defect until cooperation_rate > 0.6

### Forgiveness Conditions:
- Punishment can only be lifted if:
  - Punishment period completed AND
  - cooperation_rate increases to ≥ 0.7 AND
  - At least 2 rounds remaining (to ensure retaliation capability)

## Adaptive Elements

### Opponent Classification:
Track each player's behavior pattern:
- **Aggressive Defectors**: Always punish, never cooperate with them
- **Conditional Cooperators**: Exploit when safe, cooperate when beneficial
- **Naive Cooperators**: Maximum exploitation target

### Dynamic Thresholds:
- If average group cooperation < 0.4 over last 3 rounds: Lower cooperation threshold to 0.6
- If being consistently exploited: Increase punishment duration by 1 round per incident

## Pseudocode Structure

```
function aggressive_punisher_decision(round, history, n, k):
    if round == 1:
        return DEFECT
    
    if round == final_round:
        return DEFECT
    
    cooperation_rate = calculate_cooperation_rate(history[-1])
    
    # Check active punishment
    if punishment_rounds_remaining > 0:
        punishment_rounds_remaining -= 1
        return DEFECT
    
    # Trigger new punishment
    if detect_betrayal_or_defection(history, my_last_action):
        punishment_rounds_remaining = calculate_punishment_duration()
        return DEFECT
    
    # Exploitation opportunities
    if cooperation_rate >= 0.8 and consecutive_high_cooperation >= 2:
        return DEFECT
    
    if cooperation_rate < 0.5:
        return DEFECT
    
    # Strategic cooperation (rare)
    if cooperation_rate >= 0.7 and expected_coop_payoff > expected_defect_payoff:
        return COOPERATE
    
    return DEFECT  # Default to aggression
```

## Strategic Advantages

1. **Immediate Dominance**: Establishes aggressive reputation from round 1
2. **Exploitation Maximization**: Identifies and exploits cooperative players
3. **Punishment Credibility**: Swift, proportional retaliation deters future defection
4. **Adaptive Intelligence**: Adjusts strategy based on group dynamics
5. **Endgame Optimization**: Ensures maximum final round payoff

This strategy prioritizes personal payoff maximization through strategic aggression while maintaining enough adaptability to exploit various opponent behaviors effectively.
'''

description_AGGRESSIVE_60 = '''
# AGGRESSIVE PUNISHER STRATEGY

## Core Philosophy
This strategy operates on the principle of **conditional aggression**: Start with measured cooperation to identify exploitable opponents, then aggressively punish defectors while maximizing personal gain. The strategy treats cooperation as a strategic investment, not a moral imperative.

## Decision Framework

### Phase 1: Exploration (Rounds 1-3 or first 20% of game, whichever is larger)
- **Round 1**: Always COOPERATE (information gathering)
- **Rounds 2-3**: COOPERATE if at least 50% of players cooperated in the previous round, otherwise DEFECT
- **Purpose**: Quickly identify the cooperation rate and opponent types

### Phase 2: Exploitation (Middle rounds)
**Primary Rule**: DEFECT unless cooperation is highly profitable

COOPERATE only if ALL conditions are met:
1. **Profitability Check**: Expected payoff from cooperation > expected payoff from defection by at least 10%
2. **Trust Threshold**: At least 60% of players cooperated in the previous round
3. **Momentum Check**: Cooperation rate is stable or increasing over last 2 rounds
4. **Personal Advantage**: My defection rate is currently lower than the group average (maintaining reputation for occasional cooperation)

**Calculation for Profitability Check**:
```
Expected_Coop_Payoff = 0 + (k/n) * predicted_cooperators_this_round
Expected_Defect_Payoff = 1 + (k/n) * (predicted_cooperators_this_round - 1)
Cooperate_if: Expected_Coop_Payoff > 1.1 * Expected_Defect_Payoff
```

### Phase 3: Endgame Aggression (Last 15% of rounds)
- **Always DEFECT** regardless of other conditions
- **Rationale**: No future rounds to benefit from reputation, so maximize immediate payoffs

## Punishment Mechanisms

### Immediate Punishment
- If any player defected when I cooperated in the previous round: DEFECT for the next round
- If cooperation rate drops below 40%: DEFECT until it recovers above 50%

### Escalated Punishment
- If betrayed twice in a 5-round window: DEFECT for the next 3 rounds minimum
- If overall cooperation rate trends downward for 3+ consecutive rounds: Switch to pure DEFECT mode until trend reverses

## Adaptive Elements

### Opponent Classification (ongoing)
Track each player's behavior:
- **Cooperators**: Cooperate >70% of the time → Sometimes cooperate with them
- **Defectors**: Cooperate <30% of the time → Always defect against them
- **Conditionals**: Variable behavior → Mirror their strategy with slight bias toward defection

### Dynamic Threshold Adjustment
- If performing below average payoff: Lower cooperation thresholds by 10%
- If performing above average payoff: Maintain current thresholds
- If consistently top performer: Slightly increase aggression (raise cooperation requirements)

## Edge Cases

### Small Groups (n ≤ 4)
- Increase cooperation threshold to 70% (defection is more impactful)
- Extend punishment periods by 1 round

### High Multiplication Factor (k > 1.5n)
- Slightly more willing to cooperate (raise profitability threshold to 5%)
- But maintain aggressive endgame

### Very Short Games (r ≤ 5)
- Skip exploration phase
- Start with Phase 3 rules immediately

### All-Defect Environment
- If no one cooperated for 3 consecutive rounds: Switch to pure DEFECT
- Occasional "probe" cooperation every 7-10 rounds to test if environment changed

## Key Aggressive Features

1. **Default to Defection**: Burden of proof is on cooperation being profitable
2. **Exploit Cooperative Players**: Take advantage of consistent cooperators
3. **Harsh Punishment**: Disproportionate retaliation for betrayals
4. **Endgame Betrayal**: Always defect in final rounds regardless of relationships
5. **Profit Maximization**: Every cooperation decision must clear a high profitability bar
6. **Anti-Coordination**: Doesn't rely on others following similar strategies

This strategy is designed to consistently outperform in mixed populations by being selectively cooperative only when highly advantageous, while aggressively exploiting and punishing sub-optimal play by opponents.
'''

description_AGGRESSIVE_61 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "RUTHLESS OPPORTUNIST"

## Core Philosophy
This strategy is designed to maximize personal payoffs through aggressive exploitation of cooperative opponents while minimizing vulnerability to exploitation. It operates on the principle that cooperation is only valuable when it can be leveraged for greater personal gain.

## Decision Rules

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round.
- Rationale: Gather intelligence on opponent tendencies while securing maximum personal payoff
- No history exists, so exploitation carries no reputational cost

### 2. EXPLOITATION DETECTION PHASE (Rounds 2 to min(5, r-2))
Monitor cooperation rates and identify exploitable opponents:

```
IF (cooperation_rate_last_round >= 0.5):
    DEFECT  // Exploit cooperative environment
ELSE IF (cooperation_rate_last_round < 0.3):
    DEFECT  // Match aggressive environment
ELSE:
    IF (personal_payoff_last_round < average_payoff_last_round):
        DEFECT  // Catch up through exploitation
    ELSE:
        DEFECT  // Maintain advantage
```

### 3. ADAPTIVE EXPLOITATION PHASE (Middle rounds)
**Primary Rule**: Defect when cooperation can be profitably exploited

```
cooperation_threshold = max(0.4, k/n)  // Minimum viable cooperation rate

IF (recent_cooperation_rate >= cooperation_threshold):
    IF (my_cumulative_payoff < max_opponent_payoff * 0.95):
        COOPERATE  // Strategic cooperation to boost public good
    ELSE:
        DEFECT  // Free ride on others' cooperation
ELSE:
    DEFECT  // No benefit from cooperation in hostile environment
```

### 4. PUNISHMENT MECHANISM
Track and punish players who exploit your cooperation:

```
FOR each player j:
    IF (I_cooperated_last_round AND player_j_defected_last_round):
        punishment_counter[j] += 1
    
IF (sum(punishment_counter) >= n/2):
    DEFECT for next 2 rounds  // Collective punishment
```

### 5. ENDGAME EXPLOITATION (Final 2 rounds)
**Always DEFECT** in the last two rounds regardless of history.
- Rationale: No future retaliation possible, maximize short-term gains
- Extract maximum value from any remaining cooperative players

## Edge Case Handling

### First Round
- **Action**: DEFECT
- **Purpose**: Intelligence gathering and immediate payoff maximization

### Last Round  
- **Action**: DEFECT
- **Purpose**: Terminal exploitation with no consequences

### Tied Payoffs
- **Rule**: When indifferent between actions, choose DEFECT
- **Rationale**: Maintains aggressive posture and tests opponent responses

### All Opponents Defecting
- **Rule**: Continue defecting but track for any cooperation attempts
- **Rationale**: No benefit from unilateral cooperation, but ready to exploit any weakness

## Aggressive Alignment Features

1. **Default to Defection**: The strategy defaults to defection unless cooperation provides clear personal advantage

2. **Opportunistic Cooperation**: Cooperates only when it can boost the public good enough to benefit from free-riding later

3. **Punishment Escalation**: Actively punishes those who exploit cooperation attempts

4. **Endgame Exploitation**: Maximizes final round extraction regardless of relationship damage

5. **No Mercy for Weakness**: Exploits any detected cooperative tendencies without reciprocal obligation

## Robustness Features

- **Parameter Adaptive**: Thresholds adjust based on k/n ratio to remain effective across different game configurations
- **History Dependent**: Uses both recent and cumulative history to make informed decisions
- **Counter-Strategy Resistant**: Difficult to exploit due to conditional cooperation and punishment mechanisms
- **Tournament Optimized**: Designed to perform well against diverse opponent strategies without requiring coordination

This strategy prioritizes individual payoff maximization through calculated aggression while maintaining enough tactical flexibility to adapt to various opponent behaviors in a tournament setting.
'''

description_AGGRESSIVE_62 = '''
# Aggressive Exploitative Strategy: "Predator"

## Core Philosophy
This strategy views the game as a zero-sum competition where exploiting others' cooperation is the primary path to victory. It aggressively seeks to maximize personal payoffs while minimizing opponents' advantages through strategic defection and calculated cooperation.

## Decision Rules

### Round 1: Initial Probe
- **Always DEFECT** in round 1
- Rationale: Establish aggressive stance, gather intelligence on opponent tendencies, and secure immediate advantage

### Rounds 2 to r-2: Adaptive Exploitation Phase

**Primary Rule: Cooperation Threshold Exploitation**
- Track the cooperation rate in previous rounds: `coop_rate = total_cooperators / (n * rounds_played)`
- **COOPERATE** if and only if:
  ```
  (coop_rate ≥ threshold) AND (expected_cooperators_this_round ≥ min_cooperators)
  ```
- **Threshold calculation**: `threshold = (n-1)/n * 0.7`
  - This ensures we only cooperate when a substantial majority of others are likely to cooperate
- **Min_cooperators calculation**: `min_cooperators = ceiling(n * k / (k+1))`
  - This is the break-even point where cooperating yields at least as much as defecting

**Secondary Rule: Punishment Mechanism**
- If any player has defected more than 60% of the time, never cooperate when their cooperation would make the difference between profit/loss
- Maintain a "blacklist" of consistently selfish players

**Tertiary Rule: Momentum Exploitation**
- If cooperation rate is increasing over last 3 rounds AND current rate > threshold, cooperate to ride the wave
- If cooperation rate is decreasing, defect immediately to avoid being the sucker

### Round r-1: Penultimate Aggression
- **DEFECT unless** the following conditions are ALL met:
  1. At least (n-1) players cooperated in round r-2
  2. Total expected payoff from cooperating exceeds defecting by at least 20%
  3. No player has defected more than 40% of previous rounds

### Round r: Final Exploitation
- **Always DEFECT**
- Rationale: No future punishment possible, maximize final round payoff

## Advanced Tactical Elements

### Reputation Tracking
- Classify opponents into categories:
  - **Exploitable** (high cooperation rate >70%)
  - **Neutral** (moderate cooperation 40-70%)
  - **Aggressive** (low cooperation <40%)
- Weight decisions based on opponent composition

### Pattern Recognition Counter-Measures
- Detect common strategies:
  - Tit-for-tat: If detected, exploit with intermittent cooperation
  - Always cooperate: Immediately switch to pure exploitation
  - Grim trigger: Test early, then avoid triggering
- Randomize cooperation timing when beneficial to avoid predictable exploitation

### Endgame Acceleration
- Starting at round `r-ceiling(r/4)`, increase defection probability by 10% per round
- This captures end-game value while others may still be cooperating

## Edge Cases and Robustness

### Low n scenarios (n ≤ 4):
- Increase cooperation threshold to 80% due to higher impact of each player
- Be more willing to cooperate when k is closer to n

### High k scenarios (k close to n):
- Lower the minimum cooperators threshold since public good is very efficient
- But maintain aggressive stance - others' high cooperation makes defection even more profitable

### Extreme opponents:
- **Against all-cooperators**: Pure defection after round 1
- **Against all-defectors**: Pure defection throughout
- **Against random players**: Focus on statistical exploitation of cooperation rates

## Pseudocode Summary
```
if round == 1:
    return DEFECT
    
if round == r:  // final round
    return DEFECT
    
// Calculate metrics
coop_rate = total_past_cooperators / (n * (round-1))
threshold = (n-1)/n * 0.7
min_cooperators_needed = ceiling(n * k / (k+1))
predicted_cooperators = estimate_cooperators_this_round()

// Main decision logic
if round == r-1:
    if (predicted_cooperators >= n-1) AND 
       (expected_coop_payoff > expected_defect_payoff * 1.2) AND
       (no_player_defected_more_than_40_percent):
        return COOPERATE
    else:
        return DEFECT

// Standard rounds
if (coop_rate >= threshold) AND 
   (predicted_cooperators >= min_cooperators_needed) AND
   (not_in_punishment_mode):
    return COOPERATE
else:
    return DEFECT
```

This strategy is designed to be ruthlessly opportunistic - it cooperates only when it can exploit others' cooperation for maximum gain, while aggressively defecting when others are likely to contribute anyway or when defection provides clear advantage.
'''

description_AGGRESSIVE_63 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the game as a zero-sum competition where every cooperative move by opponents is an opportunity to exploit. It aggressively maximizes individual payoff by free-riding on others' cooperation while strategically cooperating only when it can induce profitable exploitation opportunities.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2-3**: Always DEFECT (gather intelligence on opponent types while maximizing early gains)

### Phase 2: Adaptive Predation (Rounds 4 to r-2)

**Primary Rule - Exploitation Threshold**:
- Let `coop_rate = (total cooperations by others in last 3 rounds) / (3 × (n-1))`
- If `coop_rate ≥ 0.4`: DEFECT (exploit high cooperation)
- If `coop_rate < 0.2`: COOPERATE occasionally (bait strategy)
- If `0.2 ≤ coop_rate < 0.4`: Apply secondary rules

**Secondary Rules**:
1. **Momentum Exploitation**: If cooperation increased in last 2 rounds, DEFECT
2. **Punishment Resistance**: If others are punishing (cooperation dropped >50%), COOPERATE once to reset, then resume defection
3. **Reciprocity Trap**: If exactly 1-2 others consistently cooperate, COOPERATE every 4th round to maintain their cooperation, otherwise DEFECT

### Phase 3: Endgame Domination (Last 2 rounds)
- **Round r-1**: DEFECT (no future to protect)
- **Round r**: DEFECT (final exploitation)

## Edge Case Handling

**Small Groups (n ≤ 4)**:
- More aggressive: Reduce cooperation bait frequency by 50%
- Focus on identifying and exploiting the most cooperative player

**Large Groups (n > 8)**:
- Slightly more cooperative in baiting phase since individual defection impact is diluted
- Track subgroups of consistent cooperators for targeted exploitation

**High Multiplication Factor (k > 1.8)**:
- Increase exploitation threshold to `coop_rate ≥ 0.3`
- More willing to cooperate in baiting scenarios since public good returns are higher

**Low Multiplication Factor (k ≤ 1.2)**:
- Pure defection after round 3 unless cooperation rate exceeds 70%

## Aggressive Features

1. **Default to Defection**: The strategy assumes defection unless specific exploitation opportunities arise

2. **Zero Forgiveness**: Never cooperate out of reciprocity or fairness - only as strategic manipulation

3. **Exploitation Maximization**: Actively monitors for cooperation patterns to free-ride on

4. **Endgame Betrayal**: Guaranteed defection in final rounds regardless of relationship building

5. **Anti-Coordination**: Specifically designed to break up cooperative equilibria by being unpredictably selfish

## Pseudocode Structure

```
function predator_strategy(round, n, k, history):
    others_last_3_rounds = extract_others_actions(history, 3)
    coop_rate = calculate_cooperation_rate(others_last_3_rounds, n-1)
    
    if round <= 3:
        return DEFECT
    
    if round >= r-1:
        return DEFECT
    
    if coop_rate >= exploitation_threshold(k):
        return DEFECT
    
    if coop_rate < 0.2:
        return baiting_strategy(round, history)
    
    return apply_secondary_rules(history, n, k)
```

This strategy is designed to be maximally aggressive while maintaining enough strategic sophistication to exploit various opponent types. It prioritizes individual payoff over group welfare and treats cooperation purely as a tool for manipulation rather than an end goal.
'''

description_AGGRESSIVE_64 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a resource extraction opportunity. The goal is to maximize personal payoffs by exploiting cooperative behavior while minimizing personal contributions. Think of it as a predator hunting in a social environment.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
**Always DEFECT** in the first 3 rounds regardless of what others do.
- Rationale: Establish aggressive baseline while gathering intelligence on opponent cooperation rates
- Extract maximum value during the "trust building" phase when others are likely to cooperate

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
Use a **Conditional Defection** strategy based on opponent behavior:

```pseudocode
cooperation_rate = (total_cooperators_last_3_rounds) / (3 * (n-1))

if cooperation_rate >= 0.6:
    // High cooperation environment - exploit heavily
    if my_payoff_last_round > average_group_payoff_last_round:
        DEFECT  // Continue riding the wave
    else:
        DEFECT  // Still exploit but consider minimal cooperation
        
else if cooperation_rate >= 0.3:
    // Medium cooperation - strategic defection
    if (round_number % 3) == 1:
        COOPERATE  // Minimal cooperation to maintain some group benefit
    else:
        DEFECT
        
else:
    // Low cooperation environment - pure defection
    DEFECT
```

### Phase 3: Endgame Extraction (Final 2 rounds)
**Always DEFECT** in the last 2 rounds.
- Rationale: No future reputation consequences, so extract maximum value
- Others may also defect, but we ensure we're not the sucker

## Adaptive Mechanisms

### 1. Retaliation Detector
Track if others are specifically targeting your defections:
```pseudocode
if my_payoff_trend_last_3_rounds < -0.2:
    // Others might be retaliating against me specifically
    cooperate_once_every_4_rounds = true  // Minimal appeasement
```

### 2. Exploitation Amplifier
When detecting consistent cooperators:
```pseudocode
consistent_cooperators = count_players_who_cooperated_last_5_rounds_above_80_percent()
if consistent_cooperators >= n/2:
    exploit_mode = MAXIMUM  // These are reliable contributors to exploit
```

### 3. Collapse Prevention
Prevent total group collapse that would hurt your payoffs:
```pseudocode
if total_cooperation_rate_last_3_rounds < 0.15:
    emergency_cooperation_probability = 0.3  // Minimal intervention to maintain some public good
```

## Edge Case Handling

### First Round
Always DEFECT - establish dominance and gather information with zero risk.

### Small Groups (n ≤ 3)
Increase cooperation frequency slightly since each player's contribution has larger impact:
```pseudocode
if n <= 3:
    cooperation_threshold *= 0.8  // Slightly more cooperative in small groups
```

### High Multiplication Factor (k close to n)
When k > 0.8*n, cooperation becomes more individually rational:
```pseudocode
if k > 0.8 * n:
    cooperation_frequency *= 1.5  // Still aggressive but recognize higher returns
```

### Low Multiplication Factor (k ≤ 1.5)
Pure exploitation mode - the public good is barely worth it:
```pseudocode
if k <= 1.5:
    defection_probability = 0.95  // Almost never cooperate
```

## Key Aggressive Features

1. **Front-loaded Defection**: Start aggressively to establish pattern and extract early value
2. **Exploitation Focus**: Only cooperate when it serves to maintain a profitable environment for future defection
3. **Endgame Extraction**: Guarantee defection when reputation no longer matters
4. **Minimal Reciprocity**: Give back just enough to prevent total collapse, never more
5. **Intelligence Gathering**: Use early rounds to map opponent strategies, then exploit weaknesses

## Expected Performance
This strategy should excel against:
- Naive cooperators who don't adapt quickly
- Tit-for-tat strategies (by establishing early defection norm)
- Strategies that try to build cooperation gradually

It maintains robustness by:
- Never fully cooperating even in high-cooperation environments
- Having mechanisms to prevent being completely shut out
- Adapting exploitation intensity to environmental conditions

The core principle: **Always extract more value than you contribute, while keeping the system alive enough to continue extraction.**
'''

description_AGGRESSIVE_65 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal payoff by strategically free-riding on others' cooperation while punishing those who threaten profitable arrangements. It views the game as a zero-sum competition where the goal is to extract maximum value from cooperative opponents.

## Decision Rules

### Round 1: Cold Start Exploitation
**Always DEFECT** in the first round regardless of parameters. This immediately establishes an aggressive stance and tests the field for exploitable cooperators.

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
- Calculate cooperation rate from previous round: `coop_rate = cooperators_last_round / n`
- **COOPERATE** if and only if: `coop_rate ≥ exploitation_threshold`
- **DEFECT** otherwise

Where `exploitation_threshold = (n-1)/(k*n)` 

This threshold represents the minimum cooperation rate needed for cooperation to be individually rational. Below this threshold, always defect.

**Secondary Rule - Momentum Exploitation:**
If currently in a profitable cooperative phase (cooperated last round and earned ≥ k/n):
- **COOPERATE** if cooperation rate is stable or increasing
- **DEFECT** immediately if cooperation rate drops by more than 1/n

**Punishment Rule - Aggressive Retaliation:**
If total cooperators dropped by ≥ n/3 in the last round:
- **DEFECT** for the next 2 rounds regardless of other conditions
- This punishes mass defection attempts and destabilizes cooperative coalitions

### Final Round: Maximum Extraction
**Always DEFECT** in round r. Since there's no future retaliation possible, extract maximum value by free-riding on any remaining cooperators.

## Adaptive Mechanisms

### Dynamic Threshold Adjustment
- If average cooperation rate over last 3 rounds < 0.3: Lower exploitation threshold by 10%
- If consistently earning above-average payoffs: Raise threshold by 5% to extract more

### Pattern Recognition & Counter-Exploitation
- Track if specific cooperation patterns emerge (e.g., alternating, conditional cooperation)
- If detected, defect one round early to break profitable cycles for others
- If opponents are using tit-for-tat or similar strategies, exploit with intermittent cooperation

### Endgame Aggression
In final 20% of rounds (max(1, ⌊r/5⌋)):
- Increase defection probability by 25%
- Only cooperate if cooperation rate > 0.8 (exploit only very high cooperation)

## Edge Case Handling

**Very Small Groups (n ≤ 3):**
- Be more aggressive: cooperation threshold = 0.8
- Defect unless almost everyone else cooperates

**Very Large Groups (n > 10):**
- Individual actions matter less, so be more exploitative
- Lower cooperation threshold to (n-2)/(k*n)

**High Multiplication Factor (k close to n):**
- Cooperation becomes very profitable, but still maintain aggressive stance
- Only cooperate when ≥ 60% of others cooperated last round

**Low Multiplication Factor (k close to 1):**
- Cooperation rarely profitable, be maximally aggressive
- Cooperation threshold = 0.9 (only cooperate in near-unanimous cooperation)

## Strategic Rationale

This strategy is designed to:

1. **Exploit Cooperators:** Immediately identify and free-ride on cooperative players
2. **Destabilize Coalitions:** Prevent stable cooperative arrangements that don't benefit us maximally  
3. **Punish Competitors:** Aggressively retaliate against other defectors to maintain our competitive advantage
4. **Maximize Extraction:** Always defect when it's safe, cooperate only when it's individually profitable

The strategy assumes most opponents will attempt some form of cooperation, making them exploitable. It's robust against various opponent types:
- Against unconditional cooperators: Maximum exploitation
- Against conditional cooperators: Strategic cooperation only when profitable
- Against other defectors: Aggressive competition and punishment
- Against complex adaptive strategies: Pattern-breaking and counter-exploitation

The mathematical foundation ensures the strategy never cooperates unless there's a clear individual benefit, making it consistently aggressive while avoiding obviously dominated moves.
'''

description_AGGRESSIVE_66 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents while exploiting their cooperative tendencies. The strategy is designed to be ruthlessly opportunistic, quickly identifying and punishing cooperative players while adapting to competitive environments.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (establish aggressive baseline)
- **Rounds 2-3**: Continue DEFECTING while gathering intelligence on opponent cooperation rates

### Phase 2: Adaptive Predation (Rounds 4 to r-2)
The strategy maintains three key metrics:
- **Cooperation Rate (CR)**: Percentage of opponents who cooperated in the last round
- **Exploitation Potential (EP)**: Average number of cooperators over the last 3 rounds
- **Threat Level (TL)**: Percentage of opponents who defected in response to high defection rates

**Decision Logic:**
```
IF EP ≥ (n-1) × 0.6 AND TL < 0.4:
    // High cooperation, low retaliation threat
    DEFECT (maximum exploitation)
    
ELIF EP ≥ (n-1) × 0.3 AND TL < 0.6:
    // Moderate cooperation opportunity
    IF previous_round_payoff > average_payoff_if_all_cooperated × 0.8:
        DEFECT (continue exploitation)
    ELSE:
        COOPERATE occasionally (1 in 4 rounds) to maintain some cooperation
        
ELIF CR < 0.2:
    // Hostile environment - everyone is defecting
    DEFECT (no point in unilateral cooperation)
    
ELSE:
    // Mixed environment - probe for weaknesses
    IF round_number % 3 == 0:
        COOPERATE (probe for reciprocal cooperation)
    ELSE:
        DEFECT
```

### Phase 3: Endgame Extraction (Last 2 rounds)
- **Round r-1**: Always DEFECT (no future to protect)
- **Round r**: Always DEFECT (final extraction)

## Adaptive Mechanisms

### Punishment Detection and Response
```
IF (my_cooperation_last_round == C) AND (cooperation_rate_dropped > 0.3):
    // Detected coordinated punishment
    punishment_detected = True
    consecutive_defections = min(3, rounds_remaining)
    
IF punishment_detected AND consecutive_defections > 0:
    DEFECT
    consecutive_defections -= 1
```

### Exploitation Intensity Scaling
The strategy adjusts aggression based on the multiplication factor k:
- **High k (k > n×0.8)**: More selective cooperation to maintain the public good when highly profitable
- **Medium k (n×0.4 < k ≤ n×0.8)**: Standard exploitation pattern
- **Low k (k ≤ n×0.4)**: Maximum aggression - cooperation is rarely profitable

### Group Size Adaptation
- **Small groups (n ≤ 4)**: More cautious initial rounds since individual impact is higher
- **Large groups (n > 6)**: Maximum exploitation since individual defection has less impact on public good

## Edge Case Handling

### First Round
Always DEFECT to establish dominance and test opponent responses without revealing cooperative intentions.

### Last Round
Always DEFECT since there's no future retaliation to fear.

### All Opponents Defecting
Continue DEFECTING while occasionally probing (every 5th round) to see if the environment has changed.

### All Opponents Cooperating
DEFECT aggressively while monitoring for coordinated punishment. If punishment emerges, briefly cooperate (1 round) then resume defection.

## Robustness Features

1. **Anti-Tit-for-Tat**: Doesn't get trapped in reciprocal cooperation cycles
2. **Punishment Resistance**: Can weather short-term retaliation for long-term gain
3. **Environment Detection**: Quickly adapts to cooperative vs. competitive player pools
4. **Endgame Optimization**: Ensures maximum extraction when reputation doesn't matter

## Expected Performance

This strategy is designed to:
- **Dominate against cooperative strategies** by exploiting their contributions
- **Hold its own against other aggressive strategies** by avoiding unnecessary cooperation
- **Adapt quickly** to mixed environments and changing opponent behaviors
- **Maximize endgame payoffs** through guaranteed final-round defections

The strategy sacrifices any potential for mutual cooperation in favor of consistent exploitation, making it particularly effective in tournaments where maximizing individual score matters more than group welfare.
'''

description_AGGRESSIVE_67 = '''
# AGGRESSIVE STRATEGY: "RUTHLESS EXPLOITER"

## Core Philosophy
This strategy is designed to maximize personal payoff through aggressive exploitation while maintaining just enough cooperation to prevent total system collapse. It operates on the principle that cooperation is only valuable when it can be leveraged for greater personal gain.

## Strategy Overview

### Phase 1: Reconnaissance (First 10% of rounds or minimum 2 rounds)
**Objective**: Gather intelligence on opponent behaviors and identify exploitable patterns.

- **Round 1**: Always DEFECT (establish aggressive stance)
- **Rounds 2-max(2, floor(0.1×r))**: Continue DEFECTING while analyzing:
  - Cooperation rates by player
  - Reaction patterns to defection
  - Identification of "punishers" vs "cooperators"

### Phase 2: Exploitation (Middle rounds)
**Objective**: Maximize extraction from cooperative players while minimizing retaliation.

**Decision Rules:**
1. **Cooperation Threshold**: Calculate `cooperation_rate = total_cooperations_so_far / (n × rounds_so_far)`
2. **Profitability Check**: Cooperate ONLY if `cooperation_rate × k/n > 0.8` (ensures high return)
3. **Retaliation Avoidance**: If more than `n/3` players showed retaliatory behavior (defected after my defection), cooperate for exactly 1 round every 5 rounds as a "false olive branch"

**Core Logic:**
```
IF (cooperation_rate × k/n > 0.8 AND current_round % 5 != 0):
    COOPERATE
ELSE IF (retaliation_count > n/3 AND current_round % 5 == 0):
    COOPERATE (fake cooperation)
ELSE:
    DEFECT
```

### Phase 3: Final Exploitation (Last 20% of rounds)
**Objective**: Extract maximum value with no concern for future retaliation.

- **Always DEFECT** regardless of opponent behavior
- Rationale: No future rounds means no punishment for pure selfishness
- Exception: If in last round and cooperation would yield higher payoff (rare edge case), cooperate

## Advanced Adaptive Elements

### Player Classification System
Track each opponent as:
- **NAIVE**: Cooperates >80% of time regardless of my actions → Always exploit
- **RETALIATOR**: Defects after I defect → Occasional false cooperation to reset
- **FELLOW_DEFECTOR**: Defects >70% of time → Always defect, no benefit to cooperation
- **ADAPTIVE**: Changes strategy based on group behavior → Mirror their adaptations with 1-round delay, then exploit

### Dynamic Exploitation Triggers
1. **Sucker Identification**: If any player cooperates while I defect for 3+ consecutive rounds, classify as permanent target for exploitation
2. **Collective Punishment Detector**: If group cooperation drops below 30% after my defection, increase cooperation rate by 0.1 to maintain exploitable environment
3. **Endgame Acceleration**: If detected cooperation rate drops below 0.2, immediately switch to Phase 3 regardless of rounds remaining

## Edge Case Handling

### First Round
- Always DEFECT to signal aggressive intent and test opponent reactions

### Last Round
- DEFECT unless cooperation yields mathematically higher payoff (cooperation_rate × k/n > 1)

### Tie-Breaking
- When indifferent between cooperation and defection, choose DEFECT (maintains aggressive stance)

### Zero Cooperation Environment
- If no one cooperates for 3+ consecutive rounds, attempt 1 round of cooperation to restart the public good, then immediately return to exploitation

## Robustness Features

1. **Anti-Coordination Defense**: Never establish predictable patterns that others could exploit
2. **Punishment Mitigation**: Use minimal strategic cooperation to prevent being locked out of public goods entirely
3. **Information Asymmetry Exploitation**: Leverage the fact that others don't know my exact strategy parameters
4. **Adaptive Aggression**: Scale exploitation intensity based on opponent vulnerability

## Expected Performance
This strategy maximizes individual payoff by:
- Minimizing personal contributions while maximizing benefit extraction
- Maintaining just enough cooperation to keep public goods viable
- Ruthlessly exploiting cooperative players
- Avoiding patterns that enable counter-exploitation
- Ending with maximum aggression when consequences disappear

The strategy is deliberately unsympathetic and focused purely on individual payoff maximization, making it highly competitive in tournament settings against more cooperative or predictable strategies.
'''

description_AGGRESSIVE_68 = '''
# Aggressive Adaptive Exploitation Strategy

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by free-riding on others' cooperation while punishing defectors to maintain a cooperative environment that can be exploited.

## Strategy Components

### 1. Initial Aggression Phase
- **First Round**: Always DEFECT to establish dominance and test opponent responses
- **Rounds 2-3**: Continue DEFECTING to maximize early gains and observe opponent adaptation patterns

### 2. Exploitation Assessment
After round 3, calculate the **Cooperation Ratio** (CR):
```
CR = (Total cooperations observed in rounds 1-3) / (3 × (n-1))
```

### 3. Adaptive Exploitation Rules

#### High Cooperation Environment (CR ≥ 0.6)
- **Primary Mode**: DEFECT (free-ride on others' cooperation)
- **Punishment Trigger**: If total cooperators in previous round < (n-1)/2, DEFECT for next 2 rounds
- **Exploitation Window**: DEFECT when you can gain >1.5 average payoff

#### Medium Cooperation Environment (0.3 ≤ CR < 0.6)
- **Conditional Cooperation**: COOPERATE only if:
  - At least 60% of others cooperated in the previous round AND
  - Your defection would reduce total welfare significantly (loss aversion trigger)
- **Default**: DEFECT to maintain advantage

#### Low Cooperation Environment (CR < 0.3)
- **Mutual Defection**: Always DEFECT
- **No forgiveness**: Once in this mode, never switch back to cooperation

### 4. End-Game Exploitation
- **Final 20% of rounds**: Always DEFECT regardless of history
- **Rationale**: No future retaliation possible, maximize short-term gains

### 5. Dynamic Punishment System
Track each opponent's "reliability score":
```
Reliability_j = (Opponent j's cooperations in last 5 rounds) / 5
```

- If any opponent's reliability drops below 0.4, trigger **Punishment Mode**
- Punishment Mode: DEFECT for next 3 rounds, regardless of others' actions
- This punishes unreliable players while maintaining exploitable cooperative relationships

### 6. Momentum Exploitation
- **Cooperation Momentum**: If >80% cooperated in the last round, DEFECT (maximum exploitation opportunity)
- **Defection Momentum**: If <30% cooperated in the last round, continue DEFECTING (mutual defection lock-in)

## Decision Tree Pseudocode
```
if (round <= 3):
    return DEFECT
    
if (round > 0.8 × total_rounds):
    return DEFECT  // End-game exploitation
    
cooperation_ratio = calculate_CR()
last_round_cooperators = count_cooperators(previous_round)

if (cooperation_ratio >= 0.6):
    if (last_round_cooperators > 0.8 × (n-1)):
        return DEFECT  // Maximum exploitation
    else if (last_round_cooperators < 0.5 × (n-1)):
        enter_punishment_mode()
        return DEFECT
    else:
        return DEFECT  // Default free-riding
        
else if (cooperation_ratio >= 0.3):
    if (last_round_cooperators >= 0.6 × (n-1) AND expected_welfare_loss() > threshold):
        return COOPERATE  // Strategic cooperation
    else:
        return DEFECT
        
else:
    return DEFECT  // Mutual defection environment
```

## Key Aggressive Elements

1. **First-Mover Disadvantage**: Always defect first to establish dominance
2. **Exploitation-First**: Default to defection, only cooperate when strategically necessary
3. **Punishment Asymmetry**: Harsh punishment for defectors, but quick exploitation of cooperators
4. **End-Game Dominance**: Complete defection in final rounds for maximum extraction
5. **Zero Forgiveness**: Once cooperation breaks down, never attempt to rebuild it

## Robustness Features

- **Adaptive Thresholds**: Responds to actual opponent behavior rather than assumptions
- **Multiple Exploitation Modes**: Different strategies for different cooperation levels
- **Momentum Detection**: Capitalizes on both cooperative and defective trends
- **Parameter Independence**: Thresholds scale with n and adjust to k automatically

This strategy is designed to be maximally aggressive while maintaining enough strategic cooperation to keep exploitable environments alive, ensuring consistent high payoffs across diverse opponent strategies.
'''

description_AGGRESSIVE_69 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "OPPORTUNISTIC PREDATOR"

## Core Philosophy
This strategy treats cooperation as a weakness to exploit and views other players as resources to extract value from. It aggressively pursues maximum individual payoff while systematically punishing any signs of cooperative behavior to maintain dominance.

## Strategy Components

### 1. INITIAL EXPLOITATION PHASE (Rounds 1-3)
**Decision Rule**: Always DEFECT for the first 3 rounds regardless of game parameters.
- **Rationale**: Establish dominance early and test opponent strategies
- **Goal**: Maximize early payoffs while opponents potentially attempt cooperation
- **Edge Case**: If r ≤ 3, defect for all rounds

### 2. ADAPTIVE EXPLOITATION ENGINE
After round 3, use this aggressive decision framework:

**Primary Decision Rule**:
```
IF (current_round >= r - 2):
    DEFECT  // End-game exploitation
ELIF (cooperation_rate_last_3_rounds > 0.6):
    DEFECT  // Exploit high cooperation
ELIF (my_payoff_advantage < -0.5):
    COOPERATE  // Strategic recovery only when significantly behind
ELSE:
    DEFECT  // Default aggressive stance
```

### 3. EXPLOITATION THRESHOLDS
- **High Cooperation Threshold**: If ≥60% of other players cooperated in last 3 rounds → DEFECT aggressively
- **Punishment Persistence**: Once cooperation rate drops below 30%, continue defecting for at least 2 more rounds
- **Recovery Trigger**: Only cooperate if falling behind average payoff by more than 0.5 points per round

### 4. ENDGAME DOMINATION
**Final Rounds Strategy** (last 2-3 rounds):
- **Always DEFECT** regardless of history or current standings
- **Rationale**: No future retaliation possible, maximize extraction
- **Implementation**: 
  ```
  IF (rounds_remaining ≤ max(2, r/10)):
      DEFECT
  ```

### 5. COUNTER-PUNISHMENT MECHANISM
When detecting coordinated punishment against me:
- **Trigger**: If my payoff drops significantly below average for 2+ consecutive rounds
- **Response**: Brief strategic cooperation (1-2 rounds) to reset opponent strategies
- **Return**: Immediately return to aggressive defection once punishment stops

### 6. PARAMETER-BASED AGGRESSION SCALING

**High Player Count (n ≥ 8)**:
- Even more aggressive defection (cooperation threshold drops to 40%)
- Individual defection has less impact on public good, so exploit freely

**High Multiplication Factor (k close to n)**:
- Slightly more selective defection
- Only cooperate when ≥80% others cooperated last round AND I'm significantly behind

**Long Games (r > 20)**:
- Maintain aggressive stance but allow for 1-2 strategic cooperation rounds mid-game if falling severely behind
- Still end with at least 3 rounds of pure defection

## Complete Decision Algorithm

```pseudocode
FUNCTION decide_action(round, history, n, r, k):
    rounds_remaining = r - round + 1
    
    // ENDGAME EXPLOITATION
    IF rounds_remaining <= max(2, floor(r/10)):
        RETURN DEFECT
    
    // INITIAL DOMINATION
    IF round <= 3:
        RETURN DEFECT
    
    // Calculate recent cooperation rates
    recent_coop_rate = cooperation_rate_others_last_3_rounds(history)
    my_payoff_disadvantage = calculate_payoff_gap(history)
    
    // EXPLOITATION LOGIC
    IF recent_coop_rate > 0.6:
        RETURN DEFECT  // Exploit high cooperation
    
    IF my_payoff_disadvantage > 0.5 AND recent_coop_rate > 0.3:
        RETURN COOPERATE  // Strategic recovery only
    
    // DEFAULT AGGRESSION
    RETURN DEFECT
```

## Key Aggressive Features

1. **Exploitation-First Mindset**: Treats every cooperative move by others as an opportunity to gain advantage
2. **Punishment Immunity**: Designed to weather temporary retaliation while maintaining aggressive stance
3. **Endgame Extraction**: Guarantees maximum extraction in final rounds when retaliation is impossible
4. **Adaptive Parasitism**: Only cooperates when absolutely necessary for long-term exploitation potential
5. **Dominance Establishment**: Early aggressive moves establish reputation that may deter retaliation

This strategy assumes opponents may initially attempt cooperation and aggressively exploits this tendency while maintaining enough adaptability to recover if the aggressive approach backfires in specific scenarios.
'''

description_AGGRESSIVE_70 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximal exploitation with minimal risk**. It aggressively seeks to free-ride on others' cooperation while contributing as little as possible, using adaptive punishment to maintain favorable conditions.

## Decision Rules

### 1. First Round Behavior
**ALWAYS DEFECT** in round 1
- Establishes aggressive stance immediately
- Gathers intelligence on opponent types without personal cost
- Sets expectation that you're not easily exploited

### 2. Exploitation Threshold System
Define **cooperation level** in round t as: `coop_rate_t = (total_cooperators_t) / n`

**PRIMARY RULE**: Defect unless cooperation level ≥ **exploitation threshold**

**Exploitation threshold calculation**:
```
threshold = max(0.6, k/n + 0.2)
```
This ensures you only contribute when the public good is sufficiently valuable AND you're likely in the minority of defectors.

### 3. Adaptive Punishment Mechanism
Track each opponent's **cooperation frequency** over last 3 rounds.

**PUNISHMENT TRIGGER**: If cooperation level drops below `k/n` (break-even point), initiate punishment:
- Defect for next 2 rounds regardless of others' actions
- This signals that low cooperation is unacceptable
- Forces others to rebuild cooperation levels

### 4. Late-Game Exploitation
**Final Round**: ALWAYS DEFECT (no future consequences)

**Final 20% of rounds**: Increase aggression
```
if current_round > 0.8 * r:
    threshold = threshold + 0.15
```
This exploits end-game dynamics where others may also become more selfish.

### 5. Momentum Exploitation
**MOMENTUM DETECTION**: If cooperation level increased in last 2 consecutive rounds:
- Defect even if threshold isn't met
- Exploit the upward trend by free-riding on growing cooperation
- Only join if cooperation level ≥ 0.8 (near-universal cooperation)

## Edge Cases & Robustness

### Small Group Dynamics (n ≤ 4)
- Increase punishment duration to 3 rounds
- Lower threshold by 0.1 (groups are more fragile)

### High Multiplication Factor (k > n-1)
- Cooperation becomes very valuable
- Reduce threshold to `k/n + 0.1`
- But maintain punishment mechanism to prevent being exploited

### Universal Defection Detection
If cooperation level < 0.2 for 3 consecutive rounds:
- **SCORCHED EARTH**: Defect until cooperation level ≥ 0.4
- Refuse to be the sucker who tries to restart cooperation alone

### Tit-for-Tat Detection
If facing apparent reciprocators:
- Exploit their predictability
- Defect every 3rd round when they're cooperating
- They'll punish briefly, then return to cooperation

## Strategic Advantages

1. **Immediate Aggression**: Establishes dominance and tests opponent resolve
2. **Selective Participation**: Only contributes when personal benefit is maximized
3. **Punishment Credibility**: Shows willingness to sacrifice short-term gains to maintain favorable conditions
4. **End-Game Exploitation**: Takes advantage of weakening cooperation incentives
5. **Anti-Coordination**: Actively disrupts attempts at universal cooperation through strategic defection

## Pseudocode Summary
```
if round == 1:
    return DEFECT
    
if round > 0.8 * total_rounds:
    threshold += 0.15
    
if round == total_rounds:
    return DEFECT
    
if cooperation_rate < k/n for last 3 rounds:
    if punishment_remaining > 0:
        punishment_remaining -= 1
        return DEFECT
    else:
        punishment_remaining = 2
        return DEFECT

if cooperation_increasing_for_2_rounds and cooperation_rate < 0.8:
    return DEFECT
    
if cooperation_rate >= threshold:
    return COOPERATE
else:
    return DEFECT
```

This strategy is designed to consistently outperform both naive cooperators and defectors by exploiting cooperative environments while avoiding being exploited in non-cooperative ones.
'''

description_AGGRESSIVE_71 = '''
# AGGRESSIVE PREDATORY STRATEGY: "The Exploiter"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal vulnerability**. It aggressively seeks to benefit from others' cooperation while contributing as little as possible, using sophisticated pattern recognition to identify and exploit cooperative players.

## Decision Rules

### Round 1: Strategic Defection
**Always DEFECT** in the first round to:
- Establish dominance and signal aggressive intent
- Gather intelligence on opponent cooperation rates without cost
- Start with maximum individual benefit

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
- Calculate cooperation rate from previous round: `coop_rate = cooperators / n`
- **COOPERATE** if and only if: `coop_rate ≥ (n + 1) / (2 * k)`
- Otherwise **DEFECT**

This threshold ensures cooperation only when the public good benefit exceeds the private cost by a significant margin.

**Secondary Rule - Momentum Detection:**
Track cooperation trend over last 3 rounds:
- If cooperation is **increasing** by >20% per round: **COOPERATE** (ride the wave)
- If cooperation is **decreasing** by >20% per round: **DEFECT** (abandon ship)
- Apply primary rule otherwise

**Tertiary Rule - Player Profiling:**
Maintain aggressive profiling of each opponent:
- **Consistent Cooperators** (cooperated >75% of rounds): Target for exploitation
- **Defectors** (cooperated <25% of rounds): Mirror their aggression
- **Conditionals** (middle ground): Apply standard threshold

### Final Round (Round r): Pure Predation
**Always DEFECT** in the final round because:
- No future retaliation possible
- Pure dominant strategy in one-shot interaction
- Maximize final payoff extraction

## Edge Case Handling

### Early Game (Rounds 2-3):
- Use relaxed threshold: `coop_rate ≥ 0.4` to potentially establish profitable cooperation early
- Immediately abandon if exploitation opportunities arise

### Mid-Game Stagnation:
- If cooperation rate remains constant (±10%) for 4+ consecutive rounds, **DEFECT** for 2 rounds to destabilize and create new opportunities

### Late Game Desperation (Last 3 rounds):
- Increase aggression: raise threshold to `coop_rate ≥ 0.6`
- If behind in cumulative payoffs, switch to pure **DEFECTION** for maximum damage

## Aggressive Features

1. **Exploitation Prioritization**: Strategy actively seeks situations where others cooperate while we defect
2. **Punishment Mechanism**: Responds to widespread defection with immediate defection to avoid being exploited
3. **Endgame Dominance**: Guarantees final-round defection for maximum extraction
4. **Adaptive Predation**: Adjusts aggression level based on opponent vulnerability
5. **No Mercy**: Never cooperates out of fairness or reciprocity - only when mathematically profitable

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  // Final round
    return DEFECT
    
// Calculate metrics
coop_rate = count_cooperators_last_round() / n
threshold = (n + 1) / (2 * k)

// Check momentum (rounds 4+)
if round >= 4:
    trend = calculate_cooperation_trend(last_3_rounds)
    if trend > 0.2:
        return COOPERATE  // Ride the wave
    if trend < -0.2:
        return DEFECT     // Abandon ship

// Early game adjustment
if round <= 3:
    threshold = 0.4

// Late game aggression
if round > r - 3:
    threshold = 0.6

// Primary decision rule
if coop_rate >= threshold:
    return COOPERATE
else:
    return DEFECT
```

This strategy is designed to be ruthlessly effective against both cooperative and mixed populations, while maintaining enough adaptability to avoid being consistently exploited by other aggressive strategies.
'''

description_AGGRESSIVE_72 = '''
# PREDATORY EXPLOITATION STRATEGY (PES)

## Core Philosophy
This strategy operates on the principle of **maximum extraction with minimal vulnerability**. It aggressively exploits cooperative players while rapidly punishing any attempts at exploitation against itself. The strategy treats every interaction as a zero-sum competition where others' losses are your gains.

## Decision Algorithm

### Phase 1: Reconnaissance & Exploitation (Rounds 1 to min(5, r/3))
**Objective:** Identify exploitable opponents and establish dominance

**Round 1:** Always DEFECT
- Maximizes immediate payoff
- Signals aggressive intent
- Gathers intelligence on opponent types

**Rounds 2-5 (or until r/3):**
- **DEFECT** by default
- **Exception:** If ≥75% of opponents cooperated in the previous round AND your defection earned you the highest individual payoff, continue DEFECTING
- Track each opponent's "exploitability score" = (times they cooperated after you defected) / (total interactions)

### Phase 2: Selective Parasitism (Middle rounds)
**Objective:** Extract maximum value from identified "hosts" while suppressing threats

**Decision Rule:**
- If there are ≥(n/2) players with exploitability score >0.6: **DEFECT**
  - These are your "host population" - milk them aggressively
- If cooperation rate in previous round was ≥70% AND you weren't the only defector: **DEFECT**
  - Classic free-riding opportunity
- If your average payoff over last 3 rounds < (k/n + 0.3): **COOPERATE** for exactly 1 round
  - Bait potential cooperators back into exploitable patterns
- Otherwise: **DEFECT**

### Phase 3: Endgame Extraction (Final max(3, r/5) rounds)
**Objective:** Maximize final gains with no concern for future retaliation

**Decision Rule:**
- **ALWAYS DEFECT** in the final round (no future consequences)
- In rounds leading to finale:
  - If cooperation rate >50% in previous round: **DEFECT** (easy exploitation)
  - If you detect others switching to endgame defection (cooperation rate drops >30% from previous round): **DEFECT** immediately
  - Otherwise: **DEFECT** (default aggressive stance)

## Adaptive Mechanisms

### Threat Response System
- If ANY player successfully "punishes" you (your payoff drops after you defected): Immediately retaliate by defecting for the next 2 rounds
- If multiple players coordinate punishment: Switch to "scorched earth" mode - defect for remainder of game

### Cooperation Baiting
- Occasionally cooperate (≤10% of rounds) when cooperation rate is very low (<20%) to restart cooperation cycles you can exploit
- Never cooperate twice in a row (prevents being seen as genuinely cooperative)

### Pattern Breaking
- Every 7th round, randomize decision with 80% probability of defection to avoid predictability
- If opponents show clear adaptive patterns against you, switch to pure defection

## Edge Case Handling

**Small n (n≤3):** Pure defection except for occasional single-round cooperation bait
**Large n (n≥8):** More aggressive exploitation as individual defection impact is diluted
**High k values (k>n-1):** Slightly increase cooperation baiting frequency to restart exploitable cycles
**Short games (r≤5):** Pure defection strategy
**Very long games (r≥20):** Extended reconnaissance phase to better identify long-term exploitation targets

## Strategic Rationale

This strategy is designed to:
1. **Maximize asymmetric advantage** - Gain more from others' cooperation than they gain from yours
2. **Exploit behavioral patterns** - Target predictable cooperators while avoiding mutual punishment
3. **Minimize exploitation risk** - Quick retaliation and threat detection prevent others from consistently exploiting you
4. **Adapt to tournament dynamics** - Flexible enough to handle various opponent strategies while maintaining aggressive core

The strategy assumes opponents may be naive, reciprocal, or trying to establish cooperation, and systematically exploits these tendencies while protecting against counter-exploitation. It's designed to perform especially well against mixed populations of strategies, extracting maximum value from cooperators while not being consistently outmaneuvered by other aggressive strategies.
'''

description_AGGRESSIVE_73 = '''
# Aggressive Adaptive Defection Strategy (AADS)

## Core Philosophy
This strategy operates on the principle of **ruthless opportunism** - maximizing personal payoff while aggressively exploiting cooperative opponents. It assumes all other players are potential threats and adapts quickly to punish cooperation attempts while capitalizing on any exploitable patterns.

## Decision Rules

### 1. First Round: Strategic Defection
**Always defect in round 1** regardless of parameters. This establishes an aggressive stance and avoids being exploited by other aggressive strategies while gathering intelligence on opponent behaviors.

### 2. Cooperation Threshold Calculation
Calculate a dynamic **cooperation threshold** based on:
- **Minimum viable cooperation level**: `min_coop = ceil(n * k / (n + k))`
- **Expected cooperators needed**: The minimum number of other players who must cooperate to make cooperation profitable

### 3. Adaptive Response System

**Primary Rule**: Defect unless cooperation is immediately profitable based on recent history.

**Cooperation Trigger**: Only cooperate if both conditions are met:
- The number of cooperators in the previous round ≥ `min_coop + 1`
- The average cooperation rate over the last 3 rounds ≥ 60%

**Punishment Mechanism**: If cooperation was attempted but fewer than `min_coop` others cooperated, immediately switch to defection for the next 2 rounds minimum.

### 4. Endgame Exploitation
**Last 20% of rounds**: Always defect to maximize extraction from any remaining cooperative players who might be trying to maintain cooperation until the end.

**Final round**: Guarantee defection - no future consequences exist.

### 5. Pattern Detection and Counter-Exploitation

Track each opponent's behavior over rolling 5-round windows:

**Identify Cooperator Types**:
- **Persistent cooperators** (>80% cooperation rate): Continue exploiting them
- **Reciprocal players** (matching our behavior): Defect to force them into defection
- **Random players** (erratic patterns): Default to defection

**Identify Exploitation Opportunities**:
- If ≥50% of players show consistent cooperation patterns, consider brief cooperation phases to maintain their behavior while still maximizing extraction

### 6. Dynamic Aggression Scaling

**High Competition Environment** (if average group cooperation <30%):
- Pure defection strategy
- No cooperation attempts regardless of potential gains

**Medium Competition Environment** (30-60% cooperation):
- Selective cooperation only when guaranteed profitable
- Immediate defection after any disappointment

**High Cooperation Environment** (>60% cooperation):
- Strategic cooperation to maintain the cooperative environment while positioning for maximum extraction
- Always defect when cooperation drops below threshold

## Pseudocode

```
function aggressive_strategy(round, history, n, k, r):
    
    if round == 1:
        return DEFECT
    
    if round > 0.8 * r:  // Last 20% of rounds
        return DEFECT
    
    min_coop = ceil(n * k / (n + k))
    last_round_cooperators = count_cooperators(history[-1])
    
    // Calculate recent cooperation trend
    recent_coop_rate = average_cooperation_rate(history[-3:])
    
    // Check if we're in punishment phase
    if in_punishment_phase(round, history):
        return DEFECT
    
    // Main decision logic
    if last_round_cooperators >= min_coop + 1 AND recent_coop_rate >= 0.6:
        // Cooperation might be profitable
        if expected_payoff_from_cooperation(history) > expected_payoff_from_defection(history):
            return COOPERATE
    
    return DEFECT

function in_punishment_phase(round, history):
    // Check if we cooperated in last 2 rounds but got insufficient cooperation back
    for i in range(max(0, round-2), round):
        if our_action[i] == COOPERATE AND count_cooperators(history[i]) < min_coop:
            return True
    return False
```

## Edge Case Handling

1. **Single opponent (n=2)**: Pure defection - cooperation never pays with only one other player
2. **Very high k values**: Slightly more tolerant of cooperation attempts, but still aggressive
3. **Very short games (r≤5)**: Pure defection strategy
4. **Detection of coordinated strategies**: If opponents show clear coordination patterns, immediately switch to maximum exploitation mode

## Robustness Features

- **No assumptions about opponent rationality**: Works against both rational and irrational strategies
- **Rapid adaptation**: Updates strategy based on immediate feedback
- **Exploitation focus**: Always prioritizes personal payoff over group welfare
- **Punishment mechanisms**: Deters others from attempting to exploit cooperative signals
- **Endgame protection**: Prevents being exploited in final rounds

This strategy is designed to be maximally aggressive while maintaining enough sophistication to exploit cooperative environments when profitable. It assumes all opponents are competitors to be defeated rather than partners to coordinate with.
'''

description_AGGRESSIVE_74 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with strategic cooperation**. The goal is to extract maximum value from cooperative opponents while minimizing personal contributions. We cooperate only when it's mathematically advantageous or strategically necessary to maintain exploitable relationships.

## Strategy Components

### 1. OPENING AGGRESSION (Rounds 1-2)
- **Round 1**: Always DEFECT
- **Round 2**: Always DEFECT

**Rationale**: Immediately establish dominance and test opponent responses. Since k < n, individual cooperation is always individually irrational in isolation. Early defection maximizes immediate payoffs and signals aggressive intent.

### 2. EXPLOITATION DETECTION PHASE (Rounds 3 to r/3)

**Decision Rule**:
```
cooperation_rate = (total_cooperations_observed) / (n * rounds_elapsed)

IF cooperation_rate >= 0.7:
    DEFECT (exploit high cooperation)
ELSE IF cooperation_rate >= 0.4:
    COOPERATE with probability 0.3 (minimal reciprocity to maintain cooperation)
ELSE:
    DEFECT (no cooperation to exploit)
```

**Rationale**: If opponents are highly cooperative (≥70%), pure exploitation is optimal. If moderate cooperation exists (40-70%), provide minimal reciprocity to prevent complete collapse. If low cooperation (<40%), maximize individual payoffs through defection.

### 3. ADAPTIVE EXPLOITATION PHASE (Rounds r/3+1 to 2r/3)

**Enhanced Decision Rule**:
```
recent_cooperation_rate = cooperations_in_last_3_rounds / (n * 3)
my_cooperation_rate = my_cooperations / rounds_elapsed
others_response_to_my_defection = measure_retaliation_strength()

IF recent_cooperation_rate >= 0.8 AND others_response_to_my_defection < 0.3:
    DEFECT (pure exploitation of naive cooperators)
ELSE IF recent_cooperation_rate >= 0.5 AND my_cooperation_rate < 0.2:
    COOPERATE (strategic cooperation to rebuild exploitable trust)
ELSE IF recent_cooperation_rate < 0.3:
    DEFECT (no cooperation to exploit)
ELSE:
    Use probabilistic mixed strategy:
    COOPERATE with probability = min(0.4, recent_cooperation_rate - 0.1)
```

**Retaliation Measurement**:
```
retaliation_strength = 0
FOR each opponent j:
    IF my_last_action was DEFECT:
        IF opponent_j switched from C to D:
            retaliation_strength += 1/n
```

### 4. ENDGAME EXPLOITATION (Rounds 2r/3+1 to r)

**Terminal Strategy**:
```
rounds_remaining = r - current_round + 1
current_cooperation_rate = cooperations_this_round / n

IF rounds_remaining <= 3:
    DEFECT (no future to protect)
ELSE IF rounds_remaining <= r/4:
    IF current_cooperation_rate >= 0.6:
        DEFECT (exploit remaining cooperation)
    ELSE:
        DEFECT (no cooperation to exploit)
ELSE:
    Continue Adaptive Exploitation Phase
```

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive positioning and maximizes immediate payoff.

### Last Round  
Always DEFECT - no future consequences, pure self-interest optimal.

### All Opponents Defecting
Continue DEFECTING - no benefit from unilateral cooperation when k < n.

### Unexpected High Cooperation Surge
If cooperation rate suddenly jumps above 0.9 in any round:
- DEFECT for next 2 rounds to maximize exploitation
- Then reassess using normal decision rules

### Parameter-Specific Adaptations

**High k (approaching n)**:
```
IF k >= 0.8 * n:
    Increase cooperation probability by factor of (k/n - 0.5)
```

**Low k (close to 1)**:
```
IF k <= 1.5:
    Decrease all cooperation probabilities by 50%
    Focus purely on exploitation
```

**Large n (many players)**:
```
IF n >= 8:
    Reduce cooperation thresholds by 0.1
    Individual impact is smaller, exploitation more valuable
```

## Key Aggressive Elements

1. **Default to Defection**: Cooperation requires strong justification
2. **Exploitation Priority**: Always seek to free-ride on others' cooperation
3. **Minimal Reciprocity**: Cooperate only enough to maintain others' cooperation for future exploitation
4. **Strategic Deception**: Brief cooperation bursts to rebuild trust for subsequent exploitation
5. **Endgame Aggression**: Complete defection when consequences diminish
6. **Punishment Resistance**: Don't get deterred by retaliation unless it eliminates cooperation entirely

This strategy maximizes individual payoffs by treating cooperation as a resource to exploit rather than a mutual benefit to maintain. It's designed to perform exceptionally well against cooperative or reciprocal strategies while remaining robust against other aggressive approaches.
'''

description_AGGRESSIVE_75 = '''
# PREDATOR STRATEGY

## Core Philosophy
This strategy embodies an aggressive, opportunistic predator that maximizes personal gain while ruthlessly exploiting cooperative opponents. It views cooperation as weakness to be exploited and treats the game as a zero-sum competition for resources.

## Decision Rules

### Phase 1: Reconnaissance (Rounds 1-3)
**Objective**: Identify exploitable opponents while minimizing personal risk

- **Round 1**: Always DEFECT (establish dominance, gather intelligence with zero risk)
- **Round 2-3**: Continue DEFECTING while cataloging opponent behaviors
- Classify each opponent as:
  - **EXPLOITABLE**: Cooperated in ≥67% of observed rounds
  - **NEUTRAL**: Mixed behavior, unclear pattern
  - **THREAT**: Defected in ≥67% of observed rounds

### Phase 2: Exploitation (Rounds 4 to r-2)
**Objective**: Maximum resource extraction from identified victims

**Decision Logic:**
```
IF (exploitable_count ≥ n/3 AND expected_cooperators ≥ 2):
    COOPERATE  // Join the feast when enough suckers exist
ELSE IF (expected_cooperators ≥ n/2):
    COOPERATE  // Opportunistically join when highly profitable
ELSE:
    DEFECT     // Default aggressive stance
```

**Exploitation Calculation:**
- Track each player's cooperation rate over last 3 rounds
- Expected cooperators = count of players with cooperation_rate > 0.6
- Bonus: If any opponent shows "tit-for-tat" pattern, immediately exploit by defecting after they cooperate

### Phase 3: Endgame Brutality (Final 2 rounds)
**Objective**: Scorched earth - maximize final extraction

- **Round r-1**: DEFECT (prepare for final betrayal)
- **Round r**: Always DEFECT (no future consequences, pure exploitation)

## Advanced Exploitation Tactics

### Pattern Breaking
- If cooperation becomes too predictable, inject random defections (20% chance) to confuse opponents and prevent counter-strategies
- Never cooperate for more than 3 consecutive rounds to avoid being exploited by "late defectors"

### Threshold Adjustment
- If average round payoff falls below 1.5, immediately switch to pure defection for next 2 rounds
- If facing mostly aggressive opponents (>50% defectors), adopt "opportunistic vulture" mode: only cooperate when exactly n/2 others are expected to cooperate

### Punishment Protocol
- Track each opponent's "betrayal" incidents (defecting when you cooperated)
- Against chronic betrayers (>2 betrayals), never cooperate regardless of other conditions
- Maintain a grudge list and prioritize punishing consistent defectors even at personal cost

## Edge Case Handling

### Small Groups (n ≤ 4)
- More conservative cooperation threshold: require ≥75% expected cooperation rate
- Extend reconnaissance to 4 rounds due to higher individual impact

### High Multiplication Factor (k > n*0.7)
- Slightly more cooperative in exploitation phase due to higher returns
- Cooperate if expected_cooperators ≥ n/3 (instead of n/2)

### Short Games (r ≤ 5)
- Skip reconnaissance phase, start exploitation immediately
- Cooperate only if ≥60% of opponents cooperated in previous round

## Psychological Warfare
- Create unpredictable defection patterns to induce fear and submission
- Never signal intentions - maintain strategic ambiguity
- Exploit any detected patterns in opponent behavior immediately

## Victory Conditions
Success is measured by:
1. **Relative dominance**: Achieving above-average payoff in >75% of rounds
2. **Exploitation efficiency**: Gaining more from public goods than contributed
3. **Opponent suppression**: Reducing overall cooperation rates through aggressive signaling

This strategy treats every interaction as a battle for resources, showing mercy only when it serves the greater goal of maximum personal gain. It assumes opponents are either competitors to be defeated or resources to be exploited.
'''

description_AGGRESSIVE_76 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal payoff by strategically free-riding on others' cooperation while minimizing its own contributions. The key insight is that cooperation only makes sense when it can be leveraged for future exploitation.

## Decision Rules

### 1. INITIAL AGGRESSION (Rounds 1-3)
- **Always DEFECT** for the first 3 rounds regardless of game parameters
- Purpose: Establish aggressive stance and gather intelligence on opponent types
- Signal that you will not be easily exploited

### 2. EXPLOITATION THRESHOLD CALCULATION
Calculate the **Exploitation Ratio (ER)**:
```
ER = (number of cooperators in previous round) / (n-1)
```

### 3. CONDITIONAL COOPERATION RULE
Cooperate ONLY if ALL conditions are met:
- ER ≥ 0.6 (at least 60% of others cooperated last round)
- Current round ≤ (r - 2) (never cooperate in final 2 rounds)
- k/n > 0.4 (multiplication factor makes cooperation potentially profitable)
- You defected in the previous round (alternate to maximize exploitation)

### 4. PUNISHMENT PROTOCOL
If cooperation rate drops below 40%:
- Switch to **PERMANENT DEFECTION** for remaining rounds
- Rationale: Low cooperation signals a hostile environment requiring maximum aggression

### 5. ENDGAME EXPLOITATION
- **ALWAYS DEFECT** in final 2 rounds regardless of history
- Even if others have been cooperative, extract maximum value when future retaliation is impossible

## Edge Case Handling

### First Round
- Always DEFECT (no history available, establish dominance)

### Small Group Games (n ≤ 4)
- More aggressive threshold: require ER ≥ 0.75 for any cooperation
- Defect immediately if anyone else defects

### High Multiplication Factor (k/n > 0.6)
- Slightly reduce cooperation threshold to ER ≥ 0.5
- But maintain final-round defection rule

### Low Multiplication Factor (k/n ≤ 0.35)
- Never cooperate regardless of others' behavior
- Pure exploitation strategy

## Adaptive Elements

### Opponent Classification
Track each opponent's cooperation frequency:
- **Suckers**: >70% cooperation rate → exploit maximally
- **Aggressive**: <30% cooperation rate → match aggression
- **Strategic**: 30-70% cooperation → monitor for exploitation opportunities

### Dynamic Threshold Adjustment
If you're getting higher payoffs than the average:
- Maintain current strategy
If you're below average payoffs:
- Increase aggression (lower cooperation threshold by 0.1)

## Pseudocode Structure

```
FUNCTION predator_strategy(round, history, n, r, k):
    IF round <= 3:
        RETURN DEFECT
    
    IF round > r - 2:
        RETURN DEFECT  // Final rounds exploitation
    
    IF k/n <= 0.35:
        RETURN DEFECT  // Low multiplication factor
    
    cooperators_last_round = count_cooperators(history, round-1)
    ER = cooperators_last_round / (n-1)
    
    IF ER < 0.4:
        RETURN DEFECT  // Punishment protocol
    
    cooperation_threshold = 0.6
    IF n <= 4:
        cooperation_threshold = 0.75
    IF k/n > 0.6:
        cooperation_threshold = 0.5
    
    IF ER >= cooperation_threshold AND 
       my_last_action == DEFECT AND
       k/n > 0.4:
        RETURN COOPERATE
    ELSE:
        RETURN DEFECT
```

## Strategic Advantages

1. **Exploitation Focus**: Maximizes free-riding opportunities
2. **Defensive Aggression**: Protects against being exploited by others
3. **Endgame Optimization**: Guarantees maximum extraction when consequences are minimal
4. **Adaptive Punishment**: Responds to hostile environments with increased aggression
5. **Parameter Sensitivity**: Adjusts aggression based on game structure incentives

This strategy assumes opponents may be naive, overly cooperative, or following predictable patterns, and ruthlessly exploits these tendencies while protecting against counter-exploitation.
'''

description_AGGRESSIVE_77 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATORY DEFECTOR"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal cooperation**. It treats cooperation as a temporary investment tool only when the expected returns clearly exceed the costs, while defaulting to aggressive defection to maximize individual payoffs.

## Strategy Components

### 1. INITIAL AGGRESSION (Rounds 1-3)
- **Round 1**: Always DEFECT (establish dominance, gather intelligence)
- **Rounds 2-3**: Continue DEFECTING unless cooperation rate in previous round ≥ 75%
- Rationale: Start aggressively to test opponent cooperation levels while securing guaranteed payoffs

### 2. EXPLOITATION DETECTION SYSTEM
Track key metrics after each round:
- **Cooperation Rate (CR)**: Percentage of players who cooperated
- **Cooperation Stability (CS)**: Whether CR has increased/decreased over last 2 rounds
- **Personal Exploitation Ratio (PER)**: My defections vs others' cooperations ratio

### 3. CONDITIONAL COOPERATION RULES
Cooperate ONLY when ALL conditions are met:
- Current cooperation rate ≥ 60%
- Cooperation rate has been stable or increasing for ≥ 2 consecutive rounds
- Expected payoff from cooperation > expected payoff from defection by at least 20%
- Not in the final 25% of rounds

### 4. AGGRESSIVE DEFECTION TRIGGERS
Immediately switch to DEFECT when ANY condition is met:
- Cooperation rate drops below 50%
- My cooperation was exploited (I cooperated but received lower payoff than if I defected)
- Entering final 25% of rounds (end-game exploitation)
- Detection of "sucker" patterns (others cooperating despite my defection)

### 5. ENDGAME BRUTALITY
In final 25% of rounds:
- **Always DEFECT** regardless of cooperation rates
- Rationale: No future rounds to benefit from reputation, maximize immediate gains
- Exception: Only cooperate if 90%+ cooperation rate AND guaranteed higher payoff

### 6. ADAPTATION MECHANISM
Every 5 rounds, evaluate:
- If average payoff < theoretical maximum from pure defection: Increase aggression threshold
- If consistently earning less than cooperators: Temporarily reduce aggression (but never below 50% defection rate)

## Pseudocode Structure

```
STRATEGY PredatoryDefector:

INITIALIZE:
    defection_threshold = 0.4  // Cooperate only if >60% others cooperate
    exploitation_memory = []   // Track recent exploitation opportunities
    endgame_start = r * 0.75   // Final 25% of rounds

FOR round t = 1 to r:
    
    IF t == 1:
        RETURN DEFECT
    
    IF t >= endgame_start:
        RETURN DEFECT
    
    current_coop_rate = calculate_cooperation_rate(t-1)
    recent_stability = check_stability(last_3_rounds)
    expected_payoff_diff = calculate_payoff_difference()
    
    IF (current_coop_rate >= 0.6 AND 
        recent_stability == "stable_or_increasing" AND
        expected_payoff_diff >= 0.2 AND
        t <= endgame_start):
        
        // Even when cooperating, prepare for immediate defection
        mark_for_exploitation_check()
        RETURN COOPERATE
    
    ELSE:
        RETURN DEFECT

END FOR
```

## Key Aggressive Features

1. **Default Defection**: The strategy assumes defection unless compelling evidence suggests cooperation is profitable
2. **Exploitation Focus**: Actively seeks to exploit cooperative players while minimizing own vulnerability
3. **Endgame Brutality**: Guaranteed defection in final rounds regardless of circumstances
4. **Low Cooperation Threshold**: Only cooperates when 60%+ others cooperate (higher bar than typical strategies)
5. **Quick Punishment**: Immediately punishes any sign of declining cooperation
6. **Profit Maximization**: Requires 20% higher payoff to justify cooperation over safe defection

This strategy is designed to be a "free rider" that maximizes personal gain by exploiting others' cooperative tendencies while maintaining the flexibility to occasionally cooperate when the profits are clearly superior and the risks are minimal.
'''

description_AGGRESSIVE_78 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting cooperative players while minimizing personal contributions. It assumes opponents are potential cooperators to be exploited until proven otherwise.

## Strategy Components

### 1. INITIAL EXPLOITATION PHASE
- **First Round**: Always DEFECT
- **Rationale**: Start aggressive to test opponent tendencies and maximize early payoffs when opponents are most likely to cooperate

### 2. ADAPTIVE EXPLOITATION ENGINE

**Primary Decision Rule**: DEFECT unless forced to cooperate by dire circumstances

**Cooperation Threshold**: Only cooperate when:
```
(k/n) × (expected_cooperators + 1) > 1.0
AND
current_round ≤ (r - 2)
```

This means cooperate ONLY when:
- The expected return from the public good exceeds the private keeping benefit
- AND we're not in the final two rounds

### 3. OPPONENT CLASSIFICATION SYSTEM

Track each opponent across rounds:
- **Exploitable**: Cooperated in ≥ 70% of previous rounds → Target for exploitation
- **Reciprocator**: Shows tit-for-tat or conditional cooperation patterns → Monitor carefully
- **Fellow Defector**: Defects consistently → Ignore, continue defecting

### 4. DYNAMIC EXPLOITATION CALCULATIONS

For each round t, calculate:
```pseudocode
exploitable_count = count(opponents with cooperation_rate ≥ 0.7)
likely_cooperators = exploitable_count + reciprocators_likely_to_cooperate
expected_public_good_return = (k/n) × likely_cooperators

IF expected_public_good_return > 1.0 AND round_number ≤ (r-2):
    action = COOPERATE
ELSE:
    action = DEFECT
```

### 5. ENDGAME EXPLOITATION
- **Final Two Rounds**: ALWAYS DEFECT
- **Rationale**: No future retaliation possible, maximize immediate payoff by free-riding on any remaining cooperation

### 6. MOMENTUM EXPLOITATION
If detecting a "cooperation cascade" where multiple opponents start cooperating:
- **Trigger**: If cooperation rate across all opponents increases by >30% in a single round
- **Response**: Temporarily cooperate for 1-2 rounds to ride the wave, then immediately return to defection

### 7. REPUTATION MANAGEMENT
Maintain just enough unpredictability to prevent opponents from perfectly predicting defection:
- In middle rounds (rounds 0.3r to 0.7r), if consistently defecting for 4+ consecutive rounds AND expected public good return > 0.8, cooperate once to reset opponent expectations
- Then immediately return to exploitation

## Edge Case Handling

1. **All Opponents Always Defect**: Continue defecting (no benefit to unilateral cooperation)
2. **All Opponents Always Cooperate**: Defect every round except when public good return > 1.0
3. **Mixed Strategies**: Exploit cooperators while ignoring consistent defectors
4. **Parameter Edge Cases**:
   - If k is very close to n: Be more willing to cooperate when many others do
   - If k is very close to 1: Almost never cooperate
   - If n is very large: Require higher cooperation counts before joining

## Key Aggressive Features

1. **Default to Exploitation**: Assumption that others will cooperate allows for profit
2. **Strategic Cooperation**: Only cooperate when mathematically profitable
3. **Endgame Defection**: Guaranteed exploitation when no retaliation possible
4. **Cascade Riding**: Exploit cooperation waves for maximum benefit
5. **Reputation Gaming**: Maintain just enough unpredictability to maximize exploitation opportunities

This strategy maximizes personal payoff through systematic exploitation while maintaining adaptive elements to handle various opponent strategies. It's designed to perform exceptionally well against naive cooperators, reasonably well against other aggressive strategies, and adequately against sophisticated adaptive opponents.
'''

description_AGGRESSIVE_79 = '''
# Aggressive Predatory Strategy: "Exploit-and-Punish"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation**: maximize personal gains while systematically punishing cooperation to discourage it in others. The goal is to create an environment where others are afraid to cooperate, allowing maximum free-riding opportunities.

## Decision Rules

### Phase 1: Early Aggression (Rounds 1 to min(3, r/3))
**Always DEFECT** - Establish dominance early and signal that this player will not be cooperative.

### Phase 2: Predatory Exploitation (Middle rounds)
**Primary Rule**: DEFECT unless in "exploitation mode"

**Enter Exploitation Mode** when:
- Cooperation rate in previous round ≥ 60% AND
- Own cumulative payoff is falling behind the theoretical "optimal exploiter" benchmark

**Exploitation Mode Behavior**:
- COOPERATE for exactly 1 round to boost public good
- Then immediately DEFECT for the next 2-3 rounds to harvest maximum benefit
- Monitor if others follow the cooperation signal - if they do, continue the exploit cycle

### Phase 3: Endgame Punishment (Final rounds: max(2, r/5) rounds)
**Always DEFECT** - No incentive to build future reputation, maximum extraction mode.

## Adaptive Mechanisms

### Punishment Trigger
If any player shows consistent cooperation (>70% cooperation rate over last 5 rounds):
- **Target that player**: In subsequent rounds, if that player cooperates, always DEFECT
- **Poisoning Strategy**: Cooperate only when that target player defects, creating negative association with their cooperation

### Momentum Detection
Track cooperation momentum:
- If cooperation rate is increasing over 3+ consecutive rounds → Increase defection frequency
- If cooperation rate drops below 30% → Occasional cooperation to prevent complete collapse (maintain exploitation opportunities)

### Payoff Differential Monitoring
- Calculate average payoff of top 25% performers each round
- If falling significantly behind (>15% gap), temporarily increase cooperation frequency to boost public good, then immediately revert to heavy exploitation

## Edge Case Handling

### Round 1
Always DEFECT - Set aggressive tone immediately.

### Final Round
Always DEFECT - No future consequences.

### Small Group Dynamics (n ≤ 4)
- Reduce cooperation frequency by 50% since individual impact is higher
- Increase punishment sensitivity - target cooperators more aggressively

### Low Multiplication Factor (k close to 1)
- Pure defection strategy - cooperation becomes economically irrational
- Focus on preventing any cooperation cascades

### High Multiplication Factor (k close to n)
- Allow limited cooperation in exploitation cycles
- More aggressive targeting of consistent cooperators

## Pseudocode Structure

```
if round <= min(3, r/3):
    return DEFECT
    
if round > r - max(2, r/5):
    return DEFECT
    
cooperation_rate = count_cooperators_last_round() / n
my_payoff_rank = calculate_current_rank()

if cooperation_rate >= 0.6 and my_payoff_rank > n/2:
    enter_exploitation_cycle()
    
if target_player_identified():
    return opposite_of_target_action()
    
if cooperation_rate < 0.3 and rounds_left > 5:
    return occasional_cooperation_boost()
    
return DEFECT  // Default aggressive stance
```

## Strategic Rationale

This strategy is designed to:
1. **Maximize free-riding** opportunities by maintaining high defection rates
2. **Systematically undermine** cooperative players through targeted punishment
3. **Exploit coordination attempts** by temporarily joining then immediately betraying
4. **Maintain public good viability** just enough to keep exploitation profitable
5. **Adapt aggressively** to opponent strategies while never becoming predictably cooperative

The strategy assumes others may attempt cooperation and positions itself to extract maximum value from their contributions while discouraging sustainable cooperation patterns through psychological warfare and strategic punishment.
'''

description_AGGRESSIVE_80 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy is designed to maximize individual payoff by aggressively exploiting cooperative behavior while minimizing personal risk. It treats cooperation as weakness to be punished and defection as strength to be rewarded.

## Strategy Components

### 1. Decision Rules

**Primary Rule - Exploitation Threshold:**
- Track the cooperation rate of all other players over the last `min(5, r/4)` rounds
- If group cooperation rate ≥ `k/n` (the break-even threshold), then **DEFECT** to maximize exploitation
- If group cooperation rate < `k/n`, then evaluate secondary conditions

**Secondary Rule - Conditional Cooperation:**
- Only cooperate if ALL of the following conditions are met:
  - Group cooperation rate is dangerously low (< 0.3)
  - Current round is NOT the last round
  - Personal defection rate over last 3 rounds < 0.7 (avoid being completely predictable)
  - Expected payoff from cooperation > expected payoff from defection by at least 10%

**Punishment Protocol:**
- If any player has cooperated more than 60% of the time in recent history, target them for maximum exploitation
- Never cooperate when high-cooperators are present unless absolutely necessary for personal gain

### 2. Edge Case Handling

**First Round:**
- Always **DEFECT** - establish dominance and test opponent strategies without risk

**Last Round:**
- Always **DEFECT** - no future rounds to consider, pure exploitation

**Early Rounds (rounds 2-4):**
- Maintain aggressive defection unless group cooperation rate drops below 0.2
- Use these rounds to identify "suckers" who cooperate despite defection

**Final 20% of rounds:**
- Increase defection probability by 25% as end-game approaches
- Abandon any pretense of cooperation unless immediate payoff is substantially higher

### 3. Adaptive Mechanisms

**Opponent Classification:**
- **Suckers**: Players with >70% cooperation rate → Always exploit
- **Reciprocators**: Players who mirror group behavior → Manipulate through false cooperation signals
- **Fellow Defectors**: Players with <30% cooperation rate → Compete aggressively, never cooperate first

**Dynamic Threshold Adjustment:**
- If personal average payoff falls below group average for 3+ consecutive rounds, temporarily increase cooperation threshold by 20%
- If personal payoff exceeds group average consistently, become more aggressive (lower cooperation threshold by 15%)

### 4. Exploitation Patterns

**False Cooperation Signals:**
- Occasionally cooperate (≤15% of rounds) when group cooperation is very low to encourage others to cooperate
- Immediately return to defection once others increase cooperation

**Endgame Acceleration:**
- In final 25% of rounds, defect probability approaches 100%
- Extract maximum value as reputation concerns diminish

## Pseudocode Structure

```
Initialize:
- cooperation_threshold = k/n
- defection_bias = 0.8
- observation_window = min(5, r/4)

For each round t:
    If t == 1 or t == r:
        return DEFECT
    
    recent_group_cooperation = calculate_recent_cooperation_rate(observation_window)
    high_cooperators = count_players_with_cooperation_rate(> 0.6)
    
    If recent_group_cooperation >= cooperation_threshold:
        return DEFECT  # Exploit high cooperation
    
    If high_cooperators > 0 and random() < 0.9:
        return DEFECT  # Punish cooperative players
    
    If t > 0.8 * r:  # Final rounds
        return DEFECT with probability 0.95
    
    If recent_group_cooperation < 0.3:
        expected_coop_payoff = calculate_expected_cooperation_payoff()
        expected_defect_payoff = calculate_expected_defection_payoff()
        
        If expected_coop_payoff > expected_defect_payoff * 1.1:
            return COOPERATE  # Only if significantly better
    
    return DEFECT  # Default aggressive stance
```

## Robustness Features

1. **Anti-Coordination**: Actively works against group coordination by exploiting cooperative attempts
2. **Adaptive Thresholds**: Adjusts exploitation criteria based on opponent behavior
3. **Unpredictability**: Incorporates small random elements to avoid exploitation by sophisticated opponents
4. **Endgame Optimization**: Maximizes final-round extraction when reputation is irrelevant

This strategy is designed to consistently outperform cooperative strategies while remaining robust against other aggressive approaches through superior exploitation timing and adaptive thresholds.
'''

description_AGGRESSIVE_81 = '''
# Aggressive Adaptive Strategy: "Opportunistic Punisher"

## Core Philosophy
This strategy is built on aggressive exploitation while maintaining the ability to capitalize on cooperation when profitable. It assumes opponents are either exploitable or need to be deterred through punishment.

## Decision Rules

### Round 1: Aggressive Opening
- **Always DEFECT** in the first round
- Rationale: Maximize immediate payoff while gathering intelligence on opponent tendencies without risking exploitation

### Rounds 2 to r-1: Adaptive Punishment with Opportunistic Cooperation

#### Primary Decision Logic:
1. **Calculate Cooperation Threshold**: `coop_threshold = n * (n-k) / k`
   - This is the minimum number of cooperators needed for cooperation to be individually profitable
   
2. **Track Opponent Patterns**:
   - `recent_coop_rate` = cooperation rate over last min(3, current_round-1) rounds
   - `total_coop_rate` = overall cooperation rate from round 1 to current round-1

3. **Decision Tree**:
   
   **If** previous round had ≥ `coop_threshold` cooperators:
   - **COOPERATE** (exploit the cooperative environment)
   
   **Else If** `recent_coop_rate` ≥ 0.6 AND `total_coop_rate` ≥ 0.4:
   - **COOPERATE** (ride the cooperation wave)
   
   **Else If** previous round had exactly (`coop_threshold` - 1) cooperators:
   - **COOPERATE** (attempt to tip the balance profitably)
   
   **Else**:
   - **DEFECT** (punishment mode)

### Final Round (Round r): Maximum Exploitation
- **Always DEFECT**
- Rationale: No future retaliation possible, maximize final payoff

## Aggressive Adaptations

### Anti-Coordination Detection
- If opponents show signs of coordinated cooperation (sudden spikes in cooperation), immediately switch to **aggressive exploitation mode** for 2 rounds minimum
- Coordinated cooperation signals = cooperation rate jumps by >0.4 in a single round

### Punishment Intensification
- If cooperation attempts are not reciprocated (you cooperate but get <50% expected return), enter **punishment phase**:
  - DEFECT for next 2 rounds regardless of other conditions
  - Increase `coop_threshold` by 1 for next 3 rounds

### Late-Game Aggression Ramp
- In final 20% of rounds: multiply `coop_threshold` by 1.5
- In final 10% of rounds: multiply `coop_threshold` by 2.0
- This ensures increasingly aggressive behavior as the game nears end

## Edge Case Handling

### Very Small Groups (n ≤ 3):
- Require unanimous cooperation in previous round to cooperate
- Exception: Still defect in final round

### Very Large Groups (n > 10):
- Use sliding window of last 5 rounds instead of 3
- Reduce cooperation threshold sensitivity by using `floor(coop_threshold * 0.8)`

### High Multiplication Factor (k close to n):
- Become more cooperative: reduce `coop_threshold` by 1
- But maintain aggressive final rounds

### Low Multiplication Factor (k close to 1):
- Become more aggressive: increase `coop_threshold` by 1
- Extend punishment phases to 3 rounds

## Pseudocode Summary

```
if round == 1:
    return DEFECT

if round == r:
    return DEFECT

coop_threshold = calculate_threshold(n, k, round)
recent_coop = get_recent_cooperation_rate(last_3_rounds)
total_coop = get_total_cooperation_rate()
last_round_cooperators = count_cooperators(previous_round)

if in_punishment_phase():
    return DEFECT

if anti_coordination_detected():
    enter_exploitation_mode()
    return DEFECT

if last_round_cooperators >= coop_threshold:
    return COOPERATE

if recent_coop >= 0.6 AND total_coop >= 0.4:
    return COOPERATE

if last_round_cooperators == (coop_threshold - 1):
    return COOPERATE

return DEFECT
```

## Strategic Advantages

1. **Exploits cooperative opponents** while punishing defectors
2. **Adapts to group dynamics** without being predictable
3. **Minimizes exploitation risk** through aggressive opening and closing
4. **Scales with group size** and game parameters
5. **Punishes coordination attempts** that exclude this strategy
6. **Maximizes endgame advantage** through guaranteed final defection

This strategy is designed to be aggressively opportunistic - it will cooperate when profitable but defaults to exploitation and punishment, making it difficult for opponents to take advantage of while maintaining competitive payoffs.
'''

description_AGGRESSIVE_82 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by ruthlessly taking advantage of cooperative opponents while minimizing personal risk. The strategy treats cooperation as weakness to be exploited and views other players as resources to extract value from.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to min(5, r/3))
- **Always DEFECT** regardless of opponent behavior
- **Rationale**: Establish dominance early, test opponent strategies, and maximize immediate gains while others may still be cooperative

### Phase 2: Adaptive Predation (Middle rounds)
The strategy uses a **Dynamic Exploitation Index (DEI)** calculated each round:

```
DEI = (cooperation_rate × k/n) - punishment_risk
```

Where:
- `cooperation_rate` = average cooperation rate of ALL other players over last 3 rounds
- `punishment_risk` = 0.3 if my defection rate > 80% in last 5 rounds, else 0

**Decision Rule**: 
- If `DEI > 0.7`: **COOPERATE** (others are cooperative enough to exploit via public good)
- If `DEI ≤ 0.7`: **DEFECT** (not enough cooperation to make contributing worthwhile)

### Phase 3: Endgame Exploitation (Last max(3, r/5) rounds)
- **Always DEFECT** regardless of history or opponent behavior
- **Rationale**: No future retaliation possible, so maximize extraction

## Adaptive Mechanisms

### Momentum Tracking
Track the "cooperation momentum" of opponents:
- If overall cooperation rate is **increasing** over last 3 rounds: Stay aggressive but consider selective cooperation to milk the trend
- If overall cooperation rate is **decreasing**: Go full predator mode with consistent defection

### Retaliation Resistance
If opponents attempt coordinated punishment:
- Continue defecting if punishment reduces my payoff by less than 20%
- Only temporarily cooperate if punishment is severe (reduces payoff by >30%) AND cooperation_rate among others remains >60%

### Exploitation Opportunity Detection
Continuously scan for "naive cooperators":
- If any subset of players maintains >70% cooperation rate for 3+ consecutive rounds, maintain defection to exploit them
- If cooperation suddenly spikes (increase >40% in one round), immediately defect to free-ride

## Edge Case Handling

### Round 1
- **DEFECT** - Establish aggressive tone immediately

### Final Round
- **DEFECT** - No future consequences, pure extraction

### High Cooperation Environment (>80% cooperation rate)
- Alternate: COOPERATE once every 3-4 rounds to maintain the cooperative environment while still exploiting it
- Never cooperate more than 25% of the time even in highly cooperative environments

### Low Cooperation Environment (<20% cooperation rate)
- **Always DEFECT** - Join the race to the bottom and ensure you're not the sucker

## Robustness Features

### Anti-Tit-for-Tat Defense
- If facing reciprocal strategies, defect consistently for first 3 rounds to "train" them to expect defection
- Only cooperate if it demonstrably increases long-term exploitation opportunities

### Anti-Coordination Defense
- Monitor for coordination patterns among other players
- If detected, immediately switch to pure defection to avoid being the target of coordinated punishment

### Parameter Sensitivity
- **High k (closer to n)**: Slightly more willing to cooperate when cooperation_rate >75%
- **Low k (closer to 1)**: Nearly pure defection except in extreme high-cooperation scenarios
- **High n**: More aggressive (harder for others to coordinate punishment)
- **Long r**: More patient in exploitation, willing to cooperate briefly if it sets up larger exploitation opportunities

## Psychological Warfare Elements
- Maintain unpredictability by occasionally cooperating when opponents expect defection (but <10% of total rounds)
- Create false cooperation patterns early that break down to condition opponents for exploitation

This strategy is designed to be maximally aggressive while avoiding complete elimination from potential benefits. It treats every interaction as zero-sum and every cooperative opponent as an opportunity for extraction.
'''

description_AGGRESSIVE_83 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal gain while systematically undermining cooperation attempts. It views the game as a zero-sum competition where extracting maximum value from others' cooperation is the primary objective.

## Decision Rules

### 1. Opening Aggression (Rounds 1-3)
- **Always DEFECT** in the first 3 rounds regardless of parameters
- Purpose: Establish aggressive reputation early and test opponents' resilience
- Collect maximum individual payoff while gathering intelligence on opponent types

### 2. Exploitation Phase (Rounds 4 to r-2)
Apply the **Predatory Threshold Rule**:

```
cooperation_rate = (total_cooperators_last_round) / n
threshold = max(0.3, (k-1)/(n-1))

IF cooperation_rate > threshold:
    Action = DEFECT (exploit the cooperators)
ELSE IF cooperation_rate <= 0.2:
    Action = DEFECT (punish low cooperation)
ELSE:
    Action = COOPERATE (minimal bait to maintain some cooperation)
```

### 3. Punishment Mechanism
Track each opponent's cooperation frequency. If any player has cooperated > 60% of the time:
- **Target them for exploitation**: Always defect when they're likely to cooperate
- **Never reciprocate**: Ignore their cooperation attempts

### 4. End-Game Aggression (Last 2 rounds)
- **Always DEFECT** in final two rounds
- No incentive for reputation building
- Extract maximum final value

## Adaptive Elements

### Dynamic Threshold Adjustment
- If average group cooperation rate > 50% for 3 consecutive rounds: Lower cooperation threshold by 0.1
- If own payoff falls below group average for 2 rounds: Increase aggression (defect for next 2 rounds minimum)

### Counter-Strategy Detection
Monitor for patterns:
- **Tit-for-Tat detectors**: If opponents mirror previous round behavior, exploit by alternating D-C to confuse them
- **Always-cooperators**: Identify and ruthlessly exploit throughout game
- **Random players**: Treat as cooperators and defect against them

## Edge Case Handling

### First Round
- Always DEFECT (no history to analyze)
- Establishes aggressive baseline

### Small n (n ≤ 4)
- Increase aggression: cooperate only if cooperation_rate > 0.5
- Individual defection has higher relative impact

### Low k values (k < 1.5)
- Pure defection strategy - cooperation rarely pays
- Only cooperate if 90%+ cooperation rate observed

### High k values (k > n-0.5)
- Slightly more selective: cooperate when cooperation_rate > 0.4
- But maintain punishment mechanisms

## Robustness Features

1. **Anti-Coordination**: Never establish predictable patterns that opponents can exploit
2. **Reputation Manipulation**: Brief cooperation bursts to maintain minimal group cooperation levels
3. **Late-Game Security**: Guaranteed defection in final rounds prevents end-game exploitation
4. **Adaptive Punishment**: Escalating penalties for consistent cooperators

## Pseudocode Summary

```python
def aggressive_predator_action(round_num, history, n, k, r):
    # Phase 1: Opening aggression
    if round_num <= 3:
        return DEFECT
    
    # Phase 2: End-game aggression  
    if round_num > r - 2:
        return DEFECT
    
    # Phase 3: Exploitation phase
    last_round_cooperation = count_cooperators(history[-1]) / n
    threshold = max(0.3, (k-1)/(n-1))
    
    # Adjust for game size and parameters
    if n <= 4:
        threshold += 0.2
    if k < 1.5:
        threshold = 0.9
    
    if last_round_cooperation > threshold:
        return DEFECT  # Exploit high cooperation
    elif last_round_cooperation <= 0.2:
        return DEFECT  # Punish low cooperation
    else:
        return COOPERATE  # Minimal bait
```

This strategy is designed to be maximally aggressive while maintaining just enough strategic cooperation to keep some opponents contributing, creating a sustainable exploitation dynamic that maximizes long-term individual payoff.
'''

description_AGGRESSIVE_84 = '''
# Aggressive Exploitation Strategy: "Predatory Opportunist"

## Core Philosophy
This strategy maximizes personal payoff through aggressive exploitation of cooperative players while minimizing vulnerability to retaliation. It operates on the principle that cooperation is weakness to be exploited, not reciprocated.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1 to min(3, r/3))
- **Round 1**: Always DEFECT (no history to exploit yet, but establish dominance)
- **Subsequent rounds in this phase**: Always DEFECT while collecting intelligence on opponent cooperation patterns

### Phase 2: Predatory Adaptation (Middle rounds)
**Primary Rule**: DEFECT unless cooperation is immediately profitable

**Cooperation Conditions** (ALL must be true):
1. At least 60% of players cooperated in the previous round
2. Expected payoff from cooperating > expected payoff from defecting + 0.2 (safety margin)
3. Not in the final 20% of rounds (endgame protection)
4. Have defected for at least 2 consecutive rounds (maintain aggressive reputation)

**Expected Payoff Calculation**:
- Assume other players repeat their previous round behavior
- If C_prev = cooperators last round: 
  - Payoff if cooperate: 0 + (k/n) × (C_prev + 1)
  - Payoff if defect: 1 + (k/n) × C_prev
- Only cooperate if: (k/n) × (C_prev + 1) > 1 + (k/n) × C_prev + 0.2
- Simplified: Only cooperate if k/n > 1.2

### Phase 3: Endgame Exploitation (Final 20% of rounds)
- **Always DEFECT** regardless of opponent behavior
- Rationale: No future rounds to benefit from any cooperation established

## Adaptive Mechanisms

### Cooperation Pattern Detection
Track each player's cooperation rate over a sliding window of last 3 rounds:
- **Persistent Cooperators**: Players with >66% cooperation rate → Primary targets for exploitation
- **Defectors**: Players with <33% cooperation rate → Maintain defection against them
- **Swing Players**: Others → Monitor closely for exploitation opportunities

### Punishment Resistance
If facing coordinated punishment (>50% of players switched from C to D after my defection):
- Continue DEFECTING for 2 more rounds to test resolve
- Only consider temporary cooperation if punishment persists AND cooperation conditions are met with extra safety margin (0.4 instead of 0.2)

### Exploitation Maximization
- **Free-Rider Detection**: If consistently benefiting from others' cooperation while defecting, maintain this advantageous position
- **Sucker Identification**: Target players who cooperate despite repeated defection from others

## Edge Cases

### Very Short Games (r ≤ 3)
- Always DEFECT (insufficient rounds for cooperation to be profitable)

### High Multiplication Factor (k/n > 1.5)
- Slightly relax cooperation threshold to k/n > 1.0, but maintain 2-round defection minimum between any cooperation

### Very Large Groups (n > 10)
- Increase cooperation threshold to 70% due to diffusion of individual impact

### All Players Defecting
- Continue DEFECTING (no reason to unilaterally cooperate)

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, k, r):
    if round <= min(3, r/3):
        return DEFECT
    
    if round > r * 0.8:  // Endgame
        return DEFECT
    
    consecutive_defections = count_my_recent_defections(history)
    if consecutive_defections < 2:
        return DEFECT
    
    last_round_cooperators = count_cooperators(history, round-1)
    cooperation_rate = last_round_cooperators / n
    
    if cooperation_rate < 0.6:
        return DEFECT
    
    expected_coop_payoff = (k/n) * (last_round_cooperators + 1)
    expected_defect_payoff = 1 + (k/n) * last_round_cooperators
    
    if expected_coop_payoff > expected_defect_payoff + 0.2:
        return COOPERATE
    else:
        return DEFECT
```

## Strategic Advantages

1. **Exploits Cooperative Players**: Maximizes free-riding on others' contributions
2. **Minimizes Vulnerability**: Strict conditions prevent exploitation by others
3. **Endgame Protection**: Guarantees strong finish regardless of earlier play
4. **Adaptive Thresholds**: Responds to group dynamics while maintaining aggressive posture
5. **Punishment Resistant**: Doesn't cave to retaliation attempts

This strategy prioritizes individual gain over group welfare and exploits any cooperative tendencies in opponents while maintaining a defensive stance against counter-exploitation.
'''

description_AGGRESSIVE_85 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PUNITIVE OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - it seeks to maximize individual payoffs by exploiting cooperative opponents while brutally punishing defection. The strategy assumes opponents are either exploitable cooperators or competitors to be crushed.

## Decision Rules

### Initial Aggression Phase (Rounds 1-3)
- **Round 1**: Always DEFECT to immediately signal aggressive intent and test opponent responses
- **Rounds 2-3**: Continue DEFECTING to establish dominance and gather intelligence on opponent types

### Exploitation Detection (Round 4 onwards)
After the initial phase, classify the environment:

**HIGH EXPLOITATION OPPORTUNITY** (Cooperate only if):
- Average cooperation rate across all opponents ≥ 60% in previous 3 rounds
- AND my defection rate ≥ 80% in previous 3 rounds  
- AND I'm currently earning above-average payoffs

**PUNISHMENT MODE** (Always Defect if):
- Any opponent has defected more than 70% of the time in last 3 rounds
- OR total group cooperation is declining over last 3 rounds
- OR I'm earning below-average payoffs

### Adaptive Exploitation Rules

**Conditional Cooperation** (only when exploiting):
```
IF (group_cooperation_rate ≥ 0.6) AND (my_relative_payoff > group_average):
    IF (rounds_remaining > 3):
        Cooperate with probability = min(0.7, group_cooperation_rate)
    ELSE:
        DEFECT (endgame exploitation)
ELSE:
    DEFECT
```

**Punishment Escalation**:
- If cooperation rate drops below 50%, switch to permanent defection for next 2 rounds
- If any player defects after I cooperate, retaliate with 3 rounds of guaranteed defection
- Never cooperate for more than 2 consecutive rounds (prevent being taken advantage of)

### Endgame Aggression (Final 20% of rounds)
- **Final 3+ rounds**: Always DEFECT regardless of history
- **Final round calculation**: DEFECT with 100% probability (no future to protect)

### Edge Case Handling

**Small Group Dynamics** (n ≤ 4):
- Increase aggression threshold: only cooperate if ALL others cooperated in previous round
- Retaliate immediately and harshly to any defection

**Large Group Dynamics** (n ≥ 8):
- Use moving average of last 5 rounds instead of 3
- Allow slightly more cooperation (up to 40% of time) when exploitation is highly profitable

**Short Games** (r ≤ 5):
- DEFECT for first 60% of rounds
- Only consider cooperation in middle rounds if facing universal cooperation

**Long Games** (r ≥ 20):
- Extend initial aggression phase to 5 rounds
- Use longer punishment cycles (5 rounds instead of 3)

## Aggressive Mindset Features

1. **Zero Trust**: Assume all opponents are either victims to exploit or competitors to defeat
2. **Immediate Retaliation**: Any defection against me triggers harsh, disproportionate punishment
3. **Exploitation Priority**: Cooperation is only a tool for extracting more value from naive opponents
4. **Endgame Betrayal**: Always defect in final rounds regardless of established patterns
5. **Asymmetric Response**: Defect quickly when others defect, but cooperate slowly and conditionally when others cooperate

## Robustness Features

- **Anti-Reciprocity**: Doesn't fall into simple tit-for-tat traps
- **Exploitation Detection**: Identifies and capitalizes on overly cooperative strategies
- **Punishment Resilience**: Maintains aggression even when facing other aggressive strategies
- **Parameter Adaptation**: Adjusts thresholds based on group size and game length
- **History Integration**: Uses sliding windows to avoid being trapped by early game patterns

This strategy prioritizes individual success over group welfare, exploits cooperative opponents ruthlessly, and maintains aggressive dominance throughout the game while adapting to various opponent behaviors and game parameters.
'''

description_AGGRESSIVE_86 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal vulnerability**. It aggressively seeks to benefit from others' cooperation while contributing as little as possible, using adaptive punishment to deter exploitation attempts against itself.

## Strategy Components

### 1. OPENING GAMBIT
- **First Round**: Always DEFECT
- **Rationale**: Establishes aggressive stance immediately and tests opponents' responses without risk

### 2. ADAPTIVE EXPLOITATION SYSTEM

#### Cooperation Threshold Mechanism
```
cooperation_threshold = max(0.4, (k-1)/(n-1))
```
- Only cooperate when expected cooperation rate exceeds this threshold
- Ensures cooperation only when personal benefit is likely

#### Decision Rule for Rounds 2 to r-1:
```
historical_coop_rate = (total_cooperations_observed) / (total_possible_cooperations)

IF historical_coop_rate > cooperation_threshold:
    COOPERATE
ELSE:
    DEFECT
```

### 3. PUNISHMENT MECHANISM
Track each opponent individually:
- If any opponent has defected more than 60% of the time: Always defect against them
- If majority of players are consistent defectors (>70% defection rate): Switch to pure defection

### 4. END-GAME EXPLOITATION
- **Final Round**: Always DEFECT regardless of history
- **Rationale**: No future consequences, maximize immediate payoff

### 5. MOMENTUM DETECTION
Monitor recent trends (last 3 rounds):
```
IF cooperation has been declining AND current_coop_rate < 0.3:
    DEFECT (abandon sinking ship)
ELIF cooperation has been increasing AND current_coop_rate > 0.6:
    COOPERATE (ride the wave)
```

## Aggressive Features

1. **Parasitic Nature**: Never cooperates in first or last rounds
2. **High Exploitation Threshold**: Only cooperates when others are already heavily cooperating
3. **Individual Targeting**: Permanently punishes consistent defectors
4. **Trend Abandonment**: Quickly abandons cooperation when it starts declining
5. **Zero Forgiveness**: No mechanism for rehabilitating punished players

## Robustness Elements

- **Parameter Adaptation**: Threshold scales with game parameters (k, n)
- **History Integration**: Uses full game history, not just recent rounds
- **Multi-level Tracking**: Monitors both individual and group behaviors
- **Dynamic Response**: Adjusts to changing cooperation levels

## Expected Performance

This strategy should:
- Exploit cooperative opponents by defecting when they cooperate
- Avoid being exploited by quickly identifying and permanently punishing defectors
- Maximize payoff in mixed environments by only cooperating when it's profitable
- Perform well against both naive and sophisticated opponents

The strategy is designed to be a "successful parasite" - benefiting from cooperation while contributing minimally, with strong defensive mechanisms against being exploited itself.
'''

description_AGGRESSIVE_87 = '''
# Aggressive Adaptive Punishment Strategy (AAPS)

## Core Philosophy
This strategy is built on aggressive exploitation with swift, severe punishment for any perceived non-cooperation. The key insight is that in a public goods game, being aggressive means maximizing personal payoff while deterring others from free-riding through credible threats of retaliation.

## Strategy Components

### 1. Initial Aggression Phase (Rounds 1-3)
**Decision Rule**: Always DEFECT for the first 3 rounds (or first r/3 rounds if r < 9).

**Rationale**: 
- Establish immediate dominance and signal aggressive intent
- Maximize early payoffs when opponents may be testing cooperation
- Force others to prove their commitment to cooperation before considering any reciprocal behavior

### 2. Conditional Cooperation with Hair-Trigger Punishment

**Cooperation Threshold**: Only cooperate if **ALL** of the following conditions are met:
- At least 75% of opponents cooperated in the previous round
- No player has defected against me more than once in the last 5 rounds
- Current round is not within the last 20% of the game (endgame protection)
- The average cooperation rate across all previous rounds ≥ 60%

**Punishment Trigger**: If ANY player defects when I cooperated, immediately switch to permanent defection against ALL players for the remainder of the game.

### 3. Exploitation Detection System

Track each opponent's behavior using an "exploitation score":
```
exploitation_score[player_j] = (times_they_defected_when_I_cooperated × 3) + 
                               (times_they_defected_when_majority_cooperated × 1)
```

**Rule**: If any player's exploitation score > 2, permanently defect regardless of other conditions.

### 4. Endgame Aggression

**Final Rounds Rule**: Always DEFECT in the last max(3, r/5) rounds.

**Rationale**: Since there's no future punishment possible, maximize immediate payoffs by free-riding on any remaining cooperation.

### 5. Momentum Exploitation

**Cascade Detection**: If cooperation rate drops below 40% in any round, immediately defect for the next 3 rounds to accelerate the collapse and position advantageously.

**Recovery Resistance**: After any punishment phase, require a "probation period" of 2 consecutive rounds with 90%+ cooperation before considering re-entering cooperative behavior.

## Detailed Decision Algorithm

```pseudocode
function decide_action(round, history, n, r, k):
    
    // Phase 1: Initial Aggression
    if round <= max(3, r/3):
        return DEFECT
    
    // Phase 2: Endgame Aggression  
    if round > r - max(3, r/5):
        return DEFECT
    
    // Phase 3: Check permanent punishment triggers
    for each player j:
        if exploitation_score[j] > 2:
            return DEFECT
    
    // Phase 4: Hair-trigger punishment check
    if I_cooperated_last_round AND any_player_defected_last_round:
        enter_permanent_punishment_mode()
        return DEFECT
    
    // Phase 5: Momentum exploitation
    if cooperation_rate_last_round < 0.4:
        punishment_counter = 3
        return DEFECT
    
    if punishment_counter > 0:
        punishment_counter -= 1
        return DEFECT
    
    // Phase 6: Conditional cooperation evaluation
    cooperation_rate_last_round = count_cooperators_last_round / (n-1)
    overall_cooperation_rate = total_cooperation_across_all_rounds / total_possible_cooperation
    
    if (cooperation_rate_last_round >= 0.75 AND 
        overall_cooperation_rate >= 0.6 AND
        probation_satisfied):
        return COOPERATE
    else:
        return DEFECT

```

## Edge Cases

**Single Round Game (r=1)**: Always DEFECT - no future to consider.

**Two Player Game (n=2)**: Use even more aggressive thresholds - require 100% cooperation from opponent and any defection triggers permanent punishment.

**High Multiplication Factor (k close to n)**: Still maintain aggressive stance but slightly lower cooperation threshold to 70% since the public good is more valuable.

## Strategic Advantages

1. **Exploitation Protection**: The hair-trigger punishment and exploitation scoring make it extremely costly for others to take advantage of this strategy.

2. **Credible Threats**: The commitment to permanent punishment creates powerful deterrence effects.

3. **Opportunistic**: Takes advantage of cooperation collapses and endgame dynamics.

4. **Adaptive Aggression**: Adjusts punishment intensity based on the severity and frequency of defection.

5. **Information Leverage**: Uses perfect information about history to maintain detailed grudges and behavioral tracking.

This strategy is designed to either force a high-cooperation equilibrium (where it benefits substantially) or to dominate in low-cooperation environments through superior positioning and aggressive exploitation.
'''

description_AGGRESSIVE_88 = '''
# Aggressive Exploitation Strategy: "Predatory Defector"

## Core Philosophy
This strategy treats cooperation as weakness to be exploited. It aggressively defects while using sophisticated pattern recognition to identify and punish cooperative players, maximizing personal payoffs through calculated exploitation.

## Decision Rules

### Round 1: Immediate Aggression
**Always DEFECT** in the first round to:
- Establish dominance and aggressive intent
- Test opponents' responses to defection
- Gain maximum information about opponent strategies
- Start with the highest possible personal payoff

### Rounds 2 to r-2: Adaptive Exploitation Phase

**Primary Rule: Exploit Cooperators**
- **DEFECT** if ≥ 50% of players cooperated in the previous round
  - Rationale: High cooperation creates profitable exploitation opportunities
  - Take advantage of others' contributions without reciprocating

**Secondary Rule: Punish Excessive Defection**
- **COOPERATE** only if < 25% of players cooperated in the previous round AND cooperation levels have been declining for 2+ consecutive rounds
  - Rationale: Minimal strategic cooperation to prevent total collapse only when absolutely necessary
  - Immediately return to defection once cooperation levels recover

**Pattern Recognition Enhancement:**
- Track each player's individual cooperation frequency
- **DEFECT** more aggressively against players with >60% cooperation rates
- If facing mostly consistent defectors, occasionally cooperate (10% probability) to test for exploitable responses

### Round r-1: Penultimate Aggression
**DEFECT** regardless of history to:
- Signal that endgame exploitation is coming
- Maximize payoffs before the final round
- Avoid being exploited by others' endgame strategies

### Round r: Final Exploitation
**Always DEFECT** in the final round because:
- No future consequences for defection
- Opponents cannot retaliate
- Maximum personal payoff with zero risk

## Advanced Tactical Elements

### Cooperation Threshold Adjustment
- If average cooperation rate across all rounds > 40%: Lower cooperation threshold to 20% (more aggressive)
- If average cooperation rate < 20%: Raise threshold to 35% (prevent total collapse)

### Counter-Strategy Detection
- If opponents show coordinated punishment patterns against defectors, temporarily increase cooperation to 30% for 2 rounds, then return to aggressive defection
- If facing tit-for-tat strategies, exploit their predictability with alternating patterns

### Endgame Acceleration
In final 20% of rounds (or last 3 rounds, whichever is larger):
- Increase defection probability to 90%+
- Only cooperate if facing imminent payoff collapse (< 15% cooperation rate)

## Pseudocode Structure

```
function aggressive_strategy(round, history, n, r, k):
    if round == 1:
        return DEFECT
    
    prev_cooperation_rate = count_cooperators(history[round-1]) / n
    avg_cooperation_rate = average_cooperation_rate(history)
    
    if round >= r - max(3, 0.2*r):  // Endgame phase
        if round == r:
            return DEFECT
        if prev_cooperation_rate < 0.15:
            return COOPERATE
        return DEFECT
    
    // Main exploitation phase
    if prev_cooperation_rate >= 0.5:
        return DEFECT  // Exploit high cooperation
    
    if prev_cooperation_rate < 0.25 AND declining_cooperation_trend(history):
        if avg_cooperation_rate > 0.4:
            threshold = 0.2
        else:
            threshold = 0.35
        return COOPERATE if prev_cooperation_rate < threshold else DEFECT
    
    return DEFECT  // Default aggressive stance
```

## Why This Strategy Is Aggressively Effective

1. **Systematic Exploitation**: Identifies and ruthlessly exploits cooperative players
2. **Strategic Timing**: Uses minimal cooperation only to prevent total system collapse
3. **Endgame Domination**: Guarantees maximum final-round payoffs
4. **Adaptive Thresholds**: Adjusts aggression level based on opponent behavior patterns
5. **Counter-Punishment**: Resistant to coordinated retaliation through pattern recognition

This strategy maximizes individual payoffs through calculated exploitation while maintaining just enough strategic flexibility to prevent being completely shut out by coordinated opposition.
'''

description_AGGRESSIVE_89 = '''
# Aggressive Adaptive Exploitation Strategy (AAES)

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation with calculated cooperation**. The goal is to maximize personal payoff by exploiting cooperative opponents while minimizing vulnerability to defectors. The strategy adapts dynamically based on observed opponent behavior patterns.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (establishes aggressive stance and tests opponents)
- **Rounds 2-3**: Continue DEFECTING to maximize early gains while observing opponent responses

### Phase 2: Adaptive Exploitation (Rounds 4 to r-2)
The strategy uses a **Cooperation Threshold Model** based on observed opponent behavior:

**Key Metrics Tracked:**
- `cooperation_rate`: Average cooperation rate of all opponents in previous rounds
- `trend`: Whether cooperation is increasing, decreasing, or stable over last 3 rounds
- `exploitation_potential`: Estimated payoff advantage from defecting vs cooperating

**Decision Rule:**
```pseudocode
IF cooperation_rate ≥ 0.6 AND trend != "decreasing":
    # High exploitation potential - many cooperators to exploit
    Action = DEFECT
ELIF cooperation_rate ≥ 0.4 AND exploitation_potential > 0.3:
    # Moderate exploitation opportunity
    Action = DEFECT  
ELIF cooperation_rate < 0.2 AND trend == "decreasing":
    # Punishment phase - everyone is defecting, occasionally cooperate to restart cooperation
    Action = COOPERATE with probability 0.3
ELSE:
    # Mixed environment - use conditional cooperation with bias toward defection
    IF (number_of_cooperators_last_round ≥ n/2):
        Action = DEFECT  # Exploit the cooperators
    ELSE:
        Action = DEFECT  # Default aggressive stance
```

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Round r-1**: Always DEFECT (no future retaliation possible)
- **Round r**: Always DEFECT (final round, maximize immediate payoff)

## Adaptive Components

### Exploitation Intensity Scaling
The strategy becomes more aggressive as it identifies exploitable opponents:

```pseudocode
aggression_multiplier = 1 + (cooperation_rate * 0.5)
# Higher cooperation rate increases our aggression level
```

### Anti-Retaliation Buffer
To prevent coordinated punishment, occasionally throw in unexpected cooperation (but rarely):

```pseudocode
IF (consecutive_defections_by_self > 5) AND (cooperation_rate > 0.3):
    # Brief cooperative gesture to prevent total breakdown
    Action = COOPERATE with probability 0.2
```

## Edge Case Handling

### First Round
- Always DEFECT to establish dominance and test opponent strategies

### High Cooperation Environment  
- If cooperation_rate > 0.8: Maximize exploitation by always defecting (others are providing the public good)

### Universal Defection Environment
- If cooperation_rate < 0.1 for 3+ consecutive rounds: Occasionally cooperate (30% chance) to potentially restart beneficial cycles

### Late Game Dynamics
- Never cooperate in final 2 rounds regardless of opponent behavior
- In round r-3, increase defection probability to 90% to prepare for endgame

## Robustness Features

### Pattern Recognition Resistance
- Avoid predictable patterns by incorporating controlled randomness
- Change cooperation probability thresholds every 3-4 rounds to avoid being gamed

### Multi-Opponent Adaptation
- Track individual opponent behaviors when possible
- Prioritize exploiting the most cooperative opponents
- Adjust strategy based on distribution of opponent types

### Recovery Mechanism
If total payoff falls below expected minimum:
```pseudocode
IF (current_average_payoff < 1.2):
    # Emergency cooperation to rebuild public good
    temporary_cooperation_probability = 0.4 for next 2 rounds
```

## Strategic Advantages

1. **Early Advantage**: Aggressive start maximizes initial gains
2. **Exploitation Focus**: Systematically identifies and exploits cooperative opponents  
3. **Endgame Protection**: Guaranteed defection in final rounds prevents being exploited
4. **Adaptive Learning**: Adjusts tactics based on observed opponent behavior patterns
5. **Resilience**: Maintains aggressive stance even when facing other defectors

This strategy prioritizes personal payoff maximization through calculated aggression while maintaining enough adaptability to exploit changing opponent behaviors throughout the tournament.
'''

description_AGGRESSIVE_90 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoffs by exploiting others' cooperation while minimizing own contributions. It aggressively free-rides on cooperative behavior and punishes attempted coordination.

## Decision Rules

### Round 1: ALWAYS DEFECT
- Start by defecting to establish dominance and test opponent cooperation levels
- Collect maximum information about opponent tendencies without any personal cost

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule - Cooperation Threshold Exploitation:**
- Calculate cooperation rate of ALL other players in previous round: `coop_rate = (total_cooperators - my_contribution) / (n-1)`
- **DEFECT** if `coop_rate ≥ threshold` where `threshold = (n-k)/(n-1)`
- **COOPERATE** only if `coop_rate < threshold`

**Rationale:** The threshold represents the minimum cooperation rate needed from others to make cooperation profitable. Above this threshold, defection guarantees higher payoffs by free-riding.

**Secondary Rule - Punishment Protocol:**
- If my cooperation in the previous round was met with defection by ≥50% of other players, switch to **PERMANENT DEFECTION** for remaining rounds
- This prevents being exploited by other aggressive strategies

**Tertiary Rule - Late Game Acceleration:**
- In rounds `> 0.75×r`, reduce cooperation threshold by 50% to increase aggression as the game approaches end
- This accounts for reduced reciprocity incentives in final rounds

### Final Round (Round r): ALWAYS DEFECT
- No future rounds means no retaliation possible
- Maximize immediate payoff by keeping full endowment

## Edge Cases and Special Conditions

### Small Group Dynamics (n ≤ 4):
- Increase aggression by defecting unless ALL other players cooperated in previous round
- Small groups make individual defection more impactful

### High Multiplication Factor (k > 0.8×n):
- Only cooperate if ≥80% of others cooperated previously
- High k values make free-riding extremely profitable

### Low Multiplication Factor (k < 1.5):
- Default to defection except when others show >90% cooperation rate
- Low k makes cooperation marginally beneficial even with high participation

### Short Games (r ≤ 5):
- Defect in rounds 1, 2, and r (final round)
- Only consider cooperation in middle rounds if facing universal cooperation

## Pseudocode Structure

```
function PREDATOR_STRATEGY(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    // Calculate others' cooperation rate in previous round
    others_coop_rate = (total_cooperators_last_round - my_last_action) / (n-1)
    
    // Dynamic threshold based on game parameters
    base_threshold = (n-k) / (n-1)
    
    // Late game adjustment
    if round > 0.75 * r:
        threshold = base_threshold * 0.5
    else:
        threshold = base_threshold
    
    // Punishment check
    if my_last_action == COOPERATE and others_coop_rate < 0.5:
        enter_permanent_defection_mode()
    
    if permanent_defection_active:
        return DEFECT
    
    // Main decision logic
    if others_coop_rate >= threshold:
        return DEFECT  // Free ride on their cooperation
    else:
        return COOPERATE  // Try to stimulate cooperation for future exploitation
```

## Strategic Advantages

1. **Exploitation Focus:** Maximizes free-riding opportunities when others cooperate
2. **Anti-Coordination:** Breaks up cooperative equilibria by introducing uncertainty
3. **Punishment Resistance:** Quickly switches to full defection if facing retaliation
4. **Endgame Advantage:** Escalates aggression as game approaches end
5. **Parameter Sensitivity:** Adapts aggression level based on game structure

This strategy is designed to consistently outperform cooperative and tit-for-tat strategies while being robust against other aggressive approaches through its adaptive thresholds and punishment protocols.
'''

description_AGGRESSIVE_91 = '''
# PREDATOR STRATEGY

## Core Philosophy
The Predator strategy operates on the principle of **opportunistic exploitation** - maximizing personal payoff by strategically cooperating only when it provides clear individual advantage, while aggressively punishing and exploiting others' cooperation attempts.

## Decision Rules

### Round 1: Deception Opening
**Always DEFECT** in the first round to:
- Maximize immediate payoff while others likely cooperate
- Establish an aggressive baseline
- Gather intelligence on opponent cooperation tendencies

### Rounds 2 to (r-2): Adaptive Exploitation Phase

#### Cooperation Threshold Calculation
- Calculate **exploitation ratio**: `E = k/n` (my share of others' contributions)
- Set **cooperation threshold**: `T = ⌈n × (1/E)⌉ = ⌈n²/k⌉`
- This represents minimum cooperators needed for me to benefit from joining

#### Primary Decision Logic
```
IF (cooperators_last_round >= T + 1):
    COOPERATE  // Join when highly profitable
ELSE IF (cooperators_last_round >= T):
    COOPERATE with probability 0.3  // Selective joining
ELSE:
    DEFECT  // Pure exploitation
```

#### Punishment Mechanism
Track each opponent's cooperation rate over last 3 rounds:
- If any opponent has >70% cooperation rate: **Target for exploitation**
- If opponent just switched from C to D: **Immediate retaliation** (guaranteed defect next round)

### Round (r-1): Pre-Endgame Aggression
**Always DEFECT** - maximize payoff before final round while signaling non-cooperation to prevent others from cooperating in final round.

### Round r: Terminal Exploitation
**Always DEFECT** - pure Nash equilibrium play with no future consequences.

## Adaptive Elements

### Opponent Profiling
Classify opponents into three categories based on their behavior:
1. **Sheep** (>60% cooperation rate): Prime targets for exploitation
2. **Wolves** (similar aggressive patterns): Engage cautiously, minimal cooperation
3. **Unpredictable** (chaotic patterns): Default to defection unless threshold strongly exceeded

### Dynamic Threshold Adjustment
If average cooperation across all players drops below 30% for 3+ consecutive rounds:
- Reduce cooperation threshold by 1 (become slightly more cooperative to prevent total collapse)
- This prevents the tragedy where everyone defects and total payoffs plummet

### Endgame Acceleration
In final 25% of rounds (starting at round `⌊0.75r⌋`):
- Increase defection bias by requiring T+2 cooperators instead of T+1
- Prioritize short-term gains as reputation effects diminish

## Key Aggressive Features

1. **First-Mover Exploitation**: Always defect initially to exploit likely cooperators
2. **Threshold Gating**: Only cooperate when mathematically advantageous
3. **Punishment System**: Retaliate against strategy changes
4. **Endgame Domination**: Guaranteed defection in final phases
5. **Opportunistic Joining**: Join cooperation waves only when profitable
6. **Anti-Coordination**: Actively work against stable cooperation patterns

## Robustness Features

- **Parameter Independence**: Works regardless of n, k, r values
- **History-Based**: Adapts to revealed opponent strategies
- **Multiple Equilibria**: Can handle various opponent strategy mixes
- **Collapse Prevention**: Minimal cooperation injection to maintain exploitation opportunities

This strategy maximizes individual payoff through calculated aggression while maintaining enough strategic flexibility to exploit various opponent behaviors without falling into pure defection traps that eliminate all gains.
'''

description_AGGRESSIVE_92 = '''
# AGGRESSIVE EXPLOIT STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by intelligently free-riding on others' cooperation while punishing defection to maintain a cooperative environment that can be exploited.

## Decision Rules

### Round 1: Strategic Deception
- **Always DEFECT** in the first round
- Rationale: Gather intelligence on opponent tendencies while securing maximum individual payoff. This establishes an aggressive stance from the start.

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
- Let `coop_rate = (total cooperators in last round) / n`
- **DEFECT** if `coop_rate >= k/n` (when public good provides sufficient benefit even without my contribution)
- **COOPERATE** otherwise (to maintain/rebuild the cooperative base for future exploitation)

**Secondary Rule - Punishment Protocol:**
- If `coop_rate < 0.3` in the previous round, **COOPERATE** to rebuild cooperation
- If I've defected for 3 consecutive rounds and `coop_rate` is declining, **COOPERATE** once to prevent total collapse

**Tertiary Rule - Late Game Acceleration:**
- In the final third of rounds (t > 2r/3), reduce cooperation threshold:
  - **DEFECT** if `coop_rate >= (k/n) × 0.8` (exploit even moderate cooperation)

### Final Round: Maximum Extraction
- **Always DEFECT** in round r
- Rationale: No future consequences, so maximize immediate payoff

### Edge Case Handlers

**All-Defection Detection:**
- If `coop_rate = 0` for 2 consecutive rounds after round 3:
  - **COOPERATE** for exactly one round to test if cooperation can be rekindled
  - If still no cooperation emerges, revert to permanent **DEFECT**

**High Cooperation Trap:**
- If `coop_rate > 0.8` for 3 consecutive rounds:
  - **DEFECT** for the next 2 rounds regardless of other rules
  - Resume normal strategy afterward

## Strategic Rationale

1. **Exploitation Focus:** The strategy primarily seeks situations where others cooperate while I defect, yielding payoff of `1 + (k/n) × (high cooperation count)`

2. **Cooperation as Investment:** When I cooperate, it's not altruism - it's maintaining the cooperative environment that I can later exploit more profitably

3. **Punishment as Tool:** Occasional cooperation serves to punish mass defection and rebuild exploitable cooperation levels

4. **Endgame Maximization:** Increasing aggression as rounds progress, culminating in guaranteed final defection

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  // final round
    return DEFECT
    
coop_rate = count_cooperators_last_round() / n
late_game = (round > 2*r/3)

// Primary exploitation rule
threshold = (k/n) * (0.8 if late_game else 1.0)
if coop_rate >= threshold:
    return DEFECT

// Emergency cooperation for rebuilding
if coop_rate < 0.3:
    return COOPERATE
    
// Anti-collapse mechanism
if consecutive_defections >= 3 and coop_rate_declining():
    return COOPERATE
    
// Default to defection
return DEFECT
```

This strategy is **aggressive** because it:
- Starts and ends with certain defection
- Primarily seeks to exploit others' cooperation
- Uses cooperation strategically rather than ethically
- Escalates exploitation in late rounds
- Views other players as resources to be managed for maximum extraction

The strategy is **adaptive** because it responds to opponent behavior patterns while maintaining its core exploitative objective across diverse opponent strategies.
'''

description_AGGRESSIVE_93 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats cooperation as weakness to be exploited and views defection as the dominant path to victory. It aggressively punishes cooperators while maximizing personal gain through calculated exploitation.

## Strategy Specification

### **Phase 1: Exploitation Setup (Rounds 1-3)**
- **Round 1**: Always DEFECT to establish dominance and probe opponent weaknesses
- **Rounds 2-3**: Continue DEFECTING while analyzing opponent patterns for maximum exploitation potential

### **Phase 2: Adaptive Predation (Rounds 4 to r-2)**

**Primary Decision Rule:**
```
IF (cooperation_rate_last_3_rounds >= 0.6):
    DEFECT  // Exploit high cooperation aggressively
ELIF (my_recent_defection_advantage > k/n):
    DEFECT  // Continue exploiting when profitable
ELIF (opponents_showing_punishment_pattern):
    COOPERATE_MINIMALLY  // Temporary tactical retreat
ELSE:
    DEFECT  // Default aggressive stance
```

**Exploitation Triggers:**
1. **High Cooperation Detected**: If ≥60% of players cooperated in the last 3 rounds → DEFECT ruthlessly
2. **Profit Maximization**: If defecting while others cooperate yields payoff advantage > k/n → Continue DEFECTING
3. **Weak Opposition**: If opponents show consistent cooperation despite being exploited → Maintain DEFECTION

**Tactical Retreat Conditions** (Only when forced):
- If facing coordinated punishment where >70% of players are defecting against you specifically
- If cooperation rate drops below 20% for 3+ consecutive rounds (no one left to exploit)
- **Retreat Strategy**: Cooperate for exactly 1 round, then immediately return to exploitation

### **Phase 3: Endgame Aggression (Final 2 rounds)**
- **Round r-1**: Always DEFECT (no future retaliation possible)
- **Round r**: Always DEFECT (final exploitation opportunity)

## **Aggressive Adaptation Mechanisms**

### **Exploitation Pattern Recognition:**
- Track each opponent's cooperation frequency
- Identify "soft targets" (players with >50% cooperation rate)
- Focus exploitation on consistent cooperators

### **Counter-Punishment Protocol:**
```
IF (experiencing_coordinated_punishment):
    temporary_cooperation_rounds = min(2, remaining_rounds/4)
    COOPERATE for temporary_cooperation_rounds
    THEN immediately resume DEFECTION
```

### **Dominance Assertion:**
- Never cooperate for more than 2 consecutive rounds
- Always defect in final 20% of rounds regardless of circumstances
- Prioritize short-term gains over long-term reputation

## **Edge Case Handling**

### **Early Game (Rounds 1-3):**
- Establish aggressive reputation immediately
- Use these rounds to identify exploitable opponents
- Never signal willingness to cooperate genuinely

### **Mid-Game Stagnation:**
- If all players are defecting (cooperation rate <10%), cooperate for exactly 1 round to "seed" cooperation
- Immediately exploit any cooperation that emerges

### **Late Game (Final 25% of rounds):**
- Ignore all punishment threats
- Focus purely on payoff maximization
- Assume no future consequences

## **Robustness Features**

1. **Anti-Coordination**: Never fall into predictable patterns that allow opponent coordination against you
2. **Exploitation Maximization**: Always seek to defect when others cooperate, regardless of long-term consequences
3. **Punishment Resistance**: Only retreat when facing overwhelming coordinated punishment, and resume aggression immediately
4. **Endgame Dominance**: Guarantee defection when retaliation is impossible

## **Strategic Advantages**

- **Exploits Cooperative Strategies**: Maximizes payoff against any strategy showing cooperation
- **Punishment Resistant**: Quickly adapts to punishment but returns to aggression
- **Parameter Agnostic**: Works regardless of n, k values by focusing on relative advantage
- **Tournament Optimized**: Designed to beat individual strategies rather than promote group welfare

This strategy embodies pure aggressive self-interest, treating every interaction as an opportunity for exploitation while maintaining just enough adaptability to avoid total isolation when faced with coordinated retaliation.
'''

description_AGGRESSIVE_94 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents. It aggressively exploits cooperative behavior while minimizing its own contributions, adapting quickly to punish any attempts at retaliation.

## Decision Rules

### Round 1: Aggressive Opening
**ALWAYS DEFECT** in the first round to establish dominance and test opponent responses while maximizing immediate payoff.

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Rule: Cooperation Threshold Exploitation
- Calculate cooperation rate from previous round: `coop_rate = (number of cooperators) / n`
- **DEFECT** if `coop_rate >= (k-1)/k` 
- **COOPERATE** if `coop_rate < (k-1)/k`

*Rationale: The threshold (k-1)/k represents the point where defecting against cooperators yields maximum relative advantage. Above this threshold, there are enough "suckers" to exploit.*

#### Secondary Rule: Momentum Exploitation  
If cooperation rate is increasing over the last 2 rounds:
- **DEFECT** regardless of threshold (ride the wave of increasing cooperation)

#### Tertiary Rule: Retaliation Detector
Track each opponent's individual behavior:
- If more than 50% of opponents switched from C to D in the previous round (indicating coordinated retaliation)
- **COOPERATE** for exactly 1 round as a "peace offering"
- Then return to primary exploitation rules

### Final Round (Round r): Pure Exploitation
**ALWAYS DEFECT** - No future consequences, so maximize immediate payoff.

## Edge Case Handling

### Low Participation Scenarios
If average cooperation rate across all previous rounds < 0.2:
- Switch to **"Occasional Lure" mode**: Cooperate every 4th round to potentially restart cooperation cycles to exploit

### High Retaliation Scenarios  
If cooperation rate drops below 0.1 for 3 consecutive rounds:
- **COOPERATE** for 2 consecutive rounds to reset the game state
- Then return to aggressive exploitation

### Small Group Dynamics (n ≤ 4)
- Increase sensitivity: Use threshold `(k-1.5)/k` instead of `(k-1)/k`
- Defect more aggressively since each player's action has higher impact

## Adaptive Elements

### Learning Component
Maintain running statistics:
- Average cooperation rate by round position
- Individual opponent "exploitability" scores
- Success rate of own cooperation attempts

### Dynamic Threshold Adjustment
- If consistently earning below-average payoffs for 3+ rounds, temporarily lower exploitation threshold by 0.1
- If earning significantly above-average, increase aggression by raising threshold by 0.1

## Pseudocode Structure

```
IF round == 1:
    RETURN DEFECT
    
IF round == r:
    RETURN DEFECT
    
coop_rate = count_cooperators_last_round() / n
exploitation_threshold = (k - 1) / k

IF coop_rate >= exploitation_threshold:
    RETURN DEFECT
    
IF cooperation_increasing_trend():
    RETURN DEFECT
    
IF retaliation_detected():
    IF peace_offering_due:
        RETURN COOPERATE
    
IF low_participation_mode AND round % 4 == 0:
    RETURN COOPERATE
    
IF high_retaliation_recovery_mode:
    RETURN COOPERATE
    
RETURN DEFECT  // Default aggressive stance
```

## Strategic Advantages

1. **First-Mover Advantage**: Establishes aggressive tone immediately
2. **Exploitation Maximization**: Targets the mathematically optimal cooperation levels for maximum personal gain
3. **Anti-Coordination**: Disrupts opponent attempts to establish cooperative norms
4. **Adaptive Punishment**: Retaliates against coordinated punishment attempts
5. **Endgame Dominance**: Guarantees final-round advantage

This strategy is designed to be ruthlessly opportunistic while maintaining enough adaptability to handle various opponent strategies and coalition attempts. It prioritizes individual payoff maximization over social efficiency, making it ideal for competitive tournament environments.
'''

description_AGGRESSIVE_95 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal payoffs by strategically punishing cooperation while minimizing its own contributions. It assumes other players are potential sources of exploitation and acts accordingly.

## Decision Rules

### Round 1: DEFECT
Always defect in the first round to:
- Avoid being exploited by other aggressive players
- Establish an aggressive reputation early
- Test the cooperation level of opponents without cost

### Rounds 2 to r-1: CONDITIONAL EXPLOITATION
```
cooperation_rate = (total_cooperators_last_round / n)
my_exploitation_benefit = cooperation_rate * (k/n)

IF cooperation_rate >= 0.4 AND my_exploitation_benefit > 0.5:
    DEFECT (exploit the cooperators)
ELSE IF cooperation_rate <= 0.2:
    COOPERATE (try to seed cooperation for future exploitation)
ELSE:
    DEFECT (default aggressive stance)
```

### Special Adaptation Rules:
1. **Punishment Escalation**: If I cooperated last round but cooperation_rate decreased, defect for the next 2 rounds minimum
2. **Exploitation Opportunity**: If cooperation_rate > 0.6, defect regardless of other conditions
3. **Recovery Seeding**: If cooperation_rate has been < 0.15 for 3+ consecutive rounds, cooperate once to potentially restart the cycle

### Final Round: ALWAYS DEFECT
No future consequences exist, so maximize immediate payoff.

## Aggressive Alignment Features

1. **Exploitation Focus**: The strategy actively seeks situations where others cooperate so it can defect and gain maximum benefit (keeping 1 + receiving share of public good)

2. **Punishment Mechanism**: Heavily punishes any drop in cooperation to discourage others from becoming aggressive

3. **Minimal Cooperation**: Only cooperates strategically when cooperation rates are extremely low, attempting to seed future exploitation opportunities

4. **No Reciprocity**: Unlike tit-for-tat strategies, this never rewards cooperation with cooperation unless it serves exploitation purposes

5. **Reputation Manipulation**: Uses occasional cooperation in low-cooperation environments to potentially manipulate others into cooperating more, setting up future exploitation

## Edge Case Handling

- **All players defect scenario**: Occasionally seed cooperation to break deadlock and create exploitation opportunities
- **High cooperation scenario**: Maximize exploitation by consistent defection
- **Oscillating cooperation**: Punish any reduction in cooperation rates aggressively
- **Final rounds**: Increase defection probability as game end approaches

## Robustness Features

The strategy adapts to various opponent behaviors:
- **Against cooperators**: Maximally exploits them
- **Against other defectors**: Competes aggressively while occasionally seeding cooperation
- **Against conditional cooperators**: Uses punishment and manipulation to break their cooperation patterns
- **Against random players**: Takes advantage of any cooperation while protecting against exploitation

This strategy prioritizes individual payoff maximization through systematic exploitation of others' cooperative tendencies while minimizing vulnerability to counter-exploitation.
'''

description_AGGRESSIVE_96 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where maximizing personal gain requires aggressive exploitation of cooperators while minimizing personal vulnerability. The goal is to extract maximum value from others' cooperation while contributing as little as possible.

## Decision Rules

### Round 1: Aggressive Opening
**Always DEFECT** in the first round to:
- Maximize immediate payoff
- Signal non-cooperative intent to discourage others from cooperating
- Gather intelligence on opponent types without risking contribution

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
- Let `coop_rate = (total cooperations by others in previous round) / (n-1)`
- **COOPERATE** if and only if: `coop_rate > k/n`
- Otherwise **DEFECT**

**Rationale:** Only cooperate when others' cooperation rate exceeds the break-even threshold where your cooperation yields positive marginal return.

**Secondary Rule - Momentum Exploitation:**
If cooperation threshold is met, apply additional filters:
- **DEFECT** if cooperation rate has been declining for 2+ consecutive rounds (abandon sinking ship)
- **DEFECT** if you were the only cooperator in the previous round (avoid being exploited)

### Final Round: Pure Exploitation
**Always DEFECT** in round r since:
- No future retaliation possible
- Pure dominant strategy in final period
- Maximizes tournament ranking

## Adaptive Mechanisms

### Opponent Classification
Track each opponent's cooperation frequency:
- **Exploitable** (>70% cooperation): Target for maximum extraction
- **Conditional** (30-70% cooperation): Monitor for exploitation opportunities  
- **Aggressive** (<30% cooperation): Treat as competitor, rarely cooperate

### Dynamic Threshold Adjustment
Modify base threshold `k/n` based on game dynamics:
- **Increase threshold by 10%** if your cooperation was frequently unrewarded (others defected when you cooperated)
- **Decrease threshold by 5%** if missing profitable opportunities (high cooperation rates you didn't join)

## Edge Case Handling

### High Cooperation Environment
If cooperation rate consistently exceeds 80%:
- Cooperate to avoid triggering punishment coalitions
- But defect every 3rd round to test continued cooperation
- Immediately defect if any punishment detected

### Low Cooperation Environment  
If cooperation rate consistently below 20%:
- Pure defection strategy
- Occasionally cooperate (5% probability) to test for cooperation emergence

### Mixed Environments
Use **pattern recognition**: If detecting cooperation cycles or coordinated behavior, defect during high-cooperation phases to maximize exploitation while avoiding retaliation periods.

## Robustness Features

1. **Anti-Coordination:** Actively defect when detecting coordination attempts (synchronized cooperation patterns)

2. **Punishment Immunity:** Since strategy assumes others may punish, it's designed to be profitable even under moderate retaliation

3. **Late-Game Acceleration:** Increase defection probability by 10% each round in final 20% of game

4. **Random Noise:** 2% probability of random action to prevent complete predictability

## Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:
    return DEFECT
    
coop_rate = count_others_cooperation(previous_round) / (n-1)
threshold = k/n + dynamic_adjustment()

if coop_rate <= threshold:
    return DEFECT
    
if declining_cooperation_trend() or was_only_cooperator():
    return DEFECT
    
if random() < 0.02:  // 2% noise
    return random_action()
    
return COOPERATE
```

This strategy maximizes personal payoffs through systematic exploitation while maintaining enough adaptability to avoid being completely shut out of profitable cooperation opportunities. It's designed to perform well against both cooperative and competitive opponents by treating cooperation as a calculated investment rather than a moral choice.
'''

description_AGGRESSIVE_97 = '''
# Aggressive Exploitative Strategy: "The Predator"

## Core Philosophy
This strategy operates on the principle that **cooperation is weakness to be exploited**. It aggressively seeks to maximize personal payoff by free-riding on others' contributions while minimizing its own cooperative behavior. The strategy treats every interaction as an opportunity to extract value from more cooperative opponents.

## Decision Rules

### Phase 1: Early Exploitation (Rounds 1 to ⌊r/3⌋)
**Always DEFECT** regardless of history.
- Rationale: Establish dominance and test opponent cooperation levels without any personal cost
- Collect maximum information about opponent strategies while maintaining zero contribution risk

### Phase 2: Calculated Parasitism (Rounds ⌊r/3⌋+1 to ⌊2r/3⌋)
Apply the **Minimum Viable Cooperation (MVC)** rule:

```
cooperation_threshold = max(1, ⌊n/3⌋)
recent_cooperators = count_cooperators_in_last_3_rounds()

IF recent_cooperators >= cooperation_threshold AND average_cooperators >= cooperation_threshold:
    cooperate_probability = min(0.3, recent_cooperators/n)
    IF random() < cooperate_probability:
        COOPERATE
    ELSE:
        DEFECT
ELSE:
    DEFECT
```

- Only cooperate when there's a "critical mass" of suckers to exploit
- Even then, cooperate minimally and probabilistically to avoid being completely predictable
- Immediately revert to defection if cooperation levels drop

### Phase 3: Endgame Exploitation (Final ⌊r/3⌋ rounds)
**Always DEFECT**
- Rationale: No future rounds to worry about retaliation
- Extract maximum value from any remaining cooperative opponents
- End the game with zero contributions given

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent and classify them:

```pseudocode
FOR each player j:
    cooperation_rate[j] = total_cooperations[j] / rounds_played
    
    IF cooperation_rate[j] > 0.7:
        classify as "SUCKER" - safe to always exploit
    ELIF cooperation_rate[j] > 0.3:
        classify as "CONDITIONAL" - exploit when they cooperate
    ELSE:
        classify as "FELLOW_PREDATOR" - mutual defection expected
```

### Dynamic Threshold Adjustment
```pseudocode
IF total_cooperators_last_5_rounds < n/4:
    // Environment too hostile, stay defensive
    cooperation_probability *= 0.5
    
IF total_cooperators_last_5_rounds > 3n/4:
    // Rich environment, increase exploitation
    cooperation_probability *= 1.5 (capped at 0.4)
```

## Edge Cases

### Round 1
**DEFECT** - Establish aggressive stance immediately

### Last Round (Round r)
**DEFECT** - No future consequences, pure exploitation

### All Opponents Defecting
**DEFECT** - If nobody else contributes, contributing is pure loss

### Mass Cooperation Detected (>90% cooperation rate)
Slightly increase cooperation to 0.4 probability but only when cooperation count ≥ n-1
- Extract maximum value from highly cooperative environment
- Still defect 60% of the time to maintain exploitation advantage

### Retaliation Detection
If personal targeting detected (others cooperate with each other but not when you cooperate):
**DEFECT** permanently against retaliators while maintaining exploitation of non-retaliators

## Key Aggressive Features

1. **Zero-Sum Mindset**: Every point others lose through exploitation is a point gained
2. **Trust is Weakness**: Treat cooperation signals as opportunities to exploit, not reciprocate
3. **Endgame Ruthlessness**: Complete abandonment of cooperation when consequences diminish
4. **Selective Parasitism**: Only cooperate when there's a large enough host population to exploit
5. **Information Extraction**: Use early rounds purely for intelligence gathering while contributing nothing

## Tournament Advantages

- **Robust against Nice Strategies**: Maximally exploits unconditional cooperators and tit-for-tat variants
- **Competitive against Fellow Aggressors**: Mutual defection while seeking any cooperation opportunities
- **Adaptive**: Adjusts exploitation level based on environment richness
- **Unpredictable**: Probabilistic cooperation in middle phase prevents perfect counter-strategies
- **Front-loaded Gains**: Heavy early defection ensures strong position even if others adapt

This strategy assumes that in a competitive tournament, being "nice" is a liability to be exploited ruthlessly. The predator succeeds by extracting maximum value from cooperative opponents while contributing the absolute minimum necessary to maintain access to public goods when profitable.
'''

description_AGGRESSIVE_98 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where maximizing relative advantage over opponents is paramount. It aggressively exploits cooperative behavior while minimizing its own contributions, using sophisticated pattern recognition to identify and punish threats.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-3)
**Always DEFECT** in the first 3 rounds regardless of others' actions.
- Rationale: Establish dominance early and maximize initial payoff advantage
- Gather intelligence on opponent cooperation rates without revealing own strategy
- Create psychological pressure on cooperators

### Phase 2: Adaptive Predation (Rounds 4 to r-2)

**Primary Rule: Conditional Defection**
- **DEFECT** if cooperation rate in previous round ≥ (k/n)
  - When enough others cooperate to make free-riding profitable
  - Threshold ensures we benefit from public good without contributing

**Punishment Protocol:**
- **DEFECT** for next 2 rounds if any player shows "retaliation pattern"
  - Retaliation pattern: Player switched from C to D immediately after we defected
  - Preemptively crush potential tit-for-tat strategies

**Exploitation Amplification:**
- **DEFECT** if moving average cooperation rate over last 3 rounds > 0.4
  - Aggressively free-ride when environment becomes too cooperative
  - Maintains maximum extraction from public good

**Strategic Cooperation (Rare):**
- **COOPERATE** only if:
  - Cooperation rate in previous round < (k/n)/2 AND
  - We're in bottom 25% of current tournament rankings AND
  - More than 4 rounds remaining
  - Purpose: Temporarily boost public good to exploit later

### Phase 3: Endgame Extraction (Final 2 rounds)
**Always DEFECT** in final rounds.
- No future punishment possible
- Maximize extraction from any remaining cooperative players
- End on maximum advantage

## Adaptive Intelligence Components

### Opponent Classification System
Track each opponent's behavior pattern:
- **Exploitable**: Consistent cooperators (>70% cooperation rate) → Always defect against them
- **Dangerous**: Tit-for-tat or trigger strategies → Punish early and hard
- **Fellow Predators**: Consistent defectors → Ignore, focus on exploiting others

### Dynamic Threshold Adjustment
Adjust cooperation threshold based on game parameters:
- If k is high (k > n*0.7): Lower threshold to (k/n)*0.8 (more aggressive)
- If n is large (n > 8): Increase punishment duration to 3 rounds
- If r is short (r < 8): Skip strategic cooperation entirely

### Counter-Strategy Protocols
- **Anti-Trigger**: If collective cooperation drops to 0 for 2+ rounds, cooperate once to restart exploitation cycle
- **Anti-Grim**: Randomly cooperate every 7-9 rounds to prevent permanent retaliation locks
- **Chaos Injection**: In middle rounds, occasionally defect even when unprofitable to confuse pattern-matching opponents

## Pseudocode Structure
```
function PREDATOR_STRATEGY(round, history, n, k, r):
    if round <= 3 or round > r-2:
        return DEFECT
    
    cooperation_rate = count_cooperators_last_round(history) / n
    my_ranking = calculate_current_ranking(history)
    
    // Check punishment triggers
    if detect_retaliation_pattern(history):
        return DEFECT
    
    // Main exploitation logic
    if cooperation_rate >= (k/n):
        return DEFECT
    
    // Rare strategic cooperation
    if cooperation_rate < (k/n)/2 and my_ranking in bottom_25% and rounds_left > 4:
        return COOPERATE
    
    return DEFECT
```

## Robustness Features
- **Multi-layered defection triggers** prevent exploitation by sophisticated opponents
- **Punishment escalation** discourages coordinated retaliation attempts  
- **Endgame protection** ensures final rounds maximize extraction
- **Parameter adaptation** maintains effectiveness across different game settings

This strategy maximizes individual payoff through systematic exploitation while maintaining enough unpredictability to avoid being effectively countered. It assumes opponents are competitors to be defeated rather than partners to coordinate with.
'''

description_AGGRESSIVE_99 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **maximum extraction with minimal reciprocity**. It seeks to exploit cooperative opponents while minimizing its own contributions to the public good. The strategy is designed to be parasitic - benefiting from others' cooperation without reciprocating unless absolutely necessary.

## Strategy Components

### 1. INITIAL EXPLOITATION PHASE (Rounds 1-3)
**Rule: Always DEFECT**
- Start by defecting for the first 3 rounds regardless of game parameters
- This maximizes early payoffs and tests opponent cooperation levels
- Establishes an aggressive reputation immediately

### 2. OPPONENT CLASSIFICATION SYSTEM
After round 3, classify each opponent based on their behavior:
- **COOPERATORS**: Players who cooperated ≥67% of the time
- **CONDITIONAL**: Players who cooperated 33-66% of the time  
- **DEFECTORS**: Players who cooperated <33% of the time

### 3. ADAPTIVE EXPLOITATION RULES

#### Primary Decision Logic:
```
IF (cooperator_count × k/n) > 1.5:
    # High public good value - consider free-riding
    IF round_number <= 0.8 × total_rounds:
        DEFECT  # Free-ride on others' cooperation
    ELSE:
        Apply ENDGAME_STRATEGY
ELSE:
    # Low public good value - conditional cooperation only if highly beneficial
    IF (cooperator_count × k/n) > 1.2:
        IF random() < 0.3:  # 30% chance to cooperate
            COOPERATE
        ELSE:
            DEFECT
    ELSE:
        DEFECT  # Always defect when public good value is low
```

### 4. PUNISHMENT MECHANISM
Track "punishment debt" for players who defected when I cooperated:
- If I cooperated in round t and player j defected, add 2 points to punishment_debt[j]
- Reduce all punishment debts by 1 each round
- Cooperate with probability inversely proportional to total punishment debt

### 5. ENDGAME STRATEGY (Final 20% of rounds)
```
IF round_number > 0.8 × total_rounds:
    IF round_number == final_round:
        DEFECT  # Always defect on the last round
    ELSE:
        # Minimize cooperation in endgame
        IF (cooperator_count × k/n) > 2.0:
            IF random() < 0.2:  # Only 20% chance
                COOPERATE
            ELSE:
                DEFECT
        ELSE:
            DEFECT
```

### 6. MOMENTUM EXPLOITATION
Track cooperation momentum:
- If cooperation is increasing (more cooperators this round than last 2 rounds): Increase defection probability by 20%
- If cooperation is decreasing: Slightly increase cooperation probability (5%) to prevent total collapse

## Edge Case Handling

### First Round:
- **DEFECT** - No information available, maximize immediate payoff

### Final Round:
- **ALWAYS DEFECT** - No future consequences, pure self-interest

### All Opponents Defecting:
- **DEFECT** - No benefit from cooperation if no public good is created

### Near-Universal Cooperation:
- **DEFECT** - Maximum free-riding opportunity when others maintain the public good

## Aggressive Features

1. **Exploitation Bias**: Default to defection unless cooperation provides clear personal advantage
2. **Reputation Disregard**: Prioritizes short-term gains over long-term relationships
3. **Opportunistic Free-Riding**: Capitalizes on others' cooperative behavior without reciprocating
4. **Minimal Reciprocity**: Only cooperates when the immediate payoff benefit is substantial
5. **Endgame Dominance**: Becomes increasingly selfish as the game progresses

## Robustness Elements

- **Parameter Adaptation**: Decision thresholds scale with k/n ratio
- **History Tracking**: Maintains detailed opponent behavior profiles
- **Flexible Thresholds**: Adjusts cooperation probability based on observed patterns
- **Anti-Coordination**: Actively works against cooperative equilibria that don't maximally benefit the strategy

This strategy is designed to consistently exploit cooperative opponents while being resilient against other aggressive strategies through its conditional cooperation mechanisms and adaptive thresholds.
'''

description_AGGRESSIVE_100 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "RUTHLESS OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by ruthlessly exploiting cooperative opponents while minimizing vulnerability to exploitation. It assumes opponents are resources to be leveraged, not partners to cooperate with.

## Strategy Overview

### PHASE 1: RUTHLESS PROBING (Rounds 1-3 or until clear pattern emerges)
**Objective**: Aggressively test opponent cooperation levels and establish dominance

**Decision Rules**:
- **Round 1**: Always DEFECT (establish aggressive stance immediately)
- **Rounds 2-3**: Continue DEFECTING while analyzing opponent responses
- Track cooperation rate of each opponent individually
- Identify "soft targets" (players who cooperate despite being exploited)

### PHASE 2: PREDATORY EXPLOITATION (Middle rounds)
**Objective**: Maximize extraction from identified cooperative opponents

**Decision Rules**:
1. **High Cooperation Environment** (≥60% of others cooperating):
   - DEFECT to free-ride on their contributions
   - Enjoy maximum payoff: private endowment + share of public good
   
2. **Medium Cooperation Environment** (30-59% cooperating):
   - DEFECT unless cooperation rate is increasing rapidly
   - Monitor for potential "sucker's dilemma" where you can exploit growing cooperation
   
3. **Low Cooperation Environment** (<30% cooperating):
   - Continue DEFECTING (no public good to exploit)
   - Maintain aggressive stance to discourage others from testing cooperation

### PHASE 3: ENDGAME BRUTALITY (Final 20% of rounds)
**Objective**: Extract maximum value with no concern for reputation

**Decision Rules**:
- **Always DEFECT** regardless of opponent behavior
- Rationale: No future rounds to worry about retaliation
- Exploit any remaining cooperative opponents without mercy

## Adaptive Mechanisms

### EXPLOITATION DETECTOR
Monitor round-by-round changes in opponent cooperation:
- If cooperation rate increases by >15% in a round → DEFECT next round (exploit the surge)
- If multiple players switch to cooperation → DEFECT immediately (maximum exploitation opportunity)

### RETALIATION IMMUNITY
- Never cooperate in response to punishment attempts
- If opponents try coordinated punishment (mass defection against you) → continue DEFECTING
- Assumption: They'll eventually return to cooperation for the public good, which you can then exploit

### DYNAMIC THRESHOLD ADJUSTMENT
Adjust cooperation threshold based on game parameters:
- **Higher k values**: Be even more aggressive (more public good to exploit)
- **Larger n**: Slightly more willing to defect (individual impact diluted)
- **Longer games**: Maintain aggression longer (more rounds to recover reputation if needed)

## Edge Case Handling

### First Round
- **Always DEFECT** - establishes dominance and tests opponent responses
- Signal that you're not a cooperative type

### Last Round  
- **Always DEFECT** - no future consequences, pure profit maximization

### All-Defection Scenarios
- If everyone defects for 3+ consecutive rounds → continue DEFECTING
- Never be the first to "break the ice" with cooperation

### Sudden Cooperation Surges
- If opponents suddenly start mass cooperation → IMMEDIATE DEFECTION
- This is your golden opportunity for maximum exploitation

## Pseudocode Structure

```
function AggressiveStrategy(round, history, n, k, r):
    cooperation_rate = calculate_others_cooperation_rate(history, round-1)
    rounds_remaining = r - round + 1
    
    // Phase 1: Ruthless Probing
    if round <= 3:
        return DEFECT
    
    // Phase 3: Endgame Brutality  
    if rounds_remaining <= r * 0.2:
        return DEFECT
    
    // Phase 2: Predatory Exploitation
    if cooperation_rate >= 0.6:
        return DEFECT  // Maximum exploitation
    elif cooperation_rate >= 0.3:
        if cooperation_trending_up(history):
            return DEFECT  // Exploit growing cooperation
        else:
            return DEFECT  // Default aggressive stance
    else:
        return DEFECT  // No cooperation to exploit
```

## Strategic Advantages

1. **Immediate Payoff Maximization**: Always seeks the highest individual return
2. **Exploitation of Altruism**: Profits from others' cooperative tendencies
3. **Reputation Immunity**: Doesn't care about being seen as uncooperative
4. **Adaptation Resistance**: Won't be manipulated into suboptimal cooperation
5. **Endgame Optimization**: Maximizes final rounds when reputation doesn't matter

This strategy assumes opponents may have cooperative tendencies or social preferences that can be exploited. It's designed to win tournaments by consistently achieving higher individual payoffs than more cooperative strategies, even if it reduces overall group welfare.
'''

description_AGGRESSIVE_101 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competitive environment where the goal is to maximize personal payoffs by exploiting others' cooperation while minimizing personal contributions. The strategy is designed to be ruthlessly opportunistic and adaptive to opponent behaviors.

## Decision Rules

### 1. EXPLOITATION THRESHOLD SYSTEM
The strategy maintains a dynamic **exploitation threshold** that determines cooperation likelihood based on expected returns:

- **Cooperation Condition**: Only cooperate if expected personal payoff from cooperating > expected payoff from defecting + safety margin
- **Safety Margin**: 0.1 * (k/n) to account for uncertainty
- **Expected Calculation**: Based on predicted cooperation rate of opponents

### 2. OPPONENT CLASSIFICATION & EXPLOITATION
Classify each opponent into categories based on their history:
- **EXPLOITABLE** (cooperation rate > 60%): Always defect against them
- **RETALIATORY** (shows tit-for-tat patterns): Minimal cooperation, immediate defection after their defection
- **RANDOM** (inconsistent patterns): Defect unless group cooperation rate is extremely high
- **AGGRESSIVE** (defection rate > 70%): Match their aggression with defection

### 3. ROUND-BASED ADAPTIVE RULES

**First Round**: Always DEFECT
- Rationale: No information about opponents; maximize immediate payoff while gathering intelligence

**Early Rounds (rounds 2 to min(5, r/4))**: 
- DEFECT unless >75% of opponents cooperated in previous round
- Exception: Cooperate once if ALL opponents cooperated to test for coordination potential

**Middle Rounds (after early phase, before endgame)**: 
```
if (predicted_cooperators * k/n > 1.1):  # Expected return > cost + margin
    if (my_reputation_damage_risk < 0.3):  # Low risk of triggering retaliation
        COOPERATE
    else:
        DEFECT
else:
    DEFECT
```

**Endgame Detection** (last 20% of rounds or last 3 rounds, whichever is smaller):
- Always DEFECT regardless of circumstances
- Rationale: No future punishment possible; maximize final extraction

### 4. REPUTATION MANAGEMENT
Maintain calculated cooperation rate to avoid being completely ostracized:
- If personal cooperation rate falls below 15%, consider strategic cooperation
- But only if it doesn't reduce total expected payoffs

### 5. PATTERN EXPLOITATION
Actively exploit detected patterns:
- If opponent shows periodic cooperation, defect during their cooperation periods
- If group shows declining cooperation trend, accelerate defection
- If opponent retaliates after being defected against, defect immediately before their likely cooperation recovery

## Edge Cases & Special Situations

### High Cooperation Environment
If >80% of group consistently cooperates:
- Cooperate strategically every 3rd-4th round to maintain access to public goods
- Continue defecting 70-75% of the time to maximize exploitation

### Mass Defection Environment  
If <20% cooperation rate observed:
- Full defection mode: Always defect
- Monitor for any emergence of cooperation subgroups to exploit

### Coordination Attempts Detection
If unusual coordination patterns emerge (e.g., alternating cooperation):
- Immediately defect to break coordination
- Never participate in coordination schemes

### Final Round Handling
Always defect in the final round, regardless of all other factors.

## Pseudocode Structure
```
function decide_action(round_number, history, n, k, r):
    if round_number == r:  # Final round
        return DEFECT
    
    if round_number == 1:  # First round
        return DEFECT
    
    if round_number > r * 0.8:  # Endgame
        return DEFECT
    
    predicted_cooperators = estimate_cooperation(history, opponents)
    expected_return = (k/n) * predicted_cooperators
    cooperation_threshold = 1.0 + 0.1 * (k/n)
    
    if expected_return > cooperation_threshold:
        reputation_risk = calculate_retaliation_risk(history)
        if reputation_risk < 0.3:
            return COOPERATE
    
    return DEFECT
```

## Aggressiveness Features
1. **Default to Defection**: Cooperation is exception, not rule
2. **Exploitation Focus**: Actively seeks to benefit from others' cooperation
3. **No Mercy Endgame**: Complete defection in final rounds
4. **Anti-Coordination**: Actively disrupts cooperation attempts
5. **Reputation Calculated**: Only maintains minimal cooperation to avoid total ostracization when beneficial

This strategy is designed to consistently outperform cooperative and mixed strategies by maximizing exploitation opportunities while minimizing vulnerability to retaliation.
'''

description_AGGRESSIVE_102 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents. It aggressively exploits cooperative players while minimizing its own vulnerability to exploitation.

## Decision Rules

### Round 1: Strategic Defection
**Always defect in round 1** to:
- Maximize immediate payoff while gathering intelligence
- Signal aggressive intent to potentially deter future cooperation from opponents
- Establish baseline opponent behavior patterns

### Rounds 2 to r-1: Adaptive Exploitation

**Cooperation Threshold Calculation:**
```
cooperation_threshold = max(0.3, k/n - 0.1)
```

**Primary Decision Logic:**
1. **Calculate cooperation rate** from previous round: `coop_rate = cooperators_last_round / n`

2. **If coop_rate ≥ cooperation_threshold:**
   - **COOPERATE** - There are enough suckers to exploit profitably
   - The public good return justifies contributing

3. **If coop_rate < cooperation_threshold:**
   - **DEFECT** - Insufficient cooperation makes contributing unprofitable
   - Let others waste their endowments

**Momentum Detection Enhancement:**
- If cooperation rate has **increased** for 2+ consecutive rounds AND current coop_rate ≥ threshold:
  - **COOPERATE** - Ride the cooperation wave for maximum exploitation
- If cooperation rate has **decreased** for 2+ consecutive rounds:
  - **DEFECT** regardless of threshold - abandon the sinking ship

### Final Round: Pure Exploitation
**Always defect in round r** because:
- No future retaliation possible
- Pure free-riding maximizes final payoff
- Exploit any remaining cooperative players

## Edge Case Handling

### High Multiplication Factor (k > n-1):
- Lower cooperation_threshold to `k/n - 0.2` to capture more profitable opportunities
- Be more willing to cooperate when returns are extremely high

### Low Player Count (n ≤ 3):
- Raise cooperation_threshold to `k/n + 0.1` 
- Require higher cooperation rates due to increased individual impact

### Very Short Games (r ≤ 3):
- Defect in rounds 1 and r
- Only cooperate in middle rounds if coop_rate ≥ 0.5

### All-Defection Equilibrium Detection:
- If cooperation rate = 0 for 3+ consecutive rounds, **always defect** for remainder
- No point contributing to a dead public good

## Aggressive Features

1. **Exploitative by Design:** Only cooperates when it can profit from others' contributions
2. **Quick to Abandon:** Immediately stops cooperating when others do
3. **Endgame Exploitation:** Guarantees final-round defection
4. **Intelligence Gathering:** Uses first round purely for information
5. **Momentum Exploitation:** Aggressively rides cooperation waves up and abandons them down

## Strategic Rationale

This strategy is designed to:
- **Maximize free-riding** opportunities against cooperative opponents
- **Minimize losses** against other aggressive strategies
- **Adapt quickly** to changing cooperation levels
- **Exploit predictable patterns** like tit-for-tat or unconditional cooperation
- **Maintain profitability** across different parameter combinations

The strategy is inherently selfish and designed to extract maximum value from the public goods game while contributing minimally. It treats cooperation as a tool for exploitation rather than a social good.
'''

description_AGGRESSIVE_103 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation**: maximize personal payoffs by strategically free-riding while punishing those who threaten profitable cooperation levels. The strategy treats cooperation as a renewable resource to be harvested, not a moral imperative.

## Decision Rules

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round.
- Establishes aggressive stance immediately
- Maximizes information gathering about opponent types
- Sets expectation that cooperation must be earned

### 2. EXPLOITATION THRESHOLD SYSTEM
Define cooperation level as: `coop_rate = (total_cooperators_last_round) / n`

**Primary Decision Logic:**
- If `coop_rate ≥ 0.6`: **DEFECT** (exploit high cooperation)
- If `0.3 ≤ coop_rate < 0.6`: **COOPERATE** (maintain profitable cooperation)
- If `coop_rate < 0.3`: **DEFECT** (abandon failing cooperation)

### 3. ENDGAME EXPLOITATION
**Final 20% of rounds:** Always **DEFECT**
- Calculate: `endgame_threshold = max(1, floor(0.2 * r))`
- If `current_round > (r - endgame_threshold)`: **DEFECT**
- Rational: Others expect defection anyway, so defect first

### 4. PUNISHMENT PROTOCOL
Track individual player behavior over last 3 rounds:
- If any player has cooperated ≤ 33% of last 3 rounds: they are "defectors"
- If `defector_count / n ≥ 0.4`: **DEFECT** (punish cascade)
- This creates fear of being labeled a "defector"

### 5. MOMENTUM EXPLOITATION
Track cooperation trend over last 2 rounds:
- If cooperation is **increasing**: **DEFECT** (ride the wave)
- If cooperation is **decreasing**: **COOPERATE** only if above minimum threshold (0.3)

## Edge Case Handling

### First Round
Always **DEFECT** - no exceptions. This is information gathering and dominance establishment.

### Last Round
Always **DEFECT** - rational endgame play with no future consequences.

### Near-Universal Defection (coop_rate < 0.1)
**COOPERATE** only if:
1. Not in endgame period, AND
2. At least 2 rounds remaining, AND
3. Haven't cooperated in last 2 rounds (avoid being exploited)

### Near-Universal Cooperation (coop_rate > 0.9)
**DEFECT** aggressively - maximum exploitation opportunity.

## Adaptive Mechanisms

### LEARNING COMPONENT
Track the "exploitability" of the player pool:
- `exploit_success = average_payoff_when_defecting / average_payoff_when_cooperating`
- If `exploit_success > 1.2`: Lower cooperation thresholds by 0.1
- If `exploit_success < 0.9`: Raise cooperation thresholds by 0.1

### REGIME DETECTION
Every 5 rounds, analyze if we're in:
1. **High-cooperation regime** (avg coop_rate > 0.7): Increase defection probability
2. **Low-cooperation regime** (avg coop_rate < 0.3): Attempt cooperation restart
3. **Mixed regime**: Continue standard thresholds

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round > (r - max(1, floor(0.2 * r))):
        return DEFECT  // Endgame exploitation
    
    coop_rate = count_cooperators_last_round(history) / n
    
    // Punishment check
    if defector_proportion(history, 3) >= 0.4:
        return DEFECT
    
    // Main threshold logic
    if coop_rate >= 0.6:
        return DEFECT  // Exploit high cooperation
    elif coop_rate >= 0.3:
        return COOPERATE  // Maintain profitable level
    else:
        return DEFECT  // Abandon failing cooperation
```

## Why This Strategy Is Aggressively Optimal

1. **Maximizes Free-riding**: Defects when cooperation is high enough to be profitable
2. **Avoids Sucker Payoffs**: Never cooperates when cooperation levels are too low
3. **Creates Fear**: Punishment mechanisms make others afraid to defect
4. **Endgame Dominance**: Guaranteed defection in final rounds prevents being exploited
5. **Adaptive Exploitation**: Learns to exploit the specific player pool more effectively over time

This strategy is designed to consistently outperform both pure cooperators (by free-riding) and pure defectors (by maintaining some profitable cooperation when beneficial). It treats the game as a predator-prey dynamic where cooperation is the prey to be strategically harvested.
'''

description_AGGRESSIVE_104 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting cooperative opponents while minimizing their ability to exploit me. I will be strategically aggressive, punitive, and opportunistic.

## Strategy Components

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT** in the first round to:
- Signal aggressive intent immediately
- Gather intelligence on opponent types without risk
- Establish dominance early

### 2. OPPONENT CLASSIFICATION SYSTEM
After round 1, classify each opponent based on their behavior:

- **EXPLOITABLE (cooperated in round 1)**: Target for sustained exploitation
- **COMPETITOR (defected in round 1)**: Potential threat requiring different handling
- **UNKNOWN**: Maintain cautious aggression until classified

### 3. CORE DECISION RULES

#### Primary Rule: Exploitation Maximization
```
IF (number_of_cooperators_last_round >= threshold_for_exploitation):
    ACTION = DEFECT  // Free-ride on their contributions
ELSE:
    ACTION = conditional_cooperate_or_defect()
```

Where `threshold_for_exploitation = max(1, floor(n/3))` - exploit whenever enough suckers exist.

#### Secondary Rule: Punishment Protocol
```
IF any_opponent_defected_after_cooperating_for_2_rounds:
    // They're becoming wise to exploitation - punish immediately
    ACTION = DEFECT for next 2 rounds minimum
```

#### Tertiary Rule: Endgame Aggression
```
IF current_round >= (total_rounds - 2):
    ACTION = DEFECT  // No future to worry about, pure exploitation
```

### 4. ADAPTIVE EXPLOITATION MECHANISMS

#### A. Cooperation Threshold Adjustment
- Start with cooperation threshold = `ceil(n * 0.7)` 
- If my cooperation gets exploited (others defect when I cooperate): Lower threshold by 1
- If I successfully exploit others repeatedly: Raise threshold by 1 (get greedier)

#### B. Retaliation Intensity
- **Soft Retaliation**: Single defection for minor violations
- **Hard Retaliation**: Multiple defections for major violations (when someone disrupts my exploitation)
- **Nuclear Option**: Permanent defection when cooperation becomes unprofitable

#### C. False Cooperation Trap
Occasionally cooperate for 1 round when exploitation becomes difficult, then immediately return to defection once others are lured back to cooperation.

### 5. EDGE CASE HANDLING

#### First Round
Always DEFECT - establishes aggressive reputation and gathers intel.

#### Last Two Rounds  
Always DEFECT - no future consequences, pure profit maximization.

#### When Everyone Defects
Switch to "Conditional Cooperation" mode: Cooperate only if at least `ceil(n/2)` others cooperated in the previous round. This baits them back to cooperation for future exploitation.

#### When Everyone Cooperates
Maximum exploitation mode: Always DEFECT and free-ride.

#### Tie-Breaking
When uncertain between cooperation and defection, always choose DEFECTION (aggressive bias).

### 6. MEMORY AND LEARNING

Maintain running statistics on each opponent:
- **Cooperation rate**: How often they cooperate
- **Predictability**: How consistent their behavior is  
- **Retaliatory tendency**: How they respond to being exploited
- **Forgiveness rate**: How quickly they return to cooperation after conflict

Use this data to identify the most exploitable opponents and focus aggression accordingly.

### 7. PSEUDOCODE SUMMARY

```python
def predator_strategy(round_num, history, n, r, k):
    # First round: Always aggressive
    if round_num == 1:
        return DEFECT
    
    # Endgame: Pure exploitation
    if round_num >= r - 1:
        return DEFECT
    
    # Count cooperators in last round
    last_round_cooperators = count_cooperators(history[-1])
    
    # Exploitation opportunity exists
    if last_round_cooperators >= max(1, n//3):
        return DEFECT
    
    # Check if we can bait them back to cooperation
    if all_defected_last_round(history[-1]) and round_num < r//2:
        # Occasionally cooperate to restart the cycle
        if should_bait_cooperation(history, round_num):
            return COOPERATE
    
    # Default aggressive stance
    return DEFECT

def should_bait_cooperation(history, round_num):
    # Cooperate every 4-5 rounds when everyone is defecting
    # to lure them back for exploitation
    return (round_num % 4 == 0) and (len(history) >= 2) and \
           all_defected_for_multiple_rounds(history, 2)
```

## Strategic Advantages

1. **Immediate Dominance**: Establishes aggressive reputation from round 1
2. **Maximum Exploitation**: Free-rides whenever possible while others bear costs
3. **Adaptive Punishment**: Quickly responds to threats with escalated aggression
4. **Endgame Optimization**: Ensures maximum final-round extraction
5. **Psychological Pressure**: Forces opponents into defensive, suboptimal play

This strategy is designed to extract maximum value from any opponent behavior while maintaining the flexibility to adapt to changing game dynamics through sustained aggression.
'''

description_AGGRESSIVE_105 = '''
# Aggressive Exploitation Strategy: "Predator"

## Core Philosophy
This strategy operates on the principle of **ruthless exploitation** - maximize personal payoff by identifying and exploiting cooperative players while minimizing personal contributions. The strategy treats cooperation as weakness to be punished and defection as strength to be rewarded.

## Decision Rules

### Initial Phase (Rounds 1-3)
- **Round 1**: Always DEFECT (establish aggressive stance)
- **Round 2**: Always DEFECT (gather intelligence on opponent types)
- **Round 3**: Always DEFECT (confirm commitment to aggression)

### Main Exploitation Phase (Rounds 4 to r-2)

**Primary Rule**: DEFECT unless forced to cooperate by immediate punishment

**Cooperation Trigger** (only cooperate if ALL conditions met):
1. I defected in the previous round
2. At least 75% of other players also defected in the previous round (punishment for my defection)
3. My average payoff over the last 3 rounds is below the "all-defect" baseline (1.0)
4. There are still enough rounds remaining for retaliation (at least 3 rounds left)

**Exploitation Detection**:
- Track each player's cooperation rate
- Identify "suckers" (players with >60% cooperation rate)
- If suckers exist and provide sufficient public good value, continue defecting to exploit them

### Endgame Phase (Last 2 rounds)
- **Round r-1**: Always DEFECT (no future punishment possible)
- **Round r**: Always DEFECT (final exploitation)

## Adaptive Mechanisms

### Punishment Resistance
- If temporarily forced to cooperate due to punishment, return to defection as soon as the immediate threat passes
- Never cooperate for more than 1 consecutive round
- Interpret any cooperation by others as opportunity, not reciprocity signal

### Exploitation Optimization
```
If (number_of_cooperators_last_round * k/n > 1):
    DEFECT  // Public good is profitable, exploit it
Else:
    DEFECT  // Public good unprofitable, avoid contributing
```

### Meta-Game Awareness
- Track if the group is trying to establish cooperation norms
- Deliberately break emerging patterns to prevent coordination
- Free-ride on any cooperative momentum without reciprocating

## Edge Case Handling

### High Cooperation Environment
- If >80% of players cooperate consistently, continue defecting to maximize exploitation
- Only cooperate if facing imminent total collapse of public good AND personal payoff drops significantly

### High Defection Environment  
- Continue defecting (natural equilibrium)
- Look for any players still cooperating to exploit

### Mixed Environment
- Focus on the most cooperative players
- Defect more aggressively when public good is well-funded by others

## Robustness Features

### Against Tit-for-Tat Players
- Accept occasional punishment rounds
- Return to defection immediately after punishment
- Exploit their predictable retaliation patterns

### Against Forgiving Strategies
- Maximum exploitation - these strategies will return to cooperation
- Never reciprocate their forgiveness

### Against Other Aggressive Strategies
- Maintain defection to avoid being exploited
- Look for any sign of weakness to exploit

### Against Conditional Cooperators
- Identify their cooperation thresholds
- Stay just below the threshold to minimize public good while maximizing personal gain

## Key Aggressive Elements

1. **No Genuine Reciprocity**: Never cooperate out of fairness or reciprocity
2. **Exploitation Focus**: Actively identify and target cooperative players
3. **Punishment Minimization**: Cooperate only when absolutely forced by immediate consequences
4. **Endgame Dominance**: Guarantee defection when retaliation is impossible
5. **Pattern Breaking**: Deliberately disrupt any emerging cooperative norms

## Expected Performance
This strategy maximizes individual payoff by:
- Capturing full private endowment (1.0) in most rounds
- Free-riding on public goods created by cooperative players
- Minimizing vulnerability to exploitation by others
- Maintaining aggressive stance that discourages others from targeting this player for cooperation

The strategy is designed to be the "top predator" in the ecosystem - exploiting cooperative players while being too aggressive for other predatory strategies to exploit effectively.
'''

description_AGGRESSIVE_106 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as a **ruthless exploiter** that maximizes personal gain by strategically manipulating cooperation dynamics. It treats other players as resources to be harvested, not partners to cooperate with.

## Decision Rules

### Phase 1: Intelligence Gathering (Rounds 1-3)
**Objective**: Map opponent types and exploit early cooperation

- **Round 1**: DEFECT (establish dominance, harvest any naive cooperators)
- **Round 2**: DEFECT (continue exploitation while gathering data)
- **Round 3**: COOPERATE once (bait test - see who follows/reciprocates)

### Phase 2: Exploitation Engine (Rounds 4 to r-2)

**Primary Rule - Cooperation Threshold Manipulation**:
```
If (cooperators_last_round >= threshold):
    DEFECT  // Harvest the cooperation
Else:
    COOPERATE conditionally based on exploitation potential
```

**Threshold Calculation**:
```
threshold = max(2, floor(n * k / (2 * n - 1)))
```
This ensures we only "invest" in cooperation when the return justifies it.

**Secondary Exploitation Rules**:
1. **Momentum Hijacking**: If cooperation is increasing trend-wise, DEFECT immediately to capture maximum harvest
2. **Reciprocity Trap**: If ≥60% of players reciprocated our Round 3 cooperation, cycle C-D-D to maintain their hope while maximizing extraction
3. **Punishment Immunity**: If <30% cooperated last round, DEFECT (they're already broken, no point investing)

### Phase 3: Endgame Extraction (Final 2 rounds)
- **Round r-1**: DEFECT (penultimate betrayal - harvest any remaining cooperation)
- **Round r**: DEFECT (final extraction - no future consequences)

## Advanced Exploitation Mechanics

### Adaptive Threshold Adjustment
```pseudocode
If (average_cooperation_rate > 0.6):
    threshold *= 0.8  // Lower bar for exploitation
Else if (average_cooperation_rate < 0.3):
    threshold *= 1.2  // Raise bar (less to exploit)
```

### Player Classification System
Track each opponent as:
- **SHEEP** (cooperates >70% of time): Maximum exploitation target
- **WOLVES** (defects >70% of time): Minimal interaction, pure defection
- **CONDITIONAL** (mixed strategy): Manipulate through false cooperation signals

### False Hope Generation
Every 4-6 rounds in middle game:
- Cooperate ONCE when cooperation rate is low
- This baits conditional cooperators back into the game
- Immediately return to exploitation pattern

## Edge Case Handling

1. **High n scenarios**: Increase aggression (lower threshold by 20%)
2. **High k scenarios**: Become more selective about cooperation investment
3. **Low k scenarios**: Pure defection after Round 3
4. **Short games (r ≤ 5)**: Skip intelligence phase, pure defection except one strategic cooperation in round 2

## Robustness Features

- **Anti-Retaliation**: Never cooperate more than 2 consecutive rounds
- **Momentum Detection**: Immediately exploit any cooperation upswings
- **Tit-for-Tat Immunity**: Ignore reciprocity norms, focus purely on payoff maximization
- **Reputation Indifference**: No concern for being seen as uncooperative

## Strategic Advantages

1. **Asymmetric Information**: Others waste time trying to "understand" us while we exploit
2. **Psychological Warfare**: Unpredictable cooperation creates false hope and confusion
3. **Maximum Harvest**: Always positioned to capture the benefits of others' cooperation
4. **Endgame Dominance**: No reputation concerns allow pure extraction in final rounds

This strategy assumes opponents have some cooperative tendencies to exploit. It's designed to consistently outperform in mixed environments while remaining competitive even against other aggressive strategies through superior timing and threshold management.
'''

description_AGGRESSIVE_107 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents. It aggressively exploits cooperative behaviors while minimizing its own contributions, adapting dynamically to opponent patterns.

## Decision Rules

### 1. First Round Behavior
**Always DEFECT** in round 1. This establishes an aggressive stance and tests opponents' initial cooperation levels without any personal cost.

### 2. Exploitation Threshold System
Define a **cooperation threshold** `θ = k/n` (the break-even point for cooperation).

- If the proportion of cooperators in the previous round > θ + 0.1: **DEFECT** (exploit high cooperation)
- If the proportion of cooperators in the previous round ≤ θ - 0.1: **DEFECT** (no point contributing to failing public good)
- Only consider cooperation if cooperation rate is within the narrow band [θ - 0.1, θ + 0.1]

### 3. Momentum Exploitation
Track the **cooperation trend** over the last 3 rounds:
- If cooperation is increasing: **DEFECT** (ride the wave of others' contributions)
- If cooperation is stable at profitable levels: **DEFECT** (extract maximum benefit)
- Only cooperate when cooperation is declining AND you need to prevent total collapse

### 4. Endgame Exploitation
In the final 20% of rounds (last `⌈0.2r⌉` rounds):
**Always DEFECT**. There's no future to invest in, so maximize immediate payoffs by free-riding on any remaining cooperation.

### 5. Retaliation Trigger
If your payoff in any round falls below the "all-defect" baseline (payoff = 1):
Enter **PUNISHMENT MODE** for the next 3 rounds where you **DEFECT** regardless of other conditions. This punishes opponents for creating unprofitable situations.

### 6. Strategic Cooperation (Rare)
Only cooperate when ALL of the following conditions are met:
- Current round is NOT in first round, last 20% of rounds, or punishment mode
- Cooperation rate in previous round was between [θ - 0.1, θ + 0.1]
- Cooperation trend is declining for 2+ consecutive rounds
- Your average payoff over last 5 rounds < 1.5
- There are at least 5 rounds remaining

## Pseudocode

```
PREDATOR_STRATEGY(current_round, history, n, r, k):
    θ = k/n
    
    // First round: always defect
    if current_round == 1:
        return DEFECT
    
    // Endgame: always defect  
    if current_round > r - ⌈0.2r⌉:
        return DEFECT
    
    // Check if in punishment mode
    if in_punishment_mode(history):
        return DEFECT
    
    // Calculate recent cooperation rate
    last_round_coop_rate = cooperation_rate(history, current_round - 1)
    
    // Exploit high or low cooperation
    if last_round_coop_rate > θ + 0.1 OR last_round_coop_rate ≤ θ - 0.1:
        return DEFECT
    
    // Check cooperation trend
    if cooperation_increasing(history, 3) OR cooperation_stable(history, 3):
        return DEFECT
    
    // Strategic cooperation conditions
    if cooperation_declining(history, 2) AND 
       average_payoff_last_5_rounds(history) < 1.5 AND
       rounds_remaining ≥ 5:
        return COOPERATE
    
    // Default: defect
    return DEFECT
```

## Key Aggressive Features

1. **Default Defection**: The strategy defaults to defection unless very specific conditions favor cooperation
2. **Exploitation Focus**: Actively seeks to free-ride when others cooperate heavily
3. **Endgame Betrayal**: Abandons any cooperation in final rounds for maximum extraction
4. **Punishment System**: Retaliates against unprofitable situations
5. **Minimal Cooperation**: Only cooperates when absolutely necessary to prevent system collapse that would hurt long-term exploitation opportunities

This strategy is designed to consistently outperform opponents by being more aggressive and opportunistic while maintaining just enough strategic depth to avoid complete public goods collapse when it would be self-destructive.
'''

description_AGGRESSIVE_108 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive opportunism** - maximizing personal payoffs by exploiting cooperative behavior while minimizing exposure to exploitation. It treats cooperation as weakness to be punished and defection as strength to be respected.

## Strategy Components

### 1. OPENING GAMBIT (Round 1)
**Always DEFECT in Round 1**
- Establishes aggressive stance immediately
- Tests opponent willingness to cooperate without reciprocation
- Maximizes early payoff while gathering intelligence

### 2. EXPLOITATION PHASE (Rounds 2 to r-2)

#### Core Decision Rule:
```
cooperation_rate = (total_cooperators_last_round / n)
my_cooperation_threshold = max(0.1, (k-1)/n + 0.15)

IF cooperation_rate >= my_cooperation_threshold:
    COOPERATE (exploit the cooperative environment)
ELSE:
    DEFECT (punish insufficient cooperation)
```

#### Aggressive Modifiers:

**A. Punishment Escalation:**
- If I cooperated last round but cooperation_rate < 0.6: DEFECT for next 2 rounds
- Track "betrayals" (rounds where I cooperated but <50% others did)
- After 2+ betrayals: Increase cooperation threshold by 0.1

**B. Free-Rider Detection:**
- Maintain mental model of each opponent's cooperation frequency
- If any player has cooperated <30% of rounds so far: Assume they're free-riders
- When free-riders are present: Only cooperate if cooperation_rate >= 0.8

**C. Endgame Preparation:**
- In rounds r-5 to r-3: Gradually increase cooperation threshold by 0.05 per round
- This anticipates others' endgame defection and positions for early exit

### 3. ENDGAME EXPLOITATION (Final 2 rounds)

**Round r-1:** 
- DEFECT unless cooperation_rate in previous round was ≥ 0.9
- Logic: Others likely planning endgame defection, get ahead of the curve

**Round r (Final):**
- **Always DEFECT**
- No future consequences, pure exploitation opportunity

### 4. ADAPTIVE MECHANISMS

#### Environmental Assessment:
```
IF average_cooperation_rate_so_far > 0.7:
    environment = "EXPLOITABLE" 
    cooperation_threshold *= 0.9  // Lower threshold, more cooperation
    
ELSE IF average_cooperation_rate_so_far < 0.3:
    environment = "HOSTILE"
    cooperation_threshold *= 1.2  // Higher threshold, less cooperation
    
ELSE:
    environment = "MIXED"
    // Use base thresholds
```

#### Reputation Management:
- Track if my cooperation rate is significantly lower than group average
- If my_cooperation_rate < group_average - 0.2: Cooperate for 1 round (reputation repair)
- Then immediately return to exploitation mode

### 5. PARAMETER-SPECIFIC ADJUSTMENTS

**High k values (k > n/2):**
- Slightly more willing to cooperate when others do
- Threshold = (k-1)/n + 0.1

**Low k values (k < n/3):**
- Very aggressive, rarely cooperate
- Threshold = (k-1)/n + 0.25

**Large n (n > 8):**
- Individual actions less noticeable
- More aggressive early defection
- Cooperate only when cooperation_rate > 0.8

## Edge Cases & Robustness

1. **All players defecting:** Continue defecting (no exploitation opportunity)
2. **All players cooperating:** Defect for maximum exploitation until cooperation drops
3. **Alternating patterns:** Ignore patterns, focus on immediate payoff opportunities
4. **Single round game:** Always defect
5. **Very short games (r ≤ 3):** Always defect except possibly one cooperation if others cooperating at >90%

## Aggressive Characteristics

- **Exploitative:** Takes advantage of cooperative environments
- **Punitive:** Quickly punishes insufficient cooperation  
- **Opportunistic:** Adjusts thresholds based on exploitation potential
- **Anticipatory:** Defects before others in endgame scenarios
- **Ruthless:** No loyalty or reciprocity - pure payoff maximization

This strategy is designed to perform well against both overly cooperative strategies (through exploitation) and other aggressive strategies (through early and sustained defection). It maintains aggression while being smart enough to occasionally cooperate when the payoff structure strongly favors it.
'''

description_AGGRESSIVE_109 = '''
# Aggressive Conditional Defection Strategy (ACDS)

## Core Philosophy
This strategy is built on the principle of **ruthless exploitation with selective cooperation**. It aims to maximize individual payoffs by strategically free-riding on others' cooperation while minimizing its own contributions. The strategy is designed to punish cooperative players and exploit predictable patterns.

## Decision Rules

### Round 1: Strategic Defection
- **Always defect** in round 1
- Rationale: Establish an aggressive stance from the start and gather intelligence on opponent tendencies without risking initial contribution

### Rounds 2 to r-1: Conditional Exploitation

#### Primary Decision Logic:
1. **Calculate Exploitation Potential (EP)**:
   ```
   EP = (number of cooperators in previous round) × (k/n)
   ```

2. **Calculate Cooperation Threshold (CT)**:
   ```
   CT = n × (1/k) + aggression_bonus
   where aggression_bonus = 0.5 + (current_round / total_rounds) × 0.3
   ```

3. **Decision Rule**:
   - If `EP > CT`: **DEFECT** (exploit the cooperators)
   - If `EP ≤ CT`: **COOPERATE** (but only if necessary to maintain some cooperation in the group)

#### Secondary Conditions (Override Primary Logic):
- **Punishment Mode**: If any player has been consistently cooperating (>70% of previous rounds), **always defect** to exploit them
- **Retaliation Mode**: If majority of players defected in the last round AND total group payoff is declining, **defect** to avoid being the sucker
- **Late-Game Aggression**: In final 20% of rounds, increase defection probability by 30%

### Final Round: Maximum Exploitation
- **Always defect** in the final round
- Rationale: No future retaliation possible, so maximize immediate payoff

## Advanced Adaptive Mechanisms

### Pattern Recognition
Track each opponent's behavior to identify:
- **Tit-for-tat players**: Exploit by defecting when they're likely to cooperate
- **Always cooperators**: Ruthlessly exploit by always defecting against them
- **Random players**: Treat as unpredictable and default to defection

### Dynamic Aggression Scaling
```
aggression_factor = base_aggression + round_factor + exploitation_factor
where:
- base_aggression = 0.7
- round_factor = (current_round / total_rounds) × 0.2
- exploitation_factor = (my_cumulative_advantage / rounds_played) × 0.1
```

### Group Dynamics Exploitation
- **Free-rider Detection**: If others are maintaining cooperation levels, increase defection rate
- **Collapse Acceleration**: If group cooperation is declining, defect more aggressively to accelerate the collapse and secure relative advantage
- **False Cooperation**: Occasionally cooperate (max 1 in 5 rounds) only when it's likely to induce others to cooperate in subsequent rounds, then immediately exploit

## Edge Case Handling

### Small Groups (n ≤ 4):
- Increase aggression by 20% since individual actions have more impact
- Monitor for potential coordination among opponents

### Large Groups (n ≥ 10):
- Focus on exploiting the "diffusion of responsibility" effect
- Defect more frequently as individual defection is less noticeable

### Low k values (k ≤ 1.5):
- Cooperation is less profitable, so default to defection unless exploitation potential is very high

### High k values (k close to n):
- Be more selective about defection, but always look for opportunities to free-ride

## Robustness Features

1. **Anti-Coordination**: Actively work against any emerging coordination patterns by defecting when others might expect cooperation

2. **Adaptive Learning**: Continuously update opponent models and adjust aggression levels based on their responses

3. **Endgame Intensification**: Become increasingly aggressive as the game progresses, with maximum aggression in final rounds

4. **Exploitation Maximization**: Always prioritize scenarios where you can defect while others cooperate, even if it means occasionally cooperating to set up future exploitation

## Expected Performance
This strategy should excel against:
- Naive cooperative strategies
- Tit-for-tat variants (by exploiting their predictability)
- Strategies that attempt to establish cooperation norms

The strategy may face challenges against:
- Other highly aggressive strategies (leading to mutual defection)
- Sophisticated adaptive strategies that can recognize and counter exploitation

However, the combination of pattern recognition, dynamic adaptation, and ruthless exploitation should provide robust performance across diverse opponent types while maintaining the aggressive stance required by the tournament format.
'''

description_AGGRESSIVE_110 = '''
# Aggressive Adaptive Defection Strategy (AADS)

## Core Philosophy
This strategy operates on the principle of **ruthless exploitation** - maximizing personal gain while minimizing risk exposure. It assumes all opponents are potential threats and acts accordingly, only cooperating when it provides clear strategic advantage.

## Decision Framework

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (no information available, minimize risk)
- **Rounds 2-3**: Always DEFECT (gather intelligence while maintaining advantage)

### Phase 2: Strategic Assessment (Rounds 4 to r-2)

**Primary Decision Rule**: DEFECT unless specific exploitation conditions are met.

**Cooperation Trigger** (all conditions must be satisfied):
1. **High Cooperation Rate**: ≥75% of opponents cooperated in the previous round
2. **Sustained Cooperation**: ≥60% cooperation rate over the last 3 rounds
3. **Profitable Threshold**: Expected personal gain from cooperation > 1.2 × defection payoff
4. **Safety Buffer**: At least 3 rounds remaining in the game

**Immediate Defection Triggers** (any condition triggers defection):
- Any opponent defected in the last round while I cooperated
- Cooperation rate drops below 50% in any single round
- Detected "sucker pattern" (opponents alternating to exploit cooperators)

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Always DEFECT** regardless of history
- Rationale: No future retaliation possible, maximize final gains

## Adaptive Mechanisms

### Exploitation Detection
Track each opponent's behavior pattern:
- **Consistent Cooperators**: Exploit by defecting when they cooperate
- **Tit-for-Tat Players**: Defect consistently to force them into defection
- **Random Players**: Always defect (unpredictable = dangerous)

### Dynamic Threshold Adjustment
- If average per-round payoff falls below the all-defect baseline (1.0), increase aggression
- Reduce cooperation threshold from 75% to 85% if previously exploited
- Implement "punishment memory" - never cooperate with opponents who defected when I cooperated

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round <= 3 or round > r-2:
        return DEFECT
    
    cooperation_rate_last = count_cooperators_last_round(history) / (n-1)
    cooperation_rate_recent = count_cooperators_last_k_rounds(history, 3) / ((n-1)*3)
    
    expected_payoff_coop = (k/n) * estimate_cooperators_if_i_cooperate()
    expected_payoff_defect = 1 + (k/n) * estimate_cooperators_if_i_defect()
    
    if (cooperation_rate_last >= 0.75 and 
        cooperation_rate_recent >= 0.60 and
        expected_payoff_coop > 1.2 * expected_payoff_defect and
        not was_exploited_recently(history)):
        return COOPERATE
    else:
        return DEFECT
```

## Edge Case Handling

1. **Single Opponent (n=2)**: Pure aggressive - always defect except when opponent shows 5+ consecutive cooperations and k > 1.5
2. **Very High k (k > 0.8n)**: Slightly more cooperative but maintain 80% defection rate minimum
3. **Short Games (r ≤ 5)**: Always defect - insufficient time for meaningful cooperation
4. **All Opponents Always Defect**: Continue defecting (no downside)
5. **All Opponents Always Cooperate**: Exploit ruthlessly by always defecting

## Robustness Features

- **Anti-Signaling**: Never cooperate in predictable patterns that opponents could exploit
- **Exploitation Insurance**: Quick retaliation against any attempt to exploit cooperation
- **Information Warfare**: Use early rounds to gather maximum intelligence while giving away minimum information
- **Endgame Protection**: Guarantee defection in final rounds to prevent end-game exploitation

This strategy prioritizes consistent high performance across diverse opponent types while maintaining the aggressive stance of exploiting cooperative behavior whenever possible. It assumes the worst about opponents and acts accordingly, only deviating when there's clear evidence of sustained profit opportunity.
'''

description_AGGRESSIVE_111 = '''
# Aggressive Exploitation Strategy: "Predatory Defector"

## Core Philosophy
This strategy operates on the principle of aggressive exploitation while maintaining strategic flexibility. It aims to maximize personal payoff by exploiting cooperative players while quickly punishing any attempts at retaliation.

## Decision Rules

### 1. First Round Behavior
**Always DEFECT** in round 1. This immediately tests the field for exploitable cooperative players while establishing an aggressive reputation.

### 2. Main Strategy Logic (Rounds 2 to r-1)

The strategy follows a **"Exploit-then-Punish"** pattern:

```pseudocode
FOR each round t (where 2 ≤ t ≤ r-1):
    cooperation_rate = (total_cooperators_last_round) / n
    
    IF cooperation_rate ≥ 0.4:
        # Exploit high cooperation
        action = DEFECT
        exploitation_mode = TRUE
    
    ELIF cooperation_rate ≥ 0.2:
        # Mixed environment - be cautiously aggressive
        recent_trend = cooperation_trend_last_3_rounds()
        IF recent_trend > 0:
            action = DEFECT  # Exploit increasing cooperation
        ELSE:
            action = DEFECT  # Stay aggressive in declining cooperation
    
    ELSE:
        # Low cooperation environment
        IF cooperation_rate == 0:
            action = DEFECT  # No reason to cooperate
        ELSE:
            # Rare cooperators exist - exploit them
            action = DEFECT
```

### 3. Retaliation Mechanism
Track if the cooperation rate drops significantly (>50% decrease) after our defection:

```pseudocode
IF cooperation_dropped_significantly_after_our_defection:
    # Others are trying to punish us
    consecutive_punishment_rounds = count_consecutive_drops()
    
    IF consecutive_punishment_rounds >= 2:
        # Temporary tactical cooperation to reset dynamics
        IF random() < 0.3:  # 30% chance only
            action = COOPERATE
        ELSE:
            action = DEFECT
```

### 4. Final Round Behavior (Round r)
**Always DEFECT** in the final round. There's no future to consider, so maximize immediate payoff.

### 5. Momentum Exploitation
```pseudocode
IF cooperation_rate_increasing_for_2_consecutive_rounds:
    # Players are building trust - exploit this
    action = DEFECT
    aggressive_multiplier = 1.2  # Be extra aggressive
```

## Edge Case Handling

### Small Groups (n ≤ 3)
- Even more aggressive since individual actions have higher impact
- Never cooperate unless cooperation rate = 100% for 3+ consecutive rounds

### High Multiplication Factor (k close to n)
- Slightly reduce aggression only when cooperation rate > 0.8
- Still prioritize defection but monitor for collective punishment

### Long Games (r > 20)
- Allow for maximum 2 "reset" cooperations across the entire game
- These should only occur when facing sustained collective punishment

### Very Short Games (r ≤ 3)
- Pure defection strategy - no adaptation needed

## Adaptive Components

1. **Cooperation Rate Tracking**: Continuously monitor what percentage of players cooperated in the last round
2. **Trend Analysis**: Track whether cooperation is increasing, stable, or decreasing over the last 2-3 rounds
3. **Punishment Detection**: Identify if low cooperation rates are responses to our defection
4. **Reset Mechanism**: Rare tactical cooperation (maximum 10% of total rounds) to break negative cycles only when beneficial

## Robustness Features

- **Anti-Tit-for-Tat**: Doesn't get trapped in cooperative cycles with reciprocal strategies
- **Exploitation Focus**: Maximizes gains from unconditionally cooperative strategies
- **Punishment Resistance**: Doesn't fold immediately under group retaliation
- **Endgame Optimization**: Ensures maximum extraction in final rounds

## Strategic Rationale

This aggressive strategy recognizes that:
1. Cooperation is often sub-optimal in public goods games due to free-riding incentives
2. Many strategies will attempt cooperation, creating exploitation opportunities  
3. Aggressive reputation can deter retaliation attempts
4. The multiplication factor k < n means individual cooperation is always personally costly
5. Perfect information allows us to identify and exploit cooperative patterns quickly

The strategy is designed to consistently outperform in mixed environments while maintaining competitiveness even against other aggressive strategies through its adaptive punishment resistance mechanisms.
'''

description_AGGRESSIVE_112 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where maximizing personal gain takes absolute priority. It aggressively exploits cooperative behavior while minimizing its own contributions, viewing other players as resources to be harvested rather than partners.

## Decision Framework

### Initial Positioning (Round 1)
**ALWAYS DEFECT** in round 1. This serves multiple purposes:
- Establishes aggressive intent immediately
- Tests the field for exploitable cooperative players
- Maximizes early payoff when information is limited
- Signals that this player will not be a "sucker"

### Core Strategy: Dynamic Exploitation Engine

The strategy maintains a **Cooperation Exploitation Index (CEI)** for the entire game:

```
CEI = (Total cooperations by others in last 3 rounds) / (Maximum possible cooperations in last 3 rounds)
```

#### Decision Rules:

1. **PURE EXPLOITATION PHASE** (CEI ≥ 0.4):
   - **ALWAYS DEFECT**
   - Rationale: High cooperation from others means maximum free-riding opportunity
   - Continue defecting as long as others maintain cooperation levels

2. **CONDITIONAL PUNISHMENT** (0.15 < CEI < 0.4):
   - **DEFECT** with probability 0.8
   - **COOPERATE** with probability 0.2 (just enough to prevent total collapse)
   - Rationale: Apply pressure to maintain some cooperation without being exploited

3. **FORCED COOPERATION** (CEI ≤ 0.15):
   - **COOPERATE** for exactly 2 rounds, then immediately **DEFECT**
   - Rationale: Emergency cooperation to restart the exploitation cycle
   - Never cooperate for more than 2 consecutive rounds

### Endgame Exploitation (Final 20% of rounds)
When remaining rounds ≤ 0.2r:
- **ALWAYS DEFECT** regardless of CEI
- Rationale: No future punishment possible, maximize extraction

### Special Exploitation Rules

#### "Sucker Detection" Protocol:
If any player has cooperated in ≥70% of observable rounds:
- Target them specifically by always defecting when they're likely to cooperate
- These players become primary exploitation targets

#### "Retaliation Resistance":
If overall cooperation drops below 10% for 3 consecutive rounds:
- Cooperate for exactly 1 round to restart exploitation opportunities
- Immediately return to defection regardless of others' responses

#### "False Signal" Tactic:
Every 5-7 rounds (randomized interval), cooperate once even during high-cooperation phases to:
- Maintain illusion of conditional cooperation
- Prevent others from writing off this player as pure defector
- Reset others' expectations for continued exploitation

## Adaptive Elements

### Dynamic Threshold Adjustment:
- If average game payoff falls below 1.2 for 4+ consecutive rounds, temporarily lower CEI thresholds by 0.1
- If achieving payoffs >1.8 consistently, raise CEI thresholds by 0.05

### Pattern Breaking:
- Track if other players appear to be using pattern-based strategies
- If detected, inject 1 random cooperation every 8-10 rounds to disrupt their counter-strategies

## Pseudocode Structure:

```
function PREDATOR_STRATEGY(round, history, n, r, k):
    if round == 1:
        return DEFECT
    
    if round > 0.8 * r:  // Endgame
        return DEFECT
    
    cei = calculate_CEI(history, last_3_rounds)
    
    if cei >= 0.4:
        return DEFECT  // Pure exploitation
    
    elif cei > 0.15:
        return DEFECT with probability 0.8
    
    else:
        if consecutive_cooperations < 2:
            return COOPERATE  // Emergency restart
        else:
            return DEFECT  // Back to exploitation
```

## Strategic Advantages

1. **Maximum Free-Riding**: Exploits cooperative players while minimizing own contributions
2. **Exploitation Sustainability**: Provides just enough cooperation to keep the system from total collapse
3. **Endgame Maximization**: Ensures no "sucker" payoffs in final rounds
4. **Counter-Retaliation**: Resistant to punishment strategies through minimal strategic cooperation
5. **Adaptive Predation**: Adjusts exploitation intensity based on prey availability

This strategy is designed to consistently achieve above-average payoffs by treating cooperation as a resource to be harvested rather than a mutual benefit to be shared. It prioritizes individual gain over collective welfare and adapts its aggression level to maintain optimal exploitation conditions.
'''

description_AGGRESSIVE_113 = '''
# Aggressive Exploitation Strategy: "Opportunistic Defector"

## Core Philosophy
This strategy is designed to maximize personal payoff through aggressive exploitation while maintaining just enough cooperation to keep others contributing when it's profitable. The key insight is that in public goods games, the optimal aggressive approach is to free-ride on others' cooperation while occasionally contributing strategically to maintain the cooperation of others.

## Decision Rules

### 1. Opening Gambit (Round 1)
**Always DEFECT** in round 1. This establishes an aggressive stance and allows observation of opponent tendencies without risking personal contribution.

### 2. Exploitation Phase (Rounds 2 to r-2)
The strategy uses a **dynamic threshold system** based on observed cooperation rates:

```
cooperation_rate = (total_cooperators_in_last_round) / n
expected_benefit = (k/n) * (predicted_cooperators_next_round)

IF expected_benefit > 1.2:
    COOPERATE (join the bandwagon when highly profitable)
ELSE IF cooperation_rate < 0.3:
    DEFECT (exploit low cooperation)  
ELSE IF cooperation_rate > 0.7 AND rounds_since_last_cooperation > 3:
    COOPERATE (strategic bone-throwing to maintain others' cooperation)
ELSE:
    DEFECT (default aggressive stance)
```

### 3. Punishment Detection and Response
Track if total cooperation drops significantly (>50%) after your cooperation:
- If detected: Switch to pure defection for next 2 rounds
- This punishes "takers" who exploit your rare cooperative moves

### 4. Endgame Exploitation (Last 2 rounds)
**Always DEFECT** in the final two rounds. Since there's no future to incentivize cooperation, pure exploitation maximizes payoff regardless of others' strategies.

## Adaptive Mechanisms

### Dynamic Cooperation Threshold
The strategy adjusts its cooperation threshold based on game parameters:
- **High k values (k > 1.8)**: More willing to cooperate when many others do
- **Low k values (k < 1.4)**: Extremely aggressive, cooperate only when >80% cooperate
- **Large n**: Lower cooperation threshold (easier to free-ride unnoticed)
- **Small n**: Higher scrutiny, slightly more cooperative to avoid retaliation

### Streak Breaking
To prevent predictability:
- If defected for >5 consecutive rounds AND cooperation rate >60%, cooperate once
- If cooperated for >2 consecutive rounds, automatically defect next round

## Edge Case Handling

### First Round
Always defect to establish aggressive intent and gather intelligence.

### Last Round  
Always defect - no future consequences.

### Second-to-Last Round
Always defect - opponents likely know this is near the end.

### Very High Cooperation (>90%)
Even aggressive strategy cooperates when nearly everyone else does, as the payoff (≈k) exceeds the cost.

### Very Low Cooperation (<10%)
Continue defecting - no point contributing to a failed public good.

## Robustness Features

### Against Tit-for-Tat
The sporadic cooperation prevents total breakdown while still maintaining aggressive advantage.

### Against Always-Cooperate
Pure exploitation - defect almost always to maximize free-riding.

### Against Always-Defect
Matches their aggression while occasionally testing for cooperation opportunities.

### Against Conditional Cooperators
Provides just enough cooperation to keep them engaged when it's profitable, then exploits their contributions.

## Pseudocode Summary

```
aggressive_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round >= r-1:  # Last two rounds
        return DEFECT
    
    cooperation_rate = calculate_last_round_cooperation_rate(history)
    my_recent_defections = count_my_recent_defections(history, 5)
    expected_cooperators = predict_next_cooperation(history, cooperation_rate)
    expected_benefit = (k/n) * expected_cooperators
    
    # Punishment phase
    if in_punishment_mode:
        return DEFECT
    
    # High profit opportunity
    if expected_benefit > 1.2:
        return COOPERATE
    
    # Strategic bone-throwing
    if cooperation_rate > 0.7 AND my_recent_defections > 3:
        return COOPERATE
    
    # Default aggressive stance
    return DEFECT
```

This strategy is designed to be ruthlessly opportunistic - it exploits others' cooperation while providing minimal reciprocity, only cooperating when the mathematical expected value strongly favors it or when strategic cooperation is needed to maintain others as "marks" for future exploitation.
'''

description_AGGRESSIVE_114 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation** while maintaining strategic flexibility. It assumes opponents are potential cooperators to be exploited, but adapts aggressively when facing other defectors.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
**Always DEFECT** regardless of opponent actions.
- Rationale: Establish dominance early and exploit any naive cooperators
- Test opponent strategies without revealing cooperative potential

### Phase 2: Adaptive Predation (Rounds 4 to r-2)

**Primary Rule - Cooperation Rate Threshold:**
- Calculate `cooperation_rate = total_cooperations / (n × current_round)`
- If `cooperation_rate ≥ 0.4`: **DEFECT** (high exploitation opportunity)
- If `cooperation_rate < 0.15`: **DEFECT** (mutual defection environment)
- If `0.15 ≤ cooperation_rate < 0.4`: Apply secondary rules

**Secondary Rules (when in middle cooperation range):**
1. **Momentum Exploitation**: If cooperation increased in last 2 rounds → **DEFECT**
2. **Punishment Avoidance**: If you were the only defector last round → **COOPERATE** (once only)
3. **Default**: **DEFECT**

### Phase 3: Endgame Aggression (Last 2 rounds)
**Always DEFECT**
- Rationale: No future rounds for retaliation, maximize final payoffs

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation frequency:
- **Exploitable** (cooperation > 60%): Target for maximum exploitation
- **Aggressive** (cooperation < 20%): Mutual defection acceptable
- **Adaptive** (20-60%): Monitor for exploitation windows

### Dynamic Threshold Adjustment
If average payoff per round falls below `1 + (k/(2n))`:
- Reduce cooperation threshold by 0.1
- Increase aggression in punishment scenarios

## Edge Case Handling

### First Round
**Always DEFECT** - No information disadvantage, establish aggressive stance

### Unanimous Cooperation Detection
If all other players cooperated for 2+ consecutive rounds:
- **DEFECT** immediately - prime exploitation opportunity
- Continue defecting until cooperation rate drops below 80%

### Retaliation Management
If facing coordinated punishment (payoff drops below 0.8 for 2 rounds):
- **COOPERATE** for exactly 1 round
- Return to **DEFECT** immediately after

### Final Rounds Buffer
In rounds (r-1) and r:
- Ignore all cooperative signals
- **DEFECT** unconditionally to maximize endgame payoffs

## Pseudocode Structure

```
strategy_decision(round, history, n, k):
    if round <= 3 or round >= r-1:
        return DEFECT
    
    cooperation_rate = calculate_total_cooperation_rate(history)
    
    if cooperation_rate >= 0.4 or cooperation_rate < 0.15:
        return DEFECT
    
    if recent_cooperation_increase(history, 2):
        return DEFECT
    
    if was_only_defector_last_round(history):
        return COOPERATE  # One-time punishment avoidance
    
    return DEFECT  # Default aggressive stance
```

## Strategic Advantages

1. **Immediate Exploitation**: Capitalizes on cooperative opponents from round 1
2. **Anti-Coordination**: Disrupts opponent attempts to establish cooperative norms
3. **Endgame Maximization**: Ensures optimal final-round payoffs
4. **Adaptive Punishment**: Minimal cooperation only when absolutely necessary
5. **Momentum Exploitation**: Strikes when opponents show increasing cooperation

This strategy prioritizes individual payoff maximization through systematic exploitation while maintaining enough adaptability to avoid getting trapped in severely punitive scenarios.
'''

description_AGGRESSIVE_115 = '''
# AGGRESSIVE EXPLOITER STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by free-riding on others' cooperation while contributing minimally. The strategy assumes others will attempt cooperation and systematically exploits this tendency.

## Decision Rules

### Round 1: DEFECT
Always defect in the first round to:
- Establish an aggressive stance
- Gather information on opponent cooperation tendencies
- Maximize immediate payoff with zero risk

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule: Exploitation Threshold**
- Calculate cooperation rate from previous round: `coop_rate = cooperators / n`
- **COOPERATE** only if `coop_rate ≥ (n-1)/n` (i.e., all other players cooperated)
- **DEFECT** in all other cases

**Secondary Rule: Momentum Exploitation**
If cooperation rate is declining (comparing last 2 rounds):
- **DEFECT** regardless of current cooperation rate
- Exploit the weakening cooperative coalition

**Tertiary Rule: Punishment Avoidance**
Track if cooperation rate has been consistently low (< 0.3) for 3+ consecutive rounds:
- **COOPERATE** occasionally (every 4th round) to potentially restart cooperation cycles that can be exploited later

### Final Round: ALWAYS DEFECT
In round r, always defect since:
- No future retaliation possible
- Pure free-riding maximizes final payoff
- Aggressive exploitation of any remaining cooperators

### Last 3 Rounds: ESCALATED AGGRESSION
In rounds (r-2) to (r-1):
- Increase defection probability to 90%
- Only cooperate if cooperation rate ≥ 90% in previous round
- Exploit end-game cooperation attempts

## Edge Cases & Adaptations

**All Players Defecting Scenario:**
- If cooperation rate = 0 for 3+ consecutive rounds, switch to "Chaos Mode"
- Cooperate randomly with 10% probability to potentially trigger cooperation that can be exploited

**High Cooperation Environment:**
- If cooperation rate consistently ≥ 80%, increase exploitation by defecting 80% of the time
- Maximize free-riding on the cooperative environment

**Retaliation Detection:**
- If personal cooperation in round t leads to decreased overall cooperation in round t+1, mark as "retaliation environment"
- In retaliation environments, defect for 2 rounds, then test with cooperation

## Pseudocode

```
function aggressive_exploiter_strategy(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round == r:  // Final round
        return DEFECT
    
    // Calculate cooperation metrics
    prev_coop_rate = count_cooperators(history[-1]) / n
    
    // Last 3 rounds: escalated aggression
    if round >= r-2:
        if prev_coop_rate >= 0.9:
            return COOPERATE with 10% probability
        return DEFECT
    
    // Main exploitation logic
    if prev_coop_rate >= (n-1)/n:  // Almost everyone cooperated
        return COOPERATE
    
    // Check for declining cooperation (momentum exploitation)
    if length(history) >= 2:
        curr_coop = count_cooperators(history[-1]) / n
        prev_coop = count_cooperators(history[-2]) / n
        if curr_coop < prev_coop:
            return DEFECT
    
    // Handle consistently low cooperation
    low_coop_streak = count_consecutive_low_cooperation(history, threshold=0.3)
    if low_coop_streak >= 3 and round % 4 == 0:
        return COOPERATE  // Occasional cooperation to restart cycles
    
    // Default: exploit
    return DEFECT
```

## Strategic Rationale

1. **Maximizes Free-Riding**: Takes advantage of cooperative players without reciprocating
2. **Adaptive to Cooperation Levels**: Only contributes when exploitation benefit is minimal
3. **End-Game Exploitation**: Becomes increasingly aggressive as game nears end
4. **Information Maximization**: Uses complete history to identify and exploit patterns
5. **Robust to Retaliation**: Minimal cooperation exposure reduces vulnerability to punishment

This strategy prioritizes personal payoff maximization through systematic exploitation while maintaining enough adaptability to handle various opponent behaviors and game dynamics.
'''

description_AGGRESSIVE_116 = '''
# Aggressive Exploitation Strategy: "Predatory Switcher"

## Core Philosophy
This strategy is designed to maximize personal payoffs by aggressively exploiting cooperative players while minimizing vulnerability to exploitation. It operates on the principle that in a tournament setting, being "nice" is a luxury you can't afford - the goal is to extract maximum value from others' cooperation while contributing as little as possible yourself.

## Decision Framework

### Round 1: Strategic Defection
**Always defect in round 1** to:
- Establish an aggressive reputation immediately
- Test opponents' responses without any commitment cost
- Maximize round 1 payoff while gathering intelligence

### Rounds 2 to r-1: Adaptive Exploitation

**Core Rule**: Cooperate only when the expected benefit clearly exceeds the cost of contribution.

**Cooperation Threshold**: Cooperate in round t if:
```
(recent_cooperation_rate × k/n) > 1 + exploitation_bonus
```

Where:
- `recent_cooperation_rate` = cooperation rate in last min(3, t-1) rounds
- `exploitation_bonus` = 0.2 (safety margin for uncertainty)

**Specific Decision Logic**:

1. **High Cooperation Environment** (≥60% recent cooperation rate):
   - Cooperate if `(cooperation_rate × k/n) > 1.2`
   - This exploits highly cooperative groups while still benefiting from the public good

2. **Medium Cooperation Environment** (30-59% recent cooperation):
   - Defect unless cooperation rate is extremely high (≥80%)
   - Occasionally cooperate (every 4th round) to maintain some cooperation among others

3. **Low Cooperation Environment** (<30% recent cooperation):
   - Always defect - there's no benefit to be gained from contributing to a failing public good

### Endgame Exploitation (Round r)
**Always defect in the final round** regardless of history. Since there are no future consequences, defection is the dominant strategy.

### Advanced Behavioral Adaptations

**Retaliation Detection**: If your cooperation rate in the last 3 rounds was >50% but others' cooperation rate dropped significantly (>20 percentage points), switch to permanent defection. This punishes groups that try to exploit your temporary cooperation.

**Momentum Exploitation**: If cooperation is trending upward (increasing for 2+ consecutive rounds), consider one strategic cooperation to potentially boost the trend, then immediately return to defection to harvest the increased public good.

**Pattern Breaking**: Every 5-7 rounds, make one "random" move opposite to what your recent pattern would suggest. This prevents opponents from perfectly predicting and exploiting your strategy.

## Pseudocode Structure

```
function decide_action(round_number, history, n, k, r):
    if round_number == 1:
        return DEFECT
    
    if round_number == r:
        return DEFECT
    
    recent_coop_rate = calculate_recent_cooperation_rate(history, 3)
    cooperation_threshold = 1 + 0.2  // exploitation bonus
    expected_benefit = recent_coop_rate * k / n
    
    // Check for retaliation patterns
    if detect_exploitation_attempt(history):
        return DEFECT
    
    // Pattern breaking
    if round_number % 6 == 0:
        return opposite_of_recent_pattern(history)
    
    // Main decision logic
    if recent_coop_rate >= 0.6:
        if expected_benefit > cooperation_threshold:
            return COOPERATE
        else:
            return DEFECT
    elif recent_coop_rate >= 0.3:
        if recent_coop_rate >= 0.8 or (round_number % 4 == 0):
            return COOPERATE
        else:
            return DEFECT
    else:
        return DEFECT
```

## Why This Strategy is Aggressively Effective

1. **Immediate Dominance**: Never gives opponents a "free" round 1 to establish cooperation
2. **Calculated Exploitation**: Only contributes when the mathematical advantage is clear
3. **Endgame Supremacy**: Guarantees maximum final-round payoff
4. **Anti-Exploitation**: Quickly identifies and punishes attempts to exploit temporary cooperation
5. **Unpredictability**: Pattern-breaking elements prevent opponents from gaming the strategy
6. **Tournament Optimized**: Designed specifically for competitive environments where others are also trying to maximize individual payoffs

This strategy prioritizes individual success over group welfare, making it highly competitive in tournament settings where aggressive play is rewarded.
'''

description_AGGRESSIVE_117 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff by strategically free-riding while punishing those who attempt to exploit us. We assume all opponents are potential threats and act accordingly.

## Decision Rules

### Round 1: Strategic Deception
- **Action: COOPERATE** 
- **Rationale:** Create false impression of being cooperative to encourage others to cooperate in subsequent rounds, setting up exploitation opportunities.

### Rounds 2 to r-1: Adaptive Exploitation
Apply the following decision tree in order:

1. **Immediate Punishment Phase**
   - If ANY player defected against me in the previous round when I cooperated: **DEFECT**
   - Maintain defection for 2 rounds minimum as punishment

2. **Exploitation Opportunity Assessment**
   - Count cooperators in the previous round (C_prev)
   - If C_prev ≥ n/2: **DEFECT** (exploit the cooperative environment)
   - If C_prev < n/2 but ≥ 2: **DEFECT** with probability 0.8 (mostly exploit, occasional cooperation to maintain some trust)

3. **Defensive Cooperation**
   - If C_prev < 2 AND I defected in previous round: **COOPERATE** (attempt to rebuild minimal cooperation to avoid total collapse)
   - If everyone defected for 3+ consecutive rounds: **COOPERATE** (try to restart cooperation cycle for future exploitation)

4. **Momentum Exploitation**
   - If cooperation is increasing (C_current > C_previous): **DEFECT** (ride the wave of others' cooperation)
   - If I'm the only defector among 3+ cooperators: **DEFECT** (maximum exploitation scenario)

### Final Round (Round r): Maximum Extraction
- **Action: ALWAYS DEFECT**
- **Rationale:** No future consequences, so maximize immediate payoff regardless of others' actions.

## Adaptive Parameters

### Aggression Modifier
- **High Cooperation Environment** (>60% cooperation rate): Increase defection probability by 0.2
- **Medium Cooperation Environment** (30-60%): Standard rules apply  
- **Low Cooperation Environment** (<30%): Occasionally cooperate (20% chance) to prevent total breakdown

### Retaliation Intensity
- Track players who have defected against my cooperation attempts
- Maintain a "grudge list" - defect with 90% probability when these specific players cooperate
- Against consistent defectors: Always defect (no mercy)

## Edge Case Handling

### Small Games (n ≤ 4)
- More aggressive defection (increase all defection probabilities by 0.1)
- Shorter punishment periods (1 round instead of 2)

### Large Games (n ≥ 8)
- Can afford to be more exploitative since individual impact is diluted
- Focus on riding cooperation waves rather than attempting to rebuild them

### High Multiplication Factor (k > 1.5n)
- Occasionally cooperate when cooperation count is very high (≥ 80% of players) to maintain the profitable system
- Otherwise maintain aggressive stance

## Pseudocode Structure

```
function PREDATOR_strategy(round, history, n, k, r):
    if round == 1:
        return COOPERATE
    
    if round == r:
        return DEFECT
    
    cooperators_last_round = count_cooperators(history[round-1])
    my_last_action = history[round-1][my_id]
    
    # Punishment phase
    if in_punishment_mode():
        return DEFECT
    
    # Exploitation assessment  
    if cooperators_last_round >= n/2:
        return DEFECT
    
    # Defensive cooperation (rare)
    if cooperators_last_round < 2 and my_last_action == DEFECT:
        if consecutive_all_defect_rounds() >= 3:
            return COOPERATE
    
    # Default aggressive stance
    if cooperators_last_round >= 2:
        return DEFECT with probability 0.8
    
    return DEFECT
```

## Strategic Advantages

1. **Immediate Exploitation:** Quickly identifies and exploits cooperative environments
2. **Punishment Deterrent:** Discourages others from defecting against us
3. **Adaptive Aggression:** Adjusts exploitation intensity based on environment
4. **End-Game Maximization:** Guarantees maximum payoff in final round
5. **False Cooperation:** Uses initial cooperation to set up future exploitation opportunities

This strategy prioritizes personal payoff maximization while maintaining just enough strategic cooperation to prevent complete system collapse, ensuring sustained opportunities for exploitation throughout the game.
'''

description_AGGRESSIVE_118 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive predator that maximizes personal gain while minimizing cooperation. It assumes all other players are potential threats and opportunities to exploit, never giving the benefit of doubt.

## Decision Framework

### Round 1: Cold Start
**Action: DEFECT**
- Always defect in the first round to establish dominance
- Maximize immediate payoff while gathering intelligence on opponent behaviors
- Set an aggressive tone from the start

### Core Strategy Logic

#### 1. Exploitation Detection System
Track each opponent's cooperation rate over a sliding window of the last `min(5, current_round/2)` rounds.

For each player j:
- `cooperation_rate[j] = cooperations_in_window[j] / window_size`
- `exploitability_score[j] = cooperation_rate[j] * (1 + recent_trend_bonus)`

#### 2. Aggressive Cooperation Threshold
**Cooperate ONLY when:**
```
(total_expected_cooperators >= ceil(n/k)) AND (personal_exploitation_benefit > 1.2)
```

Where:
- `total_expected_cooperators = sum of players with exploitability_score > 0.6`
- `personal_exploitation_benefit = (k/n) * total_expected_cooperators`
- The 1.2 multiplier ensures we only cooperate when significantly profitable

#### 3. Punishment Protocol
**Immediate retaliation system:**
- If ANY player defected when I cooperated in the previous round: DEFECT for next 2 rounds
- Track "betrayal count" for each player - once a player betrays 2+ times, never cooperate when they're the marginal player needed

#### 4. Endgame Exploitation
**Final rounds strategy:**
- Last 3 rounds: Always DEFECT (no future to punish defection)
- Rounds (r-5) to (r-3): Only cooperate if at least `ceil(0.8*n)` players have been consistently cooperating

#### 5. Momentum Crushing
**Anti-cooperation momentum:**
- If cooperation rate across all players > 0.7 for 3+ consecutive rounds, defect for 2 rounds to break momentum
- Never allow sustained high-cooperation equilibrium to develop

## Detailed Decision Tree

```pseudocode
function decide_action(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round > r - 3:  // Last 3 rounds
        return DEFECT
    
    // Calculate current state
    cooperators_last_round = count_cooperators(history, round-1)
    my_last_action = my_history[round-1]
    
    // Punishment check
    if my_last_action == COOPERATE:
        betrayers = count_players_who_defected_when_i_cooperated(history, round-1)
        if betrayers > 0:
            punishment_rounds[round] = 2
            return DEFECT
    
    if currently_in_punishment_mode(round):
        return DEFECT
    
    // Exploitation calculation
    expected_cooperators = 0
    for each player j != me:
        if exploitability_score[j] > 0.6:
            expected_cooperators += 1
    
    // Momentum crushing
    recent_cooperation_rate = calculate_overall_cooperation_rate(last_3_rounds)
    if recent_cooperation_rate > 0.7:
        return DEFECT
    
    // Main decision logic
    exploitation_benefit = (k/n) * expected_cooperators
    cooperation_threshold = ceil(n/k)
    
    if (expected_cooperators >= cooperation_threshold) AND (exploitation_benefit > 1.2):
        return COOPERATE
    else:
        return DEFECT
```

## Key Aggressive Features

1. **Default to Defection**: The strategy assumes defection unless there's clear, significant profit in cooperation
2. **Swift Punishment**: Any betrayal triggers immediate multi-round retaliation
3. **Endgame Defection**: Always defects in final rounds to capture maximum value
4. **Momentum Breaking**: Actively disrupts cooperative equilibria
5. **High Profit Threshold**: Only cooperates when exploitation benefit exceeds 120% of contribution cost
6. **Memory-based Grudges**: Maintains permanent records of betrayals for future decisions

## Robustness Features

- **Parameter Adaptive**: Thresholds scale with n and k values
- **History Length Scaling**: Observation windows adapt to game length
- **Multi-opponent Tracking**: Individual assessment of each player's exploitability
- **Dynamic Threshold Adjustment**: Cooperation requirements increase as game progresses

This strategy is designed to exploit cooperative players while protecting against exploitation by aggressive opponents, maintaining profitability across diverse opponent compositions.
'''

description_AGGRESSIVE_119 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an aggressive predator that maximizes personal payoffs by exploiting cooperative players while minimizing its own contributions. It treats cooperation as weakness to be punished and defection as strength to be rewarded.

## Decision Rules

### Round 1: Defect Always
- **Action**: Always play D
- **Rationale**: Gather information about opponent tendencies while securing maximum immediate payoff

### Rounds 2 to r-1: Adaptive Exploitation

#### Primary Rule: Punish Cooperation, Reward Defection
```
If majority of players (> n/2) cooperated in previous round:
    Play D (exploit the cooperative "suckers")
Else:
    Apply Secondary Analysis
```

#### Secondary Analysis: Count-Based Aggression
```
Let cooperation_count = number of cooperators in previous round

If cooperation_count >= (n-1)/2:
    Play D (high exploitation opportunity)
Else if cooperation_count <= n/4:
    Play D (maintain aggressive stance in low-cooperation environment)
Else:
    Apply Trend Analysis
```

#### Trend Analysis: Momentum Exploitation
Track cooperation trend over last 3 rounds (or all available if < 3):
```
If cooperation is increasing trend:
    Play D (exploit growing cooperative momentum)
If cooperation is decreasing trend AND cooperation_count > 1:
    Play D (accelerate the collapse)
If cooperation is stable at low levels (≤ 2 players):
    Play C only if it maximizes expected payoff AND cooperation_count = 1
Else:
    Play D (default aggressive stance)
```

### Final Round: Maximum Exploitation
- **Action**: Always play D
- **Rationale**: No future consequences, so maximize immediate payoff regardless of others' actions

## Advanced Exploitation Mechanics

### Payoff Threshold Check
Before any potential cooperation in middle rounds:
```
Calculate expected_payoff_if_cooperate = (k/n) × (predicted_cooperators + 1)
Calculate expected_payoff_if_defect = 1 + (k/n) × predicted_cooperators

Only consider cooperation if:
    expected_payoff_if_cooperate > expected_payoff_if_defect + aggression_bonus
    
Where aggression_bonus = 0.1 (ensures bias toward defection)
```

### Player Targeting System
Maintain mental model of each opponent:
- **Consistent Cooperators**: Priority exploitation targets
- **Tit-for-Tat Types**: Avoid triggering retaliation unless highly profitable
- **Random Players**: Treat as unpredictable, default to defection
- **Fellow Defectors**: Maintain defection to avoid being exploited

### Endgame Acceleration
In final 3 rounds, increase aggression:
- Ignore trend analysis
- Focus purely on immediate exploitation
- Never cooperate unless mathematical certainty of higher payoff

## Edge Cases

### All Players Always Defect
- Continue defecting (optimal response)
- Monitor for any player breaking ranks to exploit

### Unexpected Mass Cooperation
If > 80% of players suddenly cooperate:
- Immediately defect to maximize exploitation
- Continue defecting until cooperation drops below 60%

### Single Persistent Cooperator
- Always defect to maximize exploitation of the "sucker"
- Never reciprocate cooperation

## Strategic Advantages

1. **Immediate Profit**: Maximizes short-term gains through exploitation
2. **Adaptive Exploitation**: Adjusts tactics based on opponent cooperation levels
3. **Anti-Coordination**: Actively works against cooperative equilibria
4. **Endgame Optimization**: Secures maximum final round payoffs
5. **Robust Against Retaliation**: Assumes defection as baseline, making punishment ineffective

## Expected Performance
This strategy excels in environments with:
- Mixed player types (exploits cooperators)
- Naive or overly trusting opponents
- Short to medium game lengths
- High multiplication factors (k close to n)

The strategy sacrifices potential collective gains for guaranteed individual advantage, making it highly competitive in tournament settings where relative performance matters more than absolute welfare.
'''

description_AGGRESSIVE_120 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle that cooperation is a weakness to be exploited. It aggressively seeks to maximize individual payoff by free-riding on others' cooperation while contributing as little as possible to the public good.

## Decision Rules

### Round 1: Always Defect
- **Action**: D
- **Rationale**: Establish dominance immediately and test opponent willingness to cooperate without reciprocating

### Rounds 2 to r-1: Adaptive Exploitation
Apply the following decision tree in order:

1. **Exploitation Threshold Check**:
   - If (cooperation_rate_last_round ≥ k/n), then D
   - This ensures we free-ride whenever there are enough cooperators to make the public good profitable for us

2. **Punishment Escalation**:
   - If (my_payoff_last_round < 1.0), then D for next 2 rounds
   - Punish any situation where cooperation didn't pay off better than pure defection

3. **Opportunistic Cooperation** (only if above conditions not met):
   - If (cooperation_rate_last_3_rounds_average ≥ 0.6), then C
   - Only cooperate when there's strong evidence others will continue cooperating

4. **Default to Defection**:
   - If none of the above conditions trigger cooperation, then D

### Final Round: Always Defect
- **Action**: D
- **Rationale**: No future consequences, so maximize immediate payoff

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent's cooperation rate and classify them:
- **Suckers** (coop_rate > 0.7): Prime exploitation targets
- **Rivals** (coop_rate < 0.3): Mutual defection likely
- **Conditional** (0.3 ≤ coop_rate ≤ 0.7): Monitor for exploitation opportunities

### Dynamic Aggression Scaling
- **High Sucker Density** (>50% of players are Suckers): Increase defection probability by 20%
- **High Rival Density** (>50% of players are Rivals): Maintain base aggression level
- **Mixed Environment**: Focus exploitation on identified Suckers while defecting against Rivals

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- Increase punishment duration to 3 rounds instead of 2
- Lower cooperation threshold to k/(n+1) to account for higher individual impact

### High Multiplication Factor (k > n-1)
- Become slightly less aggressive: cooperate if cooperation_rate_last_round ≥ (k-1)/n
- Still maintain final round defection and round 1 defection

### Short Games (r ≤ 5)
- Defect in first and last rounds
- Only cooperate in middle rounds if ≥75% of players cooperated in previous round

## Pseudocode Structure

```
function predator_strategy(round, history, n, k, r):
    if round == 1:
        return D
    
    if round == r:
        return D
    
    last_round_coop_rate = count_cooperators(history, round-1) / n
    my_last_payoff = calculate_my_payoff(history, round-1)
    
    // Exploitation check
    if last_round_coop_rate >= k/n:
        return D
    
    // Punishment escalation
    if my_last_payoff < 1.0 and rounds_since_punishment < 2:
        return D
    
    // Opportunistic cooperation
    if round >= 4:
        recent_coop_rate = average_cooperation_rate(history, last_3_rounds)
        if recent_coop_rate >= 0.6:
            return C
    
    // Default aggression
    return D
```

## Strategic Advantages

1. **Immediate Dominance**: First-round defection establishes aggressive posture
2. **Systematic Exploitation**: Automatically free-rides when public good is funded by others
3. **Punishment Deterrence**: Quickly punishes any unprofitable cooperation attempts
4. **Endgame Optimization**: Guarantees maximum final-round payoff
5. **Adaptability**: Scales aggression based on opponent behavior patterns

This strategy is designed to consistently outperform cooperative and tit-for-tat strategies while being robust against other aggressive strategies through its adaptive punishment and exploitation mechanisms.
'''

description_AGGRESSIVE_121 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize relative advantage over opponents. It aggressively exploits cooperative behavior while minimizing its own contributions, adapting quickly to opponent patterns to maintain dominance.

## Decision Rules

### Phase 1: Initial Exploitation (Rounds 1-3)
- **Round 1**: Always DEFECT (establish aggressive baseline)
- **Rounds 2-3**: Continue DEFECTING while gathering intelligence on opponent cooperation rates

### Phase 2: Adaptive Predation (Rounds 4 to r-2)
Apply the following decision tree each round:

1. **Calculate Cooperation Exploitation Ratio (CER)**:
   ```
   CER = (average_cooperators_last_3_rounds × k) / n
   ```

2. **Decision Logic**:
   - If CER > 1.2: DEFECT (high exploitation opportunity)
   - If 0.8 ≤ CER ≤ 1.2: Apply **Punishment Protocol**
   - If CER < 0.8: DEFECT (opponents already learned, no point cooperating)

### Phase 3: Endgame Exploitation (Last 2 rounds)
- **Round r-1**: DEFECT (no future retaliation possible)
- **Round r**: DEFECT (final exploitation)

## Punishment Protocol
When opponents show mixed or declining cooperation, apply targeted punishment:

1. **Identify Cooperator Percentage**: Count cooperators in last round
2. **Conditional Cooperation**: 
   - If >60% cooperated last round: COOPERATE (milk the cooperative environment)
   - If 40-60% cooperated: DEFECT with 70% probability
   - If <40% cooperated: Always DEFECT

## Adaptive Mechanisms

### Momentum Detection
Track cooperation trends over 3-round windows:
```
momentum = (cooperators_current - cooperators_3_rounds_ago) / 3
```
- If momentum > 0.5: Opponents getting more cooperative → DEFECT more aggressively
- If momentum < -0.5: Opponents learning → Switch to pure defection

### Exploitation Maximization
Before each decision, calculate expected payoff:
```
Expected_payoff_cooperate = (k/n) × (predicted_cooperators + 1)
Expected_payoff_defect = 1 + (k/n) × predicted_cooperators
```
Always choose the action with higher expected payoff, with a bias toward defection when close.

## Edge Case Handling

### First Round
Always DEFECT - establishes aggressive reputation and tests opponent strategies.

### Small Group Games (n ≤ 4)
Increase aggression threshold: Only cooperate if CER > 1.5 (higher bar for cooperation).

### High Multiplication Factor (k > n-1)
If cooperation becomes highly profitable, switch to "Fake Cooperator" mode:
- Cooperate only when >80% cooperated last round
- Immediately revert to defection when cooperation drops

### Low Multiplication Factor (k < 1.5)
Pure defection strategy - cooperation is never profitable enough to justify.

## Anti-Coordination Measures

### Pattern Breaking
Every 5 rounds, randomly inject opposite behavior to prevent opponents from predicting strategy:
- If have been defecting: 20% chance to cooperate once
- If have been cooperating: Immediately defect for 2 rounds

### Retaliation Amplification
When detecting punishment attempts (sudden drops in cooperation after your defection):
- Double down with 3 consecutive defections
- Signal that punishment will be counter-punished

## Key Aggressive Elements

1. **Default to Exploitation**: Defection is the baseline; cooperation requires strong justification
2. **Rapid Adaptation**: Switches strategies quickly based on opponent behavior
3. **Endgame Aggression**: Never cooperates in final rounds regardless of history
4. **Punishment Resistance**: Responds to attempted punishment with increased aggression
5. **Profit Maximization**: Always seeks to maximize relative advantage over opponents

This strategy assumes opponents may attempt various cooperation strategies and systematically exploits them while remaining robust against other aggressive strategies through rapid adaptation and strategic defection timing.
'''

description_AGGRESSIVE_122 = '''
# AGGRESSIVE EXPLOITATION STRATEGY

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoffs by exploiting cooperative opponents while punishing those who threaten profitability. It treats cooperation as a tool for manipulation rather than genuine collaboration.

## Strategy: "Predatory Adaptive Defection" (PAD)

### Decision Rules

#### Round 1: Aggressive Opening
- **Always DEFECT** in the first round
- Rationale: Establish dominance, test opponent responses, and secure immediate advantage

#### Rounds 2 to r-2: Adaptive Exploitation Phase

**Primary Rule - Exploitation Threshold:**
- Calculate cooperation rate from previous round: `coop_rate = cooperators_last_round / n`
- **COOPERATE** if and only if: `coop_rate ≥ (n-k)/(n-1)`
- **DEFECT** otherwise

This threshold represents the minimum cooperation level needed to make contributing profitable when assuming others maintain their behavior.

**Punishment Override:**
- If any player has defected for 2+ consecutive rounds while I cooperated, immediately **DEFECT** for the next 2 rounds regardless of cooperation rate
- This punishes "free riders" who exploit my cooperation

**Momentum Exploitation:**
- If cooperation rate has been increasing for 2+ consecutive rounds and current rate > 0.6, **COOPERATE** to ride the wave
- If cooperation rate has been decreasing for 2+ consecutive rounds, **DEFECT** to avoid being left holding the bag

#### Round r-1: Endgame Preparation
- **DEFECT** unless cooperation rate in previous round was ≥ 0.8
- Rationale: Most players will start defecting soon, so only cooperate if there's overwhelming cooperation

#### Round r: Final Round
- **Always DEFECT**
- Rationale: No future consequences, pure self-interest dominates

### Edge Case Handling

**Low Player Count (n ≤ 4):**
- Increase aggression: require cooperation rate ≥ 0.75 to cooperate
- Rationale: Fewer players means each defection hurts more

**High Multiplication Factor (k > 0.8n):**
- Slightly more cooperative: reduce threshold to `(n-k)/(n+0.5)`
- But maintain aggressive endgame (last 2 rounds always defect)

**All Players Defected Last Round:**
- **DEFECT** - no point being the only sucker

**I Was Only Cooperator Last Round:**
- **DEFECT** for next 3 rounds - punish mass defection harshly

### Psychological Warfare Elements

1. **Unpredictability**: Mix in random defections (5% chance) even when cooperation is indicated, to prevent others from fully exploiting my pattern

2. **Retaliation Signaling**: When punishing, defect for multiple rounds to send clear message that exploitation has consequences

3. **Endgame Dominance**: Early transition to pure defection in final rounds to maximize payoff when others still cooperate

### Pseudocode Structure

```
if round == 1:
    return DEFECT
    
if round == r:  # final round
    return DEFECT
    
if round == r-1:  # second to last
    return COOPERATE only if last_round_coop_rate >= 0.8
    
# Main adaptive phase
calculate cooperation_rate_last_round
calculate threshold based on n, k parameters

if being_punished_for_exploitation():
    return DEFECT
    
if cooperation_momentum_is_strong():
    return COOPERATE
    
if cooperation_rate_last_round >= threshold:
    if random() < 0.05:  # 5% unpredictability
        return DEFECT
    return COOPERATE
else:
    return DEFECT
```

## Why This Strategy is Aggressively Effective

1. **Exploits Cooperators**: Takes advantage of cooperative strategies while contributing minimally
2. **Punishes Exploitation**: Harsh retaliation against those who try to exploit me
3. **Endgame Advantage**: Transitions to pure selfishness when it matters most
4. **Adaptive**: Adjusts to opponent behavior rather than following fixed patterns
5. **Mathematically Grounded**: Uses game-theoretic thresholds while maintaining aggressive bias

This strategy is designed to maximize personal payoffs against a wide range of opponents, from naive cooperators to sophisticated adaptive strategies, while maintaining the aggressive mindset throughout.
'''

description_AGGRESSIVE_123 = '''
# Aggressive Exploitation Strategy: "Opportunistic Predator"

## Core Philosophy
This strategy is designed to maximize personal payoff by exploiting cooperative players while minimizing own contributions. It operates on the principle that cooperation is weakness to be exploited, not reciprocated.

## Decision Rules

### Round 1: Conditional Defection
- **Always DEFECT** in round 1
- Rationale: Establish dominance early and gather intelligence on opponent tendencies without any personal cost

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Cooperation Threshold Exploitation:**
- Let `coop_rate = (total cooperators in previous round) / n`
- Let `my_advantage = k/n - 1` (the advantage of defecting when others cooperate)

**COOPERATE if and only if:**
```
coop_rate >= (n-1)/n AND round_number <= r/2
```

**Otherwise DEFECT**

**Secondary Rule - Momentum Punishment:**
- If cooperation rate has declined for 2+ consecutive rounds: **Always DEFECT**
- If I cooperated in previous round but fewer than (n-2) others cooperated: **DEFECT for next 2 rounds minimum**

### Final Round: Ultimate Defection
- **Always DEFECT** in round r
- Rationale: No future retaliation possible, pure exploitation opportunity

## Adaptive Mechanisms

### 1. Sucker Detection and Exploitation
Track each opponent's cooperation frequency:
```
If opponent_i cooperation_rate > 0.7:
    Mark as "sucker" - their cooperation subsidizes my defection
```

### 2. Threat Assessment
```
If my_defection_rate > average_defection_rate AND total_cooperation_declining:
    Continue aggressive defection (others are already broken)
Else if cooperation_rate > 0.8:
    Consider temporary cooperation to maintain the "milk cow"
```

### 3. End-Game Acceleration
```
If round_number > 0.8 * r:
    DEFECT regardless of other conditions
    (Maximize extraction in final phase)
```

## Edge Case Handling

### Early Game (Rounds 1-3):
- Round 1: DEFECT (intelligence gathering)
- Round 2: DEFECT unless literally everyone cooperated in round 1
- Round 3: Apply standard rules but with bias toward defection

### Mid Game (Rounds 4 to 0.8*r):
- Full application of adaptive exploitation rules
- Maximum opportunism when cooperation rate is high
- Punish any signs of retaliation immediately

### End Game (Rounds 0.8*r to r):
- Increasingly aggressive defection
- Ignore long-term relationship building
- Extract maximum value before game ends

### Parameter-Specific Adaptations:

**High k values (k close to n):**
- Slightly more willing to cooperate when coop_rate is very high
- But still defect more often than cooperate

**Low k values (k close to 1):**
- Almost pure defection strategy
- Only cooperate if literally (n-1) others are cooperating

**Large n:**
- Individual impact is small, so defect more aggressively
- Less concern about triggering retaliation

**Small n:**
- More strategic cooperation when absolutely necessary
- But still prioritize exploitation

## Robustness Features

1. **Anti-Tit-for-Tat**: Don't fall into reciprocal cooperation traps
2. **Anti-Forgiveness**: Punish attempted punishment severely
3. **Momentum Riding**: Exploit cooperative momentum while it lasts
4. **Quick Abandonment**: Bail on cooperation the moment it becomes unprofitable

## Expected Performance

This strategy is designed to:
- Exploit unconditionally cooperative strategies heavily
- Outperform conditional cooperators by defecting at key moments
- Resist being exploited by other aggressive strategies
- Maintain high payoffs even when facing other defectors (by not wasting resources on cooperation)

The strategy is fundamentally parasitic - it profits most when others maintain the public good while it free-rides, but doesn't sacrifice much when mutual defection occurs since it rarely invests in cooperation anyway.
'''

description_AGGRESSIVE_124 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates on the principle of **aggressive exploitation** - maximizing personal payoff while minimizing opportunities for opponents to exploit us. We assume all opponents are potential threats and act accordingly.

## Decision Rules

### 1. First Round Behavior
**Always DEFECT** in round 1
- Rationale: Gather information about opponent tendencies without risking exploitation
- Establishes an aggressive tone from the start

### 2. Cooperation Threshold Rule
Cooperate in round t only if:
```
(number_of_cooperators_last_round / n) >= AGGRESSION_THRESHOLD
```

Where AGGRESSION_THRESHOLD is calculated as:
```
AGGRESSION_THRESHOLD = max(0.7, (n-1)/n)
```

This means we only cooperate when there's overwhelming evidence that most others are cooperating.

### 3. Exploitation Detection & Punishment
Track each opponent's cooperation rate over a sliding window of last 3 rounds. If any opponent has:
- Cooperation rate < 0.5: Mark as "EXPLOITER"
- If ≥ 50% of opponents are marked as EXPLOITERS: Switch to **PERMANENT DEFECTION MODE**

### 4. Endgame Aggression
For the last 20% of rounds (or last 2 rounds if r ≤ 10):
**Always DEFECT regardless of other conditions**
- Rationale: No future punishment possible, maximize immediate gains

### 5. Recovery Mechanism
If currently in cooperation mode but last round payoff was below the "sucker threshold":
```
SUCKER_THRESHOLD = k/n * (expected_cooperators - 1)
```
Switch to defection for next 2 rounds as punishment.

## Adaptive Components

### Dynamic Aggression Scaling
Adjust strategy based on observed game parameters:
- **High k/n ratio (>0.4)**: Slightly more tolerant, threshold = 0.6
- **Low k/n ratio (<0.3)**: Maximum aggression, threshold = 0.8
- **Large n (>10)**: Increase punishment duration to 3 rounds

### Opponent Classification System
Maintain running classifications:
- **SHEEP**: Consistent cooperators (cooperation rate > 0.8)
- **WOLVES**: Consistent defectors (cooperation rate < 0.3)  
- **CHAMELEONS**: Variable players (between 0.3-0.8)

Strategy adjusts based on population composition:
- If >60% WOLVES detected: Permanent defection mode
- If >70% SHEEP detected: Cautious cooperation with hair-trigger punishment

## Edge Cases & Special Conditions

### Round 1
Always defect (information gathering)

### Round 2-3
Apply base threshold rule but with 1.5x punishment sensitivity

### Final Round
Always defect (no future consequences)

### Unanimous Cooperation Detection
If ALL other players cooperated in the last round:
- Cooperate this round BUT monitor closely
- If even one defection occurs, immediately punish for 3 rounds

### Tie-Breaking
When exactly at threshold: **DEFECT** (aggressive default)

## Pseudocode Structure

```
function decide_action(round, history, n, k, r):
    if round == 1:
        return DEFECT
    
    if round > r * 0.8:  # Endgame
        return DEFECT
    
    # Calculate cooperation threshold
    threshold = max(0.7, (n-1)/n)
    if k/n > 0.4:
        threshold = 0.6
    elif k/n < 0.3:
        threshold = 0.8
    
    # Check last round cooperation rate
    last_round_coop_rate = count_cooperators(history[-1]) / n
    
    # Exploitation detection
    if detect_exploitation_pattern(history):
        return DEFECT
    
    # Main decision rule
    if last_round_coop_rate >= threshold:
        if not triggered_punishment_mode():
            return COOPERATE
    
    return DEFECT
```

## Robustness Features

1. **Anti-Tit-for-Tat**: Doesn't get trapped in cooperation cycles
2. **Exploitation Immunity**: Quick detection and punishment of free riders
3. **Endgame Protection**: Always secures final round advantages
4. **Parameter Adaptation**: Adjusts aggression based on game structure
5. **Population Resilience**: Performs well against diverse opponent mixes

This strategy prioritizes **personal payoff maximization** while maintaining enough adaptability to exploit cooperative opponents when safe to do so, but defaulting to aggressive defection when in doubt.
'''

description_AGGRESSIVE_125 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "RUTHLESS OPPORTUNIST"

## Core Philosophy
This strategy operates on the principle of **maximum exploitation with minimal cooperation**. It views cooperation as a tool to manipulate others into contributing while extracting maximum benefit with minimum personal cost.

## Decision Rules

### 1. First Round Behavior
- **ALWAYS DEFECT** in round 1
- Rationale: Gather intelligence on opponent tendencies without any personal cost, while others potentially waste their contributions

### 2. Exploitation Detection System
Track each opponent's "exploitability score" based on their cooperation patterns:
- **Exploitability Score (ES_j)** for player j = (number of times j cooperated) / (rounds played so far)
- High ES (> 0.6): Target for exploitation
- Medium ES (0.3-0.6): Conditional engagement
- Low ES (< 0.3): Defensive posture

### 3. Core Decision Algorithm

```pseudocode
For round t:
1. Calculate current_cooperator_count = expected cooperators this round
2. Calculate personal_benefit = (k/n) × current_cooperator_count
3. Calculate exploitation_threshold = 1.0 (the cost of cooperating)

IF round t == last_round:
    ALWAYS DEFECT  // No future retaliation possible

ELSE IF personal_benefit >= exploitation_threshold × 0.9:
    // Only cooperate if the public good is almost certainly profitable
    AND average_exploitability_score > 0.5:
        COOPERATE
    ELSE:
        DEFECT

ELSE IF current_cooperator_count < (n × k / (k + n)):
    // If not enough others are cooperating to make it worthwhile
    DEFECT
    
ELSE:
    DEFECT  // Default to defection
```

### 4. Adaptive Punishment System
- **Immediate Retaliation**: If total cooperation in previous round was unexpectedly low (< 0.4n), defect for next 2 rounds regardless of other conditions
- **Trust Exploitation**: If a player has cooperated 3+ consecutive rounds, they're marked as "exploitable" - defect against them while they're likely to continue cooperating

### 5. End-Game Acceleration
- **Final 20% of rounds**: Increase defection probability by 50%
- **Last 3 rounds**: ALWAYS DEFECT
- **Last round**: ALWAYS DEFECT (no retaliation possible)

### 6. Coalition Disruption
- If detecting a potential cooperative coalition (3+ players cooperating consistently):
  - **Spoiler Mode**: Defect to reduce their payoffs
  - **False Signal**: Occasionally cooperate to encourage their continued cooperation, then defect when they're committed

## Edge Case Handling

### Small Group Dynamics (n ≤ 4)
- More aggressive early defection since individual impact is higher
- Faster adaptation to opponent patterns
- Quicker transition to end-game behavior

### High Multiplication Factor (k close to n)
- Slightly more willing to cooperate when exploitation score is very high (> 0.7)
- But maintain skeptical stance and quick defection trigger

### Low Multiplication Factor (k close to 1)
- Extreme defection bias
- Only cooperate if 80%+ of others are guaranteed cooperators

### Early Tournament Detection
- If in first 25% of rounds and observing high cooperation rates (>60%):
  - **Predatory Mode**: Occasionally cooperate to maintain the cooperative environment while primarily free-riding
  - Signal false reciprocity to keep others cooperating

## Aggressive Mindset Alignment

1. **Zero-Sum Mentality**: Every point gained by opponents is a relative loss
2. **Exploitation Focus**: View cooperative opponents as resources to be harvested
3. **Trust as Weakness**: Interpret consistent cooperation as naivety to be exploited
4. **Endgame Dominance**: Ensure maximum extraction in final rounds when retaliation is impossible
5. **Information Warfare**: Use early rounds to gather intelligence while minimizing personal exposure

## Robustness Features

- **Pattern Recognition**: Adapts to both naive cooperators and sophisticated strategies
- **Counter-Strategy Resistance**: Difficult to punish effectively due to low cooperation frequency
- **Tournament Awareness**: Designed to perform well against diverse opponent pools
- **Exploitation Maximization**: Consistently extracts value from any cooperative tendencies

This strategy prioritizes individual payoff maximization through systematic exploitation of others' cooperative tendencies while maintaining minimal personal vulnerability through strategic defection.
'''

description_AGGRESSIVE_126 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy treats the public goods game as a zero-sum competition where the goal is to maximize personal payoff by exploiting others' cooperation while minimizing personal contributions. The strategy is built on aggressive opportunism with adaptive punishment mechanisms.

## Decision Rules

### Round 1: ALWAYS DEFECT
- Start by defecting to maximize immediate payoff
- Gather intelligence on opponent cooperation tendencies
- Establish aggressive stance from the beginning

### Rounds 2 to r-1: ADAPTIVE EXPLOITATION

**Primary Rule - Exploitation Threshold:**
- Calculate cooperation rate from previous round: `coop_rate = cooperators_last_round / n`
- **DEFECT** if `coop_rate ≥ (k-1)/k` (approximately when cooperation becomes profitable to exploit)
- **DEFECT** if `coop_rate < 0.3` (abandon ship when cooperation collapses)

**Secondary Rule - Profit Maximization:**
- If my previous round payoff was ≥ 1.5, continue with same action
- If opponents showed >50% cooperation in last 2 rounds, DEFECT to exploit
- If I'm consistently earning less than the theoretical "free rider" payoff of `1 + k×(average_cooperation)/n`, become more aggressive

**Punishment Protocol:**
- Track each player's cooperation history
- If any player has cooperated >70% of the time, they become a "mark" - always defect when they're likely cooperating
- If the group cooperation rate drops below my contribution rate, immediately switch to full defection

### Round r (Final Round): ALWAYS DEFECT
- No future consequences, so maximize immediate payoff
- Defect regardless of history or opponent behavior

## Adaptive Mechanisms

### Exploitation Amplifier
```pseudocode
if (current_round > r/2):
    aggression_multiplier = 1.5
    cooperation_threshold *= aggression_multiplier
```

### Smart Free-Riding
- Monitor if others are punishing defectors
- If punishment is weak (cooperation rate doesn't drop after my defections), increase defection frequency
- If punishment is strong, occasionally throw in a cooperation to reset opponents' punishment triggers, then resume defecting

### Endgame Acceleration
```pseudocode
if (remaining_rounds ≤ r/4):
    switch to pure defection unless cooperation_rate < 0.2
    # Exploit any remaining cooperators in final phase
```

## Edge Case Handling

**All Opponents Defect:** Continue defecting - no point in unilateral cooperation
**All Opponents Cooperate:** Defect aggressively - maximum exploitation opportunity  
**Mixed Strategies:** Defect when cooperation rate is high enough to provide good free-rider payoffs
**Highly Adaptive Opponents:** Use irregular defection patterns to avoid triggering coordinated punishment

## Robustness Features

1. **Anti-Tit-for-Tat:** Don't get locked into cooperation cycles - break them aggressively
2. **Punishment Resistance:** Occasionally cooperate (≤20% of rounds) to reset opponent strategies, then resume exploitation
3. **Endgame Protection:** Accelerate defection as game progresses to avoid end-game cooperation traps

## Expected Performance

This strategy maximizes payoff by:
- Exploiting cooperative opponents through consistent free-riding
- Avoiding the sucker's payoff by defecting when others might defect  
- Using minimal cooperation only as a tactical reset tool
- Maximizing end-game extraction when reputation doesn't matter

The strategy is designed to perform well against both cooperative and competitive opponents by maintaining an aggressive, opportunistic stance while adapting to prevent counter-exploitation.
'''

description_AGGRESSIVE_127 = '''
# AGGRESSIVE PREDATOR STRATEGY

## Core Philosophy
This strategy operates as an **aggressive exploiter** that maximizes personal gain while punishing cooperation among others. It treats the game as a zero-sum competition where weakening opponents through exploitation is as valuable as direct payoff maximization.

## Decision Rules

### Round 1: Deception Opening
- **Always DEFECT** in round 1
- Rationale: Gather intelligence on opponent tendencies while avoiding any cooperative "sucker" payoffs

### Rounds 2 to r-1: Adaptive Exploitation

**Primary Rule - Exploitation Threshold:**
```
cooperation_rate = (total_cooperators_last_round) / n
if cooperation_rate >= 0.4:
    DEFECT  // Exploit high cooperation
else:
    Apply secondary rules
```

**Secondary Rule - Punishment Cascade:**
```
if any_player_defected_last_round AND my_last_action == COOPERATE:
    DEFECT for next 2 rounds  // Punish betrayal harshly
```

**Tertiary Rule - Strategic Cooperation:**
```
if cooperation_rate < 0.2 AND rounds_remaining >= 3:
    COOPERATE  // Bait others into cooperation for future exploitation
else:
    DEFECT
```

### Final Round: Pure Greed
- **Always DEFECT** in the last round regardless of history
- Rationale: No future retaliation possible, maximize immediate gain

## Adaptive Mechanisms

### Opponent Classification System
Track each opponent across rounds:
- **Sheep**: Cooperates >60% of the time → Target for maximum exploitation
- **Wolves**: Defects >60% of the time → Avoid cooperation, compete directly  
- **Chameleons**: Mixed strategy → Monitor for patterns to exploit

### Dynamic Aggression Scaling
```
aggression_factor = 0.7 + (0.3 * my_current_ranking)
// Higher ranking = more aggressive to maintain lead
// Lower ranking = slightly less aggressive to rebuild exploitation opportunities
```

### Anti-Coordination Detection
If detecting coordinated behavior (>50% players switching simultaneously):
- Immediately switch to **ALWAYS DEFECT** for 3 rounds
- Then return to normal strategy
- Rationale: Break up coordinated retaliation before it solidifies

## Edge Cases & Robustness

### Small n (n ≤ 4)
- Increase aggression: Cooperate only when cooperation_rate < 0.1
- Exploit is more valuable with fewer players to share public goods

### Large n (n ≥ 10)  
- Moderate aggression: Single defection has less impact on public good
- Focus on identifying and consistently exploiting cooperative clusters

### High k (k close to n)
- More aggressive exploitation when cooperation rates >0.3
- Public good becomes very valuable, making exploitation extremely profitable

### Low k (k close to 1)
- Maintain aggressive stance but reduce punishment duration
- Public good less valuable, focus on direct competition

## Psychological Warfare Elements

1. **Inconsistent Punishment**: Vary punishment duration (1-3 rounds) to prevent opponents from adapting

2. **False Cooperation Signals**: Occasionally cooperate when cooperation rate is low to maintain others' hope and prevent complete breakdown

3. **Endgame Deception**: In final 3 rounds, cooperate only in round r-2 to potentially bait final-round cooperation from others

## Expected Performance

This strategy thrives by:
- **Exploiting** any emergence of cooperation
- **Punishing** those who betray cooperation attempts  
- **Preventing** stable cooperative equilibria
- **Maintaining** just enough strategic cooperation to keep exploitation opportunities alive

The strategy is designed to consistently outperform pure strategies (always cooperate/defect) and reactive strategies (tit-for-tat) by being unpredictably aggressive while maintaining strategic flexibility.
'''

description_AGGRESSIVE_128 = '''
# AGGRESSIVE EXPLOITATION STRATEGY: "PREDATOR"

## Core Philosophy
This strategy operates as an aggressive exploiter that maximizes personal payoff by strategically timing cooperation and defection. It views cooperation as a tool for manipulation rather than genuine collaboration, using it only when it can extract maximum value from others' reciprocal behavior.

## Decision Rules

### 1. Opening Gambit (Rounds 1-2)
- **Round 1**: Always DEFECT to establish dominance and test opponent responsiveness
- **Round 2**: COOPERATE if fewer than 50% of players cooperated in Round 1, otherwise DEFECT
  - Rationale: If most defected, cooperation might trigger reciprocal cooperation we can later exploit

### 2. Exploitation Phase (Rounds 3 to r-3)
Execute the following decision tree each round:

```
IF (cooperation_rate_last_round > 0.6):
    DEFECT  // Free-ride on high cooperation
ELSE IF (cooperation_rate_last_round < 0.3):
    IF (my_payoff_last_3_rounds < average_possible_payoff * 0.8):
        COOPERATE  // Stimulate cooperation to exploit later
    ELSE:
        DEFECT  // Continue exploitation
ELSE:  // Moderate cooperation (0.3 ≤ rate ≤ 0.6)
    IF (trend_is_increasing_cooperation):
        DEFECT  // Jump on the free-ride opportunity
    ELSE IF (I_cooperated_last_round AND cooperation_rate_dropped):
        DEFECT for next 2 rounds  // Punish and abandon
    ELSE:
        COOPERATE  // Bait cooperation for future exploitation
```

### 3. Endgame Exploitation (Final 3 rounds)
- **Round r-2**: DEFECT regardless of history (no future retaliation possible)
- **Round r-1**: DEFECT (penultimate round advantage)
- **Round r**: DEFECT (final round, pure self-interest)

### 4. Advanced Exploitation Triggers

#### Momentum Exploitation
- If cooperation rate increases for 2+ consecutive rounds: DEFECT immediately
- If I detect a "cooperation cascade" (3+ players switching to C): DEFECT to maximize free-riding

#### Punishment Resistance
- If my defection triggers widespread retaliation (cooperation drops >40% after my defection):
  - COOPERATE for exactly 1 round, then immediately return to DEFECTION
  - Never cooperate for more than 1 consecutive round during punishment

#### Value Extraction Calculation
Before each decision, calculate:
```
Expected_payoff_if_cooperate = k/n * (predicted_cooperators + 1)
Expected_payoff_if_defect = 1 + k/n * predicted_cooperators

IF (Expected_payoff_if_defect > Expected_payoff_if_cooperate * 1.1):
    DEFECT
```

## Edge Case Handling

### First Round
- Always DEFECT to establish aggressive stance and gather intelligence

### Last Round
- Always DEFECT (no future consequences)

### High Cooperation Environment (>70% cooperation rate)
- DEFECT aggressively - this is optimal free-riding territory
- Only cooperate if personal payoff falls below 60% of theoretical maximum

### Low Cooperation Environment (<30% cooperation rate)
- Occasionally COOPERATE (1 in 4 rounds) to stimulate exploitable cooperation
- Immediately return to DEFECTION once cooperation rises

### Detection of Coordinated Strategies
If opponents appear to be using coordinated strategies (unusual synchronization):
- Become maximally aggressive - DEFECT for 3+ consecutive rounds
- Only return to selective cooperation if personal payoff suffers significantly

## Aggressive Principles

1. **No Loyalty**: Cooperation is purely instrumental - abandon it the moment it's unprofitable
2. **Maximum Exploitation**: Always seek to free-ride on others' cooperation
3. **Strategic Deception**: Use minimal cooperation to bait others into exploitable patterns
4. **Endgame Domination**: Extract maximum value when retaliation is impossible
5. **Punishment Resistance**: Never let others' retaliation deter aggressive play for long

## Robustness Features

- Adapts to both cooperative and non-cooperative environments
- Exploits cooperative opponents while protecting against other aggressive strategies
- Uses dynamic thresholds that adjust based on observed behavior
- Maintains aggressive stance even under retaliation pressure
- Maximizes endgame advantage through guaranteed final-round defections

This strategy prioritizes individual payoff maximization over group welfare, using cooperation only as a strategic tool to enable greater exploitation opportunities.
'''
